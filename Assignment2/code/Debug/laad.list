
laad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0f4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  0800c1b8  0800c1b8  0000d1b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c818  0800c818  0000e1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c818  0800c818  0000d818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c820  0800c820  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c820  0800c820  0000d820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c824  0800c824  0000d824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800c828  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  200001d4  0800c9fc  0000e1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000060c  0800c9fc  0000e60c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000debf  00000000  00000000  0000e1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002286  00000000  00000000  0001c0bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  0001e348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000986  00000000  00000000  0001ef88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016207  00000000  00000000  0001f90e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fed1  00000000  00000000  00035b15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081e9d  00000000  00000000  000459e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7883  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044d8  00000000  00000000  000c78c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000cbda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c19c 	.word	0x0800c19c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	0800c19c 	.word	0x0800c19c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f002 f80b 	bl	8002458 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 ff4b 	bl	80022e8 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fffd 	bl	8002458 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fff3 	bl	8002458 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 ff75 	bl	8002370 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 ff6b 	bl	8002370 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fcdd 	bl	8000e70 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc5d 	bl	8000d80 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fccf 	bl	8000e70 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fcc5 	bl	8000e70 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc6b 	bl	8000dd0 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc61 	bl	8000dd0 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	@ (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f8a2 	bl	8000694 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1824      	adds	r4, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	42a3      	cmp	r3, r4
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c23      	lsrs	r3, r4, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0424      	lsls	r4, r4, #16
 80005aa:	1960      	adds	r0, r4, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)

080005b8 <__aeabi_d2uiz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0c      	ldr	r3, [pc, #48]	@ (80005f0 <__aeabi_d2uiz+0x38>)
 80005be:	0004      	movs	r4, r0
 80005c0:	000d      	movs	r5, r1
 80005c2:	f7ff ff67 	bl	8000494 <__aeabi_dcmpge>
 80005c6:	2800      	cmp	r0, #0
 80005c8:	d104      	bne.n	80005d4 <__aeabi_d2uiz+0x1c>
 80005ca:	0020      	movs	r0, r4
 80005cc:	0029      	movs	r1, r5
 80005ce:	f002 fe3b 	bl	8003248 <__aeabi_d2iz>
 80005d2:	bd70      	pop	{r4, r5, r6, pc}
 80005d4:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <__aeabi_d2uiz+0x38>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	0020      	movs	r0, r4
 80005da:	0029      	movs	r1, r5
 80005dc:	f002 fa76 	bl	8002acc <__aeabi_dsub>
 80005e0:	f002 fe32 	bl	8003248 <__aeabi_d2iz>
 80005e4:	2380      	movs	r3, #128	@ 0x80
 80005e6:	061b      	lsls	r3, r3, #24
 80005e8:	469c      	mov	ip, r3
 80005ea:	4460      	add	r0, ip
 80005ec:	e7f1      	b.n	80005d2 <__aeabi_d2uiz+0x1a>
 80005ee:	46c0      	nop			@ (mov r8, r8)
 80005f0:	41e00000 	.word	0x41e00000

080005f4 <__aeabi_d2lz>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	2200      	movs	r2, #0
 80005f8:	2300      	movs	r3, #0
 80005fa:	0004      	movs	r4, r0
 80005fc:	000d      	movs	r5, r1
 80005fe:	f7ff ff2b 	bl	8000458 <__aeabi_dcmplt>
 8000602:	2800      	cmp	r0, #0
 8000604:	d108      	bne.n	8000618 <__aeabi_d2lz+0x24>
 8000606:	0020      	movs	r0, r4
 8000608:	0029      	movs	r1, r5
 800060a:	f000 f80f 	bl	800062c <__aeabi_d2ulz>
 800060e:	0002      	movs	r2, r0
 8000610:	000b      	movs	r3, r1
 8000612:	0010      	movs	r0, r2
 8000614:	0019      	movs	r1, r3
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	2380      	movs	r3, #128	@ 0x80
 800061a:	061b      	lsls	r3, r3, #24
 800061c:	18e9      	adds	r1, r5, r3
 800061e:	0020      	movs	r0, r4
 8000620:	f000 f804 	bl	800062c <__aeabi_d2ulz>
 8000624:	2300      	movs	r3, #0
 8000626:	4242      	negs	r2, r0
 8000628:	418b      	sbcs	r3, r1
 800062a:	e7f2      	b.n	8000612 <__aeabi_d2lz+0x1e>

0800062c <__aeabi_d2ulz>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	2200      	movs	r2, #0
 8000630:	4b0b      	ldr	r3, [pc, #44]	@ (8000660 <__aeabi_d2ulz+0x34>)
 8000632:	000d      	movs	r5, r1
 8000634:	0004      	movs	r4, r0
 8000636:	f001 ff81 	bl	800253c <__aeabi_dmul>
 800063a:	f7ff ffbd 	bl	80005b8 <__aeabi_d2uiz>
 800063e:	0006      	movs	r6, r0
 8000640:	f002 fe6c 	bl	800331c <__aeabi_ui2d>
 8000644:	2200      	movs	r2, #0
 8000646:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <__aeabi_d2ulz+0x38>)
 8000648:	f001 ff78 	bl	800253c <__aeabi_dmul>
 800064c:	0002      	movs	r2, r0
 800064e:	000b      	movs	r3, r1
 8000650:	0020      	movs	r0, r4
 8000652:	0029      	movs	r1, r5
 8000654:	f002 fa3a 	bl	8002acc <__aeabi_dsub>
 8000658:	f7ff ffae 	bl	80005b8 <__aeabi_d2uiz>
 800065c:	0031      	movs	r1, r6
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	3df00000 	.word	0x3df00000
 8000664:	41f00000 	.word	0x41f00000

08000668 <__aeabi_l2d>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	0006      	movs	r6, r0
 800066c:	0008      	movs	r0, r1
 800066e:	f002 fe27 	bl	80032c0 <__aeabi_i2d>
 8000672:	2200      	movs	r2, #0
 8000674:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <__aeabi_l2d+0x28>)
 8000676:	f001 ff61 	bl	800253c <__aeabi_dmul>
 800067a:	000d      	movs	r5, r1
 800067c:	0004      	movs	r4, r0
 800067e:	0030      	movs	r0, r6
 8000680:	f002 fe4c 	bl	800331c <__aeabi_ui2d>
 8000684:	002b      	movs	r3, r5
 8000686:	0022      	movs	r2, r4
 8000688:	f000 ffb0 	bl	80015ec <__aeabi_dadd>
 800068c:	bd70      	pop	{r4, r5, r6, pc}
 800068e:	46c0      	nop			@ (mov r8, r8)
 8000690:	41f00000 	.word	0x41f00000

08000694 <__udivmoddi4>:
 8000694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000696:	4657      	mov	r7, sl
 8000698:	464e      	mov	r6, r9
 800069a:	4645      	mov	r5, r8
 800069c:	46de      	mov	lr, fp
 800069e:	b5e0      	push	{r5, r6, r7, lr}
 80006a0:	0004      	movs	r4, r0
 80006a2:	000d      	movs	r5, r1
 80006a4:	4692      	mov	sl, r2
 80006a6:	4699      	mov	r9, r3
 80006a8:	b083      	sub	sp, #12
 80006aa:	428b      	cmp	r3, r1
 80006ac:	d830      	bhi.n	8000710 <__udivmoddi4+0x7c>
 80006ae:	d02d      	beq.n	800070c <__udivmoddi4+0x78>
 80006b0:	4649      	mov	r1, r9
 80006b2:	4650      	mov	r0, sl
 80006b4:	f002 ff40 	bl	8003538 <__clzdi2>
 80006b8:	0029      	movs	r1, r5
 80006ba:	0006      	movs	r6, r0
 80006bc:	0020      	movs	r0, r4
 80006be:	f002 ff3b 	bl	8003538 <__clzdi2>
 80006c2:	1a33      	subs	r3, r6, r0
 80006c4:	4698      	mov	r8, r3
 80006c6:	3b20      	subs	r3, #32
 80006c8:	d434      	bmi.n	8000734 <__udivmoddi4+0xa0>
 80006ca:	469b      	mov	fp, r3
 80006cc:	4653      	mov	r3, sl
 80006ce:	465a      	mov	r2, fp
 80006d0:	4093      	lsls	r3, r2
 80006d2:	4642      	mov	r2, r8
 80006d4:	001f      	movs	r7, r3
 80006d6:	4653      	mov	r3, sl
 80006d8:	4093      	lsls	r3, r2
 80006da:	001e      	movs	r6, r3
 80006dc:	42af      	cmp	r7, r5
 80006de:	d83b      	bhi.n	8000758 <__udivmoddi4+0xc4>
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d100      	bne.n	80006e6 <__udivmoddi4+0x52>
 80006e4:	e079      	b.n	80007da <__udivmoddi4+0x146>
 80006e6:	465b      	mov	r3, fp
 80006e8:	1ba4      	subs	r4, r4, r6
 80006ea:	41bd      	sbcs	r5, r7
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	da00      	bge.n	80006f2 <__udivmoddi4+0x5e>
 80006f0:	e076      	b.n	80007e0 <__udivmoddi4+0x14c>
 80006f2:	2200      	movs	r2, #0
 80006f4:	2300      	movs	r3, #0
 80006f6:	9200      	str	r2, [sp, #0]
 80006f8:	9301      	str	r3, [sp, #4]
 80006fa:	2301      	movs	r3, #1
 80006fc:	465a      	mov	r2, fp
 80006fe:	4093      	lsls	r3, r2
 8000700:	9301      	str	r3, [sp, #4]
 8000702:	2301      	movs	r3, #1
 8000704:	4642      	mov	r2, r8
 8000706:	4093      	lsls	r3, r2
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	e029      	b.n	8000760 <__udivmoddi4+0xcc>
 800070c:	4282      	cmp	r2, r0
 800070e:	d9cf      	bls.n	80006b0 <__udivmoddi4+0x1c>
 8000710:	2200      	movs	r2, #0
 8000712:	2300      	movs	r3, #0
 8000714:	9200      	str	r2, [sp, #0]
 8000716:	9301      	str	r3, [sp, #4]
 8000718:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <__udivmoddi4+0x8e>
 800071e:	601c      	str	r4, [r3, #0]
 8000720:	605d      	str	r5, [r3, #4]
 8000722:	9800      	ldr	r0, [sp, #0]
 8000724:	9901      	ldr	r1, [sp, #4]
 8000726:	b003      	add	sp, #12
 8000728:	bcf0      	pop	{r4, r5, r6, r7}
 800072a:	46bb      	mov	fp, r7
 800072c:	46b2      	mov	sl, r6
 800072e:	46a9      	mov	r9, r5
 8000730:	46a0      	mov	r8, r4
 8000732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000734:	4642      	mov	r2, r8
 8000736:	469b      	mov	fp, r3
 8000738:	2320      	movs	r3, #32
 800073a:	1a9b      	subs	r3, r3, r2
 800073c:	4652      	mov	r2, sl
 800073e:	40da      	lsrs	r2, r3
 8000740:	4641      	mov	r1, r8
 8000742:	0013      	movs	r3, r2
 8000744:	464a      	mov	r2, r9
 8000746:	408a      	lsls	r2, r1
 8000748:	0017      	movs	r7, r2
 800074a:	4642      	mov	r2, r8
 800074c:	431f      	orrs	r7, r3
 800074e:	4653      	mov	r3, sl
 8000750:	4093      	lsls	r3, r2
 8000752:	001e      	movs	r6, r3
 8000754:	42af      	cmp	r7, r5
 8000756:	d9c3      	bls.n	80006e0 <__udivmoddi4+0x4c>
 8000758:	2200      	movs	r2, #0
 800075a:	2300      	movs	r3, #0
 800075c:	9200      	str	r2, [sp, #0]
 800075e:	9301      	str	r3, [sp, #4]
 8000760:	4643      	mov	r3, r8
 8000762:	2b00      	cmp	r3, #0
 8000764:	d0d8      	beq.n	8000718 <__udivmoddi4+0x84>
 8000766:	07fb      	lsls	r3, r7, #31
 8000768:	0872      	lsrs	r2, r6, #1
 800076a:	431a      	orrs	r2, r3
 800076c:	4646      	mov	r6, r8
 800076e:	087b      	lsrs	r3, r7, #1
 8000770:	e00e      	b.n	8000790 <__udivmoddi4+0xfc>
 8000772:	42ab      	cmp	r3, r5
 8000774:	d101      	bne.n	800077a <__udivmoddi4+0xe6>
 8000776:	42a2      	cmp	r2, r4
 8000778:	d80c      	bhi.n	8000794 <__udivmoddi4+0x100>
 800077a:	1aa4      	subs	r4, r4, r2
 800077c:	419d      	sbcs	r5, r3
 800077e:	2001      	movs	r0, #1
 8000780:	1924      	adds	r4, r4, r4
 8000782:	416d      	adcs	r5, r5
 8000784:	2100      	movs	r1, #0
 8000786:	3e01      	subs	r6, #1
 8000788:	1824      	adds	r4, r4, r0
 800078a:	414d      	adcs	r5, r1
 800078c:	2e00      	cmp	r6, #0
 800078e:	d006      	beq.n	800079e <__udivmoddi4+0x10a>
 8000790:	42ab      	cmp	r3, r5
 8000792:	d9ee      	bls.n	8000772 <__udivmoddi4+0xde>
 8000794:	3e01      	subs	r6, #1
 8000796:	1924      	adds	r4, r4, r4
 8000798:	416d      	adcs	r5, r5
 800079a:	2e00      	cmp	r6, #0
 800079c:	d1f8      	bne.n	8000790 <__udivmoddi4+0xfc>
 800079e:	9800      	ldr	r0, [sp, #0]
 80007a0:	9901      	ldr	r1, [sp, #4]
 80007a2:	465b      	mov	r3, fp
 80007a4:	1900      	adds	r0, r0, r4
 80007a6:	4169      	adcs	r1, r5
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	db24      	blt.n	80007f6 <__udivmoddi4+0x162>
 80007ac:	002b      	movs	r3, r5
 80007ae:	465a      	mov	r2, fp
 80007b0:	4644      	mov	r4, r8
 80007b2:	40d3      	lsrs	r3, r2
 80007b4:	002a      	movs	r2, r5
 80007b6:	40e2      	lsrs	r2, r4
 80007b8:	001c      	movs	r4, r3
 80007ba:	465b      	mov	r3, fp
 80007bc:	0015      	movs	r5, r2
 80007be:	2b00      	cmp	r3, #0
 80007c0:	db2a      	blt.n	8000818 <__udivmoddi4+0x184>
 80007c2:	0026      	movs	r6, r4
 80007c4:	409e      	lsls	r6, r3
 80007c6:	0033      	movs	r3, r6
 80007c8:	0026      	movs	r6, r4
 80007ca:	4647      	mov	r7, r8
 80007cc:	40be      	lsls	r6, r7
 80007ce:	0032      	movs	r2, r6
 80007d0:	1a80      	subs	r0, r0, r2
 80007d2:	4199      	sbcs	r1, r3
 80007d4:	9000      	str	r0, [sp, #0]
 80007d6:	9101      	str	r1, [sp, #4]
 80007d8:	e79e      	b.n	8000718 <__udivmoddi4+0x84>
 80007da:	42a3      	cmp	r3, r4
 80007dc:	d8bc      	bhi.n	8000758 <__udivmoddi4+0xc4>
 80007de:	e782      	b.n	80006e6 <__udivmoddi4+0x52>
 80007e0:	4642      	mov	r2, r8
 80007e2:	2320      	movs	r3, #32
 80007e4:	2100      	movs	r1, #0
 80007e6:	1a9b      	subs	r3, r3, r2
 80007e8:	2200      	movs	r2, #0
 80007ea:	9100      	str	r1, [sp, #0]
 80007ec:	9201      	str	r2, [sp, #4]
 80007ee:	2201      	movs	r2, #1
 80007f0:	40da      	lsrs	r2, r3
 80007f2:	9201      	str	r2, [sp, #4]
 80007f4:	e785      	b.n	8000702 <__udivmoddi4+0x6e>
 80007f6:	4642      	mov	r2, r8
 80007f8:	2320      	movs	r3, #32
 80007fa:	1a9b      	subs	r3, r3, r2
 80007fc:	002a      	movs	r2, r5
 80007fe:	4646      	mov	r6, r8
 8000800:	409a      	lsls	r2, r3
 8000802:	0023      	movs	r3, r4
 8000804:	40f3      	lsrs	r3, r6
 8000806:	4644      	mov	r4, r8
 8000808:	4313      	orrs	r3, r2
 800080a:	002a      	movs	r2, r5
 800080c:	40e2      	lsrs	r2, r4
 800080e:	001c      	movs	r4, r3
 8000810:	465b      	mov	r3, fp
 8000812:	0015      	movs	r5, r2
 8000814:	2b00      	cmp	r3, #0
 8000816:	dad4      	bge.n	80007c2 <__udivmoddi4+0x12e>
 8000818:	4642      	mov	r2, r8
 800081a:	002f      	movs	r7, r5
 800081c:	2320      	movs	r3, #32
 800081e:	0026      	movs	r6, r4
 8000820:	4097      	lsls	r7, r2
 8000822:	1a9b      	subs	r3, r3, r2
 8000824:	40de      	lsrs	r6, r3
 8000826:	003b      	movs	r3, r7
 8000828:	4333      	orrs	r3, r6
 800082a:	e7cd      	b.n	80007c8 <__udivmoddi4+0x134>

0800082c <__aeabi_fadd>:
 800082c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800082e:	46ce      	mov	lr, r9
 8000830:	4647      	mov	r7, r8
 8000832:	0243      	lsls	r3, r0, #9
 8000834:	0a5a      	lsrs	r2, r3, #9
 8000836:	024e      	lsls	r6, r1, #9
 8000838:	0045      	lsls	r5, r0, #1
 800083a:	0fc4      	lsrs	r4, r0, #31
 800083c:	0048      	lsls	r0, r1, #1
 800083e:	4691      	mov	r9, r2
 8000840:	0e2d      	lsrs	r5, r5, #24
 8000842:	0a72      	lsrs	r2, r6, #9
 8000844:	0e00      	lsrs	r0, r0, #24
 8000846:	4694      	mov	ip, r2
 8000848:	b580      	push	{r7, lr}
 800084a:	099b      	lsrs	r3, r3, #6
 800084c:	0fc9      	lsrs	r1, r1, #31
 800084e:	09b6      	lsrs	r6, r6, #6
 8000850:	1a2a      	subs	r2, r5, r0
 8000852:	428c      	cmp	r4, r1
 8000854:	d021      	beq.n	800089a <__aeabi_fadd+0x6e>
 8000856:	2a00      	cmp	r2, #0
 8000858:	dd0d      	ble.n	8000876 <__aeabi_fadd+0x4a>
 800085a:	2800      	cmp	r0, #0
 800085c:	d12d      	bne.n	80008ba <__aeabi_fadd+0x8e>
 800085e:	2e00      	cmp	r6, #0
 8000860:	d100      	bne.n	8000864 <__aeabi_fadd+0x38>
 8000862:	e08d      	b.n	8000980 <__aeabi_fadd+0x154>
 8000864:	1e51      	subs	r1, r2, #1
 8000866:	2a01      	cmp	r2, #1
 8000868:	d100      	bne.n	800086c <__aeabi_fadd+0x40>
 800086a:	e11d      	b.n	8000aa8 <__aeabi_fadd+0x27c>
 800086c:	2aff      	cmp	r2, #255	@ 0xff
 800086e:	d100      	bne.n	8000872 <__aeabi_fadd+0x46>
 8000870:	e0ab      	b.n	80009ca <__aeabi_fadd+0x19e>
 8000872:	000a      	movs	r2, r1
 8000874:	e027      	b.n	80008c6 <__aeabi_fadd+0x9a>
 8000876:	2a00      	cmp	r2, #0
 8000878:	d04d      	beq.n	8000916 <__aeabi_fadd+0xea>
 800087a:	1b42      	subs	r2, r0, r5
 800087c:	2d00      	cmp	r5, #0
 800087e:	d000      	beq.n	8000882 <__aeabi_fadd+0x56>
 8000880:	e0cc      	b.n	8000a1c <__aeabi_fadd+0x1f0>
 8000882:	2b00      	cmp	r3, #0
 8000884:	d100      	bne.n	8000888 <__aeabi_fadd+0x5c>
 8000886:	e079      	b.n	800097c <__aeabi_fadd+0x150>
 8000888:	1e54      	subs	r4, r2, #1
 800088a:	2a01      	cmp	r2, #1
 800088c:	d100      	bne.n	8000890 <__aeabi_fadd+0x64>
 800088e:	e128      	b.n	8000ae2 <__aeabi_fadd+0x2b6>
 8000890:	2aff      	cmp	r2, #255	@ 0xff
 8000892:	d100      	bne.n	8000896 <__aeabi_fadd+0x6a>
 8000894:	e097      	b.n	80009c6 <__aeabi_fadd+0x19a>
 8000896:	0022      	movs	r2, r4
 8000898:	e0c5      	b.n	8000a26 <__aeabi_fadd+0x1fa>
 800089a:	2a00      	cmp	r2, #0
 800089c:	dc00      	bgt.n	80008a0 <__aeabi_fadd+0x74>
 800089e:	e096      	b.n	80009ce <__aeabi_fadd+0x1a2>
 80008a0:	2800      	cmp	r0, #0
 80008a2:	d04f      	beq.n	8000944 <__aeabi_fadd+0x118>
 80008a4:	2dff      	cmp	r5, #255	@ 0xff
 80008a6:	d100      	bne.n	80008aa <__aeabi_fadd+0x7e>
 80008a8:	e08f      	b.n	80009ca <__aeabi_fadd+0x19e>
 80008aa:	2180      	movs	r1, #128	@ 0x80
 80008ac:	04c9      	lsls	r1, r1, #19
 80008ae:	430e      	orrs	r6, r1
 80008b0:	2a1b      	cmp	r2, #27
 80008b2:	dd51      	ble.n	8000958 <__aeabi_fadd+0x12c>
 80008b4:	002a      	movs	r2, r5
 80008b6:	3301      	adds	r3, #1
 80008b8:	e018      	b.n	80008ec <__aeabi_fadd+0xc0>
 80008ba:	2dff      	cmp	r5, #255	@ 0xff
 80008bc:	d100      	bne.n	80008c0 <__aeabi_fadd+0x94>
 80008be:	e084      	b.n	80009ca <__aeabi_fadd+0x19e>
 80008c0:	2180      	movs	r1, #128	@ 0x80
 80008c2:	04c9      	lsls	r1, r1, #19
 80008c4:	430e      	orrs	r6, r1
 80008c6:	2101      	movs	r1, #1
 80008c8:	2a1b      	cmp	r2, #27
 80008ca:	dc08      	bgt.n	80008de <__aeabi_fadd+0xb2>
 80008cc:	0031      	movs	r1, r6
 80008ce:	2020      	movs	r0, #32
 80008d0:	40d1      	lsrs	r1, r2
 80008d2:	1a82      	subs	r2, r0, r2
 80008d4:	4096      	lsls	r6, r2
 80008d6:	0032      	movs	r2, r6
 80008d8:	1e50      	subs	r0, r2, #1
 80008da:	4182      	sbcs	r2, r0
 80008dc:	4311      	orrs	r1, r2
 80008de:	1a5b      	subs	r3, r3, r1
 80008e0:	015a      	lsls	r2, r3, #5
 80008e2:	d459      	bmi.n	8000998 <__aeabi_fadd+0x16c>
 80008e4:	2107      	movs	r1, #7
 80008e6:	002a      	movs	r2, r5
 80008e8:	4019      	ands	r1, r3
 80008ea:	d049      	beq.n	8000980 <__aeabi_fadd+0x154>
 80008ec:	210f      	movs	r1, #15
 80008ee:	4019      	ands	r1, r3
 80008f0:	2904      	cmp	r1, #4
 80008f2:	d000      	beq.n	80008f6 <__aeabi_fadd+0xca>
 80008f4:	3304      	adds	r3, #4
 80008f6:	0159      	lsls	r1, r3, #5
 80008f8:	d542      	bpl.n	8000980 <__aeabi_fadd+0x154>
 80008fa:	1c50      	adds	r0, r2, #1
 80008fc:	2afe      	cmp	r2, #254	@ 0xfe
 80008fe:	d03a      	beq.n	8000976 <__aeabi_fadd+0x14a>
 8000900:	019b      	lsls	r3, r3, #6
 8000902:	b2c0      	uxtb	r0, r0
 8000904:	0a5b      	lsrs	r3, r3, #9
 8000906:	05c0      	lsls	r0, r0, #23
 8000908:	4318      	orrs	r0, r3
 800090a:	07e4      	lsls	r4, r4, #31
 800090c:	4320      	orrs	r0, r4
 800090e:	bcc0      	pop	{r6, r7}
 8000910:	46b9      	mov	r9, r7
 8000912:	46b0      	mov	r8, r6
 8000914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000916:	20fe      	movs	r0, #254	@ 0xfe
 8000918:	4680      	mov	r8, r0
 800091a:	1c6f      	adds	r7, r5, #1
 800091c:	0038      	movs	r0, r7
 800091e:	4647      	mov	r7, r8
 8000920:	4207      	tst	r7, r0
 8000922:	d000      	beq.n	8000926 <__aeabi_fadd+0xfa>
 8000924:	e08e      	b.n	8000a44 <__aeabi_fadd+0x218>
 8000926:	2d00      	cmp	r5, #0
 8000928:	d000      	beq.n	800092c <__aeabi_fadd+0x100>
 800092a:	e0b4      	b.n	8000a96 <__aeabi_fadd+0x26a>
 800092c:	2b00      	cmp	r3, #0
 800092e:	d100      	bne.n	8000932 <__aeabi_fadd+0x106>
 8000930:	e0db      	b.n	8000aea <__aeabi_fadd+0x2be>
 8000932:	2e00      	cmp	r6, #0
 8000934:	d06c      	beq.n	8000a10 <__aeabi_fadd+0x1e4>
 8000936:	1b98      	subs	r0, r3, r6
 8000938:	0145      	lsls	r5, r0, #5
 800093a:	d400      	bmi.n	800093e <__aeabi_fadd+0x112>
 800093c:	e0f7      	b.n	8000b2e <__aeabi_fadd+0x302>
 800093e:	000c      	movs	r4, r1
 8000940:	1af3      	subs	r3, r6, r3
 8000942:	e03d      	b.n	80009c0 <__aeabi_fadd+0x194>
 8000944:	2e00      	cmp	r6, #0
 8000946:	d01b      	beq.n	8000980 <__aeabi_fadd+0x154>
 8000948:	1e51      	subs	r1, r2, #1
 800094a:	2a01      	cmp	r2, #1
 800094c:	d100      	bne.n	8000950 <__aeabi_fadd+0x124>
 800094e:	e082      	b.n	8000a56 <__aeabi_fadd+0x22a>
 8000950:	2aff      	cmp	r2, #255	@ 0xff
 8000952:	d03a      	beq.n	80009ca <__aeabi_fadd+0x19e>
 8000954:	000a      	movs	r2, r1
 8000956:	e7ab      	b.n	80008b0 <__aeabi_fadd+0x84>
 8000958:	0031      	movs	r1, r6
 800095a:	2020      	movs	r0, #32
 800095c:	40d1      	lsrs	r1, r2
 800095e:	1a82      	subs	r2, r0, r2
 8000960:	4096      	lsls	r6, r2
 8000962:	0032      	movs	r2, r6
 8000964:	1e50      	subs	r0, r2, #1
 8000966:	4182      	sbcs	r2, r0
 8000968:	430a      	orrs	r2, r1
 800096a:	189b      	adds	r3, r3, r2
 800096c:	015a      	lsls	r2, r3, #5
 800096e:	d5b9      	bpl.n	80008e4 <__aeabi_fadd+0xb8>
 8000970:	1c6a      	adds	r2, r5, #1
 8000972:	2dfe      	cmp	r5, #254	@ 0xfe
 8000974:	d175      	bne.n	8000a62 <__aeabi_fadd+0x236>
 8000976:	20ff      	movs	r0, #255	@ 0xff
 8000978:	2300      	movs	r3, #0
 800097a:	e7c4      	b.n	8000906 <__aeabi_fadd+0xda>
 800097c:	000c      	movs	r4, r1
 800097e:	0033      	movs	r3, r6
 8000980:	08db      	lsrs	r3, r3, #3
 8000982:	2aff      	cmp	r2, #255	@ 0xff
 8000984:	d146      	bne.n	8000a14 <__aeabi_fadd+0x1e8>
 8000986:	2b00      	cmp	r3, #0
 8000988:	d0f5      	beq.n	8000976 <__aeabi_fadd+0x14a>
 800098a:	2280      	movs	r2, #128	@ 0x80
 800098c:	03d2      	lsls	r2, r2, #15
 800098e:	4313      	orrs	r3, r2
 8000990:	025b      	lsls	r3, r3, #9
 8000992:	20ff      	movs	r0, #255	@ 0xff
 8000994:	0a5b      	lsrs	r3, r3, #9
 8000996:	e7b6      	b.n	8000906 <__aeabi_fadd+0xda>
 8000998:	019f      	lsls	r7, r3, #6
 800099a:	09bf      	lsrs	r7, r7, #6
 800099c:	0038      	movs	r0, r7
 800099e:	f002 fdad 	bl	80034fc <__clzsi2>
 80009a2:	3805      	subs	r0, #5
 80009a4:	4087      	lsls	r7, r0
 80009a6:	4285      	cmp	r5, r0
 80009a8:	dc24      	bgt.n	80009f4 <__aeabi_fadd+0x1c8>
 80009aa:	003b      	movs	r3, r7
 80009ac:	2120      	movs	r1, #32
 80009ae:	1b42      	subs	r2, r0, r5
 80009b0:	3201      	adds	r2, #1
 80009b2:	40d3      	lsrs	r3, r2
 80009b4:	1a8a      	subs	r2, r1, r2
 80009b6:	4097      	lsls	r7, r2
 80009b8:	1e7a      	subs	r2, r7, #1
 80009ba:	4197      	sbcs	r7, r2
 80009bc:	2200      	movs	r2, #0
 80009be:	433b      	orrs	r3, r7
 80009c0:	0759      	lsls	r1, r3, #29
 80009c2:	d193      	bne.n	80008ec <__aeabi_fadd+0xc0>
 80009c4:	e797      	b.n	80008f6 <__aeabi_fadd+0xca>
 80009c6:	000c      	movs	r4, r1
 80009c8:	0033      	movs	r3, r6
 80009ca:	08db      	lsrs	r3, r3, #3
 80009cc:	e7db      	b.n	8000986 <__aeabi_fadd+0x15a>
 80009ce:	2a00      	cmp	r2, #0
 80009d0:	d014      	beq.n	80009fc <__aeabi_fadd+0x1d0>
 80009d2:	1b42      	subs	r2, r0, r5
 80009d4:	2d00      	cmp	r5, #0
 80009d6:	d14b      	bne.n	8000a70 <__aeabi_fadd+0x244>
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d0d0      	beq.n	800097e <__aeabi_fadd+0x152>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x1b8>
 80009e2:	e09e      	b.n	8000b22 <__aeabi_fadd+0x2f6>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d0ef      	beq.n	80009c8 <__aeabi_fadd+0x19c>
 80009e8:	000a      	movs	r2, r1
 80009ea:	2a1b      	cmp	r2, #27
 80009ec:	dd5f      	ble.n	8000aae <__aeabi_fadd+0x282>
 80009ee:	0002      	movs	r2, r0
 80009f0:	1c73      	adds	r3, r6, #1
 80009f2:	e77b      	b.n	80008ec <__aeabi_fadd+0xc0>
 80009f4:	4b50      	ldr	r3, [pc, #320]	@ (8000b38 <__aeabi_fadd+0x30c>)
 80009f6:	1a2a      	subs	r2, r5, r0
 80009f8:	403b      	ands	r3, r7
 80009fa:	e7e1      	b.n	80009c0 <__aeabi_fadd+0x194>
 80009fc:	21fe      	movs	r1, #254	@ 0xfe
 80009fe:	1c6a      	adds	r2, r5, #1
 8000a00:	4211      	tst	r1, r2
 8000a02:	d13b      	bne.n	8000a7c <__aeabi_fadd+0x250>
 8000a04:	2d00      	cmp	r5, #0
 8000a06:	d15d      	bne.n	8000ac4 <__aeabi_fadd+0x298>
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d07f      	beq.n	8000b0c <__aeabi_fadd+0x2e0>
 8000a0c:	2e00      	cmp	r6, #0
 8000a0e:	d17f      	bne.n	8000b10 <__aeabi_fadd+0x2e4>
 8000a10:	2200      	movs	r2, #0
 8000a12:	08db      	lsrs	r3, r3, #3
 8000a14:	025b      	lsls	r3, r3, #9
 8000a16:	0a5b      	lsrs	r3, r3, #9
 8000a18:	b2d0      	uxtb	r0, r2
 8000a1a:	e774      	b.n	8000906 <__aeabi_fadd+0xda>
 8000a1c:	28ff      	cmp	r0, #255	@ 0xff
 8000a1e:	d0d2      	beq.n	80009c6 <__aeabi_fadd+0x19a>
 8000a20:	2480      	movs	r4, #128	@ 0x80
 8000a22:	04e4      	lsls	r4, r4, #19
 8000a24:	4323      	orrs	r3, r4
 8000a26:	2401      	movs	r4, #1
 8000a28:	2a1b      	cmp	r2, #27
 8000a2a:	dc07      	bgt.n	8000a3c <__aeabi_fadd+0x210>
 8000a2c:	001c      	movs	r4, r3
 8000a2e:	2520      	movs	r5, #32
 8000a30:	40d4      	lsrs	r4, r2
 8000a32:	1aaa      	subs	r2, r5, r2
 8000a34:	4093      	lsls	r3, r2
 8000a36:	1e5a      	subs	r2, r3, #1
 8000a38:	4193      	sbcs	r3, r2
 8000a3a:	431c      	orrs	r4, r3
 8000a3c:	1b33      	subs	r3, r6, r4
 8000a3e:	0005      	movs	r5, r0
 8000a40:	000c      	movs	r4, r1
 8000a42:	e74d      	b.n	80008e0 <__aeabi_fadd+0xb4>
 8000a44:	1b9f      	subs	r7, r3, r6
 8000a46:	017a      	lsls	r2, r7, #5
 8000a48:	d422      	bmi.n	8000a90 <__aeabi_fadd+0x264>
 8000a4a:	2f00      	cmp	r7, #0
 8000a4c:	d1a6      	bne.n	800099c <__aeabi_fadd+0x170>
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2000      	movs	r0, #0
 8000a52:	2300      	movs	r3, #0
 8000a54:	e757      	b.n	8000906 <__aeabi_fadd+0xda>
 8000a56:	199b      	adds	r3, r3, r6
 8000a58:	2501      	movs	r5, #1
 8000a5a:	3201      	adds	r2, #1
 8000a5c:	0159      	lsls	r1, r3, #5
 8000a5e:	d400      	bmi.n	8000a62 <__aeabi_fadd+0x236>
 8000a60:	e740      	b.n	80008e4 <__aeabi_fadd+0xb8>
 8000a62:	2101      	movs	r1, #1
 8000a64:	4835      	ldr	r0, [pc, #212]	@ (8000b3c <__aeabi_fadd+0x310>)
 8000a66:	4019      	ands	r1, r3
 8000a68:	085b      	lsrs	r3, r3, #1
 8000a6a:	4003      	ands	r3, r0
 8000a6c:	430b      	orrs	r3, r1
 8000a6e:	e7a7      	b.n	80009c0 <__aeabi_fadd+0x194>
 8000a70:	28ff      	cmp	r0, #255	@ 0xff
 8000a72:	d0a9      	beq.n	80009c8 <__aeabi_fadd+0x19c>
 8000a74:	2180      	movs	r1, #128	@ 0x80
 8000a76:	04c9      	lsls	r1, r1, #19
 8000a78:	430b      	orrs	r3, r1
 8000a7a:	e7b6      	b.n	80009ea <__aeabi_fadd+0x1be>
 8000a7c:	2aff      	cmp	r2, #255	@ 0xff
 8000a7e:	d100      	bne.n	8000a82 <__aeabi_fadd+0x256>
 8000a80:	e779      	b.n	8000976 <__aeabi_fadd+0x14a>
 8000a82:	199b      	adds	r3, r3, r6
 8000a84:	085b      	lsrs	r3, r3, #1
 8000a86:	0759      	lsls	r1, r3, #29
 8000a88:	d000      	beq.n	8000a8c <__aeabi_fadd+0x260>
 8000a8a:	e72f      	b.n	80008ec <__aeabi_fadd+0xc0>
 8000a8c:	08db      	lsrs	r3, r3, #3
 8000a8e:	e7c1      	b.n	8000a14 <__aeabi_fadd+0x1e8>
 8000a90:	000c      	movs	r4, r1
 8000a92:	1af7      	subs	r7, r6, r3
 8000a94:	e782      	b.n	800099c <__aeabi_fadd+0x170>
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d12c      	bne.n	8000af4 <__aeabi_fadd+0x2c8>
 8000a9a:	2e00      	cmp	r6, #0
 8000a9c:	d193      	bne.n	80009c6 <__aeabi_fadd+0x19a>
 8000a9e:	2380      	movs	r3, #128	@ 0x80
 8000aa0:	2400      	movs	r4, #0
 8000aa2:	20ff      	movs	r0, #255	@ 0xff
 8000aa4:	03db      	lsls	r3, r3, #15
 8000aa6:	e72e      	b.n	8000906 <__aeabi_fadd+0xda>
 8000aa8:	2501      	movs	r5, #1
 8000aaa:	1b9b      	subs	r3, r3, r6
 8000aac:	e718      	b.n	80008e0 <__aeabi_fadd+0xb4>
 8000aae:	0019      	movs	r1, r3
 8000ab0:	2520      	movs	r5, #32
 8000ab2:	40d1      	lsrs	r1, r2
 8000ab4:	1aaa      	subs	r2, r5, r2
 8000ab6:	4093      	lsls	r3, r2
 8000ab8:	1e5a      	subs	r2, r3, #1
 8000aba:	4193      	sbcs	r3, r2
 8000abc:	430b      	orrs	r3, r1
 8000abe:	0005      	movs	r5, r0
 8000ac0:	199b      	adds	r3, r3, r6
 8000ac2:	e753      	b.n	800096c <__aeabi_fadd+0x140>
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d100      	bne.n	8000aca <__aeabi_fadd+0x29e>
 8000ac8:	e77e      	b.n	80009c8 <__aeabi_fadd+0x19c>
 8000aca:	2e00      	cmp	r6, #0
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_fadd+0x2a4>
 8000ace:	e77c      	b.n	80009ca <__aeabi_fadd+0x19e>
 8000ad0:	2280      	movs	r2, #128	@ 0x80
 8000ad2:	03d2      	lsls	r2, r2, #15
 8000ad4:	4591      	cmp	r9, r2
 8000ad6:	d302      	bcc.n	8000ade <__aeabi_fadd+0x2b2>
 8000ad8:	4594      	cmp	ip, r2
 8000ada:	d200      	bcs.n	8000ade <__aeabi_fadd+0x2b2>
 8000adc:	0033      	movs	r3, r6
 8000ade:	08db      	lsrs	r3, r3, #3
 8000ae0:	e753      	b.n	800098a <__aeabi_fadd+0x15e>
 8000ae2:	000c      	movs	r4, r1
 8000ae4:	1af3      	subs	r3, r6, r3
 8000ae6:	3501      	adds	r5, #1
 8000ae8:	e6fa      	b.n	80008e0 <__aeabi_fadd+0xb4>
 8000aea:	2e00      	cmp	r6, #0
 8000aec:	d0af      	beq.n	8000a4e <__aeabi_fadd+0x222>
 8000aee:	000c      	movs	r4, r1
 8000af0:	0033      	movs	r3, r6
 8000af2:	e78d      	b.n	8000a10 <__aeabi_fadd+0x1e4>
 8000af4:	2e00      	cmp	r6, #0
 8000af6:	d100      	bne.n	8000afa <__aeabi_fadd+0x2ce>
 8000af8:	e767      	b.n	80009ca <__aeabi_fadd+0x19e>
 8000afa:	2280      	movs	r2, #128	@ 0x80
 8000afc:	03d2      	lsls	r2, r2, #15
 8000afe:	4591      	cmp	r9, r2
 8000b00:	d3ed      	bcc.n	8000ade <__aeabi_fadd+0x2b2>
 8000b02:	4594      	cmp	ip, r2
 8000b04:	d2eb      	bcs.n	8000ade <__aeabi_fadd+0x2b2>
 8000b06:	000c      	movs	r4, r1
 8000b08:	0033      	movs	r3, r6
 8000b0a:	e7e8      	b.n	8000ade <__aeabi_fadd+0x2b2>
 8000b0c:	0033      	movs	r3, r6
 8000b0e:	e77f      	b.n	8000a10 <__aeabi_fadd+0x1e4>
 8000b10:	199b      	adds	r3, r3, r6
 8000b12:	2200      	movs	r2, #0
 8000b14:	0159      	lsls	r1, r3, #5
 8000b16:	d5b9      	bpl.n	8000a8c <__aeabi_fadd+0x260>
 8000b18:	4a07      	ldr	r2, [pc, #28]	@ (8000b38 <__aeabi_fadd+0x30c>)
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	08db      	lsrs	r3, r3, #3
 8000b1e:	2201      	movs	r2, #1
 8000b20:	e778      	b.n	8000a14 <__aeabi_fadd+0x1e8>
 8000b22:	199b      	adds	r3, r3, r6
 8000b24:	3201      	adds	r2, #1
 8000b26:	3501      	adds	r5, #1
 8000b28:	0159      	lsls	r1, r3, #5
 8000b2a:	d49a      	bmi.n	8000a62 <__aeabi_fadd+0x236>
 8000b2c:	e6da      	b.n	80008e4 <__aeabi_fadd+0xb8>
 8000b2e:	1e03      	subs	r3, r0, #0
 8000b30:	d08d      	beq.n	8000a4e <__aeabi_fadd+0x222>
 8000b32:	08db      	lsrs	r3, r3, #3
 8000b34:	e76e      	b.n	8000a14 <__aeabi_fadd+0x1e8>
 8000b36:	46c0      	nop			@ (mov r8, r8)
 8000b38:	fbffffff 	.word	0xfbffffff
 8000b3c:	7dffffff 	.word	0x7dffffff

08000b40 <__aeabi_fdiv>:
 8000b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b42:	464f      	mov	r7, r9
 8000b44:	4646      	mov	r6, r8
 8000b46:	46d6      	mov	lr, sl
 8000b48:	0244      	lsls	r4, r0, #9
 8000b4a:	b5c0      	push	{r6, r7, lr}
 8000b4c:	0047      	lsls	r7, r0, #1
 8000b4e:	1c0e      	adds	r6, r1, #0
 8000b50:	0a64      	lsrs	r4, r4, #9
 8000b52:	0e3f      	lsrs	r7, r7, #24
 8000b54:	0fc5      	lsrs	r5, r0, #31
 8000b56:	2f00      	cmp	r7, #0
 8000b58:	d03c      	beq.n	8000bd4 <__aeabi_fdiv+0x94>
 8000b5a:	2fff      	cmp	r7, #255	@ 0xff
 8000b5c:	d042      	beq.n	8000be4 <__aeabi_fdiv+0xa4>
 8000b5e:	2300      	movs	r3, #0
 8000b60:	2280      	movs	r2, #128	@ 0x80
 8000b62:	4699      	mov	r9, r3
 8000b64:	469a      	mov	sl, r3
 8000b66:	00e4      	lsls	r4, r4, #3
 8000b68:	04d2      	lsls	r2, r2, #19
 8000b6a:	4314      	orrs	r4, r2
 8000b6c:	3f7f      	subs	r7, #127	@ 0x7f
 8000b6e:	0273      	lsls	r3, r6, #9
 8000b70:	0a5b      	lsrs	r3, r3, #9
 8000b72:	4698      	mov	r8, r3
 8000b74:	0073      	lsls	r3, r6, #1
 8000b76:	0e1b      	lsrs	r3, r3, #24
 8000b78:	0ff6      	lsrs	r6, r6, #31
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d01b      	beq.n	8000bb6 <__aeabi_fdiv+0x76>
 8000b7e:	2bff      	cmp	r3, #255	@ 0xff
 8000b80:	d013      	beq.n	8000baa <__aeabi_fdiv+0x6a>
 8000b82:	4642      	mov	r2, r8
 8000b84:	2180      	movs	r1, #128	@ 0x80
 8000b86:	00d2      	lsls	r2, r2, #3
 8000b88:	04c9      	lsls	r1, r1, #19
 8000b8a:	4311      	orrs	r1, r2
 8000b8c:	4688      	mov	r8, r1
 8000b8e:	2000      	movs	r0, #0
 8000b90:	3b7f      	subs	r3, #127	@ 0x7f
 8000b92:	0029      	movs	r1, r5
 8000b94:	1aff      	subs	r7, r7, r3
 8000b96:	464b      	mov	r3, r9
 8000b98:	4071      	eors	r1, r6
 8000b9a:	b2c9      	uxtb	r1, r1
 8000b9c:	2b0f      	cmp	r3, #15
 8000b9e:	d900      	bls.n	8000ba2 <__aeabi_fdiv+0x62>
 8000ba0:	e0b5      	b.n	8000d0e <__aeabi_fdiv+0x1ce>
 8000ba2:	4a74      	ldr	r2, [pc, #464]	@ (8000d74 <__aeabi_fdiv+0x234>)
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	58d3      	ldr	r3, [r2, r3]
 8000ba8:	469f      	mov	pc, r3
 8000baa:	4643      	mov	r3, r8
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d13f      	bne.n	8000c30 <__aeabi_fdiv+0xf0>
 8000bb0:	3fff      	subs	r7, #255	@ 0xff
 8000bb2:	3302      	adds	r3, #2
 8000bb4:	e003      	b.n	8000bbe <__aeabi_fdiv+0x7e>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d12d      	bne.n	8000c18 <__aeabi_fdiv+0xd8>
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	0029      	movs	r1, r5
 8000bc0:	464a      	mov	r2, r9
 8000bc2:	4071      	eors	r1, r6
 8000bc4:	b2c9      	uxtb	r1, r1
 8000bc6:	431a      	orrs	r2, r3
 8000bc8:	2a0e      	cmp	r2, #14
 8000bca:	d838      	bhi.n	8000c3e <__aeabi_fdiv+0xfe>
 8000bcc:	486a      	ldr	r0, [pc, #424]	@ (8000d78 <__aeabi_fdiv+0x238>)
 8000bce:	0092      	lsls	r2, r2, #2
 8000bd0:	5882      	ldr	r2, [r0, r2]
 8000bd2:	4697      	mov	pc, r2
 8000bd4:	2c00      	cmp	r4, #0
 8000bd6:	d113      	bne.n	8000c00 <__aeabi_fdiv+0xc0>
 8000bd8:	2304      	movs	r3, #4
 8000bda:	4699      	mov	r9, r3
 8000bdc:	3b03      	subs	r3, #3
 8000bde:	2700      	movs	r7, #0
 8000be0:	469a      	mov	sl, r3
 8000be2:	e7c4      	b.n	8000b6e <__aeabi_fdiv+0x2e>
 8000be4:	2c00      	cmp	r4, #0
 8000be6:	d105      	bne.n	8000bf4 <__aeabi_fdiv+0xb4>
 8000be8:	2308      	movs	r3, #8
 8000bea:	4699      	mov	r9, r3
 8000bec:	3b06      	subs	r3, #6
 8000bee:	27ff      	movs	r7, #255	@ 0xff
 8000bf0:	469a      	mov	sl, r3
 8000bf2:	e7bc      	b.n	8000b6e <__aeabi_fdiv+0x2e>
 8000bf4:	230c      	movs	r3, #12
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	3b09      	subs	r3, #9
 8000bfa:	27ff      	movs	r7, #255	@ 0xff
 8000bfc:	469a      	mov	sl, r3
 8000bfe:	e7b6      	b.n	8000b6e <__aeabi_fdiv+0x2e>
 8000c00:	0020      	movs	r0, r4
 8000c02:	f002 fc7b 	bl	80034fc <__clzsi2>
 8000c06:	2776      	movs	r7, #118	@ 0x76
 8000c08:	1f43      	subs	r3, r0, #5
 8000c0a:	409c      	lsls	r4, r3
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	427f      	negs	r7, r7
 8000c10:	4699      	mov	r9, r3
 8000c12:	469a      	mov	sl, r3
 8000c14:	1a3f      	subs	r7, r7, r0
 8000c16:	e7aa      	b.n	8000b6e <__aeabi_fdiv+0x2e>
 8000c18:	4640      	mov	r0, r8
 8000c1a:	f002 fc6f 	bl	80034fc <__clzsi2>
 8000c1e:	4642      	mov	r2, r8
 8000c20:	1f43      	subs	r3, r0, #5
 8000c22:	409a      	lsls	r2, r3
 8000c24:	2376      	movs	r3, #118	@ 0x76
 8000c26:	425b      	negs	r3, r3
 8000c28:	1a1b      	subs	r3, r3, r0
 8000c2a:	4690      	mov	r8, r2
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	e7b0      	b.n	8000b92 <__aeabi_fdiv+0x52>
 8000c30:	2303      	movs	r3, #3
 8000c32:	464a      	mov	r2, r9
 8000c34:	431a      	orrs	r2, r3
 8000c36:	4691      	mov	r9, r2
 8000c38:	2003      	movs	r0, #3
 8000c3a:	33fc      	adds	r3, #252	@ 0xfc
 8000c3c:	e7a9      	b.n	8000b92 <__aeabi_fdiv+0x52>
 8000c3e:	000d      	movs	r5, r1
 8000c40:	20ff      	movs	r0, #255	@ 0xff
 8000c42:	2200      	movs	r2, #0
 8000c44:	05c0      	lsls	r0, r0, #23
 8000c46:	07ed      	lsls	r5, r5, #31
 8000c48:	4310      	orrs	r0, r2
 8000c4a:	4328      	orrs	r0, r5
 8000c4c:	bce0      	pop	{r5, r6, r7}
 8000c4e:	46ba      	mov	sl, r7
 8000c50:	46b1      	mov	r9, r6
 8000c52:	46a8      	mov	r8, r5
 8000c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c56:	000d      	movs	r5, r1
 8000c58:	2000      	movs	r0, #0
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	e7f2      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000c5e:	4653      	mov	r3, sl
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d0ed      	beq.n	8000c40 <__aeabi_fdiv+0x100>
 8000c64:	2b03      	cmp	r3, #3
 8000c66:	d033      	beq.n	8000cd0 <__aeabi_fdiv+0x190>
 8000c68:	46a0      	mov	r8, r4
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d105      	bne.n	8000c7a <__aeabi_fdiv+0x13a>
 8000c6e:	2000      	movs	r0, #0
 8000c70:	2200      	movs	r2, #0
 8000c72:	e7e7      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000c74:	0035      	movs	r5, r6
 8000c76:	2803      	cmp	r0, #3
 8000c78:	d07a      	beq.n	8000d70 <__aeabi_fdiv+0x230>
 8000c7a:	003b      	movs	r3, r7
 8000c7c:	337f      	adds	r3, #127	@ 0x7f
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	dd2d      	ble.n	8000cde <__aeabi_fdiv+0x19e>
 8000c82:	4642      	mov	r2, r8
 8000c84:	0752      	lsls	r2, r2, #29
 8000c86:	d007      	beq.n	8000c98 <__aeabi_fdiv+0x158>
 8000c88:	220f      	movs	r2, #15
 8000c8a:	4641      	mov	r1, r8
 8000c8c:	400a      	ands	r2, r1
 8000c8e:	2a04      	cmp	r2, #4
 8000c90:	d002      	beq.n	8000c98 <__aeabi_fdiv+0x158>
 8000c92:	2204      	movs	r2, #4
 8000c94:	4694      	mov	ip, r2
 8000c96:	44e0      	add	r8, ip
 8000c98:	4642      	mov	r2, r8
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	d505      	bpl.n	8000caa <__aeabi_fdiv+0x16a>
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	4b36      	ldr	r3, [pc, #216]	@ (8000d7c <__aeabi_fdiv+0x23c>)
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	003b      	movs	r3, r7
 8000ca6:	4690      	mov	r8, r2
 8000ca8:	3380      	adds	r3, #128	@ 0x80
 8000caa:	2bfe      	cmp	r3, #254	@ 0xfe
 8000cac:	dcc8      	bgt.n	8000c40 <__aeabi_fdiv+0x100>
 8000cae:	4642      	mov	r2, r8
 8000cb0:	0192      	lsls	r2, r2, #6
 8000cb2:	0a52      	lsrs	r2, r2, #9
 8000cb4:	b2d8      	uxtb	r0, r3
 8000cb6:	e7c5      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000cb8:	2280      	movs	r2, #128	@ 0x80
 8000cba:	2500      	movs	r5, #0
 8000cbc:	20ff      	movs	r0, #255	@ 0xff
 8000cbe:	03d2      	lsls	r2, r2, #15
 8000cc0:	e7c0      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000cc2:	2280      	movs	r2, #128	@ 0x80
 8000cc4:	03d2      	lsls	r2, r2, #15
 8000cc6:	4214      	tst	r4, r2
 8000cc8:	d002      	beq.n	8000cd0 <__aeabi_fdiv+0x190>
 8000cca:	4643      	mov	r3, r8
 8000ccc:	4213      	tst	r3, r2
 8000cce:	d049      	beq.n	8000d64 <__aeabi_fdiv+0x224>
 8000cd0:	2280      	movs	r2, #128	@ 0x80
 8000cd2:	03d2      	lsls	r2, r2, #15
 8000cd4:	4322      	orrs	r2, r4
 8000cd6:	0252      	lsls	r2, r2, #9
 8000cd8:	20ff      	movs	r0, #255	@ 0xff
 8000cda:	0a52      	lsrs	r2, r2, #9
 8000cdc:	e7b2      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000cde:	2201      	movs	r2, #1
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	2b1b      	cmp	r3, #27
 8000ce4:	dcc3      	bgt.n	8000c6e <__aeabi_fdiv+0x12e>
 8000ce6:	4642      	mov	r2, r8
 8000ce8:	40da      	lsrs	r2, r3
 8000cea:	4643      	mov	r3, r8
 8000cec:	379e      	adds	r7, #158	@ 0x9e
 8000cee:	40bb      	lsls	r3, r7
 8000cf0:	1e59      	subs	r1, r3, #1
 8000cf2:	418b      	sbcs	r3, r1
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	0753      	lsls	r3, r2, #29
 8000cf8:	d004      	beq.n	8000d04 <__aeabi_fdiv+0x1c4>
 8000cfa:	230f      	movs	r3, #15
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	d000      	beq.n	8000d04 <__aeabi_fdiv+0x1c4>
 8000d02:	3204      	adds	r2, #4
 8000d04:	0153      	lsls	r3, r2, #5
 8000d06:	d529      	bpl.n	8000d5c <__aeabi_fdiv+0x21c>
 8000d08:	2001      	movs	r0, #1
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	e79a      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000d0e:	4642      	mov	r2, r8
 8000d10:	0163      	lsls	r3, r4, #5
 8000d12:	0155      	lsls	r5, r2, #5
 8000d14:	42ab      	cmp	r3, r5
 8000d16:	d215      	bcs.n	8000d44 <__aeabi_fdiv+0x204>
 8000d18:	201b      	movs	r0, #27
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	3f01      	subs	r7, #1
 8000d1e:	2601      	movs	r6, #1
 8000d20:	001c      	movs	r4, r3
 8000d22:	0052      	lsls	r2, r2, #1
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	2c00      	cmp	r4, #0
 8000d28:	db01      	blt.n	8000d2e <__aeabi_fdiv+0x1ee>
 8000d2a:	429d      	cmp	r5, r3
 8000d2c:	d801      	bhi.n	8000d32 <__aeabi_fdiv+0x1f2>
 8000d2e:	1b5b      	subs	r3, r3, r5
 8000d30:	4332      	orrs	r2, r6
 8000d32:	3801      	subs	r0, #1
 8000d34:	2800      	cmp	r0, #0
 8000d36:	d1f3      	bne.n	8000d20 <__aeabi_fdiv+0x1e0>
 8000d38:	1e58      	subs	r0, r3, #1
 8000d3a:	4183      	sbcs	r3, r0
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	4698      	mov	r8, r3
 8000d40:	000d      	movs	r5, r1
 8000d42:	e79a      	b.n	8000c7a <__aeabi_fdiv+0x13a>
 8000d44:	201a      	movs	r0, #26
 8000d46:	2201      	movs	r2, #1
 8000d48:	1b5b      	subs	r3, r3, r5
 8000d4a:	e7e8      	b.n	8000d1e <__aeabi_fdiv+0x1de>
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	425a      	negs	r2, r3
 8000d50:	4153      	adcs	r3, r2
 8000d52:	425b      	negs	r3, r3
 8000d54:	0035      	movs	r5, r6
 8000d56:	2200      	movs	r2, #0
 8000d58:	b2d8      	uxtb	r0, r3
 8000d5a:	e773      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000d5c:	0192      	lsls	r2, r2, #6
 8000d5e:	2000      	movs	r0, #0
 8000d60:	0a52      	lsrs	r2, r2, #9
 8000d62:	e76f      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000d64:	431a      	orrs	r2, r3
 8000d66:	0252      	lsls	r2, r2, #9
 8000d68:	0035      	movs	r5, r6
 8000d6a:	20ff      	movs	r0, #255	@ 0xff
 8000d6c:	0a52      	lsrs	r2, r2, #9
 8000d6e:	e769      	b.n	8000c44 <__aeabi_fdiv+0x104>
 8000d70:	4644      	mov	r4, r8
 8000d72:	e7ad      	b.n	8000cd0 <__aeabi_fdiv+0x190>
 8000d74:	0800c290 	.word	0x0800c290
 8000d78:	0800c2d0 	.word	0x0800c2d0
 8000d7c:	f7ffffff 	.word	0xf7ffffff

08000d80 <__eqsf2>:
 8000d80:	b570      	push	{r4, r5, r6, lr}
 8000d82:	0042      	lsls	r2, r0, #1
 8000d84:	024e      	lsls	r6, r1, #9
 8000d86:	004c      	lsls	r4, r1, #1
 8000d88:	0245      	lsls	r5, r0, #9
 8000d8a:	0a6d      	lsrs	r5, r5, #9
 8000d8c:	0e12      	lsrs	r2, r2, #24
 8000d8e:	0fc3      	lsrs	r3, r0, #31
 8000d90:	0a76      	lsrs	r6, r6, #9
 8000d92:	0e24      	lsrs	r4, r4, #24
 8000d94:	0fc9      	lsrs	r1, r1, #31
 8000d96:	2aff      	cmp	r2, #255	@ 0xff
 8000d98:	d010      	beq.n	8000dbc <__eqsf2+0x3c>
 8000d9a:	2cff      	cmp	r4, #255	@ 0xff
 8000d9c:	d00c      	beq.n	8000db8 <__eqsf2+0x38>
 8000d9e:	2001      	movs	r0, #1
 8000da0:	42a2      	cmp	r2, r4
 8000da2:	d10a      	bne.n	8000dba <__eqsf2+0x3a>
 8000da4:	42b5      	cmp	r5, r6
 8000da6:	d108      	bne.n	8000dba <__eqsf2+0x3a>
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d00f      	beq.n	8000dcc <__eqsf2+0x4c>
 8000dac:	2a00      	cmp	r2, #0
 8000dae:	d104      	bne.n	8000dba <__eqsf2+0x3a>
 8000db0:	0028      	movs	r0, r5
 8000db2:	1e43      	subs	r3, r0, #1
 8000db4:	4198      	sbcs	r0, r3
 8000db6:	e000      	b.n	8000dba <__eqsf2+0x3a>
 8000db8:	2001      	movs	r0, #1
 8000dba:	bd70      	pop	{r4, r5, r6, pc}
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	2cff      	cmp	r4, #255	@ 0xff
 8000dc0:	d1fb      	bne.n	8000dba <__eqsf2+0x3a>
 8000dc2:	4335      	orrs	r5, r6
 8000dc4:	d1f9      	bne.n	8000dba <__eqsf2+0x3a>
 8000dc6:	404b      	eors	r3, r1
 8000dc8:	0018      	movs	r0, r3
 8000dca:	e7f6      	b.n	8000dba <__eqsf2+0x3a>
 8000dcc:	2000      	movs	r0, #0
 8000dce:	e7f4      	b.n	8000dba <__eqsf2+0x3a>

08000dd0 <__gesf2>:
 8000dd0:	b530      	push	{r4, r5, lr}
 8000dd2:	0042      	lsls	r2, r0, #1
 8000dd4:	0244      	lsls	r4, r0, #9
 8000dd6:	024d      	lsls	r5, r1, #9
 8000dd8:	0fc3      	lsrs	r3, r0, #31
 8000dda:	0048      	lsls	r0, r1, #1
 8000ddc:	0a64      	lsrs	r4, r4, #9
 8000dde:	0e12      	lsrs	r2, r2, #24
 8000de0:	0a6d      	lsrs	r5, r5, #9
 8000de2:	0e00      	lsrs	r0, r0, #24
 8000de4:	0fc9      	lsrs	r1, r1, #31
 8000de6:	2aff      	cmp	r2, #255	@ 0xff
 8000de8:	d019      	beq.n	8000e1e <__gesf2+0x4e>
 8000dea:	28ff      	cmp	r0, #255	@ 0xff
 8000dec:	d00b      	beq.n	8000e06 <__gesf2+0x36>
 8000dee:	2a00      	cmp	r2, #0
 8000df0:	d11e      	bne.n	8000e30 <__gesf2+0x60>
 8000df2:	2800      	cmp	r0, #0
 8000df4:	d10b      	bne.n	8000e0e <__gesf2+0x3e>
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d027      	beq.n	8000e4a <__gesf2+0x7a>
 8000dfa:	2c00      	cmp	r4, #0
 8000dfc:	d134      	bne.n	8000e68 <__gesf2+0x98>
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d02f      	beq.n	8000e62 <__gesf2+0x92>
 8000e02:	0008      	movs	r0, r1
 8000e04:	bd30      	pop	{r4, r5, pc}
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d128      	bne.n	8000e5c <__gesf2+0x8c>
 8000e0a:	2a00      	cmp	r2, #0
 8000e0c:	d101      	bne.n	8000e12 <__gesf2+0x42>
 8000e0e:	2c00      	cmp	r4, #0
 8000e10:	d0f5      	beq.n	8000dfe <__gesf2+0x2e>
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d107      	bne.n	8000e26 <__gesf2+0x56>
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d023      	beq.n	8000e62 <__gesf2+0x92>
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	e7f2      	b.n	8000e04 <__gesf2+0x34>
 8000e1e:	2c00      	cmp	r4, #0
 8000e20:	d11c      	bne.n	8000e5c <__gesf2+0x8c>
 8000e22:	28ff      	cmp	r0, #255	@ 0xff
 8000e24:	d014      	beq.n	8000e50 <__gesf2+0x80>
 8000e26:	1e58      	subs	r0, r3, #1
 8000e28:	2302      	movs	r3, #2
 8000e2a:	4018      	ands	r0, r3
 8000e2c:	3801      	subs	r0, #1
 8000e2e:	e7e9      	b.n	8000e04 <__gesf2+0x34>
 8000e30:	2800      	cmp	r0, #0
 8000e32:	d0f8      	beq.n	8000e26 <__gesf2+0x56>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d1f6      	bne.n	8000e26 <__gesf2+0x56>
 8000e38:	4282      	cmp	r2, r0
 8000e3a:	dcf4      	bgt.n	8000e26 <__gesf2+0x56>
 8000e3c:	dbeb      	blt.n	8000e16 <__gesf2+0x46>
 8000e3e:	42ac      	cmp	r4, r5
 8000e40:	d8f1      	bhi.n	8000e26 <__gesf2+0x56>
 8000e42:	2000      	movs	r0, #0
 8000e44:	42ac      	cmp	r4, r5
 8000e46:	d2dd      	bcs.n	8000e04 <__gesf2+0x34>
 8000e48:	e7e5      	b.n	8000e16 <__gesf2+0x46>
 8000e4a:	2c00      	cmp	r4, #0
 8000e4c:	d0da      	beq.n	8000e04 <__gesf2+0x34>
 8000e4e:	e7ea      	b.n	8000e26 <__gesf2+0x56>
 8000e50:	2d00      	cmp	r5, #0
 8000e52:	d103      	bne.n	8000e5c <__gesf2+0x8c>
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d1e6      	bne.n	8000e26 <__gesf2+0x56>
 8000e58:	2000      	movs	r0, #0
 8000e5a:	e7d3      	b.n	8000e04 <__gesf2+0x34>
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	4240      	negs	r0, r0
 8000e60:	e7d0      	b.n	8000e04 <__gesf2+0x34>
 8000e62:	2001      	movs	r0, #1
 8000e64:	4240      	negs	r0, r0
 8000e66:	e7cd      	b.n	8000e04 <__gesf2+0x34>
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d0e8      	beq.n	8000e3e <__gesf2+0x6e>
 8000e6c:	e7db      	b.n	8000e26 <__gesf2+0x56>
 8000e6e:	46c0      	nop			@ (mov r8, r8)

08000e70 <__lesf2>:
 8000e70:	b530      	push	{r4, r5, lr}
 8000e72:	0042      	lsls	r2, r0, #1
 8000e74:	0244      	lsls	r4, r0, #9
 8000e76:	024d      	lsls	r5, r1, #9
 8000e78:	0fc3      	lsrs	r3, r0, #31
 8000e7a:	0048      	lsls	r0, r1, #1
 8000e7c:	0a64      	lsrs	r4, r4, #9
 8000e7e:	0e12      	lsrs	r2, r2, #24
 8000e80:	0a6d      	lsrs	r5, r5, #9
 8000e82:	0e00      	lsrs	r0, r0, #24
 8000e84:	0fc9      	lsrs	r1, r1, #31
 8000e86:	2aff      	cmp	r2, #255	@ 0xff
 8000e88:	d01a      	beq.n	8000ec0 <__lesf2+0x50>
 8000e8a:	28ff      	cmp	r0, #255	@ 0xff
 8000e8c:	d00e      	beq.n	8000eac <__lesf2+0x3c>
 8000e8e:	2a00      	cmp	r2, #0
 8000e90:	d11e      	bne.n	8000ed0 <__lesf2+0x60>
 8000e92:	2800      	cmp	r0, #0
 8000e94:	d10e      	bne.n	8000eb4 <__lesf2+0x44>
 8000e96:	2d00      	cmp	r5, #0
 8000e98:	d02a      	beq.n	8000ef0 <__lesf2+0x80>
 8000e9a:	2c00      	cmp	r4, #0
 8000e9c:	d00c      	beq.n	8000eb8 <__lesf2+0x48>
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d01d      	beq.n	8000ede <__lesf2+0x6e>
 8000ea2:	1e58      	subs	r0, r3, #1
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	4018      	ands	r0, r3
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	e010      	b.n	8000ece <__lesf2+0x5e>
 8000eac:	2d00      	cmp	r5, #0
 8000eae:	d10d      	bne.n	8000ecc <__lesf2+0x5c>
 8000eb0:	2a00      	cmp	r2, #0
 8000eb2:	d120      	bne.n	8000ef6 <__lesf2+0x86>
 8000eb4:	2c00      	cmp	r4, #0
 8000eb6:	d11e      	bne.n	8000ef6 <__lesf2+0x86>
 8000eb8:	2900      	cmp	r1, #0
 8000eba:	d023      	beq.n	8000f04 <__lesf2+0x94>
 8000ebc:	0008      	movs	r0, r1
 8000ebe:	e006      	b.n	8000ece <__lesf2+0x5e>
 8000ec0:	2c00      	cmp	r4, #0
 8000ec2:	d103      	bne.n	8000ecc <__lesf2+0x5c>
 8000ec4:	28ff      	cmp	r0, #255	@ 0xff
 8000ec6:	d1ec      	bne.n	8000ea2 <__lesf2+0x32>
 8000ec8:	2d00      	cmp	r5, #0
 8000eca:	d017      	beq.n	8000efc <__lesf2+0x8c>
 8000ecc:	2002      	movs	r0, #2
 8000ece:	bd30      	pop	{r4, r5, pc}
 8000ed0:	2800      	cmp	r0, #0
 8000ed2:	d0e6      	beq.n	8000ea2 <__lesf2+0x32>
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d1e4      	bne.n	8000ea2 <__lesf2+0x32>
 8000ed8:	4282      	cmp	r2, r0
 8000eda:	dce2      	bgt.n	8000ea2 <__lesf2+0x32>
 8000edc:	db04      	blt.n	8000ee8 <__lesf2+0x78>
 8000ede:	42ac      	cmp	r4, r5
 8000ee0:	d8df      	bhi.n	8000ea2 <__lesf2+0x32>
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	42ac      	cmp	r4, r5
 8000ee6:	d2f2      	bcs.n	8000ece <__lesf2+0x5e>
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d00b      	beq.n	8000f04 <__lesf2+0x94>
 8000eec:	0018      	movs	r0, r3
 8000eee:	e7ee      	b.n	8000ece <__lesf2+0x5e>
 8000ef0:	2c00      	cmp	r4, #0
 8000ef2:	d0ec      	beq.n	8000ece <__lesf2+0x5e>
 8000ef4:	e7d5      	b.n	8000ea2 <__lesf2+0x32>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d1d3      	bne.n	8000ea2 <__lesf2+0x32>
 8000efa:	e7f5      	b.n	8000ee8 <__lesf2+0x78>
 8000efc:	2000      	movs	r0, #0
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d0e5      	beq.n	8000ece <__lesf2+0x5e>
 8000f02:	e7ce      	b.n	8000ea2 <__lesf2+0x32>
 8000f04:	2001      	movs	r0, #1
 8000f06:	4240      	negs	r0, r0
 8000f08:	e7e1      	b.n	8000ece <__lesf2+0x5e>
 8000f0a:	46c0      	nop			@ (mov r8, r8)

08000f0c <__aeabi_fmul>:
 8000f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f0e:	464f      	mov	r7, r9
 8000f10:	4646      	mov	r6, r8
 8000f12:	46d6      	mov	lr, sl
 8000f14:	0243      	lsls	r3, r0, #9
 8000f16:	0a5b      	lsrs	r3, r3, #9
 8000f18:	0045      	lsls	r5, r0, #1
 8000f1a:	b5c0      	push	{r6, r7, lr}
 8000f1c:	4699      	mov	r9, r3
 8000f1e:	1c0f      	adds	r7, r1, #0
 8000f20:	0e2d      	lsrs	r5, r5, #24
 8000f22:	0fc6      	lsrs	r6, r0, #31
 8000f24:	2d00      	cmp	r5, #0
 8000f26:	d100      	bne.n	8000f2a <__aeabi_fmul+0x1e>
 8000f28:	e088      	b.n	800103c <__aeabi_fmul+0x130>
 8000f2a:	2dff      	cmp	r5, #255	@ 0xff
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_fmul+0x24>
 8000f2e:	e08d      	b.n	800104c <__aeabi_fmul+0x140>
 8000f30:	2280      	movs	r2, #128	@ 0x80
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	04d2      	lsls	r2, r2, #19
 8000f36:	431a      	orrs	r2, r3
 8000f38:	2300      	movs	r3, #0
 8000f3a:	4691      	mov	r9, r2
 8000f3c:	4698      	mov	r8, r3
 8000f3e:	469a      	mov	sl, r3
 8000f40:	3d7f      	subs	r5, #127	@ 0x7f
 8000f42:	027c      	lsls	r4, r7, #9
 8000f44:	007b      	lsls	r3, r7, #1
 8000f46:	0a64      	lsrs	r4, r4, #9
 8000f48:	0e1b      	lsrs	r3, r3, #24
 8000f4a:	0fff      	lsrs	r7, r7, #31
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d068      	beq.n	8001022 <__aeabi_fmul+0x116>
 8000f50:	2bff      	cmp	r3, #255	@ 0xff
 8000f52:	d021      	beq.n	8000f98 <__aeabi_fmul+0x8c>
 8000f54:	2280      	movs	r2, #128	@ 0x80
 8000f56:	00e4      	lsls	r4, r4, #3
 8000f58:	04d2      	lsls	r2, r2, #19
 8000f5a:	4314      	orrs	r4, r2
 8000f5c:	4642      	mov	r2, r8
 8000f5e:	3b7f      	subs	r3, #127	@ 0x7f
 8000f60:	195b      	adds	r3, r3, r5
 8000f62:	2100      	movs	r1, #0
 8000f64:	1c5d      	adds	r5, r3, #1
 8000f66:	2a0a      	cmp	r2, #10
 8000f68:	dc2e      	bgt.n	8000fc8 <__aeabi_fmul+0xbc>
 8000f6a:	407e      	eors	r6, r7
 8000f6c:	4642      	mov	r2, r8
 8000f6e:	2a02      	cmp	r2, #2
 8000f70:	dc23      	bgt.n	8000fba <__aeabi_fmul+0xae>
 8000f72:	3a01      	subs	r2, #1
 8000f74:	2a01      	cmp	r2, #1
 8000f76:	d900      	bls.n	8000f7a <__aeabi_fmul+0x6e>
 8000f78:	e0bd      	b.n	80010f6 <__aeabi_fmul+0x1ea>
 8000f7a:	2902      	cmp	r1, #2
 8000f7c:	d06e      	beq.n	800105c <__aeabi_fmul+0x150>
 8000f7e:	2901      	cmp	r1, #1
 8000f80:	d12c      	bne.n	8000fdc <__aeabi_fmul+0xd0>
 8000f82:	2000      	movs	r0, #0
 8000f84:	2200      	movs	r2, #0
 8000f86:	05c0      	lsls	r0, r0, #23
 8000f88:	07f6      	lsls	r6, r6, #31
 8000f8a:	4310      	orrs	r0, r2
 8000f8c:	4330      	orrs	r0, r6
 8000f8e:	bce0      	pop	{r5, r6, r7}
 8000f90:	46ba      	mov	sl, r7
 8000f92:	46b1      	mov	r9, r6
 8000f94:	46a8      	mov	r8, r5
 8000f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f98:	002b      	movs	r3, r5
 8000f9a:	33ff      	adds	r3, #255	@ 0xff
 8000f9c:	2c00      	cmp	r4, #0
 8000f9e:	d065      	beq.n	800106c <__aeabi_fmul+0x160>
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	4641      	mov	r1, r8
 8000fa4:	4311      	orrs	r1, r2
 8000fa6:	0032      	movs	r2, r6
 8000fa8:	3501      	adds	r5, #1
 8000faa:	4688      	mov	r8, r1
 8000fac:	407a      	eors	r2, r7
 8000fae:	35ff      	adds	r5, #255	@ 0xff
 8000fb0:	290a      	cmp	r1, #10
 8000fb2:	dd00      	ble.n	8000fb6 <__aeabi_fmul+0xaa>
 8000fb4:	e0d8      	b.n	8001168 <__aeabi_fmul+0x25c>
 8000fb6:	0016      	movs	r6, r2
 8000fb8:	2103      	movs	r1, #3
 8000fba:	4640      	mov	r0, r8
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4082      	lsls	r2, r0
 8000fc0:	20a6      	movs	r0, #166	@ 0xa6
 8000fc2:	00c0      	lsls	r0, r0, #3
 8000fc4:	4202      	tst	r2, r0
 8000fc6:	d020      	beq.n	800100a <__aeabi_fmul+0xfe>
 8000fc8:	4653      	mov	r3, sl
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d046      	beq.n	800105c <__aeabi_fmul+0x150>
 8000fce:	2b03      	cmp	r3, #3
 8000fd0:	d100      	bne.n	8000fd4 <__aeabi_fmul+0xc8>
 8000fd2:	e0bb      	b.n	800114c <__aeabi_fmul+0x240>
 8000fd4:	4651      	mov	r1, sl
 8000fd6:	464c      	mov	r4, r9
 8000fd8:	2901      	cmp	r1, #1
 8000fda:	d0d2      	beq.n	8000f82 <__aeabi_fmul+0x76>
 8000fdc:	002b      	movs	r3, r5
 8000fde:	337f      	adds	r3, #127	@ 0x7f
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	dd70      	ble.n	80010c6 <__aeabi_fmul+0x1ba>
 8000fe4:	0762      	lsls	r2, r4, #29
 8000fe6:	d004      	beq.n	8000ff2 <__aeabi_fmul+0xe6>
 8000fe8:	220f      	movs	r2, #15
 8000fea:	4022      	ands	r2, r4
 8000fec:	2a04      	cmp	r2, #4
 8000fee:	d000      	beq.n	8000ff2 <__aeabi_fmul+0xe6>
 8000ff0:	3404      	adds	r4, #4
 8000ff2:	0122      	lsls	r2, r4, #4
 8000ff4:	d503      	bpl.n	8000ffe <__aeabi_fmul+0xf2>
 8000ff6:	4b63      	ldr	r3, [pc, #396]	@ (8001184 <__aeabi_fmul+0x278>)
 8000ff8:	401c      	ands	r4, r3
 8000ffa:	002b      	movs	r3, r5
 8000ffc:	3380      	adds	r3, #128	@ 0x80
 8000ffe:	2bfe      	cmp	r3, #254	@ 0xfe
 8001000:	dc2c      	bgt.n	800105c <__aeabi_fmul+0x150>
 8001002:	01a2      	lsls	r2, r4, #6
 8001004:	0a52      	lsrs	r2, r2, #9
 8001006:	b2d8      	uxtb	r0, r3
 8001008:	e7bd      	b.n	8000f86 <__aeabi_fmul+0x7a>
 800100a:	2090      	movs	r0, #144	@ 0x90
 800100c:	0080      	lsls	r0, r0, #2
 800100e:	4202      	tst	r2, r0
 8001010:	d127      	bne.n	8001062 <__aeabi_fmul+0x156>
 8001012:	38b9      	subs	r0, #185	@ 0xb9
 8001014:	38ff      	subs	r0, #255	@ 0xff
 8001016:	4210      	tst	r0, r2
 8001018:	d06d      	beq.n	80010f6 <__aeabi_fmul+0x1ea>
 800101a:	003e      	movs	r6, r7
 800101c:	46a1      	mov	r9, r4
 800101e:	468a      	mov	sl, r1
 8001020:	e7d2      	b.n	8000fc8 <__aeabi_fmul+0xbc>
 8001022:	2c00      	cmp	r4, #0
 8001024:	d141      	bne.n	80010aa <__aeabi_fmul+0x19e>
 8001026:	2301      	movs	r3, #1
 8001028:	4642      	mov	r2, r8
 800102a:	431a      	orrs	r2, r3
 800102c:	4690      	mov	r8, r2
 800102e:	002b      	movs	r3, r5
 8001030:	4642      	mov	r2, r8
 8001032:	2101      	movs	r1, #1
 8001034:	1c5d      	adds	r5, r3, #1
 8001036:	2a0a      	cmp	r2, #10
 8001038:	dd97      	ble.n	8000f6a <__aeabi_fmul+0x5e>
 800103a:	e7c5      	b.n	8000fc8 <__aeabi_fmul+0xbc>
 800103c:	2b00      	cmp	r3, #0
 800103e:	d126      	bne.n	800108e <__aeabi_fmul+0x182>
 8001040:	2304      	movs	r3, #4
 8001042:	4698      	mov	r8, r3
 8001044:	3b03      	subs	r3, #3
 8001046:	2500      	movs	r5, #0
 8001048:	469a      	mov	sl, r3
 800104a:	e77a      	b.n	8000f42 <__aeabi_fmul+0x36>
 800104c:	2b00      	cmp	r3, #0
 800104e:	d118      	bne.n	8001082 <__aeabi_fmul+0x176>
 8001050:	2308      	movs	r3, #8
 8001052:	4698      	mov	r8, r3
 8001054:	3b06      	subs	r3, #6
 8001056:	25ff      	movs	r5, #255	@ 0xff
 8001058:	469a      	mov	sl, r3
 800105a:	e772      	b.n	8000f42 <__aeabi_fmul+0x36>
 800105c:	20ff      	movs	r0, #255	@ 0xff
 800105e:	2200      	movs	r2, #0
 8001060:	e791      	b.n	8000f86 <__aeabi_fmul+0x7a>
 8001062:	2280      	movs	r2, #128	@ 0x80
 8001064:	2600      	movs	r6, #0
 8001066:	20ff      	movs	r0, #255	@ 0xff
 8001068:	03d2      	lsls	r2, r2, #15
 800106a:	e78c      	b.n	8000f86 <__aeabi_fmul+0x7a>
 800106c:	4641      	mov	r1, r8
 800106e:	2202      	movs	r2, #2
 8001070:	3501      	adds	r5, #1
 8001072:	4311      	orrs	r1, r2
 8001074:	4688      	mov	r8, r1
 8001076:	35ff      	adds	r5, #255	@ 0xff
 8001078:	290a      	cmp	r1, #10
 800107a:	dca5      	bgt.n	8000fc8 <__aeabi_fmul+0xbc>
 800107c:	2102      	movs	r1, #2
 800107e:	407e      	eors	r6, r7
 8001080:	e774      	b.n	8000f6c <__aeabi_fmul+0x60>
 8001082:	230c      	movs	r3, #12
 8001084:	4698      	mov	r8, r3
 8001086:	3b09      	subs	r3, #9
 8001088:	25ff      	movs	r5, #255	@ 0xff
 800108a:	469a      	mov	sl, r3
 800108c:	e759      	b.n	8000f42 <__aeabi_fmul+0x36>
 800108e:	0018      	movs	r0, r3
 8001090:	f002 fa34 	bl	80034fc <__clzsi2>
 8001094:	464a      	mov	r2, r9
 8001096:	1f43      	subs	r3, r0, #5
 8001098:	2576      	movs	r5, #118	@ 0x76
 800109a:	409a      	lsls	r2, r3
 800109c:	2300      	movs	r3, #0
 800109e:	426d      	negs	r5, r5
 80010a0:	4691      	mov	r9, r2
 80010a2:	4698      	mov	r8, r3
 80010a4:	469a      	mov	sl, r3
 80010a6:	1a2d      	subs	r5, r5, r0
 80010a8:	e74b      	b.n	8000f42 <__aeabi_fmul+0x36>
 80010aa:	0020      	movs	r0, r4
 80010ac:	f002 fa26 	bl	80034fc <__clzsi2>
 80010b0:	4642      	mov	r2, r8
 80010b2:	1f43      	subs	r3, r0, #5
 80010b4:	409c      	lsls	r4, r3
 80010b6:	1a2b      	subs	r3, r5, r0
 80010b8:	3b76      	subs	r3, #118	@ 0x76
 80010ba:	2100      	movs	r1, #0
 80010bc:	1c5d      	adds	r5, r3, #1
 80010be:	2a0a      	cmp	r2, #10
 80010c0:	dc00      	bgt.n	80010c4 <__aeabi_fmul+0x1b8>
 80010c2:	e752      	b.n	8000f6a <__aeabi_fmul+0x5e>
 80010c4:	e780      	b.n	8000fc8 <__aeabi_fmul+0xbc>
 80010c6:	2201      	movs	r2, #1
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b1b      	cmp	r3, #27
 80010cc:	dd00      	ble.n	80010d0 <__aeabi_fmul+0x1c4>
 80010ce:	e758      	b.n	8000f82 <__aeabi_fmul+0x76>
 80010d0:	359e      	adds	r5, #158	@ 0x9e
 80010d2:	0022      	movs	r2, r4
 80010d4:	40ac      	lsls	r4, r5
 80010d6:	40da      	lsrs	r2, r3
 80010d8:	1e63      	subs	r3, r4, #1
 80010da:	419c      	sbcs	r4, r3
 80010dc:	4322      	orrs	r2, r4
 80010de:	0753      	lsls	r3, r2, #29
 80010e0:	d004      	beq.n	80010ec <__aeabi_fmul+0x1e0>
 80010e2:	230f      	movs	r3, #15
 80010e4:	4013      	ands	r3, r2
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	d000      	beq.n	80010ec <__aeabi_fmul+0x1e0>
 80010ea:	3204      	adds	r2, #4
 80010ec:	0153      	lsls	r3, r2, #5
 80010ee:	d537      	bpl.n	8001160 <__aeabi_fmul+0x254>
 80010f0:	2001      	movs	r0, #1
 80010f2:	2200      	movs	r2, #0
 80010f4:	e747      	b.n	8000f86 <__aeabi_fmul+0x7a>
 80010f6:	0c21      	lsrs	r1, r4, #16
 80010f8:	464a      	mov	r2, r9
 80010fa:	0424      	lsls	r4, r4, #16
 80010fc:	0c24      	lsrs	r4, r4, #16
 80010fe:	0027      	movs	r7, r4
 8001100:	0c10      	lsrs	r0, r2, #16
 8001102:	0412      	lsls	r2, r2, #16
 8001104:	0c12      	lsrs	r2, r2, #16
 8001106:	4344      	muls	r4, r0
 8001108:	4357      	muls	r7, r2
 800110a:	4348      	muls	r0, r1
 800110c:	4351      	muls	r1, r2
 800110e:	0c3a      	lsrs	r2, r7, #16
 8001110:	1909      	adds	r1, r1, r4
 8001112:	1852      	adds	r2, r2, r1
 8001114:	4294      	cmp	r4, r2
 8001116:	d903      	bls.n	8001120 <__aeabi_fmul+0x214>
 8001118:	2180      	movs	r1, #128	@ 0x80
 800111a:	0249      	lsls	r1, r1, #9
 800111c:	468c      	mov	ip, r1
 800111e:	4460      	add	r0, ip
 8001120:	043f      	lsls	r7, r7, #16
 8001122:	0411      	lsls	r1, r2, #16
 8001124:	0c3f      	lsrs	r7, r7, #16
 8001126:	19c9      	adds	r1, r1, r7
 8001128:	018c      	lsls	r4, r1, #6
 800112a:	1e67      	subs	r7, r4, #1
 800112c:	41bc      	sbcs	r4, r7
 800112e:	0c12      	lsrs	r2, r2, #16
 8001130:	0e89      	lsrs	r1, r1, #26
 8001132:	1812      	adds	r2, r2, r0
 8001134:	430c      	orrs	r4, r1
 8001136:	0192      	lsls	r2, r2, #6
 8001138:	4314      	orrs	r4, r2
 800113a:	0112      	lsls	r2, r2, #4
 800113c:	d50e      	bpl.n	800115c <__aeabi_fmul+0x250>
 800113e:	2301      	movs	r3, #1
 8001140:	0862      	lsrs	r2, r4, #1
 8001142:	401c      	ands	r4, r3
 8001144:	4314      	orrs	r4, r2
 8001146:	e749      	b.n	8000fdc <__aeabi_fmul+0xd0>
 8001148:	003e      	movs	r6, r7
 800114a:	46a1      	mov	r9, r4
 800114c:	2280      	movs	r2, #128	@ 0x80
 800114e:	464b      	mov	r3, r9
 8001150:	03d2      	lsls	r2, r2, #15
 8001152:	431a      	orrs	r2, r3
 8001154:	0252      	lsls	r2, r2, #9
 8001156:	20ff      	movs	r0, #255	@ 0xff
 8001158:	0a52      	lsrs	r2, r2, #9
 800115a:	e714      	b.n	8000f86 <__aeabi_fmul+0x7a>
 800115c:	001d      	movs	r5, r3
 800115e:	e73d      	b.n	8000fdc <__aeabi_fmul+0xd0>
 8001160:	0192      	lsls	r2, r2, #6
 8001162:	2000      	movs	r0, #0
 8001164:	0a52      	lsrs	r2, r2, #9
 8001166:	e70e      	b.n	8000f86 <__aeabi_fmul+0x7a>
 8001168:	290f      	cmp	r1, #15
 800116a:	d1ed      	bne.n	8001148 <__aeabi_fmul+0x23c>
 800116c:	2280      	movs	r2, #128	@ 0x80
 800116e:	464b      	mov	r3, r9
 8001170:	03d2      	lsls	r2, r2, #15
 8001172:	4213      	tst	r3, r2
 8001174:	d0ea      	beq.n	800114c <__aeabi_fmul+0x240>
 8001176:	4214      	tst	r4, r2
 8001178:	d1e8      	bne.n	800114c <__aeabi_fmul+0x240>
 800117a:	003e      	movs	r6, r7
 800117c:	20ff      	movs	r0, #255	@ 0xff
 800117e:	4322      	orrs	r2, r4
 8001180:	e701      	b.n	8000f86 <__aeabi_fmul+0x7a>
 8001182:	46c0      	nop			@ (mov r8, r8)
 8001184:	f7ffffff 	.word	0xf7ffffff

08001188 <__aeabi_fsub>:
 8001188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800118a:	4647      	mov	r7, r8
 800118c:	46ce      	mov	lr, r9
 800118e:	024e      	lsls	r6, r1, #9
 8001190:	0243      	lsls	r3, r0, #9
 8001192:	0045      	lsls	r5, r0, #1
 8001194:	0a72      	lsrs	r2, r6, #9
 8001196:	0fc4      	lsrs	r4, r0, #31
 8001198:	0048      	lsls	r0, r1, #1
 800119a:	b580      	push	{r7, lr}
 800119c:	4694      	mov	ip, r2
 800119e:	0a5f      	lsrs	r7, r3, #9
 80011a0:	0e2d      	lsrs	r5, r5, #24
 80011a2:	099b      	lsrs	r3, r3, #6
 80011a4:	0e00      	lsrs	r0, r0, #24
 80011a6:	0fc9      	lsrs	r1, r1, #31
 80011a8:	09b6      	lsrs	r6, r6, #6
 80011aa:	28ff      	cmp	r0, #255	@ 0xff
 80011ac:	d024      	beq.n	80011f8 <__aeabi_fsub+0x70>
 80011ae:	2201      	movs	r2, #1
 80011b0:	4051      	eors	r1, r2
 80011b2:	1a2a      	subs	r2, r5, r0
 80011b4:	428c      	cmp	r4, r1
 80011b6:	d00f      	beq.n	80011d8 <__aeabi_fsub+0x50>
 80011b8:	2a00      	cmp	r2, #0
 80011ba:	dc00      	bgt.n	80011be <__aeabi_fsub+0x36>
 80011bc:	e16a      	b.n	8001494 <__aeabi_fsub+0x30c>
 80011be:	2800      	cmp	r0, #0
 80011c0:	d135      	bne.n	800122e <__aeabi_fsub+0xa6>
 80011c2:	2e00      	cmp	r6, #0
 80011c4:	d100      	bne.n	80011c8 <__aeabi_fsub+0x40>
 80011c6:	e0a2      	b.n	800130e <__aeabi_fsub+0x186>
 80011c8:	1e51      	subs	r1, r2, #1
 80011ca:	2a01      	cmp	r2, #1
 80011cc:	d100      	bne.n	80011d0 <__aeabi_fsub+0x48>
 80011ce:	e124      	b.n	800141a <__aeabi_fsub+0x292>
 80011d0:	2aff      	cmp	r2, #255	@ 0xff
 80011d2:	d021      	beq.n	8001218 <__aeabi_fsub+0x90>
 80011d4:	000a      	movs	r2, r1
 80011d6:	e02f      	b.n	8001238 <__aeabi_fsub+0xb0>
 80011d8:	2a00      	cmp	r2, #0
 80011da:	dc00      	bgt.n	80011de <__aeabi_fsub+0x56>
 80011dc:	e167      	b.n	80014ae <__aeabi_fsub+0x326>
 80011de:	2800      	cmp	r0, #0
 80011e0:	d05e      	beq.n	80012a0 <__aeabi_fsub+0x118>
 80011e2:	2dff      	cmp	r5, #255	@ 0xff
 80011e4:	d018      	beq.n	8001218 <__aeabi_fsub+0x90>
 80011e6:	2180      	movs	r1, #128	@ 0x80
 80011e8:	04c9      	lsls	r1, r1, #19
 80011ea:	430e      	orrs	r6, r1
 80011ec:	2a1b      	cmp	r2, #27
 80011ee:	dc00      	bgt.n	80011f2 <__aeabi_fsub+0x6a>
 80011f0:	e076      	b.n	80012e0 <__aeabi_fsub+0x158>
 80011f2:	002a      	movs	r2, r5
 80011f4:	3301      	adds	r3, #1
 80011f6:	e032      	b.n	800125e <__aeabi_fsub+0xd6>
 80011f8:	002a      	movs	r2, r5
 80011fa:	3aff      	subs	r2, #255	@ 0xff
 80011fc:	4691      	mov	r9, r2
 80011fe:	2e00      	cmp	r6, #0
 8001200:	d042      	beq.n	8001288 <__aeabi_fsub+0x100>
 8001202:	428c      	cmp	r4, r1
 8001204:	d055      	beq.n	80012b2 <__aeabi_fsub+0x12a>
 8001206:	464a      	mov	r2, r9
 8001208:	2a00      	cmp	r2, #0
 800120a:	d100      	bne.n	800120e <__aeabi_fsub+0x86>
 800120c:	e09c      	b.n	8001348 <__aeabi_fsub+0x1c0>
 800120e:	2d00      	cmp	r5, #0
 8001210:	d100      	bne.n	8001214 <__aeabi_fsub+0x8c>
 8001212:	e077      	b.n	8001304 <__aeabi_fsub+0x17c>
 8001214:	000c      	movs	r4, r1
 8001216:	0033      	movs	r3, r6
 8001218:	08db      	lsrs	r3, r3, #3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d100      	bne.n	8001220 <__aeabi_fsub+0x98>
 800121e:	e06e      	b.n	80012fe <__aeabi_fsub+0x176>
 8001220:	2280      	movs	r2, #128	@ 0x80
 8001222:	03d2      	lsls	r2, r2, #15
 8001224:	4313      	orrs	r3, r2
 8001226:	025b      	lsls	r3, r3, #9
 8001228:	20ff      	movs	r0, #255	@ 0xff
 800122a:	0a5b      	lsrs	r3, r3, #9
 800122c:	e024      	b.n	8001278 <__aeabi_fsub+0xf0>
 800122e:	2dff      	cmp	r5, #255	@ 0xff
 8001230:	d0f2      	beq.n	8001218 <__aeabi_fsub+0x90>
 8001232:	2180      	movs	r1, #128	@ 0x80
 8001234:	04c9      	lsls	r1, r1, #19
 8001236:	430e      	orrs	r6, r1
 8001238:	2101      	movs	r1, #1
 800123a:	2a1b      	cmp	r2, #27
 800123c:	dc08      	bgt.n	8001250 <__aeabi_fsub+0xc8>
 800123e:	0031      	movs	r1, r6
 8001240:	2020      	movs	r0, #32
 8001242:	40d1      	lsrs	r1, r2
 8001244:	1a82      	subs	r2, r0, r2
 8001246:	4096      	lsls	r6, r2
 8001248:	0032      	movs	r2, r6
 800124a:	1e50      	subs	r0, r2, #1
 800124c:	4182      	sbcs	r2, r0
 800124e:	4311      	orrs	r1, r2
 8001250:	1a5b      	subs	r3, r3, r1
 8001252:	015a      	lsls	r2, r3, #5
 8001254:	d460      	bmi.n	8001318 <__aeabi_fsub+0x190>
 8001256:	2107      	movs	r1, #7
 8001258:	002a      	movs	r2, r5
 800125a:	4019      	ands	r1, r3
 800125c:	d057      	beq.n	800130e <__aeabi_fsub+0x186>
 800125e:	210f      	movs	r1, #15
 8001260:	4019      	ands	r1, r3
 8001262:	2904      	cmp	r1, #4
 8001264:	d000      	beq.n	8001268 <__aeabi_fsub+0xe0>
 8001266:	3304      	adds	r3, #4
 8001268:	0159      	lsls	r1, r3, #5
 800126a:	d550      	bpl.n	800130e <__aeabi_fsub+0x186>
 800126c:	1c50      	adds	r0, r2, #1
 800126e:	2afe      	cmp	r2, #254	@ 0xfe
 8001270:	d045      	beq.n	80012fe <__aeabi_fsub+0x176>
 8001272:	019b      	lsls	r3, r3, #6
 8001274:	b2c0      	uxtb	r0, r0
 8001276:	0a5b      	lsrs	r3, r3, #9
 8001278:	05c0      	lsls	r0, r0, #23
 800127a:	4318      	orrs	r0, r3
 800127c:	07e4      	lsls	r4, r4, #31
 800127e:	4320      	orrs	r0, r4
 8001280:	bcc0      	pop	{r6, r7}
 8001282:	46b9      	mov	r9, r7
 8001284:	46b0      	mov	r8, r6
 8001286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001288:	2201      	movs	r2, #1
 800128a:	4051      	eors	r1, r2
 800128c:	428c      	cmp	r4, r1
 800128e:	d1ba      	bne.n	8001206 <__aeabi_fsub+0x7e>
 8001290:	464a      	mov	r2, r9
 8001292:	2a00      	cmp	r2, #0
 8001294:	d010      	beq.n	80012b8 <__aeabi_fsub+0x130>
 8001296:	2d00      	cmp	r5, #0
 8001298:	d100      	bne.n	800129c <__aeabi_fsub+0x114>
 800129a:	e098      	b.n	80013ce <__aeabi_fsub+0x246>
 800129c:	2300      	movs	r3, #0
 800129e:	e7bb      	b.n	8001218 <__aeabi_fsub+0x90>
 80012a0:	2e00      	cmp	r6, #0
 80012a2:	d034      	beq.n	800130e <__aeabi_fsub+0x186>
 80012a4:	1e51      	subs	r1, r2, #1
 80012a6:	2a01      	cmp	r2, #1
 80012a8:	d06e      	beq.n	8001388 <__aeabi_fsub+0x200>
 80012aa:	2aff      	cmp	r2, #255	@ 0xff
 80012ac:	d0b4      	beq.n	8001218 <__aeabi_fsub+0x90>
 80012ae:	000a      	movs	r2, r1
 80012b0:	e79c      	b.n	80011ec <__aeabi_fsub+0x64>
 80012b2:	2a00      	cmp	r2, #0
 80012b4:	d000      	beq.n	80012b8 <__aeabi_fsub+0x130>
 80012b6:	e088      	b.n	80013ca <__aeabi_fsub+0x242>
 80012b8:	20fe      	movs	r0, #254	@ 0xfe
 80012ba:	1c6a      	adds	r2, r5, #1
 80012bc:	4210      	tst	r0, r2
 80012be:	d000      	beq.n	80012c2 <__aeabi_fsub+0x13a>
 80012c0:	e092      	b.n	80013e8 <__aeabi_fsub+0x260>
 80012c2:	2d00      	cmp	r5, #0
 80012c4:	d000      	beq.n	80012c8 <__aeabi_fsub+0x140>
 80012c6:	e0a4      	b.n	8001412 <__aeabi_fsub+0x28a>
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d100      	bne.n	80012ce <__aeabi_fsub+0x146>
 80012cc:	e0cb      	b.n	8001466 <__aeabi_fsub+0x2de>
 80012ce:	2e00      	cmp	r6, #0
 80012d0:	d000      	beq.n	80012d4 <__aeabi_fsub+0x14c>
 80012d2:	e0ca      	b.n	800146a <__aeabi_fsub+0x2e2>
 80012d4:	2200      	movs	r2, #0
 80012d6:	08db      	lsrs	r3, r3, #3
 80012d8:	025b      	lsls	r3, r3, #9
 80012da:	0a5b      	lsrs	r3, r3, #9
 80012dc:	b2d0      	uxtb	r0, r2
 80012de:	e7cb      	b.n	8001278 <__aeabi_fsub+0xf0>
 80012e0:	0031      	movs	r1, r6
 80012e2:	2020      	movs	r0, #32
 80012e4:	40d1      	lsrs	r1, r2
 80012e6:	1a82      	subs	r2, r0, r2
 80012e8:	4096      	lsls	r6, r2
 80012ea:	0032      	movs	r2, r6
 80012ec:	1e50      	subs	r0, r2, #1
 80012ee:	4182      	sbcs	r2, r0
 80012f0:	430a      	orrs	r2, r1
 80012f2:	189b      	adds	r3, r3, r2
 80012f4:	015a      	lsls	r2, r3, #5
 80012f6:	d5ae      	bpl.n	8001256 <__aeabi_fsub+0xce>
 80012f8:	1c6a      	adds	r2, r5, #1
 80012fa:	2dfe      	cmp	r5, #254	@ 0xfe
 80012fc:	d14a      	bne.n	8001394 <__aeabi_fsub+0x20c>
 80012fe:	20ff      	movs	r0, #255	@ 0xff
 8001300:	2300      	movs	r3, #0
 8001302:	e7b9      	b.n	8001278 <__aeabi_fsub+0xf0>
 8001304:	22ff      	movs	r2, #255	@ 0xff
 8001306:	2b00      	cmp	r3, #0
 8001308:	d14b      	bne.n	80013a2 <__aeabi_fsub+0x21a>
 800130a:	000c      	movs	r4, r1
 800130c:	0033      	movs	r3, r6
 800130e:	08db      	lsrs	r3, r3, #3
 8001310:	2aff      	cmp	r2, #255	@ 0xff
 8001312:	d100      	bne.n	8001316 <__aeabi_fsub+0x18e>
 8001314:	e781      	b.n	800121a <__aeabi_fsub+0x92>
 8001316:	e7df      	b.n	80012d8 <__aeabi_fsub+0x150>
 8001318:	019f      	lsls	r7, r3, #6
 800131a:	09bf      	lsrs	r7, r7, #6
 800131c:	0038      	movs	r0, r7
 800131e:	f002 f8ed 	bl	80034fc <__clzsi2>
 8001322:	3805      	subs	r0, #5
 8001324:	4087      	lsls	r7, r0
 8001326:	4285      	cmp	r5, r0
 8001328:	dc21      	bgt.n	800136e <__aeabi_fsub+0x1e6>
 800132a:	003b      	movs	r3, r7
 800132c:	2120      	movs	r1, #32
 800132e:	1b42      	subs	r2, r0, r5
 8001330:	3201      	adds	r2, #1
 8001332:	40d3      	lsrs	r3, r2
 8001334:	1a8a      	subs	r2, r1, r2
 8001336:	4097      	lsls	r7, r2
 8001338:	1e7a      	subs	r2, r7, #1
 800133a:	4197      	sbcs	r7, r2
 800133c:	2200      	movs	r2, #0
 800133e:	433b      	orrs	r3, r7
 8001340:	0759      	lsls	r1, r3, #29
 8001342:	d000      	beq.n	8001346 <__aeabi_fsub+0x1be>
 8001344:	e78b      	b.n	800125e <__aeabi_fsub+0xd6>
 8001346:	e78f      	b.n	8001268 <__aeabi_fsub+0xe0>
 8001348:	20fe      	movs	r0, #254	@ 0xfe
 800134a:	1c6a      	adds	r2, r5, #1
 800134c:	4210      	tst	r0, r2
 800134e:	d112      	bne.n	8001376 <__aeabi_fsub+0x1ee>
 8001350:	2d00      	cmp	r5, #0
 8001352:	d152      	bne.n	80013fa <__aeabi_fsub+0x272>
 8001354:	2b00      	cmp	r3, #0
 8001356:	d07c      	beq.n	8001452 <__aeabi_fsub+0x2ca>
 8001358:	2e00      	cmp	r6, #0
 800135a:	d0bb      	beq.n	80012d4 <__aeabi_fsub+0x14c>
 800135c:	1b9a      	subs	r2, r3, r6
 800135e:	0150      	lsls	r0, r2, #5
 8001360:	d400      	bmi.n	8001364 <__aeabi_fsub+0x1dc>
 8001362:	e08b      	b.n	800147c <__aeabi_fsub+0x2f4>
 8001364:	2401      	movs	r4, #1
 8001366:	2200      	movs	r2, #0
 8001368:	1af3      	subs	r3, r6, r3
 800136a:	400c      	ands	r4, r1
 800136c:	e7e8      	b.n	8001340 <__aeabi_fsub+0x1b8>
 800136e:	4b56      	ldr	r3, [pc, #344]	@ (80014c8 <__aeabi_fsub+0x340>)
 8001370:	1a2a      	subs	r2, r5, r0
 8001372:	403b      	ands	r3, r7
 8001374:	e7e4      	b.n	8001340 <__aeabi_fsub+0x1b8>
 8001376:	1b9f      	subs	r7, r3, r6
 8001378:	017a      	lsls	r2, r7, #5
 800137a:	d446      	bmi.n	800140a <__aeabi_fsub+0x282>
 800137c:	2f00      	cmp	r7, #0
 800137e:	d1cd      	bne.n	800131c <__aeabi_fsub+0x194>
 8001380:	2400      	movs	r4, #0
 8001382:	2000      	movs	r0, #0
 8001384:	2300      	movs	r3, #0
 8001386:	e777      	b.n	8001278 <__aeabi_fsub+0xf0>
 8001388:	199b      	adds	r3, r3, r6
 800138a:	2501      	movs	r5, #1
 800138c:	3201      	adds	r2, #1
 800138e:	0159      	lsls	r1, r3, #5
 8001390:	d400      	bmi.n	8001394 <__aeabi_fsub+0x20c>
 8001392:	e760      	b.n	8001256 <__aeabi_fsub+0xce>
 8001394:	2101      	movs	r1, #1
 8001396:	484d      	ldr	r0, [pc, #308]	@ (80014cc <__aeabi_fsub+0x344>)
 8001398:	4019      	ands	r1, r3
 800139a:	085b      	lsrs	r3, r3, #1
 800139c:	4003      	ands	r3, r0
 800139e:	430b      	orrs	r3, r1
 80013a0:	e7ce      	b.n	8001340 <__aeabi_fsub+0x1b8>
 80013a2:	1e57      	subs	r7, r2, #1
 80013a4:	2a01      	cmp	r2, #1
 80013a6:	d05a      	beq.n	800145e <__aeabi_fsub+0x2d6>
 80013a8:	000c      	movs	r4, r1
 80013aa:	2aff      	cmp	r2, #255	@ 0xff
 80013ac:	d033      	beq.n	8001416 <__aeabi_fsub+0x28e>
 80013ae:	2201      	movs	r2, #1
 80013b0:	2f1b      	cmp	r7, #27
 80013b2:	dc07      	bgt.n	80013c4 <__aeabi_fsub+0x23c>
 80013b4:	2120      	movs	r1, #32
 80013b6:	1bc9      	subs	r1, r1, r7
 80013b8:	001a      	movs	r2, r3
 80013ba:	408b      	lsls	r3, r1
 80013bc:	40fa      	lsrs	r2, r7
 80013be:	1e59      	subs	r1, r3, #1
 80013c0:	418b      	sbcs	r3, r1
 80013c2:	431a      	orrs	r2, r3
 80013c4:	0005      	movs	r5, r0
 80013c6:	1ab3      	subs	r3, r6, r2
 80013c8:	e743      	b.n	8001252 <__aeabi_fsub+0xca>
 80013ca:	2d00      	cmp	r5, #0
 80013cc:	d123      	bne.n	8001416 <__aeabi_fsub+0x28e>
 80013ce:	22ff      	movs	r2, #255	@ 0xff
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d09b      	beq.n	800130c <__aeabi_fsub+0x184>
 80013d4:	1e51      	subs	r1, r2, #1
 80013d6:	2a01      	cmp	r2, #1
 80013d8:	d0d6      	beq.n	8001388 <__aeabi_fsub+0x200>
 80013da:	2aff      	cmp	r2, #255	@ 0xff
 80013dc:	d01b      	beq.n	8001416 <__aeabi_fsub+0x28e>
 80013de:	291b      	cmp	r1, #27
 80013e0:	dd2c      	ble.n	800143c <__aeabi_fsub+0x2b4>
 80013e2:	0002      	movs	r2, r0
 80013e4:	1c73      	adds	r3, r6, #1
 80013e6:	e73a      	b.n	800125e <__aeabi_fsub+0xd6>
 80013e8:	2aff      	cmp	r2, #255	@ 0xff
 80013ea:	d088      	beq.n	80012fe <__aeabi_fsub+0x176>
 80013ec:	199b      	adds	r3, r3, r6
 80013ee:	085b      	lsrs	r3, r3, #1
 80013f0:	0759      	lsls	r1, r3, #29
 80013f2:	d000      	beq.n	80013f6 <__aeabi_fsub+0x26e>
 80013f4:	e733      	b.n	800125e <__aeabi_fsub+0xd6>
 80013f6:	08db      	lsrs	r3, r3, #3
 80013f8:	e76e      	b.n	80012d8 <__aeabi_fsub+0x150>
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d110      	bne.n	8001420 <__aeabi_fsub+0x298>
 80013fe:	2e00      	cmp	r6, #0
 8001400:	d043      	beq.n	800148a <__aeabi_fsub+0x302>
 8001402:	2401      	movs	r4, #1
 8001404:	0033      	movs	r3, r6
 8001406:	400c      	ands	r4, r1
 8001408:	e706      	b.n	8001218 <__aeabi_fsub+0x90>
 800140a:	2401      	movs	r4, #1
 800140c:	1af7      	subs	r7, r6, r3
 800140e:	400c      	ands	r4, r1
 8001410:	e784      	b.n	800131c <__aeabi_fsub+0x194>
 8001412:	2b00      	cmp	r3, #0
 8001414:	d104      	bne.n	8001420 <__aeabi_fsub+0x298>
 8001416:	0033      	movs	r3, r6
 8001418:	e6fe      	b.n	8001218 <__aeabi_fsub+0x90>
 800141a:	2501      	movs	r5, #1
 800141c:	1b9b      	subs	r3, r3, r6
 800141e:	e718      	b.n	8001252 <__aeabi_fsub+0xca>
 8001420:	2e00      	cmp	r6, #0
 8001422:	d100      	bne.n	8001426 <__aeabi_fsub+0x29e>
 8001424:	e6f8      	b.n	8001218 <__aeabi_fsub+0x90>
 8001426:	2280      	movs	r2, #128	@ 0x80
 8001428:	03d2      	lsls	r2, r2, #15
 800142a:	4297      	cmp	r7, r2
 800142c:	d304      	bcc.n	8001438 <__aeabi_fsub+0x2b0>
 800142e:	4594      	cmp	ip, r2
 8001430:	d202      	bcs.n	8001438 <__aeabi_fsub+0x2b0>
 8001432:	2401      	movs	r4, #1
 8001434:	0033      	movs	r3, r6
 8001436:	400c      	ands	r4, r1
 8001438:	08db      	lsrs	r3, r3, #3
 800143a:	e6f1      	b.n	8001220 <__aeabi_fsub+0x98>
 800143c:	001a      	movs	r2, r3
 800143e:	2520      	movs	r5, #32
 8001440:	40ca      	lsrs	r2, r1
 8001442:	1a69      	subs	r1, r5, r1
 8001444:	408b      	lsls	r3, r1
 8001446:	1e59      	subs	r1, r3, #1
 8001448:	418b      	sbcs	r3, r1
 800144a:	4313      	orrs	r3, r2
 800144c:	0005      	movs	r5, r0
 800144e:	199b      	adds	r3, r3, r6
 8001450:	e750      	b.n	80012f4 <__aeabi_fsub+0x16c>
 8001452:	2e00      	cmp	r6, #0
 8001454:	d094      	beq.n	8001380 <__aeabi_fsub+0x1f8>
 8001456:	2401      	movs	r4, #1
 8001458:	0033      	movs	r3, r6
 800145a:	400c      	ands	r4, r1
 800145c:	e73a      	b.n	80012d4 <__aeabi_fsub+0x14c>
 800145e:	000c      	movs	r4, r1
 8001460:	2501      	movs	r5, #1
 8001462:	1af3      	subs	r3, r6, r3
 8001464:	e6f5      	b.n	8001252 <__aeabi_fsub+0xca>
 8001466:	0033      	movs	r3, r6
 8001468:	e734      	b.n	80012d4 <__aeabi_fsub+0x14c>
 800146a:	199b      	adds	r3, r3, r6
 800146c:	2200      	movs	r2, #0
 800146e:	0159      	lsls	r1, r3, #5
 8001470:	d5c1      	bpl.n	80013f6 <__aeabi_fsub+0x26e>
 8001472:	4a15      	ldr	r2, [pc, #84]	@ (80014c8 <__aeabi_fsub+0x340>)
 8001474:	4013      	ands	r3, r2
 8001476:	08db      	lsrs	r3, r3, #3
 8001478:	2201      	movs	r2, #1
 800147a:	e72d      	b.n	80012d8 <__aeabi_fsub+0x150>
 800147c:	2a00      	cmp	r2, #0
 800147e:	d100      	bne.n	8001482 <__aeabi_fsub+0x2fa>
 8001480:	e77e      	b.n	8001380 <__aeabi_fsub+0x1f8>
 8001482:	0013      	movs	r3, r2
 8001484:	2200      	movs	r2, #0
 8001486:	08db      	lsrs	r3, r3, #3
 8001488:	e726      	b.n	80012d8 <__aeabi_fsub+0x150>
 800148a:	2380      	movs	r3, #128	@ 0x80
 800148c:	2400      	movs	r4, #0
 800148e:	20ff      	movs	r0, #255	@ 0xff
 8001490:	03db      	lsls	r3, r3, #15
 8001492:	e6f1      	b.n	8001278 <__aeabi_fsub+0xf0>
 8001494:	2a00      	cmp	r2, #0
 8001496:	d100      	bne.n	800149a <__aeabi_fsub+0x312>
 8001498:	e756      	b.n	8001348 <__aeabi_fsub+0x1c0>
 800149a:	1b47      	subs	r7, r0, r5
 800149c:	003a      	movs	r2, r7
 800149e:	2d00      	cmp	r5, #0
 80014a0:	d100      	bne.n	80014a4 <__aeabi_fsub+0x31c>
 80014a2:	e730      	b.n	8001306 <__aeabi_fsub+0x17e>
 80014a4:	2280      	movs	r2, #128	@ 0x80
 80014a6:	04d2      	lsls	r2, r2, #19
 80014a8:	000c      	movs	r4, r1
 80014aa:	4313      	orrs	r3, r2
 80014ac:	e77f      	b.n	80013ae <__aeabi_fsub+0x226>
 80014ae:	2a00      	cmp	r2, #0
 80014b0:	d100      	bne.n	80014b4 <__aeabi_fsub+0x32c>
 80014b2:	e701      	b.n	80012b8 <__aeabi_fsub+0x130>
 80014b4:	1b41      	subs	r1, r0, r5
 80014b6:	2d00      	cmp	r5, #0
 80014b8:	d101      	bne.n	80014be <__aeabi_fsub+0x336>
 80014ba:	000a      	movs	r2, r1
 80014bc:	e788      	b.n	80013d0 <__aeabi_fsub+0x248>
 80014be:	2280      	movs	r2, #128	@ 0x80
 80014c0:	04d2      	lsls	r2, r2, #19
 80014c2:	4313      	orrs	r3, r2
 80014c4:	e78b      	b.n	80013de <__aeabi_fsub+0x256>
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	fbffffff 	.word	0xfbffffff
 80014cc:	7dffffff 	.word	0x7dffffff

080014d0 <__aeabi_i2f>:
 80014d0:	b570      	push	{r4, r5, r6, lr}
 80014d2:	2800      	cmp	r0, #0
 80014d4:	d013      	beq.n	80014fe <__aeabi_i2f+0x2e>
 80014d6:	17c3      	asrs	r3, r0, #31
 80014d8:	18c5      	adds	r5, r0, r3
 80014da:	405d      	eors	r5, r3
 80014dc:	0fc4      	lsrs	r4, r0, #31
 80014de:	0028      	movs	r0, r5
 80014e0:	f002 f80c 	bl	80034fc <__clzsi2>
 80014e4:	239e      	movs	r3, #158	@ 0x9e
 80014e6:	0001      	movs	r1, r0
 80014e8:	1a1b      	subs	r3, r3, r0
 80014ea:	2b96      	cmp	r3, #150	@ 0x96
 80014ec:	dc0f      	bgt.n	800150e <__aeabi_i2f+0x3e>
 80014ee:	2808      	cmp	r0, #8
 80014f0:	d034      	beq.n	800155c <__aeabi_i2f+0x8c>
 80014f2:	3908      	subs	r1, #8
 80014f4:	408d      	lsls	r5, r1
 80014f6:	026d      	lsls	r5, r5, #9
 80014f8:	0a6d      	lsrs	r5, r5, #9
 80014fa:	b2d8      	uxtb	r0, r3
 80014fc:	e002      	b.n	8001504 <__aeabi_i2f+0x34>
 80014fe:	2400      	movs	r4, #0
 8001500:	2000      	movs	r0, #0
 8001502:	2500      	movs	r5, #0
 8001504:	05c0      	lsls	r0, r0, #23
 8001506:	4328      	orrs	r0, r5
 8001508:	07e4      	lsls	r4, r4, #31
 800150a:	4320      	orrs	r0, r4
 800150c:	bd70      	pop	{r4, r5, r6, pc}
 800150e:	2b99      	cmp	r3, #153	@ 0x99
 8001510:	dc16      	bgt.n	8001540 <__aeabi_i2f+0x70>
 8001512:	1f42      	subs	r2, r0, #5
 8001514:	2805      	cmp	r0, #5
 8001516:	d000      	beq.n	800151a <__aeabi_i2f+0x4a>
 8001518:	4095      	lsls	r5, r2
 800151a:	002a      	movs	r2, r5
 800151c:	4811      	ldr	r0, [pc, #68]	@ (8001564 <__aeabi_i2f+0x94>)
 800151e:	4002      	ands	r2, r0
 8001520:	076e      	lsls	r6, r5, #29
 8001522:	d009      	beq.n	8001538 <__aeabi_i2f+0x68>
 8001524:	260f      	movs	r6, #15
 8001526:	4035      	ands	r5, r6
 8001528:	2d04      	cmp	r5, #4
 800152a:	d005      	beq.n	8001538 <__aeabi_i2f+0x68>
 800152c:	3204      	adds	r2, #4
 800152e:	0155      	lsls	r5, r2, #5
 8001530:	d502      	bpl.n	8001538 <__aeabi_i2f+0x68>
 8001532:	239f      	movs	r3, #159	@ 0x9f
 8001534:	4002      	ands	r2, r0
 8001536:	1a5b      	subs	r3, r3, r1
 8001538:	0192      	lsls	r2, r2, #6
 800153a:	0a55      	lsrs	r5, r2, #9
 800153c:	b2d8      	uxtb	r0, r3
 800153e:	e7e1      	b.n	8001504 <__aeabi_i2f+0x34>
 8001540:	2205      	movs	r2, #5
 8001542:	1a12      	subs	r2, r2, r0
 8001544:	0028      	movs	r0, r5
 8001546:	40d0      	lsrs	r0, r2
 8001548:	0002      	movs	r2, r0
 800154a:	0008      	movs	r0, r1
 800154c:	301b      	adds	r0, #27
 800154e:	4085      	lsls	r5, r0
 8001550:	0028      	movs	r0, r5
 8001552:	1e45      	subs	r5, r0, #1
 8001554:	41a8      	sbcs	r0, r5
 8001556:	4302      	orrs	r2, r0
 8001558:	0015      	movs	r5, r2
 800155a:	e7de      	b.n	800151a <__aeabi_i2f+0x4a>
 800155c:	026d      	lsls	r5, r5, #9
 800155e:	2096      	movs	r0, #150	@ 0x96
 8001560:	0a6d      	lsrs	r5, r5, #9
 8001562:	e7cf      	b.n	8001504 <__aeabi_i2f+0x34>
 8001564:	fbffffff 	.word	0xfbffffff

08001568 <__aeabi_ui2f>:
 8001568:	b570      	push	{r4, r5, r6, lr}
 800156a:	1e04      	subs	r4, r0, #0
 800156c:	d00e      	beq.n	800158c <__aeabi_ui2f+0x24>
 800156e:	f001 ffc5 	bl	80034fc <__clzsi2>
 8001572:	239e      	movs	r3, #158	@ 0x9e
 8001574:	0001      	movs	r1, r0
 8001576:	1a1b      	subs	r3, r3, r0
 8001578:	2b96      	cmp	r3, #150	@ 0x96
 800157a:	dc0c      	bgt.n	8001596 <__aeabi_ui2f+0x2e>
 800157c:	2808      	cmp	r0, #8
 800157e:	d02f      	beq.n	80015e0 <__aeabi_ui2f+0x78>
 8001580:	3908      	subs	r1, #8
 8001582:	408c      	lsls	r4, r1
 8001584:	0264      	lsls	r4, r4, #9
 8001586:	0a64      	lsrs	r4, r4, #9
 8001588:	b2d8      	uxtb	r0, r3
 800158a:	e001      	b.n	8001590 <__aeabi_ui2f+0x28>
 800158c:	2000      	movs	r0, #0
 800158e:	2400      	movs	r4, #0
 8001590:	05c0      	lsls	r0, r0, #23
 8001592:	4320      	orrs	r0, r4
 8001594:	bd70      	pop	{r4, r5, r6, pc}
 8001596:	2b99      	cmp	r3, #153	@ 0x99
 8001598:	dc16      	bgt.n	80015c8 <__aeabi_ui2f+0x60>
 800159a:	1f42      	subs	r2, r0, #5
 800159c:	2805      	cmp	r0, #5
 800159e:	d000      	beq.n	80015a2 <__aeabi_ui2f+0x3a>
 80015a0:	4094      	lsls	r4, r2
 80015a2:	0022      	movs	r2, r4
 80015a4:	4810      	ldr	r0, [pc, #64]	@ (80015e8 <__aeabi_ui2f+0x80>)
 80015a6:	4002      	ands	r2, r0
 80015a8:	0765      	lsls	r5, r4, #29
 80015aa:	d009      	beq.n	80015c0 <__aeabi_ui2f+0x58>
 80015ac:	250f      	movs	r5, #15
 80015ae:	402c      	ands	r4, r5
 80015b0:	2c04      	cmp	r4, #4
 80015b2:	d005      	beq.n	80015c0 <__aeabi_ui2f+0x58>
 80015b4:	3204      	adds	r2, #4
 80015b6:	0154      	lsls	r4, r2, #5
 80015b8:	d502      	bpl.n	80015c0 <__aeabi_ui2f+0x58>
 80015ba:	239f      	movs	r3, #159	@ 0x9f
 80015bc:	4002      	ands	r2, r0
 80015be:	1a5b      	subs	r3, r3, r1
 80015c0:	0192      	lsls	r2, r2, #6
 80015c2:	0a54      	lsrs	r4, r2, #9
 80015c4:	b2d8      	uxtb	r0, r3
 80015c6:	e7e3      	b.n	8001590 <__aeabi_ui2f+0x28>
 80015c8:	0002      	movs	r2, r0
 80015ca:	0020      	movs	r0, r4
 80015cc:	321b      	adds	r2, #27
 80015ce:	4090      	lsls	r0, r2
 80015d0:	0002      	movs	r2, r0
 80015d2:	1e50      	subs	r0, r2, #1
 80015d4:	4182      	sbcs	r2, r0
 80015d6:	2005      	movs	r0, #5
 80015d8:	1a40      	subs	r0, r0, r1
 80015da:	40c4      	lsrs	r4, r0
 80015dc:	4314      	orrs	r4, r2
 80015de:	e7e0      	b.n	80015a2 <__aeabi_ui2f+0x3a>
 80015e0:	0264      	lsls	r4, r4, #9
 80015e2:	2096      	movs	r0, #150	@ 0x96
 80015e4:	0a64      	lsrs	r4, r4, #9
 80015e6:	e7d3      	b.n	8001590 <__aeabi_ui2f+0x28>
 80015e8:	fbffffff 	.word	0xfbffffff

080015ec <__aeabi_dadd>:
 80015ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ee:	4657      	mov	r7, sl
 80015f0:	464e      	mov	r6, r9
 80015f2:	4645      	mov	r5, r8
 80015f4:	46de      	mov	lr, fp
 80015f6:	b5e0      	push	{r5, r6, r7, lr}
 80015f8:	b083      	sub	sp, #12
 80015fa:	9000      	str	r0, [sp, #0]
 80015fc:	9101      	str	r1, [sp, #4]
 80015fe:	030c      	lsls	r4, r1, #12
 8001600:	004f      	lsls	r7, r1, #1
 8001602:	0fce      	lsrs	r6, r1, #31
 8001604:	0a61      	lsrs	r1, r4, #9
 8001606:	9c00      	ldr	r4, [sp, #0]
 8001608:	031d      	lsls	r5, r3, #12
 800160a:	0f64      	lsrs	r4, r4, #29
 800160c:	430c      	orrs	r4, r1
 800160e:	9900      	ldr	r1, [sp, #0]
 8001610:	9200      	str	r2, [sp, #0]
 8001612:	9301      	str	r3, [sp, #4]
 8001614:	00c8      	lsls	r0, r1, #3
 8001616:	0059      	lsls	r1, r3, #1
 8001618:	0d4b      	lsrs	r3, r1, #21
 800161a:	4699      	mov	r9, r3
 800161c:	9a00      	ldr	r2, [sp, #0]
 800161e:	9b01      	ldr	r3, [sp, #4]
 8001620:	0a6d      	lsrs	r5, r5, #9
 8001622:	0fd9      	lsrs	r1, r3, #31
 8001624:	0f53      	lsrs	r3, r2, #29
 8001626:	432b      	orrs	r3, r5
 8001628:	469a      	mov	sl, r3
 800162a:	9b00      	ldr	r3, [sp, #0]
 800162c:	0d7f      	lsrs	r7, r7, #21
 800162e:	00da      	lsls	r2, r3, #3
 8001630:	4694      	mov	ip, r2
 8001632:	464a      	mov	r2, r9
 8001634:	46b0      	mov	r8, r6
 8001636:	1aba      	subs	r2, r7, r2
 8001638:	428e      	cmp	r6, r1
 800163a:	d100      	bne.n	800163e <__aeabi_dadd+0x52>
 800163c:	e0b0      	b.n	80017a0 <__aeabi_dadd+0x1b4>
 800163e:	2a00      	cmp	r2, #0
 8001640:	dc00      	bgt.n	8001644 <__aeabi_dadd+0x58>
 8001642:	e078      	b.n	8001736 <__aeabi_dadd+0x14a>
 8001644:	4649      	mov	r1, r9
 8001646:	2900      	cmp	r1, #0
 8001648:	d100      	bne.n	800164c <__aeabi_dadd+0x60>
 800164a:	e0e9      	b.n	8001820 <__aeabi_dadd+0x234>
 800164c:	49c9      	ldr	r1, [pc, #804]	@ (8001974 <__aeabi_dadd+0x388>)
 800164e:	428f      	cmp	r7, r1
 8001650:	d100      	bne.n	8001654 <__aeabi_dadd+0x68>
 8001652:	e195      	b.n	8001980 <__aeabi_dadd+0x394>
 8001654:	2501      	movs	r5, #1
 8001656:	2a38      	cmp	r2, #56	@ 0x38
 8001658:	dc16      	bgt.n	8001688 <__aeabi_dadd+0x9c>
 800165a:	2180      	movs	r1, #128	@ 0x80
 800165c:	4653      	mov	r3, sl
 800165e:	0409      	lsls	r1, r1, #16
 8001660:	430b      	orrs	r3, r1
 8001662:	469a      	mov	sl, r3
 8001664:	2a1f      	cmp	r2, #31
 8001666:	dd00      	ble.n	800166a <__aeabi_dadd+0x7e>
 8001668:	e1e7      	b.n	8001a3a <__aeabi_dadd+0x44e>
 800166a:	2120      	movs	r1, #32
 800166c:	4655      	mov	r5, sl
 800166e:	1a8b      	subs	r3, r1, r2
 8001670:	4661      	mov	r1, ip
 8001672:	409d      	lsls	r5, r3
 8001674:	40d1      	lsrs	r1, r2
 8001676:	430d      	orrs	r5, r1
 8001678:	4661      	mov	r1, ip
 800167a:	4099      	lsls	r1, r3
 800167c:	1e4b      	subs	r3, r1, #1
 800167e:	4199      	sbcs	r1, r3
 8001680:	4653      	mov	r3, sl
 8001682:	40d3      	lsrs	r3, r2
 8001684:	430d      	orrs	r5, r1
 8001686:	1ae4      	subs	r4, r4, r3
 8001688:	1b45      	subs	r5, r0, r5
 800168a:	42a8      	cmp	r0, r5
 800168c:	4180      	sbcs	r0, r0
 800168e:	4240      	negs	r0, r0
 8001690:	1a24      	subs	r4, r4, r0
 8001692:	0223      	lsls	r3, r4, #8
 8001694:	d400      	bmi.n	8001698 <__aeabi_dadd+0xac>
 8001696:	e10f      	b.n	80018b8 <__aeabi_dadd+0x2cc>
 8001698:	0264      	lsls	r4, r4, #9
 800169a:	0a64      	lsrs	r4, r4, #9
 800169c:	2c00      	cmp	r4, #0
 800169e:	d100      	bne.n	80016a2 <__aeabi_dadd+0xb6>
 80016a0:	e139      	b.n	8001916 <__aeabi_dadd+0x32a>
 80016a2:	0020      	movs	r0, r4
 80016a4:	f001 ff2a 	bl	80034fc <__clzsi2>
 80016a8:	0003      	movs	r3, r0
 80016aa:	3b08      	subs	r3, #8
 80016ac:	2120      	movs	r1, #32
 80016ae:	0028      	movs	r0, r5
 80016b0:	1aca      	subs	r2, r1, r3
 80016b2:	40d0      	lsrs	r0, r2
 80016b4:	409c      	lsls	r4, r3
 80016b6:	0002      	movs	r2, r0
 80016b8:	409d      	lsls	r5, r3
 80016ba:	4322      	orrs	r2, r4
 80016bc:	429f      	cmp	r7, r3
 80016be:	dd00      	ble.n	80016c2 <__aeabi_dadd+0xd6>
 80016c0:	e173      	b.n	80019aa <__aeabi_dadd+0x3be>
 80016c2:	1bd8      	subs	r0, r3, r7
 80016c4:	3001      	adds	r0, #1
 80016c6:	1a09      	subs	r1, r1, r0
 80016c8:	002c      	movs	r4, r5
 80016ca:	408d      	lsls	r5, r1
 80016cc:	40c4      	lsrs	r4, r0
 80016ce:	1e6b      	subs	r3, r5, #1
 80016d0:	419d      	sbcs	r5, r3
 80016d2:	0013      	movs	r3, r2
 80016d4:	40c2      	lsrs	r2, r0
 80016d6:	408b      	lsls	r3, r1
 80016d8:	4325      	orrs	r5, r4
 80016da:	2700      	movs	r7, #0
 80016dc:	0014      	movs	r4, r2
 80016de:	431d      	orrs	r5, r3
 80016e0:	076b      	lsls	r3, r5, #29
 80016e2:	d009      	beq.n	80016f8 <__aeabi_dadd+0x10c>
 80016e4:	230f      	movs	r3, #15
 80016e6:	402b      	ands	r3, r5
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d005      	beq.n	80016f8 <__aeabi_dadd+0x10c>
 80016ec:	1d2b      	adds	r3, r5, #4
 80016ee:	42ab      	cmp	r3, r5
 80016f0:	41ad      	sbcs	r5, r5
 80016f2:	426d      	negs	r5, r5
 80016f4:	1964      	adds	r4, r4, r5
 80016f6:	001d      	movs	r5, r3
 80016f8:	0223      	lsls	r3, r4, #8
 80016fa:	d400      	bmi.n	80016fe <__aeabi_dadd+0x112>
 80016fc:	e12d      	b.n	800195a <__aeabi_dadd+0x36e>
 80016fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001974 <__aeabi_dadd+0x388>)
 8001700:	3701      	adds	r7, #1
 8001702:	4297      	cmp	r7, r2
 8001704:	d100      	bne.n	8001708 <__aeabi_dadd+0x11c>
 8001706:	e0d3      	b.n	80018b0 <__aeabi_dadd+0x2c4>
 8001708:	4646      	mov	r6, r8
 800170a:	499b      	ldr	r1, [pc, #620]	@ (8001978 <__aeabi_dadd+0x38c>)
 800170c:	08ed      	lsrs	r5, r5, #3
 800170e:	4021      	ands	r1, r4
 8001710:	074a      	lsls	r2, r1, #29
 8001712:	432a      	orrs	r2, r5
 8001714:	057c      	lsls	r4, r7, #21
 8001716:	024d      	lsls	r5, r1, #9
 8001718:	0b2d      	lsrs	r5, r5, #12
 800171a:	0d64      	lsrs	r4, r4, #21
 800171c:	0524      	lsls	r4, r4, #20
 800171e:	432c      	orrs	r4, r5
 8001720:	07f6      	lsls	r6, r6, #31
 8001722:	4334      	orrs	r4, r6
 8001724:	0010      	movs	r0, r2
 8001726:	0021      	movs	r1, r4
 8001728:	b003      	add	sp, #12
 800172a:	bcf0      	pop	{r4, r5, r6, r7}
 800172c:	46bb      	mov	fp, r7
 800172e:	46b2      	mov	sl, r6
 8001730:	46a9      	mov	r9, r5
 8001732:	46a0      	mov	r8, r4
 8001734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001736:	2a00      	cmp	r2, #0
 8001738:	d100      	bne.n	800173c <__aeabi_dadd+0x150>
 800173a:	e084      	b.n	8001846 <__aeabi_dadd+0x25a>
 800173c:	464a      	mov	r2, r9
 800173e:	1bd2      	subs	r2, r2, r7
 8001740:	2f00      	cmp	r7, #0
 8001742:	d000      	beq.n	8001746 <__aeabi_dadd+0x15a>
 8001744:	e16d      	b.n	8001a22 <__aeabi_dadd+0x436>
 8001746:	0025      	movs	r5, r4
 8001748:	4305      	orrs	r5, r0
 800174a:	d100      	bne.n	800174e <__aeabi_dadd+0x162>
 800174c:	e127      	b.n	800199e <__aeabi_dadd+0x3b2>
 800174e:	1e56      	subs	r6, r2, #1
 8001750:	2a01      	cmp	r2, #1
 8001752:	d100      	bne.n	8001756 <__aeabi_dadd+0x16a>
 8001754:	e23b      	b.n	8001bce <__aeabi_dadd+0x5e2>
 8001756:	4d87      	ldr	r5, [pc, #540]	@ (8001974 <__aeabi_dadd+0x388>)
 8001758:	42aa      	cmp	r2, r5
 800175a:	d100      	bne.n	800175e <__aeabi_dadd+0x172>
 800175c:	e26a      	b.n	8001c34 <__aeabi_dadd+0x648>
 800175e:	2501      	movs	r5, #1
 8001760:	2e38      	cmp	r6, #56	@ 0x38
 8001762:	dc12      	bgt.n	800178a <__aeabi_dadd+0x19e>
 8001764:	0032      	movs	r2, r6
 8001766:	2a1f      	cmp	r2, #31
 8001768:	dd00      	ble.n	800176c <__aeabi_dadd+0x180>
 800176a:	e1f8      	b.n	8001b5e <__aeabi_dadd+0x572>
 800176c:	2620      	movs	r6, #32
 800176e:	0025      	movs	r5, r4
 8001770:	1ab6      	subs	r6, r6, r2
 8001772:	0007      	movs	r7, r0
 8001774:	4653      	mov	r3, sl
 8001776:	40b0      	lsls	r0, r6
 8001778:	40d4      	lsrs	r4, r2
 800177a:	40b5      	lsls	r5, r6
 800177c:	40d7      	lsrs	r7, r2
 800177e:	1e46      	subs	r6, r0, #1
 8001780:	41b0      	sbcs	r0, r6
 8001782:	1b1b      	subs	r3, r3, r4
 8001784:	469a      	mov	sl, r3
 8001786:	433d      	orrs	r5, r7
 8001788:	4305      	orrs	r5, r0
 800178a:	4662      	mov	r2, ip
 800178c:	1b55      	subs	r5, r2, r5
 800178e:	45ac      	cmp	ip, r5
 8001790:	4192      	sbcs	r2, r2
 8001792:	4653      	mov	r3, sl
 8001794:	4252      	negs	r2, r2
 8001796:	000e      	movs	r6, r1
 8001798:	464f      	mov	r7, r9
 800179a:	4688      	mov	r8, r1
 800179c:	1a9c      	subs	r4, r3, r2
 800179e:	e778      	b.n	8001692 <__aeabi_dadd+0xa6>
 80017a0:	2a00      	cmp	r2, #0
 80017a2:	dc00      	bgt.n	80017a6 <__aeabi_dadd+0x1ba>
 80017a4:	e08e      	b.n	80018c4 <__aeabi_dadd+0x2d8>
 80017a6:	4649      	mov	r1, r9
 80017a8:	2900      	cmp	r1, #0
 80017aa:	d175      	bne.n	8001898 <__aeabi_dadd+0x2ac>
 80017ac:	4661      	mov	r1, ip
 80017ae:	4653      	mov	r3, sl
 80017b0:	4319      	orrs	r1, r3
 80017b2:	d100      	bne.n	80017b6 <__aeabi_dadd+0x1ca>
 80017b4:	e0f6      	b.n	80019a4 <__aeabi_dadd+0x3b8>
 80017b6:	1e51      	subs	r1, r2, #1
 80017b8:	2a01      	cmp	r2, #1
 80017ba:	d100      	bne.n	80017be <__aeabi_dadd+0x1d2>
 80017bc:	e191      	b.n	8001ae2 <__aeabi_dadd+0x4f6>
 80017be:	4d6d      	ldr	r5, [pc, #436]	@ (8001974 <__aeabi_dadd+0x388>)
 80017c0:	42aa      	cmp	r2, r5
 80017c2:	d100      	bne.n	80017c6 <__aeabi_dadd+0x1da>
 80017c4:	e0dc      	b.n	8001980 <__aeabi_dadd+0x394>
 80017c6:	2501      	movs	r5, #1
 80017c8:	2938      	cmp	r1, #56	@ 0x38
 80017ca:	dc14      	bgt.n	80017f6 <__aeabi_dadd+0x20a>
 80017cc:	000a      	movs	r2, r1
 80017ce:	2a1f      	cmp	r2, #31
 80017d0:	dd00      	ble.n	80017d4 <__aeabi_dadd+0x1e8>
 80017d2:	e1a2      	b.n	8001b1a <__aeabi_dadd+0x52e>
 80017d4:	2120      	movs	r1, #32
 80017d6:	4653      	mov	r3, sl
 80017d8:	1a89      	subs	r1, r1, r2
 80017da:	408b      	lsls	r3, r1
 80017dc:	001d      	movs	r5, r3
 80017de:	4663      	mov	r3, ip
 80017e0:	40d3      	lsrs	r3, r2
 80017e2:	431d      	orrs	r5, r3
 80017e4:	4663      	mov	r3, ip
 80017e6:	408b      	lsls	r3, r1
 80017e8:	0019      	movs	r1, r3
 80017ea:	1e4b      	subs	r3, r1, #1
 80017ec:	4199      	sbcs	r1, r3
 80017ee:	4653      	mov	r3, sl
 80017f0:	40d3      	lsrs	r3, r2
 80017f2:	430d      	orrs	r5, r1
 80017f4:	18e4      	adds	r4, r4, r3
 80017f6:	182d      	adds	r5, r5, r0
 80017f8:	4285      	cmp	r5, r0
 80017fa:	4180      	sbcs	r0, r0
 80017fc:	4240      	negs	r0, r0
 80017fe:	1824      	adds	r4, r4, r0
 8001800:	0223      	lsls	r3, r4, #8
 8001802:	d559      	bpl.n	80018b8 <__aeabi_dadd+0x2cc>
 8001804:	4b5b      	ldr	r3, [pc, #364]	@ (8001974 <__aeabi_dadd+0x388>)
 8001806:	3701      	adds	r7, #1
 8001808:	429f      	cmp	r7, r3
 800180a:	d051      	beq.n	80018b0 <__aeabi_dadd+0x2c4>
 800180c:	2101      	movs	r1, #1
 800180e:	4b5a      	ldr	r3, [pc, #360]	@ (8001978 <__aeabi_dadd+0x38c>)
 8001810:	086a      	lsrs	r2, r5, #1
 8001812:	401c      	ands	r4, r3
 8001814:	4029      	ands	r1, r5
 8001816:	430a      	orrs	r2, r1
 8001818:	07e5      	lsls	r5, r4, #31
 800181a:	4315      	orrs	r5, r2
 800181c:	0864      	lsrs	r4, r4, #1
 800181e:	e75f      	b.n	80016e0 <__aeabi_dadd+0xf4>
 8001820:	4661      	mov	r1, ip
 8001822:	4653      	mov	r3, sl
 8001824:	4319      	orrs	r1, r3
 8001826:	d100      	bne.n	800182a <__aeabi_dadd+0x23e>
 8001828:	e0bc      	b.n	80019a4 <__aeabi_dadd+0x3b8>
 800182a:	1e51      	subs	r1, r2, #1
 800182c:	2a01      	cmp	r2, #1
 800182e:	d100      	bne.n	8001832 <__aeabi_dadd+0x246>
 8001830:	e164      	b.n	8001afc <__aeabi_dadd+0x510>
 8001832:	4d50      	ldr	r5, [pc, #320]	@ (8001974 <__aeabi_dadd+0x388>)
 8001834:	42aa      	cmp	r2, r5
 8001836:	d100      	bne.n	800183a <__aeabi_dadd+0x24e>
 8001838:	e16a      	b.n	8001b10 <__aeabi_dadd+0x524>
 800183a:	2501      	movs	r5, #1
 800183c:	2938      	cmp	r1, #56	@ 0x38
 800183e:	dd00      	ble.n	8001842 <__aeabi_dadd+0x256>
 8001840:	e722      	b.n	8001688 <__aeabi_dadd+0x9c>
 8001842:	000a      	movs	r2, r1
 8001844:	e70e      	b.n	8001664 <__aeabi_dadd+0x78>
 8001846:	4a4d      	ldr	r2, [pc, #308]	@ (800197c <__aeabi_dadd+0x390>)
 8001848:	1c7d      	adds	r5, r7, #1
 800184a:	4215      	tst	r5, r2
 800184c:	d000      	beq.n	8001850 <__aeabi_dadd+0x264>
 800184e:	e0d0      	b.n	80019f2 <__aeabi_dadd+0x406>
 8001850:	0025      	movs	r5, r4
 8001852:	4662      	mov	r2, ip
 8001854:	4653      	mov	r3, sl
 8001856:	4305      	orrs	r5, r0
 8001858:	431a      	orrs	r2, r3
 800185a:	2f00      	cmp	r7, #0
 800185c:	d000      	beq.n	8001860 <__aeabi_dadd+0x274>
 800185e:	e137      	b.n	8001ad0 <__aeabi_dadd+0x4e4>
 8001860:	2d00      	cmp	r5, #0
 8001862:	d100      	bne.n	8001866 <__aeabi_dadd+0x27a>
 8001864:	e1a8      	b.n	8001bb8 <__aeabi_dadd+0x5cc>
 8001866:	2a00      	cmp	r2, #0
 8001868:	d100      	bne.n	800186c <__aeabi_dadd+0x280>
 800186a:	e16a      	b.n	8001b42 <__aeabi_dadd+0x556>
 800186c:	4663      	mov	r3, ip
 800186e:	1ac5      	subs	r5, r0, r3
 8001870:	4653      	mov	r3, sl
 8001872:	1ae2      	subs	r2, r4, r3
 8001874:	42a8      	cmp	r0, r5
 8001876:	419b      	sbcs	r3, r3
 8001878:	425b      	negs	r3, r3
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	021a      	lsls	r2, r3, #8
 800187e:	d400      	bmi.n	8001882 <__aeabi_dadd+0x296>
 8001880:	e203      	b.n	8001c8a <__aeabi_dadd+0x69e>
 8001882:	4663      	mov	r3, ip
 8001884:	1a1d      	subs	r5, r3, r0
 8001886:	45ac      	cmp	ip, r5
 8001888:	4192      	sbcs	r2, r2
 800188a:	4653      	mov	r3, sl
 800188c:	4252      	negs	r2, r2
 800188e:	1b1c      	subs	r4, r3, r4
 8001890:	000e      	movs	r6, r1
 8001892:	4688      	mov	r8, r1
 8001894:	1aa4      	subs	r4, r4, r2
 8001896:	e723      	b.n	80016e0 <__aeabi_dadd+0xf4>
 8001898:	4936      	ldr	r1, [pc, #216]	@ (8001974 <__aeabi_dadd+0x388>)
 800189a:	428f      	cmp	r7, r1
 800189c:	d070      	beq.n	8001980 <__aeabi_dadd+0x394>
 800189e:	2501      	movs	r5, #1
 80018a0:	2a38      	cmp	r2, #56	@ 0x38
 80018a2:	dca8      	bgt.n	80017f6 <__aeabi_dadd+0x20a>
 80018a4:	2180      	movs	r1, #128	@ 0x80
 80018a6:	4653      	mov	r3, sl
 80018a8:	0409      	lsls	r1, r1, #16
 80018aa:	430b      	orrs	r3, r1
 80018ac:	469a      	mov	sl, r3
 80018ae:	e78e      	b.n	80017ce <__aeabi_dadd+0x1e2>
 80018b0:	003c      	movs	r4, r7
 80018b2:	2500      	movs	r5, #0
 80018b4:	2200      	movs	r2, #0
 80018b6:	e731      	b.n	800171c <__aeabi_dadd+0x130>
 80018b8:	2307      	movs	r3, #7
 80018ba:	402b      	ands	r3, r5
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d000      	beq.n	80018c2 <__aeabi_dadd+0x2d6>
 80018c0:	e710      	b.n	80016e4 <__aeabi_dadd+0xf8>
 80018c2:	e093      	b.n	80019ec <__aeabi_dadd+0x400>
 80018c4:	2a00      	cmp	r2, #0
 80018c6:	d074      	beq.n	80019b2 <__aeabi_dadd+0x3c6>
 80018c8:	464a      	mov	r2, r9
 80018ca:	1bd2      	subs	r2, r2, r7
 80018cc:	2f00      	cmp	r7, #0
 80018ce:	d100      	bne.n	80018d2 <__aeabi_dadd+0x2e6>
 80018d0:	e0c7      	b.n	8001a62 <__aeabi_dadd+0x476>
 80018d2:	4928      	ldr	r1, [pc, #160]	@ (8001974 <__aeabi_dadd+0x388>)
 80018d4:	4589      	cmp	r9, r1
 80018d6:	d100      	bne.n	80018da <__aeabi_dadd+0x2ee>
 80018d8:	e185      	b.n	8001be6 <__aeabi_dadd+0x5fa>
 80018da:	2501      	movs	r5, #1
 80018dc:	2a38      	cmp	r2, #56	@ 0x38
 80018de:	dc12      	bgt.n	8001906 <__aeabi_dadd+0x31a>
 80018e0:	2180      	movs	r1, #128	@ 0x80
 80018e2:	0409      	lsls	r1, r1, #16
 80018e4:	430c      	orrs	r4, r1
 80018e6:	2a1f      	cmp	r2, #31
 80018e8:	dd00      	ble.n	80018ec <__aeabi_dadd+0x300>
 80018ea:	e1ab      	b.n	8001c44 <__aeabi_dadd+0x658>
 80018ec:	2120      	movs	r1, #32
 80018ee:	0025      	movs	r5, r4
 80018f0:	1a89      	subs	r1, r1, r2
 80018f2:	0007      	movs	r7, r0
 80018f4:	4088      	lsls	r0, r1
 80018f6:	408d      	lsls	r5, r1
 80018f8:	40d7      	lsrs	r7, r2
 80018fa:	1e41      	subs	r1, r0, #1
 80018fc:	4188      	sbcs	r0, r1
 80018fe:	40d4      	lsrs	r4, r2
 8001900:	433d      	orrs	r5, r7
 8001902:	4305      	orrs	r5, r0
 8001904:	44a2      	add	sl, r4
 8001906:	4465      	add	r5, ip
 8001908:	4565      	cmp	r5, ip
 800190a:	4192      	sbcs	r2, r2
 800190c:	4252      	negs	r2, r2
 800190e:	4452      	add	r2, sl
 8001910:	0014      	movs	r4, r2
 8001912:	464f      	mov	r7, r9
 8001914:	e774      	b.n	8001800 <__aeabi_dadd+0x214>
 8001916:	0028      	movs	r0, r5
 8001918:	f001 fdf0 	bl	80034fc <__clzsi2>
 800191c:	0003      	movs	r3, r0
 800191e:	3318      	adds	r3, #24
 8001920:	2b1f      	cmp	r3, #31
 8001922:	dc00      	bgt.n	8001926 <__aeabi_dadd+0x33a>
 8001924:	e6c2      	b.n	80016ac <__aeabi_dadd+0xc0>
 8001926:	002a      	movs	r2, r5
 8001928:	3808      	subs	r0, #8
 800192a:	4082      	lsls	r2, r0
 800192c:	429f      	cmp	r7, r3
 800192e:	dd00      	ble.n	8001932 <__aeabi_dadd+0x346>
 8001930:	e0a9      	b.n	8001a86 <__aeabi_dadd+0x49a>
 8001932:	1bdb      	subs	r3, r3, r7
 8001934:	1c58      	adds	r0, r3, #1
 8001936:	281f      	cmp	r0, #31
 8001938:	dc00      	bgt.n	800193c <__aeabi_dadd+0x350>
 800193a:	e1ac      	b.n	8001c96 <__aeabi_dadd+0x6aa>
 800193c:	0015      	movs	r5, r2
 800193e:	3b1f      	subs	r3, #31
 8001940:	40dd      	lsrs	r5, r3
 8001942:	2820      	cmp	r0, #32
 8001944:	d005      	beq.n	8001952 <__aeabi_dadd+0x366>
 8001946:	2340      	movs	r3, #64	@ 0x40
 8001948:	1a1b      	subs	r3, r3, r0
 800194a:	409a      	lsls	r2, r3
 800194c:	1e53      	subs	r3, r2, #1
 800194e:	419a      	sbcs	r2, r3
 8001950:	4315      	orrs	r5, r2
 8001952:	2307      	movs	r3, #7
 8001954:	2700      	movs	r7, #0
 8001956:	402b      	ands	r3, r5
 8001958:	e7b0      	b.n	80018bc <__aeabi_dadd+0x2d0>
 800195a:	08ed      	lsrs	r5, r5, #3
 800195c:	4b05      	ldr	r3, [pc, #20]	@ (8001974 <__aeabi_dadd+0x388>)
 800195e:	0762      	lsls	r2, r4, #29
 8001960:	432a      	orrs	r2, r5
 8001962:	08e4      	lsrs	r4, r4, #3
 8001964:	429f      	cmp	r7, r3
 8001966:	d00f      	beq.n	8001988 <__aeabi_dadd+0x39c>
 8001968:	0324      	lsls	r4, r4, #12
 800196a:	0b25      	lsrs	r5, r4, #12
 800196c:	057c      	lsls	r4, r7, #21
 800196e:	0d64      	lsrs	r4, r4, #21
 8001970:	e6d4      	b.n	800171c <__aeabi_dadd+0x130>
 8001972:	46c0      	nop			@ (mov r8, r8)
 8001974:	000007ff 	.word	0x000007ff
 8001978:	ff7fffff 	.word	0xff7fffff
 800197c:	000007fe 	.word	0x000007fe
 8001980:	08c0      	lsrs	r0, r0, #3
 8001982:	0762      	lsls	r2, r4, #29
 8001984:	4302      	orrs	r2, r0
 8001986:	08e4      	lsrs	r4, r4, #3
 8001988:	0013      	movs	r3, r2
 800198a:	4323      	orrs	r3, r4
 800198c:	d100      	bne.n	8001990 <__aeabi_dadd+0x3a4>
 800198e:	e186      	b.n	8001c9e <__aeabi_dadd+0x6b2>
 8001990:	2580      	movs	r5, #128	@ 0x80
 8001992:	032d      	lsls	r5, r5, #12
 8001994:	4325      	orrs	r5, r4
 8001996:	032d      	lsls	r5, r5, #12
 8001998:	4cc3      	ldr	r4, [pc, #780]	@ (8001ca8 <__aeabi_dadd+0x6bc>)
 800199a:	0b2d      	lsrs	r5, r5, #12
 800199c:	e6be      	b.n	800171c <__aeabi_dadd+0x130>
 800199e:	4660      	mov	r0, ip
 80019a0:	4654      	mov	r4, sl
 80019a2:	000e      	movs	r6, r1
 80019a4:	0017      	movs	r7, r2
 80019a6:	08c5      	lsrs	r5, r0, #3
 80019a8:	e7d8      	b.n	800195c <__aeabi_dadd+0x370>
 80019aa:	4cc0      	ldr	r4, [pc, #768]	@ (8001cac <__aeabi_dadd+0x6c0>)
 80019ac:	1aff      	subs	r7, r7, r3
 80019ae:	4014      	ands	r4, r2
 80019b0:	e696      	b.n	80016e0 <__aeabi_dadd+0xf4>
 80019b2:	4abf      	ldr	r2, [pc, #764]	@ (8001cb0 <__aeabi_dadd+0x6c4>)
 80019b4:	1c79      	adds	r1, r7, #1
 80019b6:	4211      	tst	r1, r2
 80019b8:	d16b      	bne.n	8001a92 <__aeabi_dadd+0x4a6>
 80019ba:	0022      	movs	r2, r4
 80019bc:	4302      	orrs	r2, r0
 80019be:	2f00      	cmp	r7, #0
 80019c0:	d000      	beq.n	80019c4 <__aeabi_dadd+0x3d8>
 80019c2:	e0db      	b.n	8001b7c <__aeabi_dadd+0x590>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d100      	bne.n	80019ca <__aeabi_dadd+0x3de>
 80019c8:	e12d      	b.n	8001c26 <__aeabi_dadd+0x63a>
 80019ca:	4662      	mov	r2, ip
 80019cc:	4653      	mov	r3, sl
 80019ce:	431a      	orrs	r2, r3
 80019d0:	d100      	bne.n	80019d4 <__aeabi_dadd+0x3e8>
 80019d2:	e0b6      	b.n	8001b42 <__aeabi_dadd+0x556>
 80019d4:	4663      	mov	r3, ip
 80019d6:	18c5      	adds	r5, r0, r3
 80019d8:	4285      	cmp	r5, r0
 80019da:	4180      	sbcs	r0, r0
 80019dc:	4454      	add	r4, sl
 80019de:	4240      	negs	r0, r0
 80019e0:	1824      	adds	r4, r4, r0
 80019e2:	0223      	lsls	r3, r4, #8
 80019e4:	d502      	bpl.n	80019ec <__aeabi_dadd+0x400>
 80019e6:	000f      	movs	r7, r1
 80019e8:	4bb0      	ldr	r3, [pc, #704]	@ (8001cac <__aeabi_dadd+0x6c0>)
 80019ea:	401c      	ands	r4, r3
 80019ec:	003a      	movs	r2, r7
 80019ee:	0028      	movs	r0, r5
 80019f0:	e7d8      	b.n	80019a4 <__aeabi_dadd+0x3b8>
 80019f2:	4662      	mov	r2, ip
 80019f4:	1a85      	subs	r5, r0, r2
 80019f6:	42a8      	cmp	r0, r5
 80019f8:	4192      	sbcs	r2, r2
 80019fa:	4653      	mov	r3, sl
 80019fc:	4252      	negs	r2, r2
 80019fe:	4691      	mov	r9, r2
 8001a00:	1ae3      	subs	r3, r4, r3
 8001a02:	001a      	movs	r2, r3
 8001a04:	464b      	mov	r3, r9
 8001a06:	1ad2      	subs	r2, r2, r3
 8001a08:	0013      	movs	r3, r2
 8001a0a:	4691      	mov	r9, r2
 8001a0c:	021a      	lsls	r2, r3, #8
 8001a0e:	d454      	bmi.n	8001aba <__aeabi_dadd+0x4ce>
 8001a10:	464a      	mov	r2, r9
 8001a12:	464c      	mov	r4, r9
 8001a14:	432a      	orrs	r2, r5
 8001a16:	d000      	beq.n	8001a1a <__aeabi_dadd+0x42e>
 8001a18:	e640      	b.n	800169c <__aeabi_dadd+0xb0>
 8001a1a:	2600      	movs	r6, #0
 8001a1c:	2400      	movs	r4, #0
 8001a1e:	2500      	movs	r5, #0
 8001a20:	e67c      	b.n	800171c <__aeabi_dadd+0x130>
 8001a22:	4da1      	ldr	r5, [pc, #644]	@ (8001ca8 <__aeabi_dadd+0x6bc>)
 8001a24:	45a9      	cmp	r9, r5
 8001a26:	d100      	bne.n	8001a2a <__aeabi_dadd+0x43e>
 8001a28:	e090      	b.n	8001b4c <__aeabi_dadd+0x560>
 8001a2a:	2501      	movs	r5, #1
 8001a2c:	2a38      	cmp	r2, #56	@ 0x38
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x446>
 8001a30:	e6ab      	b.n	800178a <__aeabi_dadd+0x19e>
 8001a32:	2580      	movs	r5, #128	@ 0x80
 8001a34:	042d      	lsls	r5, r5, #16
 8001a36:	432c      	orrs	r4, r5
 8001a38:	e695      	b.n	8001766 <__aeabi_dadd+0x17a>
 8001a3a:	0011      	movs	r1, r2
 8001a3c:	4655      	mov	r5, sl
 8001a3e:	3920      	subs	r1, #32
 8001a40:	40cd      	lsrs	r5, r1
 8001a42:	46a9      	mov	r9, r5
 8001a44:	2a20      	cmp	r2, #32
 8001a46:	d006      	beq.n	8001a56 <__aeabi_dadd+0x46a>
 8001a48:	2140      	movs	r1, #64	@ 0x40
 8001a4a:	4653      	mov	r3, sl
 8001a4c:	1a8a      	subs	r2, r1, r2
 8001a4e:	4093      	lsls	r3, r2
 8001a50:	4662      	mov	r2, ip
 8001a52:	431a      	orrs	r2, r3
 8001a54:	4694      	mov	ip, r2
 8001a56:	4665      	mov	r5, ip
 8001a58:	1e6b      	subs	r3, r5, #1
 8001a5a:	419d      	sbcs	r5, r3
 8001a5c:	464b      	mov	r3, r9
 8001a5e:	431d      	orrs	r5, r3
 8001a60:	e612      	b.n	8001688 <__aeabi_dadd+0x9c>
 8001a62:	0021      	movs	r1, r4
 8001a64:	4301      	orrs	r1, r0
 8001a66:	d100      	bne.n	8001a6a <__aeabi_dadd+0x47e>
 8001a68:	e0c4      	b.n	8001bf4 <__aeabi_dadd+0x608>
 8001a6a:	1e51      	subs	r1, r2, #1
 8001a6c:	2a01      	cmp	r2, #1
 8001a6e:	d100      	bne.n	8001a72 <__aeabi_dadd+0x486>
 8001a70:	e0fb      	b.n	8001c6a <__aeabi_dadd+0x67e>
 8001a72:	4d8d      	ldr	r5, [pc, #564]	@ (8001ca8 <__aeabi_dadd+0x6bc>)
 8001a74:	42aa      	cmp	r2, r5
 8001a76:	d100      	bne.n	8001a7a <__aeabi_dadd+0x48e>
 8001a78:	e0b5      	b.n	8001be6 <__aeabi_dadd+0x5fa>
 8001a7a:	2501      	movs	r5, #1
 8001a7c:	2938      	cmp	r1, #56	@ 0x38
 8001a7e:	dd00      	ble.n	8001a82 <__aeabi_dadd+0x496>
 8001a80:	e741      	b.n	8001906 <__aeabi_dadd+0x31a>
 8001a82:	000a      	movs	r2, r1
 8001a84:	e72f      	b.n	80018e6 <__aeabi_dadd+0x2fa>
 8001a86:	4c89      	ldr	r4, [pc, #548]	@ (8001cac <__aeabi_dadd+0x6c0>)
 8001a88:	1aff      	subs	r7, r7, r3
 8001a8a:	4014      	ands	r4, r2
 8001a8c:	0762      	lsls	r2, r4, #29
 8001a8e:	08e4      	lsrs	r4, r4, #3
 8001a90:	e76a      	b.n	8001968 <__aeabi_dadd+0x37c>
 8001a92:	4a85      	ldr	r2, [pc, #532]	@ (8001ca8 <__aeabi_dadd+0x6bc>)
 8001a94:	4291      	cmp	r1, r2
 8001a96:	d100      	bne.n	8001a9a <__aeabi_dadd+0x4ae>
 8001a98:	e0e3      	b.n	8001c62 <__aeabi_dadd+0x676>
 8001a9a:	4663      	mov	r3, ip
 8001a9c:	18c2      	adds	r2, r0, r3
 8001a9e:	4282      	cmp	r2, r0
 8001aa0:	4180      	sbcs	r0, r0
 8001aa2:	0023      	movs	r3, r4
 8001aa4:	4240      	negs	r0, r0
 8001aa6:	4453      	add	r3, sl
 8001aa8:	181b      	adds	r3, r3, r0
 8001aaa:	07dd      	lsls	r5, r3, #31
 8001aac:	085c      	lsrs	r4, r3, #1
 8001aae:	2307      	movs	r3, #7
 8001ab0:	0852      	lsrs	r2, r2, #1
 8001ab2:	4315      	orrs	r5, r2
 8001ab4:	000f      	movs	r7, r1
 8001ab6:	402b      	ands	r3, r5
 8001ab8:	e700      	b.n	80018bc <__aeabi_dadd+0x2d0>
 8001aba:	4663      	mov	r3, ip
 8001abc:	1a1d      	subs	r5, r3, r0
 8001abe:	45ac      	cmp	ip, r5
 8001ac0:	4192      	sbcs	r2, r2
 8001ac2:	4653      	mov	r3, sl
 8001ac4:	4252      	negs	r2, r2
 8001ac6:	1b1c      	subs	r4, r3, r4
 8001ac8:	000e      	movs	r6, r1
 8001aca:	4688      	mov	r8, r1
 8001acc:	1aa4      	subs	r4, r4, r2
 8001ace:	e5e5      	b.n	800169c <__aeabi_dadd+0xb0>
 8001ad0:	2d00      	cmp	r5, #0
 8001ad2:	d000      	beq.n	8001ad6 <__aeabi_dadd+0x4ea>
 8001ad4:	e091      	b.n	8001bfa <__aeabi_dadd+0x60e>
 8001ad6:	2a00      	cmp	r2, #0
 8001ad8:	d138      	bne.n	8001b4c <__aeabi_dadd+0x560>
 8001ada:	2480      	movs	r4, #128	@ 0x80
 8001adc:	2600      	movs	r6, #0
 8001ade:	0324      	lsls	r4, r4, #12
 8001ae0:	e756      	b.n	8001990 <__aeabi_dadd+0x3a4>
 8001ae2:	4663      	mov	r3, ip
 8001ae4:	18c5      	adds	r5, r0, r3
 8001ae6:	4285      	cmp	r5, r0
 8001ae8:	4180      	sbcs	r0, r0
 8001aea:	4454      	add	r4, sl
 8001aec:	4240      	negs	r0, r0
 8001aee:	1824      	adds	r4, r4, r0
 8001af0:	2701      	movs	r7, #1
 8001af2:	0223      	lsls	r3, r4, #8
 8001af4:	d400      	bmi.n	8001af8 <__aeabi_dadd+0x50c>
 8001af6:	e6df      	b.n	80018b8 <__aeabi_dadd+0x2cc>
 8001af8:	2702      	movs	r7, #2
 8001afa:	e687      	b.n	800180c <__aeabi_dadd+0x220>
 8001afc:	4663      	mov	r3, ip
 8001afe:	1ac5      	subs	r5, r0, r3
 8001b00:	42a8      	cmp	r0, r5
 8001b02:	4180      	sbcs	r0, r0
 8001b04:	4653      	mov	r3, sl
 8001b06:	4240      	negs	r0, r0
 8001b08:	1ae4      	subs	r4, r4, r3
 8001b0a:	2701      	movs	r7, #1
 8001b0c:	1a24      	subs	r4, r4, r0
 8001b0e:	e5c0      	b.n	8001692 <__aeabi_dadd+0xa6>
 8001b10:	0762      	lsls	r2, r4, #29
 8001b12:	08c0      	lsrs	r0, r0, #3
 8001b14:	4302      	orrs	r2, r0
 8001b16:	08e4      	lsrs	r4, r4, #3
 8001b18:	e736      	b.n	8001988 <__aeabi_dadd+0x39c>
 8001b1a:	0011      	movs	r1, r2
 8001b1c:	4653      	mov	r3, sl
 8001b1e:	3920      	subs	r1, #32
 8001b20:	40cb      	lsrs	r3, r1
 8001b22:	4699      	mov	r9, r3
 8001b24:	2a20      	cmp	r2, #32
 8001b26:	d006      	beq.n	8001b36 <__aeabi_dadd+0x54a>
 8001b28:	2140      	movs	r1, #64	@ 0x40
 8001b2a:	4653      	mov	r3, sl
 8001b2c:	1a8a      	subs	r2, r1, r2
 8001b2e:	4093      	lsls	r3, r2
 8001b30:	4662      	mov	r2, ip
 8001b32:	431a      	orrs	r2, r3
 8001b34:	4694      	mov	ip, r2
 8001b36:	4665      	mov	r5, ip
 8001b38:	1e6b      	subs	r3, r5, #1
 8001b3a:	419d      	sbcs	r5, r3
 8001b3c:	464b      	mov	r3, r9
 8001b3e:	431d      	orrs	r5, r3
 8001b40:	e659      	b.n	80017f6 <__aeabi_dadd+0x20a>
 8001b42:	0762      	lsls	r2, r4, #29
 8001b44:	08c0      	lsrs	r0, r0, #3
 8001b46:	4302      	orrs	r2, r0
 8001b48:	08e4      	lsrs	r4, r4, #3
 8001b4a:	e70d      	b.n	8001968 <__aeabi_dadd+0x37c>
 8001b4c:	4653      	mov	r3, sl
 8001b4e:	075a      	lsls	r2, r3, #29
 8001b50:	4663      	mov	r3, ip
 8001b52:	08d8      	lsrs	r0, r3, #3
 8001b54:	4653      	mov	r3, sl
 8001b56:	000e      	movs	r6, r1
 8001b58:	4302      	orrs	r2, r0
 8001b5a:	08dc      	lsrs	r4, r3, #3
 8001b5c:	e714      	b.n	8001988 <__aeabi_dadd+0x39c>
 8001b5e:	0015      	movs	r5, r2
 8001b60:	0026      	movs	r6, r4
 8001b62:	3d20      	subs	r5, #32
 8001b64:	40ee      	lsrs	r6, r5
 8001b66:	2a20      	cmp	r2, #32
 8001b68:	d003      	beq.n	8001b72 <__aeabi_dadd+0x586>
 8001b6a:	2540      	movs	r5, #64	@ 0x40
 8001b6c:	1aaa      	subs	r2, r5, r2
 8001b6e:	4094      	lsls	r4, r2
 8001b70:	4320      	orrs	r0, r4
 8001b72:	1e42      	subs	r2, r0, #1
 8001b74:	4190      	sbcs	r0, r2
 8001b76:	0005      	movs	r5, r0
 8001b78:	4335      	orrs	r5, r6
 8001b7a:	e606      	b.n	800178a <__aeabi_dadd+0x19e>
 8001b7c:	2a00      	cmp	r2, #0
 8001b7e:	d07c      	beq.n	8001c7a <__aeabi_dadd+0x68e>
 8001b80:	4662      	mov	r2, ip
 8001b82:	4653      	mov	r3, sl
 8001b84:	08c0      	lsrs	r0, r0, #3
 8001b86:	431a      	orrs	r2, r3
 8001b88:	d100      	bne.n	8001b8c <__aeabi_dadd+0x5a0>
 8001b8a:	e6fa      	b.n	8001982 <__aeabi_dadd+0x396>
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	4310      	orrs	r0, r2
 8001b90:	2280      	movs	r2, #128	@ 0x80
 8001b92:	08e4      	lsrs	r4, r4, #3
 8001b94:	0312      	lsls	r2, r2, #12
 8001b96:	4214      	tst	r4, r2
 8001b98:	d008      	beq.n	8001bac <__aeabi_dadd+0x5c0>
 8001b9a:	08d9      	lsrs	r1, r3, #3
 8001b9c:	4211      	tst	r1, r2
 8001b9e:	d105      	bne.n	8001bac <__aeabi_dadd+0x5c0>
 8001ba0:	4663      	mov	r3, ip
 8001ba2:	08d8      	lsrs	r0, r3, #3
 8001ba4:	4653      	mov	r3, sl
 8001ba6:	000c      	movs	r4, r1
 8001ba8:	075b      	lsls	r3, r3, #29
 8001baa:	4318      	orrs	r0, r3
 8001bac:	0f42      	lsrs	r2, r0, #29
 8001bae:	00c0      	lsls	r0, r0, #3
 8001bb0:	08c0      	lsrs	r0, r0, #3
 8001bb2:	0752      	lsls	r2, r2, #29
 8001bb4:	4302      	orrs	r2, r0
 8001bb6:	e6e7      	b.n	8001988 <__aeabi_dadd+0x39c>
 8001bb8:	2a00      	cmp	r2, #0
 8001bba:	d100      	bne.n	8001bbe <__aeabi_dadd+0x5d2>
 8001bbc:	e72d      	b.n	8001a1a <__aeabi_dadd+0x42e>
 8001bbe:	4663      	mov	r3, ip
 8001bc0:	08d8      	lsrs	r0, r3, #3
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	075a      	lsls	r2, r3, #29
 8001bc6:	000e      	movs	r6, r1
 8001bc8:	4302      	orrs	r2, r0
 8001bca:	08dc      	lsrs	r4, r3, #3
 8001bcc:	e6cc      	b.n	8001968 <__aeabi_dadd+0x37c>
 8001bce:	4663      	mov	r3, ip
 8001bd0:	1a1d      	subs	r5, r3, r0
 8001bd2:	45ac      	cmp	ip, r5
 8001bd4:	4192      	sbcs	r2, r2
 8001bd6:	4653      	mov	r3, sl
 8001bd8:	4252      	negs	r2, r2
 8001bda:	1b1c      	subs	r4, r3, r4
 8001bdc:	000e      	movs	r6, r1
 8001bde:	4688      	mov	r8, r1
 8001be0:	1aa4      	subs	r4, r4, r2
 8001be2:	3701      	adds	r7, #1
 8001be4:	e555      	b.n	8001692 <__aeabi_dadd+0xa6>
 8001be6:	4663      	mov	r3, ip
 8001be8:	08d9      	lsrs	r1, r3, #3
 8001bea:	4653      	mov	r3, sl
 8001bec:	075a      	lsls	r2, r3, #29
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	08dc      	lsrs	r4, r3, #3
 8001bf2:	e6c9      	b.n	8001988 <__aeabi_dadd+0x39c>
 8001bf4:	4660      	mov	r0, ip
 8001bf6:	4654      	mov	r4, sl
 8001bf8:	e6d4      	b.n	80019a4 <__aeabi_dadd+0x3b8>
 8001bfa:	08c0      	lsrs	r0, r0, #3
 8001bfc:	2a00      	cmp	r2, #0
 8001bfe:	d100      	bne.n	8001c02 <__aeabi_dadd+0x616>
 8001c00:	e6bf      	b.n	8001982 <__aeabi_dadd+0x396>
 8001c02:	0762      	lsls	r2, r4, #29
 8001c04:	4310      	orrs	r0, r2
 8001c06:	2280      	movs	r2, #128	@ 0x80
 8001c08:	08e4      	lsrs	r4, r4, #3
 8001c0a:	0312      	lsls	r2, r2, #12
 8001c0c:	4214      	tst	r4, r2
 8001c0e:	d0cd      	beq.n	8001bac <__aeabi_dadd+0x5c0>
 8001c10:	08dd      	lsrs	r5, r3, #3
 8001c12:	4215      	tst	r5, r2
 8001c14:	d1ca      	bne.n	8001bac <__aeabi_dadd+0x5c0>
 8001c16:	4663      	mov	r3, ip
 8001c18:	08d8      	lsrs	r0, r3, #3
 8001c1a:	4653      	mov	r3, sl
 8001c1c:	075b      	lsls	r3, r3, #29
 8001c1e:	000e      	movs	r6, r1
 8001c20:	002c      	movs	r4, r5
 8001c22:	4318      	orrs	r0, r3
 8001c24:	e7c2      	b.n	8001bac <__aeabi_dadd+0x5c0>
 8001c26:	4663      	mov	r3, ip
 8001c28:	08d9      	lsrs	r1, r3, #3
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	075a      	lsls	r2, r3, #29
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	08dc      	lsrs	r4, r3, #3
 8001c32:	e699      	b.n	8001968 <__aeabi_dadd+0x37c>
 8001c34:	4663      	mov	r3, ip
 8001c36:	08d8      	lsrs	r0, r3, #3
 8001c38:	4653      	mov	r3, sl
 8001c3a:	075a      	lsls	r2, r3, #29
 8001c3c:	000e      	movs	r6, r1
 8001c3e:	4302      	orrs	r2, r0
 8001c40:	08dc      	lsrs	r4, r3, #3
 8001c42:	e6a1      	b.n	8001988 <__aeabi_dadd+0x39c>
 8001c44:	0011      	movs	r1, r2
 8001c46:	0027      	movs	r7, r4
 8001c48:	3920      	subs	r1, #32
 8001c4a:	40cf      	lsrs	r7, r1
 8001c4c:	2a20      	cmp	r2, #32
 8001c4e:	d003      	beq.n	8001c58 <__aeabi_dadd+0x66c>
 8001c50:	2140      	movs	r1, #64	@ 0x40
 8001c52:	1a8a      	subs	r2, r1, r2
 8001c54:	4094      	lsls	r4, r2
 8001c56:	4320      	orrs	r0, r4
 8001c58:	1e42      	subs	r2, r0, #1
 8001c5a:	4190      	sbcs	r0, r2
 8001c5c:	0005      	movs	r5, r0
 8001c5e:	433d      	orrs	r5, r7
 8001c60:	e651      	b.n	8001906 <__aeabi_dadd+0x31a>
 8001c62:	000c      	movs	r4, r1
 8001c64:	2500      	movs	r5, #0
 8001c66:	2200      	movs	r2, #0
 8001c68:	e558      	b.n	800171c <__aeabi_dadd+0x130>
 8001c6a:	4460      	add	r0, ip
 8001c6c:	4560      	cmp	r0, ip
 8001c6e:	4192      	sbcs	r2, r2
 8001c70:	4454      	add	r4, sl
 8001c72:	4252      	negs	r2, r2
 8001c74:	0005      	movs	r5, r0
 8001c76:	18a4      	adds	r4, r4, r2
 8001c78:	e73a      	b.n	8001af0 <__aeabi_dadd+0x504>
 8001c7a:	4653      	mov	r3, sl
 8001c7c:	075a      	lsls	r2, r3, #29
 8001c7e:	4663      	mov	r3, ip
 8001c80:	08d9      	lsrs	r1, r3, #3
 8001c82:	4653      	mov	r3, sl
 8001c84:	430a      	orrs	r2, r1
 8001c86:	08dc      	lsrs	r4, r3, #3
 8001c88:	e67e      	b.n	8001988 <__aeabi_dadd+0x39c>
 8001c8a:	001a      	movs	r2, r3
 8001c8c:	001c      	movs	r4, r3
 8001c8e:	432a      	orrs	r2, r5
 8001c90:	d000      	beq.n	8001c94 <__aeabi_dadd+0x6a8>
 8001c92:	e6ab      	b.n	80019ec <__aeabi_dadd+0x400>
 8001c94:	e6c1      	b.n	8001a1a <__aeabi_dadd+0x42e>
 8001c96:	2120      	movs	r1, #32
 8001c98:	2500      	movs	r5, #0
 8001c9a:	1a09      	subs	r1, r1, r0
 8001c9c:	e519      	b.n	80016d2 <__aeabi_dadd+0xe6>
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2500      	movs	r5, #0
 8001ca2:	4c01      	ldr	r4, [pc, #4]	@ (8001ca8 <__aeabi_dadd+0x6bc>)
 8001ca4:	e53a      	b.n	800171c <__aeabi_dadd+0x130>
 8001ca6:	46c0      	nop			@ (mov r8, r8)
 8001ca8:	000007ff 	.word	0x000007ff
 8001cac:	ff7fffff 	.word	0xff7fffff
 8001cb0:	000007fe 	.word	0x000007fe

08001cb4 <__aeabi_ddiv>:
 8001cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb6:	46de      	mov	lr, fp
 8001cb8:	4645      	mov	r5, r8
 8001cba:	4657      	mov	r7, sl
 8001cbc:	464e      	mov	r6, r9
 8001cbe:	b5e0      	push	{r5, r6, r7, lr}
 8001cc0:	b087      	sub	sp, #28
 8001cc2:	9200      	str	r2, [sp, #0]
 8001cc4:	9301      	str	r3, [sp, #4]
 8001cc6:	030b      	lsls	r3, r1, #12
 8001cc8:	0b1b      	lsrs	r3, r3, #12
 8001cca:	469b      	mov	fp, r3
 8001ccc:	0fca      	lsrs	r2, r1, #31
 8001cce:	004b      	lsls	r3, r1, #1
 8001cd0:	0004      	movs	r4, r0
 8001cd2:	4680      	mov	r8, r0
 8001cd4:	0d5b      	lsrs	r3, r3, #21
 8001cd6:	9202      	str	r2, [sp, #8]
 8001cd8:	d100      	bne.n	8001cdc <__aeabi_ddiv+0x28>
 8001cda:	e16a      	b.n	8001fb2 <__aeabi_ddiv+0x2fe>
 8001cdc:	4ad4      	ldr	r2, [pc, #848]	@ (8002030 <__aeabi_ddiv+0x37c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d100      	bne.n	8001ce4 <__aeabi_ddiv+0x30>
 8001ce2:	e18c      	b.n	8001ffe <__aeabi_ddiv+0x34a>
 8001ce4:	4659      	mov	r1, fp
 8001ce6:	0f42      	lsrs	r2, r0, #29
 8001ce8:	00c9      	lsls	r1, r1, #3
 8001cea:	430a      	orrs	r2, r1
 8001cec:	2180      	movs	r1, #128	@ 0x80
 8001cee:	0409      	lsls	r1, r1, #16
 8001cf0:	4311      	orrs	r1, r2
 8001cf2:	00c2      	lsls	r2, r0, #3
 8001cf4:	4690      	mov	r8, r2
 8001cf6:	4acf      	ldr	r2, [pc, #828]	@ (8002034 <__aeabi_ddiv+0x380>)
 8001cf8:	4689      	mov	r9, r1
 8001cfa:	4692      	mov	sl, r2
 8001cfc:	449a      	add	sl, r3
 8001cfe:	2300      	movs	r3, #0
 8001d00:	2400      	movs	r4, #0
 8001d02:	9303      	str	r3, [sp, #12]
 8001d04:	9e00      	ldr	r6, [sp, #0]
 8001d06:	9f01      	ldr	r7, [sp, #4]
 8001d08:	033b      	lsls	r3, r7, #12
 8001d0a:	0b1b      	lsrs	r3, r3, #12
 8001d0c:	469b      	mov	fp, r3
 8001d0e:	007b      	lsls	r3, r7, #1
 8001d10:	0030      	movs	r0, r6
 8001d12:	0d5b      	lsrs	r3, r3, #21
 8001d14:	0ffd      	lsrs	r5, r7, #31
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d100      	bne.n	8001d1c <__aeabi_ddiv+0x68>
 8001d1a:	e128      	b.n	8001f6e <__aeabi_ddiv+0x2ba>
 8001d1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002030 <__aeabi_ddiv+0x37c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d100      	bne.n	8001d24 <__aeabi_ddiv+0x70>
 8001d22:	e177      	b.n	8002014 <__aeabi_ddiv+0x360>
 8001d24:	4659      	mov	r1, fp
 8001d26:	0f72      	lsrs	r2, r6, #29
 8001d28:	00c9      	lsls	r1, r1, #3
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	2180      	movs	r1, #128	@ 0x80
 8001d2e:	0409      	lsls	r1, r1, #16
 8001d30:	4311      	orrs	r1, r2
 8001d32:	468b      	mov	fp, r1
 8001d34:	49bf      	ldr	r1, [pc, #764]	@ (8002034 <__aeabi_ddiv+0x380>)
 8001d36:	00f2      	lsls	r2, r6, #3
 8001d38:	468c      	mov	ip, r1
 8001d3a:	4651      	mov	r1, sl
 8001d3c:	4463      	add	r3, ip
 8001d3e:	1acb      	subs	r3, r1, r3
 8001d40:	469a      	mov	sl, r3
 8001d42:	2300      	movs	r3, #0
 8001d44:	9e02      	ldr	r6, [sp, #8]
 8001d46:	406e      	eors	r6, r5
 8001d48:	2c0f      	cmp	r4, #15
 8001d4a:	d827      	bhi.n	8001d9c <__aeabi_ddiv+0xe8>
 8001d4c:	49ba      	ldr	r1, [pc, #744]	@ (8002038 <__aeabi_ddiv+0x384>)
 8001d4e:	00a4      	lsls	r4, r4, #2
 8001d50:	5909      	ldr	r1, [r1, r4]
 8001d52:	468f      	mov	pc, r1
 8001d54:	46cb      	mov	fp, r9
 8001d56:	4642      	mov	r2, r8
 8001d58:	9e02      	ldr	r6, [sp, #8]
 8001d5a:	9b03      	ldr	r3, [sp, #12]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d016      	beq.n	8001d8e <__aeabi_ddiv+0xda>
 8001d60:	2b03      	cmp	r3, #3
 8001d62:	d100      	bne.n	8001d66 <__aeabi_ddiv+0xb2>
 8001d64:	e2a6      	b.n	80022b4 <__aeabi_ddiv+0x600>
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d000      	beq.n	8001d6c <__aeabi_ddiv+0xb8>
 8001d6a:	e0df      	b.n	8001f2c <__aeabi_ddiv+0x278>
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2300      	movs	r3, #0
 8001d70:	2400      	movs	r4, #0
 8001d72:	4690      	mov	r8, r2
 8001d74:	051b      	lsls	r3, r3, #20
 8001d76:	4323      	orrs	r3, r4
 8001d78:	07f6      	lsls	r6, r6, #31
 8001d7a:	4333      	orrs	r3, r6
 8001d7c:	4640      	mov	r0, r8
 8001d7e:	0019      	movs	r1, r3
 8001d80:	b007      	add	sp, #28
 8001d82:	bcf0      	pop	{r4, r5, r6, r7}
 8001d84:	46bb      	mov	fp, r7
 8001d86:	46b2      	mov	sl, r6
 8001d88:	46a9      	mov	r9, r5
 8001d8a:	46a0      	mov	r8, r4
 8001d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2400      	movs	r4, #0
 8001d92:	4690      	mov	r8, r2
 8001d94:	4ba6      	ldr	r3, [pc, #664]	@ (8002030 <__aeabi_ddiv+0x37c>)
 8001d96:	e7ed      	b.n	8001d74 <__aeabi_ddiv+0xc0>
 8001d98:	002e      	movs	r6, r5
 8001d9a:	e7df      	b.n	8001d5c <__aeabi_ddiv+0xa8>
 8001d9c:	45cb      	cmp	fp, r9
 8001d9e:	d200      	bcs.n	8001da2 <__aeabi_ddiv+0xee>
 8001da0:	e1d4      	b.n	800214c <__aeabi_ddiv+0x498>
 8001da2:	d100      	bne.n	8001da6 <__aeabi_ddiv+0xf2>
 8001da4:	e1cf      	b.n	8002146 <__aeabi_ddiv+0x492>
 8001da6:	2301      	movs	r3, #1
 8001da8:	425b      	negs	r3, r3
 8001daa:	469c      	mov	ip, r3
 8001dac:	4644      	mov	r4, r8
 8001dae:	4648      	mov	r0, r9
 8001db0:	2700      	movs	r7, #0
 8001db2:	44e2      	add	sl, ip
 8001db4:	465b      	mov	r3, fp
 8001db6:	0e15      	lsrs	r5, r2, #24
 8001db8:	021b      	lsls	r3, r3, #8
 8001dba:	431d      	orrs	r5, r3
 8001dbc:	0c19      	lsrs	r1, r3, #16
 8001dbe:	042b      	lsls	r3, r5, #16
 8001dc0:	0212      	lsls	r2, r2, #8
 8001dc2:	9500      	str	r5, [sp, #0]
 8001dc4:	0c1d      	lsrs	r5, r3, #16
 8001dc6:	4691      	mov	r9, r2
 8001dc8:	9102      	str	r1, [sp, #8]
 8001dca:	9503      	str	r5, [sp, #12]
 8001dcc:	f7fe fa3e 	bl	800024c <__aeabi_uidivmod>
 8001dd0:	0002      	movs	r2, r0
 8001dd2:	436a      	muls	r2, r5
 8001dd4:	040b      	lsls	r3, r1, #16
 8001dd6:	0c21      	lsrs	r1, r4, #16
 8001dd8:	4680      	mov	r8, r0
 8001dda:	4319      	orrs	r1, r3
 8001ddc:	428a      	cmp	r2, r1
 8001dde:	d909      	bls.n	8001df4 <__aeabi_ddiv+0x140>
 8001de0:	9d00      	ldr	r5, [sp, #0]
 8001de2:	2301      	movs	r3, #1
 8001de4:	46ac      	mov	ip, r5
 8001de6:	425b      	negs	r3, r3
 8001de8:	4461      	add	r1, ip
 8001dea:	469c      	mov	ip, r3
 8001dec:	44e0      	add	r8, ip
 8001dee:	428d      	cmp	r5, r1
 8001df0:	d800      	bhi.n	8001df4 <__aeabi_ddiv+0x140>
 8001df2:	e1fb      	b.n	80021ec <__aeabi_ddiv+0x538>
 8001df4:	1a88      	subs	r0, r1, r2
 8001df6:	9902      	ldr	r1, [sp, #8]
 8001df8:	f7fe fa28 	bl	800024c <__aeabi_uidivmod>
 8001dfc:	9a03      	ldr	r2, [sp, #12]
 8001dfe:	0424      	lsls	r4, r4, #16
 8001e00:	4342      	muls	r2, r0
 8001e02:	0409      	lsls	r1, r1, #16
 8001e04:	0c24      	lsrs	r4, r4, #16
 8001e06:	0003      	movs	r3, r0
 8001e08:	430c      	orrs	r4, r1
 8001e0a:	42a2      	cmp	r2, r4
 8001e0c:	d906      	bls.n	8001e1c <__aeabi_ddiv+0x168>
 8001e0e:	9900      	ldr	r1, [sp, #0]
 8001e10:	3b01      	subs	r3, #1
 8001e12:	468c      	mov	ip, r1
 8001e14:	4464      	add	r4, ip
 8001e16:	42a1      	cmp	r1, r4
 8001e18:	d800      	bhi.n	8001e1c <__aeabi_ddiv+0x168>
 8001e1a:	e1e1      	b.n	80021e0 <__aeabi_ddiv+0x52c>
 8001e1c:	1aa0      	subs	r0, r4, r2
 8001e1e:	4642      	mov	r2, r8
 8001e20:	0412      	lsls	r2, r2, #16
 8001e22:	431a      	orrs	r2, r3
 8001e24:	4693      	mov	fp, r2
 8001e26:	464b      	mov	r3, r9
 8001e28:	4659      	mov	r1, fp
 8001e2a:	0c1b      	lsrs	r3, r3, #16
 8001e2c:	001d      	movs	r5, r3
 8001e2e:	9304      	str	r3, [sp, #16]
 8001e30:	040b      	lsls	r3, r1, #16
 8001e32:	4649      	mov	r1, r9
 8001e34:	0409      	lsls	r1, r1, #16
 8001e36:	0c09      	lsrs	r1, r1, #16
 8001e38:	000c      	movs	r4, r1
 8001e3a:	0c1b      	lsrs	r3, r3, #16
 8001e3c:	435c      	muls	r4, r3
 8001e3e:	0c12      	lsrs	r2, r2, #16
 8001e40:	436b      	muls	r3, r5
 8001e42:	4688      	mov	r8, r1
 8001e44:	4351      	muls	r1, r2
 8001e46:	436a      	muls	r2, r5
 8001e48:	0c25      	lsrs	r5, r4, #16
 8001e4a:	46ac      	mov	ip, r5
 8001e4c:	185b      	adds	r3, r3, r1
 8001e4e:	4463      	add	r3, ip
 8001e50:	4299      	cmp	r1, r3
 8001e52:	d903      	bls.n	8001e5c <__aeabi_ddiv+0x1a8>
 8001e54:	2180      	movs	r1, #128	@ 0x80
 8001e56:	0249      	lsls	r1, r1, #9
 8001e58:	468c      	mov	ip, r1
 8001e5a:	4462      	add	r2, ip
 8001e5c:	0c19      	lsrs	r1, r3, #16
 8001e5e:	0424      	lsls	r4, r4, #16
 8001e60:	041b      	lsls	r3, r3, #16
 8001e62:	0c24      	lsrs	r4, r4, #16
 8001e64:	188a      	adds	r2, r1, r2
 8001e66:	191c      	adds	r4, r3, r4
 8001e68:	4290      	cmp	r0, r2
 8001e6a:	d302      	bcc.n	8001e72 <__aeabi_ddiv+0x1be>
 8001e6c:	d116      	bne.n	8001e9c <__aeabi_ddiv+0x1e8>
 8001e6e:	42a7      	cmp	r7, r4
 8001e70:	d214      	bcs.n	8001e9c <__aeabi_ddiv+0x1e8>
 8001e72:	465b      	mov	r3, fp
 8001e74:	9d00      	ldr	r5, [sp, #0]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	444f      	add	r7, r9
 8001e7a:	9305      	str	r3, [sp, #20]
 8001e7c:	454f      	cmp	r7, r9
 8001e7e:	419b      	sbcs	r3, r3
 8001e80:	46ac      	mov	ip, r5
 8001e82:	425b      	negs	r3, r3
 8001e84:	4463      	add	r3, ip
 8001e86:	18c0      	adds	r0, r0, r3
 8001e88:	4285      	cmp	r5, r0
 8001e8a:	d300      	bcc.n	8001e8e <__aeabi_ddiv+0x1da>
 8001e8c:	e1a1      	b.n	80021d2 <__aeabi_ddiv+0x51e>
 8001e8e:	4282      	cmp	r2, r0
 8001e90:	d900      	bls.n	8001e94 <__aeabi_ddiv+0x1e0>
 8001e92:	e1f6      	b.n	8002282 <__aeabi_ddiv+0x5ce>
 8001e94:	d100      	bne.n	8001e98 <__aeabi_ddiv+0x1e4>
 8001e96:	e1f1      	b.n	800227c <__aeabi_ddiv+0x5c8>
 8001e98:	9b05      	ldr	r3, [sp, #20]
 8001e9a:	469b      	mov	fp, r3
 8001e9c:	1b3c      	subs	r4, r7, r4
 8001e9e:	42a7      	cmp	r7, r4
 8001ea0:	41bf      	sbcs	r7, r7
 8001ea2:	9d00      	ldr	r5, [sp, #0]
 8001ea4:	1a80      	subs	r0, r0, r2
 8001ea6:	427f      	negs	r7, r7
 8001ea8:	1bc0      	subs	r0, r0, r7
 8001eaa:	4285      	cmp	r5, r0
 8001eac:	d100      	bne.n	8001eb0 <__aeabi_ddiv+0x1fc>
 8001eae:	e1d0      	b.n	8002252 <__aeabi_ddiv+0x59e>
 8001eb0:	9902      	ldr	r1, [sp, #8]
 8001eb2:	f7fe f9cb 	bl	800024c <__aeabi_uidivmod>
 8001eb6:	9a03      	ldr	r2, [sp, #12]
 8001eb8:	040b      	lsls	r3, r1, #16
 8001eba:	4342      	muls	r2, r0
 8001ebc:	0c21      	lsrs	r1, r4, #16
 8001ebe:	0007      	movs	r7, r0
 8001ec0:	4319      	orrs	r1, r3
 8001ec2:	428a      	cmp	r2, r1
 8001ec4:	d900      	bls.n	8001ec8 <__aeabi_ddiv+0x214>
 8001ec6:	e178      	b.n	80021ba <__aeabi_ddiv+0x506>
 8001ec8:	1a88      	subs	r0, r1, r2
 8001eca:	9902      	ldr	r1, [sp, #8]
 8001ecc:	f7fe f9be 	bl	800024c <__aeabi_uidivmod>
 8001ed0:	9a03      	ldr	r2, [sp, #12]
 8001ed2:	0424      	lsls	r4, r4, #16
 8001ed4:	4342      	muls	r2, r0
 8001ed6:	0409      	lsls	r1, r1, #16
 8001ed8:	0c24      	lsrs	r4, r4, #16
 8001eda:	0003      	movs	r3, r0
 8001edc:	430c      	orrs	r4, r1
 8001ede:	42a2      	cmp	r2, r4
 8001ee0:	d900      	bls.n	8001ee4 <__aeabi_ddiv+0x230>
 8001ee2:	e15d      	b.n	80021a0 <__aeabi_ddiv+0x4ec>
 8001ee4:	4641      	mov	r1, r8
 8001ee6:	1aa4      	subs	r4, r4, r2
 8001ee8:	043a      	lsls	r2, r7, #16
 8001eea:	431a      	orrs	r2, r3
 8001eec:	9d04      	ldr	r5, [sp, #16]
 8001eee:	0413      	lsls	r3, r2, #16
 8001ef0:	0c1b      	lsrs	r3, r3, #16
 8001ef2:	4359      	muls	r1, r3
 8001ef4:	4647      	mov	r7, r8
 8001ef6:	436b      	muls	r3, r5
 8001ef8:	469c      	mov	ip, r3
 8001efa:	0c10      	lsrs	r0, r2, #16
 8001efc:	4347      	muls	r7, r0
 8001efe:	0c0b      	lsrs	r3, r1, #16
 8001f00:	44bc      	add	ip, r7
 8001f02:	4463      	add	r3, ip
 8001f04:	4368      	muls	r0, r5
 8001f06:	429f      	cmp	r7, r3
 8001f08:	d903      	bls.n	8001f12 <__aeabi_ddiv+0x25e>
 8001f0a:	2580      	movs	r5, #128	@ 0x80
 8001f0c:	026d      	lsls	r5, r5, #9
 8001f0e:	46ac      	mov	ip, r5
 8001f10:	4460      	add	r0, ip
 8001f12:	0c1f      	lsrs	r7, r3, #16
 8001f14:	0409      	lsls	r1, r1, #16
 8001f16:	041b      	lsls	r3, r3, #16
 8001f18:	0c09      	lsrs	r1, r1, #16
 8001f1a:	183f      	adds	r7, r7, r0
 8001f1c:	185b      	adds	r3, r3, r1
 8001f1e:	42bc      	cmp	r4, r7
 8001f20:	d200      	bcs.n	8001f24 <__aeabi_ddiv+0x270>
 8001f22:	e102      	b.n	800212a <__aeabi_ddiv+0x476>
 8001f24:	d100      	bne.n	8001f28 <__aeabi_ddiv+0x274>
 8001f26:	e0fd      	b.n	8002124 <__aeabi_ddiv+0x470>
 8001f28:	2301      	movs	r3, #1
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	4b43      	ldr	r3, [pc, #268]	@ (800203c <__aeabi_ddiv+0x388>)
 8001f2e:	4453      	add	r3, sl
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	dc00      	bgt.n	8001f36 <__aeabi_ddiv+0x282>
 8001f34:	e0ae      	b.n	8002094 <__aeabi_ddiv+0x3e0>
 8001f36:	0751      	lsls	r1, r2, #29
 8001f38:	d000      	beq.n	8001f3c <__aeabi_ddiv+0x288>
 8001f3a:	e198      	b.n	800226e <__aeabi_ddiv+0x5ba>
 8001f3c:	4659      	mov	r1, fp
 8001f3e:	01c9      	lsls	r1, r1, #7
 8001f40:	d506      	bpl.n	8001f50 <__aeabi_ddiv+0x29c>
 8001f42:	4659      	mov	r1, fp
 8001f44:	4b3e      	ldr	r3, [pc, #248]	@ (8002040 <__aeabi_ddiv+0x38c>)
 8001f46:	4019      	ands	r1, r3
 8001f48:	2380      	movs	r3, #128	@ 0x80
 8001f4a:	468b      	mov	fp, r1
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	4453      	add	r3, sl
 8001f50:	493c      	ldr	r1, [pc, #240]	@ (8002044 <__aeabi_ddiv+0x390>)
 8001f52:	428b      	cmp	r3, r1
 8001f54:	dd00      	ble.n	8001f58 <__aeabi_ddiv+0x2a4>
 8001f56:	e71a      	b.n	8001d8e <__aeabi_ddiv+0xda>
 8001f58:	4659      	mov	r1, fp
 8001f5a:	08d2      	lsrs	r2, r2, #3
 8001f5c:	0749      	lsls	r1, r1, #29
 8001f5e:	4311      	orrs	r1, r2
 8001f60:	465a      	mov	r2, fp
 8001f62:	055b      	lsls	r3, r3, #21
 8001f64:	0254      	lsls	r4, r2, #9
 8001f66:	4688      	mov	r8, r1
 8001f68:	0b24      	lsrs	r4, r4, #12
 8001f6a:	0d5b      	lsrs	r3, r3, #21
 8001f6c:	e702      	b.n	8001d74 <__aeabi_ddiv+0xc0>
 8001f6e:	465a      	mov	r2, fp
 8001f70:	9b00      	ldr	r3, [sp, #0]
 8001f72:	431a      	orrs	r2, r3
 8001f74:	d100      	bne.n	8001f78 <__aeabi_ddiv+0x2c4>
 8001f76:	e07e      	b.n	8002076 <__aeabi_ddiv+0x3c2>
 8001f78:	465b      	mov	r3, fp
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d100      	bne.n	8001f80 <__aeabi_ddiv+0x2cc>
 8001f7e:	e100      	b.n	8002182 <__aeabi_ddiv+0x4ce>
 8001f80:	4658      	mov	r0, fp
 8001f82:	f001 fabb 	bl	80034fc <__clzsi2>
 8001f86:	0002      	movs	r2, r0
 8001f88:	0003      	movs	r3, r0
 8001f8a:	3a0b      	subs	r2, #11
 8001f8c:	271d      	movs	r7, #29
 8001f8e:	9e00      	ldr	r6, [sp, #0]
 8001f90:	1aba      	subs	r2, r7, r2
 8001f92:	0019      	movs	r1, r3
 8001f94:	4658      	mov	r0, fp
 8001f96:	40d6      	lsrs	r6, r2
 8001f98:	3908      	subs	r1, #8
 8001f9a:	4088      	lsls	r0, r1
 8001f9c:	0032      	movs	r2, r6
 8001f9e:	4302      	orrs	r2, r0
 8001fa0:	4693      	mov	fp, r2
 8001fa2:	9a00      	ldr	r2, [sp, #0]
 8001fa4:	408a      	lsls	r2, r1
 8001fa6:	4928      	ldr	r1, [pc, #160]	@ (8002048 <__aeabi_ddiv+0x394>)
 8001fa8:	4453      	add	r3, sl
 8001faa:	468a      	mov	sl, r1
 8001fac:	449a      	add	sl, r3
 8001fae:	2300      	movs	r3, #0
 8001fb0:	e6c8      	b.n	8001d44 <__aeabi_ddiv+0x90>
 8001fb2:	465b      	mov	r3, fp
 8001fb4:	4303      	orrs	r3, r0
 8001fb6:	4699      	mov	r9, r3
 8001fb8:	d056      	beq.n	8002068 <__aeabi_ddiv+0x3b4>
 8001fba:	465b      	mov	r3, fp
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d100      	bne.n	8001fc2 <__aeabi_ddiv+0x30e>
 8001fc0:	e0cd      	b.n	800215e <__aeabi_ddiv+0x4aa>
 8001fc2:	4658      	mov	r0, fp
 8001fc4:	f001 fa9a 	bl	80034fc <__clzsi2>
 8001fc8:	230b      	movs	r3, #11
 8001fca:	425b      	negs	r3, r3
 8001fcc:	469c      	mov	ip, r3
 8001fce:	0002      	movs	r2, r0
 8001fd0:	4484      	add	ip, r0
 8001fd2:	4666      	mov	r6, ip
 8001fd4:	231d      	movs	r3, #29
 8001fd6:	1b9b      	subs	r3, r3, r6
 8001fd8:	0026      	movs	r6, r4
 8001fda:	0011      	movs	r1, r2
 8001fdc:	4658      	mov	r0, fp
 8001fde:	40de      	lsrs	r6, r3
 8001fe0:	3908      	subs	r1, #8
 8001fe2:	4088      	lsls	r0, r1
 8001fe4:	0033      	movs	r3, r6
 8001fe6:	4303      	orrs	r3, r0
 8001fe8:	4699      	mov	r9, r3
 8001fea:	0023      	movs	r3, r4
 8001fec:	408b      	lsls	r3, r1
 8001fee:	4698      	mov	r8, r3
 8001ff0:	4b16      	ldr	r3, [pc, #88]	@ (800204c <__aeabi_ddiv+0x398>)
 8001ff2:	2400      	movs	r4, #0
 8001ff4:	1a9b      	subs	r3, r3, r2
 8001ff6:	469a      	mov	sl, r3
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	9303      	str	r3, [sp, #12]
 8001ffc:	e682      	b.n	8001d04 <__aeabi_ddiv+0x50>
 8001ffe:	465a      	mov	r2, fp
 8002000:	4302      	orrs	r2, r0
 8002002:	4691      	mov	r9, r2
 8002004:	d12a      	bne.n	800205c <__aeabi_ddiv+0x3a8>
 8002006:	2200      	movs	r2, #0
 8002008:	469a      	mov	sl, r3
 800200a:	2302      	movs	r3, #2
 800200c:	4690      	mov	r8, r2
 800200e:	2408      	movs	r4, #8
 8002010:	9303      	str	r3, [sp, #12]
 8002012:	e677      	b.n	8001d04 <__aeabi_ddiv+0x50>
 8002014:	465a      	mov	r2, fp
 8002016:	9b00      	ldr	r3, [sp, #0]
 8002018:	431a      	orrs	r2, r3
 800201a:	4b0d      	ldr	r3, [pc, #52]	@ (8002050 <__aeabi_ddiv+0x39c>)
 800201c:	469c      	mov	ip, r3
 800201e:	44e2      	add	sl, ip
 8002020:	2a00      	cmp	r2, #0
 8002022:	d117      	bne.n	8002054 <__aeabi_ddiv+0x3a0>
 8002024:	2302      	movs	r3, #2
 8002026:	431c      	orrs	r4, r3
 8002028:	2300      	movs	r3, #0
 800202a:	469b      	mov	fp, r3
 800202c:	3302      	adds	r3, #2
 800202e:	e689      	b.n	8001d44 <__aeabi_ddiv+0x90>
 8002030:	000007ff 	.word	0x000007ff
 8002034:	fffffc01 	.word	0xfffffc01
 8002038:	0800c30c 	.word	0x0800c30c
 800203c:	000003ff 	.word	0x000003ff
 8002040:	feffffff 	.word	0xfeffffff
 8002044:	000007fe 	.word	0x000007fe
 8002048:	000003f3 	.word	0x000003f3
 800204c:	fffffc0d 	.word	0xfffffc0d
 8002050:	fffff801 	.word	0xfffff801
 8002054:	2303      	movs	r3, #3
 8002056:	0032      	movs	r2, r6
 8002058:	431c      	orrs	r4, r3
 800205a:	e673      	b.n	8001d44 <__aeabi_ddiv+0x90>
 800205c:	469a      	mov	sl, r3
 800205e:	2303      	movs	r3, #3
 8002060:	46d9      	mov	r9, fp
 8002062:	240c      	movs	r4, #12
 8002064:	9303      	str	r3, [sp, #12]
 8002066:	e64d      	b.n	8001d04 <__aeabi_ddiv+0x50>
 8002068:	2300      	movs	r3, #0
 800206a:	4698      	mov	r8, r3
 800206c:	469a      	mov	sl, r3
 800206e:	3301      	adds	r3, #1
 8002070:	2404      	movs	r4, #4
 8002072:	9303      	str	r3, [sp, #12]
 8002074:	e646      	b.n	8001d04 <__aeabi_ddiv+0x50>
 8002076:	2301      	movs	r3, #1
 8002078:	431c      	orrs	r4, r3
 800207a:	2300      	movs	r3, #0
 800207c:	469b      	mov	fp, r3
 800207e:	3301      	adds	r3, #1
 8002080:	e660      	b.n	8001d44 <__aeabi_ddiv+0x90>
 8002082:	2300      	movs	r3, #0
 8002084:	2480      	movs	r4, #128	@ 0x80
 8002086:	4698      	mov	r8, r3
 8002088:	2600      	movs	r6, #0
 800208a:	4b92      	ldr	r3, [pc, #584]	@ (80022d4 <__aeabi_ddiv+0x620>)
 800208c:	0324      	lsls	r4, r4, #12
 800208e:	e671      	b.n	8001d74 <__aeabi_ddiv+0xc0>
 8002090:	2201      	movs	r2, #1
 8002092:	4252      	negs	r2, r2
 8002094:	2101      	movs	r1, #1
 8002096:	1ac9      	subs	r1, r1, r3
 8002098:	2938      	cmp	r1, #56	@ 0x38
 800209a:	dd00      	ble.n	800209e <__aeabi_ddiv+0x3ea>
 800209c:	e666      	b.n	8001d6c <__aeabi_ddiv+0xb8>
 800209e:	291f      	cmp	r1, #31
 80020a0:	dc00      	bgt.n	80020a4 <__aeabi_ddiv+0x3f0>
 80020a2:	e0ab      	b.n	80021fc <__aeabi_ddiv+0x548>
 80020a4:	201f      	movs	r0, #31
 80020a6:	4240      	negs	r0, r0
 80020a8:	1ac3      	subs	r3, r0, r3
 80020aa:	4658      	mov	r0, fp
 80020ac:	40d8      	lsrs	r0, r3
 80020ae:	0003      	movs	r3, r0
 80020b0:	2920      	cmp	r1, #32
 80020b2:	d004      	beq.n	80020be <__aeabi_ddiv+0x40a>
 80020b4:	4658      	mov	r0, fp
 80020b6:	4988      	ldr	r1, [pc, #544]	@ (80022d8 <__aeabi_ddiv+0x624>)
 80020b8:	4451      	add	r1, sl
 80020ba:	4088      	lsls	r0, r1
 80020bc:	4302      	orrs	r2, r0
 80020be:	1e51      	subs	r1, r2, #1
 80020c0:	418a      	sbcs	r2, r1
 80020c2:	431a      	orrs	r2, r3
 80020c4:	2307      	movs	r3, #7
 80020c6:	0019      	movs	r1, r3
 80020c8:	2400      	movs	r4, #0
 80020ca:	4011      	ands	r1, r2
 80020cc:	4213      	tst	r3, r2
 80020ce:	d00c      	beq.n	80020ea <__aeabi_ddiv+0x436>
 80020d0:	230f      	movs	r3, #15
 80020d2:	4013      	ands	r3, r2
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	d100      	bne.n	80020da <__aeabi_ddiv+0x426>
 80020d8:	e0f9      	b.n	80022ce <__aeabi_ddiv+0x61a>
 80020da:	1d11      	adds	r1, r2, #4
 80020dc:	4291      	cmp	r1, r2
 80020de:	419b      	sbcs	r3, r3
 80020e0:	000a      	movs	r2, r1
 80020e2:	425b      	negs	r3, r3
 80020e4:	0759      	lsls	r1, r3, #29
 80020e6:	025b      	lsls	r3, r3, #9
 80020e8:	0b1c      	lsrs	r4, r3, #12
 80020ea:	08d2      	lsrs	r2, r2, #3
 80020ec:	430a      	orrs	r2, r1
 80020ee:	4690      	mov	r8, r2
 80020f0:	2300      	movs	r3, #0
 80020f2:	e63f      	b.n	8001d74 <__aeabi_ddiv+0xc0>
 80020f4:	2480      	movs	r4, #128	@ 0x80
 80020f6:	464b      	mov	r3, r9
 80020f8:	0324      	lsls	r4, r4, #12
 80020fa:	4223      	tst	r3, r4
 80020fc:	d009      	beq.n	8002112 <__aeabi_ddiv+0x45e>
 80020fe:	465b      	mov	r3, fp
 8002100:	4223      	tst	r3, r4
 8002102:	d106      	bne.n	8002112 <__aeabi_ddiv+0x45e>
 8002104:	431c      	orrs	r4, r3
 8002106:	0324      	lsls	r4, r4, #12
 8002108:	002e      	movs	r6, r5
 800210a:	4690      	mov	r8, r2
 800210c:	4b71      	ldr	r3, [pc, #452]	@ (80022d4 <__aeabi_ddiv+0x620>)
 800210e:	0b24      	lsrs	r4, r4, #12
 8002110:	e630      	b.n	8001d74 <__aeabi_ddiv+0xc0>
 8002112:	2480      	movs	r4, #128	@ 0x80
 8002114:	464b      	mov	r3, r9
 8002116:	0324      	lsls	r4, r4, #12
 8002118:	431c      	orrs	r4, r3
 800211a:	0324      	lsls	r4, r4, #12
 800211c:	9e02      	ldr	r6, [sp, #8]
 800211e:	4b6d      	ldr	r3, [pc, #436]	@ (80022d4 <__aeabi_ddiv+0x620>)
 8002120:	0b24      	lsrs	r4, r4, #12
 8002122:	e627      	b.n	8001d74 <__aeabi_ddiv+0xc0>
 8002124:	2b00      	cmp	r3, #0
 8002126:	d100      	bne.n	800212a <__aeabi_ddiv+0x476>
 8002128:	e700      	b.n	8001f2c <__aeabi_ddiv+0x278>
 800212a:	9800      	ldr	r0, [sp, #0]
 800212c:	1e51      	subs	r1, r2, #1
 800212e:	4684      	mov	ip, r0
 8002130:	4464      	add	r4, ip
 8002132:	4284      	cmp	r4, r0
 8002134:	d200      	bcs.n	8002138 <__aeabi_ddiv+0x484>
 8002136:	e084      	b.n	8002242 <__aeabi_ddiv+0x58e>
 8002138:	42bc      	cmp	r4, r7
 800213a:	d200      	bcs.n	800213e <__aeabi_ddiv+0x48a>
 800213c:	e0ae      	b.n	800229c <__aeabi_ddiv+0x5e8>
 800213e:	d100      	bne.n	8002142 <__aeabi_ddiv+0x48e>
 8002140:	e0c1      	b.n	80022c6 <__aeabi_ddiv+0x612>
 8002142:	000a      	movs	r2, r1
 8002144:	e6f0      	b.n	8001f28 <__aeabi_ddiv+0x274>
 8002146:	4542      	cmp	r2, r8
 8002148:	d900      	bls.n	800214c <__aeabi_ddiv+0x498>
 800214a:	e62c      	b.n	8001da6 <__aeabi_ddiv+0xf2>
 800214c:	464b      	mov	r3, r9
 800214e:	07dc      	lsls	r4, r3, #31
 8002150:	0858      	lsrs	r0, r3, #1
 8002152:	4643      	mov	r3, r8
 8002154:	085b      	lsrs	r3, r3, #1
 8002156:	431c      	orrs	r4, r3
 8002158:	4643      	mov	r3, r8
 800215a:	07df      	lsls	r7, r3, #31
 800215c:	e62a      	b.n	8001db4 <__aeabi_ddiv+0x100>
 800215e:	f001 f9cd 	bl	80034fc <__clzsi2>
 8002162:	2315      	movs	r3, #21
 8002164:	469c      	mov	ip, r3
 8002166:	4484      	add	ip, r0
 8002168:	0002      	movs	r2, r0
 800216a:	4663      	mov	r3, ip
 800216c:	3220      	adds	r2, #32
 800216e:	2b1c      	cmp	r3, #28
 8002170:	dc00      	bgt.n	8002174 <__aeabi_ddiv+0x4c0>
 8002172:	e72e      	b.n	8001fd2 <__aeabi_ddiv+0x31e>
 8002174:	0023      	movs	r3, r4
 8002176:	3808      	subs	r0, #8
 8002178:	4083      	lsls	r3, r0
 800217a:	4699      	mov	r9, r3
 800217c:	2300      	movs	r3, #0
 800217e:	4698      	mov	r8, r3
 8002180:	e736      	b.n	8001ff0 <__aeabi_ddiv+0x33c>
 8002182:	f001 f9bb 	bl	80034fc <__clzsi2>
 8002186:	0002      	movs	r2, r0
 8002188:	0003      	movs	r3, r0
 800218a:	3215      	adds	r2, #21
 800218c:	3320      	adds	r3, #32
 800218e:	2a1c      	cmp	r2, #28
 8002190:	dc00      	bgt.n	8002194 <__aeabi_ddiv+0x4e0>
 8002192:	e6fb      	b.n	8001f8c <__aeabi_ddiv+0x2d8>
 8002194:	9900      	ldr	r1, [sp, #0]
 8002196:	3808      	subs	r0, #8
 8002198:	4081      	lsls	r1, r0
 800219a:	2200      	movs	r2, #0
 800219c:	468b      	mov	fp, r1
 800219e:	e702      	b.n	8001fa6 <__aeabi_ddiv+0x2f2>
 80021a0:	9900      	ldr	r1, [sp, #0]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	468c      	mov	ip, r1
 80021a6:	4464      	add	r4, ip
 80021a8:	42a1      	cmp	r1, r4
 80021aa:	d900      	bls.n	80021ae <__aeabi_ddiv+0x4fa>
 80021ac:	e69a      	b.n	8001ee4 <__aeabi_ddiv+0x230>
 80021ae:	42a2      	cmp	r2, r4
 80021b0:	d800      	bhi.n	80021b4 <__aeabi_ddiv+0x500>
 80021b2:	e697      	b.n	8001ee4 <__aeabi_ddiv+0x230>
 80021b4:	1e83      	subs	r3, r0, #2
 80021b6:	4464      	add	r4, ip
 80021b8:	e694      	b.n	8001ee4 <__aeabi_ddiv+0x230>
 80021ba:	46ac      	mov	ip, r5
 80021bc:	4461      	add	r1, ip
 80021be:	3f01      	subs	r7, #1
 80021c0:	428d      	cmp	r5, r1
 80021c2:	d900      	bls.n	80021c6 <__aeabi_ddiv+0x512>
 80021c4:	e680      	b.n	8001ec8 <__aeabi_ddiv+0x214>
 80021c6:	428a      	cmp	r2, r1
 80021c8:	d800      	bhi.n	80021cc <__aeabi_ddiv+0x518>
 80021ca:	e67d      	b.n	8001ec8 <__aeabi_ddiv+0x214>
 80021cc:	1e87      	subs	r7, r0, #2
 80021ce:	4461      	add	r1, ip
 80021d0:	e67a      	b.n	8001ec8 <__aeabi_ddiv+0x214>
 80021d2:	4285      	cmp	r5, r0
 80021d4:	d000      	beq.n	80021d8 <__aeabi_ddiv+0x524>
 80021d6:	e65f      	b.n	8001e98 <__aeabi_ddiv+0x1e4>
 80021d8:	45b9      	cmp	r9, r7
 80021da:	d900      	bls.n	80021de <__aeabi_ddiv+0x52a>
 80021dc:	e65c      	b.n	8001e98 <__aeabi_ddiv+0x1e4>
 80021de:	e656      	b.n	8001e8e <__aeabi_ddiv+0x1da>
 80021e0:	42a2      	cmp	r2, r4
 80021e2:	d800      	bhi.n	80021e6 <__aeabi_ddiv+0x532>
 80021e4:	e61a      	b.n	8001e1c <__aeabi_ddiv+0x168>
 80021e6:	1e83      	subs	r3, r0, #2
 80021e8:	4464      	add	r4, ip
 80021ea:	e617      	b.n	8001e1c <__aeabi_ddiv+0x168>
 80021ec:	428a      	cmp	r2, r1
 80021ee:	d800      	bhi.n	80021f2 <__aeabi_ddiv+0x53e>
 80021f0:	e600      	b.n	8001df4 <__aeabi_ddiv+0x140>
 80021f2:	46ac      	mov	ip, r5
 80021f4:	1e83      	subs	r3, r0, #2
 80021f6:	4698      	mov	r8, r3
 80021f8:	4461      	add	r1, ip
 80021fa:	e5fb      	b.n	8001df4 <__aeabi_ddiv+0x140>
 80021fc:	4837      	ldr	r0, [pc, #220]	@ (80022dc <__aeabi_ddiv+0x628>)
 80021fe:	0014      	movs	r4, r2
 8002200:	4450      	add	r0, sl
 8002202:	4082      	lsls	r2, r0
 8002204:	465b      	mov	r3, fp
 8002206:	0017      	movs	r7, r2
 8002208:	4083      	lsls	r3, r0
 800220a:	40cc      	lsrs	r4, r1
 800220c:	1e7a      	subs	r2, r7, #1
 800220e:	4197      	sbcs	r7, r2
 8002210:	4323      	orrs	r3, r4
 8002212:	433b      	orrs	r3, r7
 8002214:	001a      	movs	r2, r3
 8002216:	465b      	mov	r3, fp
 8002218:	40cb      	lsrs	r3, r1
 800221a:	0751      	lsls	r1, r2, #29
 800221c:	d009      	beq.n	8002232 <__aeabi_ddiv+0x57e>
 800221e:	210f      	movs	r1, #15
 8002220:	4011      	ands	r1, r2
 8002222:	2904      	cmp	r1, #4
 8002224:	d005      	beq.n	8002232 <__aeabi_ddiv+0x57e>
 8002226:	1d11      	adds	r1, r2, #4
 8002228:	4291      	cmp	r1, r2
 800222a:	4192      	sbcs	r2, r2
 800222c:	4252      	negs	r2, r2
 800222e:	189b      	adds	r3, r3, r2
 8002230:	000a      	movs	r2, r1
 8002232:	0219      	lsls	r1, r3, #8
 8002234:	d400      	bmi.n	8002238 <__aeabi_ddiv+0x584>
 8002236:	e755      	b.n	80020e4 <__aeabi_ddiv+0x430>
 8002238:	2200      	movs	r2, #0
 800223a:	2301      	movs	r3, #1
 800223c:	2400      	movs	r4, #0
 800223e:	4690      	mov	r8, r2
 8002240:	e598      	b.n	8001d74 <__aeabi_ddiv+0xc0>
 8002242:	000a      	movs	r2, r1
 8002244:	42bc      	cmp	r4, r7
 8002246:	d000      	beq.n	800224a <__aeabi_ddiv+0x596>
 8002248:	e66e      	b.n	8001f28 <__aeabi_ddiv+0x274>
 800224a:	454b      	cmp	r3, r9
 800224c:	d000      	beq.n	8002250 <__aeabi_ddiv+0x59c>
 800224e:	e66b      	b.n	8001f28 <__aeabi_ddiv+0x274>
 8002250:	e66c      	b.n	8001f2c <__aeabi_ddiv+0x278>
 8002252:	4b23      	ldr	r3, [pc, #140]	@ (80022e0 <__aeabi_ddiv+0x62c>)
 8002254:	4a23      	ldr	r2, [pc, #140]	@ (80022e4 <__aeabi_ddiv+0x630>)
 8002256:	4453      	add	r3, sl
 8002258:	4592      	cmp	sl, r2
 800225a:	da00      	bge.n	800225e <__aeabi_ddiv+0x5aa>
 800225c:	e718      	b.n	8002090 <__aeabi_ddiv+0x3dc>
 800225e:	2101      	movs	r1, #1
 8002260:	4249      	negs	r1, r1
 8002262:	1d0a      	adds	r2, r1, #4
 8002264:	428a      	cmp	r2, r1
 8002266:	4189      	sbcs	r1, r1
 8002268:	4249      	negs	r1, r1
 800226a:	448b      	add	fp, r1
 800226c:	e666      	b.n	8001f3c <__aeabi_ddiv+0x288>
 800226e:	210f      	movs	r1, #15
 8002270:	4011      	ands	r1, r2
 8002272:	2904      	cmp	r1, #4
 8002274:	d100      	bne.n	8002278 <__aeabi_ddiv+0x5c4>
 8002276:	e661      	b.n	8001f3c <__aeabi_ddiv+0x288>
 8002278:	0011      	movs	r1, r2
 800227a:	e7f2      	b.n	8002262 <__aeabi_ddiv+0x5ae>
 800227c:	42bc      	cmp	r4, r7
 800227e:	d800      	bhi.n	8002282 <__aeabi_ddiv+0x5ce>
 8002280:	e60a      	b.n	8001e98 <__aeabi_ddiv+0x1e4>
 8002282:	2302      	movs	r3, #2
 8002284:	425b      	negs	r3, r3
 8002286:	469c      	mov	ip, r3
 8002288:	9900      	ldr	r1, [sp, #0]
 800228a:	444f      	add	r7, r9
 800228c:	454f      	cmp	r7, r9
 800228e:	419b      	sbcs	r3, r3
 8002290:	44e3      	add	fp, ip
 8002292:	468c      	mov	ip, r1
 8002294:	425b      	negs	r3, r3
 8002296:	4463      	add	r3, ip
 8002298:	18c0      	adds	r0, r0, r3
 800229a:	e5ff      	b.n	8001e9c <__aeabi_ddiv+0x1e8>
 800229c:	4649      	mov	r1, r9
 800229e:	9d00      	ldr	r5, [sp, #0]
 80022a0:	0048      	lsls	r0, r1, #1
 80022a2:	4548      	cmp	r0, r9
 80022a4:	4189      	sbcs	r1, r1
 80022a6:	46ac      	mov	ip, r5
 80022a8:	4249      	negs	r1, r1
 80022aa:	4461      	add	r1, ip
 80022ac:	4681      	mov	r9, r0
 80022ae:	3a02      	subs	r2, #2
 80022b0:	1864      	adds	r4, r4, r1
 80022b2:	e7c7      	b.n	8002244 <__aeabi_ddiv+0x590>
 80022b4:	2480      	movs	r4, #128	@ 0x80
 80022b6:	465b      	mov	r3, fp
 80022b8:	0324      	lsls	r4, r4, #12
 80022ba:	431c      	orrs	r4, r3
 80022bc:	0324      	lsls	r4, r4, #12
 80022be:	4690      	mov	r8, r2
 80022c0:	4b04      	ldr	r3, [pc, #16]	@ (80022d4 <__aeabi_ddiv+0x620>)
 80022c2:	0b24      	lsrs	r4, r4, #12
 80022c4:	e556      	b.n	8001d74 <__aeabi_ddiv+0xc0>
 80022c6:	4599      	cmp	r9, r3
 80022c8:	d3e8      	bcc.n	800229c <__aeabi_ddiv+0x5e8>
 80022ca:	000a      	movs	r2, r1
 80022cc:	e7bd      	b.n	800224a <__aeabi_ddiv+0x596>
 80022ce:	2300      	movs	r3, #0
 80022d0:	e708      	b.n	80020e4 <__aeabi_ddiv+0x430>
 80022d2:	46c0      	nop			@ (mov r8, r8)
 80022d4:	000007ff 	.word	0x000007ff
 80022d8:	0000043e 	.word	0x0000043e
 80022dc:	0000041e 	.word	0x0000041e
 80022e0:	000003ff 	.word	0x000003ff
 80022e4:	fffffc02 	.word	0xfffffc02

080022e8 <__eqdf2>:
 80022e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ea:	4657      	mov	r7, sl
 80022ec:	46de      	mov	lr, fp
 80022ee:	464e      	mov	r6, r9
 80022f0:	4645      	mov	r5, r8
 80022f2:	b5e0      	push	{r5, r6, r7, lr}
 80022f4:	000d      	movs	r5, r1
 80022f6:	0004      	movs	r4, r0
 80022f8:	0fe8      	lsrs	r0, r5, #31
 80022fa:	4683      	mov	fp, r0
 80022fc:	0309      	lsls	r1, r1, #12
 80022fe:	0fd8      	lsrs	r0, r3, #31
 8002300:	0b09      	lsrs	r1, r1, #12
 8002302:	4682      	mov	sl, r0
 8002304:	4819      	ldr	r0, [pc, #100]	@ (800236c <__eqdf2+0x84>)
 8002306:	468c      	mov	ip, r1
 8002308:	031f      	lsls	r7, r3, #12
 800230a:	0069      	lsls	r1, r5, #1
 800230c:	005e      	lsls	r6, r3, #1
 800230e:	0d49      	lsrs	r1, r1, #21
 8002310:	0b3f      	lsrs	r7, r7, #12
 8002312:	0d76      	lsrs	r6, r6, #21
 8002314:	4281      	cmp	r1, r0
 8002316:	d018      	beq.n	800234a <__eqdf2+0x62>
 8002318:	4286      	cmp	r6, r0
 800231a:	d00f      	beq.n	800233c <__eqdf2+0x54>
 800231c:	2001      	movs	r0, #1
 800231e:	42b1      	cmp	r1, r6
 8002320:	d10d      	bne.n	800233e <__eqdf2+0x56>
 8002322:	45bc      	cmp	ip, r7
 8002324:	d10b      	bne.n	800233e <__eqdf2+0x56>
 8002326:	4294      	cmp	r4, r2
 8002328:	d109      	bne.n	800233e <__eqdf2+0x56>
 800232a:	45d3      	cmp	fp, sl
 800232c:	d01c      	beq.n	8002368 <__eqdf2+0x80>
 800232e:	2900      	cmp	r1, #0
 8002330:	d105      	bne.n	800233e <__eqdf2+0x56>
 8002332:	4660      	mov	r0, ip
 8002334:	4320      	orrs	r0, r4
 8002336:	1e43      	subs	r3, r0, #1
 8002338:	4198      	sbcs	r0, r3
 800233a:	e000      	b.n	800233e <__eqdf2+0x56>
 800233c:	2001      	movs	r0, #1
 800233e:	bcf0      	pop	{r4, r5, r6, r7}
 8002340:	46bb      	mov	fp, r7
 8002342:	46b2      	mov	sl, r6
 8002344:	46a9      	mov	r9, r5
 8002346:	46a0      	mov	r8, r4
 8002348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800234a:	2001      	movs	r0, #1
 800234c:	428e      	cmp	r6, r1
 800234e:	d1f6      	bne.n	800233e <__eqdf2+0x56>
 8002350:	4661      	mov	r1, ip
 8002352:	4339      	orrs	r1, r7
 8002354:	000f      	movs	r7, r1
 8002356:	4317      	orrs	r7, r2
 8002358:	4327      	orrs	r7, r4
 800235a:	d1f0      	bne.n	800233e <__eqdf2+0x56>
 800235c:	465b      	mov	r3, fp
 800235e:	4652      	mov	r2, sl
 8002360:	1a98      	subs	r0, r3, r2
 8002362:	1e43      	subs	r3, r0, #1
 8002364:	4198      	sbcs	r0, r3
 8002366:	e7ea      	b.n	800233e <__eqdf2+0x56>
 8002368:	2000      	movs	r0, #0
 800236a:	e7e8      	b.n	800233e <__eqdf2+0x56>
 800236c:	000007ff 	.word	0x000007ff

08002370 <__gedf2>:
 8002370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002372:	4657      	mov	r7, sl
 8002374:	464e      	mov	r6, r9
 8002376:	4645      	mov	r5, r8
 8002378:	46de      	mov	lr, fp
 800237a:	b5e0      	push	{r5, r6, r7, lr}
 800237c:	000d      	movs	r5, r1
 800237e:	030f      	lsls	r7, r1, #12
 8002380:	0b39      	lsrs	r1, r7, #12
 8002382:	b083      	sub	sp, #12
 8002384:	0004      	movs	r4, r0
 8002386:	4680      	mov	r8, r0
 8002388:	9101      	str	r1, [sp, #4]
 800238a:	0058      	lsls	r0, r3, #1
 800238c:	0fe9      	lsrs	r1, r5, #31
 800238e:	4f31      	ldr	r7, [pc, #196]	@ (8002454 <__gedf2+0xe4>)
 8002390:	0d40      	lsrs	r0, r0, #21
 8002392:	468c      	mov	ip, r1
 8002394:	006e      	lsls	r6, r5, #1
 8002396:	0319      	lsls	r1, r3, #12
 8002398:	4682      	mov	sl, r0
 800239a:	4691      	mov	r9, r2
 800239c:	0d76      	lsrs	r6, r6, #21
 800239e:	0b09      	lsrs	r1, r1, #12
 80023a0:	0fd8      	lsrs	r0, r3, #31
 80023a2:	42be      	cmp	r6, r7
 80023a4:	d01f      	beq.n	80023e6 <__gedf2+0x76>
 80023a6:	45ba      	cmp	sl, r7
 80023a8:	d00f      	beq.n	80023ca <__gedf2+0x5a>
 80023aa:	2e00      	cmp	r6, #0
 80023ac:	d12f      	bne.n	800240e <__gedf2+0x9e>
 80023ae:	4655      	mov	r5, sl
 80023b0:	9e01      	ldr	r6, [sp, #4]
 80023b2:	4334      	orrs	r4, r6
 80023b4:	2d00      	cmp	r5, #0
 80023b6:	d127      	bne.n	8002408 <__gedf2+0x98>
 80023b8:	430a      	orrs	r2, r1
 80023ba:	d03a      	beq.n	8002432 <__gedf2+0xc2>
 80023bc:	2c00      	cmp	r4, #0
 80023be:	d145      	bne.n	800244c <__gedf2+0xdc>
 80023c0:	2800      	cmp	r0, #0
 80023c2:	d11a      	bne.n	80023fa <__gedf2+0x8a>
 80023c4:	2001      	movs	r0, #1
 80023c6:	4240      	negs	r0, r0
 80023c8:	e017      	b.n	80023fa <__gedf2+0x8a>
 80023ca:	4311      	orrs	r1, r2
 80023cc:	d13b      	bne.n	8002446 <__gedf2+0xd6>
 80023ce:	2e00      	cmp	r6, #0
 80023d0:	d102      	bne.n	80023d8 <__gedf2+0x68>
 80023d2:	9f01      	ldr	r7, [sp, #4]
 80023d4:	4327      	orrs	r7, r4
 80023d6:	d0f3      	beq.n	80023c0 <__gedf2+0x50>
 80023d8:	4584      	cmp	ip, r0
 80023da:	d109      	bne.n	80023f0 <__gedf2+0x80>
 80023dc:	4663      	mov	r3, ip
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0f0      	beq.n	80023c4 <__gedf2+0x54>
 80023e2:	4660      	mov	r0, ip
 80023e4:	e009      	b.n	80023fa <__gedf2+0x8a>
 80023e6:	9f01      	ldr	r7, [sp, #4]
 80023e8:	4327      	orrs	r7, r4
 80023ea:	d12c      	bne.n	8002446 <__gedf2+0xd6>
 80023ec:	45b2      	cmp	sl, r6
 80023ee:	d024      	beq.n	800243a <__gedf2+0xca>
 80023f0:	4663      	mov	r3, ip
 80023f2:	2002      	movs	r0, #2
 80023f4:	3b01      	subs	r3, #1
 80023f6:	4018      	ands	r0, r3
 80023f8:	3801      	subs	r0, #1
 80023fa:	b003      	add	sp, #12
 80023fc:	bcf0      	pop	{r4, r5, r6, r7}
 80023fe:	46bb      	mov	fp, r7
 8002400:	46b2      	mov	sl, r6
 8002402:	46a9      	mov	r9, r5
 8002404:	46a0      	mov	r8, r4
 8002406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002408:	2c00      	cmp	r4, #0
 800240a:	d0d9      	beq.n	80023c0 <__gedf2+0x50>
 800240c:	e7e4      	b.n	80023d8 <__gedf2+0x68>
 800240e:	4654      	mov	r4, sl
 8002410:	2c00      	cmp	r4, #0
 8002412:	d0ed      	beq.n	80023f0 <__gedf2+0x80>
 8002414:	4584      	cmp	ip, r0
 8002416:	d1eb      	bne.n	80023f0 <__gedf2+0x80>
 8002418:	4556      	cmp	r6, sl
 800241a:	dce9      	bgt.n	80023f0 <__gedf2+0x80>
 800241c:	dbde      	blt.n	80023dc <__gedf2+0x6c>
 800241e:	9b01      	ldr	r3, [sp, #4]
 8002420:	428b      	cmp	r3, r1
 8002422:	d8e5      	bhi.n	80023f0 <__gedf2+0x80>
 8002424:	d1da      	bne.n	80023dc <__gedf2+0x6c>
 8002426:	45c8      	cmp	r8, r9
 8002428:	d8e2      	bhi.n	80023f0 <__gedf2+0x80>
 800242a:	2000      	movs	r0, #0
 800242c:	45c8      	cmp	r8, r9
 800242e:	d2e4      	bcs.n	80023fa <__gedf2+0x8a>
 8002430:	e7d4      	b.n	80023dc <__gedf2+0x6c>
 8002432:	2000      	movs	r0, #0
 8002434:	2c00      	cmp	r4, #0
 8002436:	d0e0      	beq.n	80023fa <__gedf2+0x8a>
 8002438:	e7da      	b.n	80023f0 <__gedf2+0x80>
 800243a:	4311      	orrs	r1, r2
 800243c:	d103      	bne.n	8002446 <__gedf2+0xd6>
 800243e:	4584      	cmp	ip, r0
 8002440:	d1d6      	bne.n	80023f0 <__gedf2+0x80>
 8002442:	2000      	movs	r0, #0
 8002444:	e7d9      	b.n	80023fa <__gedf2+0x8a>
 8002446:	2002      	movs	r0, #2
 8002448:	4240      	negs	r0, r0
 800244a:	e7d6      	b.n	80023fa <__gedf2+0x8a>
 800244c:	4584      	cmp	ip, r0
 800244e:	d0e6      	beq.n	800241e <__gedf2+0xae>
 8002450:	e7ce      	b.n	80023f0 <__gedf2+0x80>
 8002452:	46c0      	nop			@ (mov r8, r8)
 8002454:	000007ff 	.word	0x000007ff

08002458 <__ledf2>:
 8002458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800245a:	4657      	mov	r7, sl
 800245c:	464e      	mov	r6, r9
 800245e:	4645      	mov	r5, r8
 8002460:	46de      	mov	lr, fp
 8002462:	b5e0      	push	{r5, r6, r7, lr}
 8002464:	000d      	movs	r5, r1
 8002466:	030f      	lsls	r7, r1, #12
 8002468:	0004      	movs	r4, r0
 800246a:	4680      	mov	r8, r0
 800246c:	0fe8      	lsrs	r0, r5, #31
 800246e:	0b39      	lsrs	r1, r7, #12
 8002470:	4684      	mov	ip, r0
 8002472:	b083      	sub	sp, #12
 8002474:	0058      	lsls	r0, r3, #1
 8002476:	4f30      	ldr	r7, [pc, #192]	@ (8002538 <__ledf2+0xe0>)
 8002478:	0d40      	lsrs	r0, r0, #21
 800247a:	9101      	str	r1, [sp, #4]
 800247c:	031e      	lsls	r6, r3, #12
 800247e:	0069      	lsls	r1, r5, #1
 8002480:	4682      	mov	sl, r0
 8002482:	4691      	mov	r9, r2
 8002484:	0d49      	lsrs	r1, r1, #21
 8002486:	0b36      	lsrs	r6, r6, #12
 8002488:	0fd8      	lsrs	r0, r3, #31
 800248a:	42b9      	cmp	r1, r7
 800248c:	d020      	beq.n	80024d0 <__ledf2+0x78>
 800248e:	45ba      	cmp	sl, r7
 8002490:	d00f      	beq.n	80024b2 <__ledf2+0x5a>
 8002492:	2900      	cmp	r1, #0
 8002494:	d12b      	bne.n	80024ee <__ledf2+0x96>
 8002496:	9901      	ldr	r1, [sp, #4]
 8002498:	430c      	orrs	r4, r1
 800249a:	4651      	mov	r1, sl
 800249c:	2900      	cmp	r1, #0
 800249e:	d137      	bne.n	8002510 <__ledf2+0xb8>
 80024a0:	4332      	orrs	r2, r6
 80024a2:	d038      	beq.n	8002516 <__ledf2+0xbe>
 80024a4:	2c00      	cmp	r4, #0
 80024a6:	d144      	bne.n	8002532 <__ledf2+0xda>
 80024a8:	2800      	cmp	r0, #0
 80024aa:	d119      	bne.n	80024e0 <__ledf2+0x88>
 80024ac:	2001      	movs	r0, #1
 80024ae:	4240      	negs	r0, r0
 80024b0:	e016      	b.n	80024e0 <__ledf2+0x88>
 80024b2:	4316      	orrs	r6, r2
 80024b4:	d113      	bne.n	80024de <__ledf2+0x86>
 80024b6:	2900      	cmp	r1, #0
 80024b8:	d102      	bne.n	80024c0 <__ledf2+0x68>
 80024ba:	9f01      	ldr	r7, [sp, #4]
 80024bc:	4327      	orrs	r7, r4
 80024be:	d0f3      	beq.n	80024a8 <__ledf2+0x50>
 80024c0:	4584      	cmp	ip, r0
 80024c2:	d020      	beq.n	8002506 <__ledf2+0xae>
 80024c4:	4663      	mov	r3, ip
 80024c6:	2002      	movs	r0, #2
 80024c8:	3b01      	subs	r3, #1
 80024ca:	4018      	ands	r0, r3
 80024cc:	3801      	subs	r0, #1
 80024ce:	e007      	b.n	80024e0 <__ledf2+0x88>
 80024d0:	9f01      	ldr	r7, [sp, #4]
 80024d2:	4327      	orrs	r7, r4
 80024d4:	d103      	bne.n	80024de <__ledf2+0x86>
 80024d6:	458a      	cmp	sl, r1
 80024d8:	d1f4      	bne.n	80024c4 <__ledf2+0x6c>
 80024da:	4316      	orrs	r6, r2
 80024dc:	d01f      	beq.n	800251e <__ledf2+0xc6>
 80024de:	2002      	movs	r0, #2
 80024e0:	b003      	add	sp, #12
 80024e2:	bcf0      	pop	{r4, r5, r6, r7}
 80024e4:	46bb      	mov	fp, r7
 80024e6:	46b2      	mov	sl, r6
 80024e8:	46a9      	mov	r9, r5
 80024ea:	46a0      	mov	r8, r4
 80024ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ee:	4654      	mov	r4, sl
 80024f0:	2c00      	cmp	r4, #0
 80024f2:	d0e7      	beq.n	80024c4 <__ledf2+0x6c>
 80024f4:	4584      	cmp	ip, r0
 80024f6:	d1e5      	bne.n	80024c4 <__ledf2+0x6c>
 80024f8:	4551      	cmp	r1, sl
 80024fa:	dce3      	bgt.n	80024c4 <__ledf2+0x6c>
 80024fc:	db03      	blt.n	8002506 <__ledf2+0xae>
 80024fe:	9b01      	ldr	r3, [sp, #4]
 8002500:	42b3      	cmp	r3, r6
 8002502:	d8df      	bhi.n	80024c4 <__ledf2+0x6c>
 8002504:	d00f      	beq.n	8002526 <__ledf2+0xce>
 8002506:	4663      	mov	r3, ip
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0cf      	beq.n	80024ac <__ledf2+0x54>
 800250c:	4660      	mov	r0, ip
 800250e:	e7e7      	b.n	80024e0 <__ledf2+0x88>
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0c9      	beq.n	80024a8 <__ledf2+0x50>
 8002514:	e7d4      	b.n	80024c0 <__ledf2+0x68>
 8002516:	2000      	movs	r0, #0
 8002518:	2c00      	cmp	r4, #0
 800251a:	d0e1      	beq.n	80024e0 <__ledf2+0x88>
 800251c:	e7d2      	b.n	80024c4 <__ledf2+0x6c>
 800251e:	4584      	cmp	ip, r0
 8002520:	d1d0      	bne.n	80024c4 <__ledf2+0x6c>
 8002522:	2000      	movs	r0, #0
 8002524:	e7dc      	b.n	80024e0 <__ledf2+0x88>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8cc      	bhi.n	80024c4 <__ledf2+0x6c>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2d7      	bcs.n	80024e0 <__ledf2+0x88>
 8002530:	e7e9      	b.n	8002506 <__ledf2+0xae>
 8002532:	4584      	cmp	ip, r0
 8002534:	d0e3      	beq.n	80024fe <__ledf2+0xa6>
 8002536:	e7c5      	b.n	80024c4 <__ledf2+0x6c>
 8002538:	000007ff 	.word	0x000007ff

0800253c <__aeabi_dmul>:
 800253c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800253e:	4657      	mov	r7, sl
 8002540:	46de      	mov	lr, fp
 8002542:	464e      	mov	r6, r9
 8002544:	4645      	mov	r5, r8
 8002546:	b5e0      	push	{r5, r6, r7, lr}
 8002548:	001f      	movs	r7, r3
 800254a:	030b      	lsls	r3, r1, #12
 800254c:	0b1b      	lsrs	r3, r3, #12
 800254e:	0016      	movs	r6, r2
 8002550:	469a      	mov	sl, r3
 8002552:	0fca      	lsrs	r2, r1, #31
 8002554:	004b      	lsls	r3, r1, #1
 8002556:	0004      	movs	r4, r0
 8002558:	4693      	mov	fp, r2
 800255a:	b087      	sub	sp, #28
 800255c:	0d5b      	lsrs	r3, r3, #21
 800255e:	d100      	bne.n	8002562 <__aeabi_dmul+0x26>
 8002560:	e0d5      	b.n	800270e <__aeabi_dmul+0x1d2>
 8002562:	4abb      	ldr	r2, [pc, #748]	@ (8002850 <__aeabi_dmul+0x314>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d100      	bne.n	800256a <__aeabi_dmul+0x2e>
 8002568:	e0f8      	b.n	800275c <__aeabi_dmul+0x220>
 800256a:	4651      	mov	r1, sl
 800256c:	0f42      	lsrs	r2, r0, #29
 800256e:	00c9      	lsls	r1, r1, #3
 8002570:	430a      	orrs	r2, r1
 8002572:	2180      	movs	r1, #128	@ 0x80
 8002574:	0409      	lsls	r1, r1, #16
 8002576:	4311      	orrs	r1, r2
 8002578:	00c2      	lsls	r2, r0, #3
 800257a:	4691      	mov	r9, r2
 800257c:	4ab5      	ldr	r2, [pc, #724]	@ (8002854 <__aeabi_dmul+0x318>)
 800257e:	468a      	mov	sl, r1
 8002580:	189d      	adds	r5, r3, r2
 8002582:	2300      	movs	r3, #0
 8002584:	4698      	mov	r8, r3
 8002586:	9302      	str	r3, [sp, #8]
 8002588:	033c      	lsls	r4, r7, #12
 800258a:	007b      	lsls	r3, r7, #1
 800258c:	0ffa      	lsrs	r2, r7, #31
 800258e:	0030      	movs	r0, r6
 8002590:	0b24      	lsrs	r4, r4, #12
 8002592:	0d5b      	lsrs	r3, r3, #21
 8002594:	9200      	str	r2, [sp, #0]
 8002596:	d100      	bne.n	800259a <__aeabi_dmul+0x5e>
 8002598:	e096      	b.n	80026c8 <__aeabi_dmul+0x18c>
 800259a:	4aad      	ldr	r2, [pc, #692]	@ (8002850 <__aeabi_dmul+0x314>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d031      	beq.n	8002604 <__aeabi_dmul+0xc8>
 80025a0:	0f72      	lsrs	r2, r6, #29
 80025a2:	00e4      	lsls	r4, r4, #3
 80025a4:	4322      	orrs	r2, r4
 80025a6:	2480      	movs	r4, #128	@ 0x80
 80025a8:	0424      	lsls	r4, r4, #16
 80025aa:	4314      	orrs	r4, r2
 80025ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002854 <__aeabi_dmul+0x318>)
 80025ae:	00f0      	lsls	r0, r6, #3
 80025b0:	4694      	mov	ip, r2
 80025b2:	4463      	add	r3, ip
 80025b4:	195b      	adds	r3, r3, r5
 80025b6:	1c5a      	adds	r2, r3, #1
 80025b8:	9201      	str	r2, [sp, #4]
 80025ba:	4642      	mov	r2, r8
 80025bc:	2600      	movs	r6, #0
 80025be:	2a0a      	cmp	r2, #10
 80025c0:	dc42      	bgt.n	8002648 <__aeabi_dmul+0x10c>
 80025c2:	465a      	mov	r2, fp
 80025c4:	9900      	ldr	r1, [sp, #0]
 80025c6:	404a      	eors	r2, r1
 80025c8:	4693      	mov	fp, r2
 80025ca:	4642      	mov	r2, r8
 80025cc:	2a02      	cmp	r2, #2
 80025ce:	dc32      	bgt.n	8002636 <__aeabi_dmul+0xfa>
 80025d0:	3a01      	subs	r2, #1
 80025d2:	2a01      	cmp	r2, #1
 80025d4:	d900      	bls.n	80025d8 <__aeabi_dmul+0x9c>
 80025d6:	e149      	b.n	800286c <__aeabi_dmul+0x330>
 80025d8:	2e02      	cmp	r6, #2
 80025da:	d100      	bne.n	80025de <__aeabi_dmul+0xa2>
 80025dc:	e0ca      	b.n	8002774 <__aeabi_dmul+0x238>
 80025de:	2e01      	cmp	r6, #1
 80025e0:	d13d      	bne.n	800265e <__aeabi_dmul+0x122>
 80025e2:	2300      	movs	r3, #0
 80025e4:	2400      	movs	r4, #0
 80025e6:	2200      	movs	r2, #0
 80025e8:	0010      	movs	r0, r2
 80025ea:	465a      	mov	r2, fp
 80025ec:	051b      	lsls	r3, r3, #20
 80025ee:	4323      	orrs	r3, r4
 80025f0:	07d2      	lsls	r2, r2, #31
 80025f2:	4313      	orrs	r3, r2
 80025f4:	0019      	movs	r1, r3
 80025f6:	b007      	add	sp, #28
 80025f8:	bcf0      	pop	{r4, r5, r6, r7}
 80025fa:	46bb      	mov	fp, r7
 80025fc:	46b2      	mov	sl, r6
 80025fe:	46a9      	mov	r9, r5
 8002600:	46a0      	mov	r8, r4
 8002602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002604:	4b92      	ldr	r3, [pc, #584]	@ (8002850 <__aeabi_dmul+0x314>)
 8002606:	4326      	orrs	r6, r4
 8002608:	18eb      	adds	r3, r5, r3
 800260a:	2e00      	cmp	r6, #0
 800260c:	d100      	bne.n	8002610 <__aeabi_dmul+0xd4>
 800260e:	e0bb      	b.n	8002788 <__aeabi_dmul+0x24c>
 8002610:	2203      	movs	r2, #3
 8002612:	4641      	mov	r1, r8
 8002614:	4311      	orrs	r1, r2
 8002616:	465a      	mov	r2, fp
 8002618:	4688      	mov	r8, r1
 800261a:	9900      	ldr	r1, [sp, #0]
 800261c:	404a      	eors	r2, r1
 800261e:	2180      	movs	r1, #128	@ 0x80
 8002620:	0109      	lsls	r1, r1, #4
 8002622:	468c      	mov	ip, r1
 8002624:	0029      	movs	r1, r5
 8002626:	4461      	add	r1, ip
 8002628:	9101      	str	r1, [sp, #4]
 800262a:	4641      	mov	r1, r8
 800262c:	290a      	cmp	r1, #10
 800262e:	dd00      	ble.n	8002632 <__aeabi_dmul+0xf6>
 8002630:	e233      	b.n	8002a9a <__aeabi_dmul+0x55e>
 8002632:	4693      	mov	fp, r2
 8002634:	2603      	movs	r6, #3
 8002636:	4642      	mov	r2, r8
 8002638:	2701      	movs	r7, #1
 800263a:	4097      	lsls	r7, r2
 800263c:	21a6      	movs	r1, #166	@ 0xa6
 800263e:	003a      	movs	r2, r7
 8002640:	00c9      	lsls	r1, r1, #3
 8002642:	400a      	ands	r2, r1
 8002644:	420f      	tst	r7, r1
 8002646:	d031      	beq.n	80026ac <__aeabi_dmul+0x170>
 8002648:	9e02      	ldr	r6, [sp, #8]
 800264a:	2e02      	cmp	r6, #2
 800264c:	d100      	bne.n	8002650 <__aeabi_dmul+0x114>
 800264e:	e235      	b.n	8002abc <__aeabi_dmul+0x580>
 8002650:	2e03      	cmp	r6, #3
 8002652:	d100      	bne.n	8002656 <__aeabi_dmul+0x11a>
 8002654:	e1d2      	b.n	80029fc <__aeabi_dmul+0x4c0>
 8002656:	4654      	mov	r4, sl
 8002658:	4648      	mov	r0, r9
 800265a:	2e01      	cmp	r6, #1
 800265c:	d0c1      	beq.n	80025e2 <__aeabi_dmul+0xa6>
 800265e:	9a01      	ldr	r2, [sp, #4]
 8002660:	4b7d      	ldr	r3, [pc, #500]	@ (8002858 <__aeabi_dmul+0x31c>)
 8002662:	4694      	mov	ip, r2
 8002664:	4463      	add	r3, ip
 8002666:	2b00      	cmp	r3, #0
 8002668:	dc00      	bgt.n	800266c <__aeabi_dmul+0x130>
 800266a:	e0c0      	b.n	80027ee <__aeabi_dmul+0x2b2>
 800266c:	0742      	lsls	r2, r0, #29
 800266e:	d009      	beq.n	8002684 <__aeabi_dmul+0x148>
 8002670:	220f      	movs	r2, #15
 8002672:	4002      	ands	r2, r0
 8002674:	2a04      	cmp	r2, #4
 8002676:	d005      	beq.n	8002684 <__aeabi_dmul+0x148>
 8002678:	1d02      	adds	r2, r0, #4
 800267a:	4282      	cmp	r2, r0
 800267c:	4180      	sbcs	r0, r0
 800267e:	4240      	negs	r0, r0
 8002680:	1824      	adds	r4, r4, r0
 8002682:	0010      	movs	r0, r2
 8002684:	01e2      	lsls	r2, r4, #7
 8002686:	d506      	bpl.n	8002696 <__aeabi_dmul+0x15a>
 8002688:	4b74      	ldr	r3, [pc, #464]	@ (800285c <__aeabi_dmul+0x320>)
 800268a:	9a01      	ldr	r2, [sp, #4]
 800268c:	401c      	ands	r4, r3
 800268e:	2380      	movs	r3, #128	@ 0x80
 8002690:	4694      	mov	ip, r2
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	4463      	add	r3, ip
 8002696:	4a72      	ldr	r2, [pc, #456]	@ (8002860 <__aeabi_dmul+0x324>)
 8002698:	4293      	cmp	r3, r2
 800269a:	dc6b      	bgt.n	8002774 <__aeabi_dmul+0x238>
 800269c:	0762      	lsls	r2, r4, #29
 800269e:	08c0      	lsrs	r0, r0, #3
 80026a0:	0264      	lsls	r4, r4, #9
 80026a2:	055b      	lsls	r3, r3, #21
 80026a4:	4302      	orrs	r2, r0
 80026a6:	0b24      	lsrs	r4, r4, #12
 80026a8:	0d5b      	lsrs	r3, r3, #21
 80026aa:	e79d      	b.n	80025e8 <__aeabi_dmul+0xac>
 80026ac:	2190      	movs	r1, #144	@ 0x90
 80026ae:	0089      	lsls	r1, r1, #2
 80026b0:	420f      	tst	r7, r1
 80026b2:	d163      	bne.n	800277c <__aeabi_dmul+0x240>
 80026b4:	2288      	movs	r2, #136	@ 0x88
 80026b6:	423a      	tst	r2, r7
 80026b8:	d100      	bne.n	80026bc <__aeabi_dmul+0x180>
 80026ba:	e0d7      	b.n	800286c <__aeabi_dmul+0x330>
 80026bc:	9b00      	ldr	r3, [sp, #0]
 80026be:	46a2      	mov	sl, r4
 80026c0:	469b      	mov	fp, r3
 80026c2:	4681      	mov	r9, r0
 80026c4:	9602      	str	r6, [sp, #8]
 80026c6:	e7bf      	b.n	8002648 <__aeabi_dmul+0x10c>
 80026c8:	0023      	movs	r3, r4
 80026ca:	4333      	orrs	r3, r6
 80026cc:	d100      	bne.n	80026d0 <__aeabi_dmul+0x194>
 80026ce:	e07f      	b.n	80027d0 <__aeabi_dmul+0x294>
 80026d0:	2c00      	cmp	r4, #0
 80026d2:	d100      	bne.n	80026d6 <__aeabi_dmul+0x19a>
 80026d4:	e1ad      	b.n	8002a32 <__aeabi_dmul+0x4f6>
 80026d6:	0020      	movs	r0, r4
 80026d8:	f000 ff10 	bl	80034fc <__clzsi2>
 80026dc:	0002      	movs	r2, r0
 80026de:	0003      	movs	r3, r0
 80026e0:	3a0b      	subs	r2, #11
 80026e2:	201d      	movs	r0, #29
 80026e4:	0019      	movs	r1, r3
 80026e6:	1a82      	subs	r2, r0, r2
 80026e8:	0030      	movs	r0, r6
 80026ea:	3908      	subs	r1, #8
 80026ec:	40d0      	lsrs	r0, r2
 80026ee:	408c      	lsls	r4, r1
 80026f0:	4304      	orrs	r4, r0
 80026f2:	0030      	movs	r0, r6
 80026f4:	4088      	lsls	r0, r1
 80026f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002864 <__aeabi_dmul+0x328>)
 80026f8:	1aeb      	subs	r3, r5, r3
 80026fa:	4694      	mov	ip, r2
 80026fc:	4463      	add	r3, ip
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	9201      	str	r2, [sp, #4]
 8002702:	4642      	mov	r2, r8
 8002704:	2600      	movs	r6, #0
 8002706:	2a0a      	cmp	r2, #10
 8002708:	dc00      	bgt.n	800270c <__aeabi_dmul+0x1d0>
 800270a:	e75a      	b.n	80025c2 <__aeabi_dmul+0x86>
 800270c:	e79c      	b.n	8002648 <__aeabi_dmul+0x10c>
 800270e:	4653      	mov	r3, sl
 8002710:	4303      	orrs	r3, r0
 8002712:	4699      	mov	r9, r3
 8002714:	d054      	beq.n	80027c0 <__aeabi_dmul+0x284>
 8002716:	4653      	mov	r3, sl
 8002718:	2b00      	cmp	r3, #0
 800271a:	d100      	bne.n	800271e <__aeabi_dmul+0x1e2>
 800271c:	e177      	b.n	8002a0e <__aeabi_dmul+0x4d2>
 800271e:	4650      	mov	r0, sl
 8002720:	f000 feec 	bl	80034fc <__clzsi2>
 8002724:	230b      	movs	r3, #11
 8002726:	425b      	negs	r3, r3
 8002728:	469c      	mov	ip, r3
 800272a:	0002      	movs	r2, r0
 800272c:	4484      	add	ip, r0
 800272e:	0011      	movs	r1, r2
 8002730:	4650      	mov	r0, sl
 8002732:	3908      	subs	r1, #8
 8002734:	4088      	lsls	r0, r1
 8002736:	231d      	movs	r3, #29
 8002738:	4680      	mov	r8, r0
 800273a:	4660      	mov	r0, ip
 800273c:	1a1b      	subs	r3, r3, r0
 800273e:	0020      	movs	r0, r4
 8002740:	40d8      	lsrs	r0, r3
 8002742:	0003      	movs	r3, r0
 8002744:	4640      	mov	r0, r8
 8002746:	4303      	orrs	r3, r0
 8002748:	469a      	mov	sl, r3
 800274a:	0023      	movs	r3, r4
 800274c:	408b      	lsls	r3, r1
 800274e:	4699      	mov	r9, r3
 8002750:	2300      	movs	r3, #0
 8002752:	4d44      	ldr	r5, [pc, #272]	@ (8002864 <__aeabi_dmul+0x328>)
 8002754:	4698      	mov	r8, r3
 8002756:	1aad      	subs	r5, r5, r2
 8002758:	9302      	str	r3, [sp, #8]
 800275a:	e715      	b.n	8002588 <__aeabi_dmul+0x4c>
 800275c:	4652      	mov	r2, sl
 800275e:	4302      	orrs	r2, r0
 8002760:	4691      	mov	r9, r2
 8002762:	d126      	bne.n	80027b2 <__aeabi_dmul+0x276>
 8002764:	2200      	movs	r2, #0
 8002766:	001d      	movs	r5, r3
 8002768:	2302      	movs	r3, #2
 800276a:	4692      	mov	sl, r2
 800276c:	3208      	adds	r2, #8
 800276e:	4690      	mov	r8, r2
 8002770:	9302      	str	r3, [sp, #8]
 8002772:	e709      	b.n	8002588 <__aeabi_dmul+0x4c>
 8002774:	2400      	movs	r4, #0
 8002776:	2200      	movs	r2, #0
 8002778:	4b35      	ldr	r3, [pc, #212]	@ (8002850 <__aeabi_dmul+0x314>)
 800277a:	e735      	b.n	80025e8 <__aeabi_dmul+0xac>
 800277c:	2300      	movs	r3, #0
 800277e:	2480      	movs	r4, #128	@ 0x80
 8002780:	469b      	mov	fp, r3
 8002782:	0324      	lsls	r4, r4, #12
 8002784:	4b32      	ldr	r3, [pc, #200]	@ (8002850 <__aeabi_dmul+0x314>)
 8002786:	e72f      	b.n	80025e8 <__aeabi_dmul+0xac>
 8002788:	2202      	movs	r2, #2
 800278a:	4641      	mov	r1, r8
 800278c:	4311      	orrs	r1, r2
 800278e:	2280      	movs	r2, #128	@ 0x80
 8002790:	0112      	lsls	r2, r2, #4
 8002792:	4694      	mov	ip, r2
 8002794:	002a      	movs	r2, r5
 8002796:	4462      	add	r2, ip
 8002798:	4688      	mov	r8, r1
 800279a:	9201      	str	r2, [sp, #4]
 800279c:	290a      	cmp	r1, #10
 800279e:	dd00      	ble.n	80027a2 <__aeabi_dmul+0x266>
 80027a0:	e752      	b.n	8002648 <__aeabi_dmul+0x10c>
 80027a2:	465a      	mov	r2, fp
 80027a4:	2000      	movs	r0, #0
 80027a6:	9900      	ldr	r1, [sp, #0]
 80027a8:	0004      	movs	r4, r0
 80027aa:	404a      	eors	r2, r1
 80027ac:	4693      	mov	fp, r2
 80027ae:	2602      	movs	r6, #2
 80027b0:	e70b      	b.n	80025ca <__aeabi_dmul+0x8e>
 80027b2:	220c      	movs	r2, #12
 80027b4:	001d      	movs	r5, r3
 80027b6:	2303      	movs	r3, #3
 80027b8:	4681      	mov	r9, r0
 80027ba:	4690      	mov	r8, r2
 80027bc:	9302      	str	r3, [sp, #8]
 80027be:	e6e3      	b.n	8002588 <__aeabi_dmul+0x4c>
 80027c0:	2300      	movs	r3, #0
 80027c2:	469a      	mov	sl, r3
 80027c4:	3304      	adds	r3, #4
 80027c6:	4698      	mov	r8, r3
 80027c8:	3b03      	subs	r3, #3
 80027ca:	2500      	movs	r5, #0
 80027cc:	9302      	str	r3, [sp, #8]
 80027ce:	e6db      	b.n	8002588 <__aeabi_dmul+0x4c>
 80027d0:	4642      	mov	r2, r8
 80027d2:	3301      	adds	r3, #1
 80027d4:	431a      	orrs	r2, r3
 80027d6:	002b      	movs	r3, r5
 80027d8:	4690      	mov	r8, r2
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	9201      	str	r2, [sp, #4]
 80027de:	4642      	mov	r2, r8
 80027e0:	2400      	movs	r4, #0
 80027e2:	2000      	movs	r0, #0
 80027e4:	2601      	movs	r6, #1
 80027e6:	2a0a      	cmp	r2, #10
 80027e8:	dc00      	bgt.n	80027ec <__aeabi_dmul+0x2b0>
 80027ea:	e6ea      	b.n	80025c2 <__aeabi_dmul+0x86>
 80027ec:	e72c      	b.n	8002648 <__aeabi_dmul+0x10c>
 80027ee:	2201      	movs	r2, #1
 80027f0:	1ad2      	subs	r2, r2, r3
 80027f2:	2a38      	cmp	r2, #56	@ 0x38
 80027f4:	dd00      	ble.n	80027f8 <__aeabi_dmul+0x2bc>
 80027f6:	e6f4      	b.n	80025e2 <__aeabi_dmul+0xa6>
 80027f8:	2a1f      	cmp	r2, #31
 80027fa:	dc00      	bgt.n	80027fe <__aeabi_dmul+0x2c2>
 80027fc:	e12a      	b.n	8002a54 <__aeabi_dmul+0x518>
 80027fe:	211f      	movs	r1, #31
 8002800:	4249      	negs	r1, r1
 8002802:	1acb      	subs	r3, r1, r3
 8002804:	0021      	movs	r1, r4
 8002806:	40d9      	lsrs	r1, r3
 8002808:	000b      	movs	r3, r1
 800280a:	2a20      	cmp	r2, #32
 800280c:	d005      	beq.n	800281a <__aeabi_dmul+0x2de>
 800280e:	4a16      	ldr	r2, [pc, #88]	@ (8002868 <__aeabi_dmul+0x32c>)
 8002810:	9d01      	ldr	r5, [sp, #4]
 8002812:	4694      	mov	ip, r2
 8002814:	4465      	add	r5, ip
 8002816:	40ac      	lsls	r4, r5
 8002818:	4320      	orrs	r0, r4
 800281a:	1e42      	subs	r2, r0, #1
 800281c:	4190      	sbcs	r0, r2
 800281e:	4318      	orrs	r0, r3
 8002820:	2307      	movs	r3, #7
 8002822:	0019      	movs	r1, r3
 8002824:	2400      	movs	r4, #0
 8002826:	4001      	ands	r1, r0
 8002828:	4203      	tst	r3, r0
 800282a:	d00c      	beq.n	8002846 <__aeabi_dmul+0x30a>
 800282c:	230f      	movs	r3, #15
 800282e:	4003      	ands	r3, r0
 8002830:	2b04      	cmp	r3, #4
 8002832:	d100      	bne.n	8002836 <__aeabi_dmul+0x2fa>
 8002834:	e140      	b.n	8002ab8 <__aeabi_dmul+0x57c>
 8002836:	1d03      	adds	r3, r0, #4
 8002838:	4283      	cmp	r3, r0
 800283a:	41a4      	sbcs	r4, r4
 800283c:	0018      	movs	r0, r3
 800283e:	4264      	negs	r4, r4
 8002840:	0761      	lsls	r1, r4, #29
 8002842:	0264      	lsls	r4, r4, #9
 8002844:	0b24      	lsrs	r4, r4, #12
 8002846:	08c2      	lsrs	r2, r0, #3
 8002848:	2300      	movs	r3, #0
 800284a:	430a      	orrs	r2, r1
 800284c:	e6cc      	b.n	80025e8 <__aeabi_dmul+0xac>
 800284e:	46c0      	nop			@ (mov r8, r8)
 8002850:	000007ff 	.word	0x000007ff
 8002854:	fffffc01 	.word	0xfffffc01
 8002858:	000003ff 	.word	0x000003ff
 800285c:	feffffff 	.word	0xfeffffff
 8002860:	000007fe 	.word	0x000007fe
 8002864:	fffffc0d 	.word	0xfffffc0d
 8002868:	0000043e 	.word	0x0000043e
 800286c:	4649      	mov	r1, r9
 800286e:	464a      	mov	r2, r9
 8002870:	0409      	lsls	r1, r1, #16
 8002872:	0c09      	lsrs	r1, r1, #16
 8002874:	000d      	movs	r5, r1
 8002876:	0c16      	lsrs	r6, r2, #16
 8002878:	0c02      	lsrs	r2, r0, #16
 800287a:	0400      	lsls	r0, r0, #16
 800287c:	0c00      	lsrs	r0, r0, #16
 800287e:	4345      	muls	r5, r0
 8002880:	46ac      	mov	ip, r5
 8002882:	0005      	movs	r5, r0
 8002884:	4375      	muls	r5, r6
 8002886:	46a8      	mov	r8, r5
 8002888:	0015      	movs	r5, r2
 800288a:	000f      	movs	r7, r1
 800288c:	4375      	muls	r5, r6
 800288e:	9200      	str	r2, [sp, #0]
 8002890:	9502      	str	r5, [sp, #8]
 8002892:	002a      	movs	r2, r5
 8002894:	9d00      	ldr	r5, [sp, #0]
 8002896:	436f      	muls	r7, r5
 8002898:	4665      	mov	r5, ip
 800289a:	0c2d      	lsrs	r5, r5, #16
 800289c:	46a9      	mov	r9, r5
 800289e:	4447      	add	r7, r8
 80028a0:	444f      	add	r7, r9
 80028a2:	45b8      	cmp	r8, r7
 80028a4:	d905      	bls.n	80028b2 <__aeabi_dmul+0x376>
 80028a6:	0015      	movs	r5, r2
 80028a8:	2280      	movs	r2, #128	@ 0x80
 80028aa:	0252      	lsls	r2, r2, #9
 80028ac:	4690      	mov	r8, r2
 80028ae:	4445      	add	r5, r8
 80028b0:	9502      	str	r5, [sp, #8]
 80028b2:	0c3d      	lsrs	r5, r7, #16
 80028b4:	9503      	str	r5, [sp, #12]
 80028b6:	4665      	mov	r5, ip
 80028b8:	042d      	lsls	r5, r5, #16
 80028ba:	043f      	lsls	r7, r7, #16
 80028bc:	0c2d      	lsrs	r5, r5, #16
 80028be:	46ac      	mov	ip, r5
 80028c0:	003d      	movs	r5, r7
 80028c2:	4465      	add	r5, ip
 80028c4:	9504      	str	r5, [sp, #16]
 80028c6:	0c25      	lsrs	r5, r4, #16
 80028c8:	0424      	lsls	r4, r4, #16
 80028ca:	0c24      	lsrs	r4, r4, #16
 80028cc:	46ac      	mov	ip, r5
 80028ce:	0025      	movs	r5, r4
 80028d0:	4375      	muls	r5, r6
 80028d2:	46a8      	mov	r8, r5
 80028d4:	4665      	mov	r5, ip
 80028d6:	000f      	movs	r7, r1
 80028d8:	4369      	muls	r1, r5
 80028da:	4441      	add	r1, r8
 80028dc:	4689      	mov	r9, r1
 80028de:	4367      	muls	r7, r4
 80028e0:	0c39      	lsrs	r1, r7, #16
 80028e2:	4449      	add	r1, r9
 80028e4:	436e      	muls	r6, r5
 80028e6:	4588      	cmp	r8, r1
 80028e8:	d903      	bls.n	80028f2 <__aeabi_dmul+0x3b6>
 80028ea:	2280      	movs	r2, #128	@ 0x80
 80028ec:	0252      	lsls	r2, r2, #9
 80028ee:	4690      	mov	r8, r2
 80028f0:	4446      	add	r6, r8
 80028f2:	0c0d      	lsrs	r5, r1, #16
 80028f4:	46a8      	mov	r8, r5
 80028f6:	0035      	movs	r5, r6
 80028f8:	4445      	add	r5, r8
 80028fa:	9505      	str	r5, [sp, #20]
 80028fc:	9d03      	ldr	r5, [sp, #12]
 80028fe:	043f      	lsls	r7, r7, #16
 8002900:	46a8      	mov	r8, r5
 8002902:	0c3f      	lsrs	r7, r7, #16
 8002904:	0409      	lsls	r1, r1, #16
 8002906:	19c9      	adds	r1, r1, r7
 8002908:	4488      	add	r8, r1
 800290a:	4645      	mov	r5, r8
 800290c:	9503      	str	r5, [sp, #12]
 800290e:	4655      	mov	r5, sl
 8002910:	042e      	lsls	r6, r5, #16
 8002912:	0c36      	lsrs	r6, r6, #16
 8002914:	0c2f      	lsrs	r7, r5, #16
 8002916:	0035      	movs	r5, r6
 8002918:	4345      	muls	r5, r0
 800291a:	4378      	muls	r0, r7
 800291c:	4681      	mov	r9, r0
 800291e:	0038      	movs	r0, r7
 8002920:	46a8      	mov	r8, r5
 8002922:	0c2d      	lsrs	r5, r5, #16
 8002924:	46aa      	mov	sl, r5
 8002926:	9a00      	ldr	r2, [sp, #0]
 8002928:	4350      	muls	r0, r2
 800292a:	4372      	muls	r2, r6
 800292c:	444a      	add	r2, r9
 800292e:	4452      	add	r2, sl
 8002930:	4591      	cmp	r9, r2
 8002932:	d903      	bls.n	800293c <__aeabi_dmul+0x400>
 8002934:	2580      	movs	r5, #128	@ 0x80
 8002936:	026d      	lsls	r5, r5, #9
 8002938:	46a9      	mov	r9, r5
 800293a:	4448      	add	r0, r9
 800293c:	0c15      	lsrs	r5, r2, #16
 800293e:	46a9      	mov	r9, r5
 8002940:	4645      	mov	r5, r8
 8002942:	042d      	lsls	r5, r5, #16
 8002944:	0c2d      	lsrs	r5, r5, #16
 8002946:	46a8      	mov	r8, r5
 8002948:	4665      	mov	r5, ip
 800294a:	437d      	muls	r5, r7
 800294c:	0412      	lsls	r2, r2, #16
 800294e:	4448      	add	r0, r9
 8002950:	4490      	add	r8, r2
 8002952:	46a9      	mov	r9, r5
 8002954:	0032      	movs	r2, r6
 8002956:	4665      	mov	r5, ip
 8002958:	4362      	muls	r2, r4
 800295a:	436e      	muls	r6, r5
 800295c:	437c      	muls	r4, r7
 800295e:	0c17      	lsrs	r7, r2, #16
 8002960:	1936      	adds	r6, r6, r4
 8002962:	19bf      	adds	r7, r7, r6
 8002964:	42bc      	cmp	r4, r7
 8002966:	d903      	bls.n	8002970 <__aeabi_dmul+0x434>
 8002968:	2480      	movs	r4, #128	@ 0x80
 800296a:	0264      	lsls	r4, r4, #9
 800296c:	46a4      	mov	ip, r4
 800296e:	44e1      	add	r9, ip
 8002970:	9c02      	ldr	r4, [sp, #8]
 8002972:	9e03      	ldr	r6, [sp, #12]
 8002974:	46a4      	mov	ip, r4
 8002976:	9d05      	ldr	r5, [sp, #20]
 8002978:	4466      	add	r6, ip
 800297a:	428e      	cmp	r6, r1
 800297c:	4189      	sbcs	r1, r1
 800297e:	46ac      	mov	ip, r5
 8002980:	0412      	lsls	r2, r2, #16
 8002982:	043c      	lsls	r4, r7, #16
 8002984:	0c12      	lsrs	r2, r2, #16
 8002986:	18a2      	adds	r2, r4, r2
 8002988:	4462      	add	r2, ip
 800298a:	4249      	negs	r1, r1
 800298c:	1854      	adds	r4, r2, r1
 800298e:	4446      	add	r6, r8
 8002990:	46a4      	mov	ip, r4
 8002992:	4546      	cmp	r6, r8
 8002994:	41a4      	sbcs	r4, r4
 8002996:	4682      	mov	sl, r0
 8002998:	4264      	negs	r4, r4
 800299a:	46a0      	mov	r8, r4
 800299c:	42aa      	cmp	r2, r5
 800299e:	4192      	sbcs	r2, r2
 80029a0:	458c      	cmp	ip, r1
 80029a2:	4189      	sbcs	r1, r1
 80029a4:	44e2      	add	sl, ip
 80029a6:	44d0      	add	r8, sl
 80029a8:	4249      	negs	r1, r1
 80029aa:	4252      	negs	r2, r2
 80029ac:	430a      	orrs	r2, r1
 80029ae:	45a0      	cmp	r8, r4
 80029b0:	41a4      	sbcs	r4, r4
 80029b2:	4582      	cmp	sl, r0
 80029b4:	4189      	sbcs	r1, r1
 80029b6:	4264      	negs	r4, r4
 80029b8:	4249      	negs	r1, r1
 80029ba:	430c      	orrs	r4, r1
 80029bc:	4641      	mov	r1, r8
 80029be:	0c3f      	lsrs	r7, r7, #16
 80029c0:	19d2      	adds	r2, r2, r7
 80029c2:	1912      	adds	r2, r2, r4
 80029c4:	0dcc      	lsrs	r4, r1, #23
 80029c6:	9904      	ldr	r1, [sp, #16]
 80029c8:	0270      	lsls	r0, r6, #9
 80029ca:	4308      	orrs	r0, r1
 80029cc:	1e41      	subs	r1, r0, #1
 80029ce:	4188      	sbcs	r0, r1
 80029d0:	4641      	mov	r1, r8
 80029d2:	444a      	add	r2, r9
 80029d4:	0df6      	lsrs	r6, r6, #23
 80029d6:	0252      	lsls	r2, r2, #9
 80029d8:	4330      	orrs	r0, r6
 80029da:	0249      	lsls	r1, r1, #9
 80029dc:	4314      	orrs	r4, r2
 80029de:	4308      	orrs	r0, r1
 80029e0:	01d2      	lsls	r2, r2, #7
 80029e2:	d535      	bpl.n	8002a50 <__aeabi_dmul+0x514>
 80029e4:	2201      	movs	r2, #1
 80029e6:	0843      	lsrs	r3, r0, #1
 80029e8:	4002      	ands	r2, r0
 80029ea:	4313      	orrs	r3, r2
 80029ec:	07e0      	lsls	r0, r4, #31
 80029ee:	4318      	orrs	r0, r3
 80029f0:	0864      	lsrs	r4, r4, #1
 80029f2:	e634      	b.n	800265e <__aeabi_dmul+0x122>
 80029f4:	9b00      	ldr	r3, [sp, #0]
 80029f6:	46a2      	mov	sl, r4
 80029f8:	469b      	mov	fp, r3
 80029fa:	4681      	mov	r9, r0
 80029fc:	2480      	movs	r4, #128	@ 0x80
 80029fe:	4653      	mov	r3, sl
 8002a00:	0324      	lsls	r4, r4, #12
 8002a02:	431c      	orrs	r4, r3
 8002a04:	0324      	lsls	r4, r4, #12
 8002a06:	464a      	mov	r2, r9
 8002a08:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac4 <__aeabi_dmul+0x588>)
 8002a0a:	0b24      	lsrs	r4, r4, #12
 8002a0c:	e5ec      	b.n	80025e8 <__aeabi_dmul+0xac>
 8002a0e:	f000 fd75 	bl	80034fc <__clzsi2>
 8002a12:	2315      	movs	r3, #21
 8002a14:	469c      	mov	ip, r3
 8002a16:	4484      	add	ip, r0
 8002a18:	0002      	movs	r2, r0
 8002a1a:	4663      	mov	r3, ip
 8002a1c:	3220      	adds	r2, #32
 8002a1e:	2b1c      	cmp	r3, #28
 8002a20:	dc00      	bgt.n	8002a24 <__aeabi_dmul+0x4e8>
 8002a22:	e684      	b.n	800272e <__aeabi_dmul+0x1f2>
 8002a24:	2300      	movs	r3, #0
 8002a26:	4699      	mov	r9, r3
 8002a28:	0023      	movs	r3, r4
 8002a2a:	3808      	subs	r0, #8
 8002a2c:	4083      	lsls	r3, r0
 8002a2e:	469a      	mov	sl, r3
 8002a30:	e68e      	b.n	8002750 <__aeabi_dmul+0x214>
 8002a32:	f000 fd63 	bl	80034fc <__clzsi2>
 8002a36:	0002      	movs	r2, r0
 8002a38:	0003      	movs	r3, r0
 8002a3a:	3215      	adds	r2, #21
 8002a3c:	3320      	adds	r3, #32
 8002a3e:	2a1c      	cmp	r2, #28
 8002a40:	dc00      	bgt.n	8002a44 <__aeabi_dmul+0x508>
 8002a42:	e64e      	b.n	80026e2 <__aeabi_dmul+0x1a6>
 8002a44:	0002      	movs	r2, r0
 8002a46:	0034      	movs	r4, r6
 8002a48:	3a08      	subs	r2, #8
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	4094      	lsls	r4, r2
 8002a4e:	e652      	b.n	80026f6 <__aeabi_dmul+0x1ba>
 8002a50:	9301      	str	r3, [sp, #4]
 8002a52:	e604      	b.n	800265e <__aeabi_dmul+0x122>
 8002a54:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac8 <__aeabi_dmul+0x58c>)
 8002a56:	0021      	movs	r1, r4
 8002a58:	469c      	mov	ip, r3
 8002a5a:	0003      	movs	r3, r0
 8002a5c:	9d01      	ldr	r5, [sp, #4]
 8002a5e:	40d3      	lsrs	r3, r2
 8002a60:	4465      	add	r5, ip
 8002a62:	40a9      	lsls	r1, r5
 8002a64:	4319      	orrs	r1, r3
 8002a66:	0003      	movs	r3, r0
 8002a68:	40ab      	lsls	r3, r5
 8002a6a:	1e58      	subs	r0, r3, #1
 8002a6c:	4183      	sbcs	r3, r0
 8002a6e:	4319      	orrs	r1, r3
 8002a70:	0008      	movs	r0, r1
 8002a72:	40d4      	lsrs	r4, r2
 8002a74:	074b      	lsls	r3, r1, #29
 8002a76:	d009      	beq.n	8002a8c <__aeabi_dmul+0x550>
 8002a78:	230f      	movs	r3, #15
 8002a7a:	400b      	ands	r3, r1
 8002a7c:	2b04      	cmp	r3, #4
 8002a7e:	d005      	beq.n	8002a8c <__aeabi_dmul+0x550>
 8002a80:	1d0b      	adds	r3, r1, #4
 8002a82:	428b      	cmp	r3, r1
 8002a84:	4180      	sbcs	r0, r0
 8002a86:	4240      	negs	r0, r0
 8002a88:	1824      	adds	r4, r4, r0
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	0223      	lsls	r3, r4, #8
 8002a8e:	d400      	bmi.n	8002a92 <__aeabi_dmul+0x556>
 8002a90:	e6d6      	b.n	8002840 <__aeabi_dmul+0x304>
 8002a92:	2301      	movs	r3, #1
 8002a94:	2400      	movs	r4, #0
 8002a96:	2200      	movs	r2, #0
 8002a98:	e5a6      	b.n	80025e8 <__aeabi_dmul+0xac>
 8002a9a:	290f      	cmp	r1, #15
 8002a9c:	d1aa      	bne.n	80029f4 <__aeabi_dmul+0x4b8>
 8002a9e:	2380      	movs	r3, #128	@ 0x80
 8002aa0:	4652      	mov	r2, sl
 8002aa2:	031b      	lsls	r3, r3, #12
 8002aa4:	421a      	tst	r2, r3
 8002aa6:	d0a9      	beq.n	80029fc <__aeabi_dmul+0x4c0>
 8002aa8:	421c      	tst	r4, r3
 8002aaa:	d1a7      	bne.n	80029fc <__aeabi_dmul+0x4c0>
 8002aac:	431c      	orrs	r4, r3
 8002aae:	9b00      	ldr	r3, [sp, #0]
 8002ab0:	0002      	movs	r2, r0
 8002ab2:	469b      	mov	fp, r3
 8002ab4:	4b03      	ldr	r3, [pc, #12]	@ (8002ac4 <__aeabi_dmul+0x588>)
 8002ab6:	e597      	b.n	80025e8 <__aeabi_dmul+0xac>
 8002ab8:	2400      	movs	r4, #0
 8002aba:	e6c1      	b.n	8002840 <__aeabi_dmul+0x304>
 8002abc:	2400      	movs	r4, #0
 8002abe:	4b01      	ldr	r3, [pc, #4]	@ (8002ac4 <__aeabi_dmul+0x588>)
 8002ac0:	0022      	movs	r2, r4
 8002ac2:	e591      	b.n	80025e8 <__aeabi_dmul+0xac>
 8002ac4:	000007ff 	.word	0x000007ff
 8002ac8:	0000041e 	.word	0x0000041e

08002acc <__aeabi_dsub>:
 8002acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ace:	464e      	mov	r6, r9
 8002ad0:	4645      	mov	r5, r8
 8002ad2:	46de      	mov	lr, fp
 8002ad4:	4657      	mov	r7, sl
 8002ad6:	b5e0      	push	{r5, r6, r7, lr}
 8002ad8:	b085      	sub	sp, #20
 8002ada:	9000      	str	r0, [sp, #0]
 8002adc:	9101      	str	r1, [sp, #4]
 8002ade:	030c      	lsls	r4, r1, #12
 8002ae0:	004f      	lsls	r7, r1, #1
 8002ae2:	0fce      	lsrs	r6, r1, #31
 8002ae4:	0a61      	lsrs	r1, r4, #9
 8002ae6:	9c00      	ldr	r4, [sp, #0]
 8002ae8:	46b0      	mov	r8, r6
 8002aea:	0f64      	lsrs	r4, r4, #29
 8002aec:	430c      	orrs	r4, r1
 8002aee:	9900      	ldr	r1, [sp, #0]
 8002af0:	0d7f      	lsrs	r7, r7, #21
 8002af2:	00c8      	lsls	r0, r1, #3
 8002af4:	0011      	movs	r1, r2
 8002af6:	001a      	movs	r2, r3
 8002af8:	031b      	lsls	r3, r3, #12
 8002afa:	469c      	mov	ip, r3
 8002afc:	9100      	str	r1, [sp, #0]
 8002afe:	9201      	str	r2, [sp, #4]
 8002b00:	0051      	lsls	r1, r2, #1
 8002b02:	0d4b      	lsrs	r3, r1, #21
 8002b04:	4699      	mov	r9, r3
 8002b06:	9b01      	ldr	r3, [sp, #4]
 8002b08:	9d00      	ldr	r5, [sp, #0]
 8002b0a:	0fd9      	lsrs	r1, r3, #31
 8002b0c:	4663      	mov	r3, ip
 8002b0e:	0f6a      	lsrs	r2, r5, #29
 8002b10:	0a5b      	lsrs	r3, r3, #9
 8002b12:	4313      	orrs	r3, r2
 8002b14:	00ea      	lsls	r2, r5, #3
 8002b16:	4694      	mov	ip, r2
 8002b18:	4693      	mov	fp, r2
 8002b1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002e20 <__aeabi_dsub+0x354>)
 8002b1c:	9003      	str	r0, [sp, #12]
 8002b1e:	9302      	str	r3, [sp, #8]
 8002b20:	4591      	cmp	r9, r2
 8002b22:	d100      	bne.n	8002b26 <__aeabi_dsub+0x5a>
 8002b24:	e0cd      	b.n	8002cc2 <__aeabi_dsub+0x1f6>
 8002b26:	2501      	movs	r5, #1
 8002b28:	4069      	eors	r1, r5
 8002b2a:	464d      	mov	r5, r9
 8002b2c:	1b7d      	subs	r5, r7, r5
 8002b2e:	46aa      	mov	sl, r5
 8002b30:	428e      	cmp	r6, r1
 8002b32:	d100      	bne.n	8002b36 <__aeabi_dsub+0x6a>
 8002b34:	e080      	b.n	8002c38 <__aeabi_dsub+0x16c>
 8002b36:	2d00      	cmp	r5, #0
 8002b38:	dc00      	bgt.n	8002b3c <__aeabi_dsub+0x70>
 8002b3a:	e335      	b.n	80031a8 <__aeabi_dsub+0x6dc>
 8002b3c:	4649      	mov	r1, r9
 8002b3e:	2900      	cmp	r1, #0
 8002b40:	d100      	bne.n	8002b44 <__aeabi_dsub+0x78>
 8002b42:	e0df      	b.n	8002d04 <__aeabi_dsub+0x238>
 8002b44:	4297      	cmp	r7, r2
 8002b46:	d100      	bne.n	8002b4a <__aeabi_dsub+0x7e>
 8002b48:	e194      	b.n	8002e74 <__aeabi_dsub+0x3a8>
 8002b4a:	4652      	mov	r2, sl
 8002b4c:	2501      	movs	r5, #1
 8002b4e:	2a38      	cmp	r2, #56	@ 0x38
 8002b50:	dc19      	bgt.n	8002b86 <__aeabi_dsub+0xba>
 8002b52:	2280      	movs	r2, #128	@ 0x80
 8002b54:	9b02      	ldr	r3, [sp, #8]
 8002b56:	0412      	lsls	r2, r2, #16
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	9302      	str	r3, [sp, #8]
 8002b5c:	4652      	mov	r2, sl
 8002b5e:	2a1f      	cmp	r2, #31
 8002b60:	dd00      	ble.n	8002b64 <__aeabi_dsub+0x98>
 8002b62:	e1e3      	b.n	8002f2c <__aeabi_dsub+0x460>
 8002b64:	4653      	mov	r3, sl
 8002b66:	2220      	movs	r2, #32
 8002b68:	4661      	mov	r1, ip
 8002b6a:	9d02      	ldr	r5, [sp, #8]
 8002b6c:	1ad2      	subs	r2, r2, r3
 8002b6e:	4095      	lsls	r5, r2
 8002b70:	40d9      	lsrs	r1, r3
 8002b72:	430d      	orrs	r5, r1
 8002b74:	4661      	mov	r1, ip
 8002b76:	4091      	lsls	r1, r2
 8002b78:	000a      	movs	r2, r1
 8002b7a:	1e51      	subs	r1, r2, #1
 8002b7c:	418a      	sbcs	r2, r1
 8002b7e:	4315      	orrs	r5, r2
 8002b80:	9a02      	ldr	r2, [sp, #8]
 8002b82:	40da      	lsrs	r2, r3
 8002b84:	1aa4      	subs	r4, r4, r2
 8002b86:	1b45      	subs	r5, r0, r5
 8002b88:	42a8      	cmp	r0, r5
 8002b8a:	4180      	sbcs	r0, r0
 8002b8c:	4240      	negs	r0, r0
 8002b8e:	1a24      	subs	r4, r4, r0
 8002b90:	0223      	lsls	r3, r4, #8
 8002b92:	d400      	bmi.n	8002b96 <__aeabi_dsub+0xca>
 8002b94:	e13d      	b.n	8002e12 <__aeabi_dsub+0x346>
 8002b96:	0264      	lsls	r4, r4, #9
 8002b98:	0a64      	lsrs	r4, r4, #9
 8002b9a:	2c00      	cmp	r4, #0
 8002b9c:	d100      	bne.n	8002ba0 <__aeabi_dsub+0xd4>
 8002b9e:	e147      	b.n	8002e30 <__aeabi_dsub+0x364>
 8002ba0:	0020      	movs	r0, r4
 8002ba2:	f000 fcab 	bl	80034fc <__clzsi2>
 8002ba6:	0003      	movs	r3, r0
 8002ba8:	3b08      	subs	r3, #8
 8002baa:	2120      	movs	r1, #32
 8002bac:	0028      	movs	r0, r5
 8002bae:	1aca      	subs	r2, r1, r3
 8002bb0:	40d0      	lsrs	r0, r2
 8002bb2:	409c      	lsls	r4, r3
 8002bb4:	0002      	movs	r2, r0
 8002bb6:	409d      	lsls	r5, r3
 8002bb8:	4322      	orrs	r2, r4
 8002bba:	429f      	cmp	r7, r3
 8002bbc:	dd00      	ble.n	8002bc0 <__aeabi_dsub+0xf4>
 8002bbe:	e177      	b.n	8002eb0 <__aeabi_dsub+0x3e4>
 8002bc0:	1bd8      	subs	r0, r3, r7
 8002bc2:	3001      	adds	r0, #1
 8002bc4:	1a09      	subs	r1, r1, r0
 8002bc6:	002c      	movs	r4, r5
 8002bc8:	408d      	lsls	r5, r1
 8002bca:	40c4      	lsrs	r4, r0
 8002bcc:	1e6b      	subs	r3, r5, #1
 8002bce:	419d      	sbcs	r5, r3
 8002bd0:	0013      	movs	r3, r2
 8002bd2:	40c2      	lsrs	r2, r0
 8002bd4:	408b      	lsls	r3, r1
 8002bd6:	4325      	orrs	r5, r4
 8002bd8:	2700      	movs	r7, #0
 8002bda:	0014      	movs	r4, r2
 8002bdc:	431d      	orrs	r5, r3
 8002bde:	076b      	lsls	r3, r5, #29
 8002be0:	d009      	beq.n	8002bf6 <__aeabi_dsub+0x12a>
 8002be2:	230f      	movs	r3, #15
 8002be4:	402b      	ands	r3, r5
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d005      	beq.n	8002bf6 <__aeabi_dsub+0x12a>
 8002bea:	1d2b      	adds	r3, r5, #4
 8002bec:	42ab      	cmp	r3, r5
 8002bee:	41ad      	sbcs	r5, r5
 8002bf0:	426d      	negs	r5, r5
 8002bf2:	1964      	adds	r4, r4, r5
 8002bf4:	001d      	movs	r5, r3
 8002bf6:	0223      	lsls	r3, r4, #8
 8002bf8:	d400      	bmi.n	8002bfc <__aeabi_dsub+0x130>
 8002bfa:	e140      	b.n	8002e7e <__aeabi_dsub+0x3b2>
 8002bfc:	4a88      	ldr	r2, [pc, #544]	@ (8002e20 <__aeabi_dsub+0x354>)
 8002bfe:	3701      	adds	r7, #1
 8002c00:	4297      	cmp	r7, r2
 8002c02:	d100      	bne.n	8002c06 <__aeabi_dsub+0x13a>
 8002c04:	e101      	b.n	8002e0a <__aeabi_dsub+0x33e>
 8002c06:	2601      	movs	r6, #1
 8002c08:	4643      	mov	r3, r8
 8002c0a:	4986      	ldr	r1, [pc, #536]	@ (8002e24 <__aeabi_dsub+0x358>)
 8002c0c:	08ed      	lsrs	r5, r5, #3
 8002c0e:	4021      	ands	r1, r4
 8002c10:	074a      	lsls	r2, r1, #29
 8002c12:	432a      	orrs	r2, r5
 8002c14:	057c      	lsls	r4, r7, #21
 8002c16:	024d      	lsls	r5, r1, #9
 8002c18:	0b2d      	lsrs	r5, r5, #12
 8002c1a:	0d64      	lsrs	r4, r4, #21
 8002c1c:	401e      	ands	r6, r3
 8002c1e:	0524      	lsls	r4, r4, #20
 8002c20:	432c      	orrs	r4, r5
 8002c22:	07f6      	lsls	r6, r6, #31
 8002c24:	4334      	orrs	r4, r6
 8002c26:	0010      	movs	r0, r2
 8002c28:	0021      	movs	r1, r4
 8002c2a:	b005      	add	sp, #20
 8002c2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002c2e:	46bb      	mov	fp, r7
 8002c30:	46b2      	mov	sl, r6
 8002c32:	46a9      	mov	r9, r5
 8002c34:	46a0      	mov	r8, r4
 8002c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c38:	2d00      	cmp	r5, #0
 8002c3a:	dc00      	bgt.n	8002c3e <__aeabi_dsub+0x172>
 8002c3c:	e2d0      	b.n	80031e0 <__aeabi_dsub+0x714>
 8002c3e:	4649      	mov	r1, r9
 8002c40:	2900      	cmp	r1, #0
 8002c42:	d000      	beq.n	8002c46 <__aeabi_dsub+0x17a>
 8002c44:	e0d4      	b.n	8002df0 <__aeabi_dsub+0x324>
 8002c46:	4661      	mov	r1, ip
 8002c48:	9b02      	ldr	r3, [sp, #8]
 8002c4a:	4319      	orrs	r1, r3
 8002c4c:	d100      	bne.n	8002c50 <__aeabi_dsub+0x184>
 8002c4e:	e12b      	b.n	8002ea8 <__aeabi_dsub+0x3dc>
 8002c50:	1e69      	subs	r1, r5, #1
 8002c52:	2d01      	cmp	r5, #1
 8002c54:	d100      	bne.n	8002c58 <__aeabi_dsub+0x18c>
 8002c56:	e1d9      	b.n	800300c <__aeabi_dsub+0x540>
 8002c58:	4295      	cmp	r5, r2
 8002c5a:	d100      	bne.n	8002c5e <__aeabi_dsub+0x192>
 8002c5c:	e10a      	b.n	8002e74 <__aeabi_dsub+0x3a8>
 8002c5e:	2501      	movs	r5, #1
 8002c60:	2938      	cmp	r1, #56	@ 0x38
 8002c62:	dc17      	bgt.n	8002c94 <__aeabi_dsub+0x1c8>
 8002c64:	468a      	mov	sl, r1
 8002c66:	4653      	mov	r3, sl
 8002c68:	2b1f      	cmp	r3, #31
 8002c6a:	dd00      	ble.n	8002c6e <__aeabi_dsub+0x1a2>
 8002c6c:	e1e7      	b.n	800303e <__aeabi_dsub+0x572>
 8002c6e:	2220      	movs	r2, #32
 8002c70:	1ad2      	subs	r2, r2, r3
 8002c72:	9b02      	ldr	r3, [sp, #8]
 8002c74:	4661      	mov	r1, ip
 8002c76:	4093      	lsls	r3, r2
 8002c78:	001d      	movs	r5, r3
 8002c7a:	4653      	mov	r3, sl
 8002c7c:	40d9      	lsrs	r1, r3
 8002c7e:	4663      	mov	r3, ip
 8002c80:	4093      	lsls	r3, r2
 8002c82:	001a      	movs	r2, r3
 8002c84:	430d      	orrs	r5, r1
 8002c86:	1e51      	subs	r1, r2, #1
 8002c88:	418a      	sbcs	r2, r1
 8002c8a:	4653      	mov	r3, sl
 8002c8c:	4315      	orrs	r5, r2
 8002c8e:	9a02      	ldr	r2, [sp, #8]
 8002c90:	40da      	lsrs	r2, r3
 8002c92:	18a4      	adds	r4, r4, r2
 8002c94:	182d      	adds	r5, r5, r0
 8002c96:	4285      	cmp	r5, r0
 8002c98:	4180      	sbcs	r0, r0
 8002c9a:	4240      	negs	r0, r0
 8002c9c:	1824      	adds	r4, r4, r0
 8002c9e:	0223      	lsls	r3, r4, #8
 8002ca0:	d400      	bmi.n	8002ca4 <__aeabi_dsub+0x1d8>
 8002ca2:	e0b6      	b.n	8002e12 <__aeabi_dsub+0x346>
 8002ca4:	4b5e      	ldr	r3, [pc, #376]	@ (8002e20 <__aeabi_dsub+0x354>)
 8002ca6:	3701      	adds	r7, #1
 8002ca8:	429f      	cmp	r7, r3
 8002caa:	d100      	bne.n	8002cae <__aeabi_dsub+0x1e2>
 8002cac:	e0ad      	b.n	8002e0a <__aeabi_dsub+0x33e>
 8002cae:	2101      	movs	r1, #1
 8002cb0:	4b5c      	ldr	r3, [pc, #368]	@ (8002e24 <__aeabi_dsub+0x358>)
 8002cb2:	086a      	lsrs	r2, r5, #1
 8002cb4:	401c      	ands	r4, r3
 8002cb6:	4029      	ands	r1, r5
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	07e5      	lsls	r5, r4, #31
 8002cbc:	4315      	orrs	r5, r2
 8002cbe:	0864      	lsrs	r4, r4, #1
 8002cc0:	e78d      	b.n	8002bde <__aeabi_dsub+0x112>
 8002cc2:	4a59      	ldr	r2, [pc, #356]	@ (8002e28 <__aeabi_dsub+0x35c>)
 8002cc4:	9b02      	ldr	r3, [sp, #8]
 8002cc6:	4692      	mov	sl, r2
 8002cc8:	4662      	mov	r2, ip
 8002cca:	44ba      	add	sl, r7
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	d02c      	beq.n	8002d2a <__aeabi_dsub+0x25e>
 8002cd0:	428e      	cmp	r6, r1
 8002cd2:	d02e      	beq.n	8002d32 <__aeabi_dsub+0x266>
 8002cd4:	4652      	mov	r2, sl
 8002cd6:	2a00      	cmp	r2, #0
 8002cd8:	d060      	beq.n	8002d9c <__aeabi_dsub+0x2d0>
 8002cda:	2f00      	cmp	r7, #0
 8002cdc:	d100      	bne.n	8002ce0 <__aeabi_dsub+0x214>
 8002cde:	e0db      	b.n	8002e98 <__aeabi_dsub+0x3cc>
 8002ce0:	4663      	mov	r3, ip
 8002ce2:	000e      	movs	r6, r1
 8002ce4:	9c02      	ldr	r4, [sp, #8]
 8002ce6:	08d8      	lsrs	r0, r3, #3
 8002ce8:	0762      	lsls	r2, r4, #29
 8002cea:	4302      	orrs	r2, r0
 8002cec:	08e4      	lsrs	r4, r4, #3
 8002cee:	0013      	movs	r3, r2
 8002cf0:	4323      	orrs	r3, r4
 8002cf2:	d100      	bne.n	8002cf6 <__aeabi_dsub+0x22a>
 8002cf4:	e254      	b.n	80031a0 <__aeabi_dsub+0x6d4>
 8002cf6:	2580      	movs	r5, #128	@ 0x80
 8002cf8:	032d      	lsls	r5, r5, #12
 8002cfa:	4325      	orrs	r5, r4
 8002cfc:	032d      	lsls	r5, r5, #12
 8002cfe:	4c48      	ldr	r4, [pc, #288]	@ (8002e20 <__aeabi_dsub+0x354>)
 8002d00:	0b2d      	lsrs	r5, r5, #12
 8002d02:	e78c      	b.n	8002c1e <__aeabi_dsub+0x152>
 8002d04:	4661      	mov	r1, ip
 8002d06:	9b02      	ldr	r3, [sp, #8]
 8002d08:	4319      	orrs	r1, r3
 8002d0a:	d100      	bne.n	8002d0e <__aeabi_dsub+0x242>
 8002d0c:	e0cc      	b.n	8002ea8 <__aeabi_dsub+0x3dc>
 8002d0e:	0029      	movs	r1, r5
 8002d10:	3901      	subs	r1, #1
 8002d12:	2d01      	cmp	r5, #1
 8002d14:	d100      	bne.n	8002d18 <__aeabi_dsub+0x24c>
 8002d16:	e188      	b.n	800302a <__aeabi_dsub+0x55e>
 8002d18:	4295      	cmp	r5, r2
 8002d1a:	d100      	bne.n	8002d1e <__aeabi_dsub+0x252>
 8002d1c:	e0aa      	b.n	8002e74 <__aeabi_dsub+0x3a8>
 8002d1e:	2501      	movs	r5, #1
 8002d20:	2938      	cmp	r1, #56	@ 0x38
 8002d22:	dd00      	ble.n	8002d26 <__aeabi_dsub+0x25a>
 8002d24:	e72f      	b.n	8002b86 <__aeabi_dsub+0xba>
 8002d26:	468a      	mov	sl, r1
 8002d28:	e718      	b.n	8002b5c <__aeabi_dsub+0x90>
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	4051      	eors	r1, r2
 8002d2e:	428e      	cmp	r6, r1
 8002d30:	d1d0      	bne.n	8002cd4 <__aeabi_dsub+0x208>
 8002d32:	4653      	mov	r3, sl
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d100      	bne.n	8002d3a <__aeabi_dsub+0x26e>
 8002d38:	e0be      	b.n	8002eb8 <__aeabi_dsub+0x3ec>
 8002d3a:	2f00      	cmp	r7, #0
 8002d3c:	d000      	beq.n	8002d40 <__aeabi_dsub+0x274>
 8002d3e:	e138      	b.n	8002fb2 <__aeabi_dsub+0x4e6>
 8002d40:	46ca      	mov	sl, r9
 8002d42:	0022      	movs	r2, r4
 8002d44:	4302      	orrs	r2, r0
 8002d46:	d100      	bne.n	8002d4a <__aeabi_dsub+0x27e>
 8002d48:	e1e2      	b.n	8003110 <__aeabi_dsub+0x644>
 8002d4a:	4653      	mov	r3, sl
 8002d4c:	1e59      	subs	r1, r3, #1
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d100      	bne.n	8002d54 <__aeabi_dsub+0x288>
 8002d52:	e20d      	b.n	8003170 <__aeabi_dsub+0x6a4>
 8002d54:	4a32      	ldr	r2, [pc, #200]	@ (8002e20 <__aeabi_dsub+0x354>)
 8002d56:	4592      	cmp	sl, r2
 8002d58:	d100      	bne.n	8002d5c <__aeabi_dsub+0x290>
 8002d5a:	e1d2      	b.n	8003102 <__aeabi_dsub+0x636>
 8002d5c:	2701      	movs	r7, #1
 8002d5e:	2938      	cmp	r1, #56	@ 0x38
 8002d60:	dc13      	bgt.n	8002d8a <__aeabi_dsub+0x2be>
 8002d62:	291f      	cmp	r1, #31
 8002d64:	dd00      	ble.n	8002d68 <__aeabi_dsub+0x29c>
 8002d66:	e1ee      	b.n	8003146 <__aeabi_dsub+0x67a>
 8002d68:	2220      	movs	r2, #32
 8002d6a:	9b02      	ldr	r3, [sp, #8]
 8002d6c:	1a52      	subs	r2, r2, r1
 8002d6e:	0025      	movs	r5, r4
 8002d70:	0007      	movs	r7, r0
 8002d72:	469a      	mov	sl, r3
 8002d74:	40cc      	lsrs	r4, r1
 8002d76:	4090      	lsls	r0, r2
 8002d78:	4095      	lsls	r5, r2
 8002d7a:	40cf      	lsrs	r7, r1
 8002d7c:	44a2      	add	sl, r4
 8002d7e:	1e42      	subs	r2, r0, #1
 8002d80:	4190      	sbcs	r0, r2
 8002d82:	4653      	mov	r3, sl
 8002d84:	432f      	orrs	r7, r5
 8002d86:	4307      	orrs	r7, r0
 8002d88:	9302      	str	r3, [sp, #8]
 8002d8a:	003d      	movs	r5, r7
 8002d8c:	4465      	add	r5, ip
 8002d8e:	4565      	cmp	r5, ip
 8002d90:	4192      	sbcs	r2, r2
 8002d92:	9b02      	ldr	r3, [sp, #8]
 8002d94:	4252      	negs	r2, r2
 8002d96:	464f      	mov	r7, r9
 8002d98:	18d4      	adds	r4, r2, r3
 8002d9a:	e780      	b.n	8002c9e <__aeabi_dsub+0x1d2>
 8002d9c:	4a23      	ldr	r2, [pc, #140]	@ (8002e2c <__aeabi_dsub+0x360>)
 8002d9e:	1c7d      	adds	r5, r7, #1
 8002da0:	4215      	tst	r5, r2
 8002da2:	d000      	beq.n	8002da6 <__aeabi_dsub+0x2da>
 8002da4:	e0aa      	b.n	8002efc <__aeabi_dsub+0x430>
 8002da6:	4662      	mov	r2, ip
 8002da8:	0025      	movs	r5, r4
 8002daa:	9b02      	ldr	r3, [sp, #8]
 8002dac:	4305      	orrs	r5, r0
 8002dae:	431a      	orrs	r2, r3
 8002db0:	2f00      	cmp	r7, #0
 8002db2:	d000      	beq.n	8002db6 <__aeabi_dsub+0x2ea>
 8002db4:	e0f5      	b.n	8002fa2 <__aeabi_dsub+0x4d6>
 8002db6:	2d00      	cmp	r5, #0
 8002db8:	d100      	bne.n	8002dbc <__aeabi_dsub+0x2f0>
 8002dba:	e16b      	b.n	8003094 <__aeabi_dsub+0x5c8>
 8002dbc:	2a00      	cmp	r2, #0
 8002dbe:	d100      	bne.n	8002dc2 <__aeabi_dsub+0x2f6>
 8002dc0:	e152      	b.n	8003068 <__aeabi_dsub+0x59c>
 8002dc2:	4663      	mov	r3, ip
 8002dc4:	1ac5      	subs	r5, r0, r3
 8002dc6:	9b02      	ldr	r3, [sp, #8]
 8002dc8:	1ae2      	subs	r2, r4, r3
 8002dca:	42a8      	cmp	r0, r5
 8002dcc:	419b      	sbcs	r3, r3
 8002dce:	425b      	negs	r3, r3
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	021a      	lsls	r2, r3, #8
 8002dd4:	d400      	bmi.n	8002dd8 <__aeabi_dsub+0x30c>
 8002dd6:	e1d5      	b.n	8003184 <__aeabi_dsub+0x6b8>
 8002dd8:	4663      	mov	r3, ip
 8002dda:	1a1d      	subs	r5, r3, r0
 8002ddc:	45ac      	cmp	ip, r5
 8002dde:	4192      	sbcs	r2, r2
 8002de0:	2601      	movs	r6, #1
 8002de2:	9b02      	ldr	r3, [sp, #8]
 8002de4:	4252      	negs	r2, r2
 8002de6:	1b1c      	subs	r4, r3, r4
 8002de8:	4688      	mov	r8, r1
 8002dea:	1aa4      	subs	r4, r4, r2
 8002dec:	400e      	ands	r6, r1
 8002dee:	e6f6      	b.n	8002bde <__aeabi_dsub+0x112>
 8002df0:	4297      	cmp	r7, r2
 8002df2:	d03f      	beq.n	8002e74 <__aeabi_dsub+0x3a8>
 8002df4:	4652      	mov	r2, sl
 8002df6:	2501      	movs	r5, #1
 8002df8:	2a38      	cmp	r2, #56	@ 0x38
 8002dfa:	dd00      	ble.n	8002dfe <__aeabi_dsub+0x332>
 8002dfc:	e74a      	b.n	8002c94 <__aeabi_dsub+0x1c8>
 8002dfe:	2280      	movs	r2, #128	@ 0x80
 8002e00:	9b02      	ldr	r3, [sp, #8]
 8002e02:	0412      	lsls	r2, r2, #16
 8002e04:	4313      	orrs	r3, r2
 8002e06:	9302      	str	r3, [sp, #8]
 8002e08:	e72d      	b.n	8002c66 <__aeabi_dsub+0x19a>
 8002e0a:	003c      	movs	r4, r7
 8002e0c:	2500      	movs	r5, #0
 8002e0e:	2200      	movs	r2, #0
 8002e10:	e705      	b.n	8002c1e <__aeabi_dsub+0x152>
 8002e12:	2307      	movs	r3, #7
 8002e14:	402b      	ands	r3, r5
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d000      	beq.n	8002e1c <__aeabi_dsub+0x350>
 8002e1a:	e6e2      	b.n	8002be2 <__aeabi_dsub+0x116>
 8002e1c:	e06b      	b.n	8002ef6 <__aeabi_dsub+0x42a>
 8002e1e:	46c0      	nop			@ (mov r8, r8)
 8002e20:	000007ff 	.word	0x000007ff
 8002e24:	ff7fffff 	.word	0xff7fffff
 8002e28:	fffff801 	.word	0xfffff801
 8002e2c:	000007fe 	.word	0x000007fe
 8002e30:	0028      	movs	r0, r5
 8002e32:	f000 fb63 	bl	80034fc <__clzsi2>
 8002e36:	0003      	movs	r3, r0
 8002e38:	3318      	adds	r3, #24
 8002e3a:	2b1f      	cmp	r3, #31
 8002e3c:	dc00      	bgt.n	8002e40 <__aeabi_dsub+0x374>
 8002e3e:	e6b4      	b.n	8002baa <__aeabi_dsub+0xde>
 8002e40:	002a      	movs	r2, r5
 8002e42:	3808      	subs	r0, #8
 8002e44:	4082      	lsls	r2, r0
 8002e46:	429f      	cmp	r7, r3
 8002e48:	dd00      	ble.n	8002e4c <__aeabi_dsub+0x380>
 8002e4a:	e0b9      	b.n	8002fc0 <__aeabi_dsub+0x4f4>
 8002e4c:	1bdb      	subs	r3, r3, r7
 8002e4e:	1c58      	adds	r0, r3, #1
 8002e50:	281f      	cmp	r0, #31
 8002e52:	dc00      	bgt.n	8002e56 <__aeabi_dsub+0x38a>
 8002e54:	e1a0      	b.n	8003198 <__aeabi_dsub+0x6cc>
 8002e56:	0015      	movs	r5, r2
 8002e58:	3b1f      	subs	r3, #31
 8002e5a:	40dd      	lsrs	r5, r3
 8002e5c:	2820      	cmp	r0, #32
 8002e5e:	d005      	beq.n	8002e6c <__aeabi_dsub+0x3a0>
 8002e60:	2340      	movs	r3, #64	@ 0x40
 8002e62:	1a1b      	subs	r3, r3, r0
 8002e64:	409a      	lsls	r2, r3
 8002e66:	1e53      	subs	r3, r2, #1
 8002e68:	419a      	sbcs	r2, r3
 8002e6a:	4315      	orrs	r5, r2
 8002e6c:	2307      	movs	r3, #7
 8002e6e:	2700      	movs	r7, #0
 8002e70:	402b      	ands	r3, r5
 8002e72:	e7d0      	b.n	8002e16 <__aeabi_dsub+0x34a>
 8002e74:	08c0      	lsrs	r0, r0, #3
 8002e76:	0762      	lsls	r2, r4, #29
 8002e78:	4302      	orrs	r2, r0
 8002e7a:	08e4      	lsrs	r4, r4, #3
 8002e7c:	e737      	b.n	8002cee <__aeabi_dsub+0x222>
 8002e7e:	08ea      	lsrs	r2, r5, #3
 8002e80:	0763      	lsls	r3, r4, #29
 8002e82:	431a      	orrs	r2, r3
 8002e84:	4bd3      	ldr	r3, [pc, #844]	@ (80031d4 <__aeabi_dsub+0x708>)
 8002e86:	08e4      	lsrs	r4, r4, #3
 8002e88:	429f      	cmp	r7, r3
 8002e8a:	d100      	bne.n	8002e8e <__aeabi_dsub+0x3c2>
 8002e8c:	e72f      	b.n	8002cee <__aeabi_dsub+0x222>
 8002e8e:	0324      	lsls	r4, r4, #12
 8002e90:	0b25      	lsrs	r5, r4, #12
 8002e92:	057c      	lsls	r4, r7, #21
 8002e94:	0d64      	lsrs	r4, r4, #21
 8002e96:	e6c2      	b.n	8002c1e <__aeabi_dsub+0x152>
 8002e98:	46ca      	mov	sl, r9
 8002e9a:	0022      	movs	r2, r4
 8002e9c:	4302      	orrs	r2, r0
 8002e9e:	d158      	bne.n	8002f52 <__aeabi_dsub+0x486>
 8002ea0:	4663      	mov	r3, ip
 8002ea2:	000e      	movs	r6, r1
 8002ea4:	9c02      	ldr	r4, [sp, #8]
 8002ea6:	9303      	str	r3, [sp, #12]
 8002ea8:	9b03      	ldr	r3, [sp, #12]
 8002eaa:	4657      	mov	r7, sl
 8002eac:	08da      	lsrs	r2, r3, #3
 8002eae:	e7e7      	b.n	8002e80 <__aeabi_dsub+0x3b4>
 8002eb0:	4cc9      	ldr	r4, [pc, #804]	@ (80031d8 <__aeabi_dsub+0x70c>)
 8002eb2:	1aff      	subs	r7, r7, r3
 8002eb4:	4014      	ands	r4, r2
 8002eb6:	e692      	b.n	8002bde <__aeabi_dsub+0x112>
 8002eb8:	4dc8      	ldr	r5, [pc, #800]	@ (80031dc <__aeabi_dsub+0x710>)
 8002eba:	1c7a      	adds	r2, r7, #1
 8002ebc:	422a      	tst	r2, r5
 8002ebe:	d000      	beq.n	8002ec2 <__aeabi_dsub+0x3f6>
 8002ec0:	e084      	b.n	8002fcc <__aeabi_dsub+0x500>
 8002ec2:	0022      	movs	r2, r4
 8002ec4:	4302      	orrs	r2, r0
 8002ec6:	2f00      	cmp	r7, #0
 8002ec8:	d000      	beq.n	8002ecc <__aeabi_dsub+0x400>
 8002eca:	e0ef      	b.n	80030ac <__aeabi_dsub+0x5e0>
 8002ecc:	2a00      	cmp	r2, #0
 8002ece:	d100      	bne.n	8002ed2 <__aeabi_dsub+0x406>
 8002ed0:	e0e5      	b.n	800309e <__aeabi_dsub+0x5d2>
 8002ed2:	4662      	mov	r2, ip
 8002ed4:	9902      	ldr	r1, [sp, #8]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	d100      	bne.n	8002edc <__aeabi_dsub+0x410>
 8002eda:	e0c5      	b.n	8003068 <__aeabi_dsub+0x59c>
 8002edc:	4663      	mov	r3, ip
 8002ede:	18c5      	adds	r5, r0, r3
 8002ee0:	468c      	mov	ip, r1
 8002ee2:	4285      	cmp	r5, r0
 8002ee4:	4180      	sbcs	r0, r0
 8002ee6:	4464      	add	r4, ip
 8002ee8:	4240      	negs	r0, r0
 8002eea:	1824      	adds	r4, r4, r0
 8002eec:	0223      	lsls	r3, r4, #8
 8002eee:	d502      	bpl.n	8002ef6 <__aeabi_dsub+0x42a>
 8002ef0:	4bb9      	ldr	r3, [pc, #740]	@ (80031d8 <__aeabi_dsub+0x70c>)
 8002ef2:	3701      	adds	r7, #1
 8002ef4:	401c      	ands	r4, r3
 8002ef6:	46ba      	mov	sl, r7
 8002ef8:	9503      	str	r5, [sp, #12]
 8002efa:	e7d5      	b.n	8002ea8 <__aeabi_dsub+0x3dc>
 8002efc:	4662      	mov	r2, ip
 8002efe:	1a85      	subs	r5, r0, r2
 8002f00:	42a8      	cmp	r0, r5
 8002f02:	4192      	sbcs	r2, r2
 8002f04:	4252      	negs	r2, r2
 8002f06:	4691      	mov	r9, r2
 8002f08:	9b02      	ldr	r3, [sp, #8]
 8002f0a:	1ae3      	subs	r3, r4, r3
 8002f0c:	001a      	movs	r2, r3
 8002f0e:	464b      	mov	r3, r9
 8002f10:	1ad2      	subs	r2, r2, r3
 8002f12:	0013      	movs	r3, r2
 8002f14:	4691      	mov	r9, r2
 8002f16:	021a      	lsls	r2, r3, #8
 8002f18:	d46c      	bmi.n	8002ff4 <__aeabi_dsub+0x528>
 8002f1a:	464a      	mov	r2, r9
 8002f1c:	464c      	mov	r4, r9
 8002f1e:	432a      	orrs	r2, r5
 8002f20:	d000      	beq.n	8002f24 <__aeabi_dsub+0x458>
 8002f22:	e63a      	b.n	8002b9a <__aeabi_dsub+0xce>
 8002f24:	2600      	movs	r6, #0
 8002f26:	2400      	movs	r4, #0
 8002f28:	2500      	movs	r5, #0
 8002f2a:	e678      	b.n	8002c1e <__aeabi_dsub+0x152>
 8002f2c:	9902      	ldr	r1, [sp, #8]
 8002f2e:	4653      	mov	r3, sl
 8002f30:	000d      	movs	r5, r1
 8002f32:	3a20      	subs	r2, #32
 8002f34:	40d5      	lsrs	r5, r2
 8002f36:	2b20      	cmp	r3, #32
 8002f38:	d006      	beq.n	8002f48 <__aeabi_dsub+0x47c>
 8002f3a:	2240      	movs	r2, #64	@ 0x40
 8002f3c:	1ad2      	subs	r2, r2, r3
 8002f3e:	000b      	movs	r3, r1
 8002f40:	4093      	lsls	r3, r2
 8002f42:	4662      	mov	r2, ip
 8002f44:	431a      	orrs	r2, r3
 8002f46:	4693      	mov	fp, r2
 8002f48:	465b      	mov	r3, fp
 8002f4a:	1e5a      	subs	r2, r3, #1
 8002f4c:	4193      	sbcs	r3, r2
 8002f4e:	431d      	orrs	r5, r3
 8002f50:	e619      	b.n	8002b86 <__aeabi_dsub+0xba>
 8002f52:	4653      	mov	r3, sl
 8002f54:	1e5a      	subs	r2, r3, #1
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d100      	bne.n	8002f5c <__aeabi_dsub+0x490>
 8002f5a:	e0c6      	b.n	80030ea <__aeabi_dsub+0x61e>
 8002f5c:	4e9d      	ldr	r6, [pc, #628]	@ (80031d4 <__aeabi_dsub+0x708>)
 8002f5e:	45b2      	cmp	sl, r6
 8002f60:	d100      	bne.n	8002f64 <__aeabi_dsub+0x498>
 8002f62:	e6bd      	b.n	8002ce0 <__aeabi_dsub+0x214>
 8002f64:	4688      	mov	r8, r1
 8002f66:	000e      	movs	r6, r1
 8002f68:	2501      	movs	r5, #1
 8002f6a:	2a38      	cmp	r2, #56	@ 0x38
 8002f6c:	dc10      	bgt.n	8002f90 <__aeabi_dsub+0x4c4>
 8002f6e:	2a1f      	cmp	r2, #31
 8002f70:	dc7f      	bgt.n	8003072 <__aeabi_dsub+0x5a6>
 8002f72:	2120      	movs	r1, #32
 8002f74:	0025      	movs	r5, r4
 8002f76:	1a89      	subs	r1, r1, r2
 8002f78:	0007      	movs	r7, r0
 8002f7a:	4088      	lsls	r0, r1
 8002f7c:	408d      	lsls	r5, r1
 8002f7e:	40d7      	lsrs	r7, r2
 8002f80:	40d4      	lsrs	r4, r2
 8002f82:	1e41      	subs	r1, r0, #1
 8002f84:	4188      	sbcs	r0, r1
 8002f86:	9b02      	ldr	r3, [sp, #8]
 8002f88:	433d      	orrs	r5, r7
 8002f8a:	1b1b      	subs	r3, r3, r4
 8002f8c:	4305      	orrs	r5, r0
 8002f8e:	9302      	str	r3, [sp, #8]
 8002f90:	4662      	mov	r2, ip
 8002f92:	1b55      	subs	r5, r2, r5
 8002f94:	45ac      	cmp	ip, r5
 8002f96:	4192      	sbcs	r2, r2
 8002f98:	9b02      	ldr	r3, [sp, #8]
 8002f9a:	4252      	negs	r2, r2
 8002f9c:	464f      	mov	r7, r9
 8002f9e:	1a9c      	subs	r4, r3, r2
 8002fa0:	e5f6      	b.n	8002b90 <__aeabi_dsub+0xc4>
 8002fa2:	2d00      	cmp	r5, #0
 8002fa4:	d000      	beq.n	8002fa8 <__aeabi_dsub+0x4dc>
 8002fa6:	e0b7      	b.n	8003118 <__aeabi_dsub+0x64c>
 8002fa8:	2a00      	cmp	r2, #0
 8002faa:	d100      	bne.n	8002fae <__aeabi_dsub+0x4e2>
 8002fac:	e0f0      	b.n	8003190 <__aeabi_dsub+0x6c4>
 8002fae:	2601      	movs	r6, #1
 8002fb0:	400e      	ands	r6, r1
 8002fb2:	4663      	mov	r3, ip
 8002fb4:	9802      	ldr	r0, [sp, #8]
 8002fb6:	08d9      	lsrs	r1, r3, #3
 8002fb8:	0742      	lsls	r2, r0, #29
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	08c4      	lsrs	r4, r0, #3
 8002fbe:	e696      	b.n	8002cee <__aeabi_dsub+0x222>
 8002fc0:	4c85      	ldr	r4, [pc, #532]	@ (80031d8 <__aeabi_dsub+0x70c>)
 8002fc2:	1aff      	subs	r7, r7, r3
 8002fc4:	4014      	ands	r4, r2
 8002fc6:	0762      	lsls	r2, r4, #29
 8002fc8:	08e4      	lsrs	r4, r4, #3
 8002fca:	e760      	b.n	8002e8e <__aeabi_dsub+0x3c2>
 8002fcc:	4981      	ldr	r1, [pc, #516]	@ (80031d4 <__aeabi_dsub+0x708>)
 8002fce:	428a      	cmp	r2, r1
 8002fd0:	d100      	bne.n	8002fd4 <__aeabi_dsub+0x508>
 8002fd2:	e0c9      	b.n	8003168 <__aeabi_dsub+0x69c>
 8002fd4:	4663      	mov	r3, ip
 8002fd6:	18c1      	adds	r1, r0, r3
 8002fd8:	4281      	cmp	r1, r0
 8002fda:	4180      	sbcs	r0, r0
 8002fdc:	9b02      	ldr	r3, [sp, #8]
 8002fde:	4240      	negs	r0, r0
 8002fe0:	18e3      	adds	r3, r4, r3
 8002fe2:	181b      	adds	r3, r3, r0
 8002fe4:	07dd      	lsls	r5, r3, #31
 8002fe6:	085c      	lsrs	r4, r3, #1
 8002fe8:	2307      	movs	r3, #7
 8002fea:	0849      	lsrs	r1, r1, #1
 8002fec:	430d      	orrs	r5, r1
 8002fee:	0017      	movs	r7, r2
 8002ff0:	402b      	ands	r3, r5
 8002ff2:	e710      	b.n	8002e16 <__aeabi_dsub+0x34a>
 8002ff4:	4663      	mov	r3, ip
 8002ff6:	1a1d      	subs	r5, r3, r0
 8002ff8:	45ac      	cmp	ip, r5
 8002ffa:	4192      	sbcs	r2, r2
 8002ffc:	2601      	movs	r6, #1
 8002ffe:	9b02      	ldr	r3, [sp, #8]
 8003000:	4252      	negs	r2, r2
 8003002:	1b1c      	subs	r4, r3, r4
 8003004:	4688      	mov	r8, r1
 8003006:	1aa4      	subs	r4, r4, r2
 8003008:	400e      	ands	r6, r1
 800300a:	e5c6      	b.n	8002b9a <__aeabi_dsub+0xce>
 800300c:	4663      	mov	r3, ip
 800300e:	18c5      	adds	r5, r0, r3
 8003010:	9b02      	ldr	r3, [sp, #8]
 8003012:	4285      	cmp	r5, r0
 8003014:	4180      	sbcs	r0, r0
 8003016:	469c      	mov	ip, r3
 8003018:	4240      	negs	r0, r0
 800301a:	4464      	add	r4, ip
 800301c:	1824      	adds	r4, r4, r0
 800301e:	2701      	movs	r7, #1
 8003020:	0223      	lsls	r3, r4, #8
 8003022:	d400      	bmi.n	8003026 <__aeabi_dsub+0x55a>
 8003024:	e6f5      	b.n	8002e12 <__aeabi_dsub+0x346>
 8003026:	2702      	movs	r7, #2
 8003028:	e641      	b.n	8002cae <__aeabi_dsub+0x1e2>
 800302a:	4663      	mov	r3, ip
 800302c:	1ac5      	subs	r5, r0, r3
 800302e:	42a8      	cmp	r0, r5
 8003030:	4180      	sbcs	r0, r0
 8003032:	9b02      	ldr	r3, [sp, #8]
 8003034:	4240      	negs	r0, r0
 8003036:	1ae4      	subs	r4, r4, r3
 8003038:	2701      	movs	r7, #1
 800303a:	1a24      	subs	r4, r4, r0
 800303c:	e5a8      	b.n	8002b90 <__aeabi_dsub+0xc4>
 800303e:	9d02      	ldr	r5, [sp, #8]
 8003040:	4652      	mov	r2, sl
 8003042:	002b      	movs	r3, r5
 8003044:	3a20      	subs	r2, #32
 8003046:	40d3      	lsrs	r3, r2
 8003048:	0019      	movs	r1, r3
 800304a:	4653      	mov	r3, sl
 800304c:	2b20      	cmp	r3, #32
 800304e:	d006      	beq.n	800305e <__aeabi_dsub+0x592>
 8003050:	2240      	movs	r2, #64	@ 0x40
 8003052:	1ad2      	subs	r2, r2, r3
 8003054:	002b      	movs	r3, r5
 8003056:	4093      	lsls	r3, r2
 8003058:	4662      	mov	r2, ip
 800305a:	431a      	orrs	r2, r3
 800305c:	4693      	mov	fp, r2
 800305e:	465d      	mov	r5, fp
 8003060:	1e6b      	subs	r3, r5, #1
 8003062:	419d      	sbcs	r5, r3
 8003064:	430d      	orrs	r5, r1
 8003066:	e615      	b.n	8002c94 <__aeabi_dsub+0x1c8>
 8003068:	0762      	lsls	r2, r4, #29
 800306a:	08c0      	lsrs	r0, r0, #3
 800306c:	4302      	orrs	r2, r0
 800306e:	08e4      	lsrs	r4, r4, #3
 8003070:	e70d      	b.n	8002e8e <__aeabi_dsub+0x3c2>
 8003072:	0011      	movs	r1, r2
 8003074:	0027      	movs	r7, r4
 8003076:	3920      	subs	r1, #32
 8003078:	40cf      	lsrs	r7, r1
 800307a:	2a20      	cmp	r2, #32
 800307c:	d005      	beq.n	800308a <__aeabi_dsub+0x5be>
 800307e:	2140      	movs	r1, #64	@ 0x40
 8003080:	1a8a      	subs	r2, r1, r2
 8003082:	4094      	lsls	r4, r2
 8003084:	0025      	movs	r5, r4
 8003086:	4305      	orrs	r5, r0
 8003088:	9503      	str	r5, [sp, #12]
 800308a:	9d03      	ldr	r5, [sp, #12]
 800308c:	1e6a      	subs	r2, r5, #1
 800308e:	4195      	sbcs	r5, r2
 8003090:	433d      	orrs	r5, r7
 8003092:	e77d      	b.n	8002f90 <__aeabi_dsub+0x4c4>
 8003094:	2a00      	cmp	r2, #0
 8003096:	d100      	bne.n	800309a <__aeabi_dsub+0x5ce>
 8003098:	e744      	b.n	8002f24 <__aeabi_dsub+0x458>
 800309a:	2601      	movs	r6, #1
 800309c:	400e      	ands	r6, r1
 800309e:	4663      	mov	r3, ip
 80030a0:	08d9      	lsrs	r1, r3, #3
 80030a2:	9b02      	ldr	r3, [sp, #8]
 80030a4:	075a      	lsls	r2, r3, #29
 80030a6:	430a      	orrs	r2, r1
 80030a8:	08dc      	lsrs	r4, r3, #3
 80030aa:	e6f0      	b.n	8002e8e <__aeabi_dsub+0x3c2>
 80030ac:	2a00      	cmp	r2, #0
 80030ae:	d028      	beq.n	8003102 <__aeabi_dsub+0x636>
 80030b0:	4662      	mov	r2, ip
 80030b2:	9f02      	ldr	r7, [sp, #8]
 80030b4:	08c0      	lsrs	r0, r0, #3
 80030b6:	433a      	orrs	r2, r7
 80030b8:	d100      	bne.n	80030bc <__aeabi_dsub+0x5f0>
 80030ba:	e6dc      	b.n	8002e76 <__aeabi_dsub+0x3aa>
 80030bc:	0762      	lsls	r2, r4, #29
 80030be:	4310      	orrs	r0, r2
 80030c0:	2280      	movs	r2, #128	@ 0x80
 80030c2:	08e4      	lsrs	r4, r4, #3
 80030c4:	0312      	lsls	r2, r2, #12
 80030c6:	4214      	tst	r4, r2
 80030c8:	d009      	beq.n	80030de <__aeabi_dsub+0x612>
 80030ca:	08fd      	lsrs	r5, r7, #3
 80030cc:	4215      	tst	r5, r2
 80030ce:	d106      	bne.n	80030de <__aeabi_dsub+0x612>
 80030d0:	4663      	mov	r3, ip
 80030d2:	2601      	movs	r6, #1
 80030d4:	002c      	movs	r4, r5
 80030d6:	08d8      	lsrs	r0, r3, #3
 80030d8:	077b      	lsls	r3, r7, #29
 80030da:	4318      	orrs	r0, r3
 80030dc:	400e      	ands	r6, r1
 80030de:	0f42      	lsrs	r2, r0, #29
 80030e0:	00c0      	lsls	r0, r0, #3
 80030e2:	08c0      	lsrs	r0, r0, #3
 80030e4:	0752      	lsls	r2, r2, #29
 80030e6:	4302      	orrs	r2, r0
 80030e8:	e601      	b.n	8002cee <__aeabi_dsub+0x222>
 80030ea:	4663      	mov	r3, ip
 80030ec:	1a1d      	subs	r5, r3, r0
 80030ee:	45ac      	cmp	ip, r5
 80030f0:	4192      	sbcs	r2, r2
 80030f2:	9b02      	ldr	r3, [sp, #8]
 80030f4:	4252      	negs	r2, r2
 80030f6:	1b1c      	subs	r4, r3, r4
 80030f8:	000e      	movs	r6, r1
 80030fa:	4688      	mov	r8, r1
 80030fc:	2701      	movs	r7, #1
 80030fe:	1aa4      	subs	r4, r4, r2
 8003100:	e546      	b.n	8002b90 <__aeabi_dsub+0xc4>
 8003102:	4663      	mov	r3, ip
 8003104:	08d9      	lsrs	r1, r3, #3
 8003106:	9b02      	ldr	r3, [sp, #8]
 8003108:	075a      	lsls	r2, r3, #29
 800310a:	430a      	orrs	r2, r1
 800310c:	08dc      	lsrs	r4, r3, #3
 800310e:	e5ee      	b.n	8002cee <__aeabi_dsub+0x222>
 8003110:	4663      	mov	r3, ip
 8003112:	9c02      	ldr	r4, [sp, #8]
 8003114:	9303      	str	r3, [sp, #12]
 8003116:	e6c7      	b.n	8002ea8 <__aeabi_dsub+0x3dc>
 8003118:	08c0      	lsrs	r0, r0, #3
 800311a:	2a00      	cmp	r2, #0
 800311c:	d100      	bne.n	8003120 <__aeabi_dsub+0x654>
 800311e:	e6aa      	b.n	8002e76 <__aeabi_dsub+0x3aa>
 8003120:	0762      	lsls	r2, r4, #29
 8003122:	4310      	orrs	r0, r2
 8003124:	2280      	movs	r2, #128	@ 0x80
 8003126:	08e4      	lsrs	r4, r4, #3
 8003128:	0312      	lsls	r2, r2, #12
 800312a:	4214      	tst	r4, r2
 800312c:	d0d7      	beq.n	80030de <__aeabi_dsub+0x612>
 800312e:	9f02      	ldr	r7, [sp, #8]
 8003130:	08fd      	lsrs	r5, r7, #3
 8003132:	4215      	tst	r5, r2
 8003134:	d1d3      	bne.n	80030de <__aeabi_dsub+0x612>
 8003136:	4663      	mov	r3, ip
 8003138:	2601      	movs	r6, #1
 800313a:	08d8      	lsrs	r0, r3, #3
 800313c:	077b      	lsls	r3, r7, #29
 800313e:	002c      	movs	r4, r5
 8003140:	4318      	orrs	r0, r3
 8003142:	400e      	ands	r6, r1
 8003144:	e7cb      	b.n	80030de <__aeabi_dsub+0x612>
 8003146:	000a      	movs	r2, r1
 8003148:	0027      	movs	r7, r4
 800314a:	3a20      	subs	r2, #32
 800314c:	40d7      	lsrs	r7, r2
 800314e:	2920      	cmp	r1, #32
 8003150:	d005      	beq.n	800315e <__aeabi_dsub+0x692>
 8003152:	2240      	movs	r2, #64	@ 0x40
 8003154:	1a52      	subs	r2, r2, r1
 8003156:	4094      	lsls	r4, r2
 8003158:	0025      	movs	r5, r4
 800315a:	4305      	orrs	r5, r0
 800315c:	9503      	str	r5, [sp, #12]
 800315e:	9d03      	ldr	r5, [sp, #12]
 8003160:	1e6a      	subs	r2, r5, #1
 8003162:	4195      	sbcs	r5, r2
 8003164:	432f      	orrs	r7, r5
 8003166:	e610      	b.n	8002d8a <__aeabi_dsub+0x2be>
 8003168:	0014      	movs	r4, r2
 800316a:	2500      	movs	r5, #0
 800316c:	2200      	movs	r2, #0
 800316e:	e556      	b.n	8002c1e <__aeabi_dsub+0x152>
 8003170:	9b02      	ldr	r3, [sp, #8]
 8003172:	4460      	add	r0, ip
 8003174:	4699      	mov	r9, r3
 8003176:	4560      	cmp	r0, ip
 8003178:	4192      	sbcs	r2, r2
 800317a:	444c      	add	r4, r9
 800317c:	4252      	negs	r2, r2
 800317e:	0005      	movs	r5, r0
 8003180:	18a4      	adds	r4, r4, r2
 8003182:	e74c      	b.n	800301e <__aeabi_dsub+0x552>
 8003184:	001a      	movs	r2, r3
 8003186:	001c      	movs	r4, r3
 8003188:	432a      	orrs	r2, r5
 800318a:	d000      	beq.n	800318e <__aeabi_dsub+0x6c2>
 800318c:	e6b3      	b.n	8002ef6 <__aeabi_dsub+0x42a>
 800318e:	e6c9      	b.n	8002f24 <__aeabi_dsub+0x458>
 8003190:	2480      	movs	r4, #128	@ 0x80
 8003192:	2600      	movs	r6, #0
 8003194:	0324      	lsls	r4, r4, #12
 8003196:	e5ae      	b.n	8002cf6 <__aeabi_dsub+0x22a>
 8003198:	2120      	movs	r1, #32
 800319a:	2500      	movs	r5, #0
 800319c:	1a09      	subs	r1, r1, r0
 800319e:	e517      	b.n	8002bd0 <__aeabi_dsub+0x104>
 80031a0:	2200      	movs	r2, #0
 80031a2:	2500      	movs	r5, #0
 80031a4:	4c0b      	ldr	r4, [pc, #44]	@ (80031d4 <__aeabi_dsub+0x708>)
 80031a6:	e53a      	b.n	8002c1e <__aeabi_dsub+0x152>
 80031a8:	2d00      	cmp	r5, #0
 80031aa:	d100      	bne.n	80031ae <__aeabi_dsub+0x6e2>
 80031ac:	e5f6      	b.n	8002d9c <__aeabi_dsub+0x2d0>
 80031ae:	464b      	mov	r3, r9
 80031b0:	1bda      	subs	r2, r3, r7
 80031b2:	4692      	mov	sl, r2
 80031b4:	2f00      	cmp	r7, #0
 80031b6:	d100      	bne.n	80031ba <__aeabi_dsub+0x6ee>
 80031b8:	e66f      	b.n	8002e9a <__aeabi_dsub+0x3ce>
 80031ba:	2a38      	cmp	r2, #56	@ 0x38
 80031bc:	dc05      	bgt.n	80031ca <__aeabi_dsub+0x6fe>
 80031be:	2680      	movs	r6, #128	@ 0x80
 80031c0:	0436      	lsls	r6, r6, #16
 80031c2:	4334      	orrs	r4, r6
 80031c4:	4688      	mov	r8, r1
 80031c6:	000e      	movs	r6, r1
 80031c8:	e6d1      	b.n	8002f6e <__aeabi_dsub+0x4a2>
 80031ca:	4688      	mov	r8, r1
 80031cc:	000e      	movs	r6, r1
 80031ce:	2501      	movs	r5, #1
 80031d0:	e6de      	b.n	8002f90 <__aeabi_dsub+0x4c4>
 80031d2:	46c0      	nop			@ (mov r8, r8)
 80031d4:	000007ff 	.word	0x000007ff
 80031d8:	ff7fffff 	.word	0xff7fffff
 80031dc:	000007fe 	.word	0x000007fe
 80031e0:	2d00      	cmp	r5, #0
 80031e2:	d100      	bne.n	80031e6 <__aeabi_dsub+0x71a>
 80031e4:	e668      	b.n	8002eb8 <__aeabi_dsub+0x3ec>
 80031e6:	464b      	mov	r3, r9
 80031e8:	1bd9      	subs	r1, r3, r7
 80031ea:	2f00      	cmp	r7, #0
 80031ec:	d101      	bne.n	80031f2 <__aeabi_dsub+0x726>
 80031ee:	468a      	mov	sl, r1
 80031f0:	e5a7      	b.n	8002d42 <__aeabi_dsub+0x276>
 80031f2:	2701      	movs	r7, #1
 80031f4:	2938      	cmp	r1, #56	@ 0x38
 80031f6:	dd00      	ble.n	80031fa <__aeabi_dsub+0x72e>
 80031f8:	e5c7      	b.n	8002d8a <__aeabi_dsub+0x2be>
 80031fa:	2280      	movs	r2, #128	@ 0x80
 80031fc:	0412      	lsls	r2, r2, #16
 80031fe:	4314      	orrs	r4, r2
 8003200:	e5af      	b.n	8002d62 <__aeabi_dsub+0x296>
 8003202:	46c0      	nop			@ (mov r8, r8)

08003204 <__aeabi_dcmpun>:
 8003204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003206:	46c6      	mov	lr, r8
 8003208:	031e      	lsls	r6, r3, #12
 800320a:	0b36      	lsrs	r6, r6, #12
 800320c:	46b0      	mov	r8, r6
 800320e:	4e0d      	ldr	r6, [pc, #52]	@ (8003244 <__aeabi_dcmpun+0x40>)
 8003210:	030c      	lsls	r4, r1, #12
 8003212:	004d      	lsls	r5, r1, #1
 8003214:	005f      	lsls	r7, r3, #1
 8003216:	b500      	push	{lr}
 8003218:	0b24      	lsrs	r4, r4, #12
 800321a:	0d6d      	lsrs	r5, r5, #21
 800321c:	0d7f      	lsrs	r7, r7, #21
 800321e:	42b5      	cmp	r5, r6
 8003220:	d00b      	beq.n	800323a <__aeabi_dcmpun+0x36>
 8003222:	4908      	ldr	r1, [pc, #32]	@ (8003244 <__aeabi_dcmpun+0x40>)
 8003224:	2000      	movs	r0, #0
 8003226:	428f      	cmp	r7, r1
 8003228:	d104      	bne.n	8003234 <__aeabi_dcmpun+0x30>
 800322a:	4646      	mov	r6, r8
 800322c:	4316      	orrs	r6, r2
 800322e:	0030      	movs	r0, r6
 8003230:	1e43      	subs	r3, r0, #1
 8003232:	4198      	sbcs	r0, r3
 8003234:	bc80      	pop	{r7}
 8003236:	46b8      	mov	r8, r7
 8003238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800323a:	4304      	orrs	r4, r0
 800323c:	2001      	movs	r0, #1
 800323e:	2c00      	cmp	r4, #0
 8003240:	d1f8      	bne.n	8003234 <__aeabi_dcmpun+0x30>
 8003242:	e7ee      	b.n	8003222 <__aeabi_dcmpun+0x1e>
 8003244:	000007ff 	.word	0x000007ff

08003248 <__aeabi_d2iz>:
 8003248:	000b      	movs	r3, r1
 800324a:	0002      	movs	r2, r0
 800324c:	b570      	push	{r4, r5, r6, lr}
 800324e:	4d16      	ldr	r5, [pc, #88]	@ (80032a8 <__aeabi_d2iz+0x60>)
 8003250:	030c      	lsls	r4, r1, #12
 8003252:	b082      	sub	sp, #8
 8003254:	0049      	lsls	r1, r1, #1
 8003256:	2000      	movs	r0, #0
 8003258:	9200      	str	r2, [sp, #0]
 800325a:	9301      	str	r3, [sp, #4]
 800325c:	0b24      	lsrs	r4, r4, #12
 800325e:	0d49      	lsrs	r1, r1, #21
 8003260:	0fde      	lsrs	r6, r3, #31
 8003262:	42a9      	cmp	r1, r5
 8003264:	dd04      	ble.n	8003270 <__aeabi_d2iz+0x28>
 8003266:	4811      	ldr	r0, [pc, #68]	@ (80032ac <__aeabi_d2iz+0x64>)
 8003268:	4281      	cmp	r1, r0
 800326a:	dd03      	ble.n	8003274 <__aeabi_d2iz+0x2c>
 800326c:	4b10      	ldr	r3, [pc, #64]	@ (80032b0 <__aeabi_d2iz+0x68>)
 800326e:	18f0      	adds	r0, r6, r3
 8003270:	b002      	add	sp, #8
 8003272:	bd70      	pop	{r4, r5, r6, pc}
 8003274:	2080      	movs	r0, #128	@ 0x80
 8003276:	0340      	lsls	r0, r0, #13
 8003278:	4320      	orrs	r0, r4
 800327a:	4c0e      	ldr	r4, [pc, #56]	@ (80032b4 <__aeabi_d2iz+0x6c>)
 800327c:	1a64      	subs	r4, r4, r1
 800327e:	2c1f      	cmp	r4, #31
 8003280:	dd08      	ble.n	8003294 <__aeabi_d2iz+0x4c>
 8003282:	4b0d      	ldr	r3, [pc, #52]	@ (80032b8 <__aeabi_d2iz+0x70>)
 8003284:	1a5b      	subs	r3, r3, r1
 8003286:	40d8      	lsrs	r0, r3
 8003288:	0003      	movs	r3, r0
 800328a:	4258      	negs	r0, r3
 800328c:	2e00      	cmp	r6, #0
 800328e:	d1ef      	bne.n	8003270 <__aeabi_d2iz+0x28>
 8003290:	0018      	movs	r0, r3
 8003292:	e7ed      	b.n	8003270 <__aeabi_d2iz+0x28>
 8003294:	4b09      	ldr	r3, [pc, #36]	@ (80032bc <__aeabi_d2iz+0x74>)
 8003296:	9a00      	ldr	r2, [sp, #0]
 8003298:	469c      	mov	ip, r3
 800329a:	0003      	movs	r3, r0
 800329c:	4461      	add	r1, ip
 800329e:	408b      	lsls	r3, r1
 80032a0:	40e2      	lsrs	r2, r4
 80032a2:	4313      	orrs	r3, r2
 80032a4:	e7f1      	b.n	800328a <__aeabi_d2iz+0x42>
 80032a6:	46c0      	nop			@ (mov r8, r8)
 80032a8:	000003fe 	.word	0x000003fe
 80032ac:	0000041d 	.word	0x0000041d
 80032b0:	7fffffff 	.word	0x7fffffff
 80032b4:	00000433 	.word	0x00000433
 80032b8:	00000413 	.word	0x00000413
 80032bc:	fffffbed 	.word	0xfffffbed

080032c0 <__aeabi_i2d>:
 80032c0:	b570      	push	{r4, r5, r6, lr}
 80032c2:	2800      	cmp	r0, #0
 80032c4:	d016      	beq.n	80032f4 <__aeabi_i2d+0x34>
 80032c6:	17c3      	asrs	r3, r0, #31
 80032c8:	18c5      	adds	r5, r0, r3
 80032ca:	405d      	eors	r5, r3
 80032cc:	0fc4      	lsrs	r4, r0, #31
 80032ce:	0028      	movs	r0, r5
 80032d0:	f000 f914 	bl	80034fc <__clzsi2>
 80032d4:	4b10      	ldr	r3, [pc, #64]	@ (8003318 <__aeabi_i2d+0x58>)
 80032d6:	1a1b      	subs	r3, r3, r0
 80032d8:	055b      	lsls	r3, r3, #21
 80032da:	0d5b      	lsrs	r3, r3, #21
 80032dc:	280a      	cmp	r0, #10
 80032de:	dc14      	bgt.n	800330a <__aeabi_i2d+0x4a>
 80032e0:	0002      	movs	r2, r0
 80032e2:	002e      	movs	r6, r5
 80032e4:	3215      	adds	r2, #21
 80032e6:	4096      	lsls	r6, r2
 80032e8:	220b      	movs	r2, #11
 80032ea:	1a12      	subs	r2, r2, r0
 80032ec:	40d5      	lsrs	r5, r2
 80032ee:	032d      	lsls	r5, r5, #12
 80032f0:	0b2d      	lsrs	r5, r5, #12
 80032f2:	e003      	b.n	80032fc <__aeabi_i2d+0x3c>
 80032f4:	2400      	movs	r4, #0
 80032f6:	2300      	movs	r3, #0
 80032f8:	2500      	movs	r5, #0
 80032fa:	2600      	movs	r6, #0
 80032fc:	051b      	lsls	r3, r3, #20
 80032fe:	432b      	orrs	r3, r5
 8003300:	07e4      	lsls	r4, r4, #31
 8003302:	4323      	orrs	r3, r4
 8003304:	0030      	movs	r0, r6
 8003306:	0019      	movs	r1, r3
 8003308:	bd70      	pop	{r4, r5, r6, pc}
 800330a:	380b      	subs	r0, #11
 800330c:	4085      	lsls	r5, r0
 800330e:	032d      	lsls	r5, r5, #12
 8003310:	2600      	movs	r6, #0
 8003312:	0b2d      	lsrs	r5, r5, #12
 8003314:	e7f2      	b.n	80032fc <__aeabi_i2d+0x3c>
 8003316:	46c0      	nop			@ (mov r8, r8)
 8003318:	0000041e 	.word	0x0000041e

0800331c <__aeabi_ui2d>:
 800331c:	b510      	push	{r4, lr}
 800331e:	1e04      	subs	r4, r0, #0
 8003320:	d010      	beq.n	8003344 <__aeabi_ui2d+0x28>
 8003322:	f000 f8eb 	bl	80034fc <__clzsi2>
 8003326:	4b0e      	ldr	r3, [pc, #56]	@ (8003360 <__aeabi_ui2d+0x44>)
 8003328:	1a1b      	subs	r3, r3, r0
 800332a:	055b      	lsls	r3, r3, #21
 800332c:	0d5b      	lsrs	r3, r3, #21
 800332e:	280a      	cmp	r0, #10
 8003330:	dc0f      	bgt.n	8003352 <__aeabi_ui2d+0x36>
 8003332:	220b      	movs	r2, #11
 8003334:	0021      	movs	r1, r4
 8003336:	1a12      	subs	r2, r2, r0
 8003338:	40d1      	lsrs	r1, r2
 800333a:	3015      	adds	r0, #21
 800333c:	030a      	lsls	r2, r1, #12
 800333e:	4084      	lsls	r4, r0
 8003340:	0b12      	lsrs	r2, r2, #12
 8003342:	e001      	b.n	8003348 <__aeabi_ui2d+0x2c>
 8003344:	2300      	movs	r3, #0
 8003346:	2200      	movs	r2, #0
 8003348:	051b      	lsls	r3, r3, #20
 800334a:	4313      	orrs	r3, r2
 800334c:	0020      	movs	r0, r4
 800334e:	0019      	movs	r1, r3
 8003350:	bd10      	pop	{r4, pc}
 8003352:	0022      	movs	r2, r4
 8003354:	380b      	subs	r0, #11
 8003356:	4082      	lsls	r2, r0
 8003358:	0312      	lsls	r2, r2, #12
 800335a:	2400      	movs	r4, #0
 800335c:	0b12      	lsrs	r2, r2, #12
 800335e:	e7f3      	b.n	8003348 <__aeabi_ui2d+0x2c>
 8003360:	0000041e 	.word	0x0000041e

08003364 <__aeabi_f2d>:
 8003364:	b570      	push	{r4, r5, r6, lr}
 8003366:	0242      	lsls	r2, r0, #9
 8003368:	0043      	lsls	r3, r0, #1
 800336a:	0fc4      	lsrs	r4, r0, #31
 800336c:	20fe      	movs	r0, #254	@ 0xfe
 800336e:	0e1b      	lsrs	r3, r3, #24
 8003370:	1c59      	adds	r1, r3, #1
 8003372:	0a55      	lsrs	r5, r2, #9
 8003374:	4208      	tst	r0, r1
 8003376:	d00c      	beq.n	8003392 <__aeabi_f2d+0x2e>
 8003378:	21e0      	movs	r1, #224	@ 0xe0
 800337a:	0089      	lsls	r1, r1, #2
 800337c:	468c      	mov	ip, r1
 800337e:	076d      	lsls	r5, r5, #29
 8003380:	0b12      	lsrs	r2, r2, #12
 8003382:	4463      	add	r3, ip
 8003384:	051b      	lsls	r3, r3, #20
 8003386:	4313      	orrs	r3, r2
 8003388:	07e4      	lsls	r4, r4, #31
 800338a:	4323      	orrs	r3, r4
 800338c:	0028      	movs	r0, r5
 800338e:	0019      	movs	r1, r3
 8003390:	bd70      	pop	{r4, r5, r6, pc}
 8003392:	2b00      	cmp	r3, #0
 8003394:	d114      	bne.n	80033c0 <__aeabi_f2d+0x5c>
 8003396:	2d00      	cmp	r5, #0
 8003398:	d01b      	beq.n	80033d2 <__aeabi_f2d+0x6e>
 800339a:	0028      	movs	r0, r5
 800339c:	f000 f8ae 	bl	80034fc <__clzsi2>
 80033a0:	280a      	cmp	r0, #10
 80033a2:	dc1c      	bgt.n	80033de <__aeabi_f2d+0x7a>
 80033a4:	230b      	movs	r3, #11
 80033a6:	002a      	movs	r2, r5
 80033a8:	1a1b      	subs	r3, r3, r0
 80033aa:	40da      	lsrs	r2, r3
 80033ac:	0003      	movs	r3, r0
 80033ae:	3315      	adds	r3, #21
 80033b0:	409d      	lsls	r5, r3
 80033b2:	4b0e      	ldr	r3, [pc, #56]	@ (80033ec <__aeabi_f2d+0x88>)
 80033b4:	0312      	lsls	r2, r2, #12
 80033b6:	1a1b      	subs	r3, r3, r0
 80033b8:	055b      	lsls	r3, r3, #21
 80033ba:	0b12      	lsrs	r2, r2, #12
 80033bc:	0d5b      	lsrs	r3, r3, #21
 80033be:	e7e1      	b.n	8003384 <__aeabi_f2d+0x20>
 80033c0:	2d00      	cmp	r5, #0
 80033c2:	d009      	beq.n	80033d8 <__aeabi_f2d+0x74>
 80033c4:	0b13      	lsrs	r3, r2, #12
 80033c6:	2280      	movs	r2, #128	@ 0x80
 80033c8:	0312      	lsls	r2, r2, #12
 80033ca:	431a      	orrs	r2, r3
 80033cc:	076d      	lsls	r5, r5, #29
 80033ce:	4b08      	ldr	r3, [pc, #32]	@ (80033f0 <__aeabi_f2d+0x8c>)
 80033d0:	e7d8      	b.n	8003384 <__aeabi_f2d+0x20>
 80033d2:	2300      	movs	r3, #0
 80033d4:	2200      	movs	r2, #0
 80033d6:	e7d5      	b.n	8003384 <__aeabi_f2d+0x20>
 80033d8:	2200      	movs	r2, #0
 80033da:	4b05      	ldr	r3, [pc, #20]	@ (80033f0 <__aeabi_f2d+0x8c>)
 80033dc:	e7d2      	b.n	8003384 <__aeabi_f2d+0x20>
 80033de:	0003      	movs	r3, r0
 80033e0:	002a      	movs	r2, r5
 80033e2:	3b0b      	subs	r3, #11
 80033e4:	409a      	lsls	r2, r3
 80033e6:	2500      	movs	r5, #0
 80033e8:	e7e3      	b.n	80033b2 <__aeabi_f2d+0x4e>
 80033ea:	46c0      	nop			@ (mov r8, r8)
 80033ec:	00000389 	.word	0x00000389
 80033f0:	000007ff 	.word	0x000007ff

080033f4 <__aeabi_d2f>:
 80033f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033f6:	004b      	lsls	r3, r1, #1
 80033f8:	030f      	lsls	r7, r1, #12
 80033fa:	0d5b      	lsrs	r3, r3, #21
 80033fc:	4c3b      	ldr	r4, [pc, #236]	@ (80034ec <__aeabi_d2f+0xf8>)
 80033fe:	0f45      	lsrs	r5, r0, #29
 8003400:	b083      	sub	sp, #12
 8003402:	0a7f      	lsrs	r7, r7, #9
 8003404:	1c5e      	adds	r6, r3, #1
 8003406:	432f      	orrs	r7, r5
 8003408:	9000      	str	r0, [sp, #0]
 800340a:	9101      	str	r1, [sp, #4]
 800340c:	0fca      	lsrs	r2, r1, #31
 800340e:	00c5      	lsls	r5, r0, #3
 8003410:	4226      	tst	r6, r4
 8003412:	d00b      	beq.n	800342c <__aeabi_d2f+0x38>
 8003414:	4936      	ldr	r1, [pc, #216]	@ (80034f0 <__aeabi_d2f+0xfc>)
 8003416:	185c      	adds	r4, r3, r1
 8003418:	2cfe      	cmp	r4, #254	@ 0xfe
 800341a:	dd13      	ble.n	8003444 <__aeabi_d2f+0x50>
 800341c:	20ff      	movs	r0, #255	@ 0xff
 800341e:	2300      	movs	r3, #0
 8003420:	05c0      	lsls	r0, r0, #23
 8003422:	4318      	orrs	r0, r3
 8003424:	07d2      	lsls	r2, r2, #31
 8003426:	4310      	orrs	r0, r2
 8003428:	b003      	add	sp, #12
 800342a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800342c:	2b00      	cmp	r3, #0
 800342e:	d102      	bne.n	8003436 <__aeabi_d2f+0x42>
 8003430:	2000      	movs	r0, #0
 8003432:	2300      	movs	r3, #0
 8003434:	e7f4      	b.n	8003420 <__aeabi_d2f+0x2c>
 8003436:	433d      	orrs	r5, r7
 8003438:	d0f0      	beq.n	800341c <__aeabi_d2f+0x28>
 800343a:	2380      	movs	r3, #128	@ 0x80
 800343c:	03db      	lsls	r3, r3, #15
 800343e:	20ff      	movs	r0, #255	@ 0xff
 8003440:	433b      	orrs	r3, r7
 8003442:	e7ed      	b.n	8003420 <__aeabi_d2f+0x2c>
 8003444:	2c00      	cmp	r4, #0
 8003446:	dd14      	ble.n	8003472 <__aeabi_d2f+0x7e>
 8003448:	9b00      	ldr	r3, [sp, #0]
 800344a:	00ff      	lsls	r7, r7, #3
 800344c:	019b      	lsls	r3, r3, #6
 800344e:	1e58      	subs	r0, r3, #1
 8003450:	4183      	sbcs	r3, r0
 8003452:	0f69      	lsrs	r1, r5, #29
 8003454:	433b      	orrs	r3, r7
 8003456:	430b      	orrs	r3, r1
 8003458:	0759      	lsls	r1, r3, #29
 800345a:	d041      	beq.n	80034e0 <__aeabi_d2f+0xec>
 800345c:	210f      	movs	r1, #15
 800345e:	4019      	ands	r1, r3
 8003460:	2904      	cmp	r1, #4
 8003462:	d028      	beq.n	80034b6 <__aeabi_d2f+0xc2>
 8003464:	3304      	adds	r3, #4
 8003466:	0159      	lsls	r1, r3, #5
 8003468:	d525      	bpl.n	80034b6 <__aeabi_d2f+0xc2>
 800346a:	3401      	adds	r4, #1
 800346c:	2300      	movs	r3, #0
 800346e:	b2e0      	uxtb	r0, r4
 8003470:	e7d6      	b.n	8003420 <__aeabi_d2f+0x2c>
 8003472:	0021      	movs	r1, r4
 8003474:	3117      	adds	r1, #23
 8003476:	dbdb      	blt.n	8003430 <__aeabi_d2f+0x3c>
 8003478:	2180      	movs	r1, #128	@ 0x80
 800347a:	201e      	movs	r0, #30
 800347c:	0409      	lsls	r1, r1, #16
 800347e:	4339      	orrs	r1, r7
 8003480:	1b00      	subs	r0, r0, r4
 8003482:	281f      	cmp	r0, #31
 8003484:	dd1b      	ble.n	80034be <__aeabi_d2f+0xca>
 8003486:	2602      	movs	r6, #2
 8003488:	4276      	negs	r6, r6
 800348a:	1b34      	subs	r4, r6, r4
 800348c:	000e      	movs	r6, r1
 800348e:	40e6      	lsrs	r6, r4
 8003490:	0034      	movs	r4, r6
 8003492:	2820      	cmp	r0, #32
 8003494:	d004      	beq.n	80034a0 <__aeabi_d2f+0xac>
 8003496:	4817      	ldr	r0, [pc, #92]	@ (80034f4 <__aeabi_d2f+0x100>)
 8003498:	4684      	mov	ip, r0
 800349a:	4463      	add	r3, ip
 800349c:	4099      	lsls	r1, r3
 800349e:	430d      	orrs	r5, r1
 80034a0:	002b      	movs	r3, r5
 80034a2:	1e59      	subs	r1, r3, #1
 80034a4:	418b      	sbcs	r3, r1
 80034a6:	4323      	orrs	r3, r4
 80034a8:	0759      	lsls	r1, r3, #29
 80034aa:	d015      	beq.n	80034d8 <__aeabi_d2f+0xe4>
 80034ac:	210f      	movs	r1, #15
 80034ae:	2400      	movs	r4, #0
 80034b0:	4019      	ands	r1, r3
 80034b2:	2904      	cmp	r1, #4
 80034b4:	d117      	bne.n	80034e6 <__aeabi_d2f+0xf2>
 80034b6:	019b      	lsls	r3, r3, #6
 80034b8:	0a5b      	lsrs	r3, r3, #9
 80034ba:	b2e0      	uxtb	r0, r4
 80034bc:	e7b0      	b.n	8003420 <__aeabi_d2f+0x2c>
 80034be:	4c0e      	ldr	r4, [pc, #56]	@ (80034f8 <__aeabi_d2f+0x104>)
 80034c0:	191c      	adds	r4, r3, r4
 80034c2:	002b      	movs	r3, r5
 80034c4:	40a5      	lsls	r5, r4
 80034c6:	40c3      	lsrs	r3, r0
 80034c8:	40a1      	lsls	r1, r4
 80034ca:	1e68      	subs	r0, r5, #1
 80034cc:	4185      	sbcs	r5, r0
 80034ce:	4329      	orrs	r1, r5
 80034d0:	430b      	orrs	r3, r1
 80034d2:	2400      	movs	r4, #0
 80034d4:	0759      	lsls	r1, r3, #29
 80034d6:	d1c1      	bne.n	800345c <__aeabi_d2f+0x68>
 80034d8:	019b      	lsls	r3, r3, #6
 80034da:	2000      	movs	r0, #0
 80034dc:	0a5b      	lsrs	r3, r3, #9
 80034de:	e79f      	b.n	8003420 <__aeabi_d2f+0x2c>
 80034e0:	08db      	lsrs	r3, r3, #3
 80034e2:	b2e0      	uxtb	r0, r4
 80034e4:	e79c      	b.n	8003420 <__aeabi_d2f+0x2c>
 80034e6:	3304      	adds	r3, #4
 80034e8:	e7e5      	b.n	80034b6 <__aeabi_d2f+0xc2>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	000007fe 	.word	0x000007fe
 80034f0:	fffffc80 	.word	0xfffffc80
 80034f4:	fffffca2 	.word	0xfffffca2
 80034f8:	fffffc82 	.word	0xfffffc82

080034fc <__clzsi2>:
 80034fc:	211c      	movs	r1, #28
 80034fe:	2301      	movs	r3, #1
 8003500:	041b      	lsls	r3, r3, #16
 8003502:	4298      	cmp	r0, r3
 8003504:	d301      	bcc.n	800350a <__clzsi2+0xe>
 8003506:	0c00      	lsrs	r0, r0, #16
 8003508:	3910      	subs	r1, #16
 800350a:	0a1b      	lsrs	r3, r3, #8
 800350c:	4298      	cmp	r0, r3
 800350e:	d301      	bcc.n	8003514 <__clzsi2+0x18>
 8003510:	0a00      	lsrs	r0, r0, #8
 8003512:	3908      	subs	r1, #8
 8003514:	091b      	lsrs	r3, r3, #4
 8003516:	4298      	cmp	r0, r3
 8003518:	d301      	bcc.n	800351e <__clzsi2+0x22>
 800351a:	0900      	lsrs	r0, r0, #4
 800351c:	3904      	subs	r1, #4
 800351e:	a202      	add	r2, pc, #8	@ (adr r2, 8003528 <__clzsi2+0x2c>)
 8003520:	5c10      	ldrb	r0, [r2, r0]
 8003522:	1840      	adds	r0, r0, r1
 8003524:	4770      	bx	lr
 8003526:	46c0      	nop			@ (mov r8, r8)
 8003528:	02020304 	.word	0x02020304
 800352c:	01010101 	.word	0x01010101
	...

08003538 <__clzdi2>:
 8003538:	b510      	push	{r4, lr}
 800353a:	2900      	cmp	r1, #0
 800353c:	d103      	bne.n	8003546 <__clzdi2+0xe>
 800353e:	f7ff ffdd 	bl	80034fc <__clzsi2>
 8003542:	3020      	adds	r0, #32
 8003544:	e002      	b.n	800354c <__clzdi2+0x14>
 8003546:	0008      	movs	r0, r1
 8003548:	f7ff ffd8 	bl	80034fc <__clzsi2>
 800354c:	bd10      	pop	{r4, pc}
 800354e:	46c0      	nop			@ (mov r8, r8)

08003550 <__io_putchar>:

/* USER CODE BEGIN PV */

// printf() function
int __io_putchar(int ch)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint8_t temp = ch;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	b2da      	uxtb	r2, r3
 800355c:	210f      	movs	r1, #15
 800355e:	187b      	adds	r3, r7, r1
 8003560:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, &temp, 1, HAL_MAX_DELAY);
 8003562:	2301      	movs	r3, #1
 8003564:	425b      	negs	r3, r3
 8003566:	1879      	adds	r1, r7, r1
 8003568:	4804      	ldr	r0, [pc, #16]	@ (800357c <__io_putchar+0x2c>)
 800356a:	2201      	movs	r2, #1
 800356c:	f003 fa28 	bl	80069c0 <HAL_UART_Transmit>
  return ch;
 8003570:	687b      	ldr	r3, [r7, #4]
}
 8003572:	0018      	movs	r0, r3
 8003574:	46bd      	mov	sp, r7
 8003576:	b004      	add	sp, #16
 8003578:	bd80      	pop	{r7, pc}
 800357a:	46c0      	nop			@ (mov r8, r8)
 800357c:	20000244 	.word	0x20000244

08003580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003586:	f001 f935 	bl	80047f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800358a:	f000 f86f 	bl	800366c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800358e:	f000 f94b 	bl	8003828 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003592:	f000 f919 	bl	80037c8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003596:	f000 f8d7 	bl	8003748 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // Initiation
	max30102_init(&max30102, &hi2c1);
 800359a:	4a31      	ldr	r2, [pc, #196]	@ (8003660 <main+0xe0>)
 800359c:	4b31      	ldr	r3, [pc, #196]	@ (8003664 <main+0xe4>)
 800359e:	0011      	movs	r1, r2
 80035a0:	0018      	movs	r0, r3
 80035a2:	f000 f9bc 	bl	800391e <max30102_init>
	max30102_reset(&max30102);
 80035a6:	4b2f      	ldr	r3, [pc, #188]	@ (8003664 <main+0xe4>)
 80035a8:	0018      	movs	r0, r3
 80035aa:	f000 fa46 	bl	8003a3a <max30102_reset>
	max30102_clear_fifo(&max30102);
 80035ae:	4b2d      	ldr	r3, [pc, #180]	@ (8003664 <main+0xe4>)
 80035b0:	0018      	movs	r0, r3
 80035b2:	f000 fbfa 	bl	8003daa <max30102_clear_fifo>
	max30102_set_fifo_config(&max30102, max30102_smp_ave_8, 1, 7);
 80035b6:	482b      	ldr	r0, [pc, #172]	@ (8003664 <main+0xe4>)
 80035b8:	2307      	movs	r3, #7
 80035ba:	2201      	movs	r2, #1
 80035bc:	2103      	movs	r1, #3
 80035be:	f000 fbad 	bl	8003d1c <max30102_set_fifo_config>

	// Sensor settings
	max30102_set_led_pulse_width(&max30102, max30102_pw_16_bit);
 80035c2:	4b28      	ldr	r3, [pc, #160]	@ (8003664 <main+0xe4>)
 80035c4:	2101      	movs	r1, #1
 80035c6:	0018      	movs	r0, r3
 80035c8:	f000 fb0d 	bl	8003be6 <max30102_set_led_pulse_width>
	max30102_set_adc_resolution(&max30102, max30102_adc_2048);
 80035cc:	4b25      	ldr	r3, [pc, #148]	@ (8003664 <main+0xe4>)
 80035ce:	2100      	movs	r1, #0
 80035d0:	0018      	movs	r0, r3
 80035d2:	f000 fb2f 	bl	8003c34 <max30102_set_adc_resolution>
	max30102_set_sampling_rate(&max30102, max30102_sr_800);
 80035d6:	4b23      	ldr	r3, [pc, #140]	@ (8003664 <main+0xe4>)
 80035d8:	2104      	movs	r1, #4
 80035da:	0018      	movs	r0, r3
 80035dc:	f000 fadb 	bl	8003b96 <max30102_set_sampling_rate>
	max30102_set_led_current_1(&max30102, 6.2);
 80035e0:	4a21      	ldr	r2, [pc, #132]	@ (8003668 <main+0xe8>)
 80035e2:	4b20      	ldr	r3, [pc, #128]	@ (8003664 <main+0xe4>)
 80035e4:	1c11      	adds	r1, r2, #0
 80035e6:	0018      	movs	r0, r3
 80035e8:	f000 fb4c 	bl	8003c84 <max30102_set_led_current_1>
	max30102_set_led_current_2(&max30102, 6.2);
 80035ec:	4a1e      	ldr	r2, [pc, #120]	@ (8003668 <main+0xe8>)
 80035ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003664 <main+0xe4>)
 80035f0:	1c11      	adds	r1, r2, #0
 80035f2:	0018      	movs	r0, r3
 80035f4:	f000 fb6c 	bl	8003cd0 <max30102_set_led_current_2>

	// Enter SpO2 mode
	max30102_set_mode(&max30102, max30102_spo2);
 80035f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003664 <main+0xe4>)
 80035fa:	2103      	movs	r1, #3
 80035fc:	0018      	movs	r0, r3
 80035fe:	f000 fa9f 	bl	8003b40 <max30102_set_mode>
	max30102_set_a_full(&max30102, 1);
 8003602:	4b18      	ldr	r3, [pc, #96]	@ (8003664 <main+0xe4>)
 8003604:	2101      	movs	r1, #1
 8003606:	0018      	movs	r0, r3
 8003608:	f000 fa29 	bl	8003a5e <max30102_set_a_full>

	// Initiate 1 temperature measurement
	max30102_set_die_temp_en(&max30102, 1);
 800360c:	4b15      	ldr	r3, [pc, #84]	@ (8003664 <main+0xe4>)
 800360e:	2101      	movs	r1, #1
 8003610:	0018      	movs	r0, r3
 8003612:	f000 fa6f 	bl	8003af4 <max30102_set_die_temp_en>
	max30102_set_die_temp_rdy(&max30102, 1);
 8003616:	4b13      	ldr	r3, [pc, #76]	@ (8003664 <main+0xe4>)
 8003618:	2101      	movs	r1, #1
 800361a:	0018      	movs	r0, r3
 800361c:	f000 fa4f 	bl	8003abe <max30102_set_die_temp_rdy>

	uint8_t en_reg[2] = {0};
 8003620:	210c      	movs	r1, #12
 8003622:	187b      	adds	r3, r7, r1
 8003624:	2200      	movs	r2, #0
 8003626:	801a      	strh	r2, [r3, #0]
	max30102_read(&max30102, 0x00, en_reg, 1);
 8003628:	187a      	adds	r2, r7, r1
 800362a:	480e      	ldr	r0, [pc, #56]	@ (8003664 <main+0xe4>)
 800362c:	2301      	movs	r3, #1
 800362e:	2100      	movs	r1, #0
 8003630:	f000 f9d5 	bl	80039de <max30102_read>
  initialize_filters_1();
 8003634:	f000 feb4 	bl	80043a0 <initialize_filters_1>
  initialize_filters_2();
 8003638:	f000 fedc 	bl	80043f4 <initialize_filters_2>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // init
	  Max30102Samples samples = max30102_read_fifo(&max30102);
 800363c:	1d3b      	adds	r3, r7, #4
 800363e:	4a09      	ldr	r2, [pc, #36]	@ (8003664 <main+0xe4>)
 8003640:	0011      	movs	r1, r2
 8003642:	0018      	movs	r0, r3
 8003644:	f000 fbd0 	bl	8003de8 <max30102_read_fifo>
	  uint32_t latest_red_value = samples.red_sample;
 8003648:	1d3b      	adds	r3, r7, #4
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	617b      	str	r3, [r7, #20]
	  uint32_t latest_ir_value = samples.ir_sample;
 800364e:	1d3b      	adds	r3, r7, #4
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	613b      	str	r3, [r7, #16]
//	  HAL_UART_Transmit(&huart2, (uint8_t *)buffer1, len, HAL_MAX_DELAY);



	  //Part 2.1
	  calculate_heart_rate(latest_red_value);
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	0018      	movs	r0, r3
 8003658:	f000 fd96 	bl	8004188 <calculate_heart_rate>
  {
 800365c:	46c0      	nop			@ (mov r8, r8)
 800365e:	e7ed      	b.n	800363c <main+0xbc>
 8003660:	200001f0 	.word	0x200001f0
 8003664:	200002cc 	.word	0x200002cc
 8003668:	40c66666 	.word	0x40c66666

0800366c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800366c:	b590      	push	{r4, r7, lr}
 800366e:	b09f      	sub	sp, #124	@ 0x7c
 8003670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003672:	2440      	movs	r4, #64	@ 0x40
 8003674:	193b      	adds	r3, r7, r4
 8003676:	0018      	movs	r0, r3
 8003678:	2338      	movs	r3, #56	@ 0x38
 800367a:	001a      	movs	r2, r3
 800367c:	2100      	movs	r1, #0
 800367e:	f004 ff7d 	bl	800857c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003682:	232c      	movs	r3, #44	@ 0x2c
 8003684:	18fb      	adds	r3, r7, r3
 8003686:	0018      	movs	r0, r3
 8003688:	2314      	movs	r3, #20
 800368a:	001a      	movs	r2, r3
 800368c:	2100      	movs	r1, #0
 800368e:	f004 ff75 	bl	800857c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003692:	1d3b      	adds	r3, r7, #4
 8003694:	0018      	movs	r0, r3
 8003696:	2328      	movs	r3, #40	@ 0x28
 8003698:	001a      	movs	r2, r3
 800369a:	2100      	movs	r1, #0
 800369c:	f004 ff6e 	bl	800857c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80036a0:	4b27      	ldr	r3, [pc, #156]	@ (8003740 <SystemClock_Config+0xd4>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a27      	ldr	r2, [pc, #156]	@ (8003744 <SystemClock_Config+0xd8>)
 80036a6:	401a      	ands	r2, r3
 80036a8:	4b25      	ldr	r3, [pc, #148]	@ (8003740 <SystemClock_Config+0xd4>)
 80036aa:	2180      	movs	r1, #128	@ 0x80
 80036ac:	0109      	lsls	r1, r1, #4
 80036ae:	430a      	orrs	r2, r1
 80036b0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80036b2:	0021      	movs	r1, r4
 80036b4:	187b      	adds	r3, r7, r1
 80036b6:	2210      	movs	r2, #16
 80036b8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80036ba:	187b      	adds	r3, r7, r1
 80036bc:	2201      	movs	r2, #1
 80036be:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80036c0:	187b      	adds	r3, r7, r1
 80036c2:	2200      	movs	r2, #0
 80036c4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80036c6:	187b      	adds	r3, r7, r1
 80036c8:	22a0      	movs	r2, #160	@ 0xa0
 80036ca:	0212      	lsls	r2, r2, #8
 80036cc:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80036ce:	187b      	adds	r3, r7, r1
 80036d0:	2200      	movs	r2, #0
 80036d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036d4:	187b      	adds	r3, r7, r1
 80036d6:	0018      	movs	r0, r3
 80036d8:	f002 f988 	bl	80059ec <HAL_RCC_OscConfig>
 80036dc:	1e03      	subs	r3, r0, #0
 80036de:	d001      	beq.n	80036e4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80036e0:	f000 f90e 	bl	8003900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036e4:	212c      	movs	r1, #44	@ 0x2c
 80036e6:	187b      	adds	r3, r7, r1
 80036e8:	220f      	movs	r2, #15
 80036ea:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80036ec:	187b      	adds	r3, r7, r1
 80036ee:	2200      	movs	r2, #0
 80036f0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036f2:	187b      	adds	r3, r7, r1
 80036f4:	2200      	movs	r2, #0
 80036f6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80036f8:	187b      	adds	r3, r7, r1
 80036fa:	2200      	movs	r2, #0
 80036fc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036fe:	187b      	adds	r3, r7, r1
 8003700:	2200      	movs	r2, #0
 8003702:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003704:	187b      	adds	r3, r7, r1
 8003706:	2100      	movs	r1, #0
 8003708:	0018      	movs	r0, r3
 800370a:	f002 fd43 	bl	8006194 <HAL_RCC_ClockConfig>
 800370e:	1e03      	subs	r3, r0, #0
 8003710:	d001      	beq.n	8003716 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8003712:	f000 f8f5 	bl	8003900 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8003716:	1d3b      	adds	r3, r7, #4
 8003718:	220a      	movs	r2, #10
 800371a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800371c:	1d3b      	adds	r3, r7, #4
 800371e:	2200      	movs	r2, #0
 8003720:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003722:	1d3b      	adds	r3, r7, #4
 8003724:	2200      	movs	r2, #0
 8003726:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003728:	1d3b      	adds	r3, r7, #4
 800372a:	0018      	movs	r0, r3
 800372c:	f002 ff56 	bl	80065dc <HAL_RCCEx_PeriphCLKConfig>
 8003730:	1e03      	subs	r3, r0, #0
 8003732:	d001      	beq.n	8003738 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8003734:	f000 f8e4 	bl	8003900 <Error_Handler>
  }
}
 8003738:	46c0      	nop			@ (mov r8, r8)
 800373a:	46bd      	mov	sp, r7
 800373c:	b01f      	add	sp, #124	@ 0x7c
 800373e:	bd90      	pop	{r4, r7, pc}
 8003740:	40007000 	.word	0x40007000
 8003744:	ffffe7ff 	.word	0xffffe7ff

08003748 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800374c:	4b1c      	ldr	r3, [pc, #112]	@ (80037c0 <MX_I2C1_Init+0x78>)
 800374e:	4a1d      	ldr	r2, [pc, #116]	@ (80037c4 <MX_I2C1_Init+0x7c>)
 8003750:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 8003752:	4b1b      	ldr	r3, [pc, #108]	@ (80037c0 <MX_I2C1_Init+0x78>)
 8003754:	22c1      	movs	r2, #193	@ 0xc1
 8003756:	00d2      	lsls	r2, r2, #3
 8003758:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800375a:	4b19      	ldr	r3, [pc, #100]	@ (80037c0 <MX_I2C1_Init+0x78>)
 800375c:	2200      	movs	r2, #0
 800375e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003760:	4b17      	ldr	r3, [pc, #92]	@ (80037c0 <MX_I2C1_Init+0x78>)
 8003762:	2201      	movs	r2, #1
 8003764:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003766:	4b16      	ldr	r3, [pc, #88]	@ (80037c0 <MX_I2C1_Init+0x78>)
 8003768:	2200      	movs	r2, #0
 800376a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800376c:	4b14      	ldr	r3, [pc, #80]	@ (80037c0 <MX_I2C1_Init+0x78>)
 800376e:	2200      	movs	r2, #0
 8003770:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003772:	4b13      	ldr	r3, [pc, #76]	@ (80037c0 <MX_I2C1_Init+0x78>)
 8003774:	2200      	movs	r2, #0
 8003776:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003778:	4b11      	ldr	r3, [pc, #68]	@ (80037c0 <MX_I2C1_Init+0x78>)
 800377a:	2200      	movs	r2, #0
 800377c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800377e:	4b10      	ldr	r3, [pc, #64]	@ (80037c0 <MX_I2C1_Init+0x78>)
 8003780:	2200      	movs	r2, #0
 8003782:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003784:	4b0e      	ldr	r3, [pc, #56]	@ (80037c0 <MX_I2C1_Init+0x78>)
 8003786:	0018      	movs	r0, r3
 8003788:	f001 fb44 	bl	8004e14 <HAL_I2C_Init>
 800378c:	1e03      	subs	r3, r0, #0
 800378e:	d001      	beq.n	8003794 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003790:	f000 f8b6 	bl	8003900 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003794:	4b0a      	ldr	r3, [pc, #40]	@ (80037c0 <MX_I2C1_Init+0x78>)
 8003796:	2100      	movs	r1, #0
 8003798:	0018      	movs	r0, r3
 800379a:	f002 f88f 	bl	80058bc <HAL_I2CEx_ConfigAnalogFilter>
 800379e:	1e03      	subs	r3, r0, #0
 80037a0:	d001      	beq.n	80037a6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80037a2:	f000 f8ad 	bl	8003900 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80037a6:	4b06      	ldr	r3, [pc, #24]	@ (80037c0 <MX_I2C1_Init+0x78>)
 80037a8:	2100      	movs	r1, #0
 80037aa:	0018      	movs	r0, r3
 80037ac:	f002 f8d2 	bl	8005954 <HAL_I2CEx_ConfigDigitalFilter>
 80037b0:	1e03      	subs	r3, r0, #0
 80037b2:	d001      	beq.n	80037b8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80037b4:	f000 f8a4 	bl	8003900 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80037b8:	46c0      	nop			@ (mov r8, r8)
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	46c0      	nop			@ (mov r8, r8)
 80037c0:	200001f0 	.word	0x200001f0
 80037c4:	40005400 	.word	0x40005400

080037c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80037cc:	4b14      	ldr	r3, [pc, #80]	@ (8003820 <MX_USART2_UART_Init+0x58>)
 80037ce:	4a15      	ldr	r2, [pc, #84]	@ (8003824 <MX_USART2_UART_Init+0x5c>)
 80037d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80037d2:	4b13      	ldr	r3, [pc, #76]	@ (8003820 <MX_USART2_UART_Init+0x58>)
 80037d4:	22e1      	movs	r2, #225	@ 0xe1
 80037d6:	0252      	lsls	r2, r2, #9
 80037d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80037da:	4b11      	ldr	r3, [pc, #68]	@ (8003820 <MX_USART2_UART_Init+0x58>)
 80037dc:	2200      	movs	r2, #0
 80037de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80037e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003820 <MX_USART2_UART_Init+0x58>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80037e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003820 <MX_USART2_UART_Init+0x58>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80037ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003820 <MX_USART2_UART_Init+0x58>)
 80037ee:	220c      	movs	r2, #12
 80037f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003820 <MX_USART2_UART_Init+0x58>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80037f8:	4b09      	ldr	r3, [pc, #36]	@ (8003820 <MX_USART2_UART_Init+0x58>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037fe:	4b08      	ldr	r3, [pc, #32]	@ (8003820 <MX_USART2_UART_Init+0x58>)
 8003800:	2200      	movs	r2, #0
 8003802:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003804:	4b06      	ldr	r3, [pc, #24]	@ (8003820 <MX_USART2_UART_Init+0x58>)
 8003806:	2200      	movs	r2, #0
 8003808:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800380a:	4b05      	ldr	r3, [pc, #20]	@ (8003820 <MX_USART2_UART_Init+0x58>)
 800380c:	0018      	movs	r0, r3
 800380e:	f003 f883 	bl	8006918 <HAL_UART_Init>
 8003812:	1e03      	subs	r3, r0, #0
 8003814:	d001      	beq.n	800381a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003816:	f000 f873 	bl	8003900 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800381a:	46c0      	nop			@ (mov r8, r8)
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	20000244 	.word	0x20000244
 8003824:	40004400 	.word	0x40004400

08003828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003828:	b590      	push	{r4, r7, lr}
 800382a:	b089      	sub	sp, #36	@ 0x24
 800382c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800382e:	240c      	movs	r4, #12
 8003830:	193b      	adds	r3, r7, r4
 8003832:	0018      	movs	r0, r3
 8003834:	2314      	movs	r3, #20
 8003836:	001a      	movs	r2, r3
 8003838:	2100      	movs	r1, #0
 800383a:	f004 fe9f 	bl	800857c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800383e:	4b2d      	ldr	r3, [pc, #180]	@ (80038f4 <MX_GPIO_Init+0xcc>)
 8003840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003842:	4b2c      	ldr	r3, [pc, #176]	@ (80038f4 <MX_GPIO_Init+0xcc>)
 8003844:	2104      	movs	r1, #4
 8003846:	430a      	orrs	r2, r1
 8003848:	62da      	str	r2, [r3, #44]	@ 0x2c
 800384a:	4b2a      	ldr	r3, [pc, #168]	@ (80038f4 <MX_GPIO_Init+0xcc>)
 800384c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800384e:	2204      	movs	r2, #4
 8003850:	4013      	ands	r3, r2
 8003852:	60bb      	str	r3, [r7, #8]
 8003854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003856:	4b27      	ldr	r3, [pc, #156]	@ (80038f4 <MX_GPIO_Init+0xcc>)
 8003858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800385a:	4b26      	ldr	r3, [pc, #152]	@ (80038f4 <MX_GPIO_Init+0xcc>)
 800385c:	2180      	movs	r1, #128	@ 0x80
 800385e:	430a      	orrs	r2, r1
 8003860:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003862:	4b24      	ldr	r3, [pc, #144]	@ (80038f4 <MX_GPIO_Init+0xcc>)
 8003864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003866:	2280      	movs	r2, #128	@ 0x80
 8003868:	4013      	ands	r3, r2
 800386a:	607b      	str	r3, [r7, #4]
 800386c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800386e:	4b21      	ldr	r3, [pc, #132]	@ (80038f4 <MX_GPIO_Init+0xcc>)
 8003870:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003872:	4b20      	ldr	r3, [pc, #128]	@ (80038f4 <MX_GPIO_Init+0xcc>)
 8003874:	2101      	movs	r1, #1
 8003876:	430a      	orrs	r2, r1
 8003878:	62da      	str	r2, [r3, #44]	@ 0x2c
 800387a:	4b1e      	ldr	r3, [pc, #120]	@ (80038f4 <MX_GPIO_Init+0xcc>)
 800387c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387e:	2201      	movs	r2, #1
 8003880:	4013      	ands	r3, r2
 8003882:	603b      	str	r3, [r7, #0]
 8003884:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003886:	23a0      	movs	r3, #160	@ 0xa0
 8003888:	05db      	lsls	r3, r3, #23
 800388a:	2200      	movs	r2, #0
 800388c:	2120      	movs	r1, #32
 800388e:	0018      	movs	r0, r3
 8003890:	f001 fa7c 	bl	8004d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin PC0 */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_PIN_0;
 8003894:	193b      	adds	r3, r7, r4
 8003896:	4a18      	ldr	r2, [pc, #96]	@ (80038f8 <MX_GPIO_Init+0xd0>)
 8003898:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800389a:	193b      	adds	r3, r7, r4
 800389c:	2284      	movs	r2, #132	@ 0x84
 800389e:	0392      	lsls	r2, r2, #14
 80038a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a2:	193b      	adds	r3, r7, r4
 80038a4:	2200      	movs	r2, #0
 80038a6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038a8:	193b      	adds	r3, r7, r4
 80038aa:	4a14      	ldr	r2, [pc, #80]	@ (80038fc <MX_GPIO_Init+0xd4>)
 80038ac:	0019      	movs	r1, r3
 80038ae:	0010      	movs	r0, r2
 80038b0:	f001 f8ee 	bl	8004a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80038b4:	0021      	movs	r1, r4
 80038b6:	187b      	adds	r3, r7, r1
 80038b8:	2220      	movs	r2, #32
 80038ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038bc:	187b      	adds	r3, r7, r1
 80038be:	2201      	movs	r2, #1
 80038c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c2:	187b      	adds	r3, r7, r1
 80038c4:	2200      	movs	r2, #0
 80038c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038c8:	187b      	adds	r3, r7, r1
 80038ca:	2200      	movs	r2, #0
 80038cc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80038ce:	187a      	adds	r2, r7, r1
 80038d0:	23a0      	movs	r3, #160	@ 0xa0
 80038d2:	05db      	lsls	r3, r3, #23
 80038d4:	0011      	movs	r1, r2
 80038d6:	0018      	movs	r0, r3
 80038d8:	f001 f8da 	bl	8004a90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80038dc:	2200      	movs	r2, #0
 80038de:	2100      	movs	r1, #0
 80038e0:	2005      	movs	r0, #5
 80038e2:	f001 f8a3 	bl	8004a2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80038e6:	2005      	movs	r0, #5
 80038e8:	f001 f8b5 	bl	8004a56 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80038ec:	46c0      	nop			@ (mov r8, r8)
 80038ee:	46bd      	mov	sp, r7
 80038f0:	b009      	add	sp, #36	@ 0x24
 80038f2:	bd90      	pop	{r4, r7, pc}
 80038f4:	40021000 	.word	0x40021000
 80038f8:	00002001 	.word	0x00002001
 80038fc:	50000800 	.word	0x50000800

08003900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003904:	b672      	cpsid	i
}
 8003906:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003908:	46c0      	nop			@ (mov r8, r8)
 800390a:	e7fd      	b.n	8003908 <Error_Handler+0x8>

0800390c <max30102_plot>:
 * @note Override this in your main.c if you do not use printf() for printing.
 * @param ir_sample
 * @param red_sample
 */
__weak void max30102_plot(uint32_t ir_sample, uint32_t red_sample)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
    UNUSED(ir_sample);
    UNUSED(red_sample);
}
 8003916:	46c0      	nop			@ (mov r8, r8)
 8003918:	46bd      	mov	sp, r7
 800391a:	b002      	add	sp, #8
 800391c:	bd80      	pop	{r7, pc}

0800391e <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b082      	sub	sp, #8
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
 8003926:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	601a      	str	r2, [r3, #0]
    obj->_interrupt_flag = 0;
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	2382      	movs	r3, #130	@ 0x82
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	2100      	movs	r1, #0
 8003936:	54d1      	strb	r1, [r2, r3]
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3304      	adds	r3, #4
 800393c:	2280      	movs	r2, #128	@ 0x80
 800393e:	2100      	movs	r1, #0
 8003940:	0018      	movs	r0, r3
 8003942:	f004 fe1b 	bl	800857c <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	3384      	adds	r3, #132	@ 0x84
 800394a:	2280      	movs	r2, #128	@ 0x80
 800394c:	2100      	movs	r1, #0
 800394e:	0018      	movs	r0, r3
 8003950:	f004 fe14 	bl	800857c <memset>
}
 8003954:	46c0      	nop			@ (mov r8, r8)
 8003956:	46bd      	mov	sp, r7
 8003958:	b002      	add	sp, #8
 800395a:	bd80      	pop	{r7, pc}

0800395c <max30102_write>:
 * @param reg Register address to write to.
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */
void max30102_write(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 800395c:	b5b0      	push	{r4, r5, r7, lr}
 800395e:	b088      	sub	sp, #32
 8003960:	af02      	add	r7, sp, #8
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	0008      	movs	r0, r1
 8003966:	607a      	str	r2, [r7, #4]
 8003968:	0019      	movs	r1, r3
 800396a:	250b      	movs	r5, #11
 800396c:	197b      	adds	r3, r7, r5
 800396e:	1c02      	adds	r2, r0, #0
 8003970:	701a      	strb	r2, [r3, #0]
 8003972:	2408      	movs	r4, #8
 8003974:	193b      	adds	r3, r7, r4
 8003976:	1c0a      	adds	r2, r1, #0
 8003978:	801a      	strh	r2, [r3, #0]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 800397a:	193b      	adds	r3, r7, r4
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	3301      	adds	r3, #1
 8003980:	0018      	movs	r0, r3
 8003982:	f003 fd85 	bl	8007490 <malloc>
 8003986:	0003      	movs	r3, r0
 8003988:	617b      	str	r3, [r7, #20]
    *payload = reg;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	197a      	adds	r2, r7, r5
 800398e:	7812      	ldrb	r2, [r2, #0]
 8003990:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00b      	beq.n	80039b0 <max30102_write+0x54>
 8003998:	193b      	adds	r3, r7, r4
 800399a:	881b      	ldrh	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d007      	beq.n	80039b0 <max30102_write+0x54>
        memcpy(payload + 1, buf, buflen);
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	1c58      	adds	r0, r3, #1
 80039a4:	193b      	adds	r3, r7, r4
 80039a6:	881a      	ldrh	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	0019      	movs	r1, r3
 80039ac:	f004 fe8a 	bl	80086c4 <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6818      	ldr	r0, [r3, #0]
 80039b4:	2308      	movs	r3, #8
 80039b6:	18fb      	adds	r3, r7, r3
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	3301      	adds	r3, #1
 80039bc:	b299      	uxth	r1, r3
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	23fa      	movs	r3, #250	@ 0xfa
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	000b      	movs	r3, r1
 80039c8:	21ae      	movs	r1, #174	@ 0xae
 80039ca:	f001 fab9 	bl	8004f40 <HAL_I2C_Master_Transmit>
    free(payload);
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	0018      	movs	r0, r3
 80039d2:	f003 fd67 	bl	80074a4 <free>
}
 80039d6:	46c0      	nop			@ (mov r8, r8)
 80039d8:	46bd      	mov	sp, r7
 80039da:	b006      	add	sp, #24
 80039dc:	bdb0      	pop	{r4, r5, r7, pc}

080039de <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 80039de:	b5b0      	push	{r4, r5, r7, lr}
 80039e0:	b088      	sub	sp, #32
 80039e2:	af02      	add	r7, sp, #8
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	0008      	movs	r0, r1
 80039e8:	607a      	str	r2, [r7, #4]
 80039ea:	0019      	movs	r1, r3
 80039ec:	240b      	movs	r4, #11
 80039ee:	193b      	adds	r3, r7, r4
 80039f0:	1c02      	adds	r2, r0, #0
 80039f2:	701a      	strb	r2, [r3, #0]
 80039f4:	2508      	movs	r5, #8
 80039f6:	197b      	adds	r3, r7, r5
 80039f8:	1c0a      	adds	r2, r1, #0
 80039fa:	801a      	strh	r2, [r3, #0]
    uint8_t reg_addr = reg;
 80039fc:	2117      	movs	r1, #23
 80039fe:	187b      	adds	r3, r7, r1
 8003a00:	193a      	adds	r2, r7, r4
 8003a02:	7812      	ldrb	r2, [r2, #0]
 8003a04:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6818      	ldr	r0, [r3, #0]
 8003a0a:	187a      	adds	r2, r7, r1
 8003a0c:	23fa      	movs	r3, #250	@ 0xfa
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	2301      	movs	r3, #1
 8003a14:	21ae      	movs	r1, #174	@ 0xae
 8003a16:	f001 fa93 	bl	8004f40 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6818      	ldr	r0, [r3, #0]
 8003a1e:	197b      	adds	r3, r7, r5
 8003a20:	8819      	ldrh	r1, [r3, #0]
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	23fa      	movs	r3, #250	@ 0xfa
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	000b      	movs	r3, r1
 8003a2c:	21ae      	movs	r1, #174	@ 0xae
 8003a2e:	f001 fb8f 	bl	8005150 <HAL_I2C_Master_Receive>
}
 8003a32:	46c0      	nop			@ (mov r8, r8)
 8003a34:	46bd      	mov	sp, r7
 8003a36:	b006      	add	sp, #24
 8003a38:	bdb0      	pop	{r4, r5, r7, pc}

08003a3a <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102_t *obj)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b084      	sub	sp, #16
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 8003a42:	210f      	movs	r1, #15
 8003a44:	187b      	adds	r3, r7, r1
 8003a46:	2240      	movs	r2, #64	@ 0x40
 8003a48:	701a      	strb	r2, [r3, #0]
    max30102_write(obj, MAX30102_MODE_CONFIG, &val, 1);
 8003a4a:	187a      	adds	r2, r7, r1
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	2301      	movs	r3, #1
 8003a50:	2109      	movs	r1, #9
 8003a52:	f7ff ff83 	bl	800395c <max30102_write>
}
 8003a56:	46c0      	nop			@ (mov r8, r8)
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	b004      	add	sp, #16
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <max30102_set_a_full>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_a_full(max30102_t *obj, uint8_t enable)
{
 8003a5e:	b590      	push	{r4, r7, lr}
 8003a60:	b085      	sub	sp, #20
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
 8003a66:	000a      	movs	r2, r1
 8003a68:	1cfb      	adds	r3, r7, #3
 8003a6a:	701a      	strb	r2, [r3, #0]
    uint8_t reg = 0;
 8003a6c:	210f      	movs	r1, #15
 8003a6e:	187b      	adds	r3, r7, r1
 8003a70:	2200      	movs	r2, #0
 8003a72:	701a      	strb	r2, [r3, #0]
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8003a74:	000c      	movs	r4, r1
 8003a76:	187a      	adds	r2, r7, r1
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	2102      	movs	r1, #2
 8003a7e:	f7ff ffae 	bl	80039de <max30102_read>
    reg &= ~(0x01 << MAX30102_INTERRUPT_A_FULL);
 8003a82:	0021      	movs	r1, r4
 8003a84:	187b      	adds	r3, r7, r1
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	227f      	movs	r2, #127	@ 0x7f
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	187b      	adds	r3, r7, r1
 8003a90:	701a      	strb	r2, [r3, #0]
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_A_FULL);
 8003a92:	1cfb      	adds	r3, r7, #3
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	01db      	lsls	r3, r3, #7
 8003a98:	b25a      	sxtb	r2, r3
 8003a9a:	187b      	adds	r3, r7, r1
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	b25b      	sxtb	r3, r3
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	b25b      	sxtb	r3, r3
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	187b      	adds	r3, r7, r1
 8003aa8:	701a      	strb	r2, [r3, #0]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8003aaa:	187a      	adds	r2, r7, r1
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	2301      	movs	r3, #1
 8003ab0:	2102      	movs	r1, #2
 8003ab2:	f7ff ff53 	bl	800395c <max30102_write>
}
 8003ab6:	46c0      	nop			@ (mov r8, r8)
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	b005      	add	sp, #20
 8003abc:	bd90      	pop	{r4, r7, pc}

08003abe <max30102_set_die_temp_rdy>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_rdy(max30102_t *obj, uint8_t enable)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b084      	sub	sp, #16
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	000a      	movs	r2, r1
 8003ac8:	1cfb      	adds	r3, r7, #3
 8003aca:	701a      	strb	r2, [r3, #0]
    uint8_t reg = (enable & 0x01) << MAX30102_INTERRUPT_DIE_TEMP_RDY;
 8003acc:	1cfb      	adds	r3, r7, #3
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	210f      	movs	r1, #15
 8003adc:	187b      	adds	r3, r7, r1
 8003ade:	701a      	strb	r2, [r3, #0]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_2, &reg, 1);
 8003ae0:	187a      	adds	r2, r7, r1
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	2103      	movs	r1, #3
 8003ae8:	f7ff ff38 	bl	800395c <max30102_write>
}
 8003aec:	46c0      	nop			@ (mov r8, r8)
 8003aee:	46bd      	mov	sp, r7
 8003af0:	b004      	add	sp, #16
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <max30102_set_die_temp_en>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_en(max30102_t *obj, uint8_t enable)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	000a      	movs	r2, r1
 8003afe:	1cfb      	adds	r3, r7, #3
 8003b00:	701a      	strb	r2, [r3, #0]
    uint8_t reg = (enable & 0x01);
 8003b02:	1cfb      	adds	r3, r7, #3
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	2201      	movs	r2, #1
 8003b08:	4013      	ands	r3, r2
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	210f      	movs	r1, #15
 8003b0e:	187b      	adds	r3, r7, r1
 8003b10:	701a      	strb	r2, [r3, #0]
    max30102_write(obj, MAX30102_DIE_TEMP_CONFIG, &reg, 1);
 8003b12:	187a      	adds	r2, r7, r1
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	2301      	movs	r3, #1
 8003b18:	2121      	movs	r1, #33	@ 0x21
 8003b1a:	f7ff ff1f 	bl	800395c <max30102_write>
}
 8003b1e:	46c0      	nop			@ (mov r8, r8)
 8003b20:	46bd      	mov	sp, r7
 8003b22:	b004      	add	sp, #16
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <max30102_on_interrupt>:
 * @brief Set interrupt flag on interrupt. To be called in the corresponding external interrupt handler.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_on_interrupt(max30102_t *obj)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b082      	sub	sp, #8
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
    obj->_interrupt_flag = 1;
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	2382      	movs	r3, #130	@ 0x82
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	2101      	movs	r1, #1
 8003b36:	54d1      	strb	r1, [r2, r3]
}
 8003b38:	46c0      	nop			@ (mov r8, r8)
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	b002      	add	sp, #8
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <max30102_set_mode>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param mode Measurement mode enum (max30102_mode_t).
 */
void max30102_set_mode(max30102_t *obj, max30102_mode_t mode)
{
 8003b40:	b590      	push	{r4, r7, lr}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	000a      	movs	r2, r1
 8003b4a:	1cfb      	adds	r3, r7, #3
 8003b4c:	701a      	strb	r2, [r3, #0]
    uint8_t config;
    max30102_read(obj, MAX30102_MODE_CONFIG, &config, 1);
 8003b4e:	240f      	movs	r4, #15
 8003b50:	193a      	adds	r2, r7, r4
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	2301      	movs	r3, #1
 8003b56:	2109      	movs	r1, #9
 8003b58:	f7ff ff41 	bl	80039de <max30102_read>
    config = (config & 0xf8) | mode;
 8003b5c:	0021      	movs	r1, r4
 8003b5e:	187b      	adds	r3, r7, r1
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	b25b      	sxtb	r3, r3
 8003b64:	2207      	movs	r2, #7
 8003b66:	4393      	bics	r3, r2
 8003b68:	b25a      	sxtb	r2, r3
 8003b6a:	1cfb      	adds	r3, r7, #3
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	b25b      	sxtb	r3, r3
 8003b70:	4313      	orrs	r3, r2
 8003b72:	b25b      	sxtb	r3, r3
 8003b74:	b2da      	uxtb	r2, r3
 8003b76:	187b      	adds	r3, r7, r1
 8003b78:	701a      	strb	r2, [r3, #0]
    max30102_write(obj, MAX30102_MODE_CONFIG, &config, 1);
 8003b7a:	187a      	adds	r2, r7, r1
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	2301      	movs	r3, #1
 8003b80:	2109      	movs	r1, #9
 8003b82:	f7ff feeb 	bl	800395c <max30102_write>
    max30102_clear_fifo(obj);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f000 f90e 	bl	8003daa <max30102_clear_fifo>
}
 8003b8e:	46c0      	nop			@ (mov r8, r8)
 8003b90:	46bd      	mov	sp, r7
 8003b92:	b005      	add	sp, #20
 8003b94:	bd90      	pop	{r4, r7, pc}

08003b96 <max30102_set_sampling_rate>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param sr Sampling rate enum (max30102_spo2_st_t).
 */
void max30102_set_sampling_rate(max30102_t *obj, max30102_sr_t sr)
{
 8003b96:	b590      	push	{r4, r7, lr}
 8003b98:	b085      	sub	sp, #20
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
 8003b9e:	000a      	movs	r2, r1
 8003ba0:	1cfb      	adds	r3, r7, #3
 8003ba2:	701a      	strb	r2, [r3, #0]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8003ba4:	240f      	movs	r4, #15
 8003ba6:	193a      	adds	r2, r7, r4
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	2301      	movs	r3, #1
 8003bac:	210a      	movs	r1, #10
 8003bae:	f7ff ff16 	bl	80039de <max30102_read>
    config = (config & 0x63) | (sr << MAX30102_SPO2_SR);
 8003bb2:	0021      	movs	r1, r4
 8003bb4:	187b      	adds	r3, r7, r1
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	b25b      	sxtb	r3, r3
 8003bba:	2263      	movs	r2, #99	@ 0x63
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	b25a      	sxtb	r2, r3
 8003bc0:	1cfb      	adds	r3, r7, #3
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	b25b      	sxtb	r3, r3
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	b25b      	sxtb	r3, r3
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	187b      	adds	r3, r7, r1
 8003bd0:	701a      	strb	r2, [r3, #0]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8003bd2:	187a      	adds	r2, r7, r1
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	210a      	movs	r1, #10
 8003bda:	f7ff febf 	bl	800395c <max30102_write>
}
 8003bde:	46c0      	nop			@ (mov r8, r8)
 8003be0:	46bd      	mov	sp, r7
 8003be2:	b005      	add	sp, #20
 8003be4:	bd90      	pop	{r4, r7, pc}

08003be6 <max30102_set_led_pulse_width>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param pw Pulse width enum (max30102_led_pw_t).
 */
void max30102_set_led_pulse_width(max30102_t *obj, max30102_led_pw_t pw)
{
 8003be6:	b590      	push	{r4, r7, lr}
 8003be8:	b085      	sub	sp, #20
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	000a      	movs	r2, r1
 8003bf0:	1cfb      	adds	r3, r7, #3
 8003bf2:	701a      	strb	r2, [r3, #0]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8003bf4:	240f      	movs	r4, #15
 8003bf6:	193a      	adds	r2, r7, r4
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	210a      	movs	r1, #10
 8003bfe:	f7ff feee 	bl	80039de <max30102_read>
    config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 8003c02:	0021      	movs	r1, r4
 8003c04:	187b      	adds	r3, r7, r1
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	b25b      	sxtb	r3, r3
 8003c0a:	227c      	movs	r2, #124	@ 0x7c
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	b25a      	sxtb	r2, r3
 8003c10:	1cfb      	adds	r3, r7, #3
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	b25b      	sxtb	r3, r3
 8003c16:	4313      	orrs	r3, r2
 8003c18:	b25b      	sxtb	r3, r3
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	187b      	adds	r3, r7, r1
 8003c1e:	701a      	strb	r2, [r3, #0]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8003c20:	187a      	adds	r2, r7, r1
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	2301      	movs	r3, #1
 8003c26:	210a      	movs	r1, #10
 8003c28:	f7ff fe98 	bl	800395c <max30102_write>
}
 8003c2c:	46c0      	nop			@ (mov r8, r8)
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	b005      	add	sp, #20
 8003c32:	bd90      	pop	{r4, r7, pc}

08003c34 <max30102_set_adc_resolution>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param adc ADC resolution enum (max30102_adc_t).
 */
void max30102_set_adc_resolution(max30102_t *obj, max30102_adc_t adc)
{
 8003c34:	b590      	push	{r4, r7, lr}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	000a      	movs	r2, r1
 8003c3e:	1cfb      	adds	r3, r7, #3
 8003c40:	701a      	strb	r2, [r3, #0]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8003c42:	240f      	movs	r4, #15
 8003c44:	193a      	adds	r2, r7, r4
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	2301      	movs	r3, #1
 8003c4a:	210a      	movs	r1, #10
 8003c4c:	f7ff fec7 	bl	80039de <max30102_read>
    config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 8003c50:	0021      	movs	r1, r4
 8003c52:	187b      	adds	r3, r7, r1
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	b25b      	sxtb	r3, r3
 8003c58:	221f      	movs	r2, #31
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	b25a      	sxtb	r2, r3
 8003c5e:	1cfb      	adds	r3, r7, #3
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	015b      	lsls	r3, r3, #5
 8003c64:	b25b      	sxtb	r3, r3
 8003c66:	4313      	orrs	r3, r2
 8003c68:	b25b      	sxtb	r3, r3
 8003c6a:	b2da      	uxtb	r2, r3
 8003c6c:	187b      	adds	r3, r7, r1
 8003c6e:	701a      	strb	r2, [r3, #0]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8003c70:	187a      	adds	r2, r7, r1
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	2301      	movs	r3, #1
 8003c76:	210a      	movs	r1, #10
 8003c78:	f7ff fe70 	bl	800395c <max30102_write>
}
 8003c7c:	46c0      	nop			@ (mov r8, r8)
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	b005      	add	sp, #20
 8003c82:	bd90      	pop	{r4, r7, pc}

08003c84 <max30102_set_led_current_1>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_1(max30102_t *obj, float ma)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
    uint8_t pa = ma / 0.2;
 8003c8e:	6838      	ldr	r0, [r7, #0]
 8003c90:	f7ff fb68 	bl	8003364 <__aeabi_f2d>
 8003c94:	4a0c      	ldr	r2, [pc, #48]	@ (8003cc8 <max30102_set_led_current_1+0x44>)
 8003c96:	4b0d      	ldr	r3, [pc, #52]	@ (8003ccc <max30102_set_led_current_1+0x48>)
 8003c98:	f7fe f80c 	bl	8001cb4 <__aeabi_ddiv>
 8003c9c:	0002      	movs	r2, r0
 8003c9e:	000b      	movs	r3, r1
 8003ca0:	0010      	movs	r0, r2
 8003ca2:	0019      	movs	r1, r3
 8003ca4:	f7fc fc88 	bl	80005b8 <__aeabi_d2uiz>
 8003ca8:	0003      	movs	r3, r0
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	210f      	movs	r1, #15
 8003cae:	187b      	adds	r3, r7, r1
 8003cb0:	701a      	strb	r2, [r3, #0]
    max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
 8003cb2:	187a      	adds	r2, r7, r1
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	210c      	movs	r1, #12
 8003cba:	f7ff fe4f 	bl	800395c <max30102_write>
}
 8003cbe:	46c0      	nop			@ (mov r8, r8)
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	b004      	add	sp, #16
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	46c0      	nop			@ (mov r8, r8)
 8003cc8:	9999999a 	.word	0x9999999a
 8003ccc:	3fc99999 	.word	0x3fc99999

08003cd0 <max30102_set_led_current_2>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_2(max30102_t *obj, float ma)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
    uint8_t pa = ma / 0.2;
 8003cda:	6838      	ldr	r0, [r7, #0]
 8003cdc:	f7ff fb42 	bl	8003364 <__aeabi_f2d>
 8003ce0:	4a0c      	ldr	r2, [pc, #48]	@ (8003d14 <max30102_set_led_current_2+0x44>)
 8003ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8003d18 <max30102_set_led_current_2+0x48>)
 8003ce4:	f7fd ffe6 	bl	8001cb4 <__aeabi_ddiv>
 8003ce8:	0002      	movs	r2, r0
 8003cea:	000b      	movs	r3, r1
 8003cec:	0010      	movs	r0, r2
 8003cee:	0019      	movs	r1, r3
 8003cf0:	f7fc fc62 	bl	80005b8 <__aeabi_d2uiz>
 8003cf4:	0003      	movs	r3, r0
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	210f      	movs	r1, #15
 8003cfa:	187b      	adds	r3, r7, r1
 8003cfc:	701a      	strb	r2, [r3, #0]
    max30102_write(obj, MAX30102_LED_RED_PA2, &pa, 1);
 8003cfe:	187a      	adds	r2, r7, r1
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	2301      	movs	r3, #1
 8003d04:	210d      	movs	r1, #13
 8003d06:	f7ff fe29 	bl	800395c <max30102_write>
}
 8003d0a:	46c0      	nop			@ (mov r8, r8)
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	b004      	add	sp, #16
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	46c0      	nop			@ (mov r8, r8)
 8003d14:	9999999a 	.word	0x9999999a
 8003d18:	3fc99999 	.word	0x3fc99999

08003d1c <max30102_set_fifo_config>:
 * @param smp_ave
 * @param roll_over_en Roll over enabled(1) or disabled(0).
 * @param fifo_a_full Number of empty samples when A_FULL interrupt issued (0 < fifo_a_full < 15).
 */
void max30102_set_fifo_config(max30102_t *obj, max30102_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
 8003d1c:	b590      	push	{r4, r7, lr}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	000c      	movs	r4, r1
 8003d26:	0010      	movs	r0, r2
 8003d28:	0019      	movs	r1, r3
 8003d2a:	1cfb      	adds	r3, r7, #3
 8003d2c:	1c22      	adds	r2, r4, #0
 8003d2e:	701a      	strb	r2, [r3, #0]
 8003d30:	1cbb      	adds	r3, r7, #2
 8003d32:	1c02      	adds	r2, r0, #0
 8003d34:	701a      	strb	r2, [r3, #0]
 8003d36:	1c7b      	adds	r3, r7, #1
 8003d38:	1c0a      	adds	r2, r1, #0
 8003d3a:	701a      	strb	r2, [r3, #0]
    uint8_t config = 0x00;
 8003d3c:	210f      	movs	r1, #15
 8003d3e:	187b      	adds	r3, r7, r1
 8003d40:	2200      	movs	r2, #0
 8003d42:	701a      	strb	r2, [r3, #0]
    config |= smp_ave << MAX30102_FIFO_CONFIG_SMP_AVE;
 8003d44:	1cfb      	adds	r3, r7, #3
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	015b      	lsls	r3, r3, #5
 8003d4a:	b25a      	sxtb	r2, r3
 8003d4c:	187b      	adds	r3, r7, r1
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	b25b      	sxtb	r3, r3
 8003d52:	4313      	orrs	r3, r2
 8003d54:	b25b      	sxtb	r3, r3
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	187b      	adds	r3, r7, r1
 8003d5a:	701a      	strb	r2, [r3, #0]
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 8003d5c:	1cbb      	adds	r3, r7, #2
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	011b      	lsls	r3, r3, #4
 8003d62:	b25b      	sxtb	r3, r3
 8003d64:	2210      	movs	r2, #16
 8003d66:	4013      	ands	r3, r2
 8003d68:	b25a      	sxtb	r2, r3
 8003d6a:	187b      	adds	r3, r7, r1
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	b25b      	sxtb	r3, r3
 8003d70:	4313      	orrs	r3, r2
 8003d72:	b25b      	sxtb	r3, r3
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	187b      	adds	r3, r7, r1
 8003d78:	701a      	strb	r2, [r3, #0]
    config |= ((fifo_a_full & 0x0f) << MAX30102_FIFO_CONFIG_FIFO_A_FULL);
 8003d7a:	1c7b      	adds	r3, r7, #1
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	b25b      	sxtb	r3, r3
 8003d80:	220f      	movs	r2, #15
 8003d82:	4013      	ands	r3, r2
 8003d84:	b25a      	sxtb	r2, r3
 8003d86:	187b      	adds	r3, r7, r1
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	b25b      	sxtb	r3, r3
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	b25b      	sxtb	r3, r3
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	187b      	adds	r3, r7, r1
 8003d94:	701a      	strb	r2, [r3, #0]
    max30102_write(obj, MAX30102_FIFO_CONFIG, &config, 1);
 8003d96:	187a      	adds	r2, r7, r1
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	2108      	movs	r1, #8
 8003d9e:	f7ff fddd 	bl	800395c <max30102_write>
}
 8003da2:	46c0      	nop			@ (mov r8, r8)
 8003da4:	46bd      	mov	sp, r7
 8003da6:	b005      	add	sp, #20
 8003da8:	bd90      	pop	{r4, r7, pc}

08003daa <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102_t *obj)
{
 8003daa:	b590      	push	{r4, r7, lr}
 8003dac:	b085      	sub	sp, #20
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 8003db2:	210f      	movs	r1, #15
 8003db4:	187b      	adds	r3, r7, r1
 8003db6:	2200      	movs	r2, #0
 8003db8:	701a      	strb	r2, [r3, #0]
    max30102_write(obj, MAX30102_FIFO_WR_PTR, &val, 3);
 8003dba:	000c      	movs	r4, r1
 8003dbc:	193a      	adds	r2, r7, r4
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	2104      	movs	r1, #4
 8003dc4:	f7ff fdca 	bl	800395c <max30102_write>
    max30102_write(obj, MAX30102_FIFO_RD_PTR, &val, 3);
 8003dc8:	193a      	adds	r2, r7, r4
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	2303      	movs	r3, #3
 8003dce:	2106      	movs	r1, #6
 8003dd0:	f7ff fdc4 	bl	800395c <max30102_write>
    max30102_write(obj, MAX30102_OVF_COUNTER, &val, 3);
 8003dd4:	193a      	adds	r2, r7, r4
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	2303      	movs	r3, #3
 8003dda:	2105      	movs	r1, #5
 8003ddc:	f7ff fdbe 	bl	800395c <max30102_write>
}
 8003de0:	46c0      	nop			@ (mov r8, r8)
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b005      	add	sp, #20
 8003de6:	bd90      	pop	{r4, r7, pc}

08003de8 <max30102_read_fifo>:
 * @param obj Pointer to max30102_t object instance.
 */


Max30102Samples max30102_read_fifo(max30102_t *obj)
{
 8003de8:	b5b0      	push	{r4, r5, r7, lr}
 8003dea:	b08e      	sub	sp, #56	@ 0x38
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr = 0, rd_ptr = 0;
 8003df2:	211f      	movs	r1, #31
 8003df4:	187b      	adds	r3, r7, r1
 8003df6:	2200      	movs	r2, #0
 8003df8:	701a      	strb	r2, [r3, #0]
 8003dfa:	251e      	movs	r5, #30
 8003dfc:	197b      	adds	r3, r7, r5
 8003dfe:	2200      	movs	r2, #0
 8003e00:	701a      	strb	r2, [r3, #0]
    max30102_read(obj, MAX30102_FIFO_WR_PTR, &wr_ptr, 1);
 8003e02:	000c      	movs	r4, r1
 8003e04:	187a      	adds	r2, r7, r1
 8003e06:	6838      	ldr	r0, [r7, #0]
 8003e08:	2301      	movs	r3, #1
 8003e0a:	2104      	movs	r1, #4
 8003e0c:	f7ff fde7 	bl	80039de <max30102_read>
    max30102_read(obj, MAX30102_FIFO_RD_PTR, &rd_ptr, 1);
 8003e10:	197a      	adds	r2, r7, r5
 8003e12:	6838      	ldr	r0, [r7, #0]
 8003e14:	2301      	movs	r3, #1
 8003e16:	2106      	movs	r1, #6
 8003e18:	f7ff fde1 	bl	80039de <max30102_read>
//    printf("Before Reading: Write Ptr: %u, Read Ptr: %u\n", wr_ptr, rd_ptr);

    int8_t num_samples;

    num_samples = (int8_t)wr_ptr - (int8_t)rd_ptr;
 8003e1c:	193b      	adds	r3, r7, r4
 8003e1e:	781a      	ldrb	r2, [r3, #0]
 8003e20:	197b      	adds	r3, r7, r5
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	2137      	movs	r1, #55	@ 0x37
 8003e2a:	187b      	adds	r3, r7, r1
 8003e2c:	701a      	strb	r2, [r3, #0]
    if (num_samples < 1)
 8003e2e:	187b      	adds	r3, r7, r1
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	b25b      	sxtb	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	dc05      	bgt.n	8003e44 <max30102_read_fifo+0x5c>
    {
        num_samples += 32;
 8003e38:	187b      	adds	r3, r7, r1
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	3320      	adds	r3, #32
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	187b      	adds	r3, r7, r1
 8003e42:	701a      	strb	r2, [r3, #0]
    }
    uint32_t last_ir_sample = 0;
 8003e44:	2300      	movs	r3, #0
 8003e46:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t last_red_sample = 0;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
    for (int8_t i = 0; i < num_samples; i++)
 8003e4c:	232b      	movs	r3, #43	@ 0x2b
 8003e4e:	18fb      	adds	r3, r7, r3
 8003e50:	2200      	movs	r2, #0
 8003e52:	701a      	strb	r2, [r3, #0]
 8003e54:	e047      	b.n	8003ee6 <max30102_read_fifo+0xfe>
    {
        uint8_t sample[6];
        max30102_read(obj, MAX30102_FIFO_DATA, sample, 6);
 8003e56:	240c      	movs	r4, #12
 8003e58:	193a      	adds	r2, r7, r4
 8003e5a:	6838      	ldr	r0, [r7, #0]
 8003e5c:	2306      	movs	r3, #6
 8003e5e:	2107      	movs	r1, #7
 8003e60:	f7ff fdbd 	bl	80039de <max30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 8003e64:	0021      	movs	r1, r4
 8003e66:	187b      	adds	r3, r7, r1
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	041a      	lsls	r2, r3, #16
 8003e6c:	187b      	adds	r3, r7, r1
 8003e6e:	785b      	ldrb	r3, [r3, #1]
 8003e70:	021b      	lsls	r3, r3, #8
 8003e72:	4313      	orrs	r3, r2
 8003e74:	187a      	adds	r2, r7, r1
 8003e76:	7892      	ldrb	r2, [r2, #2]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	039b      	lsls	r3, r3, #14
 8003e7c:	0b9b      	lsrs	r3, r3, #14
 8003e7e:	627b      	str	r3, [r7, #36]	@ 0x24
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 8003e80:	187b      	adds	r3, r7, r1
 8003e82:	78db      	ldrb	r3, [r3, #3]
 8003e84:	041a      	lsls	r2, r3, #16
 8003e86:	187b      	adds	r3, r7, r1
 8003e88:	791b      	ldrb	r3, [r3, #4]
 8003e8a:	021b      	lsls	r3, r3, #8
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	187a      	adds	r2, r7, r1
 8003e90:	7952      	ldrb	r2, [r2, #5]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	039b      	lsls	r3, r3, #14
 8003e96:	0b9b      	lsrs	r3, r3, #14
 8003e98:	623b      	str	r3, [r7, #32]
        obj->_ir_samples[i] = ir_sample;
 8003e9a:	242b      	movs	r4, #43	@ 0x2b
 8003e9c:	193b      	adds	r3, r7, r4
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	b25b      	sxtb	r3, r3
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	18d3      	adds	r3, r2, r3
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eac:	601a      	str	r2, [r3, #0]
        obj->_red_samples[i] = red_sample;
 8003eae:	193b      	adds	r3, r7, r4
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	b25b      	sxtb	r3, r3
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	3320      	adds	r3, #32
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	18d3      	adds	r3, r2, r3
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	6a3a      	ldr	r2, [r7, #32]
 8003ec0:	601a      	str	r2, [r3, #0]
        max30102_plot(ir_sample, red_sample);
 8003ec2:	6a3a      	ldr	r2, [r7, #32]
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec6:	0011      	movs	r1, r2
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f7ff fd1f 	bl	800390c <max30102_plot>
        // Store the latest sample
		last_ir_sample = ir_sample;
 8003ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed0:	633b      	str	r3, [r7, #48]	@ 0x30
		last_red_sample = red_sample;
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
 8003ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (int8_t i = 0; i < num_samples; i++)
 8003ed6:	193b      	adds	r3, r7, r4
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	b25b      	sxtb	r3, r3
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	3301      	adds	r3, #1
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	193b      	adds	r3, r7, r4
 8003ee4:	701a      	strb	r2, [r3, #0]
 8003ee6:	232b      	movs	r3, #43	@ 0x2b
 8003ee8:	18fa      	adds	r2, r7, r3
 8003eea:	2337      	movs	r3, #55	@ 0x37
 8003eec:	18fb      	adds	r3, r7, r3
 8003eee:	7812      	ldrb	r2, [r2, #0]
 8003ef0:	b252      	sxtb	r2, r2
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	b25b      	sxtb	r3, r3
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	dbad      	blt.n	8003e56 <max30102_read_fifo+0x6e>

    // Print only the most recent sample after the loop

//    printf("Most Recent Sample - IR: %lu, Red: %lu\n", last_ir_sample, last_red_sample);
    // Reset the FIFO read pointer to clear the data after reading
	uint8_t reset_value = wr_ptr;
 8003efa:	231f      	movs	r3, #31
 8003efc:	18fb      	adds	r3, r7, r3
 8003efe:	781a      	ldrb	r2, [r3, #0]
 8003f00:	211d      	movs	r1, #29
 8003f02:	187b      	adds	r3, r7, r1
 8003f04:	701a      	strb	r2, [r3, #0]
	max30102_write(obj, MAX30102_FIFO_RD_PTR, &reset_value, 1);
 8003f06:	187a      	adds	r2, r7, r1
 8003f08:	6838      	ldr	r0, [r7, #0]
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	2106      	movs	r1, #6
 8003f0e:	f7ff fd25 	bl	800395c <max30102_write>
	// Return both the last IR and Red samples in a struct
	Max30102Samples result = { last_ir_sample, last_red_sample };
 8003f12:	2114      	movs	r1, #20
 8003f14:	187b      	adds	r3, r7, r1
 8003f16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	187b      	adds	r3, r7, r1
 8003f1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f1e:	605a      	str	r2, [r3, #4]
	return result;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	187a      	adds	r2, r7, r1
 8003f24:	ca03      	ldmia	r2!, {r0, r1}
 8003f26:	c303      	stmia	r3!, {r0, r1}

}
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	b00e      	add	sp, #56	@ 0x38
 8003f2e:	bdb0      	pop	{r4, r5, r7, pc}

08003f30 <MinMaxAvgStatistic_init>:
    float sum;
    int count;
} MinMaxAvgStatistic;

// Function to initialize the statistic block
void MinMaxAvgStatistic_init(MinMaxAvgStatistic *stat) {
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
    stat->min = NAN;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a07      	ldr	r2, [pc, #28]	@ (8003f58 <MinMaxAvgStatistic_init+0x28>)
 8003f3c:	601a      	str	r2, [r3, #0]
    stat->max = NAN;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a05      	ldr	r2, [pc, #20]	@ (8003f58 <MinMaxAvgStatistic_init+0x28>)
 8003f42:	605a      	str	r2, [r3, #4]
    stat->sum = 0;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	609a      	str	r2, [r3, #8]
    stat->count = 0;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	60da      	str	r2, [r3, #12]
}
 8003f50:	46c0      	nop			@ (mov r8, r8)
 8003f52:	46bd      	mov	sp, r7
 8003f54:	b002      	add	sp, #8
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	7fc00000 	.word	0x7fc00000

08003f5c <HighPassFilter_init1>:

/**s
 * @brief Initialize the High Pass Filter
 * @param samples Number of samples until decay to 36.8 %
 */
void HighPassFilter_init1(HighPassFilter* filter, float samples) {
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
    filter->kX = exp(-1 / samples);
 8003f66:	6839      	ldr	r1, [r7, #0]
 8003f68:	481d      	ldr	r0, [pc, #116]	@ (8003fe0 <HighPassFilter_init1+0x84>)
 8003f6a:	f7fc fde9 	bl	8000b40 <__aeabi_fdiv>
 8003f6e:	1c03      	adds	r3, r0, #0
 8003f70:	1c18      	adds	r0, r3, #0
 8003f72:	f7ff f9f7 	bl	8003364 <__aeabi_f2d>
 8003f76:	0002      	movs	r2, r0
 8003f78:	000b      	movs	r3, r1
 8003f7a:	0010      	movs	r0, r2
 8003f7c:	0019      	movs	r1, r3
 8003f7e:	f007 feef 	bl	800bd60 <exp>
 8003f82:	0002      	movs	r2, r0
 8003f84:	000b      	movs	r3, r1
 8003f86:	0010      	movs	r0, r2
 8003f88:	0019      	movs	r1, r3
 8003f8a:	f7ff fa33 	bl	80033f4 <__aeabi_d2f>
 8003f8e:	1c02      	adds	r2, r0, #0
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	601a      	str	r2, [r3, #0]
    filter->kA0 = (1 + filter->kX) / 2;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	21fe      	movs	r1, #254	@ 0xfe
 8003f9a:	0589      	lsls	r1, r1, #22
 8003f9c:	1c18      	adds	r0, r3, #0
 8003f9e:	f7fc fc45 	bl	800082c <__aeabi_fadd>
 8003fa2:	1c03      	adds	r3, r0, #0
 8003fa4:	2180      	movs	r1, #128	@ 0x80
 8003fa6:	05c9      	lsls	r1, r1, #23
 8003fa8:	1c18      	adds	r0, r3, #0
 8003faa:	f7fc fdc9 	bl	8000b40 <__aeabi_fdiv>
 8003fae:	1c03      	adds	r3, r0, #0
 8003fb0:	1c1a      	adds	r2, r3, #0
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	605a      	str	r2, [r3, #4]
    filter->kA1 = -filter->kA0;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	2280      	movs	r2, #128	@ 0x80
 8003fbc:	0612      	lsls	r2, r2, #24
 8003fbe:	405a      	eors	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	609a      	str	r2, [r3, #8]
    filter->kB1 = filter->kX;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	60da      	str	r2, [r3, #12]
    filter->last_filter_value = NAN;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a05      	ldr	r2, [pc, #20]	@ (8003fe4 <HighPassFilter_init1+0x88>)
 8003fd0:	611a      	str	r2, [r3, #16]
    filter->last_raw_value = NAN;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a03      	ldr	r2, [pc, #12]	@ (8003fe4 <HighPassFilter_init1+0x88>)
 8003fd6:	615a      	str	r2, [r3, #20]
}
 8003fd8:	46c0      	nop			@ (mov r8, r8)
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	b002      	add	sp, #8
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	bf800000 	.word	0xbf800000
 8003fe4:	7fc00000 	.word	0x7fc00000

08003fe8 <HighPassFilter_init2>:

void HighPassFilter_init2(HighPassFilter* filter, float cutoff, float sampling_frequency){
 8003fe8:	b5b0      	push	{r4, r5, r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
    HighPassFilter_init1(filter, sampling_frequency/(cutoff*2*PI));
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7ff f9b5 	bl	8003364 <__aeabi_f2d>
 8003ffa:	0004      	movs	r4, r0
 8003ffc:	000d      	movs	r5, r1
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	1c19      	adds	r1, r3, #0
 8004002:	1c18      	adds	r0, r3, #0
 8004004:	f7fc fc12 	bl	800082c <__aeabi_fadd>
 8004008:	1c03      	adds	r3, r0, #0
 800400a:	1c18      	adds	r0, r3, #0
 800400c:	f7ff f9aa 	bl	8003364 <__aeabi_f2d>
 8004010:	4a0c      	ldr	r2, [pc, #48]	@ (8004044 <HighPassFilter_init2+0x5c>)
 8004012:	4b0d      	ldr	r3, [pc, #52]	@ (8004048 <HighPassFilter_init2+0x60>)
 8004014:	f7fe fa92 	bl	800253c <__aeabi_dmul>
 8004018:	0002      	movs	r2, r0
 800401a:	000b      	movs	r3, r1
 800401c:	0020      	movs	r0, r4
 800401e:	0029      	movs	r1, r5
 8004020:	f7fd fe48 	bl	8001cb4 <__aeabi_ddiv>
 8004024:	0002      	movs	r2, r0
 8004026:	000b      	movs	r3, r1
 8004028:	0010      	movs	r0, r2
 800402a:	0019      	movs	r1, r3
 800402c:	f7ff f9e2 	bl	80033f4 <__aeabi_d2f>
 8004030:	1c02      	adds	r2, r0, #0
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	1c11      	adds	r1, r2, #0
 8004036:	0018      	movs	r0, r3
 8004038:	f7ff ff90 	bl	8003f5c <HighPassFilter_init1>
}
 800403c:	46c0      	nop			@ (mov r8, r8)
 800403e:	46bd      	mov	sp, r7
 8004040:	b004      	add	sp, #16
 8004042:	bdb0      	pop	{r4, r5, r7, pc}
 8004044:	54442d18 	.word	0x54442d18
 8004048:	400921fb 	.word	0x400921fb

0800404c <LowPassFilter_init1>:

/**
 * @brief Initialize the Low Pass Filter
 * @param samples Number of samples until decay to 36.8 %
 */
void LowPassFilter_init1(LowPassFilter* filter, float samples) {
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
    filter->kX = exp(-1 / samples);
 8004056:	6839      	ldr	r1, [r7, #0]
 8004058:	4815      	ldr	r0, [pc, #84]	@ (80040b0 <LowPassFilter_init1+0x64>)
 800405a:	f7fc fd71 	bl	8000b40 <__aeabi_fdiv>
 800405e:	1c03      	adds	r3, r0, #0
 8004060:	1c18      	adds	r0, r3, #0
 8004062:	f7ff f97f 	bl	8003364 <__aeabi_f2d>
 8004066:	0002      	movs	r2, r0
 8004068:	000b      	movs	r3, r1
 800406a:	0010      	movs	r0, r2
 800406c:	0019      	movs	r1, r3
 800406e:	f007 fe77 	bl	800bd60 <exp>
 8004072:	0002      	movs	r2, r0
 8004074:	000b      	movs	r3, r1
 8004076:	0010      	movs	r0, r2
 8004078:	0019      	movs	r1, r3
 800407a:	f7ff f9bb 	bl	80033f4 <__aeabi_d2f>
 800407e:	1c02      	adds	r2, r0, #0
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	601a      	str	r2, [r3, #0]
    filter->kA0 = 1 - filter->kX;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	1c19      	adds	r1, r3, #0
 800408a:	20fe      	movs	r0, #254	@ 0xfe
 800408c:	0580      	lsls	r0, r0, #22
 800408e:	f7fd f87b 	bl	8001188 <__aeabi_fsub>
 8004092:	1c03      	adds	r3, r0, #0
 8004094:	1c1a      	adds	r2, r3, #0
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	605a      	str	r2, [r3, #4]
    filter->kB1 = filter->kX;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	609a      	str	r2, [r3, #8]
    filter->last_value = NAN;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a03      	ldr	r2, [pc, #12]	@ (80040b4 <LowPassFilter_init1+0x68>)
 80040a6:	60da      	str	r2, [r3, #12]
}
 80040a8:	46c0      	nop			@ (mov r8, r8)
 80040aa:	46bd      	mov	sp, r7
 80040ac:	b002      	add	sp, #8
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	bf800000 	.word	0xbf800000
 80040b4:	7fc00000 	.word	0x7fc00000

080040b8 <LowPassFilter_init2>:

void LowPassFilter_init2(LowPassFilter* filter,float cutoff, float sampling_frequency){
 80040b8:	b5b0      	push	{r4, r5, r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
	LowPassFilter_init1(filter, sampling_frequency/(cutoff*2*PI));
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7ff f94d 	bl	8003364 <__aeabi_f2d>
 80040ca:	0004      	movs	r4, r0
 80040cc:	000d      	movs	r5, r1
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	1c19      	adds	r1, r3, #0
 80040d2:	1c18      	adds	r0, r3, #0
 80040d4:	f7fc fbaa 	bl	800082c <__aeabi_fadd>
 80040d8:	1c03      	adds	r3, r0, #0
 80040da:	1c18      	adds	r0, r3, #0
 80040dc:	f7ff f942 	bl	8003364 <__aeabi_f2d>
 80040e0:	4a0c      	ldr	r2, [pc, #48]	@ (8004114 <LowPassFilter_init2+0x5c>)
 80040e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004118 <LowPassFilter_init2+0x60>)
 80040e4:	f7fe fa2a 	bl	800253c <__aeabi_dmul>
 80040e8:	0002      	movs	r2, r0
 80040ea:	000b      	movs	r3, r1
 80040ec:	0020      	movs	r0, r4
 80040ee:	0029      	movs	r1, r5
 80040f0:	f7fd fde0 	bl	8001cb4 <__aeabi_ddiv>
 80040f4:	0002      	movs	r2, r0
 80040f6:	000b      	movs	r3, r1
 80040f8:	0010      	movs	r0, r2
 80040fa:	0019      	movs	r1, r3
 80040fc:	f7ff f97a 	bl	80033f4 <__aeabi_d2f>
 8004100:	1c02      	adds	r2, r0, #0
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	1c11      	adds	r1, r2, #0
 8004106:	0018      	movs	r0, r3
 8004108:	f7ff ffa0 	bl	800404c <LowPassFilter_init1>
}
 800410c:	46c0      	nop			@ (mov r8, r8)
 800410e:	46bd      	mov	sp, r7
 8004110:	b004      	add	sp, #16
 8004112:	bdb0      	pop	{r4, r5, r7, pc}
 8004114:	54442d18 	.word	0x54442d18
 8004118:	400921fb 	.word	0x400921fb

0800411c <Differentiator_init1>:
} Differentiator;

/**
 * @brief Initializes the differentiator
 */
void Differentiator_init1(Differentiator* diff, float sampling_frequency) {
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
    diff->kSamplingFrequency = sampling_frequency;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	601a      	str	r2, [r3, #0]
    diff->last_value = NAN;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a03      	ldr	r2, [pc, #12]	@ (800413c <Differentiator_init1+0x20>)
 8004130:	605a      	str	r2, [r3, #4]
}
 8004132:	46c0      	nop			@ (mov r8, r8)
 8004134:	46bd      	mov	sp, r7
 8004136:	b002      	add	sp, #8
 8004138:	bd80      	pop	{r7, pc}
 800413a:	46c0      	nop			@ (mov r8, r8)
 800413c:	7fc00000 	.word	0x7fc00000

08004140 <MovingAverageFilter_init1>:
} MovingAverageFilter;

/**
 * @brief Initializes moving average filter
 */
void MovingAverageFilter_init1(MovingAverageFilter* filter, int buffer_size) {
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
    filter->index = 0;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
    filter->count = 0;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	605a      	str	r2, [r3, #4]
    filter->buffer_size = buffer_size;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	609a      	str	r2, [r3, #8]
    filter->values = (float *)malloc(buffer_size * sizeof(float));  // Allocate memory for values
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	0018      	movs	r0, r3
 8004162:	f003 f995 	bl	8007490 <malloc>
 8004166:	0003      	movs	r3, r0
 8004168:	001a      	movs	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	60da      	str	r2, [r3, #12]
    memset(filter->values, 0, buffer_size * sizeof(float));  // Initialize buffer with zeros
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68d8      	ldr	r0, [r3, #12]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	001a      	movs	r2, r3
 8004178:	2100      	movs	r1, #0
 800417a:	f004 f9ff 	bl	800857c <memset>

}
 800417e:	46c0      	nop			@ (mov r8, r8)
 8004180:	46bd      	mov	sp, r7
 8004182:	b002      	add	sp, #8
 8004184:	bd80      	pop	{r7, pc}
	...

08004188 <calculate_heart_rate>:
uint32_t lastHeartbeat = 0;

// Last value to detect crossing the threshold
float lastValue = 0.0;

void calculate_heart_rate(uint32_t latest_red_value) {
 8004188:	b590      	push	{r4, r7, lr}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
    float currentValue = latest_red_value;
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f7fd f9e9 	bl	8001568 <__aeabi_ui2f>
 8004196:	1c03      	adds	r3, r0, #0
 8004198:	617b      	str	r3, [r7, #20]
    maxValue = fmaxf(maxValue, currentValue);
 800419a:	4b77      	ldr	r3, [pc, #476]	@ (8004378 <calculate_heart_rate+0x1f0>)
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	1c11      	adds	r1, r2, #0
 80041a2:	1c18      	adds	r0, r3, #0
 80041a4:	f007 fe1c 	bl	800bde0 <fmaxf>
 80041a8:	1c02      	adds	r2, r0, #0
 80041aa:	4b73      	ldr	r3, [pc, #460]	@ (8004378 <calculate_heart_rate+0x1f0>)
 80041ac:	601a      	str	r2, [r3, #0]
    minValue = fminf(minValue, currentValue);
 80041ae:	4b73      	ldr	r3, [pc, #460]	@ (800437c <calculate_heart_rate+0x1f4>)
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	1c11      	adds	r1, r2, #0
 80041b6:	1c18      	adds	r0, r3, #0
 80041b8:	f007 fe28 	bl	800be0c <fminf>
 80041bc:	1c02      	adds	r2, r0, #0
 80041be:	4b6f      	ldr	r3, [pc, #444]	@ (800437c <calculate_heart_rate+0x1f4>)
 80041c0:	601a      	str	r2, [r3, #0]
    float nthreshold = (maxValue - minValue) * rThreshold + minValue;
 80041c2:	4b6d      	ldr	r3, [pc, #436]	@ (8004378 <calculate_heart_rate+0x1f0>)
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	4b6d      	ldr	r3, [pc, #436]	@ (800437c <calculate_heart_rate+0x1f4>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	1c19      	adds	r1, r3, #0
 80041cc:	1c10      	adds	r0, r2, #0
 80041ce:	f7fc ffdb 	bl	8001188 <__aeabi_fsub>
 80041d2:	1c03      	adds	r3, r0, #0
 80041d4:	1c1a      	adds	r2, r3, #0
 80041d6:	4b6a      	ldr	r3, [pc, #424]	@ (8004380 <calculate_heart_rate+0x1f8>)
 80041d8:	1c19      	adds	r1, r3, #0
 80041da:	1c10      	adds	r0, r2, #0
 80041dc:	f7fc fe96 	bl	8000f0c <__aeabi_fmul>
 80041e0:	1c03      	adds	r3, r0, #0
 80041e2:	1c1a      	adds	r2, r3, #0
 80041e4:	4b65      	ldr	r3, [pc, #404]	@ (800437c <calculate_heart_rate+0x1f4>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	1c19      	adds	r1, r3, #0
 80041ea:	1c10      	adds	r0, r2, #0
 80041ec:	f7fc fb1e 	bl	800082c <__aeabi_fadd>
 80041f0:	1c03      	adds	r3, r0, #0
 80041f2:	613b      	str	r3, [r7, #16]
    threshold = threshold * (1 - thrRate) + nthreshold * thrRate;
 80041f4:	4b63      	ldr	r3, [pc, #396]	@ (8004384 <calculate_heart_rate+0x1fc>)
 80041f6:	1c19      	adds	r1, r3, #0
 80041f8:	20fe      	movs	r0, #254	@ 0xfe
 80041fa:	0580      	lsls	r0, r0, #22
 80041fc:	f7fc ffc4 	bl	8001188 <__aeabi_fsub>
 8004200:	1c03      	adds	r3, r0, #0
 8004202:	1c1a      	adds	r2, r3, #0
 8004204:	4b60      	ldr	r3, [pc, #384]	@ (8004388 <calculate_heart_rate+0x200>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	1c19      	adds	r1, r3, #0
 800420a:	1c10      	adds	r0, r2, #0
 800420c:	f7fc fe7e 	bl	8000f0c <__aeabi_fmul>
 8004210:	1c03      	adds	r3, r0, #0
 8004212:	1c1c      	adds	r4, r3, #0
 8004214:	4b5b      	ldr	r3, [pc, #364]	@ (8004384 <calculate_heart_rate+0x1fc>)
 8004216:	6939      	ldr	r1, [r7, #16]
 8004218:	1c18      	adds	r0, r3, #0
 800421a:	f7fc fe77 	bl	8000f0c <__aeabi_fmul>
 800421e:	1c03      	adds	r3, r0, #0
 8004220:	1c19      	adds	r1, r3, #0
 8004222:	1c20      	adds	r0, r4, #0
 8004224:	f7fc fb02 	bl	800082c <__aeabi_fadd>
 8004228:	1c03      	adds	r3, r0, #0
 800422a:	1c1a      	adds	r2, r3, #0
 800422c:	4b56      	ldr	r3, [pc, #344]	@ (8004388 <calculate_heart_rate+0x200>)
 800422e:	601a      	str	r2, [r3, #0]
    threshold = fminf(maxValue, fmaxf(minValue, threshold));
 8004230:	4b51      	ldr	r3, [pc, #324]	@ (8004378 <calculate_heart_rate+0x1f0>)
 8004232:	681c      	ldr	r4, [r3, #0]
 8004234:	4b51      	ldr	r3, [pc, #324]	@ (800437c <calculate_heart_rate+0x1f4>)
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	4b53      	ldr	r3, [pc, #332]	@ (8004388 <calculate_heart_rate+0x200>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	1c19      	adds	r1, r3, #0
 800423e:	1c10      	adds	r0, r2, #0
 8004240:	f007 fdce 	bl	800bde0 <fmaxf>
 8004244:	1c03      	adds	r3, r0, #0
 8004246:	1c19      	adds	r1, r3, #0
 8004248:	1c20      	adds	r0, r4, #0
 800424a:	f007 fddf 	bl	800be0c <fminf>
 800424e:	1c02      	adds	r2, r0, #0
 8004250:	4b4d      	ldr	r3, [pc, #308]	@ (8004388 <calculate_heart_rate+0x200>)
 8004252:	601a      	str	r2, [r3, #0]

    if (currentValue >= threshold && lastValue < threshold
 8004254:	4b4c      	ldr	r3, [pc, #304]	@ (8004388 <calculate_heart_rate+0x200>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	1c19      	adds	r1, r3, #0
 800425a:	6978      	ldr	r0, [r7, #20]
 800425c:	f7fc f954 	bl	8000508 <__aeabi_fcmpge>
 8004260:	1e03      	subs	r3, r0, #0
 8004262:	d051      	beq.n	8004308 <calculate_heart_rate+0x180>
 8004264:	4b49      	ldr	r3, [pc, #292]	@ (800438c <calculate_heart_rate+0x204>)
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	4b47      	ldr	r3, [pc, #284]	@ (8004388 <calculate_heart_rate+0x200>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	1c19      	adds	r1, r3, #0
 800426e:	1c10      	adds	r0, r2, #0
 8004270:	f7fc f92c 	bl	80004cc <__aeabi_fcmplt>
 8004274:	1e03      	subs	r3, r0, #0
 8004276:	d047      	beq.n	8004308 <calculate_heart_rate+0x180>
        && (maxValue - minValue) > minDiff
 8004278:	4b3f      	ldr	r3, [pc, #252]	@ (8004378 <calculate_heart_rate+0x1f0>)
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	4b3f      	ldr	r3, [pc, #252]	@ (800437c <calculate_heart_rate+0x1f4>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	1c19      	adds	r1, r3, #0
 8004282:	1c10      	adds	r0, r2, #0
 8004284:	f7fc ff80 	bl	8001188 <__aeabi_fsub>
 8004288:	1c03      	adds	r3, r0, #0
 800428a:	1c1c      	adds	r4, r3, #0
 800428c:	2332      	movs	r3, #50	@ 0x32
 800428e:	0018      	movs	r0, r3
 8004290:	f7fd f91e 	bl	80014d0 <__aeabi_i2f>
 8004294:	1c03      	adds	r3, r0, #0
 8004296:	1c19      	adds	r1, r3, #0
 8004298:	1c20      	adds	r0, r4, #0
 800429a:	f7fc f92b 	bl	80004f4 <__aeabi_fcmpgt>
 800429e:	1e03      	subs	r3, r0, #0
 80042a0:	d032      	beq.n	8004308 <calculate_heart_rate+0x180>
        && (HAL_GetTick() - lastHeartbeat) > 300) {
 80042a2:	f000 fb0d 	bl	80048c0 <HAL_GetTick>
 80042a6:	0002      	movs	r2, r0
 80042a8:	4b39      	ldr	r3, [pc, #228]	@ (8004390 <calculate_heart_rate+0x208>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	1ad2      	subs	r2, r2, r3
 80042ae:	2396      	movs	r3, #150	@ 0x96
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d928      	bls.n	8004308 <calculate_heart_rate+0x180>
        if (lastHeartbeat != 0) {
 80042b6:	4b36      	ldr	r3, [pc, #216]	@ (8004390 <calculate_heart_rate+0x208>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d01f      	beq.n	80042fe <calculate_heart_rate+0x176>
            // Calculate BPM
            int bpm = 60000 / (HAL_GetTick() - lastHeartbeat);
 80042be:	f000 faff 	bl	80048c0 <HAL_GetTick>
 80042c2:	0002      	movs	r2, r0
 80042c4:	4b32      	ldr	r3, [pc, #200]	@ (8004390 <calculate_heart_rate+0x208>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	0019      	movs	r1, r3
 80042cc:	4831      	ldr	r0, [pc, #196]	@ (8004394 <calculate_heart_rate+0x20c>)
 80042ce:	f7fb ff37 	bl	8000140 <__udivsi3>
 80042d2:	0003      	movs	r3, r0
 80042d4:	60fb      	str	r3, [r7, #12]
            if (bpm > 50 && bpm < 250) {
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2b32      	cmp	r3, #50	@ 0x32
 80042da:	dd10      	ble.n	80042fe <calculate_heart_rate+0x176>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2bf9      	cmp	r3, #249	@ 0xf9
 80042e0:	dc0d      	bgt.n	80042fe <calculate_heart_rate+0x176>
                lastHeartbeat = HAL_GetTick();
 80042e2:	f000 faed 	bl	80048c0 <HAL_GetTick>
 80042e6:	0002      	movs	r2, r0
 80042e8:	4b29      	ldr	r3, [pc, #164]	@ (8004390 <calculate_heart_rate+0x208>)
 80042ea:	601a      	str	r2, [r3, #0]
                if (bpm!=-1){
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	3301      	adds	r3, #1
 80042f0:	d005      	beq.n	80042fe <calculate_heart_rate+0x176>
                	printf("Heart Rate (bpm): %d\r\n", bpm);
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	4b28      	ldr	r3, [pc, #160]	@ (8004398 <calculate_heart_rate+0x210>)
 80042f6:	0011      	movs	r1, r2
 80042f8:	0018      	movs	r0, r3
 80042fa:	f004 f8c3 	bl	8008484 <iprintf>
                }
            }
        }
        lastHeartbeat = HAL_GetTick(); // Update the timestamp if a heartbeat is detected
 80042fe:	f000 fadf 	bl	80048c0 <HAL_GetTick>
 8004302:	0002      	movs	r2, r0
 8004304:	4b22      	ldr	r3, [pc, #136]	@ (8004390 <calculate_heart_rate+0x208>)
 8004306:	601a      	str	r2, [r3, #0]
    }

    // Decay for max/min
    maxValue -= (maxValue - currentValue) * decayRate;
 8004308:	4b1b      	ldr	r3, [pc, #108]	@ (8004378 <calculate_heart_rate+0x1f0>)
 800430a:	681c      	ldr	r4, [r3, #0]
 800430c:	4b1a      	ldr	r3, [pc, #104]	@ (8004378 <calculate_heart_rate+0x1f0>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6979      	ldr	r1, [r7, #20]
 8004312:	1c18      	adds	r0, r3, #0
 8004314:	f7fc ff38 	bl	8001188 <__aeabi_fsub>
 8004318:	1c03      	adds	r3, r0, #0
 800431a:	1c1a      	adds	r2, r3, #0
 800431c:	4b1f      	ldr	r3, [pc, #124]	@ (800439c <calculate_heart_rate+0x214>)
 800431e:	1c19      	adds	r1, r3, #0
 8004320:	1c10      	adds	r0, r2, #0
 8004322:	f7fc fdf3 	bl	8000f0c <__aeabi_fmul>
 8004326:	1c03      	adds	r3, r0, #0
 8004328:	1c19      	adds	r1, r3, #0
 800432a:	1c20      	adds	r0, r4, #0
 800432c:	f7fc ff2c 	bl	8001188 <__aeabi_fsub>
 8004330:	1c03      	adds	r3, r0, #0
 8004332:	1c1a      	adds	r2, r3, #0
 8004334:	4b10      	ldr	r3, [pc, #64]	@ (8004378 <calculate_heart_rate+0x1f0>)
 8004336:	601a      	str	r2, [r3, #0]
    minValue += (currentValue - minValue) * decayRate;
 8004338:	4b10      	ldr	r3, [pc, #64]	@ (800437c <calculate_heart_rate+0x1f4>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	1c19      	adds	r1, r3, #0
 800433e:	6978      	ldr	r0, [r7, #20]
 8004340:	f7fc ff22 	bl	8001188 <__aeabi_fsub>
 8004344:	1c03      	adds	r3, r0, #0
 8004346:	1c1a      	adds	r2, r3, #0
 8004348:	4b14      	ldr	r3, [pc, #80]	@ (800439c <calculate_heart_rate+0x214>)
 800434a:	1c19      	adds	r1, r3, #0
 800434c:	1c10      	adds	r0, r2, #0
 800434e:	f7fc fddd 	bl	8000f0c <__aeabi_fmul>
 8004352:	1c03      	adds	r3, r0, #0
 8004354:	1c1a      	adds	r2, r3, #0
 8004356:	4b09      	ldr	r3, [pc, #36]	@ (800437c <calculate_heart_rate+0x1f4>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	1c19      	adds	r1, r3, #0
 800435c:	1c10      	adds	r0, r2, #0
 800435e:	f7fc fa65 	bl	800082c <__aeabi_fadd>
 8004362:	1c03      	adds	r3, r0, #0
 8004364:	1c1a      	adds	r2, r3, #0
 8004366:	4b05      	ldr	r3, [pc, #20]	@ (800437c <calculate_heart_rate+0x1f4>)
 8004368:	601a      	str	r2, [r3, #0]

    lastValue = currentValue;  // Update lastValue for the next iteration
 800436a:	4b08      	ldr	r3, [pc, #32]	@ (800438c <calculate_heart_rate+0x204>)
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	601a      	str	r2, [r3, #0]

}
 8004370:	46c0      	nop			@ (mov r8, r8)
 8004372:	46bd      	mov	sp, r7
 8004374:	b007      	add	sp, #28
 8004376:	bd90      	pop	{r4, r7, pc}
 8004378:	200003d4 	.word	0x200003d4
 800437c:	200003d8 	.word	0x200003d8
 8004380:	3f333333 	.word	0x3f333333
 8004384:	3d4ccccd 	.word	0x3d4ccccd
 8004388:	200003dc 	.word	0x200003dc
 800438c:	200003e4 	.word	0x200003e4
 8004390:	200003e0 	.word	0x200003e0
 8004394:	0000ea60 	.word	0x0000ea60
 8004398:	0800c1b8 	.word	0x0800c1b8
 800439c:	3ca3d70a 	.word	0x3ca3d70a

080043a0 <initialize_filters_1>:
static HighPassFilter high_pass_filter;
static LowPassFilter low_pass_filter;
static Differentiator differentiator;
static MovingAverageFilter averager;
// Function to initialize the filters
void initialize_filters_1() {
 80043a0:	b580      	push	{r7, lr}
 80043a2:	af00      	add	r7, sp, #0
    MovingAverageFilter_init1(&averager, kAveragingSamples);
 80043a4:	2232      	movs	r2, #50	@ 0x32
 80043a6:	4b0d      	ldr	r3, [pc, #52]	@ (80043dc <initialize_filters_1+0x3c>)
 80043a8:	0011      	movs	r1, r2
 80043aa:	0018      	movs	r0, r3
 80043ac:	f7ff fec8 	bl	8004140 <MovingAverageFilter_init1>
    Differentiator_init1(&differentiator, kSamplingFrequency);
 80043b0:	4a0b      	ldr	r2, [pc, #44]	@ (80043e0 <initialize_filters_1+0x40>)
 80043b2:	4b0c      	ldr	r3, [pc, #48]	@ (80043e4 <initialize_filters_1+0x44>)
 80043b4:	1c11      	adds	r1, r2, #0
 80043b6:	0018      	movs	r0, r3
 80043b8:	f7ff feb0 	bl	800411c <Differentiator_init1>
    LowPassFilter_init2(&low_pass_filter, kLowPassCutoff, kSamplingFrequency);
 80043bc:	490a      	ldr	r1, [pc, #40]	@ (80043e8 <initialize_filters_1+0x48>)
 80043be:	4a08      	ldr	r2, [pc, #32]	@ (80043e0 <initialize_filters_1+0x40>)
 80043c0:	4b0a      	ldr	r3, [pc, #40]	@ (80043ec <initialize_filters_1+0x4c>)
 80043c2:	0018      	movs	r0, r3
 80043c4:	f7ff fe78 	bl	80040b8 <LowPassFilter_init2>
    HighPassFilter_init2(&high_pass_filter, kHighPassCutoff, kSamplingFrequency);
 80043c8:	21fc      	movs	r1, #252	@ 0xfc
 80043ca:	0589      	lsls	r1, r1, #22
 80043cc:	4a04      	ldr	r2, [pc, #16]	@ (80043e0 <initialize_filters_1+0x40>)
 80043ce:	4b08      	ldr	r3, [pc, #32]	@ (80043f0 <initialize_filters_1+0x50>)
 80043d0:	0018      	movs	r0, r3
 80043d2:	f7ff fe09 	bl	8003fe8 <HighPassFilter_init2>
}
 80043d6:	46c0      	nop			@ (mov r8, r8)
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	20000418 	.word	0x20000418
 80043e0:	43c80000 	.word	0x43c80000
 80043e4:	20000410 	.word	0x20000410
 80043e8:	40a00000 	.word	0x40a00000
 80043ec:	20000400 	.word	0x20000400
 80043f0:	200003e8 	.word	0x200003e8

080043f4 <initialize_filters_2>:
// Statistic for pulse oximetry
static MinMaxAvgStatistic stat_red;
static MinMaxAvgStatistic stat_ir;


void initialize_filters_2() {
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
    MovingAverageFilter_init1(&averager_bpm, kAveragingSamples_spo2);
 80043f8:	2205      	movs	r2, #5
 80043fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004464 <initialize_filters_2+0x70>)
 80043fc:	0011      	movs	r1, r2
 80043fe:	0018      	movs	r0, r3
 8004400:	f7ff fe9e 	bl	8004140 <MovingAverageFilter_init1>
    MovingAverageFilter_init1(&averager_r, kAveragingSamples_spo2);
 8004404:	2205      	movs	r2, #5
 8004406:	4b18      	ldr	r3, [pc, #96]	@ (8004468 <initialize_filters_2+0x74>)
 8004408:	0011      	movs	r1, r2
 800440a:	0018      	movs	r0, r3
 800440c:	f7ff fe98 	bl	8004140 <MovingAverageFilter_init1>
    MovingAverageFilter_init1(&averager_spo2, kAveragingSamples_spo2);
 8004410:	2205      	movs	r2, #5
 8004412:	4b16      	ldr	r3, [pc, #88]	@ (800446c <initialize_filters_2+0x78>)
 8004414:	0011      	movs	r1, r2
 8004416:	0018      	movs	r0, r3
 8004418:	f7ff fe92 	bl	8004140 <MovingAverageFilter_init1>
    Differentiator_init1(&differentiator_spo2, kSamplingFrequency_spo2);
 800441c:	4a14      	ldr	r2, [pc, #80]	@ (8004470 <initialize_filters_2+0x7c>)
 800441e:	4b15      	ldr	r3, [pc, #84]	@ (8004474 <initialize_filters_2+0x80>)
 8004420:	1c11      	adds	r1, r2, #0
 8004422:	0018      	movs	r0, r3
 8004424:	f7ff fe7a 	bl	800411c <Differentiator_init1>
    LowPassFilter_init2(&low_pass_filter_red, kLowPassCutoff_spo2, kSamplingFrequency_spo2);
 8004428:	4913      	ldr	r1, [pc, #76]	@ (8004478 <initialize_filters_2+0x84>)
 800442a:	4a11      	ldr	r2, [pc, #68]	@ (8004470 <initialize_filters_2+0x7c>)
 800442c:	4b13      	ldr	r3, [pc, #76]	@ (800447c <initialize_filters_2+0x88>)
 800442e:	0018      	movs	r0, r3
 8004430:	f7ff fe42 	bl	80040b8 <LowPassFilter_init2>
    LowPassFilter_init2(&low_pass_filter_ir, kLowPassCutoff_spo2, kSamplingFrequency_spo2);
 8004434:	4910      	ldr	r1, [pc, #64]	@ (8004478 <initialize_filters_2+0x84>)
 8004436:	4a0e      	ldr	r2, [pc, #56]	@ (8004470 <initialize_filters_2+0x7c>)
 8004438:	4b11      	ldr	r3, [pc, #68]	@ (8004480 <initialize_filters_2+0x8c>)
 800443a:	0018      	movs	r0, r3
 800443c:	f7ff fe3c 	bl	80040b8 <LowPassFilter_init2>
    HighPassFilter_init2(&high_pass_filter_spo2, kHighPassCutoff_spo2, kSamplingFrequency_spo2);
 8004440:	21fc      	movs	r1, #252	@ 0xfc
 8004442:	0589      	lsls	r1, r1, #22
 8004444:	4a0a      	ldr	r2, [pc, #40]	@ (8004470 <initialize_filters_2+0x7c>)
 8004446:	4b0f      	ldr	r3, [pc, #60]	@ (8004484 <initialize_filters_2+0x90>)
 8004448:	0018      	movs	r0, r3
 800444a:	f7ff fdcd 	bl	8003fe8 <HighPassFilter_init2>
    MinMaxAvgStatistic_init(&stat_red);
 800444e:	4b0e      	ldr	r3, [pc, #56]	@ (8004488 <initialize_filters_2+0x94>)
 8004450:	0018      	movs	r0, r3
 8004452:	f7ff fd6d 	bl	8003f30 <MinMaxAvgStatistic_init>
    MinMaxAvgStatistic_init(&stat_ir);
 8004456:	4b0d      	ldr	r3, [pc, #52]	@ (800448c <initialize_filters_2+0x98>)
 8004458:	0018      	movs	r0, r3
 800445a:	f7ff fd69 	bl	8003f30 <MinMaxAvgStatistic_init>
}
 800445e:	46c0      	nop			@ (mov r8, r8)
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	20000468 	.word	0x20000468
 8004468:	20000478 	.word	0x20000478
 800446c:	20000488 	.word	0x20000488
 8004470:	43c80000 	.word	0x43c80000
 8004474:	20000460 	.word	0x20000460
 8004478:	40a00000 	.word	0x40a00000
 800447c:	20000428 	.word	0x20000428
 8004480:	20000438 	.word	0x20000438
 8004484:	20000448 	.word	0x20000448
 8004488:	20000498 	.word	0x20000498
 800448c:	200004a8 	.word	0x200004a8

08004490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004494:	4b07      	ldr	r3, [pc, #28]	@ (80044b4 <HAL_MspInit+0x24>)
 8004496:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004498:	4b06      	ldr	r3, [pc, #24]	@ (80044b4 <HAL_MspInit+0x24>)
 800449a:	2101      	movs	r1, #1
 800449c:	430a      	orrs	r2, r1
 800449e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80044a0:	4b04      	ldr	r3, [pc, #16]	@ (80044b4 <HAL_MspInit+0x24>)
 80044a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044a4:	4b03      	ldr	r3, [pc, #12]	@ (80044b4 <HAL_MspInit+0x24>)
 80044a6:	2180      	movs	r1, #128	@ 0x80
 80044a8:	0549      	lsls	r1, r1, #21
 80044aa:	430a      	orrs	r2, r1
 80044ac:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044ae:	46c0      	nop			@ (mov r8, r8)
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	40021000 	.word	0x40021000

080044b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80044b8:	b590      	push	{r4, r7, lr}
 80044ba:	b089      	sub	sp, #36	@ 0x24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044c0:	240c      	movs	r4, #12
 80044c2:	193b      	adds	r3, r7, r4
 80044c4:	0018      	movs	r0, r3
 80044c6:	2314      	movs	r3, #20
 80044c8:	001a      	movs	r2, r3
 80044ca:	2100      	movs	r1, #0
 80044cc:	f004 f856 	bl	800857c <memset>
  if(hi2c->Instance==I2C1)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a18      	ldr	r2, [pc, #96]	@ (8004538 <HAL_I2C_MspInit+0x80>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d12a      	bne.n	8004530 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044da:	4b18      	ldr	r3, [pc, #96]	@ (800453c <HAL_I2C_MspInit+0x84>)
 80044dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044de:	4b17      	ldr	r3, [pc, #92]	@ (800453c <HAL_I2C_MspInit+0x84>)
 80044e0:	2101      	movs	r1, #1
 80044e2:	430a      	orrs	r2, r1
 80044e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80044e6:	4b15      	ldr	r3, [pc, #84]	@ (800453c <HAL_I2C_MspInit+0x84>)
 80044e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ea:	2201      	movs	r2, #1
 80044ec:	4013      	ands	r3, r2
 80044ee:	60bb      	str	r3, [r7, #8]
 80044f0:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80044f2:	193b      	adds	r3, r7, r4
 80044f4:	22c0      	movs	r2, #192	@ 0xc0
 80044f6:	00d2      	lsls	r2, r2, #3
 80044f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044fa:	0021      	movs	r1, r4
 80044fc:	187b      	adds	r3, r7, r1
 80044fe:	2212      	movs	r2, #18
 8004500:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004502:	187b      	adds	r3, r7, r1
 8004504:	2200      	movs	r2, #0
 8004506:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004508:	187b      	adds	r3, r7, r1
 800450a:	2203      	movs	r2, #3
 800450c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800450e:	187b      	adds	r3, r7, r1
 8004510:	2206      	movs	r2, #6
 8004512:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004514:	187a      	adds	r2, r7, r1
 8004516:	23a0      	movs	r3, #160	@ 0xa0
 8004518:	05db      	lsls	r3, r3, #23
 800451a:	0011      	movs	r1, r2
 800451c:	0018      	movs	r0, r3
 800451e:	f000 fab7 	bl	8004a90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004522:	4b06      	ldr	r3, [pc, #24]	@ (800453c <HAL_I2C_MspInit+0x84>)
 8004524:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004526:	4b05      	ldr	r3, [pc, #20]	@ (800453c <HAL_I2C_MspInit+0x84>)
 8004528:	2180      	movs	r1, #128	@ 0x80
 800452a:	0389      	lsls	r1, r1, #14
 800452c:	430a      	orrs	r2, r1
 800452e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004530:	46c0      	nop			@ (mov r8, r8)
 8004532:	46bd      	mov	sp, r7
 8004534:	b009      	add	sp, #36	@ 0x24
 8004536:	bd90      	pop	{r4, r7, pc}
 8004538:	40005400 	.word	0x40005400
 800453c:	40021000 	.word	0x40021000

08004540 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004540:	b590      	push	{r4, r7, lr}
 8004542:	b089      	sub	sp, #36	@ 0x24
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004548:	240c      	movs	r4, #12
 800454a:	193b      	adds	r3, r7, r4
 800454c:	0018      	movs	r0, r3
 800454e:	2314      	movs	r3, #20
 8004550:	001a      	movs	r2, r3
 8004552:	2100      	movs	r1, #0
 8004554:	f004 f812 	bl	800857c <memset>
  if(huart->Instance==USART2)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a18      	ldr	r2, [pc, #96]	@ (80045c0 <HAL_UART_MspInit+0x80>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d129      	bne.n	80045b6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004562:	4b18      	ldr	r3, [pc, #96]	@ (80045c4 <HAL_UART_MspInit+0x84>)
 8004564:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004566:	4b17      	ldr	r3, [pc, #92]	@ (80045c4 <HAL_UART_MspInit+0x84>)
 8004568:	2180      	movs	r1, #128	@ 0x80
 800456a:	0289      	lsls	r1, r1, #10
 800456c:	430a      	orrs	r2, r1
 800456e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004570:	4b14      	ldr	r3, [pc, #80]	@ (80045c4 <HAL_UART_MspInit+0x84>)
 8004572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004574:	4b13      	ldr	r3, [pc, #76]	@ (80045c4 <HAL_UART_MspInit+0x84>)
 8004576:	2101      	movs	r1, #1
 8004578:	430a      	orrs	r2, r1
 800457a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800457c:	4b11      	ldr	r3, [pc, #68]	@ (80045c4 <HAL_UART_MspInit+0x84>)
 800457e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004580:	2201      	movs	r2, #1
 8004582:	4013      	ands	r3, r2
 8004584:	60bb      	str	r3, [r7, #8]
 8004586:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004588:	0021      	movs	r1, r4
 800458a:	187b      	adds	r3, r7, r1
 800458c:	220c      	movs	r2, #12
 800458e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004590:	187b      	adds	r3, r7, r1
 8004592:	2202      	movs	r2, #2
 8004594:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004596:	187b      	adds	r3, r7, r1
 8004598:	2200      	movs	r2, #0
 800459a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800459c:	187b      	adds	r3, r7, r1
 800459e:	2203      	movs	r2, #3
 80045a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80045a2:	187b      	adds	r3, r7, r1
 80045a4:	2204      	movs	r2, #4
 80045a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045a8:	187a      	adds	r2, r7, r1
 80045aa:	23a0      	movs	r3, #160	@ 0xa0
 80045ac:	05db      	lsls	r3, r3, #23
 80045ae:	0011      	movs	r1, r2
 80045b0:	0018      	movs	r0, r3
 80045b2:	f000 fa6d 	bl	8004a90 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80045b6:	46c0      	nop			@ (mov r8, r8)
 80045b8:	46bd      	mov	sp, r7
 80045ba:	b009      	add	sp, #36	@ 0x24
 80045bc:	bd90      	pop	{r4, r7, pc}
 80045be:	46c0      	nop			@ (mov r8, r8)
 80045c0:	40004400 	.word	0x40004400
 80045c4:	40021000 	.word	0x40021000

080045c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80045cc:	46c0      	nop			@ (mov r8, r8)
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045d6:	46c0      	nop			@ (mov r8, r8)
 80045d8:	e7fd      	b.n	80045d6 <HardFault_Handler+0x4>

080045da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80045de:	46c0      	nop			@ (mov r8, r8)
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80045e8:	46c0      	nop			@ (mov r8, r8)
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80045f2:	f000 f953 	bl	800489c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80045f6:	46c0      	nop			@ (mov r8, r8)
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
	max30102_on_interrupt(&max30102);
 8004600:	4b04      	ldr	r3, [pc, #16]	@ (8004614 <EXTI0_1_IRQHandler+0x18>)
 8004602:	0018      	movs	r0, r3
 8004604:	f7ff fa8f 	bl	8003b26 <max30102_on_interrupt>
//	printf("Interrupt triggered for GPIO_PIN_0\n");
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004608:	2001      	movs	r0, #1
 800460a:	f000 fbdd 	bl	8004dc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800460e:	46c0      	nop			@ (mov r8, r8)
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	200002cc 	.word	0x200002cc

08004618 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  return 1;
 800461c:	2301      	movs	r3, #1
}
 800461e:	0018      	movs	r0, r3
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <_kill>:

int _kill(int pid, int sig)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800462e:	f004 f811 	bl	8008654 <__errno>
 8004632:	0003      	movs	r3, r0
 8004634:	2216      	movs	r2, #22
 8004636:	601a      	str	r2, [r3, #0]
  return -1;
 8004638:	2301      	movs	r3, #1
 800463a:	425b      	negs	r3, r3
}
 800463c:	0018      	movs	r0, r3
 800463e:	46bd      	mov	sp, r7
 8004640:	b002      	add	sp, #8
 8004642:	bd80      	pop	{r7, pc}

08004644 <_exit>:

void _exit (int status)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800464c:	2301      	movs	r3, #1
 800464e:	425a      	negs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	0011      	movs	r1, r2
 8004654:	0018      	movs	r0, r3
 8004656:	f7ff ffe5 	bl	8004624 <_kill>
  while (1) {}    /* Make sure we hang here */
 800465a:	46c0      	nop			@ (mov r8, r8)
 800465c:	e7fd      	b.n	800465a <_exit+0x16>

0800465e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b086      	sub	sp, #24
 8004662:	af00      	add	r7, sp, #0
 8004664:	60f8      	str	r0, [r7, #12]
 8004666:	60b9      	str	r1, [r7, #8]
 8004668:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800466a:	2300      	movs	r3, #0
 800466c:	617b      	str	r3, [r7, #20]
 800466e:	e00a      	b.n	8004686 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004670:	e000      	b.n	8004674 <_read+0x16>
 8004672:	bf00      	nop
 8004674:	0001      	movs	r1, r0
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	1c5a      	adds	r2, r3, #1
 800467a:	60ba      	str	r2, [r7, #8]
 800467c:	b2ca      	uxtb	r2, r1
 800467e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	3301      	adds	r3, #1
 8004684:	617b      	str	r3, [r7, #20]
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	429a      	cmp	r2, r3
 800468c:	dbf0      	blt.n	8004670 <_read+0x12>
  }

  return len;
 800468e:	687b      	ldr	r3, [r7, #4]
}
 8004690:	0018      	movs	r0, r3
 8004692:	46bd      	mov	sp, r7
 8004694:	b006      	add	sp, #24
 8004696:	bd80      	pop	{r7, pc}

08004698 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046a4:	2300      	movs	r3, #0
 80046a6:	617b      	str	r3, [r7, #20]
 80046a8:	e009      	b.n	80046be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	1c5a      	adds	r2, r3, #1
 80046ae:	60ba      	str	r2, [r7, #8]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	0018      	movs	r0, r3
 80046b4:	f7fe ff4c 	bl	8003550 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	3301      	adds	r3, #1
 80046bc:	617b      	str	r3, [r7, #20]
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	dbf1      	blt.n	80046aa <_write+0x12>
  }
  return len;
 80046c6:	687b      	ldr	r3, [r7, #4]
}
 80046c8:	0018      	movs	r0, r3
 80046ca:	46bd      	mov	sp, r7
 80046cc:	b006      	add	sp, #24
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <_close>:

int _close(int file)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80046d8:	2301      	movs	r3, #1
 80046da:	425b      	negs	r3, r3
}
 80046dc:	0018      	movs	r0, r3
 80046de:	46bd      	mov	sp, r7
 80046e0:	b002      	add	sp, #8
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2280      	movs	r2, #128	@ 0x80
 80046f2:	0192      	lsls	r2, r2, #6
 80046f4:	605a      	str	r2, [r3, #4]
  return 0;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	0018      	movs	r0, r3
 80046fa:	46bd      	mov	sp, r7
 80046fc:	b002      	add	sp, #8
 80046fe:	bd80      	pop	{r7, pc}

08004700 <_isatty>:

int _isatty(int file)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004708:	2301      	movs	r3, #1
}
 800470a:	0018      	movs	r0, r3
 800470c:	46bd      	mov	sp, r7
 800470e:	b002      	add	sp, #8
 8004710:	bd80      	pop	{r7, pc}

08004712 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b084      	sub	sp, #16
 8004716:	af00      	add	r7, sp, #0
 8004718:	60f8      	str	r0, [r7, #12]
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800471e:	2300      	movs	r3, #0
}
 8004720:	0018      	movs	r0, r3
 8004722:	46bd      	mov	sp, r7
 8004724:	b004      	add	sp, #16
 8004726:	bd80      	pop	{r7, pc}

08004728 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004730:	4a14      	ldr	r2, [pc, #80]	@ (8004784 <_sbrk+0x5c>)
 8004732:	4b15      	ldr	r3, [pc, #84]	@ (8004788 <_sbrk+0x60>)
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800473c:	4b13      	ldr	r3, [pc, #76]	@ (800478c <_sbrk+0x64>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d102      	bne.n	800474a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004744:	4b11      	ldr	r3, [pc, #68]	@ (800478c <_sbrk+0x64>)
 8004746:	4a12      	ldr	r2, [pc, #72]	@ (8004790 <_sbrk+0x68>)
 8004748:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800474a:	4b10      	ldr	r3, [pc, #64]	@ (800478c <_sbrk+0x64>)
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	18d3      	adds	r3, r2, r3
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	429a      	cmp	r2, r3
 8004756:	d207      	bcs.n	8004768 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004758:	f003 ff7c 	bl	8008654 <__errno>
 800475c:	0003      	movs	r3, r0
 800475e:	220c      	movs	r2, #12
 8004760:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004762:	2301      	movs	r3, #1
 8004764:	425b      	negs	r3, r3
 8004766:	e009      	b.n	800477c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004768:	4b08      	ldr	r3, [pc, #32]	@ (800478c <_sbrk+0x64>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800476e:	4b07      	ldr	r3, [pc, #28]	@ (800478c <_sbrk+0x64>)
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	18d2      	adds	r2, r2, r3
 8004776:	4b05      	ldr	r3, [pc, #20]	@ (800478c <_sbrk+0x64>)
 8004778:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800477a:	68fb      	ldr	r3, [r7, #12]
}
 800477c:	0018      	movs	r0, r3
 800477e:	46bd      	mov	sp, r7
 8004780:	b006      	add	sp, #24
 8004782:	bd80      	pop	{r7, pc}
 8004784:	20005000 	.word	0x20005000
 8004788:	00000400 	.word	0x00000400
 800478c:	200004b8 	.word	0x200004b8
 8004790:	20000610 	.word	0x20000610

08004794 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004798:	46c0      	nop			@ (mov r8, r8)
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
	...

080047a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80047a0:	480d      	ldr	r0, [pc, #52]	@ (80047d8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80047a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80047a4:	f7ff fff6 	bl	8004794 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80047a8:	480c      	ldr	r0, [pc, #48]	@ (80047dc <LoopForever+0x6>)
  ldr r1, =_edata
 80047aa:	490d      	ldr	r1, [pc, #52]	@ (80047e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80047ac:	4a0d      	ldr	r2, [pc, #52]	@ (80047e4 <LoopForever+0xe>)
  movs r3, #0
 80047ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80047b0:	e002      	b.n	80047b8 <LoopCopyDataInit>

080047b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80047b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047b6:	3304      	adds	r3, #4

080047b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047bc:	d3f9      	bcc.n	80047b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047be:	4a0a      	ldr	r2, [pc, #40]	@ (80047e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80047c0:	4c0a      	ldr	r4, [pc, #40]	@ (80047ec <LoopForever+0x16>)
  movs r3, #0
 80047c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047c4:	e001      	b.n	80047ca <LoopFillZerobss>

080047c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047c8:	3204      	adds	r2, #4

080047ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047cc:	d3fb      	bcc.n	80047c6 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80047ce:	f003 ff47 	bl	8008660 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80047d2:	f7fe fed5 	bl	8003580 <main>

080047d6 <LoopForever>:

LoopForever:
    b LoopForever
 80047d6:	e7fe      	b.n	80047d6 <LoopForever>
   ldr   r0, =_estack
 80047d8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80047dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047e0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80047e4:	0800c828 	.word	0x0800c828
  ldr r2, =_sbss
 80047e8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80047ec:	2000060c 	.word	0x2000060c

080047f0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80047f0:	e7fe      	b.n	80047f0 <ADC1_COMP_IRQHandler>
	...

080047f4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80047fa:	1dfb      	adds	r3, r7, #7
 80047fc:	2200      	movs	r2, #0
 80047fe:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004800:	4b0b      	ldr	r3, [pc, #44]	@ (8004830 <HAL_Init+0x3c>)
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	4b0a      	ldr	r3, [pc, #40]	@ (8004830 <HAL_Init+0x3c>)
 8004806:	2140      	movs	r1, #64	@ 0x40
 8004808:	430a      	orrs	r2, r1
 800480a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800480c:	2000      	movs	r0, #0
 800480e:	f000 f811 	bl	8004834 <HAL_InitTick>
 8004812:	1e03      	subs	r3, r0, #0
 8004814:	d003      	beq.n	800481e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8004816:	1dfb      	adds	r3, r7, #7
 8004818:	2201      	movs	r2, #1
 800481a:	701a      	strb	r2, [r3, #0]
 800481c:	e001      	b.n	8004822 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800481e:	f7ff fe37 	bl	8004490 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004822:	1dfb      	adds	r3, r7, #7
 8004824:	781b      	ldrb	r3, [r3, #0]
}
 8004826:	0018      	movs	r0, r3
 8004828:	46bd      	mov	sp, r7
 800482a:	b002      	add	sp, #8
 800482c:	bd80      	pop	{r7, pc}
 800482e:	46c0      	nop			@ (mov r8, r8)
 8004830:	40022000 	.word	0x40022000

08004834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004834:	b590      	push	{r4, r7, lr}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800483c:	4b14      	ldr	r3, [pc, #80]	@ (8004890 <HAL_InitTick+0x5c>)
 800483e:	681c      	ldr	r4, [r3, #0]
 8004840:	4b14      	ldr	r3, [pc, #80]	@ (8004894 <HAL_InitTick+0x60>)
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	0019      	movs	r1, r3
 8004846:	23fa      	movs	r3, #250	@ 0xfa
 8004848:	0098      	lsls	r0, r3, #2
 800484a:	f7fb fc79 	bl	8000140 <__udivsi3>
 800484e:	0003      	movs	r3, r0
 8004850:	0019      	movs	r1, r3
 8004852:	0020      	movs	r0, r4
 8004854:	f7fb fc74 	bl	8000140 <__udivsi3>
 8004858:	0003      	movs	r3, r0
 800485a:	0018      	movs	r0, r3
 800485c:	f000 f90b 	bl	8004a76 <HAL_SYSTICK_Config>
 8004860:	1e03      	subs	r3, r0, #0
 8004862:	d001      	beq.n	8004868 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e00f      	b.n	8004888 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b03      	cmp	r3, #3
 800486c:	d80b      	bhi.n	8004886 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800486e:	6879      	ldr	r1, [r7, #4]
 8004870:	2301      	movs	r3, #1
 8004872:	425b      	negs	r3, r3
 8004874:	2200      	movs	r2, #0
 8004876:	0018      	movs	r0, r3
 8004878:	f000 f8d8 	bl	8004a2c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800487c:	4b06      	ldr	r3, [pc, #24]	@ (8004898 <HAL_InitTick+0x64>)
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004882:	2300      	movs	r3, #0
 8004884:	e000      	b.n	8004888 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
}
 8004888:	0018      	movs	r0, r3
 800488a:	46bd      	mov	sp, r7
 800488c:	b003      	add	sp, #12
 800488e:	bd90      	pop	{r4, r7, pc}
 8004890:	20000000 	.word	0x20000000
 8004894:	20000008 	.word	0x20000008
 8004898:	20000004 	.word	0x20000004

0800489c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048a0:	4b05      	ldr	r3, [pc, #20]	@ (80048b8 <HAL_IncTick+0x1c>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	001a      	movs	r2, r3
 80048a6:	4b05      	ldr	r3, [pc, #20]	@ (80048bc <HAL_IncTick+0x20>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	18d2      	adds	r2, r2, r3
 80048ac:	4b03      	ldr	r3, [pc, #12]	@ (80048bc <HAL_IncTick+0x20>)
 80048ae:	601a      	str	r2, [r3, #0]
}
 80048b0:	46c0      	nop			@ (mov r8, r8)
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	46c0      	nop			@ (mov r8, r8)
 80048b8:	20000008 	.word	0x20000008
 80048bc:	200004bc 	.word	0x200004bc

080048c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  return uwTick;
 80048c4:	4b02      	ldr	r3, [pc, #8]	@ (80048d0 <HAL_GetTick+0x10>)
 80048c6:	681b      	ldr	r3, [r3, #0]
}
 80048c8:	0018      	movs	r0, r3
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	46c0      	nop			@ (mov r8, r8)
 80048d0:	200004bc 	.word	0x200004bc

080048d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	0002      	movs	r2, r0
 80048dc:	1dfb      	adds	r3, r7, #7
 80048de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80048e0:	1dfb      	adds	r3, r7, #7
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80048e6:	d809      	bhi.n	80048fc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048e8:	1dfb      	adds	r3, r7, #7
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	001a      	movs	r2, r3
 80048ee:	231f      	movs	r3, #31
 80048f0:	401a      	ands	r2, r3
 80048f2:	4b04      	ldr	r3, [pc, #16]	@ (8004904 <__NVIC_EnableIRQ+0x30>)
 80048f4:	2101      	movs	r1, #1
 80048f6:	4091      	lsls	r1, r2
 80048f8:	000a      	movs	r2, r1
 80048fa:	601a      	str	r2, [r3, #0]
  }
}
 80048fc:	46c0      	nop			@ (mov r8, r8)
 80048fe:	46bd      	mov	sp, r7
 8004900:	b002      	add	sp, #8
 8004902:	bd80      	pop	{r7, pc}
 8004904:	e000e100 	.word	0xe000e100

08004908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004908:	b590      	push	{r4, r7, lr}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	0002      	movs	r2, r0
 8004910:	6039      	str	r1, [r7, #0]
 8004912:	1dfb      	adds	r3, r7, #7
 8004914:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004916:	1dfb      	adds	r3, r7, #7
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	2b7f      	cmp	r3, #127	@ 0x7f
 800491c:	d828      	bhi.n	8004970 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800491e:	4a2f      	ldr	r2, [pc, #188]	@ (80049dc <__NVIC_SetPriority+0xd4>)
 8004920:	1dfb      	adds	r3, r7, #7
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	b25b      	sxtb	r3, r3
 8004926:	089b      	lsrs	r3, r3, #2
 8004928:	33c0      	adds	r3, #192	@ 0xc0
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	589b      	ldr	r3, [r3, r2]
 800492e:	1dfa      	adds	r2, r7, #7
 8004930:	7812      	ldrb	r2, [r2, #0]
 8004932:	0011      	movs	r1, r2
 8004934:	2203      	movs	r2, #3
 8004936:	400a      	ands	r2, r1
 8004938:	00d2      	lsls	r2, r2, #3
 800493a:	21ff      	movs	r1, #255	@ 0xff
 800493c:	4091      	lsls	r1, r2
 800493e:	000a      	movs	r2, r1
 8004940:	43d2      	mvns	r2, r2
 8004942:	401a      	ands	r2, r3
 8004944:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	019b      	lsls	r3, r3, #6
 800494a:	22ff      	movs	r2, #255	@ 0xff
 800494c:	401a      	ands	r2, r3
 800494e:	1dfb      	adds	r3, r7, #7
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	0018      	movs	r0, r3
 8004954:	2303      	movs	r3, #3
 8004956:	4003      	ands	r3, r0
 8004958:	00db      	lsls	r3, r3, #3
 800495a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800495c:	481f      	ldr	r0, [pc, #124]	@ (80049dc <__NVIC_SetPriority+0xd4>)
 800495e:	1dfb      	adds	r3, r7, #7
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	b25b      	sxtb	r3, r3
 8004964:	089b      	lsrs	r3, r3, #2
 8004966:	430a      	orrs	r2, r1
 8004968:	33c0      	adds	r3, #192	@ 0xc0
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800496e:	e031      	b.n	80049d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004970:	4a1b      	ldr	r2, [pc, #108]	@ (80049e0 <__NVIC_SetPriority+0xd8>)
 8004972:	1dfb      	adds	r3, r7, #7
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	0019      	movs	r1, r3
 8004978:	230f      	movs	r3, #15
 800497a:	400b      	ands	r3, r1
 800497c:	3b08      	subs	r3, #8
 800497e:	089b      	lsrs	r3, r3, #2
 8004980:	3306      	adds	r3, #6
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	18d3      	adds	r3, r2, r3
 8004986:	3304      	adds	r3, #4
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	1dfa      	adds	r2, r7, #7
 800498c:	7812      	ldrb	r2, [r2, #0]
 800498e:	0011      	movs	r1, r2
 8004990:	2203      	movs	r2, #3
 8004992:	400a      	ands	r2, r1
 8004994:	00d2      	lsls	r2, r2, #3
 8004996:	21ff      	movs	r1, #255	@ 0xff
 8004998:	4091      	lsls	r1, r2
 800499a:	000a      	movs	r2, r1
 800499c:	43d2      	mvns	r2, r2
 800499e:	401a      	ands	r2, r3
 80049a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	019b      	lsls	r3, r3, #6
 80049a6:	22ff      	movs	r2, #255	@ 0xff
 80049a8:	401a      	ands	r2, r3
 80049aa:	1dfb      	adds	r3, r7, #7
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	0018      	movs	r0, r3
 80049b0:	2303      	movs	r3, #3
 80049b2:	4003      	ands	r3, r0
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049b8:	4809      	ldr	r0, [pc, #36]	@ (80049e0 <__NVIC_SetPriority+0xd8>)
 80049ba:	1dfb      	adds	r3, r7, #7
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	001c      	movs	r4, r3
 80049c0:	230f      	movs	r3, #15
 80049c2:	4023      	ands	r3, r4
 80049c4:	3b08      	subs	r3, #8
 80049c6:	089b      	lsrs	r3, r3, #2
 80049c8:	430a      	orrs	r2, r1
 80049ca:	3306      	adds	r3, #6
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	18c3      	adds	r3, r0, r3
 80049d0:	3304      	adds	r3, #4
 80049d2:	601a      	str	r2, [r3, #0]
}
 80049d4:	46c0      	nop			@ (mov r8, r8)
 80049d6:	46bd      	mov	sp, r7
 80049d8:	b003      	add	sp, #12
 80049da:	bd90      	pop	{r4, r7, pc}
 80049dc:	e000e100 	.word	0xe000e100
 80049e0:	e000ed00 	.word	0xe000ed00

080049e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	1e5a      	subs	r2, r3, #1
 80049f0:	2380      	movs	r3, #128	@ 0x80
 80049f2:	045b      	lsls	r3, r3, #17
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d301      	bcc.n	80049fc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049f8:	2301      	movs	r3, #1
 80049fa:	e010      	b.n	8004a1e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004a28 <SysTick_Config+0x44>)
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	3a01      	subs	r2, #1
 8004a02:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a04:	2301      	movs	r3, #1
 8004a06:	425b      	negs	r3, r3
 8004a08:	2103      	movs	r1, #3
 8004a0a:	0018      	movs	r0, r3
 8004a0c:	f7ff ff7c 	bl	8004908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a10:	4b05      	ldr	r3, [pc, #20]	@ (8004a28 <SysTick_Config+0x44>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a16:	4b04      	ldr	r3, [pc, #16]	@ (8004a28 <SysTick_Config+0x44>)
 8004a18:	2207      	movs	r2, #7
 8004a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	0018      	movs	r0, r3
 8004a20:	46bd      	mov	sp, r7
 8004a22:	b002      	add	sp, #8
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	46c0      	nop			@ (mov r8, r8)
 8004a28:	e000e010 	.word	0xe000e010

08004a2c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60b9      	str	r1, [r7, #8]
 8004a34:	607a      	str	r2, [r7, #4]
 8004a36:	210f      	movs	r1, #15
 8004a38:	187b      	adds	r3, r7, r1
 8004a3a:	1c02      	adds	r2, r0, #0
 8004a3c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	187b      	adds	r3, r7, r1
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	b25b      	sxtb	r3, r3
 8004a46:	0011      	movs	r1, r2
 8004a48:	0018      	movs	r0, r3
 8004a4a:	f7ff ff5d 	bl	8004908 <__NVIC_SetPriority>
}
 8004a4e:	46c0      	nop			@ (mov r8, r8)
 8004a50:	46bd      	mov	sp, r7
 8004a52:	b004      	add	sp, #16
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b082      	sub	sp, #8
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	0002      	movs	r2, r0
 8004a5e:	1dfb      	adds	r3, r7, #7
 8004a60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a62:	1dfb      	adds	r3, r7, #7
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	b25b      	sxtb	r3, r3
 8004a68:	0018      	movs	r0, r3
 8004a6a:	f7ff ff33 	bl	80048d4 <__NVIC_EnableIRQ>
}
 8004a6e:	46c0      	nop			@ (mov r8, r8)
 8004a70:	46bd      	mov	sp, r7
 8004a72:	b002      	add	sp, #8
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b082      	sub	sp, #8
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	0018      	movs	r0, r3
 8004a82:	f7ff ffaf 	bl	80049e4 <SysTick_Config>
 8004a86:	0003      	movs	r3, r0
}
 8004a88:	0018      	movs	r0, r3
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	b002      	add	sp, #8
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004aa6:	e155      	b.n	8004d54 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2101      	movs	r1, #1
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	4091      	lsls	r1, r2
 8004ab2:	000a      	movs	r2, r1
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d100      	bne.n	8004ac0 <HAL_GPIO_Init+0x30>
 8004abe:	e146      	b.n	8004d4e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	2203      	movs	r2, #3
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d005      	beq.n	8004ad8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	2203      	movs	r2, #3
 8004ad2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d130      	bne.n	8004b3a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	2203      	movs	r2, #3
 8004ae4:	409a      	lsls	r2, r3
 8004ae6:	0013      	movs	r3, r2
 8004ae8:	43da      	mvns	r2, r3
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	4013      	ands	r3, r2
 8004aee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	68da      	ldr	r2, [r3, #12]
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	409a      	lsls	r2, r3
 8004afa:	0013      	movs	r3, r2
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b0e:	2201      	movs	r2, #1
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	409a      	lsls	r2, r3
 8004b14:	0013      	movs	r3, r2
 8004b16:	43da      	mvns	r2, r3
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	091b      	lsrs	r3, r3, #4
 8004b24:	2201      	movs	r2, #1
 8004b26:	401a      	ands	r2, r3
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	409a      	lsls	r2, r3
 8004b2c:	0013      	movs	r3, r2
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2203      	movs	r2, #3
 8004b40:	4013      	ands	r3, r2
 8004b42:	2b03      	cmp	r3, #3
 8004b44:	d017      	beq.n	8004b76 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	2203      	movs	r2, #3
 8004b52:	409a      	lsls	r2, r3
 8004b54:	0013      	movs	r3, r2
 8004b56:	43da      	mvns	r2, r3
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	689a      	ldr	r2, [r3, #8]
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	005b      	lsls	r3, r3, #1
 8004b66:	409a      	lsls	r2, r3
 8004b68:	0013      	movs	r3, r2
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2203      	movs	r2, #3
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d123      	bne.n	8004bca <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	08da      	lsrs	r2, r3, #3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	3208      	adds	r2, #8
 8004b8a:	0092      	lsls	r2, r2, #2
 8004b8c:	58d3      	ldr	r3, [r2, r3]
 8004b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	2207      	movs	r2, #7
 8004b94:	4013      	ands	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	220f      	movs	r2, #15
 8004b9a:	409a      	lsls	r2, r3
 8004b9c:	0013      	movs	r3, r2
 8004b9e:	43da      	mvns	r2, r3
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	691a      	ldr	r2, [r3, #16]
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2107      	movs	r1, #7
 8004bae:	400b      	ands	r3, r1
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	409a      	lsls	r2, r3
 8004bb4:	0013      	movs	r3, r2
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	08da      	lsrs	r2, r3, #3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3208      	adds	r2, #8
 8004bc4:	0092      	lsls	r2, r2, #2
 8004bc6:	6939      	ldr	r1, [r7, #16]
 8004bc8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	2203      	movs	r2, #3
 8004bd6:	409a      	lsls	r2, r3
 8004bd8:	0013      	movs	r3, r2
 8004bda:	43da      	mvns	r2, r3
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	4013      	ands	r3, r2
 8004be0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	2203      	movs	r2, #3
 8004be8:	401a      	ands	r2, r3
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	409a      	lsls	r2, r3
 8004bf0:	0013      	movs	r3, r2
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	23c0      	movs	r3, #192	@ 0xc0
 8004c04:	029b      	lsls	r3, r3, #10
 8004c06:	4013      	ands	r3, r2
 8004c08:	d100      	bne.n	8004c0c <HAL_GPIO_Init+0x17c>
 8004c0a:	e0a0      	b.n	8004d4e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c0c:	4b57      	ldr	r3, [pc, #348]	@ (8004d6c <HAL_GPIO_Init+0x2dc>)
 8004c0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c10:	4b56      	ldr	r3, [pc, #344]	@ (8004d6c <HAL_GPIO_Init+0x2dc>)
 8004c12:	2101      	movs	r1, #1
 8004c14:	430a      	orrs	r2, r1
 8004c16:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c18:	4a55      	ldr	r2, [pc, #340]	@ (8004d70 <HAL_GPIO_Init+0x2e0>)
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	089b      	lsrs	r3, r3, #2
 8004c1e:	3302      	adds	r3, #2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	589b      	ldr	r3, [r3, r2]
 8004c24:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2203      	movs	r2, #3
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	220f      	movs	r2, #15
 8004c30:	409a      	lsls	r2, r3
 8004c32:	0013      	movs	r3, r2
 8004c34:	43da      	mvns	r2, r3
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	23a0      	movs	r3, #160	@ 0xa0
 8004c40:	05db      	lsls	r3, r3, #23
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d01f      	beq.n	8004c86 <HAL_GPIO_Init+0x1f6>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a4a      	ldr	r2, [pc, #296]	@ (8004d74 <HAL_GPIO_Init+0x2e4>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d019      	beq.n	8004c82 <HAL_GPIO_Init+0x1f2>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a49      	ldr	r2, [pc, #292]	@ (8004d78 <HAL_GPIO_Init+0x2e8>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d013      	beq.n	8004c7e <HAL_GPIO_Init+0x1ee>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a48      	ldr	r2, [pc, #288]	@ (8004d7c <HAL_GPIO_Init+0x2ec>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d00d      	beq.n	8004c7a <HAL_GPIO_Init+0x1ea>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a47      	ldr	r2, [pc, #284]	@ (8004d80 <HAL_GPIO_Init+0x2f0>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d007      	beq.n	8004c76 <HAL_GPIO_Init+0x1e6>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a46      	ldr	r2, [pc, #280]	@ (8004d84 <HAL_GPIO_Init+0x2f4>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d101      	bne.n	8004c72 <HAL_GPIO_Init+0x1e2>
 8004c6e:	2305      	movs	r3, #5
 8004c70:	e00a      	b.n	8004c88 <HAL_GPIO_Init+0x1f8>
 8004c72:	2306      	movs	r3, #6
 8004c74:	e008      	b.n	8004c88 <HAL_GPIO_Init+0x1f8>
 8004c76:	2304      	movs	r3, #4
 8004c78:	e006      	b.n	8004c88 <HAL_GPIO_Init+0x1f8>
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e004      	b.n	8004c88 <HAL_GPIO_Init+0x1f8>
 8004c7e:	2302      	movs	r3, #2
 8004c80:	e002      	b.n	8004c88 <HAL_GPIO_Init+0x1f8>
 8004c82:	2301      	movs	r3, #1
 8004c84:	e000      	b.n	8004c88 <HAL_GPIO_Init+0x1f8>
 8004c86:	2300      	movs	r3, #0
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	2103      	movs	r1, #3
 8004c8c:	400a      	ands	r2, r1
 8004c8e:	0092      	lsls	r2, r2, #2
 8004c90:	4093      	lsls	r3, r2
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c98:	4935      	ldr	r1, [pc, #212]	@ (8004d70 <HAL_GPIO_Init+0x2e0>)
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	089b      	lsrs	r3, r3, #2
 8004c9e:	3302      	adds	r3, #2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ca6:	4b38      	ldr	r3, [pc, #224]	@ (8004d88 <HAL_GPIO_Init+0x2f8>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	43da      	mvns	r2, r3
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	2380      	movs	r3, #128	@ 0x80
 8004cbc:	035b      	lsls	r3, r3, #13
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	d003      	beq.n	8004cca <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004cca:	4b2f      	ldr	r3, [pc, #188]	@ (8004d88 <HAL_GPIO_Init+0x2f8>)
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004cd0:	4b2d      	ldr	r3, [pc, #180]	@ (8004d88 <HAL_GPIO_Init+0x2f8>)
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	43da      	mvns	r2, r3
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	4013      	ands	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	2380      	movs	r3, #128	@ 0x80
 8004ce6:	039b      	lsls	r3, r3, #14
 8004ce8:	4013      	ands	r3, r2
 8004cea:	d003      	beq.n	8004cf4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004cf4:	4b24      	ldr	r3, [pc, #144]	@ (8004d88 <HAL_GPIO_Init+0x2f8>)
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8004cfa:	4b23      	ldr	r3, [pc, #140]	@ (8004d88 <HAL_GPIO_Init+0x2f8>)
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	43da      	mvns	r2, r3
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	4013      	ands	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	2380      	movs	r3, #128	@ 0x80
 8004d10:	029b      	lsls	r3, r3, #10
 8004d12:	4013      	ands	r3, r2
 8004d14:	d003      	beq.n	8004d1e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8004d88 <HAL_GPIO_Init+0x2f8>)
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d24:	4b18      	ldr	r3, [pc, #96]	@ (8004d88 <HAL_GPIO_Init+0x2f8>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	43da      	mvns	r2, r3
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	4013      	ands	r3, r2
 8004d32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685a      	ldr	r2, [r3, #4]
 8004d38:	2380      	movs	r3, #128	@ 0x80
 8004d3a:	025b      	lsls	r3, r3, #9
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	d003      	beq.n	8004d48 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004d48:	4b0f      	ldr	r3, [pc, #60]	@ (8004d88 <HAL_GPIO_Init+0x2f8>)
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	3301      	adds	r3, #1
 8004d52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	40da      	lsrs	r2, r3
 8004d5c:	1e13      	subs	r3, r2, #0
 8004d5e:	d000      	beq.n	8004d62 <HAL_GPIO_Init+0x2d2>
 8004d60:	e6a2      	b.n	8004aa8 <HAL_GPIO_Init+0x18>
  }
}
 8004d62:	46c0      	nop			@ (mov r8, r8)
 8004d64:	46c0      	nop			@ (mov r8, r8)
 8004d66:	46bd      	mov	sp, r7
 8004d68:	b006      	add	sp, #24
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	40010000 	.word	0x40010000
 8004d74:	50000400 	.word	0x50000400
 8004d78:	50000800 	.word	0x50000800
 8004d7c:	50000c00 	.word	0x50000c00
 8004d80:	50001000 	.word	0x50001000
 8004d84:	50001c00 	.word	0x50001c00
 8004d88:	40010400 	.word	0x40010400

08004d8c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	0008      	movs	r0, r1
 8004d96:	0011      	movs	r1, r2
 8004d98:	1cbb      	adds	r3, r7, #2
 8004d9a:	1c02      	adds	r2, r0, #0
 8004d9c:	801a      	strh	r2, [r3, #0]
 8004d9e:	1c7b      	adds	r3, r7, #1
 8004da0:	1c0a      	adds	r2, r1, #0
 8004da2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004da4:	1c7b      	adds	r3, r7, #1
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d004      	beq.n	8004db6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dac:	1cbb      	adds	r3, r7, #2
 8004dae:	881a      	ldrh	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004db4:	e003      	b.n	8004dbe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004db6:	1cbb      	adds	r3, r7, #2
 8004db8:	881a      	ldrh	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004dbe:	46c0      	nop			@ (mov r8, r8)
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	b002      	add	sp, #8
 8004dc4:	bd80      	pop	{r7, pc}
	...

08004dc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	0002      	movs	r2, r0
 8004dd0:	1dbb      	adds	r3, r7, #6
 8004dd2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004dd4:	4b09      	ldr	r3, [pc, #36]	@ (8004dfc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	1dba      	adds	r2, r7, #6
 8004dda:	8812      	ldrh	r2, [r2, #0]
 8004ddc:	4013      	ands	r3, r2
 8004dde:	d008      	beq.n	8004df2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004de0:	4b06      	ldr	r3, [pc, #24]	@ (8004dfc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004de2:	1dba      	adds	r2, r7, #6
 8004de4:	8812      	ldrh	r2, [r2, #0]
 8004de6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004de8:	1dbb      	adds	r3, r7, #6
 8004dea:	881b      	ldrh	r3, [r3, #0]
 8004dec:	0018      	movs	r0, r3
 8004dee:	f000 f807 	bl	8004e00 <HAL_GPIO_EXTI_Callback>
  }
}
 8004df2:	46c0      	nop			@ (mov r8, r8)
 8004df4:	46bd      	mov	sp, r7
 8004df6:	b002      	add	sp, #8
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	46c0      	nop			@ (mov r8, r8)
 8004dfc:	40010400 	.word	0x40010400

08004e00 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	0002      	movs	r2, r0
 8004e08:	1dbb      	adds	r3, r7, #6
 8004e0a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004e0c:	46c0      	nop			@ (mov r8, r8)
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	b002      	add	sp, #8
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e082      	b.n	8004f2c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2241      	movs	r2, #65	@ 0x41
 8004e2a:	5c9b      	ldrb	r3, [r3, r2]
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d107      	bne.n	8004e42 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2240      	movs	r2, #64	@ 0x40
 8004e36:	2100      	movs	r1, #0
 8004e38:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	0018      	movs	r0, r3
 8004e3e:	f7ff fb3b 	bl	80044b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2241      	movs	r2, #65	@ 0x41
 8004e46:	2124      	movs	r1, #36	@ 0x24
 8004e48:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2101      	movs	r1, #1
 8004e56:	438a      	bics	r2, r1
 8004e58:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4934      	ldr	r1, [pc, #208]	@ (8004f34 <HAL_I2C_Init+0x120>)
 8004e64:	400a      	ands	r2, r1
 8004e66:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4931      	ldr	r1, [pc, #196]	@ (8004f38 <HAL_I2C_Init+0x124>)
 8004e74:	400a      	ands	r2, r1
 8004e76:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d108      	bne.n	8004e92 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689a      	ldr	r2, [r3, #8]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2180      	movs	r1, #128	@ 0x80
 8004e8a:	0209      	lsls	r1, r1, #8
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	609a      	str	r2, [r3, #8]
 8004e90:	e007      	b.n	8004ea2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689a      	ldr	r2, [r3, #8]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2184      	movs	r1, #132	@ 0x84
 8004e9c:	0209      	lsls	r1, r1, #8
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d104      	bne.n	8004eb4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2280      	movs	r2, #128	@ 0x80
 8004eb0:	0112      	lsls	r2, r2, #4
 8004eb2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	491f      	ldr	r1, [pc, #124]	@ (8004f3c <HAL_I2C_Init+0x128>)
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	491a      	ldr	r1, [pc, #104]	@ (8004f38 <HAL_I2C_Init+0x124>)
 8004ed0:	400a      	ands	r2, r1
 8004ed2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	691a      	ldr	r2, [r3, #16]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	431a      	orrs	r2, r3
 8004ede:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	69d9      	ldr	r1, [r3, #28]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1a      	ldr	r2, [r3, #32]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2101      	movs	r1, #1
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2241      	movs	r2, #65	@ 0x41
 8004f18:	2120      	movs	r1, #32
 8004f1a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2242      	movs	r2, #66	@ 0x42
 8004f26:	2100      	movs	r1, #0
 8004f28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	0018      	movs	r0, r3
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	b002      	add	sp, #8
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	f0ffffff 	.word	0xf0ffffff
 8004f38:	ffff7fff 	.word	0xffff7fff
 8004f3c:	02008000 	.word	0x02008000

08004f40 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004f40:	b590      	push	{r4, r7, lr}
 8004f42:	b089      	sub	sp, #36	@ 0x24
 8004f44:	af02      	add	r7, sp, #8
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	0008      	movs	r0, r1
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	0019      	movs	r1, r3
 8004f4e:	230a      	movs	r3, #10
 8004f50:	18fb      	adds	r3, r7, r3
 8004f52:	1c02      	adds	r2, r0, #0
 8004f54:	801a      	strh	r2, [r3, #0]
 8004f56:	2308      	movs	r3, #8
 8004f58:	18fb      	adds	r3, r7, r3
 8004f5a:	1c0a      	adds	r2, r1, #0
 8004f5c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2241      	movs	r2, #65	@ 0x41
 8004f62:	5c9b      	ldrb	r3, [r3, r2]
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b20      	cmp	r3, #32
 8004f68:	d000      	beq.n	8004f6c <HAL_I2C_Master_Transmit+0x2c>
 8004f6a:	e0e7      	b.n	800513c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2240      	movs	r2, #64	@ 0x40
 8004f70:	5c9b      	ldrb	r3, [r3, r2]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d101      	bne.n	8004f7a <HAL_I2C_Master_Transmit+0x3a>
 8004f76:	2302      	movs	r3, #2
 8004f78:	e0e1      	b.n	800513e <HAL_I2C_Master_Transmit+0x1fe>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2240      	movs	r2, #64	@ 0x40
 8004f7e:	2101      	movs	r1, #1
 8004f80:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f82:	f7ff fc9d 	bl	80048c0 <HAL_GetTick>
 8004f86:	0003      	movs	r3, r0
 8004f88:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f8a:	2380      	movs	r3, #128	@ 0x80
 8004f8c:	0219      	lsls	r1, r3, #8
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	9300      	str	r3, [sp, #0]
 8004f94:	2319      	movs	r3, #25
 8004f96:	2201      	movs	r2, #1
 8004f98:	f000 fa04 	bl	80053a4 <I2C_WaitOnFlagUntilTimeout>
 8004f9c:	1e03      	subs	r3, r0, #0
 8004f9e:	d001      	beq.n	8004fa4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e0cc      	b.n	800513e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2241      	movs	r2, #65	@ 0x41
 8004fa8:	2121      	movs	r1, #33	@ 0x21
 8004faa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2242      	movs	r2, #66	@ 0x42
 8004fb0:	2110      	movs	r1, #16
 8004fb2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2208      	movs	r2, #8
 8004fc4:	18ba      	adds	r2, r7, r2
 8004fc6:	8812      	ldrh	r2, [r2, #0]
 8004fc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	2bff      	cmp	r3, #255	@ 0xff
 8004fd8:	d911      	bls.n	8004ffe <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	22ff      	movs	r2, #255	@ 0xff
 8004fde:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fe4:	b2da      	uxtb	r2, r3
 8004fe6:	2380      	movs	r3, #128	@ 0x80
 8004fe8:	045c      	lsls	r4, r3, #17
 8004fea:	230a      	movs	r3, #10
 8004fec:	18fb      	adds	r3, r7, r3
 8004fee:	8819      	ldrh	r1, [r3, #0]
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	4b55      	ldr	r3, [pc, #340]	@ (8005148 <HAL_I2C_Master_Transmit+0x208>)
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	0023      	movs	r3, r4
 8004ff8:	f000 fc26 	bl	8005848 <I2C_TransferConfig>
 8004ffc:	e075      	b.n	80050ea <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005002:	b29a      	uxth	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800500c:	b2da      	uxtb	r2, r3
 800500e:	2380      	movs	r3, #128	@ 0x80
 8005010:	049c      	lsls	r4, r3, #18
 8005012:	230a      	movs	r3, #10
 8005014:	18fb      	adds	r3, r7, r3
 8005016:	8819      	ldrh	r1, [r3, #0]
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	4b4b      	ldr	r3, [pc, #300]	@ (8005148 <HAL_I2C_Master_Transmit+0x208>)
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	0023      	movs	r3, r4
 8005020:	f000 fc12 	bl	8005848 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005024:	e061      	b.n	80050ea <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	0018      	movs	r0, r3
 800502e:	f000 fa07 	bl	8005440 <I2C_WaitOnTXISFlagUntilTimeout>
 8005032:	1e03      	subs	r3, r0, #0
 8005034:	d001      	beq.n	800503a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e081      	b.n	800513e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800503e:	781a      	ldrb	r2, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504a:	1c5a      	adds	r2, r3, #1
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005054:	b29b      	uxth	r3, r3
 8005056:	3b01      	subs	r3, #1
 8005058:	b29a      	uxth	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005062:	3b01      	subs	r3, #1
 8005064:	b29a      	uxth	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800506e:	b29b      	uxth	r3, r3
 8005070:	2b00      	cmp	r3, #0
 8005072:	d03a      	beq.n	80050ea <HAL_I2C_Master_Transmit+0x1aa>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005078:	2b00      	cmp	r3, #0
 800507a:	d136      	bne.n	80050ea <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800507c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	0013      	movs	r3, r2
 8005086:	2200      	movs	r2, #0
 8005088:	2180      	movs	r1, #128	@ 0x80
 800508a:	f000 f98b 	bl	80053a4 <I2C_WaitOnFlagUntilTimeout>
 800508e:	1e03      	subs	r3, r0, #0
 8005090:	d001      	beq.n	8005096 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e053      	b.n	800513e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800509a:	b29b      	uxth	r3, r3
 800509c:	2bff      	cmp	r3, #255	@ 0xff
 800509e:	d911      	bls.n	80050c4 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	22ff      	movs	r2, #255	@ 0xff
 80050a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	2380      	movs	r3, #128	@ 0x80
 80050ae:	045c      	lsls	r4, r3, #17
 80050b0:	230a      	movs	r3, #10
 80050b2:	18fb      	adds	r3, r7, r3
 80050b4:	8819      	ldrh	r1, [r3, #0]
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	2300      	movs	r3, #0
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	0023      	movs	r3, r4
 80050be:	f000 fbc3 	bl	8005848 <I2C_TransferConfig>
 80050c2:	e012      	b.n	80050ea <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	2380      	movs	r3, #128	@ 0x80
 80050d6:	049c      	lsls	r4, r3, #18
 80050d8:	230a      	movs	r3, #10
 80050da:	18fb      	adds	r3, r7, r3
 80050dc:	8819      	ldrh	r1, [r3, #0]
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	2300      	movs	r3, #0
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	0023      	movs	r3, r4
 80050e6:	f000 fbaf 	bl	8005848 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d198      	bne.n	8005026 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	0018      	movs	r0, r3
 80050fc:	f000 f9e6 	bl	80054cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005100:	1e03      	subs	r3, r0, #0
 8005102:	d001      	beq.n	8005108 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e01a      	b.n	800513e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2220      	movs	r2, #32
 800510e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685a      	ldr	r2, [r3, #4]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	490c      	ldr	r1, [pc, #48]	@ (800514c <HAL_I2C_Master_Transmit+0x20c>)
 800511c:	400a      	ands	r2, r1
 800511e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2241      	movs	r2, #65	@ 0x41
 8005124:	2120      	movs	r1, #32
 8005126:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2242      	movs	r2, #66	@ 0x42
 800512c:	2100      	movs	r1, #0
 800512e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2240      	movs	r2, #64	@ 0x40
 8005134:	2100      	movs	r1, #0
 8005136:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005138:	2300      	movs	r3, #0
 800513a:	e000      	b.n	800513e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800513c:	2302      	movs	r3, #2
  }
}
 800513e:	0018      	movs	r0, r3
 8005140:	46bd      	mov	sp, r7
 8005142:	b007      	add	sp, #28
 8005144:	bd90      	pop	{r4, r7, pc}
 8005146:	46c0      	nop			@ (mov r8, r8)
 8005148:	80002000 	.word	0x80002000
 800514c:	fe00e800 	.word	0xfe00e800

08005150 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005150:	b590      	push	{r4, r7, lr}
 8005152:	b089      	sub	sp, #36	@ 0x24
 8005154:	af02      	add	r7, sp, #8
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	0008      	movs	r0, r1
 800515a:	607a      	str	r2, [r7, #4]
 800515c:	0019      	movs	r1, r3
 800515e:	230a      	movs	r3, #10
 8005160:	18fb      	adds	r3, r7, r3
 8005162:	1c02      	adds	r2, r0, #0
 8005164:	801a      	strh	r2, [r3, #0]
 8005166:	2308      	movs	r3, #8
 8005168:	18fb      	adds	r3, r7, r3
 800516a:	1c0a      	adds	r2, r1, #0
 800516c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2241      	movs	r2, #65	@ 0x41
 8005172:	5c9b      	ldrb	r3, [r3, r2]
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b20      	cmp	r3, #32
 8005178:	d000      	beq.n	800517c <HAL_I2C_Master_Receive+0x2c>
 800517a:	e0e8      	b.n	800534e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2240      	movs	r2, #64	@ 0x40
 8005180:	5c9b      	ldrb	r3, [r3, r2]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d101      	bne.n	800518a <HAL_I2C_Master_Receive+0x3a>
 8005186:	2302      	movs	r3, #2
 8005188:	e0e2      	b.n	8005350 <HAL_I2C_Master_Receive+0x200>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2240      	movs	r2, #64	@ 0x40
 800518e:	2101      	movs	r1, #1
 8005190:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005192:	f7ff fb95 	bl	80048c0 <HAL_GetTick>
 8005196:	0003      	movs	r3, r0
 8005198:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800519a:	2380      	movs	r3, #128	@ 0x80
 800519c:	0219      	lsls	r1, r3, #8
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	2319      	movs	r3, #25
 80051a6:	2201      	movs	r2, #1
 80051a8:	f000 f8fc 	bl	80053a4 <I2C_WaitOnFlagUntilTimeout>
 80051ac:	1e03      	subs	r3, r0, #0
 80051ae:	d001      	beq.n	80051b4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e0cd      	b.n	8005350 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2241      	movs	r2, #65	@ 0x41
 80051b8:	2122      	movs	r1, #34	@ 0x22
 80051ba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2242      	movs	r2, #66	@ 0x42
 80051c0:	2110      	movs	r1, #16
 80051c2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2208      	movs	r2, #8
 80051d4:	18ba      	adds	r2, r7, r2
 80051d6:	8812      	ldrh	r2, [r2, #0]
 80051d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	2bff      	cmp	r3, #255	@ 0xff
 80051e8:	d911      	bls.n	800520e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	22ff      	movs	r2, #255	@ 0xff
 80051ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	2380      	movs	r3, #128	@ 0x80
 80051f8:	045c      	lsls	r4, r3, #17
 80051fa:	230a      	movs	r3, #10
 80051fc:	18fb      	adds	r3, r7, r3
 80051fe:	8819      	ldrh	r1, [r3, #0]
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	4b55      	ldr	r3, [pc, #340]	@ (8005358 <HAL_I2C_Master_Receive+0x208>)
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	0023      	movs	r3, r4
 8005208:	f000 fb1e 	bl	8005848 <I2C_TransferConfig>
 800520c:	e076      	b.n	80052fc <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005212:	b29a      	uxth	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800521c:	b2da      	uxtb	r2, r3
 800521e:	2380      	movs	r3, #128	@ 0x80
 8005220:	049c      	lsls	r4, r3, #18
 8005222:	230a      	movs	r3, #10
 8005224:	18fb      	adds	r3, r7, r3
 8005226:	8819      	ldrh	r1, [r3, #0]
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	4b4b      	ldr	r3, [pc, #300]	@ (8005358 <HAL_I2C_Master_Receive+0x208>)
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	0023      	movs	r3, r4
 8005230:	f000 fb0a 	bl	8005848 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005234:	e062      	b.n	80052fc <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	0018      	movs	r0, r3
 800523e:	f000 f989 	bl	8005554 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005242:	1e03      	subs	r3, r0, #0
 8005244:	d001      	beq.n	800524a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e082      	b.n	8005350 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005254:	b2d2      	uxtb	r2, r2
 8005256:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525c:	1c5a      	adds	r2, r3, #1
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005266:	3b01      	subs	r3, #1
 8005268:	b29a      	uxth	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005272:	b29b      	uxth	r3, r3
 8005274:	3b01      	subs	r3, #1
 8005276:	b29a      	uxth	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005280:	b29b      	uxth	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d03a      	beq.n	80052fc <HAL_I2C_Master_Receive+0x1ac>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800528a:	2b00      	cmp	r3, #0
 800528c:	d136      	bne.n	80052fc <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800528e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	0013      	movs	r3, r2
 8005298:	2200      	movs	r2, #0
 800529a:	2180      	movs	r1, #128	@ 0x80
 800529c:	f000 f882 	bl	80053a4 <I2C_WaitOnFlagUntilTimeout>
 80052a0:	1e03      	subs	r3, r0, #0
 80052a2:	d001      	beq.n	80052a8 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e053      	b.n	8005350 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	2bff      	cmp	r3, #255	@ 0xff
 80052b0:	d911      	bls.n	80052d6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	22ff      	movs	r2, #255	@ 0xff
 80052b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052bc:	b2da      	uxtb	r2, r3
 80052be:	2380      	movs	r3, #128	@ 0x80
 80052c0:	045c      	lsls	r4, r3, #17
 80052c2:	230a      	movs	r3, #10
 80052c4:	18fb      	adds	r3, r7, r3
 80052c6:	8819      	ldrh	r1, [r3, #0]
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	2300      	movs	r3, #0
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	0023      	movs	r3, r4
 80052d0:	f000 faba 	bl	8005848 <I2C_TransferConfig>
 80052d4:	e012      	b.n	80052fc <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052da:	b29a      	uxth	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052e4:	b2da      	uxtb	r2, r3
 80052e6:	2380      	movs	r3, #128	@ 0x80
 80052e8:	049c      	lsls	r4, r3, #18
 80052ea:	230a      	movs	r3, #10
 80052ec:	18fb      	adds	r3, r7, r3
 80052ee:	8819      	ldrh	r1, [r3, #0]
 80052f0:	68f8      	ldr	r0, [r7, #12]
 80052f2:	2300      	movs	r3, #0
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	0023      	movs	r3, r4
 80052f8:	f000 faa6 	bl	8005848 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005300:	b29b      	uxth	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d197      	bne.n	8005236 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	0018      	movs	r0, r3
 800530e:	f000 f8dd 	bl	80054cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005312:	1e03      	subs	r3, r0, #0
 8005314:	d001      	beq.n	800531a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e01a      	b.n	8005350 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2220      	movs	r2, #32
 8005320:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	490b      	ldr	r1, [pc, #44]	@ (800535c <HAL_I2C_Master_Receive+0x20c>)
 800532e:	400a      	ands	r2, r1
 8005330:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2241      	movs	r2, #65	@ 0x41
 8005336:	2120      	movs	r1, #32
 8005338:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2242      	movs	r2, #66	@ 0x42
 800533e:	2100      	movs	r1, #0
 8005340:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2240      	movs	r2, #64	@ 0x40
 8005346:	2100      	movs	r1, #0
 8005348:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800534a:	2300      	movs	r3, #0
 800534c:	e000      	b.n	8005350 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800534e:	2302      	movs	r3, #2
  }
}
 8005350:	0018      	movs	r0, r3
 8005352:	46bd      	mov	sp, r7
 8005354:	b007      	add	sp, #28
 8005356:	bd90      	pop	{r4, r7, pc}
 8005358:	80002400 	.word	0x80002400
 800535c:	fe00e800 	.word	0xfe00e800

08005360 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	2202      	movs	r2, #2
 8005370:	4013      	ands	r3, r2
 8005372:	2b02      	cmp	r3, #2
 8005374:	d103      	bne.n	800537e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2200      	movs	r2, #0
 800537c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	2201      	movs	r2, #1
 8005386:	4013      	ands	r3, r2
 8005388:	2b01      	cmp	r3, #1
 800538a:	d007      	beq.n	800539c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699a      	ldr	r2, [r3, #24]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2101      	movs	r1, #1
 8005398:	430a      	orrs	r2, r1
 800539a:	619a      	str	r2, [r3, #24]
  }
}
 800539c:	46c0      	nop			@ (mov r8, r8)
 800539e:	46bd      	mov	sp, r7
 80053a0:	b002      	add	sp, #8
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	603b      	str	r3, [r7, #0]
 80053b0:	1dfb      	adds	r3, r7, #7
 80053b2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053b4:	e030      	b.n	8005418 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	3301      	adds	r3, #1
 80053ba:	d02d      	beq.n	8005418 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053bc:	f7ff fa80 	bl	80048c0 <HAL_GetTick>
 80053c0:	0002      	movs	r2, r0
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d302      	bcc.n	80053d2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d122      	bne.n	8005418 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	4013      	ands	r3, r2
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	425a      	negs	r2, r3
 80053e2:	4153      	adcs	r3, r2
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	001a      	movs	r2, r3
 80053e8:	1dfb      	adds	r3, r7, #7
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d113      	bne.n	8005418 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f4:	2220      	movs	r2, #32
 80053f6:	431a      	orrs	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2241      	movs	r2, #65	@ 0x41
 8005400:	2120      	movs	r1, #32
 8005402:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2242      	movs	r2, #66	@ 0x42
 8005408:	2100      	movs	r1, #0
 800540a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2240      	movs	r2, #64	@ 0x40
 8005410:	2100      	movs	r1, #0
 8005412:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e00f      	b.n	8005438 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	4013      	ands	r3, r2
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	425a      	negs	r2, r3
 8005428:	4153      	adcs	r3, r2
 800542a:	b2db      	uxtb	r3, r3
 800542c:	001a      	movs	r2, r3
 800542e:	1dfb      	adds	r3, r7, #7
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	429a      	cmp	r2, r3
 8005434:	d0bf      	beq.n	80053b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	0018      	movs	r0, r3
 800543a:	46bd      	mov	sp, r7
 800543c:	b004      	add	sp, #16
 800543e:	bd80      	pop	{r7, pc}

08005440 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800544c:	e032      	b.n	80054b4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	68b9      	ldr	r1, [r7, #8]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	0018      	movs	r0, r3
 8005456:	f000 f8ff 	bl	8005658 <I2C_IsErrorOccurred>
 800545a:	1e03      	subs	r3, r0, #0
 800545c:	d001      	beq.n	8005462 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e030      	b.n	80054c4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	3301      	adds	r3, #1
 8005466:	d025      	beq.n	80054b4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005468:	f7ff fa2a 	bl	80048c0 <HAL_GetTick>
 800546c:	0002      	movs	r2, r0
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	429a      	cmp	r2, r3
 8005476:	d302      	bcc.n	800547e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d11a      	bne.n	80054b4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	2202      	movs	r2, #2
 8005486:	4013      	ands	r3, r2
 8005488:	2b02      	cmp	r3, #2
 800548a:	d013      	beq.n	80054b4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005490:	2220      	movs	r2, #32
 8005492:	431a      	orrs	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2241      	movs	r2, #65	@ 0x41
 800549c:	2120      	movs	r1, #32
 800549e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2242      	movs	r2, #66	@ 0x42
 80054a4:	2100      	movs	r1, #0
 80054a6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2240      	movs	r2, #64	@ 0x40
 80054ac:	2100      	movs	r1, #0
 80054ae:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e007      	b.n	80054c4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	2202      	movs	r2, #2
 80054bc:	4013      	ands	r3, r2
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d1c5      	bne.n	800544e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	0018      	movs	r0, r3
 80054c6:	46bd      	mov	sp, r7
 80054c8:	b004      	add	sp, #16
 80054ca:	bd80      	pop	{r7, pc}

080054cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054d8:	e02f      	b.n	800553a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	68b9      	ldr	r1, [r7, #8]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	0018      	movs	r0, r3
 80054e2:	f000 f8b9 	bl	8005658 <I2C_IsErrorOccurred>
 80054e6:	1e03      	subs	r3, r0, #0
 80054e8:	d001      	beq.n	80054ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e02d      	b.n	800554a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ee:	f7ff f9e7 	bl	80048c0 <HAL_GetTick>
 80054f2:	0002      	movs	r2, r0
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d302      	bcc.n	8005504 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d11a      	bne.n	800553a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	2220      	movs	r2, #32
 800550c:	4013      	ands	r3, r2
 800550e:	2b20      	cmp	r3, #32
 8005510:	d013      	beq.n	800553a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005516:	2220      	movs	r2, #32
 8005518:	431a      	orrs	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2241      	movs	r2, #65	@ 0x41
 8005522:	2120      	movs	r1, #32
 8005524:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2242      	movs	r2, #66	@ 0x42
 800552a:	2100      	movs	r1, #0
 800552c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2240      	movs	r2, #64	@ 0x40
 8005532:	2100      	movs	r1, #0
 8005534:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e007      	b.n	800554a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	2220      	movs	r2, #32
 8005542:	4013      	ands	r3, r2
 8005544:	2b20      	cmp	r3, #32
 8005546:	d1c8      	bne.n	80054da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	0018      	movs	r0, r3
 800554c:	46bd      	mov	sp, r7
 800554e:	b004      	add	sp, #16
 8005550:	bd80      	pop	{r7, pc}
	...

08005554 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005560:	e06b      	b.n	800563a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	68b9      	ldr	r1, [r7, #8]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	0018      	movs	r0, r3
 800556a:	f000 f875 	bl	8005658 <I2C_IsErrorOccurred>
 800556e:	1e03      	subs	r3, r0, #0
 8005570:	d001      	beq.n	8005576 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e069      	b.n	800564a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	2220      	movs	r2, #32
 800557e:	4013      	ands	r3, r2
 8005580:	2b20      	cmp	r3, #32
 8005582:	d138      	bne.n	80055f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	2204      	movs	r2, #4
 800558c:	4013      	ands	r3, r2
 800558e:	2b04      	cmp	r3, #4
 8005590:	d105      	bne.n	800559e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800559a:	2300      	movs	r3, #0
 800559c:	e055      	b.n	800564a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	2210      	movs	r2, #16
 80055a6:	4013      	ands	r3, r2
 80055a8:	2b10      	cmp	r3, #16
 80055aa:	d107      	bne.n	80055bc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2210      	movs	r2, #16
 80055b2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2204      	movs	r2, #4
 80055b8:	645a      	str	r2, [r3, #68]	@ 0x44
 80055ba:	e002      	b.n	80055c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2220      	movs	r2, #32
 80055c8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	491f      	ldr	r1, [pc, #124]	@ (8005654 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80055d6:	400a      	ands	r2, r1
 80055d8:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2241      	movs	r2, #65	@ 0x41
 80055de:	2120      	movs	r1, #32
 80055e0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2242      	movs	r2, #66	@ 0x42
 80055e6:	2100      	movs	r1, #0
 80055e8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2240      	movs	r2, #64	@ 0x40
 80055ee:	2100      	movs	r1, #0
 80055f0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e029      	b.n	800564a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055f6:	f7ff f963 	bl	80048c0 <HAL_GetTick>
 80055fa:	0002      	movs	r2, r0
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	429a      	cmp	r2, r3
 8005604:	d302      	bcc.n	800560c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d116      	bne.n	800563a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	2204      	movs	r2, #4
 8005614:	4013      	ands	r3, r2
 8005616:	2b04      	cmp	r3, #4
 8005618:	d00f      	beq.n	800563a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800561e:	2220      	movs	r2, #32
 8005620:	431a      	orrs	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2241      	movs	r2, #65	@ 0x41
 800562a:	2120      	movs	r1, #32
 800562c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2240      	movs	r2, #64	@ 0x40
 8005632:	2100      	movs	r1, #0
 8005634:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e007      	b.n	800564a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	2204      	movs	r2, #4
 8005642:	4013      	ands	r3, r2
 8005644:	2b04      	cmp	r3, #4
 8005646:	d18c      	bne.n	8005562 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	0018      	movs	r0, r3
 800564c:	46bd      	mov	sp, r7
 800564e:	b004      	add	sp, #16
 8005650:	bd80      	pop	{r7, pc}
 8005652:	46c0      	nop			@ (mov r8, r8)
 8005654:	fe00e800 	.word	0xfe00e800

08005658 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b08a      	sub	sp, #40	@ 0x28
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005664:	2327      	movs	r3, #39	@ 0x27
 8005666:	18fb      	adds	r3, r7, r3
 8005668:	2200      	movs	r2, #0
 800566a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005674:	2300      	movs	r3, #0
 8005676:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	2210      	movs	r2, #16
 8005680:	4013      	ands	r3, r2
 8005682:	d100      	bne.n	8005686 <I2C_IsErrorOccurred+0x2e>
 8005684:	e079      	b.n	800577a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2210      	movs	r2, #16
 800568c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800568e:	e057      	b.n	8005740 <I2C_IsErrorOccurred+0xe8>
 8005690:	2227      	movs	r2, #39	@ 0x27
 8005692:	18bb      	adds	r3, r7, r2
 8005694:	18ba      	adds	r2, r7, r2
 8005696:	7812      	ldrb	r2, [r2, #0]
 8005698:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	3301      	adds	r3, #1
 800569e:	d04f      	beq.n	8005740 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80056a0:	f7ff f90e 	bl	80048c0 <HAL_GetTick>
 80056a4:	0002      	movs	r2, r0
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d302      	bcc.n	80056b6 <I2C_IsErrorOccurred+0x5e>
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d144      	bne.n	8005740 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	2380      	movs	r3, #128	@ 0x80
 80056be:	01db      	lsls	r3, r3, #7
 80056c0:	4013      	ands	r3, r2
 80056c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80056c4:	2013      	movs	r0, #19
 80056c6:	183b      	adds	r3, r7, r0
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	2142      	movs	r1, #66	@ 0x42
 80056cc:	5c52      	ldrb	r2, [r2, r1]
 80056ce:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699a      	ldr	r2, [r3, #24]
 80056d6:	2380      	movs	r3, #128	@ 0x80
 80056d8:	021b      	lsls	r3, r3, #8
 80056da:	401a      	ands	r2, r3
 80056dc:	2380      	movs	r3, #128	@ 0x80
 80056de:	021b      	lsls	r3, r3, #8
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d126      	bne.n	8005732 <I2C_IsErrorOccurred+0xda>
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	2380      	movs	r3, #128	@ 0x80
 80056e8:	01db      	lsls	r3, r3, #7
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d021      	beq.n	8005732 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80056ee:	183b      	adds	r3, r7, r0
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	2b20      	cmp	r3, #32
 80056f4:	d01d      	beq.n	8005732 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2180      	movs	r1, #128	@ 0x80
 8005702:	01c9      	lsls	r1, r1, #7
 8005704:	430a      	orrs	r2, r1
 8005706:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005708:	f7ff f8da 	bl	80048c0 <HAL_GetTick>
 800570c:	0003      	movs	r3, r0
 800570e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005710:	e00f      	b.n	8005732 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005712:	f7ff f8d5 	bl	80048c0 <HAL_GetTick>
 8005716:	0002      	movs	r2, r0
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	2b19      	cmp	r3, #25
 800571e:	d908      	bls.n	8005732 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	2220      	movs	r2, #32
 8005724:	4313      	orrs	r3, r2
 8005726:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005728:	2327      	movs	r3, #39	@ 0x27
 800572a:	18fb      	adds	r3, r7, r3
 800572c:	2201      	movs	r2, #1
 800572e:	701a      	strb	r2, [r3, #0]

              break;
 8005730:	e006      	b.n	8005740 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	699b      	ldr	r3, [r3, #24]
 8005738:	2220      	movs	r2, #32
 800573a:	4013      	ands	r3, r2
 800573c:	2b20      	cmp	r3, #32
 800573e:	d1e8      	bne.n	8005712 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	2220      	movs	r2, #32
 8005748:	4013      	ands	r3, r2
 800574a:	2b20      	cmp	r3, #32
 800574c:	d004      	beq.n	8005758 <I2C_IsErrorOccurred+0x100>
 800574e:	2327      	movs	r3, #39	@ 0x27
 8005750:	18fb      	adds	r3, r7, r3
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d09b      	beq.n	8005690 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005758:	2327      	movs	r3, #39	@ 0x27
 800575a:	18fb      	adds	r3, r7, r3
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d103      	bne.n	800576a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2220      	movs	r2, #32
 8005768:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	2204      	movs	r2, #4
 800576e:	4313      	orrs	r3, r2
 8005770:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005772:	2327      	movs	r3, #39	@ 0x27
 8005774:	18fb      	adds	r3, r7, r3
 8005776:	2201      	movs	r2, #1
 8005778:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005782:	69ba      	ldr	r2, [r7, #24]
 8005784:	2380      	movs	r3, #128	@ 0x80
 8005786:	005b      	lsls	r3, r3, #1
 8005788:	4013      	ands	r3, r2
 800578a:	d00c      	beq.n	80057a6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800578c:	6a3b      	ldr	r3, [r7, #32]
 800578e:	2201      	movs	r2, #1
 8005790:	4313      	orrs	r3, r2
 8005792:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2280      	movs	r2, #128	@ 0x80
 800579a:	0052      	lsls	r2, r2, #1
 800579c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800579e:	2327      	movs	r3, #39	@ 0x27
 80057a0:	18fb      	adds	r3, r7, r3
 80057a2:	2201      	movs	r2, #1
 80057a4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	2380      	movs	r3, #128	@ 0x80
 80057aa:	00db      	lsls	r3, r3, #3
 80057ac:	4013      	ands	r3, r2
 80057ae:	d00c      	beq.n	80057ca <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80057b0:	6a3b      	ldr	r3, [r7, #32]
 80057b2:	2208      	movs	r2, #8
 80057b4:	4313      	orrs	r3, r2
 80057b6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2280      	movs	r2, #128	@ 0x80
 80057be:	00d2      	lsls	r2, r2, #3
 80057c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80057c2:	2327      	movs	r3, #39	@ 0x27
 80057c4:	18fb      	adds	r3, r7, r3
 80057c6:	2201      	movs	r2, #1
 80057c8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	2380      	movs	r3, #128	@ 0x80
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4013      	ands	r3, r2
 80057d2:	d00c      	beq.n	80057ee <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	2202      	movs	r2, #2
 80057d8:	4313      	orrs	r3, r2
 80057da:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2280      	movs	r2, #128	@ 0x80
 80057e2:	0092      	lsls	r2, r2, #2
 80057e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80057e6:	2327      	movs	r3, #39	@ 0x27
 80057e8:	18fb      	adds	r3, r7, r3
 80057ea:	2201      	movs	r2, #1
 80057ec:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80057ee:	2327      	movs	r3, #39	@ 0x27
 80057f0:	18fb      	adds	r3, r7, r3
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d01d      	beq.n	8005834 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	0018      	movs	r0, r3
 80057fc:	f7ff fdb0 	bl	8005360 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	685a      	ldr	r2, [r3, #4]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	490e      	ldr	r1, [pc, #56]	@ (8005844 <I2C_IsErrorOccurred+0x1ec>)
 800580c:	400a      	ands	r2, r1
 800580e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005814:	6a3b      	ldr	r3, [r7, #32]
 8005816:	431a      	orrs	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2241      	movs	r2, #65	@ 0x41
 8005820:	2120      	movs	r1, #32
 8005822:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2242      	movs	r2, #66	@ 0x42
 8005828:	2100      	movs	r1, #0
 800582a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2240      	movs	r2, #64	@ 0x40
 8005830:	2100      	movs	r1, #0
 8005832:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005834:	2327      	movs	r3, #39	@ 0x27
 8005836:	18fb      	adds	r3, r7, r3
 8005838:	781b      	ldrb	r3, [r3, #0]
}
 800583a:	0018      	movs	r0, r3
 800583c:	46bd      	mov	sp, r7
 800583e:	b00a      	add	sp, #40	@ 0x28
 8005840:	bd80      	pop	{r7, pc}
 8005842:	46c0      	nop			@ (mov r8, r8)
 8005844:	fe00e800 	.word	0xfe00e800

08005848 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005848:	b590      	push	{r4, r7, lr}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	0008      	movs	r0, r1
 8005852:	0011      	movs	r1, r2
 8005854:	607b      	str	r3, [r7, #4]
 8005856:	240a      	movs	r4, #10
 8005858:	193b      	adds	r3, r7, r4
 800585a:	1c02      	adds	r2, r0, #0
 800585c:	801a      	strh	r2, [r3, #0]
 800585e:	2009      	movs	r0, #9
 8005860:	183b      	adds	r3, r7, r0
 8005862:	1c0a      	adds	r2, r1, #0
 8005864:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005866:	193b      	adds	r3, r7, r4
 8005868:	881b      	ldrh	r3, [r3, #0]
 800586a:	059b      	lsls	r3, r3, #22
 800586c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800586e:	183b      	adds	r3, r7, r0
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	0419      	lsls	r1, r3, #16
 8005874:	23ff      	movs	r3, #255	@ 0xff
 8005876:	041b      	lsls	r3, r3, #16
 8005878:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800587a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005882:	4313      	orrs	r3, r2
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	085b      	lsrs	r3, r3, #1
 8005888:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005892:	0d51      	lsrs	r1, r2, #21
 8005894:	2280      	movs	r2, #128	@ 0x80
 8005896:	00d2      	lsls	r2, r2, #3
 8005898:	400a      	ands	r2, r1
 800589a:	4907      	ldr	r1, [pc, #28]	@ (80058b8 <I2C_TransferConfig+0x70>)
 800589c:	430a      	orrs	r2, r1
 800589e:	43d2      	mvns	r2, r2
 80058a0:	401a      	ands	r2, r3
 80058a2:	0011      	movs	r1, r2
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80058ae:	46c0      	nop			@ (mov r8, r8)
 80058b0:	46bd      	mov	sp, r7
 80058b2:	b007      	add	sp, #28
 80058b4:	bd90      	pop	{r4, r7, pc}
 80058b6:	46c0      	nop			@ (mov r8, r8)
 80058b8:	03ff63ff 	.word	0x03ff63ff

080058bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2241      	movs	r2, #65	@ 0x41
 80058ca:	5c9b      	ldrb	r3, [r3, r2]
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b20      	cmp	r3, #32
 80058d0:	d138      	bne.n	8005944 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2240      	movs	r2, #64	@ 0x40
 80058d6:	5c9b      	ldrb	r3, [r3, r2]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d101      	bne.n	80058e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80058dc:	2302      	movs	r3, #2
 80058de:	e032      	b.n	8005946 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2240      	movs	r2, #64	@ 0x40
 80058e4:	2101      	movs	r1, #1
 80058e6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2241      	movs	r2, #65	@ 0x41
 80058ec:	2124      	movs	r1, #36	@ 0x24
 80058ee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2101      	movs	r1, #1
 80058fc:	438a      	bics	r2, r1
 80058fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4911      	ldr	r1, [pc, #68]	@ (8005950 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800590c:	400a      	ands	r2, r1
 800590e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6819      	ldr	r1, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	683a      	ldr	r2, [r7, #0]
 800591c:	430a      	orrs	r2, r1
 800591e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2101      	movs	r1, #1
 800592c:	430a      	orrs	r2, r1
 800592e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2241      	movs	r2, #65	@ 0x41
 8005934:	2120      	movs	r1, #32
 8005936:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2240      	movs	r2, #64	@ 0x40
 800593c:	2100      	movs	r1, #0
 800593e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005940:	2300      	movs	r3, #0
 8005942:	e000      	b.n	8005946 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005944:	2302      	movs	r3, #2
  }
}
 8005946:	0018      	movs	r0, r3
 8005948:	46bd      	mov	sp, r7
 800594a:	b002      	add	sp, #8
 800594c:	bd80      	pop	{r7, pc}
 800594e:	46c0      	nop			@ (mov r8, r8)
 8005950:	ffffefff 	.word	0xffffefff

08005954 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2241      	movs	r2, #65	@ 0x41
 8005962:	5c9b      	ldrb	r3, [r3, r2]
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b20      	cmp	r3, #32
 8005968:	d139      	bne.n	80059de <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2240      	movs	r2, #64	@ 0x40
 800596e:	5c9b      	ldrb	r3, [r3, r2]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d101      	bne.n	8005978 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005974:	2302      	movs	r3, #2
 8005976:	e033      	b.n	80059e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2240      	movs	r2, #64	@ 0x40
 800597c:	2101      	movs	r1, #1
 800597e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2241      	movs	r2, #65	@ 0x41
 8005984:	2124      	movs	r1, #36	@ 0x24
 8005986:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2101      	movs	r1, #1
 8005994:	438a      	bics	r2, r1
 8005996:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4a11      	ldr	r2, [pc, #68]	@ (80059e8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80059a4:	4013      	ands	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	021b      	lsls	r3, r3, #8
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2101      	movs	r1, #1
 80059c6:	430a      	orrs	r2, r1
 80059c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2241      	movs	r2, #65	@ 0x41
 80059ce:	2120      	movs	r1, #32
 80059d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2240      	movs	r2, #64	@ 0x40
 80059d6:	2100      	movs	r1, #0
 80059d8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80059da:	2300      	movs	r3, #0
 80059dc:	e000      	b.n	80059e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80059de:	2302      	movs	r3, #2
  }
}
 80059e0:	0018      	movs	r0, r3
 80059e2:	46bd      	mov	sp, r7
 80059e4:	b004      	add	sp, #16
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	fffff0ff 	.word	0xfffff0ff

080059ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059ec:	b5b0      	push	{r4, r5, r7, lr}
 80059ee:	b08a      	sub	sp, #40	@ 0x28
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d102      	bne.n	8005a00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	f000 fbbf 	bl	800617e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a00:	4bc9      	ldr	r3, [pc, #804]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	220c      	movs	r2, #12
 8005a06:	4013      	ands	r3, r2
 8005a08:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a0a:	4bc7      	ldr	r3, [pc, #796]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005a0c:	68da      	ldr	r2, [r3, #12]
 8005a0e:	2380      	movs	r3, #128	@ 0x80
 8005a10:	025b      	lsls	r3, r3, #9
 8005a12:	4013      	ands	r3, r2
 8005a14:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	d100      	bne.n	8005a22 <HAL_RCC_OscConfig+0x36>
 8005a20:	e07e      	b.n	8005b20 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	2b08      	cmp	r3, #8
 8005a26:	d007      	beq.n	8005a38 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	2b0c      	cmp	r3, #12
 8005a2c:	d112      	bne.n	8005a54 <HAL_RCC_OscConfig+0x68>
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	2380      	movs	r3, #128	@ 0x80
 8005a32:	025b      	lsls	r3, r3, #9
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d10d      	bne.n	8005a54 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a38:	4bbb      	ldr	r3, [pc, #748]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	2380      	movs	r3, #128	@ 0x80
 8005a3e:	029b      	lsls	r3, r3, #10
 8005a40:	4013      	ands	r3, r2
 8005a42:	d100      	bne.n	8005a46 <HAL_RCC_OscConfig+0x5a>
 8005a44:	e06b      	b.n	8005b1e <HAL_RCC_OscConfig+0x132>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d167      	bne.n	8005b1e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	f000 fb95 	bl	800617e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685a      	ldr	r2, [r3, #4]
 8005a58:	2380      	movs	r3, #128	@ 0x80
 8005a5a:	025b      	lsls	r3, r3, #9
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d107      	bne.n	8005a70 <HAL_RCC_OscConfig+0x84>
 8005a60:	4bb1      	ldr	r3, [pc, #708]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	4bb0      	ldr	r3, [pc, #704]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005a66:	2180      	movs	r1, #128	@ 0x80
 8005a68:	0249      	lsls	r1, r1, #9
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	e027      	b.n	8005ac0 <HAL_RCC_OscConfig+0xd4>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	23a0      	movs	r3, #160	@ 0xa0
 8005a76:	02db      	lsls	r3, r3, #11
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d10e      	bne.n	8005a9a <HAL_RCC_OscConfig+0xae>
 8005a7c:	4baa      	ldr	r3, [pc, #680]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	4ba9      	ldr	r3, [pc, #676]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005a82:	2180      	movs	r1, #128	@ 0x80
 8005a84:	02c9      	lsls	r1, r1, #11
 8005a86:	430a      	orrs	r2, r1
 8005a88:	601a      	str	r2, [r3, #0]
 8005a8a:	4ba7      	ldr	r3, [pc, #668]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	4ba6      	ldr	r3, [pc, #664]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005a90:	2180      	movs	r1, #128	@ 0x80
 8005a92:	0249      	lsls	r1, r1, #9
 8005a94:	430a      	orrs	r2, r1
 8005a96:	601a      	str	r2, [r3, #0]
 8005a98:	e012      	b.n	8005ac0 <HAL_RCC_OscConfig+0xd4>
 8005a9a:	4ba3      	ldr	r3, [pc, #652]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	4ba2      	ldr	r3, [pc, #648]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005aa0:	49a2      	ldr	r1, [pc, #648]	@ (8005d2c <HAL_RCC_OscConfig+0x340>)
 8005aa2:	400a      	ands	r2, r1
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	4ba0      	ldr	r3, [pc, #640]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	2380      	movs	r3, #128	@ 0x80
 8005aac:	025b      	lsls	r3, r3, #9
 8005aae:	4013      	ands	r3, r2
 8005ab0:	60fb      	str	r3, [r7, #12]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	4b9c      	ldr	r3, [pc, #624]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	4b9b      	ldr	r3, [pc, #620]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005aba:	499d      	ldr	r1, [pc, #628]	@ (8005d30 <HAL_RCC_OscConfig+0x344>)
 8005abc:	400a      	ands	r2, r1
 8005abe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d015      	beq.n	8005af4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac8:	f7fe fefa 	bl	80048c0 <HAL_GetTick>
 8005acc:	0003      	movs	r3, r0
 8005ace:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ad0:	e009      	b.n	8005ae6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ad2:	f7fe fef5 	bl	80048c0 <HAL_GetTick>
 8005ad6:	0002      	movs	r2, r0
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	2b64      	cmp	r3, #100	@ 0x64
 8005ade:	d902      	bls.n	8005ae6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	f000 fb4c 	bl	800617e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ae6:	4b90      	ldr	r3, [pc, #576]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	2380      	movs	r3, #128	@ 0x80
 8005aec:	029b      	lsls	r3, r3, #10
 8005aee:	4013      	ands	r3, r2
 8005af0:	d0ef      	beq.n	8005ad2 <HAL_RCC_OscConfig+0xe6>
 8005af2:	e015      	b.n	8005b20 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af4:	f7fe fee4 	bl	80048c0 <HAL_GetTick>
 8005af8:	0003      	movs	r3, r0
 8005afa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005afc:	e008      	b.n	8005b10 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005afe:	f7fe fedf 	bl	80048c0 <HAL_GetTick>
 8005b02:	0002      	movs	r2, r0
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	2b64      	cmp	r3, #100	@ 0x64
 8005b0a:	d901      	bls.n	8005b10 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e336      	b.n	800617e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b10:	4b85      	ldr	r3, [pc, #532]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	2380      	movs	r3, #128	@ 0x80
 8005b16:	029b      	lsls	r3, r3, #10
 8005b18:	4013      	ands	r3, r2
 8005b1a:	d1f0      	bne.n	8005afe <HAL_RCC_OscConfig+0x112>
 8005b1c:	e000      	b.n	8005b20 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b1e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2202      	movs	r2, #2
 8005b26:	4013      	ands	r3, r2
 8005b28:	d100      	bne.n	8005b2c <HAL_RCC_OscConfig+0x140>
 8005b2a:	e099      	b.n	8005c60 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b34:	2220      	movs	r2, #32
 8005b36:	4013      	ands	r3, r2
 8005b38:	d009      	beq.n	8005b4e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005b3a:	4b7b      	ldr	r3, [pc, #492]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	4b7a      	ldr	r3, [pc, #488]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005b40:	2120      	movs	r1, #32
 8005b42:	430a      	orrs	r2, r1
 8005b44:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8005b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b48:	2220      	movs	r2, #32
 8005b4a:	4393      	bics	r3, r2
 8005b4c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	2b04      	cmp	r3, #4
 8005b52:	d005      	beq.n	8005b60 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	2b0c      	cmp	r3, #12
 8005b58:	d13e      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x1ec>
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d13b      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005b60:	4b71      	ldr	r3, [pc, #452]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2204      	movs	r2, #4
 8005b66:	4013      	ands	r3, r2
 8005b68:	d004      	beq.n	8005b74 <HAL_RCC_OscConfig+0x188>
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e304      	b.n	800617e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b74:	4b6c      	ldr	r3, [pc, #432]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	4a6e      	ldr	r2, [pc, #440]	@ (8005d34 <HAL_RCC_OscConfig+0x348>)
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	0019      	movs	r1, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	021a      	lsls	r2, r3, #8
 8005b84:	4b68      	ldr	r3, [pc, #416]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005b86:	430a      	orrs	r2, r1
 8005b88:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005b8a:	4b67      	ldr	r3, [pc, #412]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2209      	movs	r2, #9
 8005b90:	4393      	bics	r3, r2
 8005b92:	0019      	movs	r1, r3
 8005b94:	4b64      	ldr	r3, [pc, #400]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005b96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b9c:	f000 fc42 	bl	8006424 <HAL_RCC_GetSysClockFreq>
 8005ba0:	0001      	movs	r1, r0
 8005ba2:	4b61      	ldr	r3, [pc, #388]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	091b      	lsrs	r3, r3, #4
 8005ba8:	220f      	movs	r2, #15
 8005baa:	4013      	ands	r3, r2
 8005bac:	4a62      	ldr	r2, [pc, #392]	@ (8005d38 <HAL_RCC_OscConfig+0x34c>)
 8005bae:	5cd3      	ldrb	r3, [r2, r3]
 8005bb0:	000a      	movs	r2, r1
 8005bb2:	40da      	lsrs	r2, r3
 8005bb4:	4b61      	ldr	r3, [pc, #388]	@ (8005d3c <HAL_RCC_OscConfig+0x350>)
 8005bb6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005bb8:	4b61      	ldr	r3, [pc, #388]	@ (8005d40 <HAL_RCC_OscConfig+0x354>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2513      	movs	r5, #19
 8005bbe:	197c      	adds	r4, r7, r5
 8005bc0:	0018      	movs	r0, r3
 8005bc2:	f7fe fe37 	bl	8004834 <HAL_InitTick>
 8005bc6:	0003      	movs	r3, r0
 8005bc8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005bca:	197b      	adds	r3, r7, r5
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d046      	beq.n	8005c60 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8005bd2:	197b      	adds	r3, r7, r5
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	e2d2      	b.n	800617e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d027      	beq.n	8005c2e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005bde:	4b52      	ldr	r3, [pc, #328]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2209      	movs	r2, #9
 8005be4:	4393      	bics	r3, r2
 8005be6:	0019      	movs	r1, r3
 8005be8:	4b4f      	ldr	r3, [pc, #316]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005bea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bec:	430a      	orrs	r2, r1
 8005bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bf0:	f7fe fe66 	bl	80048c0 <HAL_GetTick>
 8005bf4:	0003      	movs	r3, r0
 8005bf6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005bf8:	e008      	b.n	8005c0c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bfa:	f7fe fe61 	bl	80048c0 <HAL_GetTick>
 8005bfe:	0002      	movs	r2, r0
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d901      	bls.n	8005c0c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e2b8      	b.n	800617e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c0c:	4b46      	ldr	r3, [pc, #280]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2204      	movs	r2, #4
 8005c12:	4013      	ands	r3, r2
 8005c14:	d0f1      	beq.n	8005bfa <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c16:	4b44      	ldr	r3, [pc, #272]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	4a46      	ldr	r2, [pc, #280]	@ (8005d34 <HAL_RCC_OscConfig+0x348>)
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	0019      	movs	r1, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	021a      	lsls	r2, r3, #8
 8005c26:	4b40      	ldr	r3, [pc, #256]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	605a      	str	r2, [r3, #4]
 8005c2c:	e018      	b.n	8005c60 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c2e:	4b3e      	ldr	r3, [pc, #248]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	4b3d      	ldr	r3, [pc, #244]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005c34:	2101      	movs	r1, #1
 8005c36:	438a      	bics	r2, r1
 8005c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c3a:	f7fe fe41 	bl	80048c0 <HAL_GetTick>
 8005c3e:	0003      	movs	r3, r0
 8005c40:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005c42:	e008      	b.n	8005c56 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c44:	f7fe fe3c 	bl	80048c0 <HAL_GetTick>
 8005c48:	0002      	movs	r2, r0
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d901      	bls.n	8005c56 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e293      	b.n	800617e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005c56:	4b34      	ldr	r3, [pc, #208]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2204      	movs	r2, #4
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	d1f1      	bne.n	8005c44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2210      	movs	r2, #16
 8005c66:	4013      	ands	r3, r2
 8005c68:	d100      	bne.n	8005c6c <HAL_RCC_OscConfig+0x280>
 8005c6a:	e0a2      	b.n	8005db2 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d140      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005c72:	4b2d      	ldr	r3, [pc, #180]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	2380      	movs	r3, #128	@ 0x80
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	d005      	beq.n	8005c8a <HAL_RCC_OscConfig+0x29e>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e279      	b.n	800617e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c8a:	4b27      	ldr	r3, [pc, #156]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	4a2d      	ldr	r2, [pc, #180]	@ (8005d44 <HAL_RCC_OscConfig+0x358>)
 8005c90:	4013      	ands	r3, r2
 8005c92:	0019      	movs	r1, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c98:	4b23      	ldr	r3, [pc, #140]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c9e:	4b22      	ldr	r3, [pc, #136]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	021b      	lsls	r3, r3, #8
 8005ca4:	0a19      	lsrs	r1, r3, #8
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	061a      	lsls	r2, r3, #24
 8005cac:	4b1e      	ldr	r3, [pc, #120]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb6:	0b5b      	lsrs	r3, r3, #13
 8005cb8:	3301      	adds	r3, #1
 8005cba:	2280      	movs	r2, #128	@ 0x80
 8005cbc:	0212      	lsls	r2, r2, #8
 8005cbe:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005cc0:	4b19      	ldr	r3, [pc, #100]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	091b      	lsrs	r3, r3, #4
 8005cc6:	210f      	movs	r1, #15
 8005cc8:	400b      	ands	r3, r1
 8005cca:	491b      	ldr	r1, [pc, #108]	@ (8005d38 <HAL_RCC_OscConfig+0x34c>)
 8005ccc:	5ccb      	ldrb	r3, [r1, r3]
 8005cce:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8005d3c <HAL_RCC_OscConfig+0x350>)
 8005cd2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8005d40 <HAL_RCC_OscConfig+0x354>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2513      	movs	r5, #19
 8005cda:	197c      	adds	r4, r7, r5
 8005cdc:	0018      	movs	r0, r3
 8005cde:	f7fe fda9 	bl	8004834 <HAL_InitTick>
 8005ce2:	0003      	movs	r3, r0
 8005ce4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005ce6:	197b      	adds	r3, r7, r5
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d061      	beq.n	8005db2 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8005cee:	197b      	adds	r3, r7, r5
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	e244      	b.n	800617e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	69db      	ldr	r3, [r3, #28]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d040      	beq.n	8005d7e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	4b09      	ldr	r3, [pc, #36]	@ (8005d28 <HAL_RCC_OscConfig+0x33c>)
 8005d02:	2180      	movs	r1, #128	@ 0x80
 8005d04:	0049      	lsls	r1, r1, #1
 8005d06:	430a      	orrs	r2, r1
 8005d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d0a:	f7fe fdd9 	bl	80048c0 <HAL_GetTick>
 8005d0e:	0003      	movs	r3, r0
 8005d10:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005d12:	e019      	b.n	8005d48 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d14:	f7fe fdd4 	bl	80048c0 <HAL_GetTick>
 8005d18:	0002      	movs	r2, r0
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d912      	bls.n	8005d48 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e22b      	b.n	800617e <HAL_RCC_OscConfig+0x792>
 8005d26:	46c0      	nop			@ (mov r8, r8)
 8005d28:	40021000 	.word	0x40021000
 8005d2c:	fffeffff 	.word	0xfffeffff
 8005d30:	fffbffff 	.word	0xfffbffff
 8005d34:	ffffe0ff 	.word	0xffffe0ff
 8005d38:	0800c34c 	.word	0x0800c34c
 8005d3c:	20000000 	.word	0x20000000
 8005d40:	20000004 	.word	0x20000004
 8005d44:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005d48:	4bca      	ldr	r3, [pc, #808]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	2380      	movs	r3, #128	@ 0x80
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4013      	ands	r3, r2
 8005d52:	d0df      	beq.n	8005d14 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d54:	4bc7      	ldr	r3, [pc, #796]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	4ac7      	ldr	r2, [pc, #796]	@ (8006078 <HAL_RCC_OscConfig+0x68c>)
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	0019      	movs	r1, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d62:	4bc4      	ldr	r3, [pc, #784]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005d64:	430a      	orrs	r2, r1
 8005d66:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d68:	4bc2      	ldr	r3, [pc, #776]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	021b      	lsls	r3, r3, #8
 8005d6e:	0a19      	lsrs	r1, r3, #8
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	061a      	lsls	r2, r3, #24
 8005d76:	4bbf      	ldr	r3, [pc, #764]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	605a      	str	r2, [r3, #4]
 8005d7c:	e019      	b.n	8005db2 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005d7e:	4bbd      	ldr	r3, [pc, #756]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	4bbc      	ldr	r3, [pc, #752]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005d84:	49bd      	ldr	r1, [pc, #756]	@ (800607c <HAL_RCC_OscConfig+0x690>)
 8005d86:	400a      	ands	r2, r1
 8005d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d8a:	f7fe fd99 	bl	80048c0 <HAL_GetTick>
 8005d8e:	0003      	movs	r3, r0
 8005d90:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005d92:	e008      	b.n	8005da6 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d94:	f7fe fd94 	bl	80048c0 <HAL_GetTick>
 8005d98:	0002      	movs	r2, r0
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d901      	bls.n	8005da6 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e1eb      	b.n	800617e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005da6:	4bb3      	ldr	r3, [pc, #716]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	2380      	movs	r3, #128	@ 0x80
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4013      	ands	r3, r2
 8005db0:	d1f0      	bne.n	8005d94 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2208      	movs	r2, #8
 8005db8:	4013      	ands	r3, r2
 8005dba:	d036      	beq.n	8005e2a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d019      	beq.n	8005df8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dc4:	4bab      	ldr	r3, [pc, #684]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005dc6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005dc8:	4baa      	ldr	r3, [pc, #680]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005dca:	2101      	movs	r1, #1
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dd0:	f7fe fd76 	bl	80048c0 <HAL_GetTick>
 8005dd4:	0003      	movs	r3, r0
 8005dd6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005dd8:	e008      	b.n	8005dec <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005dda:	f7fe fd71 	bl	80048c0 <HAL_GetTick>
 8005dde:	0002      	movs	r2, r0
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d901      	bls.n	8005dec <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e1c8      	b.n	800617e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005dec:	4ba1      	ldr	r3, [pc, #644]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005dee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005df0:	2202      	movs	r2, #2
 8005df2:	4013      	ands	r3, r2
 8005df4:	d0f1      	beq.n	8005dda <HAL_RCC_OscConfig+0x3ee>
 8005df6:	e018      	b.n	8005e2a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005df8:	4b9e      	ldr	r3, [pc, #632]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005dfa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005dfc:	4b9d      	ldr	r3, [pc, #628]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005dfe:	2101      	movs	r1, #1
 8005e00:	438a      	bics	r2, r1
 8005e02:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e04:	f7fe fd5c 	bl	80048c0 <HAL_GetTick>
 8005e08:	0003      	movs	r3, r0
 8005e0a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e0c:	e008      	b.n	8005e20 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e0e:	f7fe fd57 	bl	80048c0 <HAL_GetTick>
 8005e12:	0002      	movs	r2, r0
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d901      	bls.n	8005e20 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e1ae      	b.n	800617e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e20:	4b94      	ldr	r3, [pc, #592]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005e22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e24:	2202      	movs	r2, #2
 8005e26:	4013      	ands	r3, r2
 8005e28:	d1f1      	bne.n	8005e0e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2204      	movs	r2, #4
 8005e30:	4013      	ands	r3, r2
 8005e32:	d100      	bne.n	8005e36 <HAL_RCC_OscConfig+0x44a>
 8005e34:	e0ae      	b.n	8005f94 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e36:	2023      	movs	r0, #35	@ 0x23
 8005e38:	183b      	adds	r3, r7, r0
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e3e:	4b8d      	ldr	r3, [pc, #564]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005e40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e42:	2380      	movs	r3, #128	@ 0x80
 8005e44:	055b      	lsls	r3, r3, #21
 8005e46:	4013      	ands	r3, r2
 8005e48:	d109      	bne.n	8005e5e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e4a:	4b8a      	ldr	r3, [pc, #552]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005e4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e4e:	4b89      	ldr	r3, [pc, #548]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005e50:	2180      	movs	r1, #128	@ 0x80
 8005e52:	0549      	lsls	r1, r1, #21
 8005e54:	430a      	orrs	r2, r1
 8005e56:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8005e58:	183b      	adds	r3, r7, r0
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e5e:	4b88      	ldr	r3, [pc, #544]	@ (8006080 <HAL_RCC_OscConfig+0x694>)
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	2380      	movs	r3, #128	@ 0x80
 8005e64:	005b      	lsls	r3, r3, #1
 8005e66:	4013      	ands	r3, r2
 8005e68:	d11a      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e6a:	4b85      	ldr	r3, [pc, #532]	@ (8006080 <HAL_RCC_OscConfig+0x694>)
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	4b84      	ldr	r3, [pc, #528]	@ (8006080 <HAL_RCC_OscConfig+0x694>)
 8005e70:	2180      	movs	r1, #128	@ 0x80
 8005e72:	0049      	lsls	r1, r1, #1
 8005e74:	430a      	orrs	r2, r1
 8005e76:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e78:	f7fe fd22 	bl	80048c0 <HAL_GetTick>
 8005e7c:	0003      	movs	r3, r0
 8005e7e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e80:	e008      	b.n	8005e94 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e82:	f7fe fd1d 	bl	80048c0 <HAL_GetTick>
 8005e86:	0002      	movs	r2, r0
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	2b64      	cmp	r3, #100	@ 0x64
 8005e8e:	d901      	bls.n	8005e94 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e174      	b.n	800617e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e94:	4b7a      	ldr	r3, [pc, #488]	@ (8006080 <HAL_RCC_OscConfig+0x694>)
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	2380      	movs	r3, #128	@ 0x80
 8005e9a:	005b      	lsls	r3, r3, #1
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	d0f0      	beq.n	8005e82 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689a      	ldr	r2, [r3, #8]
 8005ea4:	2380      	movs	r3, #128	@ 0x80
 8005ea6:	005b      	lsls	r3, r3, #1
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d107      	bne.n	8005ebc <HAL_RCC_OscConfig+0x4d0>
 8005eac:	4b71      	ldr	r3, [pc, #452]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005eae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005eb0:	4b70      	ldr	r3, [pc, #448]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005eb2:	2180      	movs	r1, #128	@ 0x80
 8005eb4:	0049      	lsls	r1, r1, #1
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	651a      	str	r2, [r3, #80]	@ 0x50
 8005eba:	e031      	b.n	8005f20 <HAL_RCC_OscConfig+0x534>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10c      	bne.n	8005ede <HAL_RCC_OscConfig+0x4f2>
 8005ec4:	4b6b      	ldr	r3, [pc, #428]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005ec6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ec8:	4b6a      	ldr	r3, [pc, #424]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005eca:	496c      	ldr	r1, [pc, #432]	@ (800607c <HAL_RCC_OscConfig+0x690>)
 8005ecc:	400a      	ands	r2, r1
 8005ece:	651a      	str	r2, [r3, #80]	@ 0x50
 8005ed0:	4b68      	ldr	r3, [pc, #416]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005ed2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ed4:	4b67      	ldr	r3, [pc, #412]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005ed6:	496b      	ldr	r1, [pc, #428]	@ (8006084 <HAL_RCC_OscConfig+0x698>)
 8005ed8:	400a      	ands	r2, r1
 8005eda:	651a      	str	r2, [r3, #80]	@ 0x50
 8005edc:	e020      	b.n	8005f20 <HAL_RCC_OscConfig+0x534>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	689a      	ldr	r2, [r3, #8]
 8005ee2:	23a0      	movs	r3, #160	@ 0xa0
 8005ee4:	00db      	lsls	r3, r3, #3
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d10e      	bne.n	8005f08 <HAL_RCC_OscConfig+0x51c>
 8005eea:	4b62      	ldr	r3, [pc, #392]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005eec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005eee:	4b61      	ldr	r3, [pc, #388]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005ef0:	2180      	movs	r1, #128	@ 0x80
 8005ef2:	00c9      	lsls	r1, r1, #3
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	651a      	str	r2, [r3, #80]	@ 0x50
 8005ef8:	4b5e      	ldr	r3, [pc, #376]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005efa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005efc:	4b5d      	ldr	r3, [pc, #372]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005efe:	2180      	movs	r1, #128	@ 0x80
 8005f00:	0049      	lsls	r1, r1, #1
 8005f02:	430a      	orrs	r2, r1
 8005f04:	651a      	str	r2, [r3, #80]	@ 0x50
 8005f06:	e00b      	b.n	8005f20 <HAL_RCC_OscConfig+0x534>
 8005f08:	4b5a      	ldr	r3, [pc, #360]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005f0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f0c:	4b59      	ldr	r3, [pc, #356]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005f0e:	495b      	ldr	r1, [pc, #364]	@ (800607c <HAL_RCC_OscConfig+0x690>)
 8005f10:	400a      	ands	r2, r1
 8005f12:	651a      	str	r2, [r3, #80]	@ 0x50
 8005f14:	4b57      	ldr	r3, [pc, #348]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005f16:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f18:	4b56      	ldr	r3, [pc, #344]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005f1a:	495a      	ldr	r1, [pc, #360]	@ (8006084 <HAL_RCC_OscConfig+0x698>)
 8005f1c:	400a      	ands	r2, r1
 8005f1e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d015      	beq.n	8005f54 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f28:	f7fe fcca 	bl	80048c0 <HAL_GetTick>
 8005f2c:	0003      	movs	r3, r0
 8005f2e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f30:	e009      	b.n	8005f46 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f32:	f7fe fcc5 	bl	80048c0 <HAL_GetTick>
 8005f36:	0002      	movs	r2, r0
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	4a52      	ldr	r2, [pc, #328]	@ (8006088 <HAL_RCC_OscConfig+0x69c>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d901      	bls.n	8005f46 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e11b      	b.n	800617e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f46:	4b4b      	ldr	r3, [pc, #300]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005f48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f4a:	2380      	movs	r3, #128	@ 0x80
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4013      	ands	r3, r2
 8005f50:	d0ef      	beq.n	8005f32 <HAL_RCC_OscConfig+0x546>
 8005f52:	e014      	b.n	8005f7e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f54:	f7fe fcb4 	bl	80048c0 <HAL_GetTick>
 8005f58:	0003      	movs	r3, r0
 8005f5a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f5c:	e009      	b.n	8005f72 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f5e:	f7fe fcaf 	bl	80048c0 <HAL_GetTick>
 8005f62:	0002      	movs	r2, r0
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	4a47      	ldr	r2, [pc, #284]	@ (8006088 <HAL_RCC_OscConfig+0x69c>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d901      	bls.n	8005f72 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e105      	b.n	800617e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f72:	4b40      	ldr	r3, [pc, #256]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005f74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f76:	2380      	movs	r3, #128	@ 0x80
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	d1ef      	bne.n	8005f5e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005f7e:	2323      	movs	r3, #35	@ 0x23
 8005f80:	18fb      	adds	r3, r7, r3
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d105      	bne.n	8005f94 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f88:	4b3a      	ldr	r3, [pc, #232]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005f8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f8c:	4b39      	ldr	r3, [pc, #228]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005f8e:	493f      	ldr	r1, [pc, #252]	@ (800608c <HAL_RCC_OscConfig+0x6a0>)
 8005f90:	400a      	ands	r2, r1
 8005f92:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	d049      	beq.n	8006032 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d026      	beq.n	8005ff4 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005fa6:	4b33      	ldr	r3, [pc, #204]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005fa8:	689a      	ldr	r2, [r3, #8]
 8005faa:	4b32      	ldr	r3, [pc, #200]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005fac:	2101      	movs	r1, #1
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	609a      	str	r2, [r3, #8]
 8005fb2:	4b30      	ldr	r3, [pc, #192]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005fb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fb6:	4b2f      	ldr	r3, [pc, #188]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005fb8:	2101      	movs	r1, #1
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	635a      	str	r2, [r3, #52]	@ 0x34
 8005fbe:	4b34      	ldr	r3, [pc, #208]	@ (8006090 <HAL_RCC_OscConfig+0x6a4>)
 8005fc0:	6a1a      	ldr	r2, [r3, #32]
 8005fc2:	4b33      	ldr	r3, [pc, #204]	@ (8006090 <HAL_RCC_OscConfig+0x6a4>)
 8005fc4:	2180      	movs	r1, #128	@ 0x80
 8005fc6:	0189      	lsls	r1, r1, #6
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fcc:	f7fe fc78 	bl	80048c0 <HAL_GetTick>
 8005fd0:	0003      	movs	r3, r0
 8005fd2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005fd4:	e008      	b.n	8005fe8 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005fd6:	f7fe fc73 	bl	80048c0 <HAL_GetTick>
 8005fda:	0002      	movs	r2, r0
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d901      	bls.n	8005fe8 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e0ca      	b.n	800617e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005fe8:	4b22      	ldr	r3, [pc, #136]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	2202      	movs	r2, #2
 8005fee:	4013      	ands	r3, r2
 8005ff0:	d0f1      	beq.n	8005fd6 <HAL_RCC_OscConfig+0x5ea>
 8005ff2:	e01e      	b.n	8006032 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005ff4:	4b1f      	ldr	r3, [pc, #124]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005ff6:	689a      	ldr	r2, [r3, #8]
 8005ff8:	4b1e      	ldr	r3, [pc, #120]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8005ffa:	2101      	movs	r1, #1
 8005ffc:	438a      	bics	r2, r1
 8005ffe:	609a      	str	r2, [r3, #8]
 8006000:	4b23      	ldr	r3, [pc, #140]	@ (8006090 <HAL_RCC_OscConfig+0x6a4>)
 8006002:	6a1a      	ldr	r2, [r3, #32]
 8006004:	4b22      	ldr	r3, [pc, #136]	@ (8006090 <HAL_RCC_OscConfig+0x6a4>)
 8006006:	4923      	ldr	r1, [pc, #140]	@ (8006094 <HAL_RCC_OscConfig+0x6a8>)
 8006008:	400a      	ands	r2, r1
 800600a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800600c:	f7fe fc58 	bl	80048c0 <HAL_GetTick>
 8006010:	0003      	movs	r3, r0
 8006012:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006014:	e008      	b.n	8006028 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006016:	f7fe fc53 	bl	80048c0 <HAL_GetTick>
 800601a:	0002      	movs	r2, r0
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	2b02      	cmp	r3, #2
 8006022:	d901      	bls.n	8006028 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e0aa      	b.n	800617e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006028:	4b12      	ldr	r3, [pc, #72]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	2202      	movs	r2, #2
 800602e:	4013      	ands	r3, r2
 8006030:	d1f1      	bne.n	8006016 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006036:	2b00      	cmp	r3, #0
 8006038:	d100      	bne.n	800603c <HAL_RCC_OscConfig+0x650>
 800603a:	e09f      	b.n	800617c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	2b0c      	cmp	r3, #12
 8006040:	d100      	bne.n	8006044 <HAL_RCC_OscConfig+0x658>
 8006042:	e078      	b.n	8006136 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006048:	2b02      	cmp	r3, #2
 800604a:	d159      	bne.n	8006100 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800604c:	4b09      	ldr	r3, [pc, #36]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	4b08      	ldr	r3, [pc, #32]	@ (8006074 <HAL_RCC_OscConfig+0x688>)
 8006052:	4911      	ldr	r1, [pc, #68]	@ (8006098 <HAL_RCC_OscConfig+0x6ac>)
 8006054:	400a      	ands	r2, r1
 8006056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006058:	f7fe fc32 	bl	80048c0 <HAL_GetTick>
 800605c:	0003      	movs	r3, r0
 800605e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006060:	e01c      	b.n	800609c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006062:	f7fe fc2d 	bl	80048c0 <HAL_GetTick>
 8006066:	0002      	movs	r2, r0
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	2b02      	cmp	r3, #2
 800606e:	d915      	bls.n	800609c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e084      	b.n	800617e <HAL_RCC_OscConfig+0x792>
 8006074:	40021000 	.word	0x40021000
 8006078:	ffff1fff 	.word	0xffff1fff
 800607c:	fffffeff 	.word	0xfffffeff
 8006080:	40007000 	.word	0x40007000
 8006084:	fffffbff 	.word	0xfffffbff
 8006088:	00001388 	.word	0x00001388
 800608c:	efffffff 	.word	0xefffffff
 8006090:	40010000 	.word	0x40010000
 8006094:	ffffdfff 	.word	0xffffdfff
 8006098:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800609c:	4b3a      	ldr	r3, [pc, #232]	@ (8006188 <HAL_RCC_OscConfig+0x79c>)
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	2380      	movs	r3, #128	@ 0x80
 80060a2:	049b      	lsls	r3, r3, #18
 80060a4:	4013      	ands	r3, r2
 80060a6:	d1dc      	bne.n	8006062 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060a8:	4b37      	ldr	r3, [pc, #220]	@ (8006188 <HAL_RCC_OscConfig+0x79c>)
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	4a37      	ldr	r2, [pc, #220]	@ (800618c <HAL_RCC_OscConfig+0x7a0>)
 80060ae:	4013      	ands	r3, r2
 80060b0:	0019      	movs	r1, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ba:	431a      	orrs	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060c0:	431a      	orrs	r2, r3
 80060c2:	4b31      	ldr	r3, [pc, #196]	@ (8006188 <HAL_RCC_OscConfig+0x79c>)
 80060c4:	430a      	orrs	r2, r1
 80060c6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060c8:	4b2f      	ldr	r3, [pc, #188]	@ (8006188 <HAL_RCC_OscConfig+0x79c>)
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	4b2e      	ldr	r3, [pc, #184]	@ (8006188 <HAL_RCC_OscConfig+0x79c>)
 80060ce:	2180      	movs	r1, #128	@ 0x80
 80060d0:	0449      	lsls	r1, r1, #17
 80060d2:	430a      	orrs	r2, r1
 80060d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d6:	f7fe fbf3 	bl	80048c0 <HAL_GetTick>
 80060da:	0003      	movs	r3, r0
 80060dc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80060de:	e008      	b.n	80060f2 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060e0:	f7fe fbee 	bl	80048c0 <HAL_GetTick>
 80060e4:	0002      	movs	r2, r0
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d901      	bls.n	80060f2 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e045      	b.n	800617e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80060f2:	4b25      	ldr	r3, [pc, #148]	@ (8006188 <HAL_RCC_OscConfig+0x79c>)
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	2380      	movs	r3, #128	@ 0x80
 80060f8:	049b      	lsls	r3, r3, #18
 80060fa:	4013      	ands	r3, r2
 80060fc:	d0f0      	beq.n	80060e0 <HAL_RCC_OscConfig+0x6f4>
 80060fe:	e03d      	b.n	800617c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006100:	4b21      	ldr	r3, [pc, #132]	@ (8006188 <HAL_RCC_OscConfig+0x79c>)
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	4b20      	ldr	r3, [pc, #128]	@ (8006188 <HAL_RCC_OscConfig+0x79c>)
 8006106:	4922      	ldr	r1, [pc, #136]	@ (8006190 <HAL_RCC_OscConfig+0x7a4>)
 8006108:	400a      	ands	r2, r1
 800610a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800610c:	f7fe fbd8 	bl	80048c0 <HAL_GetTick>
 8006110:	0003      	movs	r3, r0
 8006112:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006114:	e008      	b.n	8006128 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006116:	f7fe fbd3 	bl	80048c0 <HAL_GetTick>
 800611a:	0002      	movs	r2, r0
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	2b02      	cmp	r3, #2
 8006122:	d901      	bls.n	8006128 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e02a      	b.n	800617e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006128:	4b17      	ldr	r3, [pc, #92]	@ (8006188 <HAL_RCC_OscConfig+0x79c>)
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	2380      	movs	r3, #128	@ 0x80
 800612e:	049b      	lsls	r3, r3, #18
 8006130:	4013      	ands	r3, r2
 8006132:	d1f0      	bne.n	8006116 <HAL_RCC_OscConfig+0x72a>
 8006134:	e022      	b.n	800617c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800613a:	2b01      	cmp	r3, #1
 800613c:	d101      	bne.n	8006142 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e01d      	b.n	800617e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006142:	4b11      	ldr	r3, [pc, #68]	@ (8006188 <HAL_RCC_OscConfig+0x79c>)
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	2380      	movs	r3, #128	@ 0x80
 800614c:	025b      	lsls	r3, r3, #9
 800614e:	401a      	ands	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006154:	429a      	cmp	r2, r3
 8006156:	d10f      	bne.n	8006178 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006158:	69ba      	ldr	r2, [r7, #24]
 800615a:	23f0      	movs	r3, #240	@ 0xf0
 800615c:	039b      	lsls	r3, r3, #14
 800615e:	401a      	ands	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006164:	429a      	cmp	r2, r3
 8006166:	d107      	bne.n	8006178 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	23c0      	movs	r3, #192	@ 0xc0
 800616c:	041b      	lsls	r3, r3, #16
 800616e:	401a      	ands	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006174:	429a      	cmp	r2, r3
 8006176:	d001      	beq.n	800617c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e000      	b.n	800617e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	0018      	movs	r0, r3
 8006180:	46bd      	mov	sp, r7
 8006182:	b00a      	add	sp, #40	@ 0x28
 8006184:	bdb0      	pop	{r4, r5, r7, pc}
 8006186:	46c0      	nop			@ (mov r8, r8)
 8006188:	40021000 	.word	0x40021000
 800618c:	ff02ffff 	.word	0xff02ffff
 8006190:	feffffff 	.word	0xfeffffff

08006194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006194:	b5b0      	push	{r4, r5, r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d101      	bne.n	80061a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e128      	b.n	80063fa <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061a8:	4b96      	ldr	r3, [pc, #600]	@ (8006404 <HAL_RCC_ClockConfig+0x270>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2201      	movs	r2, #1
 80061ae:	4013      	ands	r3, r2
 80061b0:	683a      	ldr	r2, [r7, #0]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d91e      	bls.n	80061f4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061b6:	4b93      	ldr	r3, [pc, #588]	@ (8006404 <HAL_RCC_ClockConfig+0x270>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2201      	movs	r2, #1
 80061bc:	4393      	bics	r3, r2
 80061be:	0019      	movs	r1, r3
 80061c0:	4b90      	ldr	r3, [pc, #576]	@ (8006404 <HAL_RCC_ClockConfig+0x270>)
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	430a      	orrs	r2, r1
 80061c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80061c8:	f7fe fb7a 	bl	80048c0 <HAL_GetTick>
 80061cc:	0003      	movs	r3, r0
 80061ce:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061d0:	e009      	b.n	80061e6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061d2:	f7fe fb75 	bl	80048c0 <HAL_GetTick>
 80061d6:	0002      	movs	r2, r0
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	4a8a      	ldr	r2, [pc, #552]	@ (8006408 <HAL_RCC_ClockConfig+0x274>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d901      	bls.n	80061e6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e109      	b.n	80063fa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061e6:	4b87      	ldr	r3, [pc, #540]	@ (8006404 <HAL_RCC_ClockConfig+0x270>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2201      	movs	r2, #1
 80061ec:	4013      	ands	r3, r2
 80061ee:	683a      	ldr	r2, [r7, #0]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d1ee      	bne.n	80061d2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2202      	movs	r2, #2
 80061fa:	4013      	ands	r3, r2
 80061fc:	d009      	beq.n	8006212 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061fe:	4b83      	ldr	r3, [pc, #524]	@ (800640c <HAL_RCC_ClockConfig+0x278>)
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	22f0      	movs	r2, #240	@ 0xf0
 8006204:	4393      	bics	r3, r2
 8006206:	0019      	movs	r1, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	689a      	ldr	r2, [r3, #8]
 800620c:	4b7f      	ldr	r3, [pc, #508]	@ (800640c <HAL_RCC_ClockConfig+0x278>)
 800620e:	430a      	orrs	r2, r1
 8006210:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2201      	movs	r2, #1
 8006218:	4013      	ands	r3, r2
 800621a:	d100      	bne.n	800621e <HAL_RCC_ClockConfig+0x8a>
 800621c:	e089      	b.n	8006332 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	2b02      	cmp	r3, #2
 8006224:	d107      	bne.n	8006236 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006226:	4b79      	ldr	r3, [pc, #484]	@ (800640c <HAL_RCC_ClockConfig+0x278>)
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	2380      	movs	r3, #128	@ 0x80
 800622c:	029b      	lsls	r3, r3, #10
 800622e:	4013      	ands	r3, r2
 8006230:	d120      	bne.n	8006274 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e0e1      	b.n	80063fa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	2b03      	cmp	r3, #3
 800623c:	d107      	bne.n	800624e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800623e:	4b73      	ldr	r3, [pc, #460]	@ (800640c <HAL_RCC_ClockConfig+0x278>)
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	2380      	movs	r3, #128	@ 0x80
 8006244:	049b      	lsls	r3, r3, #18
 8006246:	4013      	ands	r3, r2
 8006248:	d114      	bne.n	8006274 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e0d5      	b.n	80063fa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d106      	bne.n	8006264 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006256:	4b6d      	ldr	r3, [pc, #436]	@ (800640c <HAL_RCC_ClockConfig+0x278>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2204      	movs	r2, #4
 800625c:	4013      	ands	r3, r2
 800625e:	d109      	bne.n	8006274 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e0ca      	b.n	80063fa <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006264:	4b69      	ldr	r3, [pc, #420]	@ (800640c <HAL_RCC_ClockConfig+0x278>)
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	2380      	movs	r3, #128	@ 0x80
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4013      	ands	r3, r2
 800626e:	d101      	bne.n	8006274 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e0c2      	b.n	80063fa <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006274:	4b65      	ldr	r3, [pc, #404]	@ (800640c <HAL_RCC_ClockConfig+0x278>)
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	2203      	movs	r2, #3
 800627a:	4393      	bics	r3, r2
 800627c:	0019      	movs	r1, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685a      	ldr	r2, [r3, #4]
 8006282:	4b62      	ldr	r3, [pc, #392]	@ (800640c <HAL_RCC_ClockConfig+0x278>)
 8006284:	430a      	orrs	r2, r1
 8006286:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006288:	f7fe fb1a 	bl	80048c0 <HAL_GetTick>
 800628c:	0003      	movs	r3, r0
 800628e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	2b02      	cmp	r3, #2
 8006296:	d111      	bne.n	80062bc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006298:	e009      	b.n	80062ae <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800629a:	f7fe fb11 	bl	80048c0 <HAL_GetTick>
 800629e:	0002      	movs	r2, r0
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	4a58      	ldr	r2, [pc, #352]	@ (8006408 <HAL_RCC_ClockConfig+0x274>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d901      	bls.n	80062ae <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e0a5      	b.n	80063fa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80062ae:	4b57      	ldr	r3, [pc, #348]	@ (800640c <HAL_RCC_ClockConfig+0x278>)
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	220c      	movs	r2, #12
 80062b4:	4013      	ands	r3, r2
 80062b6:	2b08      	cmp	r3, #8
 80062b8:	d1ef      	bne.n	800629a <HAL_RCC_ClockConfig+0x106>
 80062ba:	e03a      	b.n	8006332 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	2b03      	cmp	r3, #3
 80062c2:	d111      	bne.n	80062e8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062c4:	e009      	b.n	80062da <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062c6:	f7fe fafb 	bl	80048c0 <HAL_GetTick>
 80062ca:	0002      	movs	r2, r0
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	4a4d      	ldr	r2, [pc, #308]	@ (8006408 <HAL_RCC_ClockConfig+0x274>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d901      	bls.n	80062da <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e08f      	b.n	80063fa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062da:	4b4c      	ldr	r3, [pc, #304]	@ (800640c <HAL_RCC_ClockConfig+0x278>)
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	220c      	movs	r2, #12
 80062e0:	4013      	ands	r3, r2
 80062e2:	2b0c      	cmp	r3, #12
 80062e4:	d1ef      	bne.n	80062c6 <HAL_RCC_ClockConfig+0x132>
 80062e6:	e024      	b.n	8006332 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d11b      	bne.n	8006328 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80062f0:	e009      	b.n	8006306 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062f2:	f7fe fae5 	bl	80048c0 <HAL_GetTick>
 80062f6:	0002      	movs	r2, r0
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	4a42      	ldr	r2, [pc, #264]	@ (8006408 <HAL_RCC_ClockConfig+0x274>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d901      	bls.n	8006306 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e079      	b.n	80063fa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006306:	4b41      	ldr	r3, [pc, #260]	@ (800640c <HAL_RCC_ClockConfig+0x278>)
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	220c      	movs	r2, #12
 800630c:	4013      	ands	r3, r2
 800630e:	2b04      	cmp	r3, #4
 8006310:	d1ef      	bne.n	80062f2 <HAL_RCC_ClockConfig+0x15e>
 8006312:	e00e      	b.n	8006332 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006314:	f7fe fad4 	bl	80048c0 <HAL_GetTick>
 8006318:	0002      	movs	r2, r0
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	4a3a      	ldr	r2, [pc, #232]	@ (8006408 <HAL_RCC_ClockConfig+0x274>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d901      	bls.n	8006328 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e068      	b.n	80063fa <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006328:	4b38      	ldr	r3, [pc, #224]	@ (800640c <HAL_RCC_ClockConfig+0x278>)
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	220c      	movs	r2, #12
 800632e:	4013      	ands	r3, r2
 8006330:	d1f0      	bne.n	8006314 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006332:	4b34      	ldr	r3, [pc, #208]	@ (8006404 <HAL_RCC_ClockConfig+0x270>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2201      	movs	r2, #1
 8006338:	4013      	ands	r3, r2
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	429a      	cmp	r2, r3
 800633e:	d21e      	bcs.n	800637e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006340:	4b30      	ldr	r3, [pc, #192]	@ (8006404 <HAL_RCC_ClockConfig+0x270>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2201      	movs	r2, #1
 8006346:	4393      	bics	r3, r2
 8006348:	0019      	movs	r1, r3
 800634a:	4b2e      	ldr	r3, [pc, #184]	@ (8006404 <HAL_RCC_ClockConfig+0x270>)
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	430a      	orrs	r2, r1
 8006350:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006352:	f7fe fab5 	bl	80048c0 <HAL_GetTick>
 8006356:	0003      	movs	r3, r0
 8006358:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800635a:	e009      	b.n	8006370 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800635c:	f7fe fab0 	bl	80048c0 <HAL_GetTick>
 8006360:	0002      	movs	r2, r0
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	4a28      	ldr	r2, [pc, #160]	@ (8006408 <HAL_RCC_ClockConfig+0x274>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d901      	bls.n	8006370 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	e044      	b.n	80063fa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006370:	4b24      	ldr	r3, [pc, #144]	@ (8006404 <HAL_RCC_ClockConfig+0x270>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2201      	movs	r2, #1
 8006376:	4013      	ands	r3, r2
 8006378:	683a      	ldr	r2, [r7, #0]
 800637a:	429a      	cmp	r2, r3
 800637c:	d1ee      	bne.n	800635c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2204      	movs	r2, #4
 8006384:	4013      	ands	r3, r2
 8006386:	d009      	beq.n	800639c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006388:	4b20      	ldr	r3, [pc, #128]	@ (800640c <HAL_RCC_ClockConfig+0x278>)
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	4a20      	ldr	r2, [pc, #128]	@ (8006410 <HAL_RCC_ClockConfig+0x27c>)
 800638e:	4013      	ands	r3, r2
 8006390:	0019      	movs	r1, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	68da      	ldr	r2, [r3, #12]
 8006396:	4b1d      	ldr	r3, [pc, #116]	@ (800640c <HAL_RCC_ClockConfig+0x278>)
 8006398:	430a      	orrs	r2, r1
 800639a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2208      	movs	r2, #8
 80063a2:	4013      	ands	r3, r2
 80063a4:	d00a      	beq.n	80063bc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80063a6:	4b19      	ldr	r3, [pc, #100]	@ (800640c <HAL_RCC_ClockConfig+0x278>)
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	4a1a      	ldr	r2, [pc, #104]	@ (8006414 <HAL_RCC_ClockConfig+0x280>)
 80063ac:	4013      	ands	r3, r2
 80063ae:	0019      	movs	r1, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	00da      	lsls	r2, r3, #3
 80063b6:	4b15      	ldr	r3, [pc, #84]	@ (800640c <HAL_RCC_ClockConfig+0x278>)
 80063b8:	430a      	orrs	r2, r1
 80063ba:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80063bc:	f000 f832 	bl	8006424 <HAL_RCC_GetSysClockFreq>
 80063c0:	0001      	movs	r1, r0
 80063c2:	4b12      	ldr	r3, [pc, #72]	@ (800640c <HAL_RCC_ClockConfig+0x278>)
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	091b      	lsrs	r3, r3, #4
 80063c8:	220f      	movs	r2, #15
 80063ca:	4013      	ands	r3, r2
 80063cc:	4a12      	ldr	r2, [pc, #72]	@ (8006418 <HAL_RCC_ClockConfig+0x284>)
 80063ce:	5cd3      	ldrb	r3, [r2, r3]
 80063d0:	000a      	movs	r2, r1
 80063d2:	40da      	lsrs	r2, r3
 80063d4:	4b11      	ldr	r3, [pc, #68]	@ (800641c <HAL_RCC_ClockConfig+0x288>)
 80063d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80063d8:	4b11      	ldr	r3, [pc, #68]	@ (8006420 <HAL_RCC_ClockConfig+0x28c>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	250b      	movs	r5, #11
 80063de:	197c      	adds	r4, r7, r5
 80063e0:	0018      	movs	r0, r3
 80063e2:	f7fe fa27 	bl	8004834 <HAL_InitTick>
 80063e6:	0003      	movs	r3, r0
 80063e8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80063ea:	197b      	adds	r3, r7, r5
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d002      	beq.n	80063f8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80063f2:	197b      	adds	r3, r7, r5
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	e000      	b.n	80063fa <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	0018      	movs	r0, r3
 80063fc:	46bd      	mov	sp, r7
 80063fe:	b004      	add	sp, #16
 8006400:	bdb0      	pop	{r4, r5, r7, pc}
 8006402:	46c0      	nop			@ (mov r8, r8)
 8006404:	40022000 	.word	0x40022000
 8006408:	00001388 	.word	0x00001388
 800640c:	40021000 	.word	0x40021000
 8006410:	fffff8ff 	.word	0xfffff8ff
 8006414:	ffffc7ff 	.word	0xffffc7ff
 8006418:	0800c34c 	.word	0x0800c34c
 800641c:	20000000 	.word	0x20000000
 8006420:	20000004 	.word	0x20000004

08006424 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006424:	b5b0      	push	{r4, r5, r7, lr}
 8006426:	b08e      	sub	sp, #56	@ 0x38
 8006428:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800642a:	4b4c      	ldr	r3, [pc, #304]	@ (800655c <HAL_RCC_GetSysClockFreq+0x138>)
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006430:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006432:	230c      	movs	r3, #12
 8006434:	4013      	ands	r3, r2
 8006436:	2b0c      	cmp	r3, #12
 8006438:	d014      	beq.n	8006464 <HAL_RCC_GetSysClockFreq+0x40>
 800643a:	d900      	bls.n	800643e <HAL_RCC_GetSysClockFreq+0x1a>
 800643c:	e07b      	b.n	8006536 <HAL_RCC_GetSysClockFreq+0x112>
 800643e:	2b04      	cmp	r3, #4
 8006440:	d002      	beq.n	8006448 <HAL_RCC_GetSysClockFreq+0x24>
 8006442:	2b08      	cmp	r3, #8
 8006444:	d00b      	beq.n	800645e <HAL_RCC_GetSysClockFreq+0x3a>
 8006446:	e076      	b.n	8006536 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006448:	4b44      	ldr	r3, [pc, #272]	@ (800655c <HAL_RCC_GetSysClockFreq+0x138>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2210      	movs	r2, #16
 800644e:	4013      	ands	r3, r2
 8006450:	d002      	beq.n	8006458 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8006452:	4b43      	ldr	r3, [pc, #268]	@ (8006560 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006454:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8006456:	e07c      	b.n	8006552 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8006458:	4b42      	ldr	r3, [pc, #264]	@ (8006564 <HAL_RCC_GetSysClockFreq+0x140>)
 800645a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800645c:	e079      	b.n	8006552 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800645e:	4b42      	ldr	r3, [pc, #264]	@ (8006568 <HAL_RCC_GetSysClockFreq+0x144>)
 8006460:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8006462:	e076      	b.n	8006552 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006466:	0c9a      	lsrs	r2, r3, #18
 8006468:	230f      	movs	r3, #15
 800646a:	401a      	ands	r2, r3
 800646c:	4b3f      	ldr	r3, [pc, #252]	@ (800656c <HAL_RCC_GetSysClockFreq+0x148>)
 800646e:	5c9b      	ldrb	r3, [r3, r2]
 8006470:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8006472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006474:	0d9a      	lsrs	r2, r3, #22
 8006476:	2303      	movs	r3, #3
 8006478:	4013      	ands	r3, r2
 800647a:	3301      	adds	r3, #1
 800647c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800647e:	4b37      	ldr	r3, [pc, #220]	@ (800655c <HAL_RCC_GetSysClockFreq+0x138>)
 8006480:	68da      	ldr	r2, [r3, #12]
 8006482:	2380      	movs	r3, #128	@ 0x80
 8006484:	025b      	lsls	r3, r3, #9
 8006486:	4013      	ands	r3, r2
 8006488:	d01a      	beq.n	80064c0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800648a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800648c:	61bb      	str	r3, [r7, #24]
 800648e:	2300      	movs	r3, #0
 8006490:	61fb      	str	r3, [r7, #28]
 8006492:	4a35      	ldr	r2, [pc, #212]	@ (8006568 <HAL_RCC_GetSysClockFreq+0x144>)
 8006494:	2300      	movs	r3, #0
 8006496:	69b8      	ldr	r0, [r7, #24]
 8006498:	69f9      	ldr	r1, [r7, #28]
 800649a:	f7fa f85f 	bl	800055c <__aeabi_lmul>
 800649e:	0002      	movs	r2, r0
 80064a0:	000b      	movs	r3, r1
 80064a2:	0010      	movs	r0, r2
 80064a4:	0019      	movs	r1, r3
 80064a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a8:	613b      	str	r3, [r7, #16]
 80064aa:	2300      	movs	r3, #0
 80064ac:	617b      	str	r3, [r7, #20]
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	f7fa f833 	bl	800051c <__aeabi_uldivmod>
 80064b6:	0002      	movs	r2, r0
 80064b8:	000b      	movs	r3, r1
 80064ba:	0013      	movs	r3, r2
 80064bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80064be:	e037      	b.n	8006530 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80064c0:	4b26      	ldr	r3, [pc, #152]	@ (800655c <HAL_RCC_GetSysClockFreq+0x138>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2210      	movs	r2, #16
 80064c6:	4013      	ands	r3, r2
 80064c8:	d01a      	beq.n	8006500 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80064ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064cc:	60bb      	str	r3, [r7, #8]
 80064ce:	2300      	movs	r3, #0
 80064d0:	60fb      	str	r3, [r7, #12]
 80064d2:	4a23      	ldr	r2, [pc, #140]	@ (8006560 <HAL_RCC_GetSysClockFreq+0x13c>)
 80064d4:	2300      	movs	r3, #0
 80064d6:	68b8      	ldr	r0, [r7, #8]
 80064d8:	68f9      	ldr	r1, [r7, #12]
 80064da:	f7fa f83f 	bl	800055c <__aeabi_lmul>
 80064de:	0002      	movs	r2, r0
 80064e0:	000b      	movs	r3, r1
 80064e2:	0010      	movs	r0, r2
 80064e4:	0019      	movs	r1, r3
 80064e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e8:	603b      	str	r3, [r7, #0]
 80064ea:	2300      	movs	r3, #0
 80064ec:	607b      	str	r3, [r7, #4]
 80064ee:	683a      	ldr	r2, [r7, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f7fa f813 	bl	800051c <__aeabi_uldivmod>
 80064f6:	0002      	movs	r2, r0
 80064f8:	000b      	movs	r3, r1
 80064fa:	0013      	movs	r3, r2
 80064fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80064fe:	e017      	b.n	8006530 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006502:	0018      	movs	r0, r3
 8006504:	2300      	movs	r3, #0
 8006506:	0019      	movs	r1, r3
 8006508:	4a16      	ldr	r2, [pc, #88]	@ (8006564 <HAL_RCC_GetSysClockFreq+0x140>)
 800650a:	2300      	movs	r3, #0
 800650c:	f7fa f826 	bl	800055c <__aeabi_lmul>
 8006510:	0002      	movs	r2, r0
 8006512:	000b      	movs	r3, r1
 8006514:	0010      	movs	r0, r2
 8006516:	0019      	movs	r1, r3
 8006518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651a:	001c      	movs	r4, r3
 800651c:	2300      	movs	r3, #0
 800651e:	001d      	movs	r5, r3
 8006520:	0022      	movs	r2, r4
 8006522:	002b      	movs	r3, r5
 8006524:	f7f9 fffa 	bl	800051c <__aeabi_uldivmod>
 8006528:	0002      	movs	r2, r0
 800652a:	000b      	movs	r3, r1
 800652c:	0013      	movs	r3, r2
 800652e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8006530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006532:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8006534:	e00d      	b.n	8006552 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8006536:	4b09      	ldr	r3, [pc, #36]	@ (800655c <HAL_RCC_GetSysClockFreq+0x138>)
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	0b5b      	lsrs	r3, r3, #13
 800653c:	2207      	movs	r2, #7
 800653e:	4013      	ands	r3, r2
 8006540:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	3301      	adds	r3, #1
 8006546:	2280      	movs	r2, #128	@ 0x80
 8006548:	0212      	lsls	r2, r2, #8
 800654a:	409a      	lsls	r2, r3
 800654c:	0013      	movs	r3, r2
 800654e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8006550:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8006554:	0018      	movs	r0, r3
 8006556:	46bd      	mov	sp, r7
 8006558:	b00e      	add	sp, #56	@ 0x38
 800655a:	bdb0      	pop	{r4, r5, r7, pc}
 800655c:	40021000 	.word	0x40021000
 8006560:	003d0900 	.word	0x003d0900
 8006564:	00f42400 	.word	0x00f42400
 8006568:	007a1200 	.word	0x007a1200
 800656c:	0800c364 	.word	0x0800c364

08006570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006574:	4b02      	ldr	r3, [pc, #8]	@ (8006580 <HAL_RCC_GetHCLKFreq+0x10>)
 8006576:	681b      	ldr	r3, [r3, #0]
}
 8006578:	0018      	movs	r0, r3
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	46c0      	nop			@ (mov r8, r8)
 8006580:	20000000 	.word	0x20000000

08006584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006588:	f7ff fff2 	bl	8006570 <HAL_RCC_GetHCLKFreq>
 800658c:	0001      	movs	r1, r0
 800658e:	4b06      	ldr	r3, [pc, #24]	@ (80065a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	0a1b      	lsrs	r3, r3, #8
 8006594:	2207      	movs	r2, #7
 8006596:	4013      	ands	r3, r2
 8006598:	4a04      	ldr	r2, [pc, #16]	@ (80065ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800659a:	5cd3      	ldrb	r3, [r2, r3]
 800659c:	40d9      	lsrs	r1, r3
 800659e:	000b      	movs	r3, r1
}
 80065a0:	0018      	movs	r0, r3
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	46c0      	nop			@ (mov r8, r8)
 80065a8:	40021000 	.word	0x40021000
 80065ac:	0800c35c 	.word	0x0800c35c

080065b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80065b4:	f7ff ffdc 	bl	8006570 <HAL_RCC_GetHCLKFreq>
 80065b8:	0001      	movs	r1, r0
 80065ba:	4b06      	ldr	r3, [pc, #24]	@ (80065d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	0adb      	lsrs	r3, r3, #11
 80065c0:	2207      	movs	r2, #7
 80065c2:	4013      	ands	r3, r2
 80065c4:	4a04      	ldr	r2, [pc, #16]	@ (80065d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80065c6:	5cd3      	ldrb	r3, [r2, r3]
 80065c8:	40d9      	lsrs	r1, r3
 80065ca:	000b      	movs	r3, r1
}
 80065cc:	0018      	movs	r0, r3
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	46c0      	nop			@ (mov r8, r8)
 80065d4:	40021000 	.word	0x40021000
 80065d8:	0800c35c 	.word	0x0800c35c

080065dc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b086      	sub	sp, #24
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80065e4:	2317      	movs	r3, #23
 80065e6:	18fb      	adds	r3, r7, r3
 80065e8:	2200      	movs	r2, #0
 80065ea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2220      	movs	r2, #32
 80065f2:	4013      	ands	r3, r2
 80065f4:	d106      	bne.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	2380      	movs	r3, #128	@ 0x80
 80065fc:	011b      	lsls	r3, r3, #4
 80065fe:	4013      	ands	r3, r2
 8006600:	d100      	bne.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8006602:	e104      	b.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006604:	4bb9      	ldr	r3, [pc, #740]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006606:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006608:	2380      	movs	r3, #128	@ 0x80
 800660a:	055b      	lsls	r3, r3, #21
 800660c:	4013      	ands	r3, r2
 800660e:	d10a      	bne.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006610:	4bb6      	ldr	r3, [pc, #728]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006612:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006614:	4bb5      	ldr	r3, [pc, #724]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006616:	2180      	movs	r1, #128	@ 0x80
 8006618:	0549      	lsls	r1, r1, #21
 800661a:	430a      	orrs	r2, r1
 800661c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800661e:	2317      	movs	r3, #23
 8006620:	18fb      	adds	r3, r7, r3
 8006622:	2201      	movs	r2, #1
 8006624:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006626:	4bb2      	ldr	r3, [pc, #712]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	2380      	movs	r3, #128	@ 0x80
 800662c:	005b      	lsls	r3, r3, #1
 800662e:	4013      	ands	r3, r2
 8006630:	d11a      	bne.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006632:	4baf      	ldr	r3, [pc, #700]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	4bae      	ldr	r3, [pc, #696]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8006638:	2180      	movs	r1, #128	@ 0x80
 800663a:	0049      	lsls	r1, r1, #1
 800663c:	430a      	orrs	r2, r1
 800663e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006640:	f7fe f93e 	bl	80048c0 <HAL_GetTick>
 8006644:	0003      	movs	r3, r0
 8006646:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006648:	e008      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800664a:	f7fe f939 	bl	80048c0 <HAL_GetTick>
 800664e:	0002      	movs	r2, r0
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	2b64      	cmp	r3, #100	@ 0x64
 8006656:	d901      	bls.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e143      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800665c:	4ba4      	ldr	r3, [pc, #656]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	2380      	movs	r3, #128	@ 0x80
 8006662:	005b      	lsls	r3, r3, #1
 8006664:	4013      	ands	r3, r2
 8006666:	d0f0      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006668:	4ba0      	ldr	r3, [pc, #640]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	23c0      	movs	r3, #192	@ 0xc0
 800666e:	039b      	lsls	r3, r3, #14
 8006670:	4013      	ands	r3, r2
 8006672:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685a      	ldr	r2, [r3, #4]
 8006678:	23c0      	movs	r3, #192	@ 0xc0
 800667a:	039b      	lsls	r3, r3, #14
 800667c:	4013      	ands	r3, r2
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	429a      	cmp	r2, r3
 8006682:	d107      	bne.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	689a      	ldr	r2, [r3, #8]
 8006688:	23c0      	movs	r3, #192	@ 0xc0
 800668a:	039b      	lsls	r3, r3, #14
 800668c:	4013      	ands	r3, r2
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	429a      	cmp	r2, r3
 8006692:	d013      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685a      	ldr	r2, [r3, #4]
 8006698:	23c0      	movs	r3, #192	@ 0xc0
 800669a:	029b      	lsls	r3, r3, #10
 800669c:	401a      	ands	r2, r3
 800669e:	23c0      	movs	r3, #192	@ 0xc0
 80066a0:	029b      	lsls	r3, r3, #10
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d10a      	bne.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80066a6:	4b91      	ldr	r3, [pc, #580]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	2380      	movs	r3, #128	@ 0x80
 80066ac:	029b      	lsls	r3, r3, #10
 80066ae:	401a      	ands	r2, r3
 80066b0:	2380      	movs	r3, #128	@ 0x80
 80066b2:	029b      	lsls	r3, r3, #10
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d101      	bne.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e113      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80066bc:	4b8b      	ldr	r3, [pc, #556]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80066be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80066c0:	23c0      	movs	r3, #192	@ 0xc0
 80066c2:	029b      	lsls	r3, r3, #10
 80066c4:	4013      	ands	r3, r2
 80066c6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d049      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	685a      	ldr	r2, [r3, #4]
 80066d2:	23c0      	movs	r3, #192	@ 0xc0
 80066d4:	029b      	lsls	r3, r3, #10
 80066d6:	4013      	ands	r3, r2
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d004      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2220      	movs	r2, #32
 80066e4:	4013      	ands	r3, r2
 80066e6:	d10d      	bne.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	689a      	ldr	r2, [r3, #8]
 80066ec:	23c0      	movs	r3, #192	@ 0xc0
 80066ee:	029b      	lsls	r3, r3, #10
 80066f0:	4013      	ands	r3, r2
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d034      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	2380      	movs	r3, #128	@ 0x80
 80066fe:	011b      	lsls	r3, r3, #4
 8006700:	4013      	ands	r3, r2
 8006702:	d02e      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006704:	4b79      	ldr	r3, [pc, #484]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006708:	4a7a      	ldr	r2, [pc, #488]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800670a:	4013      	ands	r3, r2
 800670c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800670e:	4b77      	ldr	r3, [pc, #476]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006710:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006712:	4b76      	ldr	r3, [pc, #472]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006714:	2180      	movs	r1, #128	@ 0x80
 8006716:	0309      	lsls	r1, r1, #12
 8006718:	430a      	orrs	r2, r1
 800671a:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800671c:	4b73      	ldr	r3, [pc, #460]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800671e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006720:	4b72      	ldr	r3, [pc, #456]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006722:	4975      	ldr	r1, [pc, #468]	@ (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006724:	400a      	ands	r2, r1
 8006726:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8006728:	4b70      	ldr	r3, [pc, #448]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	2380      	movs	r3, #128	@ 0x80
 8006732:	005b      	lsls	r3, r3, #1
 8006734:	4013      	ands	r3, r2
 8006736:	d014      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006738:	f7fe f8c2 	bl	80048c0 <HAL_GetTick>
 800673c:	0003      	movs	r3, r0
 800673e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006740:	e009      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006742:	f7fe f8bd 	bl	80048c0 <HAL_GetTick>
 8006746:	0002      	movs	r2, r0
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	4a6b      	ldr	r2, [pc, #428]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d901      	bls.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e0c6      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006756:	4b65      	ldr	r3, [pc, #404]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006758:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800675a:	2380      	movs	r3, #128	@ 0x80
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4013      	ands	r3, r2
 8006760:	d0ef      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	2380      	movs	r3, #128	@ 0x80
 8006768:	011b      	lsls	r3, r3, #4
 800676a:	4013      	ands	r3, r2
 800676c:	d01f      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	689a      	ldr	r2, [r3, #8]
 8006772:	23c0      	movs	r3, #192	@ 0xc0
 8006774:	029b      	lsls	r3, r3, #10
 8006776:	401a      	ands	r2, r3
 8006778:	23c0      	movs	r3, #192	@ 0xc0
 800677a:	029b      	lsls	r3, r3, #10
 800677c:	429a      	cmp	r2, r3
 800677e:	d10c      	bne.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8006780:	4b5a      	ldr	r3, [pc, #360]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a5e      	ldr	r2, [pc, #376]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8006786:	4013      	ands	r3, r2
 8006788:	0019      	movs	r1, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	689a      	ldr	r2, [r3, #8]
 800678e:	23c0      	movs	r3, #192	@ 0xc0
 8006790:	039b      	lsls	r3, r3, #14
 8006792:	401a      	ands	r2, r3
 8006794:	4b55      	ldr	r3, [pc, #340]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006796:	430a      	orrs	r2, r1
 8006798:	601a      	str	r2, [r3, #0]
 800679a:	4b54      	ldr	r3, [pc, #336]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800679c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	689a      	ldr	r2, [r3, #8]
 80067a2:	23c0      	movs	r3, #192	@ 0xc0
 80067a4:	029b      	lsls	r3, r3, #10
 80067a6:	401a      	ands	r2, r3
 80067a8:	4b50      	ldr	r3, [pc, #320]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80067aa:	430a      	orrs	r2, r1
 80067ac:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2220      	movs	r2, #32
 80067b4:	4013      	ands	r3, r2
 80067b6:	d01f      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	23c0      	movs	r3, #192	@ 0xc0
 80067be:	029b      	lsls	r3, r3, #10
 80067c0:	401a      	ands	r2, r3
 80067c2:	23c0      	movs	r3, #192	@ 0xc0
 80067c4:	029b      	lsls	r3, r3, #10
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d10c      	bne.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80067ca:	4b48      	ldr	r3, [pc, #288]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a4c      	ldr	r2, [pc, #304]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80067d0:	4013      	ands	r3, r2
 80067d2:	0019      	movs	r1, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685a      	ldr	r2, [r3, #4]
 80067d8:	23c0      	movs	r3, #192	@ 0xc0
 80067da:	039b      	lsls	r3, r3, #14
 80067dc:	401a      	ands	r2, r3
 80067de:	4b43      	ldr	r3, [pc, #268]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80067e0:	430a      	orrs	r2, r1
 80067e2:	601a      	str	r2, [r3, #0]
 80067e4:	4b41      	ldr	r3, [pc, #260]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80067e6:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	23c0      	movs	r3, #192	@ 0xc0
 80067ee:	029b      	lsls	r3, r3, #10
 80067f0:	401a      	ands	r2, r3
 80067f2:	4b3e      	ldr	r3, [pc, #248]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80067f4:	430a      	orrs	r2, r1
 80067f6:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80067f8:	2317      	movs	r3, #23
 80067fa:	18fb      	adds	r3, r7, r3
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d105      	bne.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006802:	4b3a      	ldr	r3, [pc, #232]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006804:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006806:	4b39      	ldr	r3, [pc, #228]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006808:	493e      	ldr	r1, [pc, #248]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800680a:	400a      	ands	r2, r1
 800680c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2201      	movs	r2, #1
 8006814:	4013      	ands	r3, r2
 8006816:	d009      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006818:	4b34      	ldr	r3, [pc, #208]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800681a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800681c:	2203      	movs	r2, #3
 800681e:	4393      	bics	r3, r2
 8006820:	0019      	movs	r1, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68da      	ldr	r2, [r3, #12]
 8006826:	4b31      	ldr	r3, [pc, #196]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006828:	430a      	orrs	r2, r1
 800682a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2202      	movs	r2, #2
 8006832:	4013      	ands	r3, r2
 8006834:	d009      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006836:	4b2d      	ldr	r3, [pc, #180]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800683a:	220c      	movs	r2, #12
 800683c:	4393      	bics	r3, r2
 800683e:	0019      	movs	r1, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	691a      	ldr	r2, [r3, #16]
 8006844:	4b29      	ldr	r3, [pc, #164]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006846:	430a      	orrs	r2, r1
 8006848:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2204      	movs	r2, #4
 8006850:	4013      	ands	r3, r2
 8006852:	d009      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006854:	4b25      	ldr	r3, [pc, #148]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006858:	4a2b      	ldr	r2, [pc, #172]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 800685a:	4013      	ands	r3, r2
 800685c:	0019      	movs	r1, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	695a      	ldr	r2, [r3, #20]
 8006862:	4b22      	ldr	r3, [pc, #136]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006864:	430a      	orrs	r2, r1
 8006866:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2208      	movs	r2, #8
 800686e:	4013      	ands	r3, r2
 8006870:	d009      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006872:	4b1e      	ldr	r3, [pc, #120]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006876:	4a25      	ldr	r2, [pc, #148]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006878:	4013      	ands	r3, r2
 800687a:	0019      	movs	r1, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	699a      	ldr	r2, [r3, #24]
 8006880:	4b1a      	ldr	r3, [pc, #104]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006882:	430a      	orrs	r2, r1
 8006884:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	2380      	movs	r3, #128	@ 0x80
 800688c:	005b      	lsls	r3, r3, #1
 800688e:	4013      	ands	r3, r2
 8006890:	d009      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006892:	4b16      	ldr	r3, [pc, #88]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006896:	4a17      	ldr	r2, [pc, #92]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8006898:	4013      	ands	r3, r2
 800689a:	0019      	movs	r1, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	69da      	ldr	r2, [r3, #28]
 80068a0:	4b12      	ldr	r3, [pc, #72]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80068a2:	430a      	orrs	r2, r1
 80068a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2240      	movs	r2, #64	@ 0x40
 80068ac:	4013      	ands	r3, r2
 80068ae:	d009      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80068b0:	4b0e      	ldr	r3, [pc, #56]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80068b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068b4:	4a16      	ldr	r2, [pc, #88]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80068b6:	4013      	ands	r3, r2
 80068b8:	0019      	movs	r1, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80068be:	4b0b      	ldr	r3, [pc, #44]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80068c0:	430a      	orrs	r2, r1
 80068c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2280      	movs	r2, #128	@ 0x80
 80068ca:	4013      	ands	r3, r2
 80068cc:	d009      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80068ce:	4b07      	ldr	r3, [pc, #28]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80068d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068d2:	4a10      	ldr	r2, [pc, #64]	@ (8006914 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068d4:	4013      	ands	r3, r2
 80068d6:	0019      	movs	r1, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a1a      	ldr	r2, [r3, #32]
 80068dc:	4b03      	ldr	r3, [pc, #12]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80068de:	430a      	orrs	r2, r1
 80068e0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	0018      	movs	r0, r3
 80068e6:	46bd      	mov	sp, r7
 80068e8:	b006      	add	sp, #24
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	40021000 	.word	0x40021000
 80068f0:	40007000 	.word	0x40007000
 80068f4:	fffcffff 	.word	0xfffcffff
 80068f8:	fff7ffff 	.word	0xfff7ffff
 80068fc:	00001388 	.word	0x00001388
 8006900:	ffcfffff 	.word	0xffcfffff
 8006904:	efffffff 	.word	0xefffffff
 8006908:	fffff3ff 	.word	0xfffff3ff
 800690c:	ffffcfff 	.word	0xffffcfff
 8006910:	fbffffff 	.word	0xfbffffff
 8006914:	fff3ffff 	.word	0xfff3ffff

08006918 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e044      	b.n	80069b4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800692e:	2b00      	cmp	r3, #0
 8006930:	d107      	bne.n	8006942 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2278      	movs	r2, #120	@ 0x78
 8006936:	2100      	movs	r1, #0
 8006938:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	0018      	movs	r0, r3
 800693e:	f7fd fdff 	bl	8004540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2224      	movs	r2, #36	@ 0x24
 8006946:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2101      	movs	r1, #1
 8006954:	438a      	bics	r2, r1
 8006956:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	0018      	movs	r0, r3
 800695c:	f000 f8d0 	bl	8006b00 <UART_SetConfig>
 8006960:	0003      	movs	r3, r0
 8006962:	2b01      	cmp	r3, #1
 8006964:	d101      	bne.n	800696a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e024      	b.n	80069b4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800696e:	2b00      	cmp	r3, #0
 8006970:	d003      	beq.n	800697a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	0018      	movs	r0, r3
 8006976:	f000 fb61 	bl	800703c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	685a      	ldr	r2, [r3, #4]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	490d      	ldr	r1, [pc, #52]	@ (80069bc <HAL_UART_Init+0xa4>)
 8006986:	400a      	ands	r2, r1
 8006988:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	689a      	ldr	r2, [r3, #8]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	212a      	movs	r1, #42	@ 0x2a
 8006996:	438a      	bics	r2, r1
 8006998:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2101      	movs	r1, #1
 80069a6:	430a      	orrs	r2, r1
 80069a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	0018      	movs	r0, r3
 80069ae:	f000 fbf9 	bl	80071a4 <UART_CheckIdleState>
 80069b2:	0003      	movs	r3, r0
}
 80069b4:	0018      	movs	r0, r3
 80069b6:	46bd      	mov	sp, r7
 80069b8:	b002      	add	sp, #8
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	ffffb7ff 	.word	0xffffb7ff

080069c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b08a      	sub	sp, #40	@ 0x28
 80069c4:	af02      	add	r7, sp, #8
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	603b      	str	r3, [r7, #0]
 80069cc:	1dbb      	adds	r3, r7, #6
 80069ce:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069d4:	2b20      	cmp	r3, #32
 80069d6:	d000      	beq.n	80069da <HAL_UART_Transmit+0x1a>
 80069d8:	e08c      	b.n	8006af4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d003      	beq.n	80069e8 <HAL_UART_Transmit+0x28>
 80069e0:	1dbb      	adds	r3, r7, #6
 80069e2:	881b      	ldrh	r3, [r3, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d101      	bne.n	80069ec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e084      	b.n	8006af6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	689a      	ldr	r2, [r3, #8]
 80069f0:	2380      	movs	r3, #128	@ 0x80
 80069f2:	015b      	lsls	r3, r3, #5
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d109      	bne.n	8006a0c <HAL_UART_Transmit+0x4c>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d105      	bne.n	8006a0c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	2201      	movs	r2, #1
 8006a04:	4013      	ands	r3, r2
 8006a06:	d001      	beq.n	8006a0c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e074      	b.n	8006af6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2284      	movs	r2, #132	@ 0x84
 8006a10:	2100      	movs	r1, #0
 8006a12:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2221      	movs	r2, #33	@ 0x21
 8006a18:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a1a:	f7fd ff51 	bl	80048c0 <HAL_GetTick>
 8006a1e:	0003      	movs	r3, r0
 8006a20:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	1dba      	adds	r2, r7, #6
 8006a26:	2150      	movs	r1, #80	@ 0x50
 8006a28:	8812      	ldrh	r2, [r2, #0]
 8006a2a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	1dba      	adds	r2, r7, #6
 8006a30:	2152      	movs	r1, #82	@ 0x52
 8006a32:	8812      	ldrh	r2, [r2, #0]
 8006a34:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	689a      	ldr	r2, [r3, #8]
 8006a3a:	2380      	movs	r3, #128	@ 0x80
 8006a3c:	015b      	lsls	r3, r3, #5
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d108      	bne.n	8006a54 <HAL_UART_Transmit+0x94>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d104      	bne.n	8006a54 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	61bb      	str	r3, [r7, #24]
 8006a52:	e003      	b.n	8006a5c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006a5c:	e02f      	b.n	8006abe <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	0013      	movs	r3, r2
 8006a68:	2200      	movs	r2, #0
 8006a6a:	2180      	movs	r1, #128	@ 0x80
 8006a6c:	f000 fc42 	bl	80072f4 <UART_WaitOnFlagUntilTimeout>
 8006a70:	1e03      	subs	r3, r0, #0
 8006a72:	d004      	beq.n	8006a7e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2220      	movs	r2, #32
 8006a78:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e03b      	b.n	8006af6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d10b      	bne.n	8006a9c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	881b      	ldrh	r3, [r3, #0]
 8006a88:	001a      	movs	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	05d2      	lsls	r2, r2, #23
 8006a90:	0dd2      	lsrs	r2, r2, #23
 8006a92:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	3302      	adds	r3, #2
 8006a98:	61bb      	str	r3, [r7, #24]
 8006a9a:	e007      	b.n	8006aac <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	781a      	ldrb	r2, [r3, #0]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2252      	movs	r2, #82	@ 0x52
 8006ab0:	5a9b      	ldrh	r3, [r3, r2]
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	b299      	uxth	r1, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2252      	movs	r2, #82	@ 0x52
 8006abc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2252      	movs	r2, #82	@ 0x52
 8006ac2:	5a9b      	ldrh	r3, [r3, r2]
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1c9      	bne.n	8006a5e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	9300      	str	r3, [sp, #0]
 8006ad2:	0013      	movs	r3, r2
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	2140      	movs	r1, #64	@ 0x40
 8006ad8:	f000 fc0c 	bl	80072f4 <UART_WaitOnFlagUntilTimeout>
 8006adc:	1e03      	subs	r3, r0, #0
 8006ade:	d004      	beq.n	8006aea <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e005      	b.n	8006af6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2220      	movs	r2, #32
 8006aee:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006af0:	2300      	movs	r3, #0
 8006af2:	e000      	b.n	8006af6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8006af4:	2302      	movs	r3, #2
  }
}
 8006af6:	0018      	movs	r0, r3
 8006af8:	46bd      	mov	sp, r7
 8006afa:	b008      	add	sp, #32
 8006afc:	bd80      	pop	{r7, pc}
	...

08006b00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b00:	b5b0      	push	{r4, r5, r7, lr}
 8006b02:	b08e      	sub	sp, #56	@ 0x38
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b08:	231a      	movs	r3, #26
 8006b0a:	2218      	movs	r2, #24
 8006b0c:	189b      	adds	r3, r3, r2
 8006b0e:	19db      	adds	r3, r3, r7
 8006b10:	2200      	movs	r2, #0
 8006b12:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	689a      	ldr	r2, [r3, #8]
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	431a      	orrs	r2, r3
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	431a      	orrs	r2, r3
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	69db      	ldr	r3, [r3, #28]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4ac3      	ldr	r2, [pc, #780]	@ (8006e40 <UART_SetConfig+0x340>)
 8006b34:	4013      	ands	r3, r2
 8006b36:	0019      	movs	r1, r3
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	4abe      	ldr	r2, [pc, #760]	@ (8006e44 <UART_SetConfig+0x344>)
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	0019      	movs	r1, r3
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	68da      	ldr	r2, [r3, #12]
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	430a      	orrs	r2, r1
 8006b58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4ab8      	ldr	r2, [pc, #736]	@ (8006e48 <UART_SetConfig+0x348>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d004      	beq.n	8006b74 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b70:	4313      	orrs	r3, r2
 8006b72:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	4ab4      	ldr	r2, [pc, #720]	@ (8006e4c <UART_SetConfig+0x34c>)
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	0019      	movs	r1, r3
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b86:	430a      	orrs	r2, r1
 8006b88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4ab0      	ldr	r2, [pc, #704]	@ (8006e50 <UART_SetConfig+0x350>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d131      	bne.n	8006bf8 <UART_SetConfig+0xf8>
 8006b94:	4baf      	ldr	r3, [pc, #700]	@ (8006e54 <UART_SetConfig+0x354>)
 8006b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b98:	2203      	movs	r2, #3
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	2b03      	cmp	r3, #3
 8006b9e:	d01d      	beq.n	8006bdc <UART_SetConfig+0xdc>
 8006ba0:	d823      	bhi.n	8006bea <UART_SetConfig+0xea>
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d00c      	beq.n	8006bc0 <UART_SetConfig+0xc0>
 8006ba6:	d820      	bhi.n	8006bea <UART_SetConfig+0xea>
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d002      	beq.n	8006bb2 <UART_SetConfig+0xb2>
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d00e      	beq.n	8006bce <UART_SetConfig+0xce>
 8006bb0:	e01b      	b.n	8006bea <UART_SetConfig+0xea>
 8006bb2:	231b      	movs	r3, #27
 8006bb4:	2218      	movs	r2, #24
 8006bb6:	189b      	adds	r3, r3, r2
 8006bb8:	19db      	adds	r3, r3, r7
 8006bba:	2201      	movs	r2, #1
 8006bbc:	701a      	strb	r2, [r3, #0]
 8006bbe:	e0b4      	b.n	8006d2a <UART_SetConfig+0x22a>
 8006bc0:	231b      	movs	r3, #27
 8006bc2:	2218      	movs	r2, #24
 8006bc4:	189b      	adds	r3, r3, r2
 8006bc6:	19db      	adds	r3, r3, r7
 8006bc8:	2202      	movs	r2, #2
 8006bca:	701a      	strb	r2, [r3, #0]
 8006bcc:	e0ad      	b.n	8006d2a <UART_SetConfig+0x22a>
 8006bce:	231b      	movs	r3, #27
 8006bd0:	2218      	movs	r2, #24
 8006bd2:	189b      	adds	r3, r3, r2
 8006bd4:	19db      	adds	r3, r3, r7
 8006bd6:	2204      	movs	r2, #4
 8006bd8:	701a      	strb	r2, [r3, #0]
 8006bda:	e0a6      	b.n	8006d2a <UART_SetConfig+0x22a>
 8006bdc:	231b      	movs	r3, #27
 8006bde:	2218      	movs	r2, #24
 8006be0:	189b      	adds	r3, r3, r2
 8006be2:	19db      	adds	r3, r3, r7
 8006be4:	2208      	movs	r2, #8
 8006be6:	701a      	strb	r2, [r3, #0]
 8006be8:	e09f      	b.n	8006d2a <UART_SetConfig+0x22a>
 8006bea:	231b      	movs	r3, #27
 8006bec:	2218      	movs	r2, #24
 8006bee:	189b      	adds	r3, r3, r2
 8006bf0:	19db      	adds	r3, r3, r7
 8006bf2:	2210      	movs	r2, #16
 8006bf4:	701a      	strb	r2, [r3, #0]
 8006bf6:	e098      	b.n	8006d2a <UART_SetConfig+0x22a>
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a96      	ldr	r2, [pc, #600]	@ (8006e58 <UART_SetConfig+0x358>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d131      	bne.n	8006c66 <UART_SetConfig+0x166>
 8006c02:	4b94      	ldr	r3, [pc, #592]	@ (8006e54 <UART_SetConfig+0x354>)
 8006c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c06:	220c      	movs	r2, #12
 8006c08:	4013      	ands	r3, r2
 8006c0a:	2b0c      	cmp	r3, #12
 8006c0c:	d01d      	beq.n	8006c4a <UART_SetConfig+0x14a>
 8006c0e:	d823      	bhi.n	8006c58 <UART_SetConfig+0x158>
 8006c10:	2b08      	cmp	r3, #8
 8006c12:	d00c      	beq.n	8006c2e <UART_SetConfig+0x12e>
 8006c14:	d820      	bhi.n	8006c58 <UART_SetConfig+0x158>
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d002      	beq.n	8006c20 <UART_SetConfig+0x120>
 8006c1a:	2b04      	cmp	r3, #4
 8006c1c:	d00e      	beq.n	8006c3c <UART_SetConfig+0x13c>
 8006c1e:	e01b      	b.n	8006c58 <UART_SetConfig+0x158>
 8006c20:	231b      	movs	r3, #27
 8006c22:	2218      	movs	r2, #24
 8006c24:	189b      	adds	r3, r3, r2
 8006c26:	19db      	adds	r3, r3, r7
 8006c28:	2200      	movs	r2, #0
 8006c2a:	701a      	strb	r2, [r3, #0]
 8006c2c:	e07d      	b.n	8006d2a <UART_SetConfig+0x22a>
 8006c2e:	231b      	movs	r3, #27
 8006c30:	2218      	movs	r2, #24
 8006c32:	189b      	adds	r3, r3, r2
 8006c34:	19db      	adds	r3, r3, r7
 8006c36:	2202      	movs	r2, #2
 8006c38:	701a      	strb	r2, [r3, #0]
 8006c3a:	e076      	b.n	8006d2a <UART_SetConfig+0x22a>
 8006c3c:	231b      	movs	r3, #27
 8006c3e:	2218      	movs	r2, #24
 8006c40:	189b      	adds	r3, r3, r2
 8006c42:	19db      	adds	r3, r3, r7
 8006c44:	2204      	movs	r2, #4
 8006c46:	701a      	strb	r2, [r3, #0]
 8006c48:	e06f      	b.n	8006d2a <UART_SetConfig+0x22a>
 8006c4a:	231b      	movs	r3, #27
 8006c4c:	2218      	movs	r2, #24
 8006c4e:	189b      	adds	r3, r3, r2
 8006c50:	19db      	adds	r3, r3, r7
 8006c52:	2208      	movs	r2, #8
 8006c54:	701a      	strb	r2, [r3, #0]
 8006c56:	e068      	b.n	8006d2a <UART_SetConfig+0x22a>
 8006c58:	231b      	movs	r3, #27
 8006c5a:	2218      	movs	r2, #24
 8006c5c:	189b      	adds	r3, r3, r2
 8006c5e:	19db      	adds	r3, r3, r7
 8006c60:	2210      	movs	r2, #16
 8006c62:	701a      	strb	r2, [r3, #0]
 8006c64:	e061      	b.n	8006d2a <UART_SetConfig+0x22a>
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a7c      	ldr	r2, [pc, #496]	@ (8006e5c <UART_SetConfig+0x35c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d106      	bne.n	8006c7e <UART_SetConfig+0x17e>
 8006c70:	231b      	movs	r3, #27
 8006c72:	2218      	movs	r2, #24
 8006c74:	189b      	adds	r3, r3, r2
 8006c76:	19db      	adds	r3, r3, r7
 8006c78:	2200      	movs	r2, #0
 8006c7a:	701a      	strb	r2, [r3, #0]
 8006c7c:	e055      	b.n	8006d2a <UART_SetConfig+0x22a>
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a77      	ldr	r2, [pc, #476]	@ (8006e60 <UART_SetConfig+0x360>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d106      	bne.n	8006c96 <UART_SetConfig+0x196>
 8006c88:	231b      	movs	r3, #27
 8006c8a:	2218      	movs	r2, #24
 8006c8c:	189b      	adds	r3, r3, r2
 8006c8e:	19db      	adds	r3, r3, r7
 8006c90:	2200      	movs	r2, #0
 8006c92:	701a      	strb	r2, [r3, #0]
 8006c94:	e049      	b.n	8006d2a <UART_SetConfig+0x22a>
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a6b      	ldr	r2, [pc, #428]	@ (8006e48 <UART_SetConfig+0x348>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d13e      	bne.n	8006d1e <UART_SetConfig+0x21e>
 8006ca0:	4b6c      	ldr	r3, [pc, #432]	@ (8006e54 <UART_SetConfig+0x354>)
 8006ca2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ca4:	23c0      	movs	r3, #192	@ 0xc0
 8006ca6:	011b      	lsls	r3, r3, #4
 8006ca8:	4013      	ands	r3, r2
 8006caa:	22c0      	movs	r2, #192	@ 0xc0
 8006cac:	0112      	lsls	r2, r2, #4
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d027      	beq.n	8006d02 <UART_SetConfig+0x202>
 8006cb2:	22c0      	movs	r2, #192	@ 0xc0
 8006cb4:	0112      	lsls	r2, r2, #4
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d82a      	bhi.n	8006d10 <UART_SetConfig+0x210>
 8006cba:	2280      	movs	r2, #128	@ 0x80
 8006cbc:	0112      	lsls	r2, r2, #4
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d011      	beq.n	8006ce6 <UART_SetConfig+0x1e6>
 8006cc2:	2280      	movs	r2, #128	@ 0x80
 8006cc4:	0112      	lsls	r2, r2, #4
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d822      	bhi.n	8006d10 <UART_SetConfig+0x210>
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d004      	beq.n	8006cd8 <UART_SetConfig+0x1d8>
 8006cce:	2280      	movs	r2, #128	@ 0x80
 8006cd0:	00d2      	lsls	r2, r2, #3
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d00e      	beq.n	8006cf4 <UART_SetConfig+0x1f4>
 8006cd6:	e01b      	b.n	8006d10 <UART_SetConfig+0x210>
 8006cd8:	231b      	movs	r3, #27
 8006cda:	2218      	movs	r2, #24
 8006cdc:	189b      	adds	r3, r3, r2
 8006cde:	19db      	adds	r3, r3, r7
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	701a      	strb	r2, [r3, #0]
 8006ce4:	e021      	b.n	8006d2a <UART_SetConfig+0x22a>
 8006ce6:	231b      	movs	r3, #27
 8006ce8:	2218      	movs	r2, #24
 8006cea:	189b      	adds	r3, r3, r2
 8006cec:	19db      	adds	r3, r3, r7
 8006cee:	2202      	movs	r2, #2
 8006cf0:	701a      	strb	r2, [r3, #0]
 8006cf2:	e01a      	b.n	8006d2a <UART_SetConfig+0x22a>
 8006cf4:	231b      	movs	r3, #27
 8006cf6:	2218      	movs	r2, #24
 8006cf8:	189b      	adds	r3, r3, r2
 8006cfa:	19db      	adds	r3, r3, r7
 8006cfc:	2204      	movs	r2, #4
 8006cfe:	701a      	strb	r2, [r3, #0]
 8006d00:	e013      	b.n	8006d2a <UART_SetConfig+0x22a>
 8006d02:	231b      	movs	r3, #27
 8006d04:	2218      	movs	r2, #24
 8006d06:	189b      	adds	r3, r3, r2
 8006d08:	19db      	adds	r3, r3, r7
 8006d0a:	2208      	movs	r2, #8
 8006d0c:	701a      	strb	r2, [r3, #0]
 8006d0e:	e00c      	b.n	8006d2a <UART_SetConfig+0x22a>
 8006d10:	231b      	movs	r3, #27
 8006d12:	2218      	movs	r2, #24
 8006d14:	189b      	adds	r3, r3, r2
 8006d16:	19db      	adds	r3, r3, r7
 8006d18:	2210      	movs	r2, #16
 8006d1a:	701a      	strb	r2, [r3, #0]
 8006d1c:	e005      	b.n	8006d2a <UART_SetConfig+0x22a>
 8006d1e:	231b      	movs	r3, #27
 8006d20:	2218      	movs	r2, #24
 8006d22:	189b      	adds	r3, r3, r2
 8006d24:	19db      	adds	r3, r3, r7
 8006d26:	2210      	movs	r2, #16
 8006d28:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a46      	ldr	r2, [pc, #280]	@ (8006e48 <UART_SetConfig+0x348>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d000      	beq.n	8006d36 <UART_SetConfig+0x236>
 8006d34:	e09a      	b.n	8006e6c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d36:	231b      	movs	r3, #27
 8006d38:	2218      	movs	r2, #24
 8006d3a:	189b      	adds	r3, r3, r2
 8006d3c:	19db      	adds	r3, r3, r7
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	2b08      	cmp	r3, #8
 8006d42:	d01d      	beq.n	8006d80 <UART_SetConfig+0x280>
 8006d44:	dc20      	bgt.n	8006d88 <UART_SetConfig+0x288>
 8006d46:	2b04      	cmp	r3, #4
 8006d48:	d015      	beq.n	8006d76 <UART_SetConfig+0x276>
 8006d4a:	dc1d      	bgt.n	8006d88 <UART_SetConfig+0x288>
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d002      	beq.n	8006d56 <UART_SetConfig+0x256>
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d005      	beq.n	8006d60 <UART_SetConfig+0x260>
 8006d54:	e018      	b.n	8006d88 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d56:	f7ff fc15 	bl	8006584 <HAL_RCC_GetPCLK1Freq>
 8006d5a:	0003      	movs	r3, r0
 8006d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006d5e:	e01c      	b.n	8006d9a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d60:	4b3c      	ldr	r3, [pc, #240]	@ (8006e54 <UART_SetConfig+0x354>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2210      	movs	r2, #16
 8006d66:	4013      	ands	r3, r2
 8006d68:	d002      	beq.n	8006d70 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006d6a:	4b3e      	ldr	r3, [pc, #248]	@ (8006e64 <UART_SetConfig+0x364>)
 8006d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d6e:	e014      	b.n	8006d9a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8006d70:	4b3d      	ldr	r3, [pc, #244]	@ (8006e68 <UART_SetConfig+0x368>)
 8006d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006d74:	e011      	b.n	8006d9a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d76:	f7ff fb55 	bl	8006424 <HAL_RCC_GetSysClockFreq>
 8006d7a:	0003      	movs	r3, r0
 8006d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006d7e:	e00c      	b.n	8006d9a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d80:	2380      	movs	r3, #128	@ 0x80
 8006d82:	021b      	lsls	r3, r3, #8
 8006d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006d86:	e008      	b.n	8006d9a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8006d8c:	231a      	movs	r3, #26
 8006d8e:	2218      	movs	r2, #24
 8006d90:	189b      	adds	r3, r3, r2
 8006d92:	19db      	adds	r3, r3, r7
 8006d94:	2201      	movs	r2, #1
 8006d96:	701a      	strb	r2, [r3, #0]
        break;
 8006d98:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d100      	bne.n	8006da2 <UART_SetConfig+0x2a2>
 8006da0:	e133      	b.n	800700a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	0013      	movs	r3, r2
 8006da8:	005b      	lsls	r3, r3, #1
 8006daa:	189b      	adds	r3, r3, r2
 8006dac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d305      	bcc.n	8006dbe <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006db8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d906      	bls.n	8006dcc <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8006dbe:	231a      	movs	r3, #26
 8006dc0:	2218      	movs	r2, #24
 8006dc2:	189b      	adds	r3, r3, r2
 8006dc4:	19db      	adds	r3, r3, r7
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	701a      	strb	r2, [r3, #0]
 8006dca:	e11e      	b.n	800700a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dce:	613b      	str	r3, [r7, #16]
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	617b      	str	r3, [r7, #20]
 8006dd4:	6939      	ldr	r1, [r7, #16]
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	000b      	movs	r3, r1
 8006dda:	0e1b      	lsrs	r3, r3, #24
 8006ddc:	0010      	movs	r0, r2
 8006dde:	0205      	lsls	r5, r0, #8
 8006de0:	431d      	orrs	r5, r3
 8006de2:	000b      	movs	r3, r1
 8006de4:	021c      	lsls	r4, r3, #8
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	085b      	lsrs	r3, r3, #1
 8006dec:	60bb      	str	r3, [r7, #8]
 8006dee:	2300      	movs	r3, #0
 8006df0:	60fb      	str	r3, [r7, #12]
 8006df2:	68b8      	ldr	r0, [r7, #8]
 8006df4:	68f9      	ldr	r1, [r7, #12]
 8006df6:	1900      	adds	r0, r0, r4
 8006df8:	4169      	adcs	r1, r5
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	603b      	str	r3, [r7, #0]
 8006e00:	2300      	movs	r3, #0
 8006e02:	607b      	str	r3, [r7, #4]
 8006e04:	683a      	ldr	r2, [r7, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f7f9 fb88 	bl	800051c <__aeabi_uldivmod>
 8006e0c:	0002      	movs	r2, r0
 8006e0e:	000b      	movs	r3, r1
 8006e10:	0013      	movs	r3, r2
 8006e12:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e16:	23c0      	movs	r3, #192	@ 0xc0
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d309      	bcc.n	8006e32 <UART_SetConfig+0x332>
 8006e1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e20:	2380      	movs	r3, #128	@ 0x80
 8006e22:	035b      	lsls	r3, r3, #13
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d204      	bcs.n	8006e32 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e2e:	60da      	str	r2, [r3, #12]
 8006e30:	e0eb      	b.n	800700a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8006e32:	231a      	movs	r3, #26
 8006e34:	2218      	movs	r2, #24
 8006e36:	189b      	adds	r3, r3, r2
 8006e38:	19db      	adds	r3, r3, r7
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	701a      	strb	r2, [r3, #0]
 8006e3e:	e0e4      	b.n	800700a <UART_SetConfig+0x50a>
 8006e40:	efff69f3 	.word	0xefff69f3
 8006e44:	ffffcfff 	.word	0xffffcfff
 8006e48:	40004800 	.word	0x40004800
 8006e4c:	fffff4ff 	.word	0xfffff4ff
 8006e50:	40013800 	.word	0x40013800
 8006e54:	40021000 	.word	0x40021000
 8006e58:	40004400 	.word	0x40004400
 8006e5c:	40004c00 	.word	0x40004c00
 8006e60:	40005000 	.word	0x40005000
 8006e64:	003d0900 	.word	0x003d0900
 8006e68:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	69da      	ldr	r2, [r3, #28]
 8006e70:	2380      	movs	r3, #128	@ 0x80
 8006e72:	021b      	lsls	r3, r3, #8
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d000      	beq.n	8006e7a <UART_SetConfig+0x37a>
 8006e78:	e070      	b.n	8006f5c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8006e7a:	231b      	movs	r3, #27
 8006e7c:	2218      	movs	r2, #24
 8006e7e:	189b      	adds	r3, r3, r2
 8006e80:	19db      	adds	r3, r3, r7
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	2b08      	cmp	r3, #8
 8006e86:	d822      	bhi.n	8006ece <UART_SetConfig+0x3ce>
 8006e88:	009a      	lsls	r2, r3, #2
 8006e8a:	4b67      	ldr	r3, [pc, #412]	@ (8007028 <UART_SetConfig+0x528>)
 8006e8c:	18d3      	adds	r3, r2, r3
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e92:	f7ff fb77 	bl	8006584 <HAL_RCC_GetPCLK1Freq>
 8006e96:	0003      	movs	r3, r0
 8006e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006e9a:	e021      	b.n	8006ee0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e9c:	f7ff fb88 	bl	80065b0 <HAL_RCC_GetPCLK2Freq>
 8006ea0:	0003      	movs	r3, r0
 8006ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006ea4:	e01c      	b.n	8006ee0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ea6:	4b61      	ldr	r3, [pc, #388]	@ (800702c <UART_SetConfig+0x52c>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2210      	movs	r2, #16
 8006eac:	4013      	ands	r3, r2
 8006eae:	d002      	beq.n	8006eb6 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006eb0:	4b5f      	ldr	r3, [pc, #380]	@ (8007030 <UART_SetConfig+0x530>)
 8006eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006eb4:	e014      	b.n	8006ee0 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8006eb6:	4b5f      	ldr	r3, [pc, #380]	@ (8007034 <UART_SetConfig+0x534>)
 8006eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006eba:	e011      	b.n	8006ee0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ebc:	f7ff fab2 	bl	8006424 <HAL_RCC_GetSysClockFreq>
 8006ec0:	0003      	movs	r3, r0
 8006ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006ec4:	e00c      	b.n	8006ee0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ec6:	2380      	movs	r3, #128	@ 0x80
 8006ec8:	021b      	lsls	r3, r3, #8
 8006eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006ecc:	e008      	b.n	8006ee0 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8006ed2:	231a      	movs	r3, #26
 8006ed4:	2218      	movs	r2, #24
 8006ed6:	189b      	adds	r3, r3, r2
 8006ed8:	19db      	adds	r3, r3, r7
 8006eda:	2201      	movs	r2, #1
 8006edc:	701a      	strb	r2, [r3, #0]
        break;
 8006ede:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d100      	bne.n	8006ee8 <UART_SetConfig+0x3e8>
 8006ee6:	e090      	b.n	800700a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eea:	005a      	lsls	r2, r3, #1
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	085b      	lsrs	r3, r3, #1
 8006ef2:	18d2      	adds	r2, r2, r3
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	0019      	movs	r1, r3
 8006efa:	0010      	movs	r0, r2
 8006efc:	f7f9 f920 	bl	8000140 <__udivsi3>
 8006f00:	0003      	movs	r3, r0
 8006f02:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f06:	2b0f      	cmp	r3, #15
 8006f08:	d921      	bls.n	8006f4e <UART_SetConfig+0x44e>
 8006f0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f0c:	2380      	movs	r3, #128	@ 0x80
 8006f0e:	025b      	lsls	r3, r3, #9
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d21c      	bcs.n	8006f4e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	200e      	movs	r0, #14
 8006f1a:	2418      	movs	r4, #24
 8006f1c:	1903      	adds	r3, r0, r4
 8006f1e:	19db      	adds	r3, r3, r7
 8006f20:	210f      	movs	r1, #15
 8006f22:	438a      	bics	r2, r1
 8006f24:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f28:	085b      	lsrs	r3, r3, #1
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	2207      	movs	r2, #7
 8006f2e:	4013      	ands	r3, r2
 8006f30:	b299      	uxth	r1, r3
 8006f32:	1903      	adds	r3, r0, r4
 8006f34:	19db      	adds	r3, r3, r7
 8006f36:	1902      	adds	r2, r0, r4
 8006f38:	19d2      	adds	r2, r2, r7
 8006f3a:	8812      	ldrh	r2, [r2, #0]
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	1902      	adds	r2, r0, r4
 8006f46:	19d2      	adds	r2, r2, r7
 8006f48:	8812      	ldrh	r2, [r2, #0]
 8006f4a:	60da      	str	r2, [r3, #12]
 8006f4c:	e05d      	b.n	800700a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8006f4e:	231a      	movs	r3, #26
 8006f50:	2218      	movs	r2, #24
 8006f52:	189b      	adds	r3, r3, r2
 8006f54:	19db      	adds	r3, r3, r7
 8006f56:	2201      	movs	r2, #1
 8006f58:	701a      	strb	r2, [r3, #0]
 8006f5a:	e056      	b.n	800700a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f5c:	231b      	movs	r3, #27
 8006f5e:	2218      	movs	r2, #24
 8006f60:	189b      	adds	r3, r3, r2
 8006f62:	19db      	adds	r3, r3, r7
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	2b08      	cmp	r3, #8
 8006f68:	d822      	bhi.n	8006fb0 <UART_SetConfig+0x4b0>
 8006f6a:	009a      	lsls	r2, r3, #2
 8006f6c:	4b32      	ldr	r3, [pc, #200]	@ (8007038 <UART_SetConfig+0x538>)
 8006f6e:	18d3      	adds	r3, r2, r3
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f74:	f7ff fb06 	bl	8006584 <HAL_RCC_GetPCLK1Freq>
 8006f78:	0003      	movs	r3, r0
 8006f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006f7c:	e021      	b.n	8006fc2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f7e:	f7ff fb17 	bl	80065b0 <HAL_RCC_GetPCLK2Freq>
 8006f82:	0003      	movs	r3, r0
 8006f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006f86:	e01c      	b.n	8006fc2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f88:	4b28      	ldr	r3, [pc, #160]	@ (800702c <UART_SetConfig+0x52c>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2210      	movs	r2, #16
 8006f8e:	4013      	ands	r3, r2
 8006f90:	d002      	beq.n	8006f98 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006f92:	4b27      	ldr	r3, [pc, #156]	@ (8007030 <UART_SetConfig+0x530>)
 8006f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006f96:	e014      	b.n	8006fc2 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8006f98:	4b26      	ldr	r3, [pc, #152]	@ (8007034 <UART_SetConfig+0x534>)
 8006f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006f9c:	e011      	b.n	8006fc2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f9e:	f7ff fa41 	bl	8006424 <HAL_RCC_GetSysClockFreq>
 8006fa2:	0003      	movs	r3, r0
 8006fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006fa6:	e00c      	b.n	8006fc2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fa8:	2380      	movs	r3, #128	@ 0x80
 8006faa:	021b      	lsls	r3, r3, #8
 8006fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006fae:	e008      	b.n	8006fc2 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8006fb4:	231a      	movs	r3, #26
 8006fb6:	2218      	movs	r2, #24
 8006fb8:	189b      	adds	r3, r3, r2
 8006fba:	19db      	adds	r3, r3, r7
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	701a      	strb	r2, [r3, #0]
        break;
 8006fc0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d020      	beq.n	800700a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	085a      	lsrs	r2, r3, #1
 8006fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fd0:	18d2      	adds	r2, r2, r3
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	0019      	movs	r1, r3
 8006fd8:	0010      	movs	r0, r2
 8006fda:	f7f9 f8b1 	bl	8000140 <__udivsi3>
 8006fde:	0003      	movs	r3, r0
 8006fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe4:	2b0f      	cmp	r3, #15
 8006fe6:	d90a      	bls.n	8006ffe <UART_SetConfig+0x4fe>
 8006fe8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006fea:	2380      	movs	r3, #128	@ 0x80
 8006fec:	025b      	lsls	r3, r3, #9
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d205      	bcs.n	8006ffe <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	60da      	str	r2, [r3, #12]
 8006ffc:	e005      	b.n	800700a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8006ffe:	231a      	movs	r3, #26
 8007000:	2218      	movs	r2, #24
 8007002:	189b      	adds	r3, r3, r2
 8007004:	19db      	adds	r3, r3, r7
 8007006:	2201      	movs	r2, #1
 8007008:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	2200      	movs	r2, #0
 800700e:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	2200      	movs	r2, #0
 8007014:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007016:	231a      	movs	r3, #26
 8007018:	2218      	movs	r2, #24
 800701a:	189b      	adds	r3, r3, r2
 800701c:	19db      	adds	r3, r3, r7
 800701e:	781b      	ldrb	r3, [r3, #0]
}
 8007020:	0018      	movs	r0, r3
 8007022:	46bd      	mov	sp, r7
 8007024:	b00e      	add	sp, #56	@ 0x38
 8007026:	bdb0      	pop	{r4, r5, r7, pc}
 8007028:	0800c370 	.word	0x0800c370
 800702c:	40021000 	.word	0x40021000
 8007030:	003d0900 	.word	0x003d0900
 8007034:	00f42400 	.word	0x00f42400
 8007038:	0800c394 	.word	0x0800c394

0800703c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007048:	2201      	movs	r2, #1
 800704a:	4013      	ands	r3, r2
 800704c:	d00b      	beq.n	8007066 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	4a4a      	ldr	r2, [pc, #296]	@ (8007180 <UART_AdvFeatureConfig+0x144>)
 8007056:	4013      	ands	r3, r2
 8007058:	0019      	movs	r1, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	430a      	orrs	r2, r1
 8007064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800706a:	2202      	movs	r2, #2
 800706c:	4013      	ands	r3, r2
 800706e:	d00b      	beq.n	8007088 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	4a43      	ldr	r2, [pc, #268]	@ (8007184 <UART_AdvFeatureConfig+0x148>)
 8007078:	4013      	ands	r3, r2
 800707a:	0019      	movs	r1, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	430a      	orrs	r2, r1
 8007086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800708c:	2204      	movs	r2, #4
 800708e:	4013      	ands	r3, r2
 8007090:	d00b      	beq.n	80070aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	4a3b      	ldr	r2, [pc, #236]	@ (8007188 <UART_AdvFeatureConfig+0x14c>)
 800709a:	4013      	ands	r3, r2
 800709c:	0019      	movs	r1, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	430a      	orrs	r2, r1
 80070a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ae:	2208      	movs	r2, #8
 80070b0:	4013      	ands	r3, r2
 80070b2:	d00b      	beq.n	80070cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	4a34      	ldr	r2, [pc, #208]	@ (800718c <UART_AdvFeatureConfig+0x150>)
 80070bc:	4013      	ands	r3, r2
 80070be:	0019      	movs	r1, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	430a      	orrs	r2, r1
 80070ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d0:	2210      	movs	r2, #16
 80070d2:	4013      	ands	r3, r2
 80070d4:	d00b      	beq.n	80070ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	4a2c      	ldr	r2, [pc, #176]	@ (8007190 <UART_AdvFeatureConfig+0x154>)
 80070de:	4013      	ands	r3, r2
 80070e0:	0019      	movs	r1, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	430a      	orrs	r2, r1
 80070ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f2:	2220      	movs	r2, #32
 80070f4:	4013      	ands	r3, r2
 80070f6:	d00b      	beq.n	8007110 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	4a25      	ldr	r2, [pc, #148]	@ (8007194 <UART_AdvFeatureConfig+0x158>)
 8007100:	4013      	ands	r3, r2
 8007102:	0019      	movs	r1, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	430a      	orrs	r2, r1
 800710e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007114:	2240      	movs	r2, #64	@ 0x40
 8007116:	4013      	ands	r3, r2
 8007118:	d01d      	beq.n	8007156 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	4a1d      	ldr	r2, [pc, #116]	@ (8007198 <UART_AdvFeatureConfig+0x15c>)
 8007122:	4013      	ands	r3, r2
 8007124:	0019      	movs	r1, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	430a      	orrs	r2, r1
 8007130:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007136:	2380      	movs	r3, #128	@ 0x80
 8007138:	035b      	lsls	r3, r3, #13
 800713a:	429a      	cmp	r2, r3
 800713c:	d10b      	bne.n	8007156 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	4a15      	ldr	r2, [pc, #84]	@ (800719c <UART_AdvFeatureConfig+0x160>)
 8007146:	4013      	ands	r3, r2
 8007148:	0019      	movs	r1, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	430a      	orrs	r2, r1
 8007154:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800715a:	2280      	movs	r2, #128	@ 0x80
 800715c:	4013      	ands	r3, r2
 800715e:	d00b      	beq.n	8007178 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	4a0e      	ldr	r2, [pc, #56]	@ (80071a0 <UART_AdvFeatureConfig+0x164>)
 8007168:	4013      	ands	r3, r2
 800716a:	0019      	movs	r1, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	430a      	orrs	r2, r1
 8007176:	605a      	str	r2, [r3, #4]
  }
}
 8007178:	46c0      	nop			@ (mov r8, r8)
 800717a:	46bd      	mov	sp, r7
 800717c:	b002      	add	sp, #8
 800717e:	bd80      	pop	{r7, pc}
 8007180:	fffdffff 	.word	0xfffdffff
 8007184:	fffeffff 	.word	0xfffeffff
 8007188:	fffbffff 	.word	0xfffbffff
 800718c:	ffff7fff 	.word	0xffff7fff
 8007190:	ffffefff 	.word	0xffffefff
 8007194:	ffffdfff 	.word	0xffffdfff
 8007198:	ffefffff 	.word	0xffefffff
 800719c:	ff9fffff 	.word	0xff9fffff
 80071a0:	fff7ffff 	.word	0xfff7ffff

080071a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b092      	sub	sp, #72	@ 0x48
 80071a8:	af02      	add	r7, sp, #8
 80071aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2284      	movs	r2, #132	@ 0x84
 80071b0:	2100      	movs	r1, #0
 80071b2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071b4:	f7fd fb84 	bl	80048c0 <HAL_GetTick>
 80071b8:	0003      	movs	r3, r0
 80071ba:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2208      	movs	r2, #8
 80071c4:	4013      	ands	r3, r2
 80071c6:	2b08      	cmp	r3, #8
 80071c8:	d12c      	bne.n	8007224 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071cc:	2280      	movs	r2, #128	@ 0x80
 80071ce:	0391      	lsls	r1, r2, #14
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	4a46      	ldr	r2, [pc, #280]	@ (80072ec <UART_CheckIdleState+0x148>)
 80071d4:	9200      	str	r2, [sp, #0]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f000 f88c 	bl	80072f4 <UART_WaitOnFlagUntilTimeout>
 80071dc:	1e03      	subs	r3, r0, #0
 80071de:	d021      	beq.n	8007224 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071e0:	f3ef 8310 	mrs	r3, PRIMASK
 80071e4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80071e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80071e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80071ea:	2301      	movs	r3, #1
 80071ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f0:	f383 8810 	msr	PRIMASK, r3
}
 80071f4:	46c0      	nop			@ (mov r8, r8)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2180      	movs	r1, #128	@ 0x80
 8007202:	438a      	bics	r2, r1
 8007204:	601a      	str	r2, [r3, #0]
 8007206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007208:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800720a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800720c:	f383 8810 	msr	PRIMASK, r3
}
 8007210:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2220      	movs	r2, #32
 8007216:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2278      	movs	r2, #120	@ 0x78
 800721c:	2100      	movs	r1, #0
 800721e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007220:	2303      	movs	r3, #3
 8007222:	e05f      	b.n	80072e4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2204      	movs	r2, #4
 800722c:	4013      	ands	r3, r2
 800722e:	2b04      	cmp	r3, #4
 8007230:	d146      	bne.n	80072c0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007232:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007234:	2280      	movs	r2, #128	@ 0x80
 8007236:	03d1      	lsls	r1, r2, #15
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	4a2c      	ldr	r2, [pc, #176]	@ (80072ec <UART_CheckIdleState+0x148>)
 800723c:	9200      	str	r2, [sp, #0]
 800723e:	2200      	movs	r2, #0
 8007240:	f000 f858 	bl	80072f4 <UART_WaitOnFlagUntilTimeout>
 8007244:	1e03      	subs	r3, r0, #0
 8007246:	d03b      	beq.n	80072c0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007248:	f3ef 8310 	mrs	r3, PRIMASK
 800724c:	60fb      	str	r3, [r7, #12]
  return(result);
 800724e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007250:	637b      	str	r3, [r7, #52]	@ 0x34
 8007252:	2301      	movs	r3, #1
 8007254:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	f383 8810 	msr	PRIMASK, r3
}
 800725c:	46c0      	nop			@ (mov r8, r8)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4921      	ldr	r1, [pc, #132]	@ (80072f0 <UART_CheckIdleState+0x14c>)
 800726a:	400a      	ands	r2, r1
 800726c:	601a      	str	r2, [r3, #0]
 800726e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007270:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f383 8810 	msr	PRIMASK, r3
}
 8007278:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800727a:	f3ef 8310 	mrs	r3, PRIMASK
 800727e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007280:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007282:	633b      	str	r3, [r7, #48]	@ 0x30
 8007284:	2301      	movs	r3, #1
 8007286:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	f383 8810 	msr	PRIMASK, r3
}
 800728e:	46c0      	nop			@ (mov r8, r8)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	689a      	ldr	r2, [r3, #8]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2101      	movs	r1, #1
 800729c:	438a      	bics	r2, r1
 800729e:	609a      	str	r2, [r3, #8]
 80072a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072a4:	6a3b      	ldr	r3, [r7, #32]
 80072a6:	f383 8810 	msr	PRIMASK, r3
}
 80072aa:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2280      	movs	r2, #128	@ 0x80
 80072b0:	2120      	movs	r1, #32
 80072b2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2278      	movs	r2, #120	@ 0x78
 80072b8:	2100      	movs	r1, #0
 80072ba:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072bc:	2303      	movs	r3, #3
 80072be:	e011      	b.n	80072e4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2220      	movs	r2, #32
 80072c4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2280      	movs	r2, #128	@ 0x80
 80072ca:	2120      	movs	r1, #32
 80072cc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2278      	movs	r2, #120	@ 0x78
 80072de:	2100      	movs	r1, #0
 80072e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	0018      	movs	r0, r3
 80072e6:	46bd      	mov	sp, r7
 80072e8:	b010      	add	sp, #64	@ 0x40
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	01ffffff 	.word	0x01ffffff
 80072f0:	fffffedf 	.word	0xfffffedf

080072f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	603b      	str	r3, [r7, #0]
 8007300:	1dfb      	adds	r3, r7, #7
 8007302:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007304:	e04b      	b.n	800739e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	3301      	adds	r3, #1
 800730a:	d048      	beq.n	800739e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800730c:	f7fd fad8 	bl	80048c0 <HAL_GetTick>
 8007310:	0002      	movs	r2, r0
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	69ba      	ldr	r2, [r7, #24]
 8007318:	429a      	cmp	r2, r3
 800731a:	d302      	bcc.n	8007322 <UART_WaitOnFlagUntilTimeout+0x2e>
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d101      	bne.n	8007326 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e04b      	b.n	80073be <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2204      	movs	r2, #4
 800732e:	4013      	ands	r3, r2
 8007330:	d035      	beq.n	800739e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	69db      	ldr	r3, [r3, #28]
 8007338:	2208      	movs	r2, #8
 800733a:	4013      	ands	r3, r2
 800733c:	2b08      	cmp	r3, #8
 800733e:	d111      	bne.n	8007364 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2208      	movs	r2, #8
 8007346:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	0018      	movs	r0, r3
 800734c:	f000 f83c 	bl	80073c8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2284      	movs	r2, #132	@ 0x84
 8007354:	2108      	movs	r1, #8
 8007356:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2278      	movs	r2, #120	@ 0x78
 800735c:	2100      	movs	r1, #0
 800735e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	e02c      	b.n	80073be <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	69da      	ldr	r2, [r3, #28]
 800736a:	2380      	movs	r3, #128	@ 0x80
 800736c:	011b      	lsls	r3, r3, #4
 800736e:	401a      	ands	r2, r3
 8007370:	2380      	movs	r3, #128	@ 0x80
 8007372:	011b      	lsls	r3, r3, #4
 8007374:	429a      	cmp	r2, r3
 8007376:	d112      	bne.n	800739e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2280      	movs	r2, #128	@ 0x80
 800737e:	0112      	lsls	r2, r2, #4
 8007380:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	0018      	movs	r0, r3
 8007386:	f000 f81f 	bl	80073c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2284      	movs	r2, #132	@ 0x84
 800738e:	2120      	movs	r1, #32
 8007390:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2278      	movs	r2, #120	@ 0x78
 8007396:	2100      	movs	r1, #0
 8007398:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e00f      	b.n	80073be <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	69db      	ldr	r3, [r3, #28]
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	4013      	ands	r3, r2
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	425a      	negs	r2, r3
 80073ae:	4153      	adcs	r3, r2
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	001a      	movs	r2, r3
 80073b4:	1dfb      	adds	r3, r7, #7
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d0a4      	beq.n	8007306 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	0018      	movs	r0, r3
 80073c0:	46bd      	mov	sp, r7
 80073c2:	b004      	add	sp, #16
 80073c4:	bd80      	pop	{r7, pc}
	...

080073c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b08e      	sub	sp, #56	@ 0x38
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073d0:	f3ef 8310 	mrs	r3, PRIMASK
 80073d4:	617b      	str	r3, [r7, #20]
  return(result);
 80073d6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80073da:	2301      	movs	r3, #1
 80073dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	f383 8810 	msr	PRIMASK, r3
}
 80073e4:	46c0      	nop			@ (mov r8, r8)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4926      	ldr	r1, [pc, #152]	@ (800748c <UART_EndRxTransfer+0xc4>)
 80073f2:	400a      	ands	r2, r1
 80073f4:	601a      	str	r2, [r3, #0]
 80073f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	f383 8810 	msr	PRIMASK, r3
}
 8007400:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007402:	f3ef 8310 	mrs	r3, PRIMASK
 8007406:	623b      	str	r3, [r7, #32]
  return(result);
 8007408:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800740a:	633b      	str	r3, [r7, #48]	@ 0x30
 800740c:	2301      	movs	r3, #1
 800740e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007412:	f383 8810 	msr	PRIMASK, r3
}
 8007416:	46c0      	nop			@ (mov r8, r8)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	689a      	ldr	r2, [r3, #8]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2101      	movs	r1, #1
 8007424:	438a      	bics	r2, r1
 8007426:	609a      	str	r2, [r3, #8]
 8007428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800742c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800742e:	f383 8810 	msr	PRIMASK, r3
}
 8007432:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007438:	2b01      	cmp	r3, #1
 800743a:	d118      	bne.n	800746e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800743c:	f3ef 8310 	mrs	r3, PRIMASK
 8007440:	60bb      	str	r3, [r7, #8]
  return(result);
 8007442:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007444:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007446:	2301      	movs	r3, #1
 8007448:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f383 8810 	msr	PRIMASK, r3
}
 8007450:	46c0      	nop			@ (mov r8, r8)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2110      	movs	r1, #16
 800745e:	438a      	bics	r2, r1
 8007460:	601a      	str	r2, [r3, #0]
 8007462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007464:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	f383 8810 	msr	PRIMASK, r3
}
 800746c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2280      	movs	r2, #128	@ 0x80
 8007472:	2120      	movs	r1, #32
 8007474:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007482:	46c0      	nop			@ (mov r8, r8)
 8007484:	46bd      	mov	sp, r7
 8007486:	b00e      	add	sp, #56	@ 0x38
 8007488:	bd80      	pop	{r7, pc}
 800748a:	46c0      	nop			@ (mov r8, r8)
 800748c:	fffffedf 	.word	0xfffffedf

08007490 <malloc>:
 8007490:	b510      	push	{r4, lr}
 8007492:	4b03      	ldr	r3, [pc, #12]	@ (80074a0 <malloc+0x10>)
 8007494:	0001      	movs	r1, r0
 8007496:	6818      	ldr	r0, [r3, #0]
 8007498:	f000 f830 	bl	80074fc <_malloc_r>
 800749c:	bd10      	pop	{r4, pc}
 800749e:	46c0      	nop			@ (mov r8, r8)
 80074a0:	20000018 	.word	0x20000018

080074a4 <free>:
 80074a4:	b510      	push	{r4, lr}
 80074a6:	4b03      	ldr	r3, [pc, #12]	@ (80074b4 <free+0x10>)
 80074a8:	0001      	movs	r1, r0
 80074aa:	6818      	ldr	r0, [r3, #0]
 80074ac:	f001 ff9a 	bl	80093e4 <_free_r>
 80074b0:	bd10      	pop	{r4, pc}
 80074b2:	46c0      	nop			@ (mov r8, r8)
 80074b4:	20000018 	.word	0x20000018

080074b8 <sbrk_aligned>:
 80074b8:	b570      	push	{r4, r5, r6, lr}
 80074ba:	4e0f      	ldr	r6, [pc, #60]	@ (80074f8 <sbrk_aligned+0x40>)
 80074bc:	000d      	movs	r5, r1
 80074be:	6831      	ldr	r1, [r6, #0]
 80074c0:	0004      	movs	r4, r0
 80074c2:	2900      	cmp	r1, #0
 80074c4:	d102      	bne.n	80074cc <sbrk_aligned+0x14>
 80074c6:	f001 f89f 	bl	8008608 <_sbrk_r>
 80074ca:	6030      	str	r0, [r6, #0]
 80074cc:	0029      	movs	r1, r5
 80074ce:	0020      	movs	r0, r4
 80074d0:	f001 f89a 	bl	8008608 <_sbrk_r>
 80074d4:	1c43      	adds	r3, r0, #1
 80074d6:	d103      	bne.n	80074e0 <sbrk_aligned+0x28>
 80074d8:	2501      	movs	r5, #1
 80074da:	426d      	negs	r5, r5
 80074dc:	0028      	movs	r0, r5
 80074de:	bd70      	pop	{r4, r5, r6, pc}
 80074e0:	2303      	movs	r3, #3
 80074e2:	1cc5      	adds	r5, r0, #3
 80074e4:	439d      	bics	r5, r3
 80074e6:	42a8      	cmp	r0, r5
 80074e8:	d0f8      	beq.n	80074dc <sbrk_aligned+0x24>
 80074ea:	1a29      	subs	r1, r5, r0
 80074ec:	0020      	movs	r0, r4
 80074ee:	f001 f88b 	bl	8008608 <_sbrk_r>
 80074f2:	3001      	adds	r0, #1
 80074f4:	d1f2      	bne.n	80074dc <sbrk_aligned+0x24>
 80074f6:	e7ef      	b.n	80074d8 <sbrk_aligned+0x20>
 80074f8:	200004c0 	.word	0x200004c0

080074fc <_malloc_r>:
 80074fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074fe:	2203      	movs	r2, #3
 8007500:	1ccb      	adds	r3, r1, #3
 8007502:	4393      	bics	r3, r2
 8007504:	3308      	adds	r3, #8
 8007506:	0005      	movs	r5, r0
 8007508:	001f      	movs	r7, r3
 800750a:	2b0c      	cmp	r3, #12
 800750c:	d234      	bcs.n	8007578 <_malloc_r+0x7c>
 800750e:	270c      	movs	r7, #12
 8007510:	42b9      	cmp	r1, r7
 8007512:	d833      	bhi.n	800757c <_malloc_r+0x80>
 8007514:	0028      	movs	r0, r5
 8007516:	f000 f871 	bl	80075fc <__malloc_lock>
 800751a:	4e37      	ldr	r6, [pc, #220]	@ (80075f8 <_malloc_r+0xfc>)
 800751c:	6833      	ldr	r3, [r6, #0]
 800751e:	001c      	movs	r4, r3
 8007520:	2c00      	cmp	r4, #0
 8007522:	d12f      	bne.n	8007584 <_malloc_r+0x88>
 8007524:	0039      	movs	r1, r7
 8007526:	0028      	movs	r0, r5
 8007528:	f7ff ffc6 	bl	80074b8 <sbrk_aligned>
 800752c:	0004      	movs	r4, r0
 800752e:	1c43      	adds	r3, r0, #1
 8007530:	d15f      	bne.n	80075f2 <_malloc_r+0xf6>
 8007532:	6834      	ldr	r4, [r6, #0]
 8007534:	9400      	str	r4, [sp, #0]
 8007536:	9b00      	ldr	r3, [sp, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d14a      	bne.n	80075d2 <_malloc_r+0xd6>
 800753c:	2c00      	cmp	r4, #0
 800753e:	d052      	beq.n	80075e6 <_malloc_r+0xea>
 8007540:	6823      	ldr	r3, [r4, #0]
 8007542:	0028      	movs	r0, r5
 8007544:	18e3      	adds	r3, r4, r3
 8007546:	9900      	ldr	r1, [sp, #0]
 8007548:	9301      	str	r3, [sp, #4]
 800754a:	f001 f85d 	bl	8008608 <_sbrk_r>
 800754e:	9b01      	ldr	r3, [sp, #4]
 8007550:	4283      	cmp	r3, r0
 8007552:	d148      	bne.n	80075e6 <_malloc_r+0xea>
 8007554:	6823      	ldr	r3, [r4, #0]
 8007556:	0028      	movs	r0, r5
 8007558:	1aff      	subs	r7, r7, r3
 800755a:	0039      	movs	r1, r7
 800755c:	f7ff ffac 	bl	80074b8 <sbrk_aligned>
 8007560:	3001      	adds	r0, #1
 8007562:	d040      	beq.n	80075e6 <_malloc_r+0xea>
 8007564:	6823      	ldr	r3, [r4, #0]
 8007566:	19db      	adds	r3, r3, r7
 8007568:	6023      	str	r3, [r4, #0]
 800756a:	6833      	ldr	r3, [r6, #0]
 800756c:	685a      	ldr	r2, [r3, #4]
 800756e:	2a00      	cmp	r2, #0
 8007570:	d133      	bne.n	80075da <_malloc_r+0xde>
 8007572:	9b00      	ldr	r3, [sp, #0]
 8007574:	6033      	str	r3, [r6, #0]
 8007576:	e019      	b.n	80075ac <_malloc_r+0xb0>
 8007578:	2b00      	cmp	r3, #0
 800757a:	dac9      	bge.n	8007510 <_malloc_r+0x14>
 800757c:	230c      	movs	r3, #12
 800757e:	602b      	str	r3, [r5, #0]
 8007580:	2000      	movs	r0, #0
 8007582:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007584:	6821      	ldr	r1, [r4, #0]
 8007586:	1bc9      	subs	r1, r1, r7
 8007588:	d420      	bmi.n	80075cc <_malloc_r+0xd0>
 800758a:	290b      	cmp	r1, #11
 800758c:	d90a      	bls.n	80075a4 <_malloc_r+0xa8>
 800758e:	19e2      	adds	r2, r4, r7
 8007590:	6027      	str	r7, [r4, #0]
 8007592:	42a3      	cmp	r3, r4
 8007594:	d104      	bne.n	80075a0 <_malloc_r+0xa4>
 8007596:	6032      	str	r2, [r6, #0]
 8007598:	6863      	ldr	r3, [r4, #4]
 800759a:	6011      	str	r1, [r2, #0]
 800759c:	6053      	str	r3, [r2, #4]
 800759e:	e005      	b.n	80075ac <_malloc_r+0xb0>
 80075a0:	605a      	str	r2, [r3, #4]
 80075a2:	e7f9      	b.n	8007598 <_malloc_r+0x9c>
 80075a4:	6862      	ldr	r2, [r4, #4]
 80075a6:	42a3      	cmp	r3, r4
 80075a8:	d10e      	bne.n	80075c8 <_malloc_r+0xcc>
 80075aa:	6032      	str	r2, [r6, #0]
 80075ac:	0028      	movs	r0, r5
 80075ae:	f000 f82d 	bl	800760c <__malloc_unlock>
 80075b2:	0020      	movs	r0, r4
 80075b4:	2207      	movs	r2, #7
 80075b6:	300b      	adds	r0, #11
 80075b8:	1d23      	adds	r3, r4, #4
 80075ba:	4390      	bics	r0, r2
 80075bc:	1ac2      	subs	r2, r0, r3
 80075be:	4298      	cmp	r0, r3
 80075c0:	d0df      	beq.n	8007582 <_malloc_r+0x86>
 80075c2:	1a1b      	subs	r3, r3, r0
 80075c4:	50a3      	str	r3, [r4, r2]
 80075c6:	e7dc      	b.n	8007582 <_malloc_r+0x86>
 80075c8:	605a      	str	r2, [r3, #4]
 80075ca:	e7ef      	b.n	80075ac <_malloc_r+0xb0>
 80075cc:	0023      	movs	r3, r4
 80075ce:	6864      	ldr	r4, [r4, #4]
 80075d0:	e7a6      	b.n	8007520 <_malloc_r+0x24>
 80075d2:	9c00      	ldr	r4, [sp, #0]
 80075d4:	6863      	ldr	r3, [r4, #4]
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	e7ad      	b.n	8007536 <_malloc_r+0x3a>
 80075da:	001a      	movs	r2, r3
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	42a3      	cmp	r3, r4
 80075e0:	d1fb      	bne.n	80075da <_malloc_r+0xde>
 80075e2:	2300      	movs	r3, #0
 80075e4:	e7da      	b.n	800759c <_malloc_r+0xa0>
 80075e6:	230c      	movs	r3, #12
 80075e8:	0028      	movs	r0, r5
 80075ea:	602b      	str	r3, [r5, #0]
 80075ec:	f000 f80e 	bl	800760c <__malloc_unlock>
 80075f0:	e7c6      	b.n	8007580 <_malloc_r+0x84>
 80075f2:	6007      	str	r7, [r0, #0]
 80075f4:	e7da      	b.n	80075ac <_malloc_r+0xb0>
 80075f6:	46c0      	nop			@ (mov r8, r8)
 80075f8:	200004c4 	.word	0x200004c4

080075fc <__malloc_lock>:
 80075fc:	b510      	push	{r4, lr}
 80075fe:	4802      	ldr	r0, [pc, #8]	@ (8007608 <__malloc_lock+0xc>)
 8007600:	f001 f853 	bl	80086aa <__retarget_lock_acquire_recursive>
 8007604:	bd10      	pop	{r4, pc}
 8007606:	46c0      	nop			@ (mov r8, r8)
 8007608:	20000608 	.word	0x20000608

0800760c <__malloc_unlock>:
 800760c:	b510      	push	{r4, lr}
 800760e:	4802      	ldr	r0, [pc, #8]	@ (8007618 <__malloc_unlock+0xc>)
 8007610:	f001 f84c 	bl	80086ac <__retarget_lock_release_recursive>
 8007614:	bd10      	pop	{r4, pc}
 8007616:	46c0      	nop			@ (mov r8, r8)
 8007618:	20000608 	.word	0x20000608

0800761c <__cvt>:
 800761c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800761e:	001f      	movs	r7, r3
 8007620:	2300      	movs	r3, #0
 8007622:	0016      	movs	r6, r2
 8007624:	b08b      	sub	sp, #44	@ 0x2c
 8007626:	429f      	cmp	r7, r3
 8007628:	da04      	bge.n	8007634 <__cvt+0x18>
 800762a:	2180      	movs	r1, #128	@ 0x80
 800762c:	0609      	lsls	r1, r1, #24
 800762e:	187b      	adds	r3, r7, r1
 8007630:	001f      	movs	r7, r3
 8007632:	232d      	movs	r3, #45	@ 0x2d
 8007634:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007636:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8007638:	7013      	strb	r3, [r2, #0]
 800763a:	2320      	movs	r3, #32
 800763c:	2203      	movs	r2, #3
 800763e:	439d      	bics	r5, r3
 8007640:	2d46      	cmp	r5, #70	@ 0x46
 8007642:	d007      	beq.n	8007654 <__cvt+0x38>
 8007644:	002b      	movs	r3, r5
 8007646:	3b45      	subs	r3, #69	@ 0x45
 8007648:	4259      	negs	r1, r3
 800764a:	414b      	adcs	r3, r1
 800764c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800764e:	3a01      	subs	r2, #1
 8007650:	18cb      	adds	r3, r1, r3
 8007652:	9310      	str	r3, [sp, #64]	@ 0x40
 8007654:	ab09      	add	r3, sp, #36	@ 0x24
 8007656:	9304      	str	r3, [sp, #16]
 8007658:	ab08      	add	r3, sp, #32
 800765a:	9303      	str	r3, [sp, #12]
 800765c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800765e:	9200      	str	r2, [sp, #0]
 8007660:	9302      	str	r3, [sp, #8]
 8007662:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007664:	0032      	movs	r2, r6
 8007666:	9301      	str	r3, [sp, #4]
 8007668:	003b      	movs	r3, r7
 800766a:	f001 f8c7 	bl	80087fc <_dtoa_r>
 800766e:	0004      	movs	r4, r0
 8007670:	2d47      	cmp	r5, #71	@ 0x47
 8007672:	d11b      	bne.n	80076ac <__cvt+0x90>
 8007674:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007676:	07db      	lsls	r3, r3, #31
 8007678:	d511      	bpl.n	800769e <__cvt+0x82>
 800767a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800767c:	18c3      	adds	r3, r0, r3
 800767e:	9307      	str	r3, [sp, #28]
 8007680:	2200      	movs	r2, #0
 8007682:	2300      	movs	r3, #0
 8007684:	0030      	movs	r0, r6
 8007686:	0039      	movs	r1, r7
 8007688:	f7f8 fee0 	bl	800044c <__aeabi_dcmpeq>
 800768c:	2800      	cmp	r0, #0
 800768e:	d001      	beq.n	8007694 <__cvt+0x78>
 8007690:	9b07      	ldr	r3, [sp, #28]
 8007692:	9309      	str	r3, [sp, #36]	@ 0x24
 8007694:	2230      	movs	r2, #48	@ 0x30
 8007696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007698:	9907      	ldr	r1, [sp, #28]
 800769a:	428b      	cmp	r3, r1
 800769c:	d320      	bcc.n	80076e0 <__cvt+0xc4>
 800769e:	0020      	movs	r0, r4
 80076a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076a2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80076a4:	1b1b      	subs	r3, r3, r4
 80076a6:	6013      	str	r3, [r2, #0]
 80076a8:	b00b      	add	sp, #44	@ 0x2c
 80076aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80076ae:	18c3      	adds	r3, r0, r3
 80076b0:	9307      	str	r3, [sp, #28]
 80076b2:	2d46      	cmp	r5, #70	@ 0x46
 80076b4:	d1e4      	bne.n	8007680 <__cvt+0x64>
 80076b6:	7803      	ldrb	r3, [r0, #0]
 80076b8:	2b30      	cmp	r3, #48	@ 0x30
 80076ba:	d10c      	bne.n	80076d6 <__cvt+0xba>
 80076bc:	2200      	movs	r2, #0
 80076be:	2300      	movs	r3, #0
 80076c0:	0030      	movs	r0, r6
 80076c2:	0039      	movs	r1, r7
 80076c4:	f7f8 fec2 	bl	800044c <__aeabi_dcmpeq>
 80076c8:	2800      	cmp	r0, #0
 80076ca:	d104      	bne.n	80076d6 <__cvt+0xba>
 80076cc:	2301      	movs	r3, #1
 80076ce:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80076d0:	1a9b      	subs	r3, r3, r2
 80076d2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80076d4:	6013      	str	r3, [r2, #0]
 80076d6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80076d8:	9a07      	ldr	r2, [sp, #28]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	18d3      	adds	r3, r2, r3
 80076de:	e7ce      	b.n	800767e <__cvt+0x62>
 80076e0:	1c59      	adds	r1, r3, #1
 80076e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80076e4:	701a      	strb	r2, [r3, #0]
 80076e6:	e7d6      	b.n	8007696 <__cvt+0x7a>

080076e8 <__exponent>:
 80076e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076ea:	232b      	movs	r3, #43	@ 0x2b
 80076ec:	0005      	movs	r5, r0
 80076ee:	000c      	movs	r4, r1
 80076f0:	b085      	sub	sp, #20
 80076f2:	7002      	strb	r2, [r0, #0]
 80076f4:	2900      	cmp	r1, #0
 80076f6:	da01      	bge.n	80076fc <__exponent+0x14>
 80076f8:	424c      	negs	r4, r1
 80076fa:	3302      	adds	r3, #2
 80076fc:	706b      	strb	r3, [r5, #1]
 80076fe:	2c09      	cmp	r4, #9
 8007700:	dd2c      	ble.n	800775c <__exponent+0x74>
 8007702:	ab02      	add	r3, sp, #8
 8007704:	1dde      	adds	r6, r3, #7
 8007706:	0020      	movs	r0, r4
 8007708:	210a      	movs	r1, #10
 800770a:	f7f8 fe89 	bl	8000420 <__aeabi_idivmod>
 800770e:	0037      	movs	r7, r6
 8007710:	3130      	adds	r1, #48	@ 0x30
 8007712:	3e01      	subs	r6, #1
 8007714:	0020      	movs	r0, r4
 8007716:	7031      	strb	r1, [r6, #0]
 8007718:	210a      	movs	r1, #10
 800771a:	9401      	str	r4, [sp, #4]
 800771c:	f7f8 fd9a 	bl	8000254 <__divsi3>
 8007720:	9b01      	ldr	r3, [sp, #4]
 8007722:	0004      	movs	r4, r0
 8007724:	2b63      	cmp	r3, #99	@ 0x63
 8007726:	dcee      	bgt.n	8007706 <__exponent+0x1e>
 8007728:	1eba      	subs	r2, r7, #2
 800772a:	1ca8      	adds	r0, r5, #2
 800772c:	0001      	movs	r1, r0
 800772e:	0013      	movs	r3, r2
 8007730:	3430      	adds	r4, #48	@ 0x30
 8007732:	7014      	strb	r4, [r2, #0]
 8007734:	ac02      	add	r4, sp, #8
 8007736:	3407      	adds	r4, #7
 8007738:	429c      	cmp	r4, r3
 800773a:	d80a      	bhi.n	8007752 <__exponent+0x6a>
 800773c:	2300      	movs	r3, #0
 800773e:	42a2      	cmp	r2, r4
 8007740:	d803      	bhi.n	800774a <__exponent+0x62>
 8007742:	3309      	adds	r3, #9
 8007744:	aa02      	add	r2, sp, #8
 8007746:	189b      	adds	r3, r3, r2
 8007748:	1bdb      	subs	r3, r3, r7
 800774a:	18c0      	adds	r0, r0, r3
 800774c:	1b40      	subs	r0, r0, r5
 800774e:	b005      	add	sp, #20
 8007750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007752:	781c      	ldrb	r4, [r3, #0]
 8007754:	3301      	adds	r3, #1
 8007756:	700c      	strb	r4, [r1, #0]
 8007758:	3101      	adds	r1, #1
 800775a:	e7eb      	b.n	8007734 <__exponent+0x4c>
 800775c:	2330      	movs	r3, #48	@ 0x30
 800775e:	18e4      	adds	r4, r4, r3
 8007760:	70ab      	strb	r3, [r5, #2]
 8007762:	1d28      	adds	r0, r5, #4
 8007764:	70ec      	strb	r4, [r5, #3]
 8007766:	e7f1      	b.n	800774c <__exponent+0x64>

08007768 <_printf_float>:
 8007768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800776a:	b097      	sub	sp, #92	@ 0x5c
 800776c:	000d      	movs	r5, r1
 800776e:	920a      	str	r2, [sp, #40]	@ 0x28
 8007770:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8007772:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007774:	9009      	str	r0, [sp, #36]	@ 0x24
 8007776:	f000 ff09 	bl	800858c <_localeconv_r>
 800777a:	6803      	ldr	r3, [r0, #0]
 800777c:	0018      	movs	r0, r3
 800777e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007780:	f7f8 fcc2 	bl	8000108 <strlen>
 8007784:	2300      	movs	r3, #0
 8007786:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007788:	9314      	str	r3, [sp, #80]	@ 0x50
 800778a:	7e2b      	ldrb	r3, [r5, #24]
 800778c:	2207      	movs	r2, #7
 800778e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007790:	682b      	ldr	r3, [r5, #0]
 8007792:	930e      	str	r3, [sp, #56]	@ 0x38
 8007794:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007796:	6823      	ldr	r3, [r4, #0]
 8007798:	05c9      	lsls	r1, r1, #23
 800779a:	d545      	bpl.n	8007828 <_printf_float+0xc0>
 800779c:	189b      	adds	r3, r3, r2
 800779e:	4393      	bics	r3, r2
 80077a0:	001a      	movs	r2, r3
 80077a2:	3208      	adds	r2, #8
 80077a4:	6022      	str	r2, [r4, #0]
 80077a6:	2201      	movs	r2, #1
 80077a8:	681e      	ldr	r6, [r3, #0]
 80077aa:	685f      	ldr	r7, [r3, #4]
 80077ac:	007b      	lsls	r3, r7, #1
 80077ae:	085b      	lsrs	r3, r3, #1
 80077b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80077b2:	9610      	str	r6, [sp, #64]	@ 0x40
 80077b4:	64ae      	str	r6, [r5, #72]	@ 0x48
 80077b6:	64ef      	str	r7, [r5, #76]	@ 0x4c
 80077b8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80077ba:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80077bc:	4ba7      	ldr	r3, [pc, #668]	@ (8007a5c <_printf_float+0x2f4>)
 80077be:	4252      	negs	r2, r2
 80077c0:	f7fb fd20 	bl	8003204 <__aeabi_dcmpun>
 80077c4:	2800      	cmp	r0, #0
 80077c6:	d131      	bne.n	800782c <_printf_float+0xc4>
 80077c8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80077ca:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80077cc:	2201      	movs	r2, #1
 80077ce:	4ba3      	ldr	r3, [pc, #652]	@ (8007a5c <_printf_float+0x2f4>)
 80077d0:	4252      	negs	r2, r2
 80077d2:	f7f8 fe4b 	bl	800046c <__aeabi_dcmple>
 80077d6:	2800      	cmp	r0, #0
 80077d8:	d128      	bne.n	800782c <_printf_float+0xc4>
 80077da:	2200      	movs	r2, #0
 80077dc:	2300      	movs	r3, #0
 80077de:	0030      	movs	r0, r6
 80077e0:	0039      	movs	r1, r7
 80077e2:	f7f8 fe39 	bl	8000458 <__aeabi_dcmplt>
 80077e6:	2800      	cmp	r0, #0
 80077e8:	d003      	beq.n	80077f2 <_printf_float+0x8a>
 80077ea:	002b      	movs	r3, r5
 80077ec:	222d      	movs	r2, #45	@ 0x2d
 80077ee:	3343      	adds	r3, #67	@ 0x43
 80077f0:	701a      	strb	r2, [r3, #0]
 80077f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80077f4:	4f9a      	ldr	r7, [pc, #616]	@ (8007a60 <_printf_float+0x2f8>)
 80077f6:	2b47      	cmp	r3, #71	@ 0x47
 80077f8:	d900      	bls.n	80077fc <_printf_float+0x94>
 80077fa:	4f9a      	ldr	r7, [pc, #616]	@ (8007a64 <_printf_float+0x2fc>)
 80077fc:	2303      	movs	r3, #3
 80077fe:	2400      	movs	r4, #0
 8007800:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007802:	612b      	str	r3, [r5, #16]
 8007804:	3301      	adds	r3, #1
 8007806:	439a      	bics	r2, r3
 8007808:	602a      	str	r2, [r5, #0]
 800780a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800780c:	0029      	movs	r1, r5
 800780e:	9300      	str	r3, [sp, #0]
 8007810:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007812:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007814:	aa15      	add	r2, sp, #84	@ 0x54
 8007816:	f000 f9e5 	bl	8007be4 <_printf_common>
 800781a:	3001      	adds	r0, #1
 800781c:	d000      	beq.n	8007820 <_printf_float+0xb8>
 800781e:	e09f      	b.n	8007960 <_printf_float+0x1f8>
 8007820:	2001      	movs	r0, #1
 8007822:	4240      	negs	r0, r0
 8007824:	b017      	add	sp, #92	@ 0x5c
 8007826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007828:	3307      	adds	r3, #7
 800782a:	e7b8      	b.n	800779e <_printf_float+0x36>
 800782c:	0032      	movs	r2, r6
 800782e:	003b      	movs	r3, r7
 8007830:	0030      	movs	r0, r6
 8007832:	0039      	movs	r1, r7
 8007834:	f7fb fce6 	bl	8003204 <__aeabi_dcmpun>
 8007838:	2800      	cmp	r0, #0
 800783a:	d00b      	beq.n	8007854 <_printf_float+0xec>
 800783c:	2f00      	cmp	r7, #0
 800783e:	da03      	bge.n	8007848 <_printf_float+0xe0>
 8007840:	002b      	movs	r3, r5
 8007842:	222d      	movs	r2, #45	@ 0x2d
 8007844:	3343      	adds	r3, #67	@ 0x43
 8007846:	701a      	strb	r2, [r3, #0]
 8007848:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800784a:	4f87      	ldr	r7, [pc, #540]	@ (8007a68 <_printf_float+0x300>)
 800784c:	2b47      	cmp	r3, #71	@ 0x47
 800784e:	d9d5      	bls.n	80077fc <_printf_float+0x94>
 8007850:	4f86      	ldr	r7, [pc, #536]	@ (8007a6c <_printf_float+0x304>)
 8007852:	e7d3      	b.n	80077fc <_printf_float+0x94>
 8007854:	2220      	movs	r2, #32
 8007856:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8007858:	686b      	ldr	r3, [r5, #4]
 800785a:	4394      	bics	r4, r2
 800785c:	1c5a      	adds	r2, r3, #1
 800785e:	d146      	bne.n	80078ee <_printf_float+0x186>
 8007860:	3307      	adds	r3, #7
 8007862:	606b      	str	r3, [r5, #4]
 8007864:	2380      	movs	r3, #128	@ 0x80
 8007866:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007868:	00db      	lsls	r3, r3, #3
 800786a:	4313      	orrs	r3, r2
 800786c:	2200      	movs	r2, #0
 800786e:	602b      	str	r3, [r5, #0]
 8007870:	9206      	str	r2, [sp, #24]
 8007872:	aa14      	add	r2, sp, #80	@ 0x50
 8007874:	9205      	str	r2, [sp, #20]
 8007876:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007878:	a90a      	add	r1, sp, #40	@ 0x28
 800787a:	9204      	str	r2, [sp, #16]
 800787c:	aa13      	add	r2, sp, #76	@ 0x4c
 800787e:	9203      	str	r2, [sp, #12]
 8007880:	2223      	movs	r2, #35	@ 0x23
 8007882:	1852      	adds	r2, r2, r1
 8007884:	9202      	str	r2, [sp, #8]
 8007886:	9301      	str	r3, [sp, #4]
 8007888:	686b      	ldr	r3, [r5, #4]
 800788a:	0032      	movs	r2, r6
 800788c:	9300      	str	r3, [sp, #0]
 800788e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007890:	003b      	movs	r3, r7
 8007892:	f7ff fec3 	bl	800761c <__cvt>
 8007896:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007898:	0007      	movs	r7, r0
 800789a:	2c47      	cmp	r4, #71	@ 0x47
 800789c:	d12d      	bne.n	80078fa <_printf_float+0x192>
 800789e:	1cd3      	adds	r3, r2, #3
 80078a0:	db02      	blt.n	80078a8 <_printf_float+0x140>
 80078a2:	686b      	ldr	r3, [r5, #4]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	dd48      	ble.n	800793a <_printf_float+0x1d2>
 80078a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80078aa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80078ac:	3b02      	subs	r3, #2
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	930c      	str	r3, [sp, #48]	@ 0x30
 80078b2:	0028      	movs	r0, r5
 80078b4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80078b6:	3901      	subs	r1, #1
 80078b8:	3050      	adds	r0, #80	@ 0x50
 80078ba:	9113      	str	r1, [sp, #76]	@ 0x4c
 80078bc:	f7ff ff14 	bl	80076e8 <__exponent>
 80078c0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80078c2:	0004      	movs	r4, r0
 80078c4:	1813      	adds	r3, r2, r0
 80078c6:	612b      	str	r3, [r5, #16]
 80078c8:	2a01      	cmp	r2, #1
 80078ca:	dc02      	bgt.n	80078d2 <_printf_float+0x16a>
 80078cc:	682a      	ldr	r2, [r5, #0]
 80078ce:	07d2      	lsls	r2, r2, #31
 80078d0:	d501      	bpl.n	80078d6 <_printf_float+0x16e>
 80078d2:	3301      	adds	r3, #1
 80078d4:	612b      	str	r3, [r5, #16]
 80078d6:	2323      	movs	r3, #35	@ 0x23
 80078d8:	aa0a      	add	r2, sp, #40	@ 0x28
 80078da:	189b      	adds	r3, r3, r2
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d100      	bne.n	80078e4 <_printf_float+0x17c>
 80078e2:	e792      	b.n	800780a <_printf_float+0xa2>
 80078e4:	002b      	movs	r3, r5
 80078e6:	222d      	movs	r2, #45	@ 0x2d
 80078e8:	3343      	adds	r3, #67	@ 0x43
 80078ea:	701a      	strb	r2, [r3, #0]
 80078ec:	e78d      	b.n	800780a <_printf_float+0xa2>
 80078ee:	2c47      	cmp	r4, #71	@ 0x47
 80078f0:	d1b8      	bne.n	8007864 <_printf_float+0xfc>
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1b6      	bne.n	8007864 <_printf_float+0xfc>
 80078f6:	3301      	adds	r3, #1
 80078f8:	e7b3      	b.n	8007862 <_printf_float+0xfa>
 80078fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80078fc:	0011      	movs	r1, r2
 80078fe:	2b65      	cmp	r3, #101	@ 0x65
 8007900:	d9d7      	bls.n	80078b2 <_printf_float+0x14a>
 8007902:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007904:	2b66      	cmp	r3, #102	@ 0x66
 8007906:	d11a      	bne.n	800793e <_printf_float+0x1d6>
 8007908:	686b      	ldr	r3, [r5, #4]
 800790a:	2a00      	cmp	r2, #0
 800790c:	dd09      	ble.n	8007922 <_printf_float+0x1ba>
 800790e:	612a      	str	r2, [r5, #16]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d102      	bne.n	800791a <_printf_float+0x1b2>
 8007914:	6829      	ldr	r1, [r5, #0]
 8007916:	07c9      	lsls	r1, r1, #31
 8007918:	d50b      	bpl.n	8007932 <_printf_float+0x1ca>
 800791a:	3301      	adds	r3, #1
 800791c:	189b      	adds	r3, r3, r2
 800791e:	612b      	str	r3, [r5, #16]
 8007920:	e007      	b.n	8007932 <_printf_float+0x1ca>
 8007922:	2b00      	cmp	r3, #0
 8007924:	d103      	bne.n	800792e <_printf_float+0x1c6>
 8007926:	2201      	movs	r2, #1
 8007928:	6829      	ldr	r1, [r5, #0]
 800792a:	4211      	tst	r1, r2
 800792c:	d000      	beq.n	8007930 <_printf_float+0x1c8>
 800792e:	1c9a      	adds	r2, r3, #2
 8007930:	612a      	str	r2, [r5, #16]
 8007932:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007934:	2400      	movs	r4, #0
 8007936:	65ab      	str	r3, [r5, #88]	@ 0x58
 8007938:	e7cd      	b.n	80078d6 <_printf_float+0x16e>
 800793a:	2367      	movs	r3, #103	@ 0x67
 800793c:	930c      	str	r3, [sp, #48]	@ 0x30
 800793e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007940:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007942:	4299      	cmp	r1, r3
 8007944:	db06      	blt.n	8007954 <_printf_float+0x1ec>
 8007946:	682b      	ldr	r3, [r5, #0]
 8007948:	6129      	str	r1, [r5, #16]
 800794a:	07db      	lsls	r3, r3, #31
 800794c:	d5f1      	bpl.n	8007932 <_printf_float+0x1ca>
 800794e:	3101      	adds	r1, #1
 8007950:	6129      	str	r1, [r5, #16]
 8007952:	e7ee      	b.n	8007932 <_printf_float+0x1ca>
 8007954:	2201      	movs	r2, #1
 8007956:	2900      	cmp	r1, #0
 8007958:	dce0      	bgt.n	800791c <_printf_float+0x1b4>
 800795a:	1892      	adds	r2, r2, r2
 800795c:	1a52      	subs	r2, r2, r1
 800795e:	e7dd      	b.n	800791c <_printf_float+0x1b4>
 8007960:	682a      	ldr	r2, [r5, #0]
 8007962:	0553      	lsls	r3, r2, #21
 8007964:	d408      	bmi.n	8007978 <_printf_float+0x210>
 8007966:	692b      	ldr	r3, [r5, #16]
 8007968:	003a      	movs	r2, r7
 800796a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800796c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800796e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007970:	47a0      	blx	r4
 8007972:	3001      	adds	r0, #1
 8007974:	d129      	bne.n	80079ca <_printf_float+0x262>
 8007976:	e753      	b.n	8007820 <_printf_float+0xb8>
 8007978:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800797a:	2b65      	cmp	r3, #101	@ 0x65
 800797c:	d800      	bhi.n	8007980 <_printf_float+0x218>
 800797e:	e0da      	b.n	8007b36 <_printf_float+0x3ce>
 8007980:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8007982:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8007984:	2200      	movs	r2, #0
 8007986:	2300      	movs	r3, #0
 8007988:	f7f8 fd60 	bl	800044c <__aeabi_dcmpeq>
 800798c:	2800      	cmp	r0, #0
 800798e:	d033      	beq.n	80079f8 <_printf_float+0x290>
 8007990:	2301      	movs	r3, #1
 8007992:	4a37      	ldr	r2, [pc, #220]	@ (8007a70 <_printf_float+0x308>)
 8007994:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007996:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007998:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800799a:	47a0      	blx	r4
 800799c:	3001      	adds	r0, #1
 800799e:	d100      	bne.n	80079a2 <_printf_float+0x23a>
 80079a0:	e73e      	b.n	8007820 <_printf_float+0xb8>
 80079a2:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80079a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80079a6:	42b3      	cmp	r3, r6
 80079a8:	db02      	blt.n	80079b0 <_printf_float+0x248>
 80079aa:	682b      	ldr	r3, [r5, #0]
 80079ac:	07db      	lsls	r3, r3, #31
 80079ae:	d50c      	bpl.n	80079ca <_printf_float+0x262>
 80079b0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80079b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80079b6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80079b8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80079ba:	47a0      	blx	r4
 80079bc:	2400      	movs	r4, #0
 80079be:	3001      	adds	r0, #1
 80079c0:	d100      	bne.n	80079c4 <_printf_float+0x25c>
 80079c2:	e72d      	b.n	8007820 <_printf_float+0xb8>
 80079c4:	1e73      	subs	r3, r6, #1
 80079c6:	42a3      	cmp	r3, r4
 80079c8:	dc0a      	bgt.n	80079e0 <_printf_float+0x278>
 80079ca:	682b      	ldr	r3, [r5, #0]
 80079cc:	079b      	lsls	r3, r3, #30
 80079ce:	d500      	bpl.n	80079d2 <_printf_float+0x26a>
 80079d0:	e105      	b.n	8007bde <_printf_float+0x476>
 80079d2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80079d4:	68e8      	ldr	r0, [r5, #12]
 80079d6:	4298      	cmp	r0, r3
 80079d8:	db00      	blt.n	80079dc <_printf_float+0x274>
 80079da:	e723      	b.n	8007824 <_printf_float+0xbc>
 80079dc:	0018      	movs	r0, r3
 80079de:	e721      	b.n	8007824 <_printf_float+0xbc>
 80079e0:	002a      	movs	r2, r5
 80079e2:	2301      	movs	r3, #1
 80079e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80079e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80079e8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80079ea:	321a      	adds	r2, #26
 80079ec:	47b8      	blx	r7
 80079ee:	3001      	adds	r0, #1
 80079f0:	d100      	bne.n	80079f4 <_printf_float+0x28c>
 80079f2:	e715      	b.n	8007820 <_printf_float+0xb8>
 80079f4:	3401      	adds	r4, #1
 80079f6:	e7e5      	b.n	80079c4 <_printf_float+0x25c>
 80079f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	dc3a      	bgt.n	8007a74 <_printf_float+0x30c>
 80079fe:	2301      	movs	r3, #1
 8007a00:	4a1b      	ldr	r2, [pc, #108]	@ (8007a70 <_printf_float+0x308>)
 8007a02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007a04:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a06:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007a08:	47a0      	blx	r4
 8007a0a:	3001      	adds	r0, #1
 8007a0c:	d100      	bne.n	8007a10 <_printf_float+0x2a8>
 8007a0e:	e707      	b.n	8007820 <_printf_float+0xb8>
 8007a10:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8007a12:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007a14:	4333      	orrs	r3, r6
 8007a16:	d102      	bne.n	8007a1e <_printf_float+0x2b6>
 8007a18:	682b      	ldr	r3, [r5, #0]
 8007a1a:	07db      	lsls	r3, r3, #31
 8007a1c:	d5d5      	bpl.n	80079ca <_printf_float+0x262>
 8007a1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a20:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007a22:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007a24:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a26:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007a28:	47a0      	blx	r4
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	3001      	adds	r0, #1
 8007a2e:	d100      	bne.n	8007a32 <_printf_float+0x2ca>
 8007a30:	e6f6      	b.n	8007820 <_printf_float+0xb8>
 8007a32:	930c      	str	r3, [sp, #48]	@ 0x30
 8007a34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007a36:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007a38:	425b      	negs	r3, r3
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	dc01      	bgt.n	8007a42 <_printf_float+0x2da>
 8007a3e:	0033      	movs	r3, r6
 8007a40:	e792      	b.n	8007968 <_printf_float+0x200>
 8007a42:	002a      	movs	r2, r5
 8007a44:	2301      	movs	r3, #1
 8007a46:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007a48:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a4a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007a4c:	321a      	adds	r2, #26
 8007a4e:	47a0      	blx	r4
 8007a50:	3001      	adds	r0, #1
 8007a52:	d100      	bne.n	8007a56 <_printf_float+0x2ee>
 8007a54:	e6e4      	b.n	8007820 <_printf_float+0xb8>
 8007a56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a58:	3301      	adds	r3, #1
 8007a5a:	e7ea      	b.n	8007a32 <_printf_float+0x2ca>
 8007a5c:	7fefffff 	.word	0x7fefffff
 8007a60:	0800c3b8 	.word	0x0800c3b8
 8007a64:	0800c3bc 	.word	0x0800c3bc
 8007a68:	0800c3c0 	.word	0x0800c3c0
 8007a6c:	0800c3c4 	.word	0x0800c3c4
 8007a70:	0800c3c8 	.word	0x0800c3c8
 8007a74:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007a76:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8007a78:	930c      	str	r3, [sp, #48]	@ 0x30
 8007a7a:	429e      	cmp	r6, r3
 8007a7c:	dd00      	ble.n	8007a80 <_printf_float+0x318>
 8007a7e:	001e      	movs	r6, r3
 8007a80:	2e00      	cmp	r6, #0
 8007a82:	dc31      	bgt.n	8007ae8 <_printf_float+0x380>
 8007a84:	43f3      	mvns	r3, r6
 8007a86:	2400      	movs	r4, #0
 8007a88:	17db      	asrs	r3, r3, #31
 8007a8a:	4033      	ands	r3, r6
 8007a8c:	930e      	str	r3, [sp, #56]	@ 0x38
 8007a8e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8007a90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a92:	1af3      	subs	r3, r6, r3
 8007a94:	42a3      	cmp	r3, r4
 8007a96:	dc30      	bgt.n	8007afa <_printf_float+0x392>
 8007a98:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007a9a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	dc38      	bgt.n	8007b12 <_printf_float+0x3aa>
 8007aa0:	682b      	ldr	r3, [r5, #0]
 8007aa2:	07db      	lsls	r3, r3, #31
 8007aa4:	d435      	bmi.n	8007b12 <_printf_float+0x3aa>
 8007aa6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8007aa8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007aaa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007aac:	1b9b      	subs	r3, r3, r6
 8007aae:	1b14      	subs	r4, r2, r4
 8007ab0:	429c      	cmp	r4, r3
 8007ab2:	dd00      	ble.n	8007ab6 <_printf_float+0x34e>
 8007ab4:	001c      	movs	r4, r3
 8007ab6:	2c00      	cmp	r4, #0
 8007ab8:	dc34      	bgt.n	8007b24 <_printf_float+0x3bc>
 8007aba:	43e3      	mvns	r3, r4
 8007abc:	2600      	movs	r6, #0
 8007abe:	17db      	asrs	r3, r3, #31
 8007ac0:	401c      	ands	r4, r3
 8007ac2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007ac4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007ac6:	1ad3      	subs	r3, r2, r3
 8007ac8:	1b1b      	subs	r3, r3, r4
 8007aca:	42b3      	cmp	r3, r6
 8007acc:	dc00      	bgt.n	8007ad0 <_printf_float+0x368>
 8007ace:	e77c      	b.n	80079ca <_printf_float+0x262>
 8007ad0:	002a      	movs	r2, r5
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007ad6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ad8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007ada:	321a      	adds	r2, #26
 8007adc:	47b8      	blx	r7
 8007ade:	3001      	adds	r0, #1
 8007ae0:	d100      	bne.n	8007ae4 <_printf_float+0x37c>
 8007ae2:	e69d      	b.n	8007820 <_printf_float+0xb8>
 8007ae4:	3601      	adds	r6, #1
 8007ae6:	e7ec      	b.n	8007ac2 <_printf_float+0x35a>
 8007ae8:	0033      	movs	r3, r6
 8007aea:	003a      	movs	r2, r7
 8007aec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007aee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007af0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007af2:	47a0      	blx	r4
 8007af4:	3001      	adds	r0, #1
 8007af6:	d1c5      	bne.n	8007a84 <_printf_float+0x31c>
 8007af8:	e692      	b.n	8007820 <_printf_float+0xb8>
 8007afa:	002a      	movs	r2, r5
 8007afc:	2301      	movs	r3, #1
 8007afe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b00:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b02:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007b04:	321a      	adds	r2, #26
 8007b06:	47b0      	blx	r6
 8007b08:	3001      	adds	r0, #1
 8007b0a:	d100      	bne.n	8007b0e <_printf_float+0x3a6>
 8007b0c:	e688      	b.n	8007820 <_printf_float+0xb8>
 8007b0e:	3401      	adds	r4, #1
 8007b10:	e7bd      	b.n	8007a8e <_printf_float+0x326>
 8007b12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007b16:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b18:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b1a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007b1c:	47a0      	blx	r4
 8007b1e:	3001      	adds	r0, #1
 8007b20:	d1c1      	bne.n	8007aa6 <_printf_float+0x33e>
 8007b22:	e67d      	b.n	8007820 <_printf_float+0xb8>
 8007b24:	19ba      	adds	r2, r7, r6
 8007b26:	0023      	movs	r3, r4
 8007b28:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b2c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007b2e:	47b0      	blx	r6
 8007b30:	3001      	adds	r0, #1
 8007b32:	d1c2      	bne.n	8007aba <_printf_float+0x352>
 8007b34:	e674      	b.n	8007820 <_printf_float+0xb8>
 8007b36:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007b38:	930c      	str	r3, [sp, #48]	@ 0x30
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	dc02      	bgt.n	8007b44 <_printf_float+0x3dc>
 8007b3e:	2301      	movs	r3, #1
 8007b40:	421a      	tst	r2, r3
 8007b42:	d039      	beq.n	8007bb8 <_printf_float+0x450>
 8007b44:	2301      	movs	r3, #1
 8007b46:	003a      	movs	r2, r7
 8007b48:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b4c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007b4e:	47b0      	blx	r6
 8007b50:	3001      	adds	r0, #1
 8007b52:	d100      	bne.n	8007b56 <_printf_float+0x3ee>
 8007b54:	e664      	b.n	8007820 <_printf_float+0xb8>
 8007b56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b58:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007b5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b5c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b5e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007b60:	47b0      	blx	r6
 8007b62:	3001      	adds	r0, #1
 8007b64:	d100      	bne.n	8007b68 <_printf_float+0x400>
 8007b66:	e65b      	b.n	8007820 <_printf_float+0xb8>
 8007b68:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8007b6a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8007b6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007b6e:	2200      	movs	r2, #0
 8007b70:	3b01      	subs	r3, #1
 8007b72:	930c      	str	r3, [sp, #48]	@ 0x30
 8007b74:	2300      	movs	r3, #0
 8007b76:	f7f8 fc69 	bl	800044c <__aeabi_dcmpeq>
 8007b7a:	2800      	cmp	r0, #0
 8007b7c:	d11a      	bne.n	8007bb4 <_printf_float+0x44c>
 8007b7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007b80:	1c7a      	adds	r2, r7, #1
 8007b82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b84:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b86:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007b88:	47b0      	blx	r6
 8007b8a:	3001      	adds	r0, #1
 8007b8c:	d10e      	bne.n	8007bac <_printf_float+0x444>
 8007b8e:	e647      	b.n	8007820 <_printf_float+0xb8>
 8007b90:	002a      	movs	r2, r5
 8007b92:	2301      	movs	r3, #1
 8007b94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b98:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007b9a:	321a      	adds	r2, #26
 8007b9c:	47b8      	blx	r7
 8007b9e:	3001      	adds	r0, #1
 8007ba0:	d100      	bne.n	8007ba4 <_printf_float+0x43c>
 8007ba2:	e63d      	b.n	8007820 <_printf_float+0xb8>
 8007ba4:	3601      	adds	r6, #1
 8007ba6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ba8:	429e      	cmp	r6, r3
 8007baa:	dbf1      	blt.n	8007b90 <_printf_float+0x428>
 8007bac:	002a      	movs	r2, r5
 8007bae:	0023      	movs	r3, r4
 8007bb0:	3250      	adds	r2, #80	@ 0x50
 8007bb2:	e6da      	b.n	800796a <_printf_float+0x202>
 8007bb4:	2600      	movs	r6, #0
 8007bb6:	e7f6      	b.n	8007ba6 <_printf_float+0x43e>
 8007bb8:	003a      	movs	r2, r7
 8007bba:	e7e2      	b.n	8007b82 <_printf_float+0x41a>
 8007bbc:	002a      	movs	r2, r5
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007bc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007bc4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007bc6:	3219      	adds	r2, #25
 8007bc8:	47b0      	blx	r6
 8007bca:	3001      	adds	r0, #1
 8007bcc:	d100      	bne.n	8007bd0 <_printf_float+0x468>
 8007bce:	e627      	b.n	8007820 <_printf_float+0xb8>
 8007bd0:	3401      	adds	r4, #1
 8007bd2:	68eb      	ldr	r3, [r5, #12]
 8007bd4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007bd6:	1a9b      	subs	r3, r3, r2
 8007bd8:	42a3      	cmp	r3, r4
 8007bda:	dcef      	bgt.n	8007bbc <_printf_float+0x454>
 8007bdc:	e6f9      	b.n	80079d2 <_printf_float+0x26a>
 8007bde:	2400      	movs	r4, #0
 8007be0:	e7f7      	b.n	8007bd2 <_printf_float+0x46a>
 8007be2:	46c0      	nop			@ (mov r8, r8)

08007be4 <_printf_common>:
 8007be4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007be6:	0016      	movs	r6, r2
 8007be8:	9301      	str	r3, [sp, #4]
 8007bea:	688a      	ldr	r2, [r1, #8]
 8007bec:	690b      	ldr	r3, [r1, #16]
 8007bee:	000c      	movs	r4, r1
 8007bf0:	9000      	str	r0, [sp, #0]
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	da00      	bge.n	8007bf8 <_printf_common+0x14>
 8007bf6:	0013      	movs	r3, r2
 8007bf8:	0022      	movs	r2, r4
 8007bfa:	6033      	str	r3, [r6, #0]
 8007bfc:	3243      	adds	r2, #67	@ 0x43
 8007bfe:	7812      	ldrb	r2, [r2, #0]
 8007c00:	2a00      	cmp	r2, #0
 8007c02:	d001      	beq.n	8007c08 <_printf_common+0x24>
 8007c04:	3301      	adds	r3, #1
 8007c06:	6033      	str	r3, [r6, #0]
 8007c08:	6823      	ldr	r3, [r4, #0]
 8007c0a:	069b      	lsls	r3, r3, #26
 8007c0c:	d502      	bpl.n	8007c14 <_printf_common+0x30>
 8007c0e:	6833      	ldr	r3, [r6, #0]
 8007c10:	3302      	adds	r3, #2
 8007c12:	6033      	str	r3, [r6, #0]
 8007c14:	6822      	ldr	r2, [r4, #0]
 8007c16:	2306      	movs	r3, #6
 8007c18:	0015      	movs	r5, r2
 8007c1a:	401d      	ands	r5, r3
 8007c1c:	421a      	tst	r2, r3
 8007c1e:	d027      	beq.n	8007c70 <_printf_common+0x8c>
 8007c20:	0023      	movs	r3, r4
 8007c22:	3343      	adds	r3, #67	@ 0x43
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	1e5a      	subs	r2, r3, #1
 8007c28:	4193      	sbcs	r3, r2
 8007c2a:	6822      	ldr	r2, [r4, #0]
 8007c2c:	0692      	lsls	r2, r2, #26
 8007c2e:	d430      	bmi.n	8007c92 <_printf_common+0xae>
 8007c30:	0022      	movs	r2, r4
 8007c32:	9901      	ldr	r1, [sp, #4]
 8007c34:	9800      	ldr	r0, [sp, #0]
 8007c36:	9d08      	ldr	r5, [sp, #32]
 8007c38:	3243      	adds	r2, #67	@ 0x43
 8007c3a:	47a8      	blx	r5
 8007c3c:	3001      	adds	r0, #1
 8007c3e:	d025      	beq.n	8007c8c <_printf_common+0xa8>
 8007c40:	2206      	movs	r2, #6
 8007c42:	6823      	ldr	r3, [r4, #0]
 8007c44:	2500      	movs	r5, #0
 8007c46:	4013      	ands	r3, r2
 8007c48:	2b04      	cmp	r3, #4
 8007c4a:	d105      	bne.n	8007c58 <_printf_common+0x74>
 8007c4c:	6833      	ldr	r3, [r6, #0]
 8007c4e:	68e5      	ldr	r5, [r4, #12]
 8007c50:	1aed      	subs	r5, r5, r3
 8007c52:	43eb      	mvns	r3, r5
 8007c54:	17db      	asrs	r3, r3, #31
 8007c56:	401d      	ands	r5, r3
 8007c58:	68a3      	ldr	r3, [r4, #8]
 8007c5a:	6922      	ldr	r2, [r4, #16]
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	dd01      	ble.n	8007c64 <_printf_common+0x80>
 8007c60:	1a9b      	subs	r3, r3, r2
 8007c62:	18ed      	adds	r5, r5, r3
 8007c64:	2600      	movs	r6, #0
 8007c66:	42b5      	cmp	r5, r6
 8007c68:	d120      	bne.n	8007cac <_printf_common+0xc8>
 8007c6a:	2000      	movs	r0, #0
 8007c6c:	e010      	b.n	8007c90 <_printf_common+0xac>
 8007c6e:	3501      	adds	r5, #1
 8007c70:	68e3      	ldr	r3, [r4, #12]
 8007c72:	6832      	ldr	r2, [r6, #0]
 8007c74:	1a9b      	subs	r3, r3, r2
 8007c76:	42ab      	cmp	r3, r5
 8007c78:	ddd2      	ble.n	8007c20 <_printf_common+0x3c>
 8007c7a:	0022      	movs	r2, r4
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	9901      	ldr	r1, [sp, #4]
 8007c80:	9800      	ldr	r0, [sp, #0]
 8007c82:	9f08      	ldr	r7, [sp, #32]
 8007c84:	3219      	adds	r2, #25
 8007c86:	47b8      	blx	r7
 8007c88:	3001      	adds	r0, #1
 8007c8a:	d1f0      	bne.n	8007c6e <_printf_common+0x8a>
 8007c8c:	2001      	movs	r0, #1
 8007c8e:	4240      	negs	r0, r0
 8007c90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c92:	2030      	movs	r0, #48	@ 0x30
 8007c94:	18e1      	adds	r1, r4, r3
 8007c96:	3143      	adds	r1, #67	@ 0x43
 8007c98:	7008      	strb	r0, [r1, #0]
 8007c9a:	0021      	movs	r1, r4
 8007c9c:	1c5a      	adds	r2, r3, #1
 8007c9e:	3145      	adds	r1, #69	@ 0x45
 8007ca0:	7809      	ldrb	r1, [r1, #0]
 8007ca2:	18a2      	adds	r2, r4, r2
 8007ca4:	3243      	adds	r2, #67	@ 0x43
 8007ca6:	3302      	adds	r3, #2
 8007ca8:	7011      	strb	r1, [r2, #0]
 8007caa:	e7c1      	b.n	8007c30 <_printf_common+0x4c>
 8007cac:	0022      	movs	r2, r4
 8007cae:	2301      	movs	r3, #1
 8007cb0:	9901      	ldr	r1, [sp, #4]
 8007cb2:	9800      	ldr	r0, [sp, #0]
 8007cb4:	9f08      	ldr	r7, [sp, #32]
 8007cb6:	321a      	adds	r2, #26
 8007cb8:	47b8      	blx	r7
 8007cba:	3001      	adds	r0, #1
 8007cbc:	d0e6      	beq.n	8007c8c <_printf_common+0xa8>
 8007cbe:	3601      	adds	r6, #1
 8007cc0:	e7d1      	b.n	8007c66 <_printf_common+0x82>
	...

08007cc4 <_printf_i>:
 8007cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cc6:	b08b      	sub	sp, #44	@ 0x2c
 8007cc8:	9206      	str	r2, [sp, #24]
 8007cca:	000a      	movs	r2, r1
 8007ccc:	3243      	adds	r2, #67	@ 0x43
 8007cce:	9307      	str	r3, [sp, #28]
 8007cd0:	9005      	str	r0, [sp, #20]
 8007cd2:	9203      	str	r2, [sp, #12]
 8007cd4:	7e0a      	ldrb	r2, [r1, #24]
 8007cd6:	000c      	movs	r4, r1
 8007cd8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007cda:	2a78      	cmp	r2, #120	@ 0x78
 8007cdc:	d809      	bhi.n	8007cf2 <_printf_i+0x2e>
 8007cde:	2a62      	cmp	r2, #98	@ 0x62
 8007ce0:	d80b      	bhi.n	8007cfa <_printf_i+0x36>
 8007ce2:	2a00      	cmp	r2, #0
 8007ce4:	d100      	bne.n	8007ce8 <_printf_i+0x24>
 8007ce6:	e0bc      	b.n	8007e62 <_printf_i+0x19e>
 8007ce8:	497b      	ldr	r1, [pc, #492]	@ (8007ed8 <_printf_i+0x214>)
 8007cea:	9104      	str	r1, [sp, #16]
 8007cec:	2a58      	cmp	r2, #88	@ 0x58
 8007cee:	d100      	bne.n	8007cf2 <_printf_i+0x2e>
 8007cf0:	e090      	b.n	8007e14 <_printf_i+0x150>
 8007cf2:	0025      	movs	r5, r4
 8007cf4:	3542      	adds	r5, #66	@ 0x42
 8007cf6:	702a      	strb	r2, [r5, #0]
 8007cf8:	e022      	b.n	8007d40 <_printf_i+0x7c>
 8007cfa:	0010      	movs	r0, r2
 8007cfc:	3863      	subs	r0, #99	@ 0x63
 8007cfe:	2815      	cmp	r0, #21
 8007d00:	d8f7      	bhi.n	8007cf2 <_printf_i+0x2e>
 8007d02:	f7f8 fa13 	bl	800012c <__gnu_thumb1_case_shi>
 8007d06:	0016      	.short	0x0016
 8007d08:	fff6001f 	.word	0xfff6001f
 8007d0c:	fff6fff6 	.word	0xfff6fff6
 8007d10:	001ffff6 	.word	0x001ffff6
 8007d14:	fff6fff6 	.word	0xfff6fff6
 8007d18:	fff6fff6 	.word	0xfff6fff6
 8007d1c:	003600a1 	.word	0x003600a1
 8007d20:	fff60080 	.word	0xfff60080
 8007d24:	00b2fff6 	.word	0x00b2fff6
 8007d28:	0036fff6 	.word	0x0036fff6
 8007d2c:	fff6fff6 	.word	0xfff6fff6
 8007d30:	0084      	.short	0x0084
 8007d32:	0025      	movs	r5, r4
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	3542      	adds	r5, #66	@ 0x42
 8007d38:	1d11      	adds	r1, r2, #4
 8007d3a:	6019      	str	r1, [r3, #0]
 8007d3c:	6813      	ldr	r3, [r2, #0]
 8007d3e:	702b      	strb	r3, [r5, #0]
 8007d40:	2301      	movs	r3, #1
 8007d42:	e0a0      	b.n	8007e86 <_printf_i+0x1c2>
 8007d44:	6818      	ldr	r0, [r3, #0]
 8007d46:	6809      	ldr	r1, [r1, #0]
 8007d48:	1d02      	adds	r2, r0, #4
 8007d4a:	060d      	lsls	r5, r1, #24
 8007d4c:	d50b      	bpl.n	8007d66 <_printf_i+0xa2>
 8007d4e:	6806      	ldr	r6, [r0, #0]
 8007d50:	601a      	str	r2, [r3, #0]
 8007d52:	2e00      	cmp	r6, #0
 8007d54:	da03      	bge.n	8007d5e <_printf_i+0x9a>
 8007d56:	232d      	movs	r3, #45	@ 0x2d
 8007d58:	9a03      	ldr	r2, [sp, #12]
 8007d5a:	4276      	negs	r6, r6
 8007d5c:	7013      	strb	r3, [r2, #0]
 8007d5e:	4b5e      	ldr	r3, [pc, #376]	@ (8007ed8 <_printf_i+0x214>)
 8007d60:	270a      	movs	r7, #10
 8007d62:	9304      	str	r3, [sp, #16]
 8007d64:	e018      	b.n	8007d98 <_printf_i+0xd4>
 8007d66:	6806      	ldr	r6, [r0, #0]
 8007d68:	601a      	str	r2, [r3, #0]
 8007d6a:	0649      	lsls	r1, r1, #25
 8007d6c:	d5f1      	bpl.n	8007d52 <_printf_i+0x8e>
 8007d6e:	b236      	sxth	r6, r6
 8007d70:	e7ef      	b.n	8007d52 <_printf_i+0x8e>
 8007d72:	6808      	ldr	r0, [r1, #0]
 8007d74:	6819      	ldr	r1, [r3, #0]
 8007d76:	c940      	ldmia	r1!, {r6}
 8007d78:	0605      	lsls	r5, r0, #24
 8007d7a:	d402      	bmi.n	8007d82 <_printf_i+0xbe>
 8007d7c:	0640      	lsls	r0, r0, #25
 8007d7e:	d500      	bpl.n	8007d82 <_printf_i+0xbe>
 8007d80:	b2b6      	uxth	r6, r6
 8007d82:	6019      	str	r1, [r3, #0]
 8007d84:	4b54      	ldr	r3, [pc, #336]	@ (8007ed8 <_printf_i+0x214>)
 8007d86:	270a      	movs	r7, #10
 8007d88:	9304      	str	r3, [sp, #16]
 8007d8a:	2a6f      	cmp	r2, #111	@ 0x6f
 8007d8c:	d100      	bne.n	8007d90 <_printf_i+0xcc>
 8007d8e:	3f02      	subs	r7, #2
 8007d90:	0023      	movs	r3, r4
 8007d92:	2200      	movs	r2, #0
 8007d94:	3343      	adds	r3, #67	@ 0x43
 8007d96:	701a      	strb	r2, [r3, #0]
 8007d98:	6863      	ldr	r3, [r4, #4]
 8007d9a:	60a3      	str	r3, [r4, #8]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	db03      	blt.n	8007da8 <_printf_i+0xe4>
 8007da0:	2104      	movs	r1, #4
 8007da2:	6822      	ldr	r2, [r4, #0]
 8007da4:	438a      	bics	r2, r1
 8007da6:	6022      	str	r2, [r4, #0]
 8007da8:	2e00      	cmp	r6, #0
 8007daa:	d102      	bne.n	8007db2 <_printf_i+0xee>
 8007dac:	9d03      	ldr	r5, [sp, #12]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00c      	beq.n	8007dcc <_printf_i+0x108>
 8007db2:	9d03      	ldr	r5, [sp, #12]
 8007db4:	0030      	movs	r0, r6
 8007db6:	0039      	movs	r1, r7
 8007db8:	f7f8 fa48 	bl	800024c <__aeabi_uidivmod>
 8007dbc:	9b04      	ldr	r3, [sp, #16]
 8007dbe:	3d01      	subs	r5, #1
 8007dc0:	5c5b      	ldrb	r3, [r3, r1]
 8007dc2:	702b      	strb	r3, [r5, #0]
 8007dc4:	0033      	movs	r3, r6
 8007dc6:	0006      	movs	r6, r0
 8007dc8:	429f      	cmp	r7, r3
 8007dca:	d9f3      	bls.n	8007db4 <_printf_i+0xf0>
 8007dcc:	2f08      	cmp	r7, #8
 8007dce:	d109      	bne.n	8007de4 <_printf_i+0x120>
 8007dd0:	6823      	ldr	r3, [r4, #0]
 8007dd2:	07db      	lsls	r3, r3, #31
 8007dd4:	d506      	bpl.n	8007de4 <_printf_i+0x120>
 8007dd6:	6862      	ldr	r2, [r4, #4]
 8007dd8:	6923      	ldr	r3, [r4, #16]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	dc02      	bgt.n	8007de4 <_printf_i+0x120>
 8007dde:	2330      	movs	r3, #48	@ 0x30
 8007de0:	3d01      	subs	r5, #1
 8007de2:	702b      	strb	r3, [r5, #0]
 8007de4:	9b03      	ldr	r3, [sp, #12]
 8007de6:	1b5b      	subs	r3, r3, r5
 8007de8:	6123      	str	r3, [r4, #16]
 8007dea:	9b07      	ldr	r3, [sp, #28]
 8007dec:	0021      	movs	r1, r4
 8007dee:	9300      	str	r3, [sp, #0]
 8007df0:	9805      	ldr	r0, [sp, #20]
 8007df2:	9b06      	ldr	r3, [sp, #24]
 8007df4:	aa09      	add	r2, sp, #36	@ 0x24
 8007df6:	f7ff fef5 	bl	8007be4 <_printf_common>
 8007dfa:	3001      	adds	r0, #1
 8007dfc:	d148      	bne.n	8007e90 <_printf_i+0x1cc>
 8007dfe:	2001      	movs	r0, #1
 8007e00:	4240      	negs	r0, r0
 8007e02:	b00b      	add	sp, #44	@ 0x2c
 8007e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e06:	2220      	movs	r2, #32
 8007e08:	6809      	ldr	r1, [r1, #0]
 8007e0a:	430a      	orrs	r2, r1
 8007e0c:	6022      	str	r2, [r4, #0]
 8007e0e:	2278      	movs	r2, #120	@ 0x78
 8007e10:	4932      	ldr	r1, [pc, #200]	@ (8007edc <_printf_i+0x218>)
 8007e12:	9104      	str	r1, [sp, #16]
 8007e14:	0021      	movs	r1, r4
 8007e16:	3145      	adds	r1, #69	@ 0x45
 8007e18:	700a      	strb	r2, [r1, #0]
 8007e1a:	6819      	ldr	r1, [r3, #0]
 8007e1c:	6822      	ldr	r2, [r4, #0]
 8007e1e:	c940      	ldmia	r1!, {r6}
 8007e20:	0610      	lsls	r0, r2, #24
 8007e22:	d402      	bmi.n	8007e2a <_printf_i+0x166>
 8007e24:	0650      	lsls	r0, r2, #25
 8007e26:	d500      	bpl.n	8007e2a <_printf_i+0x166>
 8007e28:	b2b6      	uxth	r6, r6
 8007e2a:	6019      	str	r1, [r3, #0]
 8007e2c:	07d3      	lsls	r3, r2, #31
 8007e2e:	d502      	bpl.n	8007e36 <_printf_i+0x172>
 8007e30:	2320      	movs	r3, #32
 8007e32:	4313      	orrs	r3, r2
 8007e34:	6023      	str	r3, [r4, #0]
 8007e36:	2e00      	cmp	r6, #0
 8007e38:	d001      	beq.n	8007e3e <_printf_i+0x17a>
 8007e3a:	2710      	movs	r7, #16
 8007e3c:	e7a8      	b.n	8007d90 <_printf_i+0xcc>
 8007e3e:	2220      	movs	r2, #32
 8007e40:	6823      	ldr	r3, [r4, #0]
 8007e42:	4393      	bics	r3, r2
 8007e44:	6023      	str	r3, [r4, #0]
 8007e46:	e7f8      	b.n	8007e3a <_printf_i+0x176>
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	680d      	ldr	r5, [r1, #0]
 8007e4c:	1d10      	adds	r0, r2, #4
 8007e4e:	6949      	ldr	r1, [r1, #20]
 8007e50:	6018      	str	r0, [r3, #0]
 8007e52:	6813      	ldr	r3, [r2, #0]
 8007e54:	062e      	lsls	r6, r5, #24
 8007e56:	d501      	bpl.n	8007e5c <_printf_i+0x198>
 8007e58:	6019      	str	r1, [r3, #0]
 8007e5a:	e002      	b.n	8007e62 <_printf_i+0x19e>
 8007e5c:	066d      	lsls	r5, r5, #25
 8007e5e:	d5fb      	bpl.n	8007e58 <_printf_i+0x194>
 8007e60:	8019      	strh	r1, [r3, #0]
 8007e62:	2300      	movs	r3, #0
 8007e64:	9d03      	ldr	r5, [sp, #12]
 8007e66:	6123      	str	r3, [r4, #16]
 8007e68:	e7bf      	b.n	8007dea <_printf_i+0x126>
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	1d11      	adds	r1, r2, #4
 8007e6e:	6019      	str	r1, [r3, #0]
 8007e70:	6815      	ldr	r5, [r2, #0]
 8007e72:	2100      	movs	r1, #0
 8007e74:	0028      	movs	r0, r5
 8007e76:	6862      	ldr	r2, [r4, #4]
 8007e78:	f000 fc19 	bl	80086ae <memchr>
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	d001      	beq.n	8007e84 <_printf_i+0x1c0>
 8007e80:	1b40      	subs	r0, r0, r5
 8007e82:	6060      	str	r0, [r4, #4]
 8007e84:	6863      	ldr	r3, [r4, #4]
 8007e86:	6123      	str	r3, [r4, #16]
 8007e88:	2300      	movs	r3, #0
 8007e8a:	9a03      	ldr	r2, [sp, #12]
 8007e8c:	7013      	strb	r3, [r2, #0]
 8007e8e:	e7ac      	b.n	8007dea <_printf_i+0x126>
 8007e90:	002a      	movs	r2, r5
 8007e92:	6923      	ldr	r3, [r4, #16]
 8007e94:	9906      	ldr	r1, [sp, #24]
 8007e96:	9805      	ldr	r0, [sp, #20]
 8007e98:	9d07      	ldr	r5, [sp, #28]
 8007e9a:	47a8      	blx	r5
 8007e9c:	3001      	adds	r0, #1
 8007e9e:	d0ae      	beq.n	8007dfe <_printf_i+0x13a>
 8007ea0:	6823      	ldr	r3, [r4, #0]
 8007ea2:	079b      	lsls	r3, r3, #30
 8007ea4:	d415      	bmi.n	8007ed2 <_printf_i+0x20e>
 8007ea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ea8:	68e0      	ldr	r0, [r4, #12]
 8007eaa:	4298      	cmp	r0, r3
 8007eac:	daa9      	bge.n	8007e02 <_printf_i+0x13e>
 8007eae:	0018      	movs	r0, r3
 8007eb0:	e7a7      	b.n	8007e02 <_printf_i+0x13e>
 8007eb2:	0022      	movs	r2, r4
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	9906      	ldr	r1, [sp, #24]
 8007eb8:	9805      	ldr	r0, [sp, #20]
 8007eba:	9e07      	ldr	r6, [sp, #28]
 8007ebc:	3219      	adds	r2, #25
 8007ebe:	47b0      	blx	r6
 8007ec0:	3001      	adds	r0, #1
 8007ec2:	d09c      	beq.n	8007dfe <_printf_i+0x13a>
 8007ec4:	3501      	adds	r5, #1
 8007ec6:	68e3      	ldr	r3, [r4, #12]
 8007ec8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007eca:	1a9b      	subs	r3, r3, r2
 8007ecc:	42ab      	cmp	r3, r5
 8007ece:	dcf0      	bgt.n	8007eb2 <_printf_i+0x1ee>
 8007ed0:	e7e9      	b.n	8007ea6 <_printf_i+0x1e2>
 8007ed2:	2500      	movs	r5, #0
 8007ed4:	e7f7      	b.n	8007ec6 <_printf_i+0x202>
 8007ed6:	46c0      	nop			@ (mov r8, r8)
 8007ed8:	0800c3ca 	.word	0x0800c3ca
 8007edc:	0800c3db 	.word	0x0800c3db

08007ee0 <_scanf_float>:
 8007ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ee2:	b08b      	sub	sp, #44	@ 0x2c
 8007ee4:	0016      	movs	r6, r2
 8007ee6:	9003      	str	r0, [sp, #12]
 8007ee8:	22ae      	movs	r2, #174	@ 0xae
 8007eea:	2000      	movs	r0, #0
 8007eec:	9307      	str	r3, [sp, #28]
 8007eee:	688b      	ldr	r3, [r1, #8]
 8007ef0:	000c      	movs	r4, r1
 8007ef2:	1e59      	subs	r1, r3, #1
 8007ef4:	0052      	lsls	r2, r2, #1
 8007ef6:	9006      	str	r0, [sp, #24]
 8007ef8:	4291      	cmp	r1, r2
 8007efa:	d905      	bls.n	8007f08 <_scanf_float+0x28>
 8007efc:	3b5e      	subs	r3, #94	@ 0x5e
 8007efe:	3bff      	subs	r3, #255	@ 0xff
 8007f00:	9306      	str	r3, [sp, #24]
 8007f02:	235e      	movs	r3, #94	@ 0x5e
 8007f04:	33ff      	adds	r3, #255	@ 0xff
 8007f06:	60a3      	str	r3, [r4, #8]
 8007f08:	23f0      	movs	r3, #240	@ 0xf0
 8007f0a:	6822      	ldr	r2, [r4, #0]
 8007f0c:	00db      	lsls	r3, r3, #3
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	6023      	str	r3, [r4, #0]
 8007f12:	0023      	movs	r3, r4
 8007f14:	2500      	movs	r5, #0
 8007f16:	331c      	adds	r3, #28
 8007f18:	001f      	movs	r7, r3
 8007f1a:	9304      	str	r3, [sp, #16]
 8007f1c:	9502      	str	r5, [sp, #8]
 8007f1e:	9509      	str	r5, [sp, #36]	@ 0x24
 8007f20:	9508      	str	r5, [sp, #32]
 8007f22:	9501      	str	r5, [sp, #4]
 8007f24:	9505      	str	r5, [sp, #20]
 8007f26:	68a2      	ldr	r2, [r4, #8]
 8007f28:	2a00      	cmp	r2, #0
 8007f2a:	d00a      	beq.n	8007f42 <_scanf_float+0x62>
 8007f2c:	6833      	ldr	r3, [r6, #0]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	2b4e      	cmp	r3, #78	@ 0x4e
 8007f32:	d844      	bhi.n	8007fbe <_scanf_float+0xde>
 8007f34:	0018      	movs	r0, r3
 8007f36:	2b40      	cmp	r3, #64	@ 0x40
 8007f38:	d82c      	bhi.n	8007f94 <_scanf_float+0xb4>
 8007f3a:	382b      	subs	r0, #43	@ 0x2b
 8007f3c:	b2c1      	uxtb	r1, r0
 8007f3e:	290e      	cmp	r1, #14
 8007f40:	d92a      	bls.n	8007f98 <_scanf_float+0xb8>
 8007f42:	9b01      	ldr	r3, [sp, #4]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d003      	beq.n	8007f50 <_scanf_float+0x70>
 8007f48:	6823      	ldr	r3, [r4, #0]
 8007f4a:	4aa6      	ldr	r2, [pc, #664]	@ (80081e4 <_scanf_float+0x304>)
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	6023      	str	r3, [r4, #0]
 8007f50:	9b02      	ldr	r3, [sp, #8]
 8007f52:	3b01      	subs	r3, #1
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d900      	bls.n	8007f5a <_scanf_float+0x7a>
 8007f58:	e0fe      	b.n	8008158 <_scanf_float+0x278>
 8007f5a:	25be      	movs	r5, #190	@ 0xbe
 8007f5c:	006d      	lsls	r5, r5, #1
 8007f5e:	9b04      	ldr	r3, [sp, #16]
 8007f60:	429f      	cmp	r7, r3
 8007f62:	d900      	bls.n	8007f66 <_scanf_float+0x86>
 8007f64:	e0ee      	b.n	8008144 <_scanf_float+0x264>
 8007f66:	2001      	movs	r0, #1
 8007f68:	b00b      	add	sp, #44	@ 0x2c
 8007f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f6c:	0018      	movs	r0, r3
 8007f6e:	3861      	subs	r0, #97	@ 0x61
 8007f70:	280d      	cmp	r0, #13
 8007f72:	d8e6      	bhi.n	8007f42 <_scanf_float+0x62>
 8007f74:	f7f8 f8da 	bl	800012c <__gnu_thumb1_case_shi>
 8007f78:	ffe50089 	.word	0xffe50089
 8007f7c:	ffe5ffe5 	.word	0xffe5ffe5
 8007f80:	00a700bb 	.word	0x00a700bb
 8007f84:	ffe5ffe5 	.word	0xffe5ffe5
 8007f88:	ffe5008f 	.word	0xffe5008f
 8007f8c:	ffe5ffe5 	.word	0xffe5ffe5
 8007f90:	006bffe5 	.word	0x006bffe5
 8007f94:	3841      	subs	r0, #65	@ 0x41
 8007f96:	e7eb      	b.n	8007f70 <_scanf_float+0x90>
 8007f98:	280e      	cmp	r0, #14
 8007f9a:	d8d2      	bhi.n	8007f42 <_scanf_float+0x62>
 8007f9c:	f7f8 f8c6 	bl	800012c <__gnu_thumb1_case_shi>
 8007fa0:	ffd1004f 	.word	0xffd1004f
 8007fa4:	009d004f 	.word	0x009d004f
 8007fa8:	0021ffd1 	.word	0x0021ffd1
 8007fac:	00410041 	.word	0x00410041
 8007fb0:	00410041 	.word	0x00410041
 8007fb4:	00410041 	.word	0x00410041
 8007fb8:	00410041 	.word	0x00410041
 8007fbc:	0041      	.short	0x0041
 8007fbe:	2b6e      	cmp	r3, #110	@ 0x6e
 8007fc0:	d80a      	bhi.n	8007fd8 <_scanf_float+0xf8>
 8007fc2:	2b60      	cmp	r3, #96	@ 0x60
 8007fc4:	d8d2      	bhi.n	8007f6c <_scanf_float+0x8c>
 8007fc6:	2b54      	cmp	r3, #84	@ 0x54
 8007fc8:	d100      	bne.n	8007fcc <_scanf_float+0xec>
 8007fca:	e081      	b.n	80080d0 <_scanf_float+0x1f0>
 8007fcc:	2b59      	cmp	r3, #89	@ 0x59
 8007fce:	d1b8      	bne.n	8007f42 <_scanf_float+0x62>
 8007fd0:	2d07      	cmp	r5, #7
 8007fd2:	d1b6      	bne.n	8007f42 <_scanf_float+0x62>
 8007fd4:	2508      	movs	r5, #8
 8007fd6:	e02f      	b.n	8008038 <_scanf_float+0x158>
 8007fd8:	2b74      	cmp	r3, #116	@ 0x74
 8007fda:	d079      	beq.n	80080d0 <_scanf_float+0x1f0>
 8007fdc:	2b79      	cmp	r3, #121	@ 0x79
 8007fde:	d0f7      	beq.n	8007fd0 <_scanf_float+0xf0>
 8007fe0:	e7af      	b.n	8007f42 <_scanf_float+0x62>
 8007fe2:	6821      	ldr	r1, [r4, #0]
 8007fe4:	05c8      	lsls	r0, r1, #23
 8007fe6:	d51c      	bpl.n	8008022 <_scanf_float+0x142>
 8007fe8:	2380      	movs	r3, #128	@ 0x80
 8007fea:	4399      	bics	r1, r3
 8007fec:	9b01      	ldr	r3, [sp, #4]
 8007fee:	6021      	str	r1, [r4, #0]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	9301      	str	r3, [sp, #4]
 8007ff4:	9b06      	ldr	r3, [sp, #24]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d003      	beq.n	8008002 <_scanf_float+0x122>
 8007ffa:	3b01      	subs	r3, #1
 8007ffc:	3201      	adds	r2, #1
 8007ffe:	9306      	str	r3, [sp, #24]
 8008000:	60a2      	str	r2, [r4, #8]
 8008002:	68a3      	ldr	r3, [r4, #8]
 8008004:	3b01      	subs	r3, #1
 8008006:	60a3      	str	r3, [r4, #8]
 8008008:	6923      	ldr	r3, [r4, #16]
 800800a:	3301      	adds	r3, #1
 800800c:	6123      	str	r3, [r4, #16]
 800800e:	6873      	ldr	r3, [r6, #4]
 8008010:	3b01      	subs	r3, #1
 8008012:	6073      	str	r3, [r6, #4]
 8008014:	2b00      	cmp	r3, #0
 8008016:	dc00      	bgt.n	800801a <_scanf_float+0x13a>
 8008018:	e08a      	b.n	8008130 <_scanf_float+0x250>
 800801a:	6833      	ldr	r3, [r6, #0]
 800801c:	3301      	adds	r3, #1
 800801e:	6033      	str	r3, [r6, #0]
 8008020:	e781      	b.n	8007f26 <_scanf_float+0x46>
 8008022:	9a02      	ldr	r2, [sp, #8]
 8008024:	1951      	adds	r1, r2, r5
 8008026:	2900      	cmp	r1, #0
 8008028:	d000      	beq.n	800802c <_scanf_float+0x14c>
 800802a:	e78a      	b.n	8007f42 <_scanf_float+0x62>
 800802c:	000d      	movs	r5, r1
 800802e:	6822      	ldr	r2, [r4, #0]
 8008030:	486d      	ldr	r0, [pc, #436]	@ (80081e8 <_scanf_float+0x308>)
 8008032:	9102      	str	r1, [sp, #8]
 8008034:	4002      	ands	r2, r0
 8008036:	6022      	str	r2, [r4, #0]
 8008038:	703b      	strb	r3, [r7, #0]
 800803a:	3701      	adds	r7, #1
 800803c:	e7e1      	b.n	8008002 <_scanf_float+0x122>
 800803e:	2180      	movs	r1, #128	@ 0x80
 8008040:	6822      	ldr	r2, [r4, #0]
 8008042:	420a      	tst	r2, r1
 8008044:	d100      	bne.n	8008048 <_scanf_float+0x168>
 8008046:	e77c      	b.n	8007f42 <_scanf_float+0x62>
 8008048:	438a      	bics	r2, r1
 800804a:	6022      	str	r2, [r4, #0]
 800804c:	e7f4      	b.n	8008038 <_scanf_float+0x158>
 800804e:	9a02      	ldr	r2, [sp, #8]
 8008050:	2a00      	cmp	r2, #0
 8008052:	d10f      	bne.n	8008074 <_scanf_float+0x194>
 8008054:	9a01      	ldr	r2, [sp, #4]
 8008056:	2a00      	cmp	r2, #0
 8008058:	d10f      	bne.n	800807a <_scanf_float+0x19a>
 800805a:	6822      	ldr	r2, [r4, #0]
 800805c:	21e0      	movs	r1, #224	@ 0xe0
 800805e:	0010      	movs	r0, r2
 8008060:	00c9      	lsls	r1, r1, #3
 8008062:	4008      	ands	r0, r1
 8008064:	4288      	cmp	r0, r1
 8008066:	d108      	bne.n	800807a <_scanf_float+0x19a>
 8008068:	4960      	ldr	r1, [pc, #384]	@ (80081ec <_scanf_float+0x30c>)
 800806a:	400a      	ands	r2, r1
 800806c:	6022      	str	r2, [r4, #0]
 800806e:	2201      	movs	r2, #1
 8008070:	9202      	str	r2, [sp, #8]
 8008072:	e7e1      	b.n	8008038 <_scanf_float+0x158>
 8008074:	9a02      	ldr	r2, [sp, #8]
 8008076:	2a02      	cmp	r2, #2
 8008078:	d058      	beq.n	800812c <_scanf_float+0x24c>
 800807a:	2d01      	cmp	r5, #1
 800807c:	d002      	beq.n	8008084 <_scanf_float+0x1a4>
 800807e:	2d04      	cmp	r5, #4
 8008080:	d000      	beq.n	8008084 <_scanf_float+0x1a4>
 8008082:	e75e      	b.n	8007f42 <_scanf_float+0x62>
 8008084:	3501      	adds	r5, #1
 8008086:	b2ed      	uxtb	r5, r5
 8008088:	e7d6      	b.n	8008038 <_scanf_float+0x158>
 800808a:	9a02      	ldr	r2, [sp, #8]
 800808c:	2a01      	cmp	r2, #1
 800808e:	d000      	beq.n	8008092 <_scanf_float+0x1b2>
 8008090:	e757      	b.n	8007f42 <_scanf_float+0x62>
 8008092:	2202      	movs	r2, #2
 8008094:	e7ec      	b.n	8008070 <_scanf_float+0x190>
 8008096:	2d00      	cmp	r5, #0
 8008098:	d110      	bne.n	80080bc <_scanf_float+0x1dc>
 800809a:	9a01      	ldr	r2, [sp, #4]
 800809c:	2a00      	cmp	r2, #0
 800809e:	d000      	beq.n	80080a2 <_scanf_float+0x1c2>
 80080a0:	e752      	b.n	8007f48 <_scanf_float+0x68>
 80080a2:	6822      	ldr	r2, [r4, #0]
 80080a4:	21e0      	movs	r1, #224	@ 0xe0
 80080a6:	0010      	movs	r0, r2
 80080a8:	00c9      	lsls	r1, r1, #3
 80080aa:	4008      	ands	r0, r1
 80080ac:	4288      	cmp	r0, r1
 80080ae:	d000      	beq.n	80080b2 <_scanf_float+0x1d2>
 80080b0:	e11d      	b.n	80082ee <_scanf_float+0x40e>
 80080b2:	494e      	ldr	r1, [pc, #312]	@ (80081ec <_scanf_float+0x30c>)
 80080b4:	3501      	adds	r5, #1
 80080b6:	400a      	ands	r2, r1
 80080b8:	6022      	str	r2, [r4, #0]
 80080ba:	e7bd      	b.n	8008038 <_scanf_float+0x158>
 80080bc:	21fd      	movs	r1, #253	@ 0xfd
 80080be:	1eea      	subs	r2, r5, #3
 80080c0:	420a      	tst	r2, r1
 80080c2:	d0df      	beq.n	8008084 <_scanf_float+0x1a4>
 80080c4:	e73d      	b.n	8007f42 <_scanf_float+0x62>
 80080c6:	2d02      	cmp	r5, #2
 80080c8:	d000      	beq.n	80080cc <_scanf_float+0x1ec>
 80080ca:	e73a      	b.n	8007f42 <_scanf_float+0x62>
 80080cc:	2503      	movs	r5, #3
 80080ce:	e7b3      	b.n	8008038 <_scanf_float+0x158>
 80080d0:	2d06      	cmp	r5, #6
 80080d2:	d000      	beq.n	80080d6 <_scanf_float+0x1f6>
 80080d4:	e735      	b.n	8007f42 <_scanf_float+0x62>
 80080d6:	2507      	movs	r5, #7
 80080d8:	e7ae      	b.n	8008038 <_scanf_float+0x158>
 80080da:	6822      	ldr	r2, [r4, #0]
 80080dc:	0591      	lsls	r1, r2, #22
 80080de:	d400      	bmi.n	80080e2 <_scanf_float+0x202>
 80080e0:	e72f      	b.n	8007f42 <_scanf_float+0x62>
 80080e2:	4943      	ldr	r1, [pc, #268]	@ (80081f0 <_scanf_float+0x310>)
 80080e4:	400a      	ands	r2, r1
 80080e6:	6022      	str	r2, [r4, #0]
 80080e8:	9a01      	ldr	r2, [sp, #4]
 80080ea:	9205      	str	r2, [sp, #20]
 80080ec:	e7a4      	b.n	8008038 <_scanf_float+0x158>
 80080ee:	21a0      	movs	r1, #160	@ 0xa0
 80080f0:	2080      	movs	r0, #128	@ 0x80
 80080f2:	6822      	ldr	r2, [r4, #0]
 80080f4:	00c9      	lsls	r1, r1, #3
 80080f6:	4011      	ands	r1, r2
 80080f8:	00c0      	lsls	r0, r0, #3
 80080fa:	4281      	cmp	r1, r0
 80080fc:	d006      	beq.n	800810c <_scanf_float+0x22c>
 80080fe:	4202      	tst	r2, r0
 8008100:	d100      	bne.n	8008104 <_scanf_float+0x224>
 8008102:	e71e      	b.n	8007f42 <_scanf_float+0x62>
 8008104:	9901      	ldr	r1, [sp, #4]
 8008106:	2900      	cmp	r1, #0
 8008108:	d100      	bne.n	800810c <_scanf_float+0x22c>
 800810a:	e0f0      	b.n	80082ee <_scanf_float+0x40e>
 800810c:	0591      	lsls	r1, r2, #22
 800810e:	d404      	bmi.n	800811a <_scanf_float+0x23a>
 8008110:	9901      	ldr	r1, [sp, #4]
 8008112:	9805      	ldr	r0, [sp, #20]
 8008114:	9709      	str	r7, [sp, #36]	@ 0x24
 8008116:	1a09      	subs	r1, r1, r0
 8008118:	9108      	str	r1, [sp, #32]
 800811a:	4934      	ldr	r1, [pc, #208]	@ (80081ec <_scanf_float+0x30c>)
 800811c:	400a      	ands	r2, r1
 800811e:	21c0      	movs	r1, #192	@ 0xc0
 8008120:	0049      	lsls	r1, r1, #1
 8008122:	430a      	orrs	r2, r1
 8008124:	6022      	str	r2, [r4, #0]
 8008126:	2200      	movs	r2, #0
 8008128:	9201      	str	r2, [sp, #4]
 800812a:	e785      	b.n	8008038 <_scanf_float+0x158>
 800812c:	2203      	movs	r2, #3
 800812e:	e79f      	b.n	8008070 <_scanf_float+0x190>
 8008130:	23c0      	movs	r3, #192	@ 0xc0
 8008132:	005b      	lsls	r3, r3, #1
 8008134:	0031      	movs	r1, r6
 8008136:	58e3      	ldr	r3, [r4, r3]
 8008138:	9803      	ldr	r0, [sp, #12]
 800813a:	4798      	blx	r3
 800813c:	2800      	cmp	r0, #0
 800813e:	d100      	bne.n	8008142 <_scanf_float+0x262>
 8008140:	e6f1      	b.n	8007f26 <_scanf_float+0x46>
 8008142:	e6fe      	b.n	8007f42 <_scanf_float+0x62>
 8008144:	3f01      	subs	r7, #1
 8008146:	5963      	ldr	r3, [r4, r5]
 8008148:	0032      	movs	r2, r6
 800814a:	7839      	ldrb	r1, [r7, #0]
 800814c:	9803      	ldr	r0, [sp, #12]
 800814e:	4798      	blx	r3
 8008150:	6923      	ldr	r3, [r4, #16]
 8008152:	3b01      	subs	r3, #1
 8008154:	6123      	str	r3, [r4, #16]
 8008156:	e702      	b.n	8007f5e <_scanf_float+0x7e>
 8008158:	1e6b      	subs	r3, r5, #1
 800815a:	2b06      	cmp	r3, #6
 800815c:	d80e      	bhi.n	800817c <_scanf_float+0x29c>
 800815e:	9702      	str	r7, [sp, #8]
 8008160:	2d02      	cmp	r5, #2
 8008162:	d920      	bls.n	80081a6 <_scanf_float+0x2c6>
 8008164:	1beb      	subs	r3, r5, r7
 8008166:	b2db      	uxtb	r3, r3
 8008168:	9306      	str	r3, [sp, #24]
 800816a:	9b02      	ldr	r3, [sp, #8]
 800816c:	9a06      	ldr	r2, [sp, #24]
 800816e:	189b      	adds	r3, r3, r2
 8008170:	b2db      	uxtb	r3, r3
 8008172:	2b03      	cmp	r3, #3
 8008174:	d127      	bne.n	80081c6 <_scanf_float+0x2e6>
 8008176:	3d03      	subs	r5, #3
 8008178:	b2ed      	uxtb	r5, r5
 800817a:	1b7f      	subs	r7, r7, r5
 800817c:	6823      	ldr	r3, [r4, #0]
 800817e:	05da      	lsls	r2, r3, #23
 8008180:	d553      	bpl.n	800822a <_scanf_float+0x34a>
 8008182:	055b      	lsls	r3, r3, #21
 8008184:	d536      	bpl.n	80081f4 <_scanf_float+0x314>
 8008186:	25be      	movs	r5, #190	@ 0xbe
 8008188:	006d      	lsls	r5, r5, #1
 800818a:	9b04      	ldr	r3, [sp, #16]
 800818c:	429f      	cmp	r7, r3
 800818e:	d800      	bhi.n	8008192 <_scanf_float+0x2b2>
 8008190:	e6e9      	b.n	8007f66 <_scanf_float+0x86>
 8008192:	3f01      	subs	r7, #1
 8008194:	5963      	ldr	r3, [r4, r5]
 8008196:	0032      	movs	r2, r6
 8008198:	7839      	ldrb	r1, [r7, #0]
 800819a:	9803      	ldr	r0, [sp, #12]
 800819c:	4798      	blx	r3
 800819e:	6923      	ldr	r3, [r4, #16]
 80081a0:	3b01      	subs	r3, #1
 80081a2:	6123      	str	r3, [r4, #16]
 80081a4:	e7f1      	b.n	800818a <_scanf_float+0x2aa>
 80081a6:	25be      	movs	r5, #190	@ 0xbe
 80081a8:	006d      	lsls	r5, r5, #1
 80081aa:	9b04      	ldr	r3, [sp, #16]
 80081ac:	429f      	cmp	r7, r3
 80081ae:	d800      	bhi.n	80081b2 <_scanf_float+0x2d2>
 80081b0:	e6d9      	b.n	8007f66 <_scanf_float+0x86>
 80081b2:	3f01      	subs	r7, #1
 80081b4:	5963      	ldr	r3, [r4, r5]
 80081b6:	0032      	movs	r2, r6
 80081b8:	7839      	ldrb	r1, [r7, #0]
 80081ba:	9803      	ldr	r0, [sp, #12]
 80081bc:	4798      	blx	r3
 80081be:	6923      	ldr	r3, [r4, #16]
 80081c0:	3b01      	subs	r3, #1
 80081c2:	6123      	str	r3, [r4, #16]
 80081c4:	e7f1      	b.n	80081aa <_scanf_float+0x2ca>
 80081c6:	9b02      	ldr	r3, [sp, #8]
 80081c8:	0032      	movs	r2, r6
 80081ca:	3b01      	subs	r3, #1
 80081cc:	7819      	ldrb	r1, [r3, #0]
 80081ce:	9302      	str	r3, [sp, #8]
 80081d0:	23be      	movs	r3, #190	@ 0xbe
 80081d2:	005b      	lsls	r3, r3, #1
 80081d4:	58e3      	ldr	r3, [r4, r3]
 80081d6:	9803      	ldr	r0, [sp, #12]
 80081d8:	4798      	blx	r3
 80081da:	6923      	ldr	r3, [r4, #16]
 80081dc:	3b01      	subs	r3, #1
 80081de:	6123      	str	r3, [r4, #16]
 80081e0:	e7c3      	b.n	800816a <_scanf_float+0x28a>
 80081e2:	46c0      	nop			@ (mov r8, r8)
 80081e4:	fffffeff 	.word	0xfffffeff
 80081e8:	fffffe7f 	.word	0xfffffe7f
 80081ec:	fffff87f 	.word	0xfffff87f
 80081f0:	fffffd7f 	.word	0xfffffd7f
 80081f4:	6923      	ldr	r3, [r4, #16]
 80081f6:	1e7d      	subs	r5, r7, #1
 80081f8:	7829      	ldrb	r1, [r5, #0]
 80081fa:	3b01      	subs	r3, #1
 80081fc:	6123      	str	r3, [r4, #16]
 80081fe:	2965      	cmp	r1, #101	@ 0x65
 8008200:	d00c      	beq.n	800821c <_scanf_float+0x33c>
 8008202:	2945      	cmp	r1, #69	@ 0x45
 8008204:	d00a      	beq.n	800821c <_scanf_float+0x33c>
 8008206:	23be      	movs	r3, #190	@ 0xbe
 8008208:	005b      	lsls	r3, r3, #1
 800820a:	58e3      	ldr	r3, [r4, r3]
 800820c:	0032      	movs	r2, r6
 800820e:	9803      	ldr	r0, [sp, #12]
 8008210:	4798      	blx	r3
 8008212:	6923      	ldr	r3, [r4, #16]
 8008214:	1ebd      	subs	r5, r7, #2
 8008216:	3b01      	subs	r3, #1
 8008218:	7829      	ldrb	r1, [r5, #0]
 800821a:	6123      	str	r3, [r4, #16]
 800821c:	23be      	movs	r3, #190	@ 0xbe
 800821e:	005b      	lsls	r3, r3, #1
 8008220:	0032      	movs	r2, r6
 8008222:	58e3      	ldr	r3, [r4, r3]
 8008224:	9803      	ldr	r0, [sp, #12]
 8008226:	4798      	blx	r3
 8008228:	002f      	movs	r7, r5
 800822a:	6821      	ldr	r1, [r4, #0]
 800822c:	2310      	movs	r3, #16
 800822e:	000a      	movs	r2, r1
 8008230:	401a      	ands	r2, r3
 8008232:	4219      	tst	r1, r3
 8008234:	d001      	beq.n	800823a <_scanf_float+0x35a>
 8008236:	2000      	movs	r0, #0
 8008238:	e696      	b.n	8007f68 <_scanf_float+0x88>
 800823a:	21c0      	movs	r1, #192	@ 0xc0
 800823c:	703a      	strb	r2, [r7, #0]
 800823e:	6823      	ldr	r3, [r4, #0]
 8008240:	00c9      	lsls	r1, r1, #3
 8008242:	400b      	ands	r3, r1
 8008244:	2180      	movs	r1, #128	@ 0x80
 8008246:	00c9      	lsls	r1, r1, #3
 8008248:	428b      	cmp	r3, r1
 800824a:	d11c      	bne.n	8008286 <_scanf_float+0x3a6>
 800824c:	9b05      	ldr	r3, [sp, #20]
 800824e:	9a01      	ldr	r2, [sp, #4]
 8008250:	9905      	ldr	r1, [sp, #20]
 8008252:	1a9a      	subs	r2, r3, r2
 8008254:	9b01      	ldr	r3, [sp, #4]
 8008256:	428b      	cmp	r3, r1
 8008258:	d121      	bne.n	800829e <_scanf_float+0x3be>
 800825a:	2200      	movs	r2, #0
 800825c:	9904      	ldr	r1, [sp, #16]
 800825e:	9803      	ldr	r0, [sp, #12]
 8008260:	f002 fbde 	bl	800aa20 <_strtod_r>
 8008264:	9b07      	ldr	r3, [sp, #28]
 8008266:	6822      	ldr	r2, [r4, #0]
 8008268:	0006      	movs	r6, r0
 800826a:	000f      	movs	r7, r1
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	0791      	lsls	r1, r2, #30
 8008270:	d522      	bpl.n	80082b8 <_scanf_float+0x3d8>
 8008272:	9907      	ldr	r1, [sp, #28]
 8008274:	1d1a      	adds	r2, r3, #4
 8008276:	600a      	str	r2, [r1, #0]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	601e      	str	r6, [r3, #0]
 800827c:	605f      	str	r7, [r3, #4]
 800827e:	68e3      	ldr	r3, [r4, #12]
 8008280:	3301      	adds	r3, #1
 8008282:	60e3      	str	r3, [r4, #12]
 8008284:	e7d7      	b.n	8008236 <_scanf_float+0x356>
 8008286:	9b08      	ldr	r3, [sp, #32]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d0e6      	beq.n	800825a <_scanf_float+0x37a>
 800828c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800828e:	9803      	ldr	r0, [sp, #12]
 8008290:	1c59      	adds	r1, r3, #1
 8008292:	230a      	movs	r3, #10
 8008294:	f002 fc56 	bl	800ab44 <_strtol_r>
 8008298:	9b08      	ldr	r3, [sp, #32]
 800829a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800829c:	1ac2      	subs	r2, r0, r3
 800829e:	0023      	movs	r3, r4
 80082a0:	3370      	adds	r3, #112	@ 0x70
 80082a2:	33ff      	adds	r3, #255	@ 0xff
 80082a4:	429f      	cmp	r7, r3
 80082a6:	d302      	bcc.n	80082ae <_scanf_float+0x3ce>
 80082a8:	0027      	movs	r7, r4
 80082aa:	376f      	adds	r7, #111	@ 0x6f
 80082ac:	37ff      	adds	r7, #255	@ 0xff
 80082ae:	0038      	movs	r0, r7
 80082b0:	4910      	ldr	r1, [pc, #64]	@ (80082f4 <_scanf_float+0x414>)
 80082b2:	f000 f8f7 	bl	80084a4 <siprintf>
 80082b6:	e7d0      	b.n	800825a <_scanf_float+0x37a>
 80082b8:	1d19      	adds	r1, r3, #4
 80082ba:	0752      	lsls	r2, r2, #29
 80082bc:	d502      	bpl.n	80082c4 <_scanf_float+0x3e4>
 80082be:	9a07      	ldr	r2, [sp, #28]
 80082c0:	6011      	str	r1, [r2, #0]
 80082c2:	e7d9      	b.n	8008278 <_scanf_float+0x398>
 80082c4:	9a07      	ldr	r2, [sp, #28]
 80082c6:	0030      	movs	r0, r6
 80082c8:	6011      	str	r1, [r2, #0]
 80082ca:	681d      	ldr	r5, [r3, #0]
 80082cc:	0032      	movs	r2, r6
 80082ce:	003b      	movs	r3, r7
 80082d0:	0039      	movs	r1, r7
 80082d2:	f7fa ff97 	bl	8003204 <__aeabi_dcmpun>
 80082d6:	2800      	cmp	r0, #0
 80082d8:	d004      	beq.n	80082e4 <_scanf_float+0x404>
 80082da:	4807      	ldr	r0, [pc, #28]	@ (80082f8 <_scanf_float+0x418>)
 80082dc:	f000 f9fc 	bl	80086d8 <nanf>
 80082e0:	6028      	str	r0, [r5, #0]
 80082e2:	e7cc      	b.n	800827e <_scanf_float+0x39e>
 80082e4:	0030      	movs	r0, r6
 80082e6:	0039      	movs	r1, r7
 80082e8:	f7fb f884 	bl	80033f4 <__aeabi_d2f>
 80082ec:	e7f8      	b.n	80082e0 <_scanf_float+0x400>
 80082ee:	2300      	movs	r3, #0
 80082f0:	9301      	str	r3, [sp, #4]
 80082f2:	e62d      	b.n	8007f50 <_scanf_float+0x70>
 80082f4:	0800c3ec 	.word	0x0800c3ec
 80082f8:	0800c785 	.word	0x0800c785

080082fc <std>:
 80082fc:	2300      	movs	r3, #0
 80082fe:	b510      	push	{r4, lr}
 8008300:	0004      	movs	r4, r0
 8008302:	6003      	str	r3, [r0, #0]
 8008304:	6043      	str	r3, [r0, #4]
 8008306:	6083      	str	r3, [r0, #8]
 8008308:	8181      	strh	r1, [r0, #12]
 800830a:	6643      	str	r3, [r0, #100]	@ 0x64
 800830c:	81c2      	strh	r2, [r0, #14]
 800830e:	6103      	str	r3, [r0, #16]
 8008310:	6143      	str	r3, [r0, #20]
 8008312:	6183      	str	r3, [r0, #24]
 8008314:	0019      	movs	r1, r3
 8008316:	2208      	movs	r2, #8
 8008318:	305c      	adds	r0, #92	@ 0x5c
 800831a:	f000 f92f 	bl	800857c <memset>
 800831e:	4b0b      	ldr	r3, [pc, #44]	@ (800834c <std+0x50>)
 8008320:	6224      	str	r4, [r4, #32]
 8008322:	6263      	str	r3, [r4, #36]	@ 0x24
 8008324:	4b0a      	ldr	r3, [pc, #40]	@ (8008350 <std+0x54>)
 8008326:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008328:	4b0a      	ldr	r3, [pc, #40]	@ (8008354 <std+0x58>)
 800832a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800832c:	4b0a      	ldr	r3, [pc, #40]	@ (8008358 <std+0x5c>)
 800832e:	6323      	str	r3, [r4, #48]	@ 0x30
 8008330:	4b0a      	ldr	r3, [pc, #40]	@ (800835c <std+0x60>)
 8008332:	429c      	cmp	r4, r3
 8008334:	d005      	beq.n	8008342 <std+0x46>
 8008336:	4b0a      	ldr	r3, [pc, #40]	@ (8008360 <std+0x64>)
 8008338:	429c      	cmp	r4, r3
 800833a:	d002      	beq.n	8008342 <std+0x46>
 800833c:	4b09      	ldr	r3, [pc, #36]	@ (8008364 <std+0x68>)
 800833e:	429c      	cmp	r4, r3
 8008340:	d103      	bne.n	800834a <std+0x4e>
 8008342:	0020      	movs	r0, r4
 8008344:	3058      	adds	r0, #88	@ 0x58
 8008346:	f000 f9af 	bl	80086a8 <__retarget_lock_init_recursive>
 800834a:	bd10      	pop	{r4, pc}
 800834c:	080084e5 	.word	0x080084e5
 8008350:	0800850d 	.word	0x0800850d
 8008354:	08008545 	.word	0x08008545
 8008358:	08008571 	.word	0x08008571
 800835c:	200004c8 	.word	0x200004c8
 8008360:	20000530 	.word	0x20000530
 8008364:	20000598 	.word	0x20000598

08008368 <stdio_exit_handler>:
 8008368:	b510      	push	{r4, lr}
 800836a:	4a03      	ldr	r2, [pc, #12]	@ (8008378 <stdio_exit_handler+0x10>)
 800836c:	4903      	ldr	r1, [pc, #12]	@ (800837c <stdio_exit_handler+0x14>)
 800836e:	4804      	ldr	r0, [pc, #16]	@ (8008380 <stdio_exit_handler+0x18>)
 8008370:	f000 f86c 	bl	800844c <_fwalk_sglue>
 8008374:	bd10      	pop	{r4, pc}
 8008376:	46c0      	nop			@ (mov r8, r8)
 8008378:	2000000c 	.word	0x2000000c
 800837c:	0800b19d 	.word	0x0800b19d
 8008380:	2000001c 	.word	0x2000001c

08008384 <cleanup_stdio>:
 8008384:	6841      	ldr	r1, [r0, #4]
 8008386:	4b0b      	ldr	r3, [pc, #44]	@ (80083b4 <cleanup_stdio+0x30>)
 8008388:	b510      	push	{r4, lr}
 800838a:	0004      	movs	r4, r0
 800838c:	4299      	cmp	r1, r3
 800838e:	d001      	beq.n	8008394 <cleanup_stdio+0x10>
 8008390:	f002 ff04 	bl	800b19c <_fflush_r>
 8008394:	68a1      	ldr	r1, [r4, #8]
 8008396:	4b08      	ldr	r3, [pc, #32]	@ (80083b8 <cleanup_stdio+0x34>)
 8008398:	4299      	cmp	r1, r3
 800839a:	d002      	beq.n	80083a2 <cleanup_stdio+0x1e>
 800839c:	0020      	movs	r0, r4
 800839e:	f002 fefd 	bl	800b19c <_fflush_r>
 80083a2:	68e1      	ldr	r1, [r4, #12]
 80083a4:	4b05      	ldr	r3, [pc, #20]	@ (80083bc <cleanup_stdio+0x38>)
 80083a6:	4299      	cmp	r1, r3
 80083a8:	d002      	beq.n	80083b0 <cleanup_stdio+0x2c>
 80083aa:	0020      	movs	r0, r4
 80083ac:	f002 fef6 	bl	800b19c <_fflush_r>
 80083b0:	bd10      	pop	{r4, pc}
 80083b2:	46c0      	nop			@ (mov r8, r8)
 80083b4:	200004c8 	.word	0x200004c8
 80083b8:	20000530 	.word	0x20000530
 80083bc:	20000598 	.word	0x20000598

080083c0 <global_stdio_init.part.0>:
 80083c0:	b510      	push	{r4, lr}
 80083c2:	4b09      	ldr	r3, [pc, #36]	@ (80083e8 <global_stdio_init.part.0+0x28>)
 80083c4:	4a09      	ldr	r2, [pc, #36]	@ (80083ec <global_stdio_init.part.0+0x2c>)
 80083c6:	2104      	movs	r1, #4
 80083c8:	601a      	str	r2, [r3, #0]
 80083ca:	4809      	ldr	r0, [pc, #36]	@ (80083f0 <global_stdio_init.part.0+0x30>)
 80083cc:	2200      	movs	r2, #0
 80083ce:	f7ff ff95 	bl	80082fc <std>
 80083d2:	2201      	movs	r2, #1
 80083d4:	2109      	movs	r1, #9
 80083d6:	4807      	ldr	r0, [pc, #28]	@ (80083f4 <global_stdio_init.part.0+0x34>)
 80083d8:	f7ff ff90 	bl	80082fc <std>
 80083dc:	2202      	movs	r2, #2
 80083de:	2112      	movs	r1, #18
 80083e0:	4805      	ldr	r0, [pc, #20]	@ (80083f8 <global_stdio_init.part.0+0x38>)
 80083e2:	f7ff ff8b 	bl	80082fc <std>
 80083e6:	bd10      	pop	{r4, pc}
 80083e8:	20000600 	.word	0x20000600
 80083ec:	08008369 	.word	0x08008369
 80083f0:	200004c8 	.word	0x200004c8
 80083f4:	20000530 	.word	0x20000530
 80083f8:	20000598 	.word	0x20000598

080083fc <__sfp_lock_acquire>:
 80083fc:	b510      	push	{r4, lr}
 80083fe:	4802      	ldr	r0, [pc, #8]	@ (8008408 <__sfp_lock_acquire+0xc>)
 8008400:	f000 f953 	bl	80086aa <__retarget_lock_acquire_recursive>
 8008404:	bd10      	pop	{r4, pc}
 8008406:	46c0      	nop			@ (mov r8, r8)
 8008408:	20000609 	.word	0x20000609

0800840c <__sfp_lock_release>:
 800840c:	b510      	push	{r4, lr}
 800840e:	4802      	ldr	r0, [pc, #8]	@ (8008418 <__sfp_lock_release+0xc>)
 8008410:	f000 f94c 	bl	80086ac <__retarget_lock_release_recursive>
 8008414:	bd10      	pop	{r4, pc}
 8008416:	46c0      	nop			@ (mov r8, r8)
 8008418:	20000609 	.word	0x20000609

0800841c <__sinit>:
 800841c:	b510      	push	{r4, lr}
 800841e:	0004      	movs	r4, r0
 8008420:	f7ff ffec 	bl	80083fc <__sfp_lock_acquire>
 8008424:	6a23      	ldr	r3, [r4, #32]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d002      	beq.n	8008430 <__sinit+0x14>
 800842a:	f7ff ffef 	bl	800840c <__sfp_lock_release>
 800842e:	bd10      	pop	{r4, pc}
 8008430:	4b04      	ldr	r3, [pc, #16]	@ (8008444 <__sinit+0x28>)
 8008432:	6223      	str	r3, [r4, #32]
 8008434:	4b04      	ldr	r3, [pc, #16]	@ (8008448 <__sinit+0x2c>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d1f6      	bne.n	800842a <__sinit+0xe>
 800843c:	f7ff ffc0 	bl	80083c0 <global_stdio_init.part.0>
 8008440:	e7f3      	b.n	800842a <__sinit+0xe>
 8008442:	46c0      	nop			@ (mov r8, r8)
 8008444:	08008385 	.word	0x08008385
 8008448:	20000600 	.word	0x20000600

0800844c <_fwalk_sglue>:
 800844c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800844e:	0014      	movs	r4, r2
 8008450:	2600      	movs	r6, #0
 8008452:	9000      	str	r0, [sp, #0]
 8008454:	9101      	str	r1, [sp, #4]
 8008456:	68a5      	ldr	r5, [r4, #8]
 8008458:	6867      	ldr	r7, [r4, #4]
 800845a:	3f01      	subs	r7, #1
 800845c:	d504      	bpl.n	8008468 <_fwalk_sglue+0x1c>
 800845e:	6824      	ldr	r4, [r4, #0]
 8008460:	2c00      	cmp	r4, #0
 8008462:	d1f8      	bne.n	8008456 <_fwalk_sglue+0xa>
 8008464:	0030      	movs	r0, r6
 8008466:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008468:	89ab      	ldrh	r3, [r5, #12]
 800846a:	2b01      	cmp	r3, #1
 800846c:	d908      	bls.n	8008480 <_fwalk_sglue+0x34>
 800846e:	220e      	movs	r2, #14
 8008470:	5eab      	ldrsh	r3, [r5, r2]
 8008472:	3301      	adds	r3, #1
 8008474:	d004      	beq.n	8008480 <_fwalk_sglue+0x34>
 8008476:	0029      	movs	r1, r5
 8008478:	9800      	ldr	r0, [sp, #0]
 800847a:	9b01      	ldr	r3, [sp, #4]
 800847c:	4798      	blx	r3
 800847e:	4306      	orrs	r6, r0
 8008480:	3568      	adds	r5, #104	@ 0x68
 8008482:	e7ea      	b.n	800845a <_fwalk_sglue+0xe>

08008484 <iprintf>:
 8008484:	b40f      	push	{r0, r1, r2, r3}
 8008486:	b507      	push	{r0, r1, r2, lr}
 8008488:	4905      	ldr	r1, [pc, #20]	@ (80084a0 <iprintf+0x1c>)
 800848a:	ab04      	add	r3, sp, #16
 800848c:	6808      	ldr	r0, [r1, #0]
 800848e:	cb04      	ldmia	r3!, {r2}
 8008490:	6881      	ldr	r1, [r0, #8]
 8008492:	9301      	str	r3, [sp, #4]
 8008494:	f002 fce0 	bl	800ae58 <_vfiprintf_r>
 8008498:	b003      	add	sp, #12
 800849a:	bc08      	pop	{r3}
 800849c:	b004      	add	sp, #16
 800849e:	4718      	bx	r3
 80084a0:	20000018 	.word	0x20000018

080084a4 <siprintf>:
 80084a4:	b40e      	push	{r1, r2, r3}
 80084a6:	b500      	push	{lr}
 80084a8:	490b      	ldr	r1, [pc, #44]	@ (80084d8 <siprintf+0x34>)
 80084aa:	b09c      	sub	sp, #112	@ 0x70
 80084ac:	ab1d      	add	r3, sp, #116	@ 0x74
 80084ae:	9002      	str	r0, [sp, #8]
 80084b0:	9006      	str	r0, [sp, #24]
 80084b2:	9107      	str	r1, [sp, #28]
 80084b4:	9104      	str	r1, [sp, #16]
 80084b6:	4809      	ldr	r0, [pc, #36]	@ (80084dc <siprintf+0x38>)
 80084b8:	4909      	ldr	r1, [pc, #36]	@ (80084e0 <siprintf+0x3c>)
 80084ba:	cb04      	ldmia	r3!, {r2}
 80084bc:	9105      	str	r1, [sp, #20]
 80084be:	6800      	ldr	r0, [r0, #0]
 80084c0:	a902      	add	r1, sp, #8
 80084c2:	9301      	str	r3, [sp, #4]
 80084c4:	f002 fba2 	bl	800ac0c <_svfiprintf_r>
 80084c8:	2200      	movs	r2, #0
 80084ca:	9b02      	ldr	r3, [sp, #8]
 80084cc:	701a      	strb	r2, [r3, #0]
 80084ce:	b01c      	add	sp, #112	@ 0x70
 80084d0:	bc08      	pop	{r3}
 80084d2:	b003      	add	sp, #12
 80084d4:	4718      	bx	r3
 80084d6:	46c0      	nop			@ (mov r8, r8)
 80084d8:	7fffffff 	.word	0x7fffffff
 80084dc:	20000018 	.word	0x20000018
 80084e0:	ffff0208 	.word	0xffff0208

080084e4 <__sread>:
 80084e4:	b570      	push	{r4, r5, r6, lr}
 80084e6:	000c      	movs	r4, r1
 80084e8:	250e      	movs	r5, #14
 80084ea:	5f49      	ldrsh	r1, [r1, r5]
 80084ec:	f000 f878 	bl	80085e0 <_read_r>
 80084f0:	2800      	cmp	r0, #0
 80084f2:	db03      	blt.n	80084fc <__sread+0x18>
 80084f4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80084f6:	181b      	adds	r3, r3, r0
 80084f8:	6563      	str	r3, [r4, #84]	@ 0x54
 80084fa:	bd70      	pop	{r4, r5, r6, pc}
 80084fc:	89a3      	ldrh	r3, [r4, #12]
 80084fe:	4a02      	ldr	r2, [pc, #8]	@ (8008508 <__sread+0x24>)
 8008500:	4013      	ands	r3, r2
 8008502:	81a3      	strh	r3, [r4, #12]
 8008504:	e7f9      	b.n	80084fa <__sread+0x16>
 8008506:	46c0      	nop			@ (mov r8, r8)
 8008508:	ffffefff 	.word	0xffffefff

0800850c <__swrite>:
 800850c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800850e:	001f      	movs	r7, r3
 8008510:	898b      	ldrh	r3, [r1, #12]
 8008512:	0005      	movs	r5, r0
 8008514:	000c      	movs	r4, r1
 8008516:	0016      	movs	r6, r2
 8008518:	05db      	lsls	r3, r3, #23
 800851a:	d505      	bpl.n	8008528 <__swrite+0x1c>
 800851c:	230e      	movs	r3, #14
 800851e:	5ec9      	ldrsh	r1, [r1, r3]
 8008520:	2200      	movs	r2, #0
 8008522:	2302      	movs	r3, #2
 8008524:	f000 f848 	bl	80085b8 <_lseek_r>
 8008528:	89a3      	ldrh	r3, [r4, #12]
 800852a:	4a05      	ldr	r2, [pc, #20]	@ (8008540 <__swrite+0x34>)
 800852c:	0028      	movs	r0, r5
 800852e:	4013      	ands	r3, r2
 8008530:	81a3      	strh	r3, [r4, #12]
 8008532:	0032      	movs	r2, r6
 8008534:	230e      	movs	r3, #14
 8008536:	5ee1      	ldrsh	r1, [r4, r3]
 8008538:	003b      	movs	r3, r7
 800853a:	f000 f877 	bl	800862c <_write_r>
 800853e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008540:	ffffefff 	.word	0xffffefff

08008544 <__sseek>:
 8008544:	b570      	push	{r4, r5, r6, lr}
 8008546:	000c      	movs	r4, r1
 8008548:	250e      	movs	r5, #14
 800854a:	5f49      	ldrsh	r1, [r1, r5]
 800854c:	f000 f834 	bl	80085b8 <_lseek_r>
 8008550:	89a3      	ldrh	r3, [r4, #12]
 8008552:	1c42      	adds	r2, r0, #1
 8008554:	d103      	bne.n	800855e <__sseek+0x1a>
 8008556:	4a05      	ldr	r2, [pc, #20]	@ (800856c <__sseek+0x28>)
 8008558:	4013      	ands	r3, r2
 800855a:	81a3      	strh	r3, [r4, #12]
 800855c:	bd70      	pop	{r4, r5, r6, pc}
 800855e:	2280      	movs	r2, #128	@ 0x80
 8008560:	0152      	lsls	r2, r2, #5
 8008562:	4313      	orrs	r3, r2
 8008564:	81a3      	strh	r3, [r4, #12]
 8008566:	6560      	str	r0, [r4, #84]	@ 0x54
 8008568:	e7f8      	b.n	800855c <__sseek+0x18>
 800856a:	46c0      	nop			@ (mov r8, r8)
 800856c:	ffffefff 	.word	0xffffefff

08008570 <__sclose>:
 8008570:	b510      	push	{r4, lr}
 8008572:	230e      	movs	r3, #14
 8008574:	5ec9      	ldrsh	r1, [r1, r3]
 8008576:	f000 f80d 	bl	8008594 <_close_r>
 800857a:	bd10      	pop	{r4, pc}

0800857c <memset>:
 800857c:	0003      	movs	r3, r0
 800857e:	1882      	adds	r2, r0, r2
 8008580:	4293      	cmp	r3, r2
 8008582:	d100      	bne.n	8008586 <memset+0xa>
 8008584:	4770      	bx	lr
 8008586:	7019      	strb	r1, [r3, #0]
 8008588:	3301      	adds	r3, #1
 800858a:	e7f9      	b.n	8008580 <memset+0x4>

0800858c <_localeconv_r>:
 800858c:	4800      	ldr	r0, [pc, #0]	@ (8008590 <_localeconv_r+0x4>)
 800858e:	4770      	bx	lr
 8008590:	20000158 	.word	0x20000158

08008594 <_close_r>:
 8008594:	2300      	movs	r3, #0
 8008596:	b570      	push	{r4, r5, r6, lr}
 8008598:	4d06      	ldr	r5, [pc, #24]	@ (80085b4 <_close_r+0x20>)
 800859a:	0004      	movs	r4, r0
 800859c:	0008      	movs	r0, r1
 800859e:	602b      	str	r3, [r5, #0]
 80085a0:	f7fc f896 	bl	80046d0 <_close>
 80085a4:	1c43      	adds	r3, r0, #1
 80085a6:	d103      	bne.n	80085b0 <_close_r+0x1c>
 80085a8:	682b      	ldr	r3, [r5, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d000      	beq.n	80085b0 <_close_r+0x1c>
 80085ae:	6023      	str	r3, [r4, #0]
 80085b0:	bd70      	pop	{r4, r5, r6, pc}
 80085b2:	46c0      	nop			@ (mov r8, r8)
 80085b4:	20000604 	.word	0x20000604

080085b8 <_lseek_r>:
 80085b8:	b570      	push	{r4, r5, r6, lr}
 80085ba:	0004      	movs	r4, r0
 80085bc:	0008      	movs	r0, r1
 80085be:	0011      	movs	r1, r2
 80085c0:	001a      	movs	r2, r3
 80085c2:	2300      	movs	r3, #0
 80085c4:	4d05      	ldr	r5, [pc, #20]	@ (80085dc <_lseek_r+0x24>)
 80085c6:	602b      	str	r3, [r5, #0]
 80085c8:	f7fc f8a3 	bl	8004712 <_lseek>
 80085cc:	1c43      	adds	r3, r0, #1
 80085ce:	d103      	bne.n	80085d8 <_lseek_r+0x20>
 80085d0:	682b      	ldr	r3, [r5, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d000      	beq.n	80085d8 <_lseek_r+0x20>
 80085d6:	6023      	str	r3, [r4, #0]
 80085d8:	bd70      	pop	{r4, r5, r6, pc}
 80085da:	46c0      	nop			@ (mov r8, r8)
 80085dc:	20000604 	.word	0x20000604

080085e0 <_read_r>:
 80085e0:	b570      	push	{r4, r5, r6, lr}
 80085e2:	0004      	movs	r4, r0
 80085e4:	0008      	movs	r0, r1
 80085e6:	0011      	movs	r1, r2
 80085e8:	001a      	movs	r2, r3
 80085ea:	2300      	movs	r3, #0
 80085ec:	4d05      	ldr	r5, [pc, #20]	@ (8008604 <_read_r+0x24>)
 80085ee:	602b      	str	r3, [r5, #0]
 80085f0:	f7fc f835 	bl	800465e <_read>
 80085f4:	1c43      	adds	r3, r0, #1
 80085f6:	d103      	bne.n	8008600 <_read_r+0x20>
 80085f8:	682b      	ldr	r3, [r5, #0]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d000      	beq.n	8008600 <_read_r+0x20>
 80085fe:	6023      	str	r3, [r4, #0]
 8008600:	bd70      	pop	{r4, r5, r6, pc}
 8008602:	46c0      	nop			@ (mov r8, r8)
 8008604:	20000604 	.word	0x20000604

08008608 <_sbrk_r>:
 8008608:	2300      	movs	r3, #0
 800860a:	b570      	push	{r4, r5, r6, lr}
 800860c:	4d06      	ldr	r5, [pc, #24]	@ (8008628 <_sbrk_r+0x20>)
 800860e:	0004      	movs	r4, r0
 8008610:	0008      	movs	r0, r1
 8008612:	602b      	str	r3, [r5, #0]
 8008614:	f7fc f888 	bl	8004728 <_sbrk>
 8008618:	1c43      	adds	r3, r0, #1
 800861a:	d103      	bne.n	8008624 <_sbrk_r+0x1c>
 800861c:	682b      	ldr	r3, [r5, #0]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d000      	beq.n	8008624 <_sbrk_r+0x1c>
 8008622:	6023      	str	r3, [r4, #0]
 8008624:	bd70      	pop	{r4, r5, r6, pc}
 8008626:	46c0      	nop			@ (mov r8, r8)
 8008628:	20000604 	.word	0x20000604

0800862c <_write_r>:
 800862c:	b570      	push	{r4, r5, r6, lr}
 800862e:	0004      	movs	r4, r0
 8008630:	0008      	movs	r0, r1
 8008632:	0011      	movs	r1, r2
 8008634:	001a      	movs	r2, r3
 8008636:	2300      	movs	r3, #0
 8008638:	4d05      	ldr	r5, [pc, #20]	@ (8008650 <_write_r+0x24>)
 800863a:	602b      	str	r3, [r5, #0]
 800863c:	f7fc f82c 	bl	8004698 <_write>
 8008640:	1c43      	adds	r3, r0, #1
 8008642:	d103      	bne.n	800864c <_write_r+0x20>
 8008644:	682b      	ldr	r3, [r5, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d000      	beq.n	800864c <_write_r+0x20>
 800864a:	6023      	str	r3, [r4, #0]
 800864c:	bd70      	pop	{r4, r5, r6, pc}
 800864e:	46c0      	nop			@ (mov r8, r8)
 8008650:	20000604 	.word	0x20000604

08008654 <__errno>:
 8008654:	4b01      	ldr	r3, [pc, #4]	@ (800865c <__errno+0x8>)
 8008656:	6818      	ldr	r0, [r3, #0]
 8008658:	4770      	bx	lr
 800865a:	46c0      	nop			@ (mov r8, r8)
 800865c:	20000018 	.word	0x20000018

08008660 <__libc_init_array>:
 8008660:	b570      	push	{r4, r5, r6, lr}
 8008662:	2600      	movs	r6, #0
 8008664:	4c0c      	ldr	r4, [pc, #48]	@ (8008698 <__libc_init_array+0x38>)
 8008666:	4d0d      	ldr	r5, [pc, #52]	@ (800869c <__libc_init_array+0x3c>)
 8008668:	1b64      	subs	r4, r4, r5
 800866a:	10a4      	asrs	r4, r4, #2
 800866c:	42a6      	cmp	r6, r4
 800866e:	d109      	bne.n	8008684 <__libc_init_array+0x24>
 8008670:	2600      	movs	r6, #0
 8008672:	f003 fd93 	bl	800c19c <_init>
 8008676:	4c0a      	ldr	r4, [pc, #40]	@ (80086a0 <__libc_init_array+0x40>)
 8008678:	4d0a      	ldr	r5, [pc, #40]	@ (80086a4 <__libc_init_array+0x44>)
 800867a:	1b64      	subs	r4, r4, r5
 800867c:	10a4      	asrs	r4, r4, #2
 800867e:	42a6      	cmp	r6, r4
 8008680:	d105      	bne.n	800868e <__libc_init_array+0x2e>
 8008682:	bd70      	pop	{r4, r5, r6, pc}
 8008684:	00b3      	lsls	r3, r6, #2
 8008686:	58eb      	ldr	r3, [r5, r3]
 8008688:	4798      	blx	r3
 800868a:	3601      	adds	r6, #1
 800868c:	e7ee      	b.n	800866c <__libc_init_array+0xc>
 800868e:	00b3      	lsls	r3, r6, #2
 8008690:	58eb      	ldr	r3, [r5, r3]
 8008692:	4798      	blx	r3
 8008694:	3601      	adds	r6, #1
 8008696:	e7f2      	b.n	800867e <__libc_init_array+0x1e>
 8008698:	0800c820 	.word	0x0800c820
 800869c:	0800c820 	.word	0x0800c820
 80086a0:	0800c824 	.word	0x0800c824
 80086a4:	0800c820 	.word	0x0800c820

080086a8 <__retarget_lock_init_recursive>:
 80086a8:	4770      	bx	lr

080086aa <__retarget_lock_acquire_recursive>:
 80086aa:	4770      	bx	lr

080086ac <__retarget_lock_release_recursive>:
 80086ac:	4770      	bx	lr

080086ae <memchr>:
 80086ae:	b2c9      	uxtb	r1, r1
 80086b0:	1882      	adds	r2, r0, r2
 80086b2:	4290      	cmp	r0, r2
 80086b4:	d101      	bne.n	80086ba <memchr+0xc>
 80086b6:	2000      	movs	r0, #0
 80086b8:	4770      	bx	lr
 80086ba:	7803      	ldrb	r3, [r0, #0]
 80086bc:	428b      	cmp	r3, r1
 80086be:	d0fb      	beq.n	80086b8 <memchr+0xa>
 80086c0:	3001      	adds	r0, #1
 80086c2:	e7f6      	b.n	80086b2 <memchr+0x4>

080086c4 <memcpy>:
 80086c4:	2300      	movs	r3, #0
 80086c6:	b510      	push	{r4, lr}
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d100      	bne.n	80086ce <memcpy+0xa>
 80086cc:	bd10      	pop	{r4, pc}
 80086ce:	5ccc      	ldrb	r4, [r1, r3]
 80086d0:	54c4      	strb	r4, [r0, r3]
 80086d2:	3301      	adds	r3, #1
 80086d4:	e7f8      	b.n	80086c8 <memcpy+0x4>
	...

080086d8 <nanf>:
 80086d8:	4800      	ldr	r0, [pc, #0]	@ (80086dc <nanf+0x4>)
 80086da:	4770      	bx	lr
 80086dc:	7fc00000 	.word	0x7fc00000

080086e0 <quorem>:
 80086e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086e2:	6902      	ldr	r2, [r0, #16]
 80086e4:	690f      	ldr	r7, [r1, #16]
 80086e6:	b087      	sub	sp, #28
 80086e8:	0006      	movs	r6, r0
 80086ea:	000b      	movs	r3, r1
 80086ec:	2000      	movs	r0, #0
 80086ee:	9102      	str	r1, [sp, #8]
 80086f0:	42ba      	cmp	r2, r7
 80086f2:	db6d      	blt.n	80087d0 <quorem+0xf0>
 80086f4:	3f01      	subs	r7, #1
 80086f6:	00bc      	lsls	r4, r7, #2
 80086f8:	3314      	adds	r3, #20
 80086fa:	9305      	str	r3, [sp, #20]
 80086fc:	191b      	adds	r3, r3, r4
 80086fe:	9303      	str	r3, [sp, #12]
 8008700:	0033      	movs	r3, r6
 8008702:	3314      	adds	r3, #20
 8008704:	191c      	adds	r4, r3, r4
 8008706:	9301      	str	r3, [sp, #4]
 8008708:	6823      	ldr	r3, [r4, #0]
 800870a:	9304      	str	r3, [sp, #16]
 800870c:	9b03      	ldr	r3, [sp, #12]
 800870e:	9804      	ldr	r0, [sp, #16]
 8008710:	681d      	ldr	r5, [r3, #0]
 8008712:	3501      	adds	r5, #1
 8008714:	0029      	movs	r1, r5
 8008716:	f7f7 fd13 	bl	8000140 <__udivsi3>
 800871a:	9b04      	ldr	r3, [sp, #16]
 800871c:	9000      	str	r0, [sp, #0]
 800871e:	42ab      	cmp	r3, r5
 8008720:	d32b      	bcc.n	800877a <quorem+0x9a>
 8008722:	9b05      	ldr	r3, [sp, #20]
 8008724:	9d01      	ldr	r5, [sp, #4]
 8008726:	469c      	mov	ip, r3
 8008728:	2300      	movs	r3, #0
 800872a:	9305      	str	r3, [sp, #20]
 800872c:	9304      	str	r3, [sp, #16]
 800872e:	4662      	mov	r2, ip
 8008730:	ca08      	ldmia	r2!, {r3}
 8008732:	6828      	ldr	r0, [r5, #0]
 8008734:	4694      	mov	ip, r2
 8008736:	9a00      	ldr	r2, [sp, #0]
 8008738:	b299      	uxth	r1, r3
 800873a:	4351      	muls	r1, r2
 800873c:	9a05      	ldr	r2, [sp, #20]
 800873e:	0c1b      	lsrs	r3, r3, #16
 8008740:	1889      	adds	r1, r1, r2
 8008742:	9a00      	ldr	r2, [sp, #0]
 8008744:	4353      	muls	r3, r2
 8008746:	0c0a      	lsrs	r2, r1, #16
 8008748:	189b      	adds	r3, r3, r2
 800874a:	0c1a      	lsrs	r2, r3, #16
 800874c:	b289      	uxth	r1, r1
 800874e:	9205      	str	r2, [sp, #20]
 8008750:	b282      	uxth	r2, r0
 8008752:	1a52      	subs	r2, r2, r1
 8008754:	9904      	ldr	r1, [sp, #16]
 8008756:	0c00      	lsrs	r0, r0, #16
 8008758:	1852      	adds	r2, r2, r1
 800875a:	b29b      	uxth	r3, r3
 800875c:	1411      	asrs	r1, r2, #16
 800875e:	1ac3      	subs	r3, r0, r3
 8008760:	185b      	adds	r3, r3, r1
 8008762:	1419      	asrs	r1, r3, #16
 8008764:	b292      	uxth	r2, r2
 8008766:	041b      	lsls	r3, r3, #16
 8008768:	431a      	orrs	r2, r3
 800876a:	9b03      	ldr	r3, [sp, #12]
 800876c:	9104      	str	r1, [sp, #16]
 800876e:	c504      	stmia	r5!, {r2}
 8008770:	4563      	cmp	r3, ip
 8008772:	d2dc      	bcs.n	800872e <quorem+0x4e>
 8008774:	6823      	ldr	r3, [r4, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d030      	beq.n	80087dc <quorem+0xfc>
 800877a:	0030      	movs	r0, r6
 800877c:	9902      	ldr	r1, [sp, #8]
 800877e:	f001 f955 	bl	8009a2c <__mcmp>
 8008782:	2800      	cmp	r0, #0
 8008784:	db23      	blt.n	80087ce <quorem+0xee>
 8008786:	0034      	movs	r4, r6
 8008788:	2500      	movs	r5, #0
 800878a:	9902      	ldr	r1, [sp, #8]
 800878c:	3414      	adds	r4, #20
 800878e:	3114      	adds	r1, #20
 8008790:	6823      	ldr	r3, [r4, #0]
 8008792:	c901      	ldmia	r1!, {r0}
 8008794:	9302      	str	r3, [sp, #8]
 8008796:	466b      	mov	r3, sp
 8008798:	891b      	ldrh	r3, [r3, #8]
 800879a:	b282      	uxth	r2, r0
 800879c:	1a9a      	subs	r2, r3, r2
 800879e:	9b02      	ldr	r3, [sp, #8]
 80087a0:	1952      	adds	r2, r2, r5
 80087a2:	0c00      	lsrs	r0, r0, #16
 80087a4:	0c1b      	lsrs	r3, r3, #16
 80087a6:	1a1b      	subs	r3, r3, r0
 80087a8:	1410      	asrs	r0, r2, #16
 80087aa:	181b      	adds	r3, r3, r0
 80087ac:	141d      	asrs	r5, r3, #16
 80087ae:	b292      	uxth	r2, r2
 80087b0:	041b      	lsls	r3, r3, #16
 80087b2:	431a      	orrs	r2, r3
 80087b4:	9b03      	ldr	r3, [sp, #12]
 80087b6:	c404      	stmia	r4!, {r2}
 80087b8:	428b      	cmp	r3, r1
 80087ba:	d2e9      	bcs.n	8008790 <quorem+0xb0>
 80087bc:	9a01      	ldr	r2, [sp, #4]
 80087be:	00bb      	lsls	r3, r7, #2
 80087c0:	18d3      	adds	r3, r2, r3
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	2a00      	cmp	r2, #0
 80087c6:	d013      	beq.n	80087f0 <quorem+0x110>
 80087c8:	9b00      	ldr	r3, [sp, #0]
 80087ca:	3301      	adds	r3, #1
 80087cc:	9300      	str	r3, [sp, #0]
 80087ce:	9800      	ldr	r0, [sp, #0]
 80087d0:	b007      	add	sp, #28
 80087d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087d4:	6823      	ldr	r3, [r4, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d104      	bne.n	80087e4 <quorem+0x104>
 80087da:	3f01      	subs	r7, #1
 80087dc:	9b01      	ldr	r3, [sp, #4]
 80087de:	3c04      	subs	r4, #4
 80087e0:	42a3      	cmp	r3, r4
 80087e2:	d3f7      	bcc.n	80087d4 <quorem+0xf4>
 80087e4:	6137      	str	r7, [r6, #16]
 80087e6:	e7c8      	b.n	800877a <quorem+0x9a>
 80087e8:	681a      	ldr	r2, [r3, #0]
 80087ea:	2a00      	cmp	r2, #0
 80087ec:	d104      	bne.n	80087f8 <quorem+0x118>
 80087ee:	3f01      	subs	r7, #1
 80087f0:	9a01      	ldr	r2, [sp, #4]
 80087f2:	3b04      	subs	r3, #4
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d3f7      	bcc.n	80087e8 <quorem+0x108>
 80087f8:	6137      	str	r7, [r6, #16]
 80087fa:	e7e5      	b.n	80087c8 <quorem+0xe8>

080087fc <_dtoa_r>:
 80087fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087fe:	0014      	movs	r4, r2
 8008800:	001d      	movs	r5, r3
 8008802:	69c6      	ldr	r6, [r0, #28]
 8008804:	b09d      	sub	sp, #116	@ 0x74
 8008806:	940a      	str	r4, [sp, #40]	@ 0x28
 8008808:	950b      	str	r5, [sp, #44]	@ 0x2c
 800880a:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800880c:	9003      	str	r0, [sp, #12]
 800880e:	2e00      	cmp	r6, #0
 8008810:	d10f      	bne.n	8008832 <_dtoa_r+0x36>
 8008812:	2010      	movs	r0, #16
 8008814:	f7fe fe3c 	bl	8007490 <malloc>
 8008818:	9b03      	ldr	r3, [sp, #12]
 800881a:	1e02      	subs	r2, r0, #0
 800881c:	61d8      	str	r0, [r3, #28]
 800881e:	d104      	bne.n	800882a <_dtoa_r+0x2e>
 8008820:	21ef      	movs	r1, #239	@ 0xef
 8008822:	4bc7      	ldr	r3, [pc, #796]	@ (8008b40 <_dtoa_r+0x344>)
 8008824:	48c7      	ldr	r0, [pc, #796]	@ (8008b44 <_dtoa_r+0x348>)
 8008826:	f002 fdaf 	bl	800b388 <__assert_func>
 800882a:	6046      	str	r6, [r0, #4]
 800882c:	6086      	str	r6, [r0, #8]
 800882e:	6006      	str	r6, [r0, #0]
 8008830:	60c6      	str	r6, [r0, #12]
 8008832:	9b03      	ldr	r3, [sp, #12]
 8008834:	69db      	ldr	r3, [r3, #28]
 8008836:	6819      	ldr	r1, [r3, #0]
 8008838:	2900      	cmp	r1, #0
 800883a:	d00b      	beq.n	8008854 <_dtoa_r+0x58>
 800883c:	685a      	ldr	r2, [r3, #4]
 800883e:	2301      	movs	r3, #1
 8008840:	4093      	lsls	r3, r2
 8008842:	604a      	str	r2, [r1, #4]
 8008844:	608b      	str	r3, [r1, #8]
 8008846:	9803      	ldr	r0, [sp, #12]
 8008848:	f000 fe5a 	bl	8009500 <_Bfree>
 800884c:	2200      	movs	r2, #0
 800884e:	9b03      	ldr	r3, [sp, #12]
 8008850:	69db      	ldr	r3, [r3, #28]
 8008852:	601a      	str	r2, [r3, #0]
 8008854:	2d00      	cmp	r5, #0
 8008856:	da1e      	bge.n	8008896 <_dtoa_r+0x9a>
 8008858:	2301      	movs	r3, #1
 800885a:	603b      	str	r3, [r7, #0]
 800885c:	006b      	lsls	r3, r5, #1
 800885e:	085b      	lsrs	r3, r3, #1
 8008860:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008862:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008864:	4bb8      	ldr	r3, [pc, #736]	@ (8008b48 <_dtoa_r+0x34c>)
 8008866:	4ab8      	ldr	r2, [pc, #736]	@ (8008b48 <_dtoa_r+0x34c>)
 8008868:	403b      	ands	r3, r7
 800886a:	4293      	cmp	r3, r2
 800886c:	d116      	bne.n	800889c <_dtoa_r+0xa0>
 800886e:	4bb7      	ldr	r3, [pc, #732]	@ (8008b4c <_dtoa_r+0x350>)
 8008870:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008872:	6013      	str	r3, [r2, #0]
 8008874:	033b      	lsls	r3, r7, #12
 8008876:	0b1b      	lsrs	r3, r3, #12
 8008878:	4323      	orrs	r3, r4
 800887a:	d101      	bne.n	8008880 <_dtoa_r+0x84>
 800887c:	f000 fd83 	bl	8009386 <_dtoa_r+0xb8a>
 8008880:	4bb3      	ldr	r3, [pc, #716]	@ (8008b50 <_dtoa_r+0x354>)
 8008882:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008884:	9308      	str	r3, [sp, #32]
 8008886:	2a00      	cmp	r2, #0
 8008888:	d002      	beq.n	8008890 <_dtoa_r+0x94>
 800888a:	4bb2      	ldr	r3, [pc, #712]	@ (8008b54 <_dtoa_r+0x358>)
 800888c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800888e:	6013      	str	r3, [r2, #0]
 8008890:	9808      	ldr	r0, [sp, #32]
 8008892:	b01d      	add	sp, #116	@ 0x74
 8008894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008896:	2300      	movs	r3, #0
 8008898:	603b      	str	r3, [r7, #0]
 800889a:	e7e2      	b.n	8008862 <_dtoa_r+0x66>
 800889c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800889e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088a0:	9212      	str	r2, [sp, #72]	@ 0x48
 80088a2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80088a4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80088a6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80088a8:	2200      	movs	r2, #0
 80088aa:	2300      	movs	r3, #0
 80088ac:	f7f7 fdce 	bl	800044c <__aeabi_dcmpeq>
 80088b0:	1e06      	subs	r6, r0, #0
 80088b2:	d00b      	beq.n	80088cc <_dtoa_r+0xd0>
 80088b4:	2301      	movs	r3, #1
 80088b6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80088b8:	6013      	str	r3, [r2, #0]
 80088ba:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d002      	beq.n	80088c6 <_dtoa_r+0xca>
 80088c0:	4ba5      	ldr	r3, [pc, #660]	@ (8008b58 <_dtoa_r+0x35c>)
 80088c2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80088c4:	6013      	str	r3, [r2, #0]
 80088c6:	4ba5      	ldr	r3, [pc, #660]	@ (8008b5c <_dtoa_r+0x360>)
 80088c8:	9308      	str	r3, [sp, #32]
 80088ca:	e7e1      	b.n	8008890 <_dtoa_r+0x94>
 80088cc:	ab1a      	add	r3, sp, #104	@ 0x68
 80088ce:	9301      	str	r3, [sp, #4]
 80088d0:	ab1b      	add	r3, sp, #108	@ 0x6c
 80088d2:	9300      	str	r3, [sp, #0]
 80088d4:	9803      	ldr	r0, [sp, #12]
 80088d6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80088d8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80088da:	f001 f9c9 	bl	8009c70 <__d2b>
 80088de:	007a      	lsls	r2, r7, #1
 80088e0:	9005      	str	r0, [sp, #20]
 80088e2:	0d52      	lsrs	r2, r2, #21
 80088e4:	d100      	bne.n	80088e8 <_dtoa_r+0xec>
 80088e6:	e07b      	b.n	80089e0 <_dtoa_r+0x1e4>
 80088e8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80088ea:	9618      	str	r6, [sp, #96]	@ 0x60
 80088ec:	0319      	lsls	r1, r3, #12
 80088ee:	4b9c      	ldr	r3, [pc, #624]	@ (8008b60 <_dtoa_r+0x364>)
 80088f0:	0b09      	lsrs	r1, r1, #12
 80088f2:	430b      	orrs	r3, r1
 80088f4:	499b      	ldr	r1, [pc, #620]	@ (8008b64 <_dtoa_r+0x368>)
 80088f6:	1857      	adds	r7, r2, r1
 80088f8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80088fa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80088fc:	0019      	movs	r1, r3
 80088fe:	2200      	movs	r2, #0
 8008900:	4b99      	ldr	r3, [pc, #612]	@ (8008b68 <_dtoa_r+0x36c>)
 8008902:	f7fa f8e3 	bl	8002acc <__aeabi_dsub>
 8008906:	4a99      	ldr	r2, [pc, #612]	@ (8008b6c <_dtoa_r+0x370>)
 8008908:	4b99      	ldr	r3, [pc, #612]	@ (8008b70 <_dtoa_r+0x374>)
 800890a:	f7f9 fe17 	bl	800253c <__aeabi_dmul>
 800890e:	4a99      	ldr	r2, [pc, #612]	@ (8008b74 <_dtoa_r+0x378>)
 8008910:	4b99      	ldr	r3, [pc, #612]	@ (8008b78 <_dtoa_r+0x37c>)
 8008912:	f7f8 fe6b 	bl	80015ec <__aeabi_dadd>
 8008916:	0004      	movs	r4, r0
 8008918:	0038      	movs	r0, r7
 800891a:	000d      	movs	r5, r1
 800891c:	f7fa fcd0 	bl	80032c0 <__aeabi_i2d>
 8008920:	4a96      	ldr	r2, [pc, #600]	@ (8008b7c <_dtoa_r+0x380>)
 8008922:	4b97      	ldr	r3, [pc, #604]	@ (8008b80 <_dtoa_r+0x384>)
 8008924:	f7f9 fe0a 	bl	800253c <__aeabi_dmul>
 8008928:	0002      	movs	r2, r0
 800892a:	000b      	movs	r3, r1
 800892c:	0020      	movs	r0, r4
 800892e:	0029      	movs	r1, r5
 8008930:	f7f8 fe5c 	bl	80015ec <__aeabi_dadd>
 8008934:	0004      	movs	r4, r0
 8008936:	000d      	movs	r5, r1
 8008938:	f7fa fc86 	bl	8003248 <__aeabi_d2iz>
 800893c:	2200      	movs	r2, #0
 800893e:	9004      	str	r0, [sp, #16]
 8008940:	2300      	movs	r3, #0
 8008942:	0020      	movs	r0, r4
 8008944:	0029      	movs	r1, r5
 8008946:	f7f7 fd87 	bl	8000458 <__aeabi_dcmplt>
 800894a:	2800      	cmp	r0, #0
 800894c:	d00b      	beq.n	8008966 <_dtoa_r+0x16a>
 800894e:	9804      	ldr	r0, [sp, #16]
 8008950:	f7fa fcb6 	bl	80032c0 <__aeabi_i2d>
 8008954:	002b      	movs	r3, r5
 8008956:	0022      	movs	r2, r4
 8008958:	f7f7 fd78 	bl	800044c <__aeabi_dcmpeq>
 800895c:	4243      	negs	r3, r0
 800895e:	4158      	adcs	r0, r3
 8008960:	9b04      	ldr	r3, [sp, #16]
 8008962:	1a1b      	subs	r3, r3, r0
 8008964:	9304      	str	r3, [sp, #16]
 8008966:	2301      	movs	r3, #1
 8008968:	9315      	str	r3, [sp, #84]	@ 0x54
 800896a:	9b04      	ldr	r3, [sp, #16]
 800896c:	2b16      	cmp	r3, #22
 800896e:	d810      	bhi.n	8008992 <_dtoa_r+0x196>
 8008970:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008972:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008974:	9a04      	ldr	r2, [sp, #16]
 8008976:	4b83      	ldr	r3, [pc, #524]	@ (8008b84 <_dtoa_r+0x388>)
 8008978:	00d2      	lsls	r2, r2, #3
 800897a:	189b      	adds	r3, r3, r2
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	f7f7 fd6a 	bl	8000458 <__aeabi_dcmplt>
 8008984:	2800      	cmp	r0, #0
 8008986:	d047      	beq.n	8008a18 <_dtoa_r+0x21c>
 8008988:	9b04      	ldr	r3, [sp, #16]
 800898a:	3b01      	subs	r3, #1
 800898c:	9304      	str	r3, [sp, #16]
 800898e:	2300      	movs	r3, #0
 8008990:	9315      	str	r3, [sp, #84]	@ 0x54
 8008992:	2200      	movs	r2, #0
 8008994:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8008996:	9206      	str	r2, [sp, #24]
 8008998:	1bdb      	subs	r3, r3, r7
 800899a:	1e5a      	subs	r2, r3, #1
 800899c:	d53e      	bpl.n	8008a1c <_dtoa_r+0x220>
 800899e:	2201      	movs	r2, #1
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	9306      	str	r3, [sp, #24]
 80089a4:	2300      	movs	r3, #0
 80089a6:	930d      	str	r3, [sp, #52]	@ 0x34
 80089a8:	9b04      	ldr	r3, [sp, #16]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	db38      	blt.n	8008a20 <_dtoa_r+0x224>
 80089ae:	9a04      	ldr	r2, [sp, #16]
 80089b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80089b2:	4694      	mov	ip, r2
 80089b4:	4463      	add	r3, ip
 80089b6:	930d      	str	r3, [sp, #52]	@ 0x34
 80089b8:	2300      	movs	r3, #0
 80089ba:	9214      	str	r2, [sp, #80]	@ 0x50
 80089bc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80089be:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80089c0:	2401      	movs	r4, #1
 80089c2:	2b09      	cmp	r3, #9
 80089c4:	d867      	bhi.n	8008a96 <_dtoa_r+0x29a>
 80089c6:	2b05      	cmp	r3, #5
 80089c8:	dd02      	ble.n	80089d0 <_dtoa_r+0x1d4>
 80089ca:	2400      	movs	r4, #0
 80089cc:	3b04      	subs	r3, #4
 80089ce:	9322      	str	r3, [sp, #136]	@ 0x88
 80089d0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80089d2:	1e98      	subs	r0, r3, #2
 80089d4:	2803      	cmp	r0, #3
 80089d6:	d867      	bhi.n	8008aa8 <_dtoa_r+0x2ac>
 80089d8:	f7f7 fb9e 	bl	8000118 <__gnu_thumb1_case_uqi>
 80089dc:	5b383a2b 	.word	0x5b383a2b
 80089e0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80089e2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80089e4:	18f6      	adds	r6, r6, r3
 80089e6:	4b68      	ldr	r3, [pc, #416]	@ (8008b88 <_dtoa_r+0x38c>)
 80089e8:	18f2      	adds	r2, r6, r3
 80089ea:	2a20      	cmp	r2, #32
 80089ec:	dd0f      	ble.n	8008a0e <_dtoa_r+0x212>
 80089ee:	2340      	movs	r3, #64	@ 0x40
 80089f0:	1a9b      	subs	r3, r3, r2
 80089f2:	409f      	lsls	r7, r3
 80089f4:	4b65      	ldr	r3, [pc, #404]	@ (8008b8c <_dtoa_r+0x390>)
 80089f6:	0038      	movs	r0, r7
 80089f8:	18f3      	adds	r3, r6, r3
 80089fa:	40dc      	lsrs	r4, r3
 80089fc:	4320      	orrs	r0, r4
 80089fe:	f7fa fc8d 	bl	800331c <__aeabi_ui2d>
 8008a02:	2201      	movs	r2, #1
 8008a04:	4b62      	ldr	r3, [pc, #392]	@ (8008b90 <_dtoa_r+0x394>)
 8008a06:	1e77      	subs	r7, r6, #1
 8008a08:	18cb      	adds	r3, r1, r3
 8008a0a:	9218      	str	r2, [sp, #96]	@ 0x60
 8008a0c:	e776      	b.n	80088fc <_dtoa_r+0x100>
 8008a0e:	2320      	movs	r3, #32
 8008a10:	0020      	movs	r0, r4
 8008a12:	1a9b      	subs	r3, r3, r2
 8008a14:	4098      	lsls	r0, r3
 8008a16:	e7f2      	b.n	80089fe <_dtoa_r+0x202>
 8008a18:	9015      	str	r0, [sp, #84]	@ 0x54
 8008a1a:	e7ba      	b.n	8008992 <_dtoa_r+0x196>
 8008a1c:	920d      	str	r2, [sp, #52]	@ 0x34
 8008a1e:	e7c3      	b.n	80089a8 <_dtoa_r+0x1ac>
 8008a20:	9b06      	ldr	r3, [sp, #24]
 8008a22:	9a04      	ldr	r2, [sp, #16]
 8008a24:	1a9b      	subs	r3, r3, r2
 8008a26:	9306      	str	r3, [sp, #24]
 8008a28:	4253      	negs	r3, r2
 8008a2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	9314      	str	r3, [sp, #80]	@ 0x50
 8008a30:	e7c5      	b.n	80089be <_dtoa_r+0x1c2>
 8008a32:	2300      	movs	r3, #0
 8008a34:	9310      	str	r3, [sp, #64]	@ 0x40
 8008a36:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008a38:	930e      	str	r3, [sp, #56]	@ 0x38
 8008a3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	dc13      	bgt.n	8008a68 <_dtoa_r+0x26c>
 8008a40:	2301      	movs	r3, #1
 8008a42:	001a      	movs	r2, r3
 8008a44:	930e      	str	r3, [sp, #56]	@ 0x38
 8008a46:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a48:	9223      	str	r2, [sp, #140]	@ 0x8c
 8008a4a:	e00d      	b.n	8008a68 <_dtoa_r+0x26c>
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	e7f1      	b.n	8008a34 <_dtoa_r+0x238>
 8008a50:	2300      	movs	r3, #0
 8008a52:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008a54:	9310      	str	r3, [sp, #64]	@ 0x40
 8008a56:	4694      	mov	ip, r2
 8008a58:	9b04      	ldr	r3, [sp, #16]
 8008a5a:	4463      	add	r3, ip
 8008a5c:	930e      	str	r3, [sp, #56]	@ 0x38
 8008a5e:	3301      	adds	r3, #1
 8008a60:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	dc00      	bgt.n	8008a68 <_dtoa_r+0x26c>
 8008a66:	2301      	movs	r3, #1
 8008a68:	9a03      	ldr	r2, [sp, #12]
 8008a6a:	2100      	movs	r1, #0
 8008a6c:	69d0      	ldr	r0, [r2, #28]
 8008a6e:	2204      	movs	r2, #4
 8008a70:	0015      	movs	r5, r2
 8008a72:	3514      	adds	r5, #20
 8008a74:	429d      	cmp	r5, r3
 8008a76:	d91b      	bls.n	8008ab0 <_dtoa_r+0x2b4>
 8008a78:	6041      	str	r1, [r0, #4]
 8008a7a:	9803      	ldr	r0, [sp, #12]
 8008a7c:	f000 fcfc 	bl	8009478 <_Balloc>
 8008a80:	9008      	str	r0, [sp, #32]
 8008a82:	2800      	cmp	r0, #0
 8008a84:	d117      	bne.n	8008ab6 <_dtoa_r+0x2ba>
 8008a86:	21b0      	movs	r1, #176	@ 0xb0
 8008a88:	4b42      	ldr	r3, [pc, #264]	@ (8008b94 <_dtoa_r+0x398>)
 8008a8a:	482e      	ldr	r0, [pc, #184]	@ (8008b44 <_dtoa_r+0x348>)
 8008a8c:	9a08      	ldr	r2, [sp, #32]
 8008a8e:	31ff      	adds	r1, #255	@ 0xff
 8008a90:	e6c9      	b.n	8008826 <_dtoa_r+0x2a>
 8008a92:	2301      	movs	r3, #1
 8008a94:	e7dd      	b.n	8008a52 <_dtoa_r+0x256>
 8008a96:	2300      	movs	r3, #0
 8008a98:	9410      	str	r4, [sp, #64]	@ 0x40
 8008a9a:	9322      	str	r3, [sp, #136]	@ 0x88
 8008a9c:	3b01      	subs	r3, #1
 8008a9e:	930e      	str	r3, [sp, #56]	@ 0x38
 8008aa0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	3313      	adds	r3, #19
 8008aa6:	e7cf      	b.n	8008a48 <_dtoa_r+0x24c>
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	9310      	str	r3, [sp, #64]	@ 0x40
 8008aac:	3b02      	subs	r3, #2
 8008aae:	e7f6      	b.n	8008a9e <_dtoa_r+0x2a2>
 8008ab0:	3101      	adds	r1, #1
 8008ab2:	0052      	lsls	r2, r2, #1
 8008ab4:	e7dc      	b.n	8008a70 <_dtoa_r+0x274>
 8008ab6:	9b03      	ldr	r3, [sp, #12]
 8008ab8:	9a08      	ldr	r2, [sp, #32]
 8008aba:	69db      	ldr	r3, [r3, #28]
 8008abc:	601a      	str	r2, [r3, #0]
 8008abe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ac0:	2b0e      	cmp	r3, #14
 8008ac2:	d900      	bls.n	8008ac6 <_dtoa_r+0x2ca>
 8008ac4:	e0d9      	b.n	8008c7a <_dtoa_r+0x47e>
 8008ac6:	2c00      	cmp	r4, #0
 8008ac8:	d100      	bne.n	8008acc <_dtoa_r+0x2d0>
 8008aca:	e0d6      	b.n	8008c7a <_dtoa_r+0x47e>
 8008acc:	9b04      	ldr	r3, [sp, #16]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	dd64      	ble.n	8008b9c <_dtoa_r+0x3a0>
 8008ad2:	210f      	movs	r1, #15
 8008ad4:	9a04      	ldr	r2, [sp, #16]
 8008ad6:	4b2b      	ldr	r3, [pc, #172]	@ (8008b84 <_dtoa_r+0x388>)
 8008ad8:	400a      	ands	r2, r1
 8008ada:	00d2      	lsls	r2, r2, #3
 8008adc:	189b      	adds	r3, r3, r2
 8008ade:	681e      	ldr	r6, [r3, #0]
 8008ae0:	685f      	ldr	r7, [r3, #4]
 8008ae2:	9b04      	ldr	r3, [sp, #16]
 8008ae4:	2402      	movs	r4, #2
 8008ae6:	111d      	asrs	r5, r3, #4
 8008ae8:	05db      	lsls	r3, r3, #23
 8008aea:	d50a      	bpl.n	8008b02 <_dtoa_r+0x306>
 8008aec:	4b2a      	ldr	r3, [pc, #168]	@ (8008b98 <_dtoa_r+0x39c>)
 8008aee:	400d      	ands	r5, r1
 8008af0:	6a1a      	ldr	r2, [r3, #32]
 8008af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008af4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008af6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008af8:	f7f9 f8dc 	bl	8001cb4 <__aeabi_ddiv>
 8008afc:	900a      	str	r0, [sp, #40]	@ 0x28
 8008afe:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008b00:	3401      	adds	r4, #1
 8008b02:	4b25      	ldr	r3, [pc, #148]	@ (8008b98 <_dtoa_r+0x39c>)
 8008b04:	930c      	str	r3, [sp, #48]	@ 0x30
 8008b06:	2d00      	cmp	r5, #0
 8008b08:	d108      	bne.n	8008b1c <_dtoa_r+0x320>
 8008b0a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008b0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008b0e:	0032      	movs	r2, r6
 8008b10:	003b      	movs	r3, r7
 8008b12:	f7f9 f8cf 	bl	8001cb4 <__aeabi_ddiv>
 8008b16:	900a      	str	r0, [sp, #40]	@ 0x28
 8008b18:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008b1a:	e05a      	b.n	8008bd2 <_dtoa_r+0x3d6>
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	421d      	tst	r5, r3
 8008b20:	d009      	beq.n	8008b36 <_dtoa_r+0x33a>
 8008b22:	18e4      	adds	r4, r4, r3
 8008b24:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b26:	0030      	movs	r0, r6
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	0039      	movs	r1, r7
 8008b2e:	f7f9 fd05 	bl	800253c <__aeabi_dmul>
 8008b32:	0006      	movs	r6, r0
 8008b34:	000f      	movs	r7, r1
 8008b36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b38:	106d      	asrs	r5, r5, #1
 8008b3a:	3308      	adds	r3, #8
 8008b3c:	e7e2      	b.n	8008b04 <_dtoa_r+0x308>
 8008b3e:	46c0      	nop			@ (mov r8, r8)
 8008b40:	0800c3fe 	.word	0x0800c3fe
 8008b44:	0800c415 	.word	0x0800c415
 8008b48:	7ff00000 	.word	0x7ff00000
 8008b4c:	0000270f 	.word	0x0000270f
 8008b50:	0800c3fa 	.word	0x0800c3fa
 8008b54:	0800c3fd 	.word	0x0800c3fd
 8008b58:	0800c3c9 	.word	0x0800c3c9
 8008b5c:	0800c3c8 	.word	0x0800c3c8
 8008b60:	3ff00000 	.word	0x3ff00000
 8008b64:	fffffc01 	.word	0xfffffc01
 8008b68:	3ff80000 	.word	0x3ff80000
 8008b6c:	636f4361 	.word	0x636f4361
 8008b70:	3fd287a7 	.word	0x3fd287a7
 8008b74:	8b60c8b3 	.word	0x8b60c8b3
 8008b78:	3fc68a28 	.word	0x3fc68a28
 8008b7c:	509f79fb 	.word	0x509f79fb
 8008b80:	3fd34413 	.word	0x3fd34413
 8008b84:	0800c510 	.word	0x0800c510
 8008b88:	00000432 	.word	0x00000432
 8008b8c:	00000412 	.word	0x00000412
 8008b90:	fe100000 	.word	0xfe100000
 8008b94:	0800c46d 	.word	0x0800c46d
 8008b98:	0800c4e8 	.word	0x0800c4e8
 8008b9c:	9b04      	ldr	r3, [sp, #16]
 8008b9e:	2402      	movs	r4, #2
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d016      	beq.n	8008bd2 <_dtoa_r+0x3d6>
 8008ba4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008ba6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008ba8:	220f      	movs	r2, #15
 8008baa:	425d      	negs	r5, r3
 8008bac:	402a      	ands	r2, r5
 8008bae:	4bd7      	ldr	r3, [pc, #860]	@ (8008f0c <_dtoa_r+0x710>)
 8008bb0:	00d2      	lsls	r2, r2, #3
 8008bb2:	189b      	adds	r3, r3, r2
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	f7f9 fcc0 	bl	800253c <__aeabi_dmul>
 8008bbc:	2701      	movs	r7, #1
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	900a      	str	r0, [sp, #40]	@ 0x28
 8008bc2:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008bc4:	4ed2      	ldr	r6, [pc, #840]	@ (8008f10 <_dtoa_r+0x714>)
 8008bc6:	112d      	asrs	r5, r5, #4
 8008bc8:	2d00      	cmp	r5, #0
 8008bca:	d000      	beq.n	8008bce <_dtoa_r+0x3d2>
 8008bcc:	e0ba      	b.n	8008d44 <_dtoa_r+0x548>
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1a1      	bne.n	8008b16 <_dtoa_r+0x31a>
 8008bd2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008bd4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008bd6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d100      	bne.n	8008bde <_dtoa_r+0x3e2>
 8008bdc:	e0bd      	b.n	8008d5a <_dtoa_r+0x55e>
 8008bde:	2200      	movs	r2, #0
 8008be0:	0030      	movs	r0, r6
 8008be2:	0039      	movs	r1, r7
 8008be4:	4bcb      	ldr	r3, [pc, #812]	@ (8008f14 <_dtoa_r+0x718>)
 8008be6:	f7f7 fc37 	bl	8000458 <__aeabi_dcmplt>
 8008bea:	2800      	cmp	r0, #0
 8008bec:	d100      	bne.n	8008bf0 <_dtoa_r+0x3f4>
 8008bee:	e0b4      	b.n	8008d5a <_dtoa_r+0x55e>
 8008bf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d100      	bne.n	8008bf8 <_dtoa_r+0x3fc>
 8008bf6:	e0b0      	b.n	8008d5a <_dtoa_r+0x55e>
 8008bf8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	dd39      	ble.n	8008c72 <_dtoa_r+0x476>
 8008bfe:	9b04      	ldr	r3, [sp, #16]
 8008c00:	2200      	movs	r2, #0
 8008c02:	3b01      	subs	r3, #1
 8008c04:	930c      	str	r3, [sp, #48]	@ 0x30
 8008c06:	0030      	movs	r0, r6
 8008c08:	4bc3      	ldr	r3, [pc, #780]	@ (8008f18 <_dtoa_r+0x71c>)
 8008c0a:	0039      	movs	r1, r7
 8008c0c:	f7f9 fc96 	bl	800253c <__aeabi_dmul>
 8008c10:	900a      	str	r0, [sp, #40]	@ 0x28
 8008c12:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008c14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c16:	3401      	adds	r4, #1
 8008c18:	0020      	movs	r0, r4
 8008c1a:	9311      	str	r3, [sp, #68]	@ 0x44
 8008c1c:	f7fa fb50 	bl	80032c0 <__aeabi_i2d>
 8008c20:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c24:	f7f9 fc8a 	bl	800253c <__aeabi_dmul>
 8008c28:	4bbc      	ldr	r3, [pc, #752]	@ (8008f1c <_dtoa_r+0x720>)
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f7f8 fcde 	bl	80015ec <__aeabi_dadd>
 8008c30:	4bbb      	ldr	r3, [pc, #748]	@ (8008f20 <_dtoa_r+0x724>)
 8008c32:	0006      	movs	r6, r0
 8008c34:	18cf      	adds	r7, r1, r3
 8008c36:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d000      	beq.n	8008c3e <_dtoa_r+0x442>
 8008c3c:	e091      	b.n	8008d62 <_dtoa_r+0x566>
 8008c3e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008c40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008c42:	2200      	movs	r2, #0
 8008c44:	4bb7      	ldr	r3, [pc, #732]	@ (8008f24 <_dtoa_r+0x728>)
 8008c46:	f7f9 ff41 	bl	8002acc <__aeabi_dsub>
 8008c4a:	0032      	movs	r2, r6
 8008c4c:	003b      	movs	r3, r7
 8008c4e:	0004      	movs	r4, r0
 8008c50:	000d      	movs	r5, r1
 8008c52:	f7f7 fc15 	bl	8000480 <__aeabi_dcmpgt>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	d000      	beq.n	8008c5c <_dtoa_r+0x460>
 8008c5a:	e29d      	b.n	8009198 <_dtoa_r+0x99c>
 8008c5c:	2180      	movs	r1, #128	@ 0x80
 8008c5e:	0609      	lsls	r1, r1, #24
 8008c60:	187b      	adds	r3, r7, r1
 8008c62:	0032      	movs	r2, r6
 8008c64:	0020      	movs	r0, r4
 8008c66:	0029      	movs	r1, r5
 8008c68:	f7f7 fbf6 	bl	8000458 <__aeabi_dcmplt>
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	d000      	beq.n	8008c72 <_dtoa_r+0x476>
 8008c70:	e130      	b.n	8008ed4 <_dtoa_r+0x6d8>
 8008c72:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008c74:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8008c76:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c78:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008c7a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	da00      	bge.n	8008c82 <_dtoa_r+0x486>
 8008c80:	e177      	b.n	8008f72 <_dtoa_r+0x776>
 8008c82:	9a04      	ldr	r2, [sp, #16]
 8008c84:	2a0e      	cmp	r2, #14
 8008c86:	dd00      	ble.n	8008c8a <_dtoa_r+0x48e>
 8008c88:	e173      	b.n	8008f72 <_dtoa_r+0x776>
 8008c8a:	4ba0      	ldr	r3, [pc, #640]	@ (8008f0c <_dtoa_r+0x710>)
 8008c8c:	00d2      	lsls	r2, r2, #3
 8008c8e:	189b      	adds	r3, r3, r2
 8008c90:	685c      	ldr	r4, [r3, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	9306      	str	r3, [sp, #24]
 8008c96:	9407      	str	r4, [sp, #28]
 8008c98:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	da03      	bge.n	8008ca6 <_dtoa_r+0x4aa>
 8008c9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	dc00      	bgt.n	8008ca6 <_dtoa_r+0x4aa>
 8008ca4:	e106      	b.n	8008eb4 <_dtoa_r+0x6b8>
 8008ca6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008ca8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008caa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cac:	9d08      	ldr	r5, [sp, #32]
 8008cae:	3b01      	subs	r3, #1
 8008cb0:	195b      	adds	r3, r3, r5
 8008cb2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008cb4:	9a06      	ldr	r2, [sp, #24]
 8008cb6:	9b07      	ldr	r3, [sp, #28]
 8008cb8:	0030      	movs	r0, r6
 8008cba:	0039      	movs	r1, r7
 8008cbc:	f7f8 fffa 	bl	8001cb4 <__aeabi_ddiv>
 8008cc0:	f7fa fac2 	bl	8003248 <__aeabi_d2iz>
 8008cc4:	9009      	str	r0, [sp, #36]	@ 0x24
 8008cc6:	f7fa fafb 	bl	80032c0 <__aeabi_i2d>
 8008cca:	9a06      	ldr	r2, [sp, #24]
 8008ccc:	9b07      	ldr	r3, [sp, #28]
 8008cce:	f7f9 fc35 	bl	800253c <__aeabi_dmul>
 8008cd2:	0002      	movs	r2, r0
 8008cd4:	000b      	movs	r3, r1
 8008cd6:	0030      	movs	r0, r6
 8008cd8:	0039      	movs	r1, r7
 8008cda:	f7f9 fef7 	bl	8002acc <__aeabi_dsub>
 8008cde:	002b      	movs	r3, r5
 8008ce0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ce2:	3501      	adds	r5, #1
 8008ce4:	3230      	adds	r2, #48	@ 0x30
 8008ce6:	701a      	strb	r2, [r3, #0]
 8008ce8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008cea:	002c      	movs	r4, r5
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d000      	beq.n	8008cf2 <_dtoa_r+0x4f6>
 8008cf0:	e131      	b.n	8008f56 <_dtoa_r+0x75a>
 8008cf2:	0002      	movs	r2, r0
 8008cf4:	000b      	movs	r3, r1
 8008cf6:	f7f8 fc79 	bl	80015ec <__aeabi_dadd>
 8008cfa:	9a06      	ldr	r2, [sp, #24]
 8008cfc:	9b07      	ldr	r3, [sp, #28]
 8008cfe:	0006      	movs	r6, r0
 8008d00:	000f      	movs	r7, r1
 8008d02:	f7f7 fbbd 	bl	8000480 <__aeabi_dcmpgt>
 8008d06:	2800      	cmp	r0, #0
 8008d08:	d000      	beq.n	8008d0c <_dtoa_r+0x510>
 8008d0a:	e10f      	b.n	8008f2c <_dtoa_r+0x730>
 8008d0c:	9a06      	ldr	r2, [sp, #24]
 8008d0e:	9b07      	ldr	r3, [sp, #28]
 8008d10:	0030      	movs	r0, r6
 8008d12:	0039      	movs	r1, r7
 8008d14:	f7f7 fb9a 	bl	800044c <__aeabi_dcmpeq>
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	d003      	beq.n	8008d24 <_dtoa_r+0x528>
 8008d1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d1e:	07dd      	lsls	r5, r3, #31
 8008d20:	d500      	bpl.n	8008d24 <_dtoa_r+0x528>
 8008d22:	e103      	b.n	8008f2c <_dtoa_r+0x730>
 8008d24:	9905      	ldr	r1, [sp, #20]
 8008d26:	9803      	ldr	r0, [sp, #12]
 8008d28:	f000 fbea 	bl	8009500 <_Bfree>
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	7023      	strb	r3, [r4, #0]
 8008d30:	9b04      	ldr	r3, [sp, #16]
 8008d32:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008d34:	3301      	adds	r3, #1
 8008d36:	6013      	str	r3, [r2, #0]
 8008d38:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d100      	bne.n	8008d40 <_dtoa_r+0x544>
 8008d3e:	e5a7      	b.n	8008890 <_dtoa_r+0x94>
 8008d40:	601c      	str	r4, [r3, #0]
 8008d42:	e5a5      	b.n	8008890 <_dtoa_r+0x94>
 8008d44:	423d      	tst	r5, r7
 8008d46:	d005      	beq.n	8008d54 <_dtoa_r+0x558>
 8008d48:	6832      	ldr	r2, [r6, #0]
 8008d4a:	6873      	ldr	r3, [r6, #4]
 8008d4c:	f7f9 fbf6 	bl	800253c <__aeabi_dmul>
 8008d50:	003b      	movs	r3, r7
 8008d52:	3401      	adds	r4, #1
 8008d54:	106d      	asrs	r5, r5, #1
 8008d56:	3608      	adds	r6, #8
 8008d58:	e736      	b.n	8008bc8 <_dtoa_r+0x3cc>
 8008d5a:	9b04      	ldr	r3, [sp, #16]
 8008d5c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d60:	e75a      	b.n	8008c18 <_dtoa_r+0x41c>
 8008d62:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008d64:	4b69      	ldr	r3, [pc, #420]	@ (8008f0c <_dtoa_r+0x710>)
 8008d66:	3a01      	subs	r2, #1
 8008d68:	00d2      	lsls	r2, r2, #3
 8008d6a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8008d6c:	189b      	adds	r3, r3, r2
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	2900      	cmp	r1, #0
 8008d74:	d04c      	beq.n	8008e10 <_dtoa_r+0x614>
 8008d76:	2000      	movs	r0, #0
 8008d78:	496b      	ldr	r1, [pc, #428]	@ (8008f28 <_dtoa_r+0x72c>)
 8008d7a:	f7f8 ff9b 	bl	8001cb4 <__aeabi_ddiv>
 8008d7e:	0032      	movs	r2, r6
 8008d80:	003b      	movs	r3, r7
 8008d82:	f7f9 fea3 	bl	8002acc <__aeabi_dsub>
 8008d86:	9a08      	ldr	r2, [sp, #32]
 8008d88:	0006      	movs	r6, r0
 8008d8a:	4694      	mov	ip, r2
 8008d8c:	000f      	movs	r7, r1
 8008d8e:	9b08      	ldr	r3, [sp, #32]
 8008d90:	9316      	str	r3, [sp, #88]	@ 0x58
 8008d92:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008d94:	4463      	add	r3, ip
 8008d96:	9311      	str	r3, [sp, #68]	@ 0x44
 8008d98:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008d9a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d9c:	f7fa fa54 	bl	8003248 <__aeabi_d2iz>
 8008da0:	0005      	movs	r5, r0
 8008da2:	f7fa fa8d 	bl	80032c0 <__aeabi_i2d>
 8008da6:	0002      	movs	r2, r0
 8008da8:	000b      	movs	r3, r1
 8008daa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008dac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008dae:	f7f9 fe8d 	bl	8002acc <__aeabi_dsub>
 8008db2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008db4:	3530      	adds	r5, #48	@ 0x30
 8008db6:	1c5c      	adds	r4, r3, #1
 8008db8:	701d      	strb	r5, [r3, #0]
 8008dba:	0032      	movs	r2, r6
 8008dbc:	003b      	movs	r3, r7
 8008dbe:	900a      	str	r0, [sp, #40]	@ 0x28
 8008dc0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008dc2:	f7f7 fb49 	bl	8000458 <__aeabi_dcmplt>
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	d16a      	bne.n	8008ea0 <_dtoa_r+0x6a4>
 8008dca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008dcc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008dce:	2000      	movs	r0, #0
 8008dd0:	4950      	ldr	r1, [pc, #320]	@ (8008f14 <_dtoa_r+0x718>)
 8008dd2:	f7f9 fe7b 	bl	8002acc <__aeabi_dsub>
 8008dd6:	0032      	movs	r2, r6
 8008dd8:	003b      	movs	r3, r7
 8008dda:	f7f7 fb3d 	bl	8000458 <__aeabi_dcmplt>
 8008dde:	2800      	cmp	r0, #0
 8008de0:	d000      	beq.n	8008de4 <_dtoa_r+0x5e8>
 8008de2:	e0a5      	b.n	8008f30 <_dtoa_r+0x734>
 8008de4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008de6:	42a3      	cmp	r3, r4
 8008de8:	d100      	bne.n	8008dec <_dtoa_r+0x5f0>
 8008dea:	e742      	b.n	8008c72 <_dtoa_r+0x476>
 8008dec:	2200      	movs	r2, #0
 8008dee:	0030      	movs	r0, r6
 8008df0:	0039      	movs	r1, r7
 8008df2:	4b49      	ldr	r3, [pc, #292]	@ (8008f18 <_dtoa_r+0x71c>)
 8008df4:	f7f9 fba2 	bl	800253c <__aeabi_dmul>
 8008df8:	2200      	movs	r2, #0
 8008dfa:	0006      	movs	r6, r0
 8008dfc:	000f      	movs	r7, r1
 8008dfe:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008e00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008e02:	4b45      	ldr	r3, [pc, #276]	@ (8008f18 <_dtoa_r+0x71c>)
 8008e04:	f7f9 fb9a 	bl	800253c <__aeabi_dmul>
 8008e08:	9416      	str	r4, [sp, #88]	@ 0x58
 8008e0a:	900a      	str	r0, [sp, #40]	@ 0x28
 8008e0c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008e0e:	e7c3      	b.n	8008d98 <_dtoa_r+0x59c>
 8008e10:	0030      	movs	r0, r6
 8008e12:	0039      	movs	r1, r7
 8008e14:	f7f9 fb92 	bl	800253c <__aeabi_dmul>
 8008e18:	9d08      	ldr	r5, [sp, #32]
 8008e1a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008e1c:	002b      	movs	r3, r5
 8008e1e:	4694      	mov	ip, r2
 8008e20:	9016      	str	r0, [sp, #88]	@ 0x58
 8008e22:	9117      	str	r1, [sp, #92]	@ 0x5c
 8008e24:	4463      	add	r3, ip
 8008e26:	9319      	str	r3, [sp, #100]	@ 0x64
 8008e28:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008e2a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008e2c:	f7fa fa0c 	bl	8003248 <__aeabi_d2iz>
 8008e30:	0004      	movs	r4, r0
 8008e32:	f7fa fa45 	bl	80032c0 <__aeabi_i2d>
 8008e36:	000b      	movs	r3, r1
 8008e38:	0002      	movs	r2, r0
 8008e3a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008e3c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008e3e:	f7f9 fe45 	bl	8002acc <__aeabi_dsub>
 8008e42:	3430      	adds	r4, #48	@ 0x30
 8008e44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e46:	702c      	strb	r4, [r5, #0]
 8008e48:	3501      	adds	r5, #1
 8008e4a:	0006      	movs	r6, r0
 8008e4c:	000f      	movs	r7, r1
 8008e4e:	42ab      	cmp	r3, r5
 8008e50:	d129      	bne.n	8008ea6 <_dtoa_r+0x6aa>
 8008e52:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8008e54:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8008e56:	9b08      	ldr	r3, [sp, #32]
 8008e58:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8008e5a:	469c      	mov	ip, r3
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	4b32      	ldr	r3, [pc, #200]	@ (8008f28 <_dtoa_r+0x72c>)
 8008e60:	4464      	add	r4, ip
 8008e62:	f7f8 fbc3 	bl	80015ec <__aeabi_dadd>
 8008e66:	0002      	movs	r2, r0
 8008e68:	000b      	movs	r3, r1
 8008e6a:	0030      	movs	r0, r6
 8008e6c:	0039      	movs	r1, r7
 8008e6e:	f7f7 fb07 	bl	8000480 <__aeabi_dcmpgt>
 8008e72:	2800      	cmp	r0, #0
 8008e74:	d15c      	bne.n	8008f30 <_dtoa_r+0x734>
 8008e76:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008e78:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008e7a:	2000      	movs	r0, #0
 8008e7c:	492a      	ldr	r1, [pc, #168]	@ (8008f28 <_dtoa_r+0x72c>)
 8008e7e:	f7f9 fe25 	bl	8002acc <__aeabi_dsub>
 8008e82:	0002      	movs	r2, r0
 8008e84:	000b      	movs	r3, r1
 8008e86:	0030      	movs	r0, r6
 8008e88:	0039      	movs	r1, r7
 8008e8a:	f7f7 fae5 	bl	8000458 <__aeabi_dcmplt>
 8008e8e:	2800      	cmp	r0, #0
 8008e90:	d100      	bne.n	8008e94 <_dtoa_r+0x698>
 8008e92:	e6ee      	b.n	8008c72 <_dtoa_r+0x476>
 8008e94:	0023      	movs	r3, r4
 8008e96:	3c01      	subs	r4, #1
 8008e98:	7822      	ldrb	r2, [r4, #0]
 8008e9a:	2a30      	cmp	r2, #48	@ 0x30
 8008e9c:	d0fa      	beq.n	8008e94 <_dtoa_r+0x698>
 8008e9e:	001c      	movs	r4, r3
 8008ea0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008ea2:	9304      	str	r3, [sp, #16]
 8008ea4:	e73e      	b.n	8008d24 <_dtoa_r+0x528>
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8008f18 <_dtoa_r+0x71c>)
 8008eaa:	f7f9 fb47 	bl	800253c <__aeabi_dmul>
 8008eae:	900a      	str	r0, [sp, #40]	@ 0x28
 8008eb0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008eb2:	e7b9      	b.n	8008e28 <_dtoa_r+0x62c>
 8008eb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d10c      	bne.n	8008ed4 <_dtoa_r+0x6d8>
 8008eba:	9806      	ldr	r0, [sp, #24]
 8008ebc:	9907      	ldr	r1, [sp, #28]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	4b18      	ldr	r3, [pc, #96]	@ (8008f24 <_dtoa_r+0x728>)
 8008ec2:	f7f9 fb3b 	bl	800253c <__aeabi_dmul>
 8008ec6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ec8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008eca:	f7f7 fae3 	bl	8000494 <__aeabi_dcmpge>
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	d100      	bne.n	8008ed4 <_dtoa_r+0x6d8>
 8008ed2:	e164      	b.n	800919e <_dtoa_r+0x9a2>
 8008ed4:	2600      	movs	r6, #0
 8008ed6:	0037      	movs	r7, r6
 8008ed8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008eda:	9c08      	ldr	r4, [sp, #32]
 8008edc:	43db      	mvns	r3, r3
 8008ede:	930c      	str	r3, [sp, #48]	@ 0x30
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	9304      	str	r3, [sp, #16]
 8008ee4:	0031      	movs	r1, r6
 8008ee6:	9803      	ldr	r0, [sp, #12]
 8008ee8:	f000 fb0a 	bl	8009500 <_Bfree>
 8008eec:	2f00      	cmp	r7, #0
 8008eee:	d0d7      	beq.n	8008ea0 <_dtoa_r+0x6a4>
 8008ef0:	9b04      	ldr	r3, [sp, #16]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d005      	beq.n	8008f02 <_dtoa_r+0x706>
 8008ef6:	42bb      	cmp	r3, r7
 8008ef8:	d003      	beq.n	8008f02 <_dtoa_r+0x706>
 8008efa:	0019      	movs	r1, r3
 8008efc:	9803      	ldr	r0, [sp, #12]
 8008efe:	f000 faff 	bl	8009500 <_Bfree>
 8008f02:	0039      	movs	r1, r7
 8008f04:	9803      	ldr	r0, [sp, #12]
 8008f06:	f000 fafb 	bl	8009500 <_Bfree>
 8008f0a:	e7c9      	b.n	8008ea0 <_dtoa_r+0x6a4>
 8008f0c:	0800c510 	.word	0x0800c510
 8008f10:	0800c4e8 	.word	0x0800c4e8
 8008f14:	3ff00000 	.word	0x3ff00000
 8008f18:	40240000 	.word	0x40240000
 8008f1c:	401c0000 	.word	0x401c0000
 8008f20:	fcc00000 	.word	0xfcc00000
 8008f24:	40140000 	.word	0x40140000
 8008f28:	3fe00000 	.word	0x3fe00000
 8008f2c:	9b04      	ldr	r3, [sp, #16]
 8008f2e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008f30:	0023      	movs	r3, r4
 8008f32:	001c      	movs	r4, r3
 8008f34:	3b01      	subs	r3, #1
 8008f36:	781a      	ldrb	r2, [r3, #0]
 8008f38:	2a39      	cmp	r2, #57	@ 0x39
 8008f3a:	d108      	bne.n	8008f4e <_dtoa_r+0x752>
 8008f3c:	9a08      	ldr	r2, [sp, #32]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d1f7      	bne.n	8008f32 <_dtoa_r+0x736>
 8008f42:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008f44:	9908      	ldr	r1, [sp, #32]
 8008f46:	3201      	adds	r2, #1
 8008f48:	920c      	str	r2, [sp, #48]	@ 0x30
 8008f4a:	2230      	movs	r2, #48	@ 0x30
 8008f4c:	700a      	strb	r2, [r1, #0]
 8008f4e:	781a      	ldrb	r2, [r3, #0]
 8008f50:	3201      	adds	r2, #1
 8008f52:	701a      	strb	r2, [r3, #0]
 8008f54:	e7a4      	b.n	8008ea0 <_dtoa_r+0x6a4>
 8008f56:	2200      	movs	r2, #0
 8008f58:	4bc6      	ldr	r3, [pc, #792]	@ (8009274 <_dtoa_r+0xa78>)
 8008f5a:	f7f9 faef 	bl	800253c <__aeabi_dmul>
 8008f5e:	2200      	movs	r2, #0
 8008f60:	2300      	movs	r3, #0
 8008f62:	0006      	movs	r6, r0
 8008f64:	000f      	movs	r7, r1
 8008f66:	f7f7 fa71 	bl	800044c <__aeabi_dcmpeq>
 8008f6a:	2800      	cmp	r0, #0
 8008f6c:	d100      	bne.n	8008f70 <_dtoa_r+0x774>
 8008f6e:	e6a1      	b.n	8008cb4 <_dtoa_r+0x4b8>
 8008f70:	e6d8      	b.n	8008d24 <_dtoa_r+0x528>
 8008f72:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8008f74:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8008f76:	9c06      	ldr	r4, [sp, #24]
 8008f78:	2f00      	cmp	r7, #0
 8008f7a:	d014      	beq.n	8008fa6 <_dtoa_r+0x7aa>
 8008f7c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008f7e:	2a01      	cmp	r2, #1
 8008f80:	dd00      	ble.n	8008f84 <_dtoa_r+0x788>
 8008f82:	e0c8      	b.n	8009116 <_dtoa_r+0x91a>
 8008f84:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8008f86:	2a00      	cmp	r2, #0
 8008f88:	d100      	bne.n	8008f8c <_dtoa_r+0x790>
 8008f8a:	e0be      	b.n	800910a <_dtoa_r+0x90e>
 8008f8c:	4aba      	ldr	r2, [pc, #744]	@ (8009278 <_dtoa_r+0xa7c>)
 8008f8e:	189b      	adds	r3, r3, r2
 8008f90:	9a06      	ldr	r2, [sp, #24]
 8008f92:	2101      	movs	r1, #1
 8008f94:	18d2      	adds	r2, r2, r3
 8008f96:	9206      	str	r2, [sp, #24]
 8008f98:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008f9a:	9803      	ldr	r0, [sp, #12]
 8008f9c:	18d3      	adds	r3, r2, r3
 8008f9e:	930d      	str	r3, [sp, #52]	@ 0x34
 8008fa0:	f000 fbb2 	bl	8009708 <__i2b>
 8008fa4:	0007      	movs	r7, r0
 8008fa6:	2c00      	cmp	r4, #0
 8008fa8:	d00e      	beq.n	8008fc8 <_dtoa_r+0x7cc>
 8008faa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	dd0b      	ble.n	8008fc8 <_dtoa_r+0x7cc>
 8008fb0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008fb2:	0023      	movs	r3, r4
 8008fb4:	4294      	cmp	r4, r2
 8008fb6:	dd00      	ble.n	8008fba <_dtoa_r+0x7be>
 8008fb8:	0013      	movs	r3, r2
 8008fba:	9a06      	ldr	r2, [sp, #24]
 8008fbc:	1ae4      	subs	r4, r4, r3
 8008fbe:	1ad2      	subs	r2, r2, r3
 8008fc0:	9206      	str	r2, [sp, #24]
 8008fc2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008fc4:	1ad3      	subs	r3, r2, r3
 8008fc6:	930d      	str	r3, [sp, #52]	@ 0x34
 8008fc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d01f      	beq.n	800900e <_dtoa_r+0x812>
 8008fce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d100      	bne.n	8008fd6 <_dtoa_r+0x7da>
 8008fd4:	e0b5      	b.n	8009142 <_dtoa_r+0x946>
 8008fd6:	2d00      	cmp	r5, #0
 8008fd8:	d010      	beq.n	8008ffc <_dtoa_r+0x800>
 8008fda:	0039      	movs	r1, r7
 8008fdc:	002a      	movs	r2, r5
 8008fde:	9803      	ldr	r0, [sp, #12]
 8008fe0:	f000 fc5c 	bl	800989c <__pow5mult>
 8008fe4:	9a05      	ldr	r2, [sp, #20]
 8008fe6:	0001      	movs	r1, r0
 8008fe8:	0007      	movs	r7, r0
 8008fea:	9803      	ldr	r0, [sp, #12]
 8008fec:	f000 fba4 	bl	8009738 <__multiply>
 8008ff0:	0006      	movs	r6, r0
 8008ff2:	9905      	ldr	r1, [sp, #20]
 8008ff4:	9803      	ldr	r0, [sp, #12]
 8008ff6:	f000 fa83 	bl	8009500 <_Bfree>
 8008ffa:	9605      	str	r6, [sp, #20]
 8008ffc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ffe:	1b5a      	subs	r2, r3, r5
 8009000:	42ab      	cmp	r3, r5
 8009002:	d004      	beq.n	800900e <_dtoa_r+0x812>
 8009004:	9905      	ldr	r1, [sp, #20]
 8009006:	9803      	ldr	r0, [sp, #12]
 8009008:	f000 fc48 	bl	800989c <__pow5mult>
 800900c:	9005      	str	r0, [sp, #20]
 800900e:	2101      	movs	r1, #1
 8009010:	9803      	ldr	r0, [sp, #12]
 8009012:	f000 fb79 	bl	8009708 <__i2b>
 8009016:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009018:	0006      	movs	r6, r0
 800901a:	2b00      	cmp	r3, #0
 800901c:	d100      	bne.n	8009020 <_dtoa_r+0x824>
 800901e:	e1bc      	b.n	800939a <_dtoa_r+0xb9e>
 8009020:	001a      	movs	r2, r3
 8009022:	0001      	movs	r1, r0
 8009024:	9803      	ldr	r0, [sp, #12]
 8009026:	f000 fc39 	bl	800989c <__pow5mult>
 800902a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800902c:	0006      	movs	r6, r0
 800902e:	2500      	movs	r5, #0
 8009030:	2b01      	cmp	r3, #1
 8009032:	dc16      	bgt.n	8009062 <_dtoa_r+0x866>
 8009034:	2500      	movs	r5, #0
 8009036:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009038:	42ab      	cmp	r3, r5
 800903a:	d10e      	bne.n	800905a <_dtoa_r+0x85e>
 800903c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800903e:	031b      	lsls	r3, r3, #12
 8009040:	42ab      	cmp	r3, r5
 8009042:	d10a      	bne.n	800905a <_dtoa_r+0x85e>
 8009044:	4b8d      	ldr	r3, [pc, #564]	@ (800927c <_dtoa_r+0xa80>)
 8009046:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009048:	4213      	tst	r3, r2
 800904a:	d006      	beq.n	800905a <_dtoa_r+0x85e>
 800904c:	9b06      	ldr	r3, [sp, #24]
 800904e:	3501      	adds	r5, #1
 8009050:	3301      	adds	r3, #1
 8009052:	9306      	str	r3, [sp, #24]
 8009054:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009056:	3301      	adds	r3, #1
 8009058:	930d      	str	r3, [sp, #52]	@ 0x34
 800905a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800905c:	2001      	movs	r0, #1
 800905e:	2b00      	cmp	r3, #0
 8009060:	d008      	beq.n	8009074 <_dtoa_r+0x878>
 8009062:	6933      	ldr	r3, [r6, #16]
 8009064:	3303      	adds	r3, #3
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	18f3      	adds	r3, r6, r3
 800906a:	6858      	ldr	r0, [r3, #4]
 800906c:	f000 fafc 	bl	8009668 <__hi0bits>
 8009070:	2320      	movs	r3, #32
 8009072:	1a18      	subs	r0, r3, r0
 8009074:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009076:	1818      	adds	r0, r3, r0
 8009078:	0002      	movs	r2, r0
 800907a:	231f      	movs	r3, #31
 800907c:	401a      	ands	r2, r3
 800907e:	4218      	tst	r0, r3
 8009080:	d065      	beq.n	800914e <_dtoa_r+0x952>
 8009082:	3301      	adds	r3, #1
 8009084:	1a9b      	subs	r3, r3, r2
 8009086:	2b04      	cmp	r3, #4
 8009088:	dd5d      	ble.n	8009146 <_dtoa_r+0x94a>
 800908a:	231c      	movs	r3, #28
 800908c:	1a9b      	subs	r3, r3, r2
 800908e:	9a06      	ldr	r2, [sp, #24]
 8009090:	18e4      	adds	r4, r4, r3
 8009092:	18d2      	adds	r2, r2, r3
 8009094:	9206      	str	r2, [sp, #24]
 8009096:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009098:	18d3      	adds	r3, r2, r3
 800909a:	930d      	str	r3, [sp, #52]	@ 0x34
 800909c:	9b06      	ldr	r3, [sp, #24]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	dd05      	ble.n	80090ae <_dtoa_r+0x8b2>
 80090a2:	001a      	movs	r2, r3
 80090a4:	9905      	ldr	r1, [sp, #20]
 80090a6:	9803      	ldr	r0, [sp, #12]
 80090a8:	f000 fc54 	bl	8009954 <__lshift>
 80090ac:	9005      	str	r0, [sp, #20]
 80090ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	dd05      	ble.n	80090c0 <_dtoa_r+0x8c4>
 80090b4:	0031      	movs	r1, r6
 80090b6:	001a      	movs	r2, r3
 80090b8:	9803      	ldr	r0, [sp, #12]
 80090ba:	f000 fc4b 	bl	8009954 <__lshift>
 80090be:	0006      	movs	r6, r0
 80090c0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d045      	beq.n	8009152 <_dtoa_r+0x956>
 80090c6:	0031      	movs	r1, r6
 80090c8:	9805      	ldr	r0, [sp, #20]
 80090ca:	f000 fcaf 	bl	8009a2c <__mcmp>
 80090ce:	2800      	cmp	r0, #0
 80090d0:	da3f      	bge.n	8009152 <_dtoa_r+0x956>
 80090d2:	9b04      	ldr	r3, [sp, #16]
 80090d4:	220a      	movs	r2, #10
 80090d6:	3b01      	subs	r3, #1
 80090d8:	930c      	str	r3, [sp, #48]	@ 0x30
 80090da:	9905      	ldr	r1, [sp, #20]
 80090dc:	2300      	movs	r3, #0
 80090de:	9803      	ldr	r0, [sp, #12]
 80090e0:	f000 fa32 	bl	8009548 <__multadd>
 80090e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80090e6:	9005      	str	r0, [sp, #20]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d100      	bne.n	80090ee <_dtoa_r+0x8f2>
 80090ec:	e15c      	b.n	80093a8 <_dtoa_r+0xbac>
 80090ee:	2300      	movs	r3, #0
 80090f0:	0039      	movs	r1, r7
 80090f2:	220a      	movs	r2, #10
 80090f4:	9803      	ldr	r0, [sp, #12]
 80090f6:	f000 fa27 	bl	8009548 <__multadd>
 80090fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090fc:	0007      	movs	r7, r0
 80090fe:	2b00      	cmp	r3, #0
 8009100:	dc55      	bgt.n	80091ae <_dtoa_r+0x9b2>
 8009102:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009104:	2b02      	cmp	r3, #2
 8009106:	dc2d      	bgt.n	8009164 <_dtoa_r+0x968>
 8009108:	e051      	b.n	80091ae <_dtoa_r+0x9b2>
 800910a:	2336      	movs	r3, #54	@ 0x36
 800910c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800910e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8009110:	9c06      	ldr	r4, [sp, #24]
 8009112:	1a9b      	subs	r3, r3, r2
 8009114:	e73c      	b.n	8008f90 <_dtoa_r+0x794>
 8009116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009118:	1e5d      	subs	r5, r3, #1
 800911a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800911c:	42ab      	cmp	r3, r5
 800911e:	db08      	blt.n	8009132 <_dtoa_r+0x936>
 8009120:	1b5d      	subs	r5, r3, r5
 8009122:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009124:	9c06      	ldr	r4, [sp, #24]
 8009126:	2b00      	cmp	r3, #0
 8009128:	db00      	blt.n	800912c <_dtoa_r+0x930>
 800912a:	e731      	b.n	8008f90 <_dtoa_r+0x794>
 800912c:	1ae4      	subs	r4, r4, r3
 800912e:	2300      	movs	r3, #0
 8009130:	e72e      	b.n	8008f90 <_dtoa_r+0x794>
 8009132:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009134:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009136:	1aeb      	subs	r3, r5, r3
 8009138:	18d3      	adds	r3, r2, r3
 800913a:	950f      	str	r5, [sp, #60]	@ 0x3c
 800913c:	9314      	str	r3, [sp, #80]	@ 0x50
 800913e:	2500      	movs	r5, #0
 8009140:	e7ef      	b.n	8009122 <_dtoa_r+0x926>
 8009142:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009144:	e75e      	b.n	8009004 <_dtoa_r+0x808>
 8009146:	2b04      	cmp	r3, #4
 8009148:	d0a8      	beq.n	800909c <_dtoa_r+0x8a0>
 800914a:	331c      	adds	r3, #28
 800914c:	e79f      	b.n	800908e <_dtoa_r+0x892>
 800914e:	0013      	movs	r3, r2
 8009150:	e7fb      	b.n	800914a <_dtoa_r+0x94e>
 8009152:	9b04      	ldr	r3, [sp, #16]
 8009154:	930c      	str	r3, [sp, #48]	@ 0x30
 8009156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009158:	930e      	str	r3, [sp, #56]	@ 0x38
 800915a:	2b00      	cmp	r3, #0
 800915c:	dc23      	bgt.n	80091a6 <_dtoa_r+0x9aa>
 800915e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009160:	2b02      	cmp	r3, #2
 8009162:	dd20      	ble.n	80091a6 <_dtoa_r+0x9aa>
 8009164:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009166:	2b00      	cmp	r3, #0
 8009168:	d000      	beq.n	800916c <_dtoa_r+0x970>
 800916a:	e6b5      	b.n	8008ed8 <_dtoa_r+0x6dc>
 800916c:	0031      	movs	r1, r6
 800916e:	2205      	movs	r2, #5
 8009170:	9803      	ldr	r0, [sp, #12]
 8009172:	f000 f9e9 	bl	8009548 <__multadd>
 8009176:	0006      	movs	r6, r0
 8009178:	0001      	movs	r1, r0
 800917a:	9805      	ldr	r0, [sp, #20]
 800917c:	f000 fc56 	bl	8009a2c <__mcmp>
 8009180:	2800      	cmp	r0, #0
 8009182:	dc00      	bgt.n	8009186 <_dtoa_r+0x98a>
 8009184:	e6a8      	b.n	8008ed8 <_dtoa_r+0x6dc>
 8009186:	9b08      	ldr	r3, [sp, #32]
 8009188:	9a08      	ldr	r2, [sp, #32]
 800918a:	1c5c      	adds	r4, r3, #1
 800918c:	2331      	movs	r3, #49	@ 0x31
 800918e:	7013      	strb	r3, [r2, #0]
 8009190:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009192:	3301      	adds	r3, #1
 8009194:	930c      	str	r3, [sp, #48]	@ 0x30
 8009196:	e6a3      	b.n	8008ee0 <_dtoa_r+0x6e4>
 8009198:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800919a:	0037      	movs	r7, r6
 800919c:	e7f3      	b.n	8009186 <_dtoa_r+0x98a>
 800919e:	9b04      	ldr	r3, [sp, #16]
 80091a0:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80091a2:	930c      	str	r3, [sp, #48]	@ 0x30
 80091a4:	e7f9      	b.n	800919a <_dtoa_r+0x99e>
 80091a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d100      	bne.n	80091ae <_dtoa_r+0x9b2>
 80091ac:	e100      	b.n	80093b0 <_dtoa_r+0xbb4>
 80091ae:	2c00      	cmp	r4, #0
 80091b0:	dd05      	ble.n	80091be <_dtoa_r+0x9c2>
 80091b2:	0039      	movs	r1, r7
 80091b4:	0022      	movs	r2, r4
 80091b6:	9803      	ldr	r0, [sp, #12]
 80091b8:	f000 fbcc 	bl	8009954 <__lshift>
 80091bc:	0007      	movs	r7, r0
 80091be:	0038      	movs	r0, r7
 80091c0:	2d00      	cmp	r5, #0
 80091c2:	d018      	beq.n	80091f6 <_dtoa_r+0x9fa>
 80091c4:	6879      	ldr	r1, [r7, #4]
 80091c6:	9803      	ldr	r0, [sp, #12]
 80091c8:	f000 f956 	bl	8009478 <_Balloc>
 80091cc:	1e04      	subs	r4, r0, #0
 80091ce:	d105      	bne.n	80091dc <_dtoa_r+0x9e0>
 80091d0:	0022      	movs	r2, r4
 80091d2:	4b2b      	ldr	r3, [pc, #172]	@ (8009280 <_dtoa_r+0xa84>)
 80091d4:	482b      	ldr	r0, [pc, #172]	@ (8009284 <_dtoa_r+0xa88>)
 80091d6:	492c      	ldr	r1, [pc, #176]	@ (8009288 <_dtoa_r+0xa8c>)
 80091d8:	f7ff fb25 	bl	8008826 <_dtoa_r+0x2a>
 80091dc:	0039      	movs	r1, r7
 80091de:	693a      	ldr	r2, [r7, #16]
 80091e0:	310c      	adds	r1, #12
 80091e2:	3202      	adds	r2, #2
 80091e4:	0092      	lsls	r2, r2, #2
 80091e6:	300c      	adds	r0, #12
 80091e8:	f7ff fa6c 	bl	80086c4 <memcpy>
 80091ec:	2201      	movs	r2, #1
 80091ee:	0021      	movs	r1, r4
 80091f0:	9803      	ldr	r0, [sp, #12]
 80091f2:	f000 fbaf 	bl	8009954 <__lshift>
 80091f6:	9b08      	ldr	r3, [sp, #32]
 80091f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80091fa:	9306      	str	r3, [sp, #24]
 80091fc:	3b01      	subs	r3, #1
 80091fe:	189b      	adds	r3, r3, r2
 8009200:	2201      	movs	r2, #1
 8009202:	9704      	str	r7, [sp, #16]
 8009204:	0007      	movs	r7, r0
 8009206:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009208:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800920a:	4013      	ands	r3, r2
 800920c:	930e      	str	r3, [sp, #56]	@ 0x38
 800920e:	0031      	movs	r1, r6
 8009210:	9805      	ldr	r0, [sp, #20]
 8009212:	f7ff fa65 	bl	80086e0 <quorem>
 8009216:	9904      	ldr	r1, [sp, #16]
 8009218:	0005      	movs	r5, r0
 800921a:	900a      	str	r0, [sp, #40]	@ 0x28
 800921c:	9805      	ldr	r0, [sp, #20]
 800921e:	f000 fc05 	bl	8009a2c <__mcmp>
 8009222:	003a      	movs	r2, r7
 8009224:	900d      	str	r0, [sp, #52]	@ 0x34
 8009226:	0031      	movs	r1, r6
 8009228:	9803      	ldr	r0, [sp, #12]
 800922a:	f000 fc1b 	bl	8009a64 <__mdiff>
 800922e:	2201      	movs	r2, #1
 8009230:	68c3      	ldr	r3, [r0, #12]
 8009232:	0004      	movs	r4, r0
 8009234:	3530      	adds	r5, #48	@ 0x30
 8009236:	9209      	str	r2, [sp, #36]	@ 0x24
 8009238:	2b00      	cmp	r3, #0
 800923a:	d104      	bne.n	8009246 <_dtoa_r+0xa4a>
 800923c:	0001      	movs	r1, r0
 800923e:	9805      	ldr	r0, [sp, #20]
 8009240:	f000 fbf4 	bl	8009a2c <__mcmp>
 8009244:	9009      	str	r0, [sp, #36]	@ 0x24
 8009246:	0021      	movs	r1, r4
 8009248:	9803      	ldr	r0, [sp, #12]
 800924a:	f000 f959 	bl	8009500 <_Bfree>
 800924e:	9b06      	ldr	r3, [sp, #24]
 8009250:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009252:	1c5c      	adds	r4, r3, #1
 8009254:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009256:	4313      	orrs	r3, r2
 8009258:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800925a:	4313      	orrs	r3, r2
 800925c:	d116      	bne.n	800928c <_dtoa_r+0xa90>
 800925e:	2d39      	cmp	r5, #57	@ 0x39
 8009260:	d02f      	beq.n	80092c2 <_dtoa_r+0xac6>
 8009262:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009264:	2b00      	cmp	r3, #0
 8009266:	dd01      	ble.n	800926c <_dtoa_r+0xa70>
 8009268:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800926a:	3531      	adds	r5, #49	@ 0x31
 800926c:	9b06      	ldr	r3, [sp, #24]
 800926e:	701d      	strb	r5, [r3, #0]
 8009270:	e638      	b.n	8008ee4 <_dtoa_r+0x6e8>
 8009272:	46c0      	nop			@ (mov r8, r8)
 8009274:	40240000 	.word	0x40240000
 8009278:	00000433 	.word	0x00000433
 800927c:	7ff00000 	.word	0x7ff00000
 8009280:	0800c46d 	.word	0x0800c46d
 8009284:	0800c415 	.word	0x0800c415
 8009288:	000002ef 	.word	0x000002ef
 800928c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800928e:	2b00      	cmp	r3, #0
 8009290:	db04      	blt.n	800929c <_dtoa_r+0xaa0>
 8009292:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009294:	4313      	orrs	r3, r2
 8009296:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009298:	4313      	orrs	r3, r2
 800929a:	d11e      	bne.n	80092da <_dtoa_r+0xade>
 800929c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800929e:	2b00      	cmp	r3, #0
 80092a0:	dde4      	ble.n	800926c <_dtoa_r+0xa70>
 80092a2:	9905      	ldr	r1, [sp, #20]
 80092a4:	2201      	movs	r2, #1
 80092a6:	9803      	ldr	r0, [sp, #12]
 80092a8:	f000 fb54 	bl	8009954 <__lshift>
 80092ac:	0031      	movs	r1, r6
 80092ae:	9005      	str	r0, [sp, #20]
 80092b0:	f000 fbbc 	bl	8009a2c <__mcmp>
 80092b4:	2800      	cmp	r0, #0
 80092b6:	dc02      	bgt.n	80092be <_dtoa_r+0xac2>
 80092b8:	d1d8      	bne.n	800926c <_dtoa_r+0xa70>
 80092ba:	07eb      	lsls	r3, r5, #31
 80092bc:	d5d6      	bpl.n	800926c <_dtoa_r+0xa70>
 80092be:	2d39      	cmp	r5, #57	@ 0x39
 80092c0:	d1d2      	bne.n	8009268 <_dtoa_r+0xa6c>
 80092c2:	2339      	movs	r3, #57	@ 0x39
 80092c4:	9a06      	ldr	r2, [sp, #24]
 80092c6:	7013      	strb	r3, [r2, #0]
 80092c8:	0023      	movs	r3, r4
 80092ca:	001c      	movs	r4, r3
 80092cc:	3b01      	subs	r3, #1
 80092ce:	781a      	ldrb	r2, [r3, #0]
 80092d0:	2a39      	cmp	r2, #57	@ 0x39
 80092d2:	d04f      	beq.n	8009374 <_dtoa_r+0xb78>
 80092d4:	3201      	adds	r2, #1
 80092d6:	701a      	strb	r2, [r3, #0]
 80092d8:	e604      	b.n	8008ee4 <_dtoa_r+0x6e8>
 80092da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092dc:	2b00      	cmp	r3, #0
 80092de:	dd03      	ble.n	80092e8 <_dtoa_r+0xaec>
 80092e0:	2d39      	cmp	r5, #57	@ 0x39
 80092e2:	d0ee      	beq.n	80092c2 <_dtoa_r+0xac6>
 80092e4:	3501      	adds	r5, #1
 80092e6:	e7c1      	b.n	800926c <_dtoa_r+0xa70>
 80092e8:	9b06      	ldr	r3, [sp, #24]
 80092ea:	9a06      	ldr	r2, [sp, #24]
 80092ec:	701d      	strb	r5, [r3, #0]
 80092ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d02a      	beq.n	800934a <_dtoa_r+0xb4e>
 80092f4:	2300      	movs	r3, #0
 80092f6:	220a      	movs	r2, #10
 80092f8:	9905      	ldr	r1, [sp, #20]
 80092fa:	9803      	ldr	r0, [sp, #12]
 80092fc:	f000 f924 	bl	8009548 <__multadd>
 8009300:	9b04      	ldr	r3, [sp, #16]
 8009302:	9005      	str	r0, [sp, #20]
 8009304:	42bb      	cmp	r3, r7
 8009306:	d109      	bne.n	800931c <_dtoa_r+0xb20>
 8009308:	2300      	movs	r3, #0
 800930a:	220a      	movs	r2, #10
 800930c:	9904      	ldr	r1, [sp, #16]
 800930e:	9803      	ldr	r0, [sp, #12]
 8009310:	f000 f91a 	bl	8009548 <__multadd>
 8009314:	9004      	str	r0, [sp, #16]
 8009316:	0007      	movs	r7, r0
 8009318:	9406      	str	r4, [sp, #24]
 800931a:	e778      	b.n	800920e <_dtoa_r+0xa12>
 800931c:	9904      	ldr	r1, [sp, #16]
 800931e:	2300      	movs	r3, #0
 8009320:	220a      	movs	r2, #10
 8009322:	9803      	ldr	r0, [sp, #12]
 8009324:	f000 f910 	bl	8009548 <__multadd>
 8009328:	2300      	movs	r3, #0
 800932a:	9004      	str	r0, [sp, #16]
 800932c:	220a      	movs	r2, #10
 800932e:	0039      	movs	r1, r7
 8009330:	9803      	ldr	r0, [sp, #12]
 8009332:	f000 f909 	bl	8009548 <__multadd>
 8009336:	e7ee      	b.n	8009316 <_dtoa_r+0xb1a>
 8009338:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800933a:	2401      	movs	r4, #1
 800933c:	2b00      	cmp	r3, #0
 800933e:	dd00      	ble.n	8009342 <_dtoa_r+0xb46>
 8009340:	001c      	movs	r4, r3
 8009342:	9b08      	ldr	r3, [sp, #32]
 8009344:	191c      	adds	r4, r3, r4
 8009346:	2300      	movs	r3, #0
 8009348:	9304      	str	r3, [sp, #16]
 800934a:	9905      	ldr	r1, [sp, #20]
 800934c:	2201      	movs	r2, #1
 800934e:	9803      	ldr	r0, [sp, #12]
 8009350:	f000 fb00 	bl	8009954 <__lshift>
 8009354:	0031      	movs	r1, r6
 8009356:	9005      	str	r0, [sp, #20]
 8009358:	f000 fb68 	bl	8009a2c <__mcmp>
 800935c:	2800      	cmp	r0, #0
 800935e:	dcb3      	bgt.n	80092c8 <_dtoa_r+0xacc>
 8009360:	d101      	bne.n	8009366 <_dtoa_r+0xb6a>
 8009362:	07ed      	lsls	r5, r5, #31
 8009364:	d4b0      	bmi.n	80092c8 <_dtoa_r+0xacc>
 8009366:	0023      	movs	r3, r4
 8009368:	001c      	movs	r4, r3
 800936a:	3b01      	subs	r3, #1
 800936c:	781a      	ldrb	r2, [r3, #0]
 800936e:	2a30      	cmp	r2, #48	@ 0x30
 8009370:	d0fa      	beq.n	8009368 <_dtoa_r+0xb6c>
 8009372:	e5b7      	b.n	8008ee4 <_dtoa_r+0x6e8>
 8009374:	9a08      	ldr	r2, [sp, #32]
 8009376:	429a      	cmp	r2, r3
 8009378:	d1a7      	bne.n	80092ca <_dtoa_r+0xace>
 800937a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800937c:	3301      	adds	r3, #1
 800937e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009380:	2331      	movs	r3, #49	@ 0x31
 8009382:	7013      	strb	r3, [r2, #0]
 8009384:	e5ae      	b.n	8008ee4 <_dtoa_r+0x6e8>
 8009386:	4b15      	ldr	r3, [pc, #84]	@ (80093dc <_dtoa_r+0xbe0>)
 8009388:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800938a:	9308      	str	r3, [sp, #32]
 800938c:	4b14      	ldr	r3, [pc, #80]	@ (80093e0 <_dtoa_r+0xbe4>)
 800938e:	2a00      	cmp	r2, #0
 8009390:	d001      	beq.n	8009396 <_dtoa_r+0xb9a>
 8009392:	f7ff fa7b 	bl	800888c <_dtoa_r+0x90>
 8009396:	f7ff fa7b 	bl	8008890 <_dtoa_r+0x94>
 800939a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800939c:	2b01      	cmp	r3, #1
 800939e:	dc00      	bgt.n	80093a2 <_dtoa_r+0xba6>
 80093a0:	e648      	b.n	8009034 <_dtoa_r+0x838>
 80093a2:	2001      	movs	r0, #1
 80093a4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80093a6:	e665      	b.n	8009074 <_dtoa_r+0x878>
 80093a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	dc00      	bgt.n	80093b0 <_dtoa_r+0xbb4>
 80093ae:	e6d6      	b.n	800915e <_dtoa_r+0x962>
 80093b0:	2400      	movs	r4, #0
 80093b2:	0031      	movs	r1, r6
 80093b4:	9805      	ldr	r0, [sp, #20]
 80093b6:	f7ff f993 	bl	80086e0 <quorem>
 80093ba:	9b08      	ldr	r3, [sp, #32]
 80093bc:	3030      	adds	r0, #48	@ 0x30
 80093be:	5518      	strb	r0, [r3, r4]
 80093c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093c2:	3401      	adds	r4, #1
 80093c4:	0005      	movs	r5, r0
 80093c6:	429c      	cmp	r4, r3
 80093c8:	dab6      	bge.n	8009338 <_dtoa_r+0xb3c>
 80093ca:	2300      	movs	r3, #0
 80093cc:	220a      	movs	r2, #10
 80093ce:	9905      	ldr	r1, [sp, #20]
 80093d0:	9803      	ldr	r0, [sp, #12]
 80093d2:	f000 f8b9 	bl	8009548 <__multadd>
 80093d6:	9005      	str	r0, [sp, #20]
 80093d8:	e7eb      	b.n	80093b2 <_dtoa_r+0xbb6>
 80093da:	46c0      	nop			@ (mov r8, r8)
 80093dc:	0800c3f1 	.word	0x0800c3f1
 80093e0:	0800c3f9 	.word	0x0800c3f9

080093e4 <_free_r>:
 80093e4:	b570      	push	{r4, r5, r6, lr}
 80093e6:	0005      	movs	r5, r0
 80093e8:	1e0c      	subs	r4, r1, #0
 80093ea:	d010      	beq.n	800940e <_free_r+0x2a>
 80093ec:	3c04      	subs	r4, #4
 80093ee:	6823      	ldr	r3, [r4, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	da00      	bge.n	80093f6 <_free_r+0x12>
 80093f4:	18e4      	adds	r4, r4, r3
 80093f6:	0028      	movs	r0, r5
 80093f8:	f7fe f900 	bl	80075fc <__malloc_lock>
 80093fc:	4a1d      	ldr	r2, [pc, #116]	@ (8009474 <_free_r+0x90>)
 80093fe:	6813      	ldr	r3, [r2, #0]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d105      	bne.n	8009410 <_free_r+0x2c>
 8009404:	6063      	str	r3, [r4, #4]
 8009406:	6014      	str	r4, [r2, #0]
 8009408:	0028      	movs	r0, r5
 800940a:	f7fe f8ff 	bl	800760c <__malloc_unlock>
 800940e:	bd70      	pop	{r4, r5, r6, pc}
 8009410:	42a3      	cmp	r3, r4
 8009412:	d908      	bls.n	8009426 <_free_r+0x42>
 8009414:	6820      	ldr	r0, [r4, #0]
 8009416:	1821      	adds	r1, r4, r0
 8009418:	428b      	cmp	r3, r1
 800941a:	d1f3      	bne.n	8009404 <_free_r+0x20>
 800941c:	6819      	ldr	r1, [r3, #0]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	1809      	adds	r1, r1, r0
 8009422:	6021      	str	r1, [r4, #0]
 8009424:	e7ee      	b.n	8009404 <_free_r+0x20>
 8009426:	001a      	movs	r2, r3
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d001      	beq.n	8009432 <_free_r+0x4e>
 800942e:	42a3      	cmp	r3, r4
 8009430:	d9f9      	bls.n	8009426 <_free_r+0x42>
 8009432:	6811      	ldr	r1, [r2, #0]
 8009434:	1850      	adds	r0, r2, r1
 8009436:	42a0      	cmp	r0, r4
 8009438:	d10b      	bne.n	8009452 <_free_r+0x6e>
 800943a:	6820      	ldr	r0, [r4, #0]
 800943c:	1809      	adds	r1, r1, r0
 800943e:	1850      	adds	r0, r2, r1
 8009440:	6011      	str	r1, [r2, #0]
 8009442:	4283      	cmp	r3, r0
 8009444:	d1e0      	bne.n	8009408 <_free_r+0x24>
 8009446:	6818      	ldr	r0, [r3, #0]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	1841      	adds	r1, r0, r1
 800944c:	6011      	str	r1, [r2, #0]
 800944e:	6053      	str	r3, [r2, #4]
 8009450:	e7da      	b.n	8009408 <_free_r+0x24>
 8009452:	42a0      	cmp	r0, r4
 8009454:	d902      	bls.n	800945c <_free_r+0x78>
 8009456:	230c      	movs	r3, #12
 8009458:	602b      	str	r3, [r5, #0]
 800945a:	e7d5      	b.n	8009408 <_free_r+0x24>
 800945c:	6820      	ldr	r0, [r4, #0]
 800945e:	1821      	adds	r1, r4, r0
 8009460:	428b      	cmp	r3, r1
 8009462:	d103      	bne.n	800946c <_free_r+0x88>
 8009464:	6819      	ldr	r1, [r3, #0]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	1809      	adds	r1, r1, r0
 800946a:	6021      	str	r1, [r4, #0]
 800946c:	6063      	str	r3, [r4, #4]
 800946e:	6054      	str	r4, [r2, #4]
 8009470:	e7ca      	b.n	8009408 <_free_r+0x24>
 8009472:	46c0      	nop			@ (mov r8, r8)
 8009474:	200004c4 	.word	0x200004c4

08009478 <_Balloc>:
 8009478:	b570      	push	{r4, r5, r6, lr}
 800947a:	69c5      	ldr	r5, [r0, #28]
 800947c:	0006      	movs	r6, r0
 800947e:	000c      	movs	r4, r1
 8009480:	2d00      	cmp	r5, #0
 8009482:	d10e      	bne.n	80094a2 <_Balloc+0x2a>
 8009484:	2010      	movs	r0, #16
 8009486:	f7fe f803 	bl	8007490 <malloc>
 800948a:	1e02      	subs	r2, r0, #0
 800948c:	61f0      	str	r0, [r6, #28]
 800948e:	d104      	bne.n	800949a <_Balloc+0x22>
 8009490:	216b      	movs	r1, #107	@ 0x6b
 8009492:	4b19      	ldr	r3, [pc, #100]	@ (80094f8 <_Balloc+0x80>)
 8009494:	4819      	ldr	r0, [pc, #100]	@ (80094fc <_Balloc+0x84>)
 8009496:	f001 ff77 	bl	800b388 <__assert_func>
 800949a:	6045      	str	r5, [r0, #4]
 800949c:	6085      	str	r5, [r0, #8]
 800949e:	6005      	str	r5, [r0, #0]
 80094a0:	60c5      	str	r5, [r0, #12]
 80094a2:	69f5      	ldr	r5, [r6, #28]
 80094a4:	68eb      	ldr	r3, [r5, #12]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d013      	beq.n	80094d2 <_Balloc+0x5a>
 80094aa:	69f3      	ldr	r3, [r6, #28]
 80094ac:	00a2      	lsls	r2, r4, #2
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	189b      	adds	r3, r3, r2
 80094b2:	6818      	ldr	r0, [r3, #0]
 80094b4:	2800      	cmp	r0, #0
 80094b6:	d118      	bne.n	80094ea <_Balloc+0x72>
 80094b8:	2101      	movs	r1, #1
 80094ba:	000d      	movs	r5, r1
 80094bc:	40a5      	lsls	r5, r4
 80094be:	1d6a      	adds	r2, r5, #5
 80094c0:	0030      	movs	r0, r6
 80094c2:	0092      	lsls	r2, r2, #2
 80094c4:	f001 ff7e 	bl	800b3c4 <_calloc_r>
 80094c8:	2800      	cmp	r0, #0
 80094ca:	d00c      	beq.n	80094e6 <_Balloc+0x6e>
 80094cc:	6044      	str	r4, [r0, #4]
 80094ce:	6085      	str	r5, [r0, #8]
 80094d0:	e00d      	b.n	80094ee <_Balloc+0x76>
 80094d2:	2221      	movs	r2, #33	@ 0x21
 80094d4:	2104      	movs	r1, #4
 80094d6:	0030      	movs	r0, r6
 80094d8:	f001 ff74 	bl	800b3c4 <_calloc_r>
 80094dc:	69f3      	ldr	r3, [r6, #28]
 80094de:	60e8      	str	r0, [r5, #12]
 80094e0:	68db      	ldr	r3, [r3, #12]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d1e1      	bne.n	80094aa <_Balloc+0x32>
 80094e6:	2000      	movs	r0, #0
 80094e8:	bd70      	pop	{r4, r5, r6, pc}
 80094ea:	6802      	ldr	r2, [r0, #0]
 80094ec:	601a      	str	r2, [r3, #0]
 80094ee:	2300      	movs	r3, #0
 80094f0:	6103      	str	r3, [r0, #16]
 80094f2:	60c3      	str	r3, [r0, #12]
 80094f4:	e7f8      	b.n	80094e8 <_Balloc+0x70>
 80094f6:	46c0      	nop			@ (mov r8, r8)
 80094f8:	0800c3fe 	.word	0x0800c3fe
 80094fc:	0800c47e 	.word	0x0800c47e

08009500 <_Bfree>:
 8009500:	b570      	push	{r4, r5, r6, lr}
 8009502:	69c6      	ldr	r6, [r0, #28]
 8009504:	0005      	movs	r5, r0
 8009506:	000c      	movs	r4, r1
 8009508:	2e00      	cmp	r6, #0
 800950a:	d10e      	bne.n	800952a <_Bfree+0x2a>
 800950c:	2010      	movs	r0, #16
 800950e:	f7fd ffbf 	bl	8007490 <malloc>
 8009512:	1e02      	subs	r2, r0, #0
 8009514:	61e8      	str	r0, [r5, #28]
 8009516:	d104      	bne.n	8009522 <_Bfree+0x22>
 8009518:	218f      	movs	r1, #143	@ 0x8f
 800951a:	4b09      	ldr	r3, [pc, #36]	@ (8009540 <_Bfree+0x40>)
 800951c:	4809      	ldr	r0, [pc, #36]	@ (8009544 <_Bfree+0x44>)
 800951e:	f001 ff33 	bl	800b388 <__assert_func>
 8009522:	6046      	str	r6, [r0, #4]
 8009524:	6086      	str	r6, [r0, #8]
 8009526:	6006      	str	r6, [r0, #0]
 8009528:	60c6      	str	r6, [r0, #12]
 800952a:	2c00      	cmp	r4, #0
 800952c:	d007      	beq.n	800953e <_Bfree+0x3e>
 800952e:	69eb      	ldr	r3, [r5, #28]
 8009530:	6862      	ldr	r2, [r4, #4]
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	0092      	lsls	r2, r2, #2
 8009536:	189b      	adds	r3, r3, r2
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	6022      	str	r2, [r4, #0]
 800953c:	601c      	str	r4, [r3, #0]
 800953e:	bd70      	pop	{r4, r5, r6, pc}
 8009540:	0800c3fe 	.word	0x0800c3fe
 8009544:	0800c47e 	.word	0x0800c47e

08009548 <__multadd>:
 8009548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800954a:	000f      	movs	r7, r1
 800954c:	9001      	str	r0, [sp, #4]
 800954e:	000c      	movs	r4, r1
 8009550:	001e      	movs	r6, r3
 8009552:	2000      	movs	r0, #0
 8009554:	690d      	ldr	r5, [r1, #16]
 8009556:	3714      	adds	r7, #20
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	3001      	adds	r0, #1
 800955c:	b299      	uxth	r1, r3
 800955e:	4351      	muls	r1, r2
 8009560:	0c1b      	lsrs	r3, r3, #16
 8009562:	4353      	muls	r3, r2
 8009564:	1989      	adds	r1, r1, r6
 8009566:	0c0e      	lsrs	r6, r1, #16
 8009568:	199b      	adds	r3, r3, r6
 800956a:	0c1e      	lsrs	r6, r3, #16
 800956c:	b289      	uxth	r1, r1
 800956e:	041b      	lsls	r3, r3, #16
 8009570:	185b      	adds	r3, r3, r1
 8009572:	c708      	stmia	r7!, {r3}
 8009574:	4285      	cmp	r5, r0
 8009576:	dcef      	bgt.n	8009558 <__multadd+0x10>
 8009578:	2e00      	cmp	r6, #0
 800957a:	d022      	beq.n	80095c2 <__multadd+0x7a>
 800957c:	68a3      	ldr	r3, [r4, #8]
 800957e:	42ab      	cmp	r3, r5
 8009580:	dc19      	bgt.n	80095b6 <__multadd+0x6e>
 8009582:	6861      	ldr	r1, [r4, #4]
 8009584:	9801      	ldr	r0, [sp, #4]
 8009586:	3101      	adds	r1, #1
 8009588:	f7ff ff76 	bl	8009478 <_Balloc>
 800958c:	1e07      	subs	r7, r0, #0
 800958e:	d105      	bne.n	800959c <__multadd+0x54>
 8009590:	003a      	movs	r2, r7
 8009592:	21ba      	movs	r1, #186	@ 0xba
 8009594:	4b0c      	ldr	r3, [pc, #48]	@ (80095c8 <__multadd+0x80>)
 8009596:	480d      	ldr	r0, [pc, #52]	@ (80095cc <__multadd+0x84>)
 8009598:	f001 fef6 	bl	800b388 <__assert_func>
 800959c:	0021      	movs	r1, r4
 800959e:	6922      	ldr	r2, [r4, #16]
 80095a0:	310c      	adds	r1, #12
 80095a2:	3202      	adds	r2, #2
 80095a4:	0092      	lsls	r2, r2, #2
 80095a6:	300c      	adds	r0, #12
 80095a8:	f7ff f88c 	bl	80086c4 <memcpy>
 80095ac:	0021      	movs	r1, r4
 80095ae:	9801      	ldr	r0, [sp, #4]
 80095b0:	f7ff ffa6 	bl	8009500 <_Bfree>
 80095b4:	003c      	movs	r4, r7
 80095b6:	1d2b      	adds	r3, r5, #4
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	18e3      	adds	r3, r4, r3
 80095bc:	3501      	adds	r5, #1
 80095be:	605e      	str	r6, [r3, #4]
 80095c0:	6125      	str	r5, [r4, #16]
 80095c2:	0020      	movs	r0, r4
 80095c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80095c6:	46c0      	nop			@ (mov r8, r8)
 80095c8:	0800c46d 	.word	0x0800c46d
 80095cc:	0800c47e 	.word	0x0800c47e

080095d0 <__s2b>:
 80095d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095d2:	0007      	movs	r7, r0
 80095d4:	0018      	movs	r0, r3
 80095d6:	000c      	movs	r4, r1
 80095d8:	3008      	adds	r0, #8
 80095da:	2109      	movs	r1, #9
 80095dc:	9301      	str	r3, [sp, #4]
 80095de:	0015      	movs	r5, r2
 80095e0:	f7f6 fe38 	bl	8000254 <__divsi3>
 80095e4:	2301      	movs	r3, #1
 80095e6:	2100      	movs	r1, #0
 80095e8:	4283      	cmp	r3, r0
 80095ea:	db0a      	blt.n	8009602 <__s2b+0x32>
 80095ec:	0038      	movs	r0, r7
 80095ee:	f7ff ff43 	bl	8009478 <_Balloc>
 80095f2:	1e01      	subs	r1, r0, #0
 80095f4:	d108      	bne.n	8009608 <__s2b+0x38>
 80095f6:	000a      	movs	r2, r1
 80095f8:	4b19      	ldr	r3, [pc, #100]	@ (8009660 <__s2b+0x90>)
 80095fa:	481a      	ldr	r0, [pc, #104]	@ (8009664 <__s2b+0x94>)
 80095fc:	31d3      	adds	r1, #211	@ 0xd3
 80095fe:	f001 fec3 	bl	800b388 <__assert_func>
 8009602:	005b      	lsls	r3, r3, #1
 8009604:	3101      	adds	r1, #1
 8009606:	e7ef      	b.n	80095e8 <__s2b+0x18>
 8009608:	9b08      	ldr	r3, [sp, #32]
 800960a:	6143      	str	r3, [r0, #20]
 800960c:	2301      	movs	r3, #1
 800960e:	6103      	str	r3, [r0, #16]
 8009610:	2d09      	cmp	r5, #9
 8009612:	dd18      	ble.n	8009646 <__s2b+0x76>
 8009614:	0023      	movs	r3, r4
 8009616:	3309      	adds	r3, #9
 8009618:	001e      	movs	r6, r3
 800961a:	9300      	str	r3, [sp, #0]
 800961c:	1964      	adds	r4, r4, r5
 800961e:	7833      	ldrb	r3, [r6, #0]
 8009620:	220a      	movs	r2, #10
 8009622:	0038      	movs	r0, r7
 8009624:	3b30      	subs	r3, #48	@ 0x30
 8009626:	f7ff ff8f 	bl	8009548 <__multadd>
 800962a:	3601      	adds	r6, #1
 800962c:	0001      	movs	r1, r0
 800962e:	42a6      	cmp	r6, r4
 8009630:	d1f5      	bne.n	800961e <__s2b+0x4e>
 8009632:	002c      	movs	r4, r5
 8009634:	9b00      	ldr	r3, [sp, #0]
 8009636:	3c08      	subs	r4, #8
 8009638:	191c      	adds	r4, r3, r4
 800963a:	002e      	movs	r6, r5
 800963c:	9b01      	ldr	r3, [sp, #4]
 800963e:	429e      	cmp	r6, r3
 8009640:	db04      	blt.n	800964c <__s2b+0x7c>
 8009642:	0008      	movs	r0, r1
 8009644:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009646:	2509      	movs	r5, #9
 8009648:	340a      	adds	r4, #10
 800964a:	e7f6      	b.n	800963a <__s2b+0x6a>
 800964c:	1b63      	subs	r3, r4, r5
 800964e:	5d9b      	ldrb	r3, [r3, r6]
 8009650:	220a      	movs	r2, #10
 8009652:	0038      	movs	r0, r7
 8009654:	3b30      	subs	r3, #48	@ 0x30
 8009656:	f7ff ff77 	bl	8009548 <__multadd>
 800965a:	3601      	adds	r6, #1
 800965c:	0001      	movs	r1, r0
 800965e:	e7ed      	b.n	800963c <__s2b+0x6c>
 8009660:	0800c46d 	.word	0x0800c46d
 8009664:	0800c47e 	.word	0x0800c47e

08009668 <__hi0bits>:
 8009668:	2280      	movs	r2, #128	@ 0x80
 800966a:	0003      	movs	r3, r0
 800966c:	0252      	lsls	r2, r2, #9
 800966e:	2000      	movs	r0, #0
 8009670:	4293      	cmp	r3, r2
 8009672:	d201      	bcs.n	8009678 <__hi0bits+0x10>
 8009674:	041b      	lsls	r3, r3, #16
 8009676:	3010      	adds	r0, #16
 8009678:	2280      	movs	r2, #128	@ 0x80
 800967a:	0452      	lsls	r2, r2, #17
 800967c:	4293      	cmp	r3, r2
 800967e:	d201      	bcs.n	8009684 <__hi0bits+0x1c>
 8009680:	3008      	adds	r0, #8
 8009682:	021b      	lsls	r3, r3, #8
 8009684:	2280      	movs	r2, #128	@ 0x80
 8009686:	0552      	lsls	r2, r2, #21
 8009688:	4293      	cmp	r3, r2
 800968a:	d201      	bcs.n	8009690 <__hi0bits+0x28>
 800968c:	3004      	adds	r0, #4
 800968e:	011b      	lsls	r3, r3, #4
 8009690:	2280      	movs	r2, #128	@ 0x80
 8009692:	05d2      	lsls	r2, r2, #23
 8009694:	4293      	cmp	r3, r2
 8009696:	d201      	bcs.n	800969c <__hi0bits+0x34>
 8009698:	3002      	adds	r0, #2
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	2b00      	cmp	r3, #0
 800969e:	db03      	blt.n	80096a8 <__hi0bits+0x40>
 80096a0:	3001      	adds	r0, #1
 80096a2:	4213      	tst	r3, r2
 80096a4:	d100      	bne.n	80096a8 <__hi0bits+0x40>
 80096a6:	2020      	movs	r0, #32
 80096a8:	4770      	bx	lr

080096aa <__lo0bits>:
 80096aa:	6803      	ldr	r3, [r0, #0]
 80096ac:	0001      	movs	r1, r0
 80096ae:	2207      	movs	r2, #7
 80096b0:	0018      	movs	r0, r3
 80096b2:	4010      	ands	r0, r2
 80096b4:	4213      	tst	r3, r2
 80096b6:	d00d      	beq.n	80096d4 <__lo0bits+0x2a>
 80096b8:	3a06      	subs	r2, #6
 80096ba:	2000      	movs	r0, #0
 80096bc:	4213      	tst	r3, r2
 80096be:	d105      	bne.n	80096cc <__lo0bits+0x22>
 80096c0:	3002      	adds	r0, #2
 80096c2:	4203      	tst	r3, r0
 80096c4:	d003      	beq.n	80096ce <__lo0bits+0x24>
 80096c6:	40d3      	lsrs	r3, r2
 80096c8:	0010      	movs	r0, r2
 80096ca:	600b      	str	r3, [r1, #0]
 80096cc:	4770      	bx	lr
 80096ce:	089b      	lsrs	r3, r3, #2
 80096d0:	600b      	str	r3, [r1, #0]
 80096d2:	e7fb      	b.n	80096cc <__lo0bits+0x22>
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	2a00      	cmp	r2, #0
 80096d8:	d101      	bne.n	80096de <__lo0bits+0x34>
 80096da:	2010      	movs	r0, #16
 80096dc:	0c1b      	lsrs	r3, r3, #16
 80096de:	b2da      	uxtb	r2, r3
 80096e0:	2a00      	cmp	r2, #0
 80096e2:	d101      	bne.n	80096e8 <__lo0bits+0x3e>
 80096e4:	3008      	adds	r0, #8
 80096e6:	0a1b      	lsrs	r3, r3, #8
 80096e8:	071a      	lsls	r2, r3, #28
 80096ea:	d101      	bne.n	80096f0 <__lo0bits+0x46>
 80096ec:	3004      	adds	r0, #4
 80096ee:	091b      	lsrs	r3, r3, #4
 80096f0:	079a      	lsls	r2, r3, #30
 80096f2:	d101      	bne.n	80096f8 <__lo0bits+0x4e>
 80096f4:	3002      	adds	r0, #2
 80096f6:	089b      	lsrs	r3, r3, #2
 80096f8:	07da      	lsls	r2, r3, #31
 80096fa:	d4e9      	bmi.n	80096d0 <__lo0bits+0x26>
 80096fc:	3001      	adds	r0, #1
 80096fe:	085b      	lsrs	r3, r3, #1
 8009700:	d1e6      	bne.n	80096d0 <__lo0bits+0x26>
 8009702:	2020      	movs	r0, #32
 8009704:	e7e2      	b.n	80096cc <__lo0bits+0x22>
	...

08009708 <__i2b>:
 8009708:	b510      	push	{r4, lr}
 800970a:	000c      	movs	r4, r1
 800970c:	2101      	movs	r1, #1
 800970e:	f7ff feb3 	bl	8009478 <_Balloc>
 8009712:	2800      	cmp	r0, #0
 8009714:	d107      	bne.n	8009726 <__i2b+0x1e>
 8009716:	2146      	movs	r1, #70	@ 0x46
 8009718:	4c05      	ldr	r4, [pc, #20]	@ (8009730 <__i2b+0x28>)
 800971a:	0002      	movs	r2, r0
 800971c:	4b05      	ldr	r3, [pc, #20]	@ (8009734 <__i2b+0x2c>)
 800971e:	0020      	movs	r0, r4
 8009720:	31ff      	adds	r1, #255	@ 0xff
 8009722:	f001 fe31 	bl	800b388 <__assert_func>
 8009726:	2301      	movs	r3, #1
 8009728:	6144      	str	r4, [r0, #20]
 800972a:	6103      	str	r3, [r0, #16]
 800972c:	bd10      	pop	{r4, pc}
 800972e:	46c0      	nop			@ (mov r8, r8)
 8009730:	0800c47e 	.word	0x0800c47e
 8009734:	0800c46d 	.word	0x0800c46d

08009738 <__multiply>:
 8009738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800973a:	0014      	movs	r4, r2
 800973c:	690a      	ldr	r2, [r1, #16]
 800973e:	6923      	ldr	r3, [r4, #16]
 8009740:	000d      	movs	r5, r1
 8009742:	b08b      	sub	sp, #44	@ 0x2c
 8009744:	429a      	cmp	r2, r3
 8009746:	db02      	blt.n	800974e <__multiply+0x16>
 8009748:	0023      	movs	r3, r4
 800974a:	000c      	movs	r4, r1
 800974c:	001d      	movs	r5, r3
 800974e:	6927      	ldr	r7, [r4, #16]
 8009750:	692e      	ldr	r6, [r5, #16]
 8009752:	6861      	ldr	r1, [r4, #4]
 8009754:	19bb      	adds	r3, r7, r6
 8009756:	9303      	str	r3, [sp, #12]
 8009758:	68a3      	ldr	r3, [r4, #8]
 800975a:	19ba      	adds	r2, r7, r6
 800975c:	4293      	cmp	r3, r2
 800975e:	da00      	bge.n	8009762 <__multiply+0x2a>
 8009760:	3101      	adds	r1, #1
 8009762:	f7ff fe89 	bl	8009478 <_Balloc>
 8009766:	9002      	str	r0, [sp, #8]
 8009768:	2800      	cmp	r0, #0
 800976a:	d106      	bne.n	800977a <__multiply+0x42>
 800976c:	21b1      	movs	r1, #177	@ 0xb1
 800976e:	4b49      	ldr	r3, [pc, #292]	@ (8009894 <__multiply+0x15c>)
 8009770:	4849      	ldr	r0, [pc, #292]	@ (8009898 <__multiply+0x160>)
 8009772:	9a02      	ldr	r2, [sp, #8]
 8009774:	0049      	lsls	r1, r1, #1
 8009776:	f001 fe07 	bl	800b388 <__assert_func>
 800977a:	9b02      	ldr	r3, [sp, #8]
 800977c:	2200      	movs	r2, #0
 800977e:	3314      	adds	r3, #20
 8009780:	469c      	mov	ip, r3
 8009782:	19bb      	adds	r3, r7, r6
 8009784:	009b      	lsls	r3, r3, #2
 8009786:	4463      	add	r3, ip
 8009788:	9304      	str	r3, [sp, #16]
 800978a:	4663      	mov	r3, ip
 800978c:	9904      	ldr	r1, [sp, #16]
 800978e:	428b      	cmp	r3, r1
 8009790:	d32a      	bcc.n	80097e8 <__multiply+0xb0>
 8009792:	0023      	movs	r3, r4
 8009794:	00bf      	lsls	r7, r7, #2
 8009796:	3314      	adds	r3, #20
 8009798:	3514      	adds	r5, #20
 800979a:	9308      	str	r3, [sp, #32]
 800979c:	00b6      	lsls	r6, r6, #2
 800979e:	19db      	adds	r3, r3, r7
 80097a0:	9305      	str	r3, [sp, #20]
 80097a2:	19ab      	adds	r3, r5, r6
 80097a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80097a6:	2304      	movs	r3, #4
 80097a8:	9306      	str	r3, [sp, #24]
 80097aa:	0023      	movs	r3, r4
 80097ac:	9a05      	ldr	r2, [sp, #20]
 80097ae:	3315      	adds	r3, #21
 80097b0:	9501      	str	r5, [sp, #4]
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d305      	bcc.n	80097c2 <__multiply+0x8a>
 80097b6:	1b13      	subs	r3, r2, r4
 80097b8:	3b15      	subs	r3, #21
 80097ba:	089b      	lsrs	r3, r3, #2
 80097bc:	3301      	adds	r3, #1
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	9306      	str	r3, [sp, #24]
 80097c2:	9b01      	ldr	r3, [sp, #4]
 80097c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d310      	bcc.n	80097ec <__multiply+0xb4>
 80097ca:	9b03      	ldr	r3, [sp, #12]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	dd05      	ble.n	80097dc <__multiply+0xa4>
 80097d0:	9b04      	ldr	r3, [sp, #16]
 80097d2:	3b04      	subs	r3, #4
 80097d4:	9304      	str	r3, [sp, #16]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d056      	beq.n	800988a <__multiply+0x152>
 80097dc:	9b02      	ldr	r3, [sp, #8]
 80097de:	9a03      	ldr	r2, [sp, #12]
 80097e0:	0018      	movs	r0, r3
 80097e2:	611a      	str	r2, [r3, #16]
 80097e4:	b00b      	add	sp, #44	@ 0x2c
 80097e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097e8:	c304      	stmia	r3!, {r2}
 80097ea:	e7cf      	b.n	800978c <__multiply+0x54>
 80097ec:	9b01      	ldr	r3, [sp, #4]
 80097ee:	6818      	ldr	r0, [r3, #0]
 80097f0:	b280      	uxth	r0, r0
 80097f2:	2800      	cmp	r0, #0
 80097f4:	d01e      	beq.n	8009834 <__multiply+0xfc>
 80097f6:	4667      	mov	r7, ip
 80097f8:	2500      	movs	r5, #0
 80097fa:	9e08      	ldr	r6, [sp, #32]
 80097fc:	ce02      	ldmia	r6!, {r1}
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	9307      	str	r3, [sp, #28]
 8009802:	b28b      	uxth	r3, r1
 8009804:	4343      	muls	r3, r0
 8009806:	001a      	movs	r2, r3
 8009808:	466b      	mov	r3, sp
 800980a:	0c09      	lsrs	r1, r1, #16
 800980c:	8b9b      	ldrh	r3, [r3, #28]
 800980e:	4341      	muls	r1, r0
 8009810:	18d3      	adds	r3, r2, r3
 8009812:	9a07      	ldr	r2, [sp, #28]
 8009814:	195b      	adds	r3, r3, r5
 8009816:	0c12      	lsrs	r2, r2, #16
 8009818:	1889      	adds	r1, r1, r2
 800981a:	0c1a      	lsrs	r2, r3, #16
 800981c:	188a      	adds	r2, r1, r2
 800981e:	b29b      	uxth	r3, r3
 8009820:	0c15      	lsrs	r5, r2, #16
 8009822:	0412      	lsls	r2, r2, #16
 8009824:	431a      	orrs	r2, r3
 8009826:	9b05      	ldr	r3, [sp, #20]
 8009828:	c704      	stmia	r7!, {r2}
 800982a:	42b3      	cmp	r3, r6
 800982c:	d8e6      	bhi.n	80097fc <__multiply+0xc4>
 800982e:	4663      	mov	r3, ip
 8009830:	9a06      	ldr	r2, [sp, #24]
 8009832:	509d      	str	r5, [r3, r2]
 8009834:	9b01      	ldr	r3, [sp, #4]
 8009836:	6818      	ldr	r0, [r3, #0]
 8009838:	0c00      	lsrs	r0, r0, #16
 800983a:	d020      	beq.n	800987e <__multiply+0x146>
 800983c:	4663      	mov	r3, ip
 800983e:	0025      	movs	r5, r4
 8009840:	4661      	mov	r1, ip
 8009842:	2700      	movs	r7, #0
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	3514      	adds	r5, #20
 8009848:	682a      	ldr	r2, [r5, #0]
 800984a:	680e      	ldr	r6, [r1, #0]
 800984c:	b292      	uxth	r2, r2
 800984e:	4342      	muls	r2, r0
 8009850:	0c36      	lsrs	r6, r6, #16
 8009852:	1992      	adds	r2, r2, r6
 8009854:	19d2      	adds	r2, r2, r7
 8009856:	0416      	lsls	r6, r2, #16
 8009858:	b29b      	uxth	r3, r3
 800985a:	431e      	orrs	r6, r3
 800985c:	600e      	str	r6, [r1, #0]
 800985e:	cd40      	ldmia	r5!, {r6}
 8009860:	684b      	ldr	r3, [r1, #4]
 8009862:	0c36      	lsrs	r6, r6, #16
 8009864:	4346      	muls	r6, r0
 8009866:	b29b      	uxth	r3, r3
 8009868:	0c12      	lsrs	r2, r2, #16
 800986a:	18f3      	adds	r3, r6, r3
 800986c:	189b      	adds	r3, r3, r2
 800986e:	9a05      	ldr	r2, [sp, #20]
 8009870:	0c1f      	lsrs	r7, r3, #16
 8009872:	3104      	adds	r1, #4
 8009874:	42aa      	cmp	r2, r5
 8009876:	d8e7      	bhi.n	8009848 <__multiply+0x110>
 8009878:	4662      	mov	r2, ip
 800987a:	9906      	ldr	r1, [sp, #24]
 800987c:	5053      	str	r3, [r2, r1]
 800987e:	9b01      	ldr	r3, [sp, #4]
 8009880:	3304      	adds	r3, #4
 8009882:	9301      	str	r3, [sp, #4]
 8009884:	2304      	movs	r3, #4
 8009886:	449c      	add	ip, r3
 8009888:	e79b      	b.n	80097c2 <__multiply+0x8a>
 800988a:	9b03      	ldr	r3, [sp, #12]
 800988c:	3b01      	subs	r3, #1
 800988e:	9303      	str	r3, [sp, #12]
 8009890:	e79b      	b.n	80097ca <__multiply+0x92>
 8009892:	46c0      	nop			@ (mov r8, r8)
 8009894:	0800c46d 	.word	0x0800c46d
 8009898:	0800c47e 	.word	0x0800c47e

0800989c <__pow5mult>:
 800989c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800989e:	2303      	movs	r3, #3
 80098a0:	0015      	movs	r5, r2
 80098a2:	0007      	movs	r7, r0
 80098a4:	000e      	movs	r6, r1
 80098a6:	401a      	ands	r2, r3
 80098a8:	421d      	tst	r5, r3
 80098aa:	d008      	beq.n	80098be <__pow5mult+0x22>
 80098ac:	4925      	ldr	r1, [pc, #148]	@ (8009944 <__pow5mult+0xa8>)
 80098ae:	3a01      	subs	r2, #1
 80098b0:	0092      	lsls	r2, r2, #2
 80098b2:	5852      	ldr	r2, [r2, r1]
 80098b4:	2300      	movs	r3, #0
 80098b6:	0031      	movs	r1, r6
 80098b8:	f7ff fe46 	bl	8009548 <__multadd>
 80098bc:	0006      	movs	r6, r0
 80098be:	10ad      	asrs	r5, r5, #2
 80098c0:	d03d      	beq.n	800993e <__pow5mult+0xa2>
 80098c2:	69fc      	ldr	r4, [r7, #28]
 80098c4:	2c00      	cmp	r4, #0
 80098c6:	d10f      	bne.n	80098e8 <__pow5mult+0x4c>
 80098c8:	2010      	movs	r0, #16
 80098ca:	f7fd fde1 	bl	8007490 <malloc>
 80098ce:	1e02      	subs	r2, r0, #0
 80098d0:	61f8      	str	r0, [r7, #28]
 80098d2:	d105      	bne.n	80098e0 <__pow5mult+0x44>
 80098d4:	21b4      	movs	r1, #180	@ 0xb4
 80098d6:	4b1c      	ldr	r3, [pc, #112]	@ (8009948 <__pow5mult+0xac>)
 80098d8:	481c      	ldr	r0, [pc, #112]	@ (800994c <__pow5mult+0xb0>)
 80098da:	31ff      	adds	r1, #255	@ 0xff
 80098dc:	f001 fd54 	bl	800b388 <__assert_func>
 80098e0:	6044      	str	r4, [r0, #4]
 80098e2:	6084      	str	r4, [r0, #8]
 80098e4:	6004      	str	r4, [r0, #0]
 80098e6:	60c4      	str	r4, [r0, #12]
 80098e8:	69fb      	ldr	r3, [r7, #28]
 80098ea:	689c      	ldr	r4, [r3, #8]
 80098ec:	9301      	str	r3, [sp, #4]
 80098ee:	2c00      	cmp	r4, #0
 80098f0:	d108      	bne.n	8009904 <__pow5mult+0x68>
 80098f2:	0038      	movs	r0, r7
 80098f4:	4916      	ldr	r1, [pc, #88]	@ (8009950 <__pow5mult+0xb4>)
 80098f6:	f7ff ff07 	bl	8009708 <__i2b>
 80098fa:	9b01      	ldr	r3, [sp, #4]
 80098fc:	0004      	movs	r4, r0
 80098fe:	6098      	str	r0, [r3, #8]
 8009900:	2300      	movs	r3, #0
 8009902:	6003      	str	r3, [r0, #0]
 8009904:	2301      	movs	r3, #1
 8009906:	421d      	tst	r5, r3
 8009908:	d00a      	beq.n	8009920 <__pow5mult+0x84>
 800990a:	0031      	movs	r1, r6
 800990c:	0022      	movs	r2, r4
 800990e:	0038      	movs	r0, r7
 8009910:	f7ff ff12 	bl	8009738 <__multiply>
 8009914:	0031      	movs	r1, r6
 8009916:	9001      	str	r0, [sp, #4]
 8009918:	0038      	movs	r0, r7
 800991a:	f7ff fdf1 	bl	8009500 <_Bfree>
 800991e:	9e01      	ldr	r6, [sp, #4]
 8009920:	106d      	asrs	r5, r5, #1
 8009922:	d00c      	beq.n	800993e <__pow5mult+0xa2>
 8009924:	6820      	ldr	r0, [r4, #0]
 8009926:	2800      	cmp	r0, #0
 8009928:	d107      	bne.n	800993a <__pow5mult+0x9e>
 800992a:	0022      	movs	r2, r4
 800992c:	0021      	movs	r1, r4
 800992e:	0038      	movs	r0, r7
 8009930:	f7ff ff02 	bl	8009738 <__multiply>
 8009934:	2300      	movs	r3, #0
 8009936:	6020      	str	r0, [r4, #0]
 8009938:	6003      	str	r3, [r0, #0]
 800993a:	0004      	movs	r4, r0
 800993c:	e7e2      	b.n	8009904 <__pow5mult+0x68>
 800993e:	0030      	movs	r0, r6
 8009940:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009942:	46c0      	nop			@ (mov r8, r8)
 8009944:	0800c4d8 	.word	0x0800c4d8
 8009948:	0800c3fe 	.word	0x0800c3fe
 800994c:	0800c47e 	.word	0x0800c47e
 8009950:	00000271 	.word	0x00000271

08009954 <__lshift>:
 8009954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009956:	000c      	movs	r4, r1
 8009958:	0016      	movs	r6, r2
 800995a:	6923      	ldr	r3, [r4, #16]
 800995c:	1157      	asrs	r7, r2, #5
 800995e:	b085      	sub	sp, #20
 8009960:	18fb      	adds	r3, r7, r3
 8009962:	9301      	str	r3, [sp, #4]
 8009964:	3301      	adds	r3, #1
 8009966:	9300      	str	r3, [sp, #0]
 8009968:	6849      	ldr	r1, [r1, #4]
 800996a:	68a3      	ldr	r3, [r4, #8]
 800996c:	9002      	str	r0, [sp, #8]
 800996e:	9a00      	ldr	r2, [sp, #0]
 8009970:	4293      	cmp	r3, r2
 8009972:	db10      	blt.n	8009996 <__lshift+0x42>
 8009974:	9802      	ldr	r0, [sp, #8]
 8009976:	f7ff fd7f 	bl	8009478 <_Balloc>
 800997a:	2300      	movs	r3, #0
 800997c:	0001      	movs	r1, r0
 800997e:	0005      	movs	r5, r0
 8009980:	001a      	movs	r2, r3
 8009982:	3114      	adds	r1, #20
 8009984:	4298      	cmp	r0, r3
 8009986:	d10c      	bne.n	80099a2 <__lshift+0x4e>
 8009988:	21ef      	movs	r1, #239	@ 0xef
 800998a:	002a      	movs	r2, r5
 800998c:	4b25      	ldr	r3, [pc, #148]	@ (8009a24 <__lshift+0xd0>)
 800998e:	4826      	ldr	r0, [pc, #152]	@ (8009a28 <__lshift+0xd4>)
 8009990:	0049      	lsls	r1, r1, #1
 8009992:	f001 fcf9 	bl	800b388 <__assert_func>
 8009996:	3101      	adds	r1, #1
 8009998:	005b      	lsls	r3, r3, #1
 800999a:	e7e8      	b.n	800996e <__lshift+0x1a>
 800999c:	0098      	lsls	r0, r3, #2
 800999e:	500a      	str	r2, [r1, r0]
 80099a0:	3301      	adds	r3, #1
 80099a2:	42bb      	cmp	r3, r7
 80099a4:	dbfa      	blt.n	800999c <__lshift+0x48>
 80099a6:	43fb      	mvns	r3, r7
 80099a8:	17db      	asrs	r3, r3, #31
 80099aa:	401f      	ands	r7, r3
 80099ac:	00bf      	lsls	r7, r7, #2
 80099ae:	0023      	movs	r3, r4
 80099b0:	201f      	movs	r0, #31
 80099b2:	19c9      	adds	r1, r1, r7
 80099b4:	0037      	movs	r7, r6
 80099b6:	6922      	ldr	r2, [r4, #16]
 80099b8:	3314      	adds	r3, #20
 80099ba:	0092      	lsls	r2, r2, #2
 80099bc:	189a      	adds	r2, r3, r2
 80099be:	4007      	ands	r7, r0
 80099c0:	4206      	tst	r6, r0
 80099c2:	d029      	beq.n	8009a18 <__lshift+0xc4>
 80099c4:	3001      	adds	r0, #1
 80099c6:	1bc0      	subs	r0, r0, r7
 80099c8:	9003      	str	r0, [sp, #12]
 80099ca:	468c      	mov	ip, r1
 80099cc:	2000      	movs	r0, #0
 80099ce:	681e      	ldr	r6, [r3, #0]
 80099d0:	40be      	lsls	r6, r7
 80099d2:	4306      	orrs	r6, r0
 80099d4:	4660      	mov	r0, ip
 80099d6:	c040      	stmia	r0!, {r6}
 80099d8:	4684      	mov	ip, r0
 80099da:	9e03      	ldr	r6, [sp, #12]
 80099dc:	cb01      	ldmia	r3!, {r0}
 80099de:	40f0      	lsrs	r0, r6
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d8f4      	bhi.n	80099ce <__lshift+0x7a>
 80099e4:	0026      	movs	r6, r4
 80099e6:	3615      	adds	r6, #21
 80099e8:	2304      	movs	r3, #4
 80099ea:	42b2      	cmp	r2, r6
 80099ec:	d304      	bcc.n	80099f8 <__lshift+0xa4>
 80099ee:	1b13      	subs	r3, r2, r4
 80099f0:	3b15      	subs	r3, #21
 80099f2:	089b      	lsrs	r3, r3, #2
 80099f4:	3301      	adds	r3, #1
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	50c8      	str	r0, [r1, r3]
 80099fa:	2800      	cmp	r0, #0
 80099fc:	d002      	beq.n	8009a04 <__lshift+0xb0>
 80099fe:	9b01      	ldr	r3, [sp, #4]
 8009a00:	3302      	adds	r3, #2
 8009a02:	9300      	str	r3, [sp, #0]
 8009a04:	9b00      	ldr	r3, [sp, #0]
 8009a06:	9802      	ldr	r0, [sp, #8]
 8009a08:	3b01      	subs	r3, #1
 8009a0a:	0021      	movs	r1, r4
 8009a0c:	612b      	str	r3, [r5, #16]
 8009a0e:	f7ff fd77 	bl	8009500 <_Bfree>
 8009a12:	0028      	movs	r0, r5
 8009a14:	b005      	add	sp, #20
 8009a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a18:	cb01      	ldmia	r3!, {r0}
 8009a1a:	c101      	stmia	r1!, {r0}
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d8fb      	bhi.n	8009a18 <__lshift+0xc4>
 8009a20:	e7f0      	b.n	8009a04 <__lshift+0xb0>
 8009a22:	46c0      	nop			@ (mov r8, r8)
 8009a24:	0800c46d 	.word	0x0800c46d
 8009a28:	0800c47e 	.word	0x0800c47e

08009a2c <__mcmp>:
 8009a2c:	b530      	push	{r4, r5, lr}
 8009a2e:	690b      	ldr	r3, [r1, #16]
 8009a30:	6904      	ldr	r4, [r0, #16]
 8009a32:	0002      	movs	r2, r0
 8009a34:	1ae0      	subs	r0, r4, r3
 8009a36:	429c      	cmp	r4, r3
 8009a38:	d10f      	bne.n	8009a5a <__mcmp+0x2e>
 8009a3a:	3214      	adds	r2, #20
 8009a3c:	009b      	lsls	r3, r3, #2
 8009a3e:	3114      	adds	r1, #20
 8009a40:	0014      	movs	r4, r2
 8009a42:	18c9      	adds	r1, r1, r3
 8009a44:	18d2      	adds	r2, r2, r3
 8009a46:	3a04      	subs	r2, #4
 8009a48:	3904      	subs	r1, #4
 8009a4a:	6815      	ldr	r5, [r2, #0]
 8009a4c:	680b      	ldr	r3, [r1, #0]
 8009a4e:	429d      	cmp	r5, r3
 8009a50:	d004      	beq.n	8009a5c <__mcmp+0x30>
 8009a52:	2001      	movs	r0, #1
 8009a54:	429d      	cmp	r5, r3
 8009a56:	d200      	bcs.n	8009a5a <__mcmp+0x2e>
 8009a58:	3802      	subs	r0, #2
 8009a5a:	bd30      	pop	{r4, r5, pc}
 8009a5c:	4294      	cmp	r4, r2
 8009a5e:	d3f2      	bcc.n	8009a46 <__mcmp+0x1a>
 8009a60:	e7fb      	b.n	8009a5a <__mcmp+0x2e>
	...

08009a64 <__mdiff>:
 8009a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a66:	000c      	movs	r4, r1
 8009a68:	b087      	sub	sp, #28
 8009a6a:	9000      	str	r0, [sp, #0]
 8009a6c:	0011      	movs	r1, r2
 8009a6e:	0020      	movs	r0, r4
 8009a70:	0017      	movs	r7, r2
 8009a72:	f7ff ffdb 	bl	8009a2c <__mcmp>
 8009a76:	1e05      	subs	r5, r0, #0
 8009a78:	d110      	bne.n	8009a9c <__mdiff+0x38>
 8009a7a:	0001      	movs	r1, r0
 8009a7c:	9800      	ldr	r0, [sp, #0]
 8009a7e:	f7ff fcfb 	bl	8009478 <_Balloc>
 8009a82:	1e02      	subs	r2, r0, #0
 8009a84:	d104      	bne.n	8009a90 <__mdiff+0x2c>
 8009a86:	4b40      	ldr	r3, [pc, #256]	@ (8009b88 <__mdiff+0x124>)
 8009a88:	4840      	ldr	r0, [pc, #256]	@ (8009b8c <__mdiff+0x128>)
 8009a8a:	4941      	ldr	r1, [pc, #260]	@ (8009b90 <__mdiff+0x12c>)
 8009a8c:	f001 fc7c 	bl	800b388 <__assert_func>
 8009a90:	2301      	movs	r3, #1
 8009a92:	6145      	str	r5, [r0, #20]
 8009a94:	6103      	str	r3, [r0, #16]
 8009a96:	0010      	movs	r0, r2
 8009a98:	b007      	add	sp, #28
 8009a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a9c:	2600      	movs	r6, #0
 8009a9e:	42b0      	cmp	r0, r6
 8009aa0:	da03      	bge.n	8009aaa <__mdiff+0x46>
 8009aa2:	0023      	movs	r3, r4
 8009aa4:	003c      	movs	r4, r7
 8009aa6:	001f      	movs	r7, r3
 8009aa8:	3601      	adds	r6, #1
 8009aaa:	6861      	ldr	r1, [r4, #4]
 8009aac:	9800      	ldr	r0, [sp, #0]
 8009aae:	f7ff fce3 	bl	8009478 <_Balloc>
 8009ab2:	1e02      	subs	r2, r0, #0
 8009ab4:	d103      	bne.n	8009abe <__mdiff+0x5a>
 8009ab6:	4b34      	ldr	r3, [pc, #208]	@ (8009b88 <__mdiff+0x124>)
 8009ab8:	4834      	ldr	r0, [pc, #208]	@ (8009b8c <__mdiff+0x128>)
 8009aba:	4936      	ldr	r1, [pc, #216]	@ (8009b94 <__mdiff+0x130>)
 8009abc:	e7e6      	b.n	8009a8c <__mdiff+0x28>
 8009abe:	6923      	ldr	r3, [r4, #16]
 8009ac0:	3414      	adds	r4, #20
 8009ac2:	9300      	str	r3, [sp, #0]
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	18e3      	adds	r3, r4, r3
 8009ac8:	0021      	movs	r1, r4
 8009aca:	9401      	str	r4, [sp, #4]
 8009acc:	003c      	movs	r4, r7
 8009ace:	9302      	str	r3, [sp, #8]
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	3414      	adds	r4, #20
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	18e3      	adds	r3, r4, r3
 8009ad8:	9303      	str	r3, [sp, #12]
 8009ada:	0003      	movs	r3, r0
 8009adc:	60c6      	str	r6, [r0, #12]
 8009ade:	468c      	mov	ip, r1
 8009ae0:	2000      	movs	r0, #0
 8009ae2:	3314      	adds	r3, #20
 8009ae4:	9304      	str	r3, [sp, #16]
 8009ae6:	9305      	str	r3, [sp, #20]
 8009ae8:	4663      	mov	r3, ip
 8009aea:	cb20      	ldmia	r3!, {r5}
 8009aec:	b2a9      	uxth	r1, r5
 8009aee:	000e      	movs	r6, r1
 8009af0:	469c      	mov	ip, r3
 8009af2:	cc08      	ldmia	r4!, {r3}
 8009af4:	0c2d      	lsrs	r5, r5, #16
 8009af6:	b299      	uxth	r1, r3
 8009af8:	1a71      	subs	r1, r6, r1
 8009afa:	1809      	adds	r1, r1, r0
 8009afc:	0c1b      	lsrs	r3, r3, #16
 8009afe:	1408      	asrs	r0, r1, #16
 8009b00:	1aeb      	subs	r3, r5, r3
 8009b02:	181b      	adds	r3, r3, r0
 8009b04:	1418      	asrs	r0, r3, #16
 8009b06:	b289      	uxth	r1, r1
 8009b08:	041b      	lsls	r3, r3, #16
 8009b0a:	4319      	orrs	r1, r3
 8009b0c:	9b05      	ldr	r3, [sp, #20]
 8009b0e:	c302      	stmia	r3!, {r1}
 8009b10:	9305      	str	r3, [sp, #20]
 8009b12:	9b03      	ldr	r3, [sp, #12]
 8009b14:	42a3      	cmp	r3, r4
 8009b16:	d8e7      	bhi.n	8009ae8 <__mdiff+0x84>
 8009b18:	0039      	movs	r1, r7
 8009b1a:	9c03      	ldr	r4, [sp, #12]
 8009b1c:	3115      	adds	r1, #21
 8009b1e:	2304      	movs	r3, #4
 8009b20:	428c      	cmp	r4, r1
 8009b22:	d304      	bcc.n	8009b2e <__mdiff+0xca>
 8009b24:	1be3      	subs	r3, r4, r7
 8009b26:	3b15      	subs	r3, #21
 8009b28:	089b      	lsrs	r3, r3, #2
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	9901      	ldr	r1, [sp, #4]
 8009b30:	18cd      	adds	r5, r1, r3
 8009b32:	9904      	ldr	r1, [sp, #16]
 8009b34:	002e      	movs	r6, r5
 8009b36:	18cb      	adds	r3, r1, r3
 8009b38:	001f      	movs	r7, r3
 8009b3a:	9902      	ldr	r1, [sp, #8]
 8009b3c:	428e      	cmp	r6, r1
 8009b3e:	d311      	bcc.n	8009b64 <__mdiff+0x100>
 8009b40:	9c02      	ldr	r4, [sp, #8]
 8009b42:	1ee9      	subs	r1, r5, #3
 8009b44:	2000      	movs	r0, #0
 8009b46:	428c      	cmp	r4, r1
 8009b48:	d304      	bcc.n	8009b54 <__mdiff+0xf0>
 8009b4a:	0021      	movs	r1, r4
 8009b4c:	3103      	adds	r1, #3
 8009b4e:	1b49      	subs	r1, r1, r5
 8009b50:	0889      	lsrs	r1, r1, #2
 8009b52:	0088      	lsls	r0, r1, #2
 8009b54:	181b      	adds	r3, r3, r0
 8009b56:	3b04      	subs	r3, #4
 8009b58:	6819      	ldr	r1, [r3, #0]
 8009b5a:	2900      	cmp	r1, #0
 8009b5c:	d010      	beq.n	8009b80 <__mdiff+0x11c>
 8009b5e:	9b00      	ldr	r3, [sp, #0]
 8009b60:	6113      	str	r3, [r2, #16]
 8009b62:	e798      	b.n	8009a96 <__mdiff+0x32>
 8009b64:	4684      	mov	ip, r0
 8009b66:	ce02      	ldmia	r6!, {r1}
 8009b68:	b288      	uxth	r0, r1
 8009b6a:	4460      	add	r0, ip
 8009b6c:	1400      	asrs	r0, r0, #16
 8009b6e:	0c0c      	lsrs	r4, r1, #16
 8009b70:	1904      	adds	r4, r0, r4
 8009b72:	4461      	add	r1, ip
 8009b74:	1420      	asrs	r0, r4, #16
 8009b76:	b289      	uxth	r1, r1
 8009b78:	0424      	lsls	r4, r4, #16
 8009b7a:	4321      	orrs	r1, r4
 8009b7c:	c702      	stmia	r7!, {r1}
 8009b7e:	e7dc      	b.n	8009b3a <__mdiff+0xd6>
 8009b80:	9900      	ldr	r1, [sp, #0]
 8009b82:	3901      	subs	r1, #1
 8009b84:	9100      	str	r1, [sp, #0]
 8009b86:	e7e6      	b.n	8009b56 <__mdiff+0xf2>
 8009b88:	0800c46d 	.word	0x0800c46d
 8009b8c:	0800c47e 	.word	0x0800c47e
 8009b90:	00000237 	.word	0x00000237
 8009b94:	00000245 	.word	0x00000245

08009b98 <__ulp>:
 8009b98:	b510      	push	{r4, lr}
 8009b9a:	2400      	movs	r4, #0
 8009b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8009bd0 <__ulp+0x38>)
 8009b9e:	4a0d      	ldr	r2, [pc, #52]	@ (8009bd4 <__ulp+0x3c>)
 8009ba0:	400b      	ands	r3, r1
 8009ba2:	189b      	adds	r3, r3, r2
 8009ba4:	42a3      	cmp	r3, r4
 8009ba6:	dc06      	bgt.n	8009bb6 <__ulp+0x1e>
 8009ba8:	425b      	negs	r3, r3
 8009baa:	151a      	asrs	r2, r3, #20
 8009bac:	2a13      	cmp	r2, #19
 8009bae:	dc05      	bgt.n	8009bbc <__ulp+0x24>
 8009bb0:	2380      	movs	r3, #128	@ 0x80
 8009bb2:	031b      	lsls	r3, r3, #12
 8009bb4:	4113      	asrs	r3, r2
 8009bb6:	0019      	movs	r1, r3
 8009bb8:	0020      	movs	r0, r4
 8009bba:	bd10      	pop	{r4, pc}
 8009bbc:	3a14      	subs	r2, #20
 8009bbe:	2401      	movs	r4, #1
 8009bc0:	2a1e      	cmp	r2, #30
 8009bc2:	dc02      	bgt.n	8009bca <__ulp+0x32>
 8009bc4:	2480      	movs	r4, #128	@ 0x80
 8009bc6:	0624      	lsls	r4, r4, #24
 8009bc8:	40d4      	lsrs	r4, r2
 8009bca:	2300      	movs	r3, #0
 8009bcc:	e7f3      	b.n	8009bb6 <__ulp+0x1e>
 8009bce:	46c0      	nop			@ (mov r8, r8)
 8009bd0:	7ff00000 	.word	0x7ff00000
 8009bd4:	fcc00000 	.word	0xfcc00000

08009bd8 <__b2d>:
 8009bd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bda:	0006      	movs	r6, r0
 8009bdc:	6903      	ldr	r3, [r0, #16]
 8009bde:	3614      	adds	r6, #20
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	18f3      	adds	r3, r6, r3
 8009be4:	1f1d      	subs	r5, r3, #4
 8009be6:	682c      	ldr	r4, [r5, #0]
 8009be8:	000f      	movs	r7, r1
 8009bea:	0020      	movs	r0, r4
 8009bec:	9301      	str	r3, [sp, #4]
 8009bee:	f7ff fd3b 	bl	8009668 <__hi0bits>
 8009bf2:	2220      	movs	r2, #32
 8009bf4:	1a12      	subs	r2, r2, r0
 8009bf6:	603a      	str	r2, [r7, #0]
 8009bf8:	0003      	movs	r3, r0
 8009bfa:	4a1c      	ldr	r2, [pc, #112]	@ (8009c6c <__b2d+0x94>)
 8009bfc:	280a      	cmp	r0, #10
 8009bfe:	dc15      	bgt.n	8009c2c <__b2d+0x54>
 8009c00:	210b      	movs	r1, #11
 8009c02:	0027      	movs	r7, r4
 8009c04:	1a09      	subs	r1, r1, r0
 8009c06:	40cf      	lsrs	r7, r1
 8009c08:	433a      	orrs	r2, r7
 8009c0a:	468c      	mov	ip, r1
 8009c0c:	0011      	movs	r1, r2
 8009c0e:	2200      	movs	r2, #0
 8009c10:	42ae      	cmp	r6, r5
 8009c12:	d202      	bcs.n	8009c1a <__b2d+0x42>
 8009c14:	9a01      	ldr	r2, [sp, #4]
 8009c16:	3a08      	subs	r2, #8
 8009c18:	6812      	ldr	r2, [r2, #0]
 8009c1a:	3315      	adds	r3, #21
 8009c1c:	409c      	lsls	r4, r3
 8009c1e:	4663      	mov	r3, ip
 8009c20:	0027      	movs	r7, r4
 8009c22:	40da      	lsrs	r2, r3
 8009c24:	4317      	orrs	r7, r2
 8009c26:	0038      	movs	r0, r7
 8009c28:	b003      	add	sp, #12
 8009c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c2c:	2700      	movs	r7, #0
 8009c2e:	42ae      	cmp	r6, r5
 8009c30:	d202      	bcs.n	8009c38 <__b2d+0x60>
 8009c32:	9d01      	ldr	r5, [sp, #4]
 8009c34:	3d08      	subs	r5, #8
 8009c36:	682f      	ldr	r7, [r5, #0]
 8009c38:	210b      	movs	r1, #11
 8009c3a:	4249      	negs	r1, r1
 8009c3c:	468c      	mov	ip, r1
 8009c3e:	449c      	add	ip, r3
 8009c40:	2b0b      	cmp	r3, #11
 8009c42:	d010      	beq.n	8009c66 <__b2d+0x8e>
 8009c44:	4661      	mov	r1, ip
 8009c46:	2320      	movs	r3, #32
 8009c48:	408c      	lsls	r4, r1
 8009c4a:	1a5b      	subs	r3, r3, r1
 8009c4c:	0039      	movs	r1, r7
 8009c4e:	40d9      	lsrs	r1, r3
 8009c50:	430c      	orrs	r4, r1
 8009c52:	4322      	orrs	r2, r4
 8009c54:	0011      	movs	r1, r2
 8009c56:	2200      	movs	r2, #0
 8009c58:	42b5      	cmp	r5, r6
 8009c5a:	d901      	bls.n	8009c60 <__b2d+0x88>
 8009c5c:	3d04      	subs	r5, #4
 8009c5e:	682a      	ldr	r2, [r5, #0]
 8009c60:	4664      	mov	r4, ip
 8009c62:	40a7      	lsls	r7, r4
 8009c64:	e7dd      	b.n	8009c22 <__b2d+0x4a>
 8009c66:	4322      	orrs	r2, r4
 8009c68:	0011      	movs	r1, r2
 8009c6a:	e7dc      	b.n	8009c26 <__b2d+0x4e>
 8009c6c:	3ff00000 	.word	0x3ff00000

08009c70 <__d2b>:
 8009c70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c72:	2101      	movs	r1, #1
 8009c74:	0016      	movs	r6, r2
 8009c76:	001f      	movs	r7, r3
 8009c78:	f7ff fbfe 	bl	8009478 <_Balloc>
 8009c7c:	1e04      	subs	r4, r0, #0
 8009c7e:	d105      	bne.n	8009c8c <__d2b+0x1c>
 8009c80:	0022      	movs	r2, r4
 8009c82:	4b25      	ldr	r3, [pc, #148]	@ (8009d18 <__d2b+0xa8>)
 8009c84:	4825      	ldr	r0, [pc, #148]	@ (8009d1c <__d2b+0xac>)
 8009c86:	4926      	ldr	r1, [pc, #152]	@ (8009d20 <__d2b+0xb0>)
 8009c88:	f001 fb7e 	bl	800b388 <__assert_func>
 8009c8c:	033b      	lsls	r3, r7, #12
 8009c8e:	007d      	lsls	r5, r7, #1
 8009c90:	0b1b      	lsrs	r3, r3, #12
 8009c92:	0d6d      	lsrs	r5, r5, #21
 8009c94:	d002      	beq.n	8009c9c <__d2b+0x2c>
 8009c96:	2280      	movs	r2, #128	@ 0x80
 8009c98:	0352      	lsls	r2, r2, #13
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	9301      	str	r3, [sp, #4]
 8009c9e:	2e00      	cmp	r6, #0
 8009ca0:	d025      	beq.n	8009cee <__d2b+0x7e>
 8009ca2:	4668      	mov	r0, sp
 8009ca4:	9600      	str	r6, [sp, #0]
 8009ca6:	f7ff fd00 	bl	80096aa <__lo0bits>
 8009caa:	9b01      	ldr	r3, [sp, #4]
 8009cac:	9900      	ldr	r1, [sp, #0]
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	d01b      	beq.n	8009cea <__d2b+0x7a>
 8009cb2:	2220      	movs	r2, #32
 8009cb4:	001e      	movs	r6, r3
 8009cb6:	1a12      	subs	r2, r2, r0
 8009cb8:	4096      	lsls	r6, r2
 8009cba:	0032      	movs	r2, r6
 8009cbc:	40c3      	lsrs	r3, r0
 8009cbe:	430a      	orrs	r2, r1
 8009cc0:	6162      	str	r2, [r4, #20]
 8009cc2:	9301      	str	r3, [sp, #4]
 8009cc4:	9e01      	ldr	r6, [sp, #4]
 8009cc6:	61a6      	str	r6, [r4, #24]
 8009cc8:	1e73      	subs	r3, r6, #1
 8009cca:	419e      	sbcs	r6, r3
 8009ccc:	3601      	adds	r6, #1
 8009cce:	6126      	str	r6, [r4, #16]
 8009cd0:	2d00      	cmp	r5, #0
 8009cd2:	d014      	beq.n	8009cfe <__d2b+0x8e>
 8009cd4:	2635      	movs	r6, #53	@ 0x35
 8009cd6:	4b13      	ldr	r3, [pc, #76]	@ (8009d24 <__d2b+0xb4>)
 8009cd8:	18ed      	adds	r5, r5, r3
 8009cda:	9b08      	ldr	r3, [sp, #32]
 8009cdc:	182d      	adds	r5, r5, r0
 8009cde:	601d      	str	r5, [r3, #0]
 8009ce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ce2:	1a36      	subs	r6, r6, r0
 8009ce4:	601e      	str	r6, [r3, #0]
 8009ce6:	0020      	movs	r0, r4
 8009ce8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009cea:	6161      	str	r1, [r4, #20]
 8009cec:	e7ea      	b.n	8009cc4 <__d2b+0x54>
 8009cee:	a801      	add	r0, sp, #4
 8009cf0:	f7ff fcdb 	bl	80096aa <__lo0bits>
 8009cf4:	9b01      	ldr	r3, [sp, #4]
 8009cf6:	2601      	movs	r6, #1
 8009cf8:	6163      	str	r3, [r4, #20]
 8009cfa:	3020      	adds	r0, #32
 8009cfc:	e7e7      	b.n	8009cce <__d2b+0x5e>
 8009cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8009d28 <__d2b+0xb8>)
 8009d00:	18c0      	adds	r0, r0, r3
 8009d02:	9b08      	ldr	r3, [sp, #32]
 8009d04:	6018      	str	r0, [r3, #0]
 8009d06:	4b09      	ldr	r3, [pc, #36]	@ (8009d2c <__d2b+0xbc>)
 8009d08:	18f3      	adds	r3, r6, r3
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	18e3      	adds	r3, r4, r3
 8009d0e:	6958      	ldr	r0, [r3, #20]
 8009d10:	f7ff fcaa 	bl	8009668 <__hi0bits>
 8009d14:	0176      	lsls	r6, r6, #5
 8009d16:	e7e3      	b.n	8009ce0 <__d2b+0x70>
 8009d18:	0800c46d 	.word	0x0800c46d
 8009d1c:	0800c47e 	.word	0x0800c47e
 8009d20:	0000030f 	.word	0x0000030f
 8009d24:	fffffbcd 	.word	0xfffffbcd
 8009d28:	fffffbce 	.word	0xfffffbce
 8009d2c:	3fffffff 	.word	0x3fffffff

08009d30 <__ratio>:
 8009d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d32:	b087      	sub	sp, #28
 8009d34:	000f      	movs	r7, r1
 8009d36:	a904      	add	r1, sp, #16
 8009d38:	0006      	movs	r6, r0
 8009d3a:	f7ff ff4d 	bl	8009bd8 <__b2d>
 8009d3e:	9000      	str	r0, [sp, #0]
 8009d40:	9101      	str	r1, [sp, #4]
 8009d42:	9b00      	ldr	r3, [sp, #0]
 8009d44:	9c01      	ldr	r4, [sp, #4]
 8009d46:	0038      	movs	r0, r7
 8009d48:	a905      	add	r1, sp, #20
 8009d4a:	9302      	str	r3, [sp, #8]
 8009d4c:	9403      	str	r4, [sp, #12]
 8009d4e:	f7ff ff43 	bl	8009bd8 <__b2d>
 8009d52:	000d      	movs	r5, r1
 8009d54:	0002      	movs	r2, r0
 8009d56:	000b      	movs	r3, r1
 8009d58:	6930      	ldr	r0, [r6, #16]
 8009d5a:	6939      	ldr	r1, [r7, #16]
 8009d5c:	9e04      	ldr	r6, [sp, #16]
 8009d5e:	1a40      	subs	r0, r0, r1
 8009d60:	9905      	ldr	r1, [sp, #20]
 8009d62:	0140      	lsls	r0, r0, #5
 8009d64:	1a71      	subs	r1, r6, r1
 8009d66:	1841      	adds	r1, r0, r1
 8009d68:	0508      	lsls	r0, r1, #20
 8009d6a:	2900      	cmp	r1, #0
 8009d6c:	dd08      	ble.n	8009d80 <__ratio+0x50>
 8009d6e:	9901      	ldr	r1, [sp, #4]
 8009d70:	1841      	adds	r1, r0, r1
 8009d72:	9103      	str	r1, [sp, #12]
 8009d74:	9802      	ldr	r0, [sp, #8]
 8009d76:	9903      	ldr	r1, [sp, #12]
 8009d78:	f7f7 ff9c 	bl	8001cb4 <__aeabi_ddiv>
 8009d7c:	b007      	add	sp, #28
 8009d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d80:	1a2b      	subs	r3, r5, r0
 8009d82:	e7f7      	b.n	8009d74 <__ratio+0x44>

08009d84 <__copybits>:
 8009d84:	b570      	push	{r4, r5, r6, lr}
 8009d86:	0014      	movs	r4, r2
 8009d88:	0005      	movs	r5, r0
 8009d8a:	3901      	subs	r1, #1
 8009d8c:	6913      	ldr	r3, [r2, #16]
 8009d8e:	1149      	asrs	r1, r1, #5
 8009d90:	3101      	adds	r1, #1
 8009d92:	0089      	lsls	r1, r1, #2
 8009d94:	3414      	adds	r4, #20
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	1841      	adds	r1, r0, r1
 8009d9a:	18e3      	adds	r3, r4, r3
 8009d9c:	42a3      	cmp	r3, r4
 8009d9e:	d80d      	bhi.n	8009dbc <__copybits+0x38>
 8009da0:	0014      	movs	r4, r2
 8009da2:	3411      	adds	r4, #17
 8009da4:	2500      	movs	r5, #0
 8009da6:	429c      	cmp	r4, r3
 8009da8:	d803      	bhi.n	8009db2 <__copybits+0x2e>
 8009daa:	1a9b      	subs	r3, r3, r2
 8009dac:	3b11      	subs	r3, #17
 8009dae:	089b      	lsrs	r3, r3, #2
 8009db0:	009d      	lsls	r5, r3, #2
 8009db2:	2300      	movs	r3, #0
 8009db4:	1940      	adds	r0, r0, r5
 8009db6:	4281      	cmp	r1, r0
 8009db8:	d803      	bhi.n	8009dc2 <__copybits+0x3e>
 8009dba:	bd70      	pop	{r4, r5, r6, pc}
 8009dbc:	cc40      	ldmia	r4!, {r6}
 8009dbe:	c540      	stmia	r5!, {r6}
 8009dc0:	e7ec      	b.n	8009d9c <__copybits+0x18>
 8009dc2:	c008      	stmia	r0!, {r3}
 8009dc4:	e7f7      	b.n	8009db6 <__copybits+0x32>

08009dc6 <__any_on>:
 8009dc6:	0002      	movs	r2, r0
 8009dc8:	6900      	ldr	r0, [r0, #16]
 8009dca:	b510      	push	{r4, lr}
 8009dcc:	3214      	adds	r2, #20
 8009dce:	114b      	asrs	r3, r1, #5
 8009dd0:	4298      	cmp	r0, r3
 8009dd2:	db13      	blt.n	8009dfc <__any_on+0x36>
 8009dd4:	dd0c      	ble.n	8009df0 <__any_on+0x2a>
 8009dd6:	241f      	movs	r4, #31
 8009dd8:	0008      	movs	r0, r1
 8009dda:	4020      	ands	r0, r4
 8009ddc:	4221      	tst	r1, r4
 8009dde:	d007      	beq.n	8009df0 <__any_on+0x2a>
 8009de0:	0099      	lsls	r1, r3, #2
 8009de2:	588c      	ldr	r4, [r1, r2]
 8009de4:	0021      	movs	r1, r4
 8009de6:	40c1      	lsrs	r1, r0
 8009de8:	4081      	lsls	r1, r0
 8009dea:	2001      	movs	r0, #1
 8009dec:	428c      	cmp	r4, r1
 8009dee:	d104      	bne.n	8009dfa <__any_on+0x34>
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	18d3      	adds	r3, r2, r3
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d803      	bhi.n	8009e00 <__any_on+0x3a>
 8009df8:	2000      	movs	r0, #0
 8009dfa:	bd10      	pop	{r4, pc}
 8009dfc:	0003      	movs	r3, r0
 8009dfe:	e7f7      	b.n	8009df0 <__any_on+0x2a>
 8009e00:	3b04      	subs	r3, #4
 8009e02:	6819      	ldr	r1, [r3, #0]
 8009e04:	2900      	cmp	r1, #0
 8009e06:	d0f5      	beq.n	8009df4 <__any_on+0x2e>
 8009e08:	2001      	movs	r0, #1
 8009e0a:	e7f6      	b.n	8009dfa <__any_on+0x34>

08009e0c <sulp>:
 8009e0c:	b570      	push	{r4, r5, r6, lr}
 8009e0e:	0016      	movs	r6, r2
 8009e10:	000d      	movs	r5, r1
 8009e12:	f7ff fec1 	bl	8009b98 <__ulp>
 8009e16:	2e00      	cmp	r6, #0
 8009e18:	d00d      	beq.n	8009e36 <sulp+0x2a>
 8009e1a:	236b      	movs	r3, #107	@ 0x6b
 8009e1c:	006a      	lsls	r2, r5, #1
 8009e1e:	0d52      	lsrs	r2, r2, #21
 8009e20:	1a9b      	subs	r3, r3, r2
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	dd07      	ble.n	8009e36 <sulp+0x2a>
 8009e26:	2400      	movs	r4, #0
 8009e28:	4a03      	ldr	r2, [pc, #12]	@ (8009e38 <sulp+0x2c>)
 8009e2a:	051b      	lsls	r3, r3, #20
 8009e2c:	189d      	adds	r5, r3, r2
 8009e2e:	002b      	movs	r3, r5
 8009e30:	0022      	movs	r2, r4
 8009e32:	f7f8 fb83 	bl	800253c <__aeabi_dmul>
 8009e36:	bd70      	pop	{r4, r5, r6, pc}
 8009e38:	3ff00000 	.word	0x3ff00000

08009e3c <_strtod_l>:
 8009e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e3e:	b0a3      	sub	sp, #140	@ 0x8c
 8009e40:	921b      	str	r2, [sp, #108]	@ 0x6c
 8009e42:	2200      	movs	r2, #0
 8009e44:	2600      	movs	r6, #0
 8009e46:	2700      	movs	r7, #0
 8009e48:	9005      	str	r0, [sp, #20]
 8009e4a:	9109      	str	r1, [sp, #36]	@ 0x24
 8009e4c:	921e      	str	r2, [sp, #120]	@ 0x78
 8009e4e:	911d      	str	r1, [sp, #116]	@ 0x74
 8009e50:	780a      	ldrb	r2, [r1, #0]
 8009e52:	2a2b      	cmp	r2, #43	@ 0x2b
 8009e54:	d053      	beq.n	8009efe <_strtod_l+0xc2>
 8009e56:	d83f      	bhi.n	8009ed8 <_strtod_l+0x9c>
 8009e58:	2a0d      	cmp	r2, #13
 8009e5a:	d839      	bhi.n	8009ed0 <_strtod_l+0x94>
 8009e5c:	2a08      	cmp	r2, #8
 8009e5e:	d839      	bhi.n	8009ed4 <_strtod_l+0x98>
 8009e60:	2a00      	cmp	r2, #0
 8009e62:	d042      	beq.n	8009eea <_strtod_l+0xae>
 8009e64:	2200      	movs	r2, #0
 8009e66:	9212      	str	r2, [sp, #72]	@ 0x48
 8009e68:	2100      	movs	r1, #0
 8009e6a:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8009e6c:	910c      	str	r1, [sp, #48]	@ 0x30
 8009e6e:	782a      	ldrb	r2, [r5, #0]
 8009e70:	2a30      	cmp	r2, #48	@ 0x30
 8009e72:	d000      	beq.n	8009e76 <_strtod_l+0x3a>
 8009e74:	e083      	b.n	8009f7e <_strtod_l+0x142>
 8009e76:	786a      	ldrb	r2, [r5, #1]
 8009e78:	3120      	adds	r1, #32
 8009e7a:	438a      	bics	r2, r1
 8009e7c:	2a58      	cmp	r2, #88	@ 0x58
 8009e7e:	d000      	beq.n	8009e82 <_strtod_l+0x46>
 8009e80:	e073      	b.n	8009f6a <_strtod_l+0x12e>
 8009e82:	9302      	str	r3, [sp, #8]
 8009e84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009e86:	4a95      	ldr	r2, [pc, #596]	@ (800a0dc <_strtod_l+0x2a0>)
 8009e88:	9301      	str	r3, [sp, #4]
 8009e8a:	ab1e      	add	r3, sp, #120	@ 0x78
 8009e8c:	9300      	str	r3, [sp, #0]
 8009e8e:	9805      	ldr	r0, [sp, #20]
 8009e90:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009e92:	a91d      	add	r1, sp, #116	@ 0x74
 8009e94:	f001 fb2c 	bl	800b4f0 <__gethex>
 8009e98:	230f      	movs	r3, #15
 8009e9a:	0002      	movs	r2, r0
 8009e9c:	401a      	ands	r2, r3
 8009e9e:	0004      	movs	r4, r0
 8009ea0:	9206      	str	r2, [sp, #24]
 8009ea2:	4218      	tst	r0, r3
 8009ea4:	d005      	beq.n	8009eb2 <_strtod_l+0x76>
 8009ea6:	2a06      	cmp	r2, #6
 8009ea8:	d12b      	bne.n	8009f02 <_strtod_l+0xc6>
 8009eaa:	2300      	movs	r3, #0
 8009eac:	3501      	adds	r5, #1
 8009eae:	951d      	str	r5, [sp, #116]	@ 0x74
 8009eb0:	9312      	str	r3, [sp, #72]	@ 0x48
 8009eb2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d002      	beq.n	8009ebe <_strtod_l+0x82>
 8009eb8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009eba:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009ebc:	6013      	str	r3, [r2, #0]
 8009ebe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d019      	beq.n	8009ef8 <_strtod_l+0xbc>
 8009ec4:	2380      	movs	r3, #128	@ 0x80
 8009ec6:	0030      	movs	r0, r6
 8009ec8:	061b      	lsls	r3, r3, #24
 8009eca:	18f9      	adds	r1, r7, r3
 8009ecc:	b023      	add	sp, #140	@ 0x8c
 8009ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ed0:	2a20      	cmp	r2, #32
 8009ed2:	d1c7      	bne.n	8009e64 <_strtod_l+0x28>
 8009ed4:	3101      	adds	r1, #1
 8009ed6:	e7ba      	b.n	8009e4e <_strtod_l+0x12>
 8009ed8:	2a2d      	cmp	r2, #45	@ 0x2d
 8009eda:	d1c3      	bne.n	8009e64 <_strtod_l+0x28>
 8009edc:	3a2c      	subs	r2, #44	@ 0x2c
 8009ede:	9212      	str	r2, [sp, #72]	@ 0x48
 8009ee0:	1c4a      	adds	r2, r1, #1
 8009ee2:	921d      	str	r2, [sp, #116]	@ 0x74
 8009ee4:	784a      	ldrb	r2, [r1, #1]
 8009ee6:	2a00      	cmp	r2, #0
 8009ee8:	d1be      	bne.n	8009e68 <_strtod_l+0x2c>
 8009eea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eec:	931d      	str	r3, [sp, #116]	@ 0x74
 8009eee:	2300      	movs	r3, #0
 8009ef0:	9312      	str	r3, [sp, #72]	@ 0x48
 8009ef2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d1df      	bne.n	8009eb8 <_strtod_l+0x7c>
 8009ef8:	0030      	movs	r0, r6
 8009efa:	0039      	movs	r1, r7
 8009efc:	e7e6      	b.n	8009ecc <_strtod_l+0x90>
 8009efe:	2200      	movs	r2, #0
 8009f00:	e7ed      	b.n	8009ede <_strtod_l+0xa2>
 8009f02:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8009f04:	2a00      	cmp	r2, #0
 8009f06:	d007      	beq.n	8009f18 <_strtod_l+0xdc>
 8009f08:	2135      	movs	r1, #53	@ 0x35
 8009f0a:	a820      	add	r0, sp, #128	@ 0x80
 8009f0c:	f7ff ff3a 	bl	8009d84 <__copybits>
 8009f10:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8009f12:	9805      	ldr	r0, [sp, #20]
 8009f14:	f7ff faf4 	bl	8009500 <_Bfree>
 8009f18:	9806      	ldr	r0, [sp, #24]
 8009f1a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8009f1c:	3801      	subs	r0, #1
 8009f1e:	2804      	cmp	r0, #4
 8009f20:	d806      	bhi.n	8009f30 <_strtod_l+0xf4>
 8009f22:	f7f6 f8f9 	bl	8000118 <__gnu_thumb1_case_uqi>
 8009f26:	0312      	.short	0x0312
 8009f28:	1e1c      	.short	0x1e1c
 8009f2a:	12          	.byte	0x12
 8009f2b:	00          	.byte	0x00
 8009f2c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009f2e:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8009f30:	05e4      	lsls	r4, r4, #23
 8009f32:	d502      	bpl.n	8009f3a <_strtod_l+0xfe>
 8009f34:	2380      	movs	r3, #128	@ 0x80
 8009f36:	061b      	lsls	r3, r3, #24
 8009f38:	431f      	orrs	r7, r3
 8009f3a:	4b69      	ldr	r3, [pc, #420]	@ (800a0e0 <_strtod_l+0x2a4>)
 8009f3c:	423b      	tst	r3, r7
 8009f3e:	d1b8      	bne.n	8009eb2 <_strtod_l+0x76>
 8009f40:	f7fe fb88 	bl	8008654 <__errno>
 8009f44:	2322      	movs	r3, #34	@ 0x22
 8009f46:	6003      	str	r3, [r0, #0]
 8009f48:	e7b3      	b.n	8009eb2 <_strtod_l+0x76>
 8009f4a:	4966      	ldr	r1, [pc, #408]	@ (800a0e4 <_strtod_l+0x2a8>)
 8009f4c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009f4e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009f50:	400a      	ands	r2, r1
 8009f52:	4965      	ldr	r1, [pc, #404]	@ (800a0e8 <_strtod_l+0x2ac>)
 8009f54:	185b      	adds	r3, r3, r1
 8009f56:	051b      	lsls	r3, r3, #20
 8009f58:	431a      	orrs	r2, r3
 8009f5a:	0017      	movs	r7, r2
 8009f5c:	e7e8      	b.n	8009f30 <_strtod_l+0xf4>
 8009f5e:	4f60      	ldr	r7, [pc, #384]	@ (800a0e0 <_strtod_l+0x2a4>)
 8009f60:	e7e6      	b.n	8009f30 <_strtod_l+0xf4>
 8009f62:	2601      	movs	r6, #1
 8009f64:	4f61      	ldr	r7, [pc, #388]	@ (800a0ec <_strtod_l+0x2b0>)
 8009f66:	4276      	negs	r6, r6
 8009f68:	e7e2      	b.n	8009f30 <_strtod_l+0xf4>
 8009f6a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009f6c:	1c5a      	adds	r2, r3, #1
 8009f6e:	921d      	str	r2, [sp, #116]	@ 0x74
 8009f70:	785b      	ldrb	r3, [r3, #1]
 8009f72:	2b30      	cmp	r3, #48	@ 0x30
 8009f74:	d0f9      	beq.n	8009f6a <_strtod_l+0x12e>
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d09b      	beq.n	8009eb2 <_strtod_l+0x76>
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	930c      	str	r3, [sp, #48]	@ 0x30
 8009f7e:	2500      	movs	r5, #0
 8009f80:	220a      	movs	r2, #10
 8009f82:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009f84:	950d      	str	r5, [sp, #52]	@ 0x34
 8009f86:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009f88:	9508      	str	r5, [sp, #32]
 8009f8a:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8009f8c:	7804      	ldrb	r4, [r0, #0]
 8009f8e:	0023      	movs	r3, r4
 8009f90:	3b30      	subs	r3, #48	@ 0x30
 8009f92:	b2d9      	uxtb	r1, r3
 8009f94:	2909      	cmp	r1, #9
 8009f96:	d927      	bls.n	8009fe8 <_strtod_l+0x1ac>
 8009f98:	2201      	movs	r2, #1
 8009f9a:	4955      	ldr	r1, [pc, #340]	@ (800a0f0 <_strtod_l+0x2b4>)
 8009f9c:	f001 f9dd 	bl	800b35a <strncmp>
 8009fa0:	2800      	cmp	r0, #0
 8009fa2:	d031      	beq.n	800a008 <_strtod_l+0x1cc>
 8009fa4:	2000      	movs	r0, #0
 8009fa6:	0023      	movs	r3, r4
 8009fa8:	4684      	mov	ip, r0
 8009faa:	9a08      	ldr	r2, [sp, #32]
 8009fac:	900e      	str	r0, [sp, #56]	@ 0x38
 8009fae:	9206      	str	r2, [sp, #24]
 8009fb0:	2220      	movs	r2, #32
 8009fb2:	0019      	movs	r1, r3
 8009fb4:	4391      	bics	r1, r2
 8009fb6:	000a      	movs	r2, r1
 8009fb8:	2100      	movs	r1, #0
 8009fba:	9107      	str	r1, [sp, #28]
 8009fbc:	2a45      	cmp	r2, #69	@ 0x45
 8009fbe:	d000      	beq.n	8009fc2 <_strtod_l+0x186>
 8009fc0:	e0c0      	b.n	800a144 <_strtod_l+0x308>
 8009fc2:	9b06      	ldr	r3, [sp, #24]
 8009fc4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009fc6:	4303      	orrs	r3, r0
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	428b      	cmp	r3, r1
 8009fcc:	d08d      	beq.n	8009eea <_strtod_l+0xae>
 8009fce:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009fd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	931d      	str	r3, [sp, #116]	@ 0x74
 8009fd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fd8:	785b      	ldrb	r3, [r3, #1]
 8009fda:	2b2b      	cmp	r3, #43	@ 0x2b
 8009fdc:	d070      	beq.n	800a0c0 <_strtod_l+0x284>
 8009fde:	000c      	movs	r4, r1
 8009fe0:	2b2d      	cmp	r3, #45	@ 0x2d
 8009fe2:	d173      	bne.n	800a0cc <_strtod_l+0x290>
 8009fe4:	2401      	movs	r4, #1
 8009fe6:	e06c      	b.n	800a0c2 <_strtod_l+0x286>
 8009fe8:	9908      	ldr	r1, [sp, #32]
 8009fea:	2908      	cmp	r1, #8
 8009fec:	dc09      	bgt.n	800a002 <_strtod_l+0x1c6>
 8009fee:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009ff0:	4351      	muls	r1, r2
 8009ff2:	185b      	adds	r3, r3, r1
 8009ff4:	930d      	str	r3, [sp, #52]	@ 0x34
 8009ff6:	9b08      	ldr	r3, [sp, #32]
 8009ff8:	3001      	adds	r0, #1
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	9308      	str	r3, [sp, #32]
 8009ffe:	901d      	str	r0, [sp, #116]	@ 0x74
 800a000:	e7c3      	b.n	8009f8a <_strtod_l+0x14e>
 800a002:	4355      	muls	r5, r2
 800a004:	195d      	adds	r5, r3, r5
 800a006:	e7f6      	b.n	8009ff6 <_strtod_l+0x1ba>
 800a008:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a00a:	1c5a      	adds	r2, r3, #1
 800a00c:	921d      	str	r2, [sp, #116]	@ 0x74
 800a00e:	9a08      	ldr	r2, [sp, #32]
 800a010:	785b      	ldrb	r3, [r3, #1]
 800a012:	2a00      	cmp	r2, #0
 800a014:	d03a      	beq.n	800a08c <_strtod_l+0x250>
 800a016:	900e      	str	r0, [sp, #56]	@ 0x38
 800a018:	9206      	str	r2, [sp, #24]
 800a01a:	001a      	movs	r2, r3
 800a01c:	3a30      	subs	r2, #48	@ 0x30
 800a01e:	2a09      	cmp	r2, #9
 800a020:	d912      	bls.n	800a048 <_strtod_l+0x20c>
 800a022:	2201      	movs	r2, #1
 800a024:	4694      	mov	ip, r2
 800a026:	e7c3      	b.n	8009fb0 <_strtod_l+0x174>
 800a028:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a02a:	3001      	adds	r0, #1
 800a02c:	1c5a      	adds	r2, r3, #1
 800a02e:	921d      	str	r2, [sp, #116]	@ 0x74
 800a030:	785b      	ldrb	r3, [r3, #1]
 800a032:	2b30      	cmp	r3, #48	@ 0x30
 800a034:	d0f8      	beq.n	800a028 <_strtod_l+0x1ec>
 800a036:	001a      	movs	r2, r3
 800a038:	3a31      	subs	r2, #49	@ 0x31
 800a03a:	2a08      	cmp	r2, #8
 800a03c:	d83b      	bhi.n	800a0b6 <_strtod_l+0x27a>
 800a03e:	900e      	str	r0, [sp, #56]	@ 0x38
 800a040:	2000      	movs	r0, #0
 800a042:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a044:	9006      	str	r0, [sp, #24]
 800a046:	9213      	str	r2, [sp, #76]	@ 0x4c
 800a048:	001a      	movs	r2, r3
 800a04a:	1c41      	adds	r1, r0, #1
 800a04c:	3a30      	subs	r2, #48	@ 0x30
 800a04e:	2b30      	cmp	r3, #48	@ 0x30
 800a050:	d016      	beq.n	800a080 <_strtod_l+0x244>
 800a052:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a054:	185b      	adds	r3, r3, r1
 800a056:	930e      	str	r3, [sp, #56]	@ 0x38
 800a058:	9b06      	ldr	r3, [sp, #24]
 800a05a:	210a      	movs	r1, #10
 800a05c:	469c      	mov	ip, r3
 800a05e:	4484      	add	ip, r0
 800a060:	459c      	cmp	ip, r3
 800a062:	d115      	bne.n	800a090 <_strtod_l+0x254>
 800a064:	9906      	ldr	r1, [sp, #24]
 800a066:	9b06      	ldr	r3, [sp, #24]
 800a068:	3101      	adds	r1, #1
 800a06a:	1809      	adds	r1, r1, r0
 800a06c:	181b      	adds	r3, r3, r0
 800a06e:	9106      	str	r1, [sp, #24]
 800a070:	2b08      	cmp	r3, #8
 800a072:	dc19      	bgt.n	800a0a8 <_strtod_l+0x26c>
 800a074:	230a      	movs	r3, #10
 800a076:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a078:	434b      	muls	r3, r1
 800a07a:	2100      	movs	r1, #0
 800a07c:	18d3      	adds	r3, r2, r3
 800a07e:	930d      	str	r3, [sp, #52]	@ 0x34
 800a080:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a082:	0008      	movs	r0, r1
 800a084:	1c5a      	adds	r2, r3, #1
 800a086:	921d      	str	r2, [sp, #116]	@ 0x74
 800a088:	785b      	ldrb	r3, [r3, #1]
 800a08a:	e7c6      	b.n	800a01a <_strtod_l+0x1de>
 800a08c:	9808      	ldr	r0, [sp, #32]
 800a08e:	e7d0      	b.n	800a032 <_strtod_l+0x1f6>
 800a090:	1c5c      	adds	r4, r3, #1
 800a092:	2b08      	cmp	r3, #8
 800a094:	dc04      	bgt.n	800a0a0 <_strtod_l+0x264>
 800a096:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a098:	434b      	muls	r3, r1
 800a09a:	930d      	str	r3, [sp, #52]	@ 0x34
 800a09c:	0023      	movs	r3, r4
 800a09e:	e7df      	b.n	800a060 <_strtod_l+0x224>
 800a0a0:	2c10      	cmp	r4, #16
 800a0a2:	dcfb      	bgt.n	800a09c <_strtod_l+0x260>
 800a0a4:	434d      	muls	r5, r1
 800a0a6:	e7f9      	b.n	800a09c <_strtod_l+0x260>
 800a0a8:	2100      	movs	r1, #0
 800a0aa:	2b0f      	cmp	r3, #15
 800a0ac:	dce8      	bgt.n	800a080 <_strtod_l+0x244>
 800a0ae:	230a      	movs	r3, #10
 800a0b0:	435d      	muls	r5, r3
 800a0b2:	1955      	adds	r5, r2, r5
 800a0b4:	e7e4      	b.n	800a080 <_strtod_l+0x244>
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a0ba:	9206      	str	r2, [sp, #24]
 800a0bc:	3201      	adds	r2, #1
 800a0be:	e7b1      	b.n	800a024 <_strtod_l+0x1e8>
 800a0c0:	2400      	movs	r4, #0
 800a0c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0c4:	3302      	adds	r3, #2
 800a0c6:	931d      	str	r3, [sp, #116]	@ 0x74
 800a0c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0ca:	789b      	ldrb	r3, [r3, #2]
 800a0cc:	001a      	movs	r2, r3
 800a0ce:	3a30      	subs	r2, #48	@ 0x30
 800a0d0:	2a09      	cmp	r2, #9
 800a0d2:	d913      	bls.n	800a0fc <_strtod_l+0x2c0>
 800a0d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0d6:	921d      	str	r2, [sp, #116]	@ 0x74
 800a0d8:	2200      	movs	r2, #0
 800a0da:	e032      	b.n	800a142 <_strtod_l+0x306>
 800a0dc:	0800c5f0 	.word	0x0800c5f0
 800a0e0:	7ff00000 	.word	0x7ff00000
 800a0e4:	ffefffff 	.word	0xffefffff
 800a0e8:	00000433 	.word	0x00000433
 800a0ec:	7fffffff 	.word	0x7fffffff
 800a0f0:	0800c5d8 	.word	0x0800c5d8
 800a0f4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a0f6:	1c5a      	adds	r2, r3, #1
 800a0f8:	921d      	str	r2, [sp, #116]	@ 0x74
 800a0fa:	785b      	ldrb	r3, [r3, #1]
 800a0fc:	2b30      	cmp	r3, #48	@ 0x30
 800a0fe:	d0f9      	beq.n	800a0f4 <_strtod_l+0x2b8>
 800a100:	2200      	movs	r2, #0
 800a102:	9207      	str	r2, [sp, #28]
 800a104:	001a      	movs	r2, r3
 800a106:	3a31      	subs	r2, #49	@ 0x31
 800a108:	2a08      	cmp	r2, #8
 800a10a:	d81b      	bhi.n	800a144 <_strtod_l+0x308>
 800a10c:	3b30      	subs	r3, #48	@ 0x30
 800a10e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a110:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a112:	9307      	str	r3, [sp, #28]
 800a114:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a116:	1c59      	adds	r1, r3, #1
 800a118:	911d      	str	r1, [sp, #116]	@ 0x74
 800a11a:	785b      	ldrb	r3, [r3, #1]
 800a11c:	001a      	movs	r2, r3
 800a11e:	3a30      	subs	r2, #48	@ 0x30
 800a120:	2a09      	cmp	r2, #9
 800a122:	d93a      	bls.n	800a19a <_strtod_l+0x35e>
 800a124:	9a07      	ldr	r2, [sp, #28]
 800a126:	1a8a      	subs	r2, r1, r2
 800a128:	49b4      	ldr	r1, [pc, #720]	@ (800a3fc <_strtod_l+0x5c0>)
 800a12a:	9107      	str	r1, [sp, #28]
 800a12c:	2a08      	cmp	r2, #8
 800a12e:	dc04      	bgt.n	800a13a <_strtod_l+0x2fe>
 800a130:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800a132:	9207      	str	r2, [sp, #28]
 800a134:	428a      	cmp	r2, r1
 800a136:	dd00      	ble.n	800a13a <_strtod_l+0x2fe>
 800a138:	9107      	str	r1, [sp, #28]
 800a13a:	2c00      	cmp	r4, #0
 800a13c:	d002      	beq.n	800a144 <_strtod_l+0x308>
 800a13e:	9a07      	ldr	r2, [sp, #28]
 800a140:	4252      	negs	r2, r2
 800a142:	9207      	str	r2, [sp, #28]
 800a144:	9a06      	ldr	r2, [sp, #24]
 800a146:	2a00      	cmp	r2, #0
 800a148:	d14d      	bne.n	800a1e6 <_strtod_l+0x3aa>
 800a14a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a14c:	4310      	orrs	r0, r2
 800a14e:	d000      	beq.n	800a152 <_strtod_l+0x316>
 800a150:	e6af      	b.n	8009eb2 <_strtod_l+0x76>
 800a152:	4662      	mov	r2, ip
 800a154:	2a00      	cmp	r2, #0
 800a156:	d000      	beq.n	800a15a <_strtod_l+0x31e>
 800a158:	e6c7      	b.n	8009eea <_strtod_l+0xae>
 800a15a:	2b69      	cmp	r3, #105	@ 0x69
 800a15c:	d027      	beq.n	800a1ae <_strtod_l+0x372>
 800a15e:	dc23      	bgt.n	800a1a8 <_strtod_l+0x36c>
 800a160:	2b49      	cmp	r3, #73	@ 0x49
 800a162:	d024      	beq.n	800a1ae <_strtod_l+0x372>
 800a164:	2b4e      	cmp	r3, #78	@ 0x4e
 800a166:	d000      	beq.n	800a16a <_strtod_l+0x32e>
 800a168:	e6bf      	b.n	8009eea <_strtod_l+0xae>
 800a16a:	49a5      	ldr	r1, [pc, #660]	@ (800a400 <_strtod_l+0x5c4>)
 800a16c:	a81d      	add	r0, sp, #116	@ 0x74
 800a16e:	f001 fbf5 	bl	800b95c <__match>
 800a172:	2800      	cmp	r0, #0
 800a174:	d100      	bne.n	800a178 <_strtod_l+0x33c>
 800a176:	e6b8      	b.n	8009eea <_strtod_l+0xae>
 800a178:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	2b28      	cmp	r3, #40	@ 0x28
 800a17e:	d12c      	bne.n	800a1da <_strtod_l+0x39e>
 800a180:	49a0      	ldr	r1, [pc, #640]	@ (800a404 <_strtod_l+0x5c8>)
 800a182:	aa20      	add	r2, sp, #128	@ 0x80
 800a184:	a81d      	add	r0, sp, #116	@ 0x74
 800a186:	f001 fbfd 	bl	800b984 <__hexnan>
 800a18a:	2805      	cmp	r0, #5
 800a18c:	d125      	bne.n	800a1da <_strtod_l+0x39e>
 800a18e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a190:	4a9d      	ldr	r2, [pc, #628]	@ (800a408 <_strtod_l+0x5cc>)
 800a192:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a194:	431a      	orrs	r2, r3
 800a196:	0017      	movs	r7, r2
 800a198:	e68b      	b.n	8009eb2 <_strtod_l+0x76>
 800a19a:	220a      	movs	r2, #10
 800a19c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800a19e:	434a      	muls	r2, r1
 800a1a0:	18d2      	adds	r2, r2, r3
 800a1a2:	3a30      	subs	r2, #48	@ 0x30
 800a1a4:	9210      	str	r2, [sp, #64]	@ 0x40
 800a1a6:	e7b5      	b.n	800a114 <_strtod_l+0x2d8>
 800a1a8:	2b6e      	cmp	r3, #110	@ 0x6e
 800a1aa:	d0de      	beq.n	800a16a <_strtod_l+0x32e>
 800a1ac:	e69d      	b.n	8009eea <_strtod_l+0xae>
 800a1ae:	4997      	ldr	r1, [pc, #604]	@ (800a40c <_strtod_l+0x5d0>)
 800a1b0:	a81d      	add	r0, sp, #116	@ 0x74
 800a1b2:	f001 fbd3 	bl	800b95c <__match>
 800a1b6:	2800      	cmp	r0, #0
 800a1b8:	d100      	bne.n	800a1bc <_strtod_l+0x380>
 800a1ba:	e696      	b.n	8009eea <_strtod_l+0xae>
 800a1bc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a1be:	4994      	ldr	r1, [pc, #592]	@ (800a410 <_strtod_l+0x5d4>)
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	a81d      	add	r0, sp, #116	@ 0x74
 800a1c4:	931d      	str	r3, [sp, #116]	@ 0x74
 800a1c6:	f001 fbc9 	bl	800b95c <__match>
 800a1ca:	2800      	cmp	r0, #0
 800a1cc:	d102      	bne.n	800a1d4 <_strtod_l+0x398>
 800a1ce:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	931d      	str	r3, [sp, #116]	@ 0x74
 800a1d4:	2600      	movs	r6, #0
 800a1d6:	4f8c      	ldr	r7, [pc, #560]	@ (800a408 <_strtod_l+0x5cc>)
 800a1d8:	e66b      	b.n	8009eb2 <_strtod_l+0x76>
 800a1da:	488e      	ldr	r0, [pc, #568]	@ (800a414 <_strtod_l+0x5d8>)
 800a1dc:	f001 f8ce 	bl	800b37c <nan>
 800a1e0:	0006      	movs	r6, r0
 800a1e2:	000f      	movs	r7, r1
 800a1e4:	e665      	b.n	8009eb2 <_strtod_l+0x76>
 800a1e6:	9b07      	ldr	r3, [sp, #28]
 800a1e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1ea:	1a9b      	subs	r3, r3, r2
 800a1ec:	930c      	str	r3, [sp, #48]	@ 0x30
 800a1ee:	9b08      	ldr	r3, [sp, #32]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d101      	bne.n	800a1f8 <_strtod_l+0x3bc>
 800a1f4:	9b06      	ldr	r3, [sp, #24]
 800a1f6:	9308      	str	r3, [sp, #32]
 800a1f8:	9c06      	ldr	r4, [sp, #24]
 800a1fa:	2c10      	cmp	r4, #16
 800a1fc:	dd00      	ble.n	800a200 <_strtod_l+0x3c4>
 800a1fe:	2410      	movs	r4, #16
 800a200:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800a202:	f7f9 f88b 	bl	800331c <__aeabi_ui2d>
 800a206:	9b06      	ldr	r3, [sp, #24]
 800a208:	0006      	movs	r6, r0
 800a20a:	000f      	movs	r7, r1
 800a20c:	2b09      	cmp	r3, #9
 800a20e:	dc13      	bgt.n	800a238 <_strtod_l+0x3fc>
 800a210:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a212:	2b00      	cmp	r3, #0
 800a214:	d100      	bne.n	800a218 <_strtod_l+0x3dc>
 800a216:	e64c      	b.n	8009eb2 <_strtod_l+0x76>
 800a218:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	dc00      	bgt.n	800a220 <_strtod_l+0x3e4>
 800a21e:	e07e      	b.n	800a31e <_strtod_l+0x4e2>
 800a220:	2b16      	cmp	r3, #22
 800a222:	dc63      	bgt.n	800a2ec <_strtod_l+0x4b0>
 800a224:	497c      	ldr	r1, [pc, #496]	@ (800a418 <_strtod_l+0x5dc>)
 800a226:	00db      	lsls	r3, r3, #3
 800a228:	18c9      	adds	r1, r1, r3
 800a22a:	0032      	movs	r2, r6
 800a22c:	6808      	ldr	r0, [r1, #0]
 800a22e:	6849      	ldr	r1, [r1, #4]
 800a230:	003b      	movs	r3, r7
 800a232:	f7f8 f983 	bl	800253c <__aeabi_dmul>
 800a236:	e7d3      	b.n	800a1e0 <_strtod_l+0x3a4>
 800a238:	0022      	movs	r2, r4
 800a23a:	4b77      	ldr	r3, [pc, #476]	@ (800a418 <_strtod_l+0x5dc>)
 800a23c:	3a09      	subs	r2, #9
 800a23e:	00d2      	lsls	r2, r2, #3
 800a240:	189b      	adds	r3, r3, r2
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	f7f8 f979 	bl	800253c <__aeabi_dmul>
 800a24a:	0006      	movs	r6, r0
 800a24c:	0028      	movs	r0, r5
 800a24e:	000f      	movs	r7, r1
 800a250:	f7f9 f864 	bl	800331c <__aeabi_ui2d>
 800a254:	000b      	movs	r3, r1
 800a256:	0002      	movs	r2, r0
 800a258:	0039      	movs	r1, r7
 800a25a:	0030      	movs	r0, r6
 800a25c:	f7f7 f9c6 	bl	80015ec <__aeabi_dadd>
 800a260:	9b06      	ldr	r3, [sp, #24]
 800a262:	0006      	movs	r6, r0
 800a264:	000f      	movs	r7, r1
 800a266:	2b0f      	cmp	r3, #15
 800a268:	ddd2      	ble.n	800a210 <_strtod_l+0x3d4>
 800a26a:	9b06      	ldr	r3, [sp, #24]
 800a26c:	1b1c      	subs	r4, r3, r4
 800a26e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a270:	18e4      	adds	r4, r4, r3
 800a272:	2c00      	cmp	r4, #0
 800a274:	dc00      	bgt.n	800a278 <_strtod_l+0x43c>
 800a276:	e09b      	b.n	800a3b0 <_strtod_l+0x574>
 800a278:	220f      	movs	r2, #15
 800a27a:	0023      	movs	r3, r4
 800a27c:	4013      	ands	r3, r2
 800a27e:	4214      	tst	r4, r2
 800a280:	d00a      	beq.n	800a298 <_strtod_l+0x45c>
 800a282:	4965      	ldr	r1, [pc, #404]	@ (800a418 <_strtod_l+0x5dc>)
 800a284:	00db      	lsls	r3, r3, #3
 800a286:	18c9      	adds	r1, r1, r3
 800a288:	0032      	movs	r2, r6
 800a28a:	6808      	ldr	r0, [r1, #0]
 800a28c:	6849      	ldr	r1, [r1, #4]
 800a28e:	003b      	movs	r3, r7
 800a290:	f7f8 f954 	bl	800253c <__aeabi_dmul>
 800a294:	0006      	movs	r6, r0
 800a296:	000f      	movs	r7, r1
 800a298:	230f      	movs	r3, #15
 800a29a:	439c      	bics	r4, r3
 800a29c:	d073      	beq.n	800a386 <_strtod_l+0x54a>
 800a29e:	3326      	adds	r3, #38	@ 0x26
 800a2a0:	33ff      	adds	r3, #255	@ 0xff
 800a2a2:	429c      	cmp	r4, r3
 800a2a4:	dd4b      	ble.n	800a33e <_strtod_l+0x502>
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	9306      	str	r3, [sp, #24]
 800a2aa:	9307      	str	r3, [sp, #28]
 800a2ac:	930d      	str	r3, [sp, #52]	@ 0x34
 800a2ae:	9308      	str	r3, [sp, #32]
 800a2b0:	2322      	movs	r3, #34	@ 0x22
 800a2b2:	2600      	movs	r6, #0
 800a2b4:	9a05      	ldr	r2, [sp, #20]
 800a2b6:	4f54      	ldr	r7, [pc, #336]	@ (800a408 <_strtod_l+0x5cc>)
 800a2b8:	6013      	str	r3, [r2, #0]
 800a2ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a2bc:	42b3      	cmp	r3, r6
 800a2be:	d100      	bne.n	800a2c2 <_strtod_l+0x486>
 800a2c0:	e5f7      	b.n	8009eb2 <_strtod_l+0x76>
 800a2c2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800a2c4:	9805      	ldr	r0, [sp, #20]
 800a2c6:	f7ff f91b 	bl	8009500 <_Bfree>
 800a2ca:	9908      	ldr	r1, [sp, #32]
 800a2cc:	9805      	ldr	r0, [sp, #20]
 800a2ce:	f7ff f917 	bl	8009500 <_Bfree>
 800a2d2:	9907      	ldr	r1, [sp, #28]
 800a2d4:	9805      	ldr	r0, [sp, #20]
 800a2d6:	f7ff f913 	bl	8009500 <_Bfree>
 800a2da:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a2dc:	9805      	ldr	r0, [sp, #20]
 800a2de:	f7ff f90f 	bl	8009500 <_Bfree>
 800a2e2:	9906      	ldr	r1, [sp, #24]
 800a2e4:	9805      	ldr	r0, [sp, #20]
 800a2e6:	f7ff f90b 	bl	8009500 <_Bfree>
 800a2ea:	e5e2      	b.n	8009eb2 <_strtod_l+0x76>
 800a2ec:	2325      	movs	r3, #37	@ 0x25
 800a2ee:	9a06      	ldr	r2, [sp, #24]
 800a2f0:	1a9b      	subs	r3, r3, r2
 800a2f2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	dbb8      	blt.n	800a26a <_strtod_l+0x42e>
 800a2f8:	240f      	movs	r4, #15
 800a2fa:	9b06      	ldr	r3, [sp, #24]
 800a2fc:	4d46      	ldr	r5, [pc, #280]	@ (800a418 <_strtod_l+0x5dc>)
 800a2fe:	1ae4      	subs	r4, r4, r3
 800a300:	00e1      	lsls	r1, r4, #3
 800a302:	1869      	adds	r1, r5, r1
 800a304:	0032      	movs	r2, r6
 800a306:	6808      	ldr	r0, [r1, #0]
 800a308:	6849      	ldr	r1, [r1, #4]
 800a30a:	003b      	movs	r3, r7
 800a30c:	f7f8 f916 	bl	800253c <__aeabi_dmul>
 800a310:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a312:	1b1c      	subs	r4, r3, r4
 800a314:	00e4      	lsls	r4, r4, #3
 800a316:	192d      	adds	r5, r5, r4
 800a318:	682a      	ldr	r2, [r5, #0]
 800a31a:	686b      	ldr	r3, [r5, #4]
 800a31c:	e789      	b.n	800a232 <_strtod_l+0x3f6>
 800a31e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a320:	3316      	adds	r3, #22
 800a322:	dba2      	blt.n	800a26a <_strtod_l+0x42e>
 800a324:	9907      	ldr	r1, [sp, #28]
 800a326:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a328:	4b3b      	ldr	r3, [pc, #236]	@ (800a418 <_strtod_l+0x5dc>)
 800a32a:	1a52      	subs	r2, r2, r1
 800a32c:	00d2      	lsls	r2, r2, #3
 800a32e:	189b      	adds	r3, r3, r2
 800a330:	0030      	movs	r0, r6
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	0039      	movs	r1, r7
 800a338:	f7f7 fcbc 	bl	8001cb4 <__aeabi_ddiv>
 800a33c:	e750      	b.n	800a1e0 <_strtod_l+0x3a4>
 800a33e:	2300      	movs	r3, #0
 800a340:	0030      	movs	r0, r6
 800a342:	0039      	movs	r1, r7
 800a344:	4d35      	ldr	r5, [pc, #212]	@ (800a41c <_strtod_l+0x5e0>)
 800a346:	1124      	asrs	r4, r4, #4
 800a348:	9309      	str	r3, [sp, #36]	@ 0x24
 800a34a:	2c01      	cmp	r4, #1
 800a34c:	dc1e      	bgt.n	800a38c <_strtod_l+0x550>
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d001      	beq.n	800a356 <_strtod_l+0x51a>
 800a352:	0006      	movs	r6, r0
 800a354:	000f      	movs	r7, r1
 800a356:	4b32      	ldr	r3, [pc, #200]	@ (800a420 <_strtod_l+0x5e4>)
 800a358:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a35a:	18ff      	adds	r7, r7, r3
 800a35c:	4b2f      	ldr	r3, [pc, #188]	@ (800a41c <_strtod_l+0x5e0>)
 800a35e:	00d5      	lsls	r5, r2, #3
 800a360:	195d      	adds	r5, r3, r5
 800a362:	0032      	movs	r2, r6
 800a364:	6828      	ldr	r0, [r5, #0]
 800a366:	6869      	ldr	r1, [r5, #4]
 800a368:	003b      	movs	r3, r7
 800a36a:	f7f8 f8e7 	bl	800253c <__aeabi_dmul>
 800a36e:	4b26      	ldr	r3, [pc, #152]	@ (800a408 <_strtod_l+0x5cc>)
 800a370:	4a2c      	ldr	r2, [pc, #176]	@ (800a424 <_strtod_l+0x5e8>)
 800a372:	0006      	movs	r6, r0
 800a374:	400b      	ands	r3, r1
 800a376:	4293      	cmp	r3, r2
 800a378:	d895      	bhi.n	800a2a6 <_strtod_l+0x46a>
 800a37a:	4a2b      	ldr	r2, [pc, #172]	@ (800a428 <_strtod_l+0x5ec>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d913      	bls.n	800a3a8 <_strtod_l+0x56c>
 800a380:	2601      	movs	r6, #1
 800a382:	4f2a      	ldr	r7, [pc, #168]	@ (800a42c <_strtod_l+0x5f0>)
 800a384:	4276      	negs	r6, r6
 800a386:	2300      	movs	r3, #0
 800a388:	9309      	str	r3, [sp, #36]	@ 0x24
 800a38a:	e086      	b.n	800a49a <_strtod_l+0x65e>
 800a38c:	2201      	movs	r2, #1
 800a38e:	4214      	tst	r4, r2
 800a390:	d004      	beq.n	800a39c <_strtod_l+0x560>
 800a392:	682a      	ldr	r2, [r5, #0]
 800a394:	686b      	ldr	r3, [r5, #4]
 800a396:	f7f8 f8d1 	bl	800253c <__aeabi_dmul>
 800a39a:	2301      	movs	r3, #1
 800a39c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a39e:	1064      	asrs	r4, r4, #1
 800a3a0:	3201      	adds	r2, #1
 800a3a2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a3a4:	3508      	adds	r5, #8
 800a3a6:	e7d0      	b.n	800a34a <_strtod_l+0x50e>
 800a3a8:	23d4      	movs	r3, #212	@ 0xd4
 800a3aa:	049b      	lsls	r3, r3, #18
 800a3ac:	18cf      	adds	r7, r1, r3
 800a3ae:	e7ea      	b.n	800a386 <_strtod_l+0x54a>
 800a3b0:	2c00      	cmp	r4, #0
 800a3b2:	d0e8      	beq.n	800a386 <_strtod_l+0x54a>
 800a3b4:	4264      	negs	r4, r4
 800a3b6:	230f      	movs	r3, #15
 800a3b8:	0022      	movs	r2, r4
 800a3ba:	401a      	ands	r2, r3
 800a3bc:	421c      	tst	r4, r3
 800a3be:	d00a      	beq.n	800a3d6 <_strtod_l+0x59a>
 800a3c0:	4b15      	ldr	r3, [pc, #84]	@ (800a418 <_strtod_l+0x5dc>)
 800a3c2:	00d2      	lsls	r2, r2, #3
 800a3c4:	189b      	adds	r3, r3, r2
 800a3c6:	0030      	movs	r0, r6
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	0039      	movs	r1, r7
 800a3ce:	f7f7 fc71 	bl	8001cb4 <__aeabi_ddiv>
 800a3d2:	0006      	movs	r6, r0
 800a3d4:	000f      	movs	r7, r1
 800a3d6:	1124      	asrs	r4, r4, #4
 800a3d8:	d0d5      	beq.n	800a386 <_strtod_l+0x54a>
 800a3da:	2c1f      	cmp	r4, #31
 800a3dc:	dd28      	ble.n	800a430 <_strtod_l+0x5f4>
 800a3de:	2300      	movs	r3, #0
 800a3e0:	9306      	str	r3, [sp, #24]
 800a3e2:	9307      	str	r3, [sp, #28]
 800a3e4:	930d      	str	r3, [sp, #52]	@ 0x34
 800a3e6:	9308      	str	r3, [sp, #32]
 800a3e8:	2322      	movs	r3, #34	@ 0x22
 800a3ea:	9a05      	ldr	r2, [sp, #20]
 800a3ec:	2600      	movs	r6, #0
 800a3ee:	6013      	str	r3, [r2, #0]
 800a3f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a3f2:	2700      	movs	r7, #0
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d000      	beq.n	800a3fa <_strtod_l+0x5be>
 800a3f8:	e763      	b.n	800a2c2 <_strtod_l+0x486>
 800a3fa:	e55a      	b.n	8009eb2 <_strtod_l+0x76>
 800a3fc:	00004e1f 	.word	0x00004e1f
 800a400:	0800c3c5 	.word	0x0800c3c5
 800a404:	0800c5dc 	.word	0x0800c5dc
 800a408:	7ff00000 	.word	0x7ff00000
 800a40c:	0800c3bd 	.word	0x0800c3bd
 800a410:	0800c3f4 	.word	0x0800c3f4
 800a414:	0800c785 	.word	0x0800c785
 800a418:	0800c510 	.word	0x0800c510
 800a41c:	0800c4e8 	.word	0x0800c4e8
 800a420:	fcb00000 	.word	0xfcb00000
 800a424:	7ca00000 	.word	0x7ca00000
 800a428:	7c900000 	.word	0x7c900000
 800a42c:	7fefffff 	.word	0x7fefffff
 800a430:	2310      	movs	r3, #16
 800a432:	0022      	movs	r2, r4
 800a434:	401a      	ands	r2, r3
 800a436:	9209      	str	r2, [sp, #36]	@ 0x24
 800a438:	421c      	tst	r4, r3
 800a43a:	d001      	beq.n	800a440 <_strtod_l+0x604>
 800a43c:	335a      	adds	r3, #90	@ 0x5a
 800a43e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a440:	0030      	movs	r0, r6
 800a442:	0039      	movs	r1, r7
 800a444:	2300      	movs	r3, #0
 800a446:	4dbf      	ldr	r5, [pc, #764]	@ (800a744 <_strtod_l+0x908>)
 800a448:	2201      	movs	r2, #1
 800a44a:	4214      	tst	r4, r2
 800a44c:	d004      	beq.n	800a458 <_strtod_l+0x61c>
 800a44e:	682a      	ldr	r2, [r5, #0]
 800a450:	686b      	ldr	r3, [r5, #4]
 800a452:	f7f8 f873 	bl	800253c <__aeabi_dmul>
 800a456:	2301      	movs	r3, #1
 800a458:	1064      	asrs	r4, r4, #1
 800a45a:	3508      	adds	r5, #8
 800a45c:	2c00      	cmp	r4, #0
 800a45e:	d1f3      	bne.n	800a448 <_strtod_l+0x60c>
 800a460:	2b00      	cmp	r3, #0
 800a462:	d001      	beq.n	800a468 <_strtod_l+0x62c>
 800a464:	0006      	movs	r6, r0
 800a466:	000f      	movs	r7, r1
 800a468:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d00d      	beq.n	800a48a <_strtod_l+0x64e>
 800a46e:	236b      	movs	r3, #107	@ 0x6b
 800a470:	007a      	lsls	r2, r7, #1
 800a472:	0d52      	lsrs	r2, r2, #21
 800a474:	0039      	movs	r1, r7
 800a476:	1a9b      	subs	r3, r3, r2
 800a478:	2b00      	cmp	r3, #0
 800a47a:	dd06      	ble.n	800a48a <_strtod_l+0x64e>
 800a47c:	2b1f      	cmp	r3, #31
 800a47e:	dd5a      	ble.n	800a536 <_strtod_l+0x6fa>
 800a480:	2600      	movs	r6, #0
 800a482:	2b34      	cmp	r3, #52	@ 0x34
 800a484:	dd50      	ble.n	800a528 <_strtod_l+0x6ec>
 800a486:	27dc      	movs	r7, #220	@ 0xdc
 800a488:	04bf      	lsls	r7, r7, #18
 800a48a:	2200      	movs	r2, #0
 800a48c:	2300      	movs	r3, #0
 800a48e:	0030      	movs	r0, r6
 800a490:	0039      	movs	r1, r7
 800a492:	f7f5 ffdb 	bl	800044c <__aeabi_dcmpeq>
 800a496:	2800      	cmp	r0, #0
 800a498:	d1a1      	bne.n	800a3de <_strtod_l+0x5a2>
 800a49a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a49c:	9a08      	ldr	r2, [sp, #32]
 800a49e:	9300      	str	r3, [sp, #0]
 800a4a0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a4a2:	9b06      	ldr	r3, [sp, #24]
 800a4a4:	9805      	ldr	r0, [sp, #20]
 800a4a6:	f7ff f893 	bl	80095d0 <__s2b>
 800a4aa:	900d      	str	r0, [sp, #52]	@ 0x34
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	d100      	bne.n	800a4b2 <_strtod_l+0x676>
 800a4b0:	e6f9      	b.n	800a2a6 <_strtod_l+0x46a>
 800a4b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a4b4:	9907      	ldr	r1, [sp, #28]
 800a4b6:	17da      	asrs	r2, r3, #31
 800a4b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4ba:	1a5b      	subs	r3, r3, r1
 800a4bc:	401a      	ands	r2, r3
 800a4be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a4c0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a4c2:	43db      	mvns	r3, r3
 800a4c4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a4c6:	17db      	asrs	r3, r3, #31
 800a4c8:	401a      	ands	r2, r3
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	921a      	str	r2, [sp, #104]	@ 0x68
 800a4ce:	9306      	str	r3, [sp, #24]
 800a4d0:	9307      	str	r3, [sp, #28]
 800a4d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a4d4:	9805      	ldr	r0, [sp, #20]
 800a4d6:	6859      	ldr	r1, [r3, #4]
 800a4d8:	f7fe ffce 	bl	8009478 <_Balloc>
 800a4dc:	9008      	str	r0, [sp, #32]
 800a4de:	2800      	cmp	r0, #0
 800a4e0:	d100      	bne.n	800a4e4 <_strtod_l+0x6a8>
 800a4e2:	e6e5      	b.n	800a2b0 <_strtod_l+0x474>
 800a4e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a4e6:	300c      	adds	r0, #12
 800a4e8:	0019      	movs	r1, r3
 800a4ea:	691a      	ldr	r2, [r3, #16]
 800a4ec:	310c      	adds	r1, #12
 800a4ee:	3202      	adds	r2, #2
 800a4f0:	0092      	lsls	r2, r2, #2
 800a4f2:	f7fe f8e7 	bl	80086c4 <memcpy>
 800a4f6:	ab20      	add	r3, sp, #128	@ 0x80
 800a4f8:	9301      	str	r3, [sp, #4]
 800a4fa:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a4fc:	9300      	str	r3, [sp, #0]
 800a4fe:	0032      	movs	r2, r6
 800a500:	003b      	movs	r3, r7
 800a502:	9805      	ldr	r0, [sp, #20]
 800a504:	9610      	str	r6, [sp, #64]	@ 0x40
 800a506:	9711      	str	r7, [sp, #68]	@ 0x44
 800a508:	f7ff fbb2 	bl	8009c70 <__d2b>
 800a50c:	901e      	str	r0, [sp, #120]	@ 0x78
 800a50e:	2800      	cmp	r0, #0
 800a510:	d100      	bne.n	800a514 <_strtod_l+0x6d8>
 800a512:	e6cd      	b.n	800a2b0 <_strtod_l+0x474>
 800a514:	2101      	movs	r1, #1
 800a516:	9805      	ldr	r0, [sp, #20]
 800a518:	f7ff f8f6 	bl	8009708 <__i2b>
 800a51c:	9007      	str	r0, [sp, #28]
 800a51e:	2800      	cmp	r0, #0
 800a520:	d10e      	bne.n	800a540 <_strtod_l+0x704>
 800a522:	2300      	movs	r3, #0
 800a524:	9307      	str	r3, [sp, #28]
 800a526:	e6c3      	b.n	800a2b0 <_strtod_l+0x474>
 800a528:	234b      	movs	r3, #75	@ 0x4b
 800a52a:	1a9a      	subs	r2, r3, r2
 800a52c:	3b4c      	subs	r3, #76	@ 0x4c
 800a52e:	4093      	lsls	r3, r2
 800a530:	4019      	ands	r1, r3
 800a532:	000f      	movs	r7, r1
 800a534:	e7a9      	b.n	800a48a <_strtod_l+0x64e>
 800a536:	2201      	movs	r2, #1
 800a538:	4252      	negs	r2, r2
 800a53a:	409a      	lsls	r2, r3
 800a53c:	4016      	ands	r6, r2
 800a53e:	e7a4      	b.n	800a48a <_strtod_l+0x64e>
 800a540:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800a542:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a544:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800a546:	1ad4      	subs	r4, r2, r3
 800a548:	2b00      	cmp	r3, #0
 800a54a:	db01      	blt.n	800a550 <_strtod_l+0x714>
 800a54c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800a54e:	195d      	adds	r5, r3, r5
 800a550:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a552:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a554:	1a5b      	subs	r3, r3, r1
 800a556:	2136      	movs	r1, #54	@ 0x36
 800a558:	189b      	adds	r3, r3, r2
 800a55a:	1a8a      	subs	r2, r1, r2
 800a55c:	497a      	ldr	r1, [pc, #488]	@ (800a748 <_strtod_l+0x90c>)
 800a55e:	2001      	movs	r0, #1
 800a560:	468c      	mov	ip, r1
 800a562:	2100      	movs	r1, #0
 800a564:	3b01      	subs	r3, #1
 800a566:	9116      	str	r1, [sp, #88]	@ 0x58
 800a568:	9014      	str	r0, [sp, #80]	@ 0x50
 800a56a:	4563      	cmp	r3, ip
 800a56c:	da06      	bge.n	800a57c <_strtod_l+0x740>
 800a56e:	4661      	mov	r1, ip
 800a570:	1ac9      	subs	r1, r1, r3
 800a572:	1a52      	subs	r2, r2, r1
 800a574:	291f      	cmp	r1, #31
 800a576:	dc3f      	bgt.n	800a5f8 <_strtod_l+0x7bc>
 800a578:	4088      	lsls	r0, r1
 800a57a:	9014      	str	r0, [sp, #80]	@ 0x50
 800a57c:	18ab      	adds	r3, r5, r2
 800a57e:	930e      	str	r3, [sp, #56]	@ 0x38
 800a580:	18a4      	adds	r4, r4, r2
 800a582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a584:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a586:	191c      	adds	r4, r3, r4
 800a588:	002b      	movs	r3, r5
 800a58a:	4295      	cmp	r5, r2
 800a58c:	dd00      	ble.n	800a590 <_strtod_l+0x754>
 800a58e:	0013      	movs	r3, r2
 800a590:	42a3      	cmp	r3, r4
 800a592:	dd00      	ble.n	800a596 <_strtod_l+0x75a>
 800a594:	0023      	movs	r3, r4
 800a596:	2b00      	cmp	r3, #0
 800a598:	dd04      	ble.n	800a5a4 <_strtod_l+0x768>
 800a59a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a59c:	1ae4      	subs	r4, r4, r3
 800a59e:	1ad2      	subs	r2, r2, r3
 800a5a0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a5a2:	1aed      	subs	r5, r5, r3
 800a5a4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	dd16      	ble.n	800a5d8 <_strtod_l+0x79c>
 800a5aa:	001a      	movs	r2, r3
 800a5ac:	9907      	ldr	r1, [sp, #28]
 800a5ae:	9805      	ldr	r0, [sp, #20]
 800a5b0:	f7ff f974 	bl	800989c <__pow5mult>
 800a5b4:	9007      	str	r0, [sp, #28]
 800a5b6:	2800      	cmp	r0, #0
 800a5b8:	d0b3      	beq.n	800a522 <_strtod_l+0x6e6>
 800a5ba:	0001      	movs	r1, r0
 800a5bc:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800a5be:	9805      	ldr	r0, [sp, #20]
 800a5c0:	f7ff f8ba 	bl	8009738 <__multiply>
 800a5c4:	9013      	str	r0, [sp, #76]	@ 0x4c
 800a5c6:	2800      	cmp	r0, #0
 800a5c8:	d100      	bne.n	800a5cc <_strtod_l+0x790>
 800a5ca:	e671      	b.n	800a2b0 <_strtod_l+0x474>
 800a5cc:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800a5ce:	9805      	ldr	r0, [sp, #20]
 800a5d0:	f7fe ff96 	bl	8009500 <_Bfree>
 800a5d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a5d6:	931e      	str	r3, [sp, #120]	@ 0x78
 800a5d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	dc12      	bgt.n	800a604 <_strtod_l+0x7c8>
 800a5de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	dd18      	ble.n	800a616 <_strtod_l+0x7da>
 800a5e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a5e6:	9908      	ldr	r1, [sp, #32]
 800a5e8:	9805      	ldr	r0, [sp, #20]
 800a5ea:	f7ff f957 	bl	800989c <__pow5mult>
 800a5ee:	9008      	str	r0, [sp, #32]
 800a5f0:	2800      	cmp	r0, #0
 800a5f2:	d110      	bne.n	800a616 <_strtod_l+0x7da>
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	e65a      	b.n	800a2ae <_strtod_l+0x472>
 800a5f8:	4954      	ldr	r1, [pc, #336]	@ (800a74c <_strtod_l+0x910>)
 800a5fa:	1acb      	subs	r3, r1, r3
 800a5fc:	0001      	movs	r1, r0
 800a5fe:	4099      	lsls	r1, r3
 800a600:	9116      	str	r1, [sp, #88]	@ 0x58
 800a602:	e7ba      	b.n	800a57a <_strtod_l+0x73e>
 800a604:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a606:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800a608:	9805      	ldr	r0, [sp, #20]
 800a60a:	f7ff f9a3 	bl	8009954 <__lshift>
 800a60e:	901e      	str	r0, [sp, #120]	@ 0x78
 800a610:	2800      	cmp	r0, #0
 800a612:	d1e4      	bne.n	800a5de <_strtod_l+0x7a2>
 800a614:	e64c      	b.n	800a2b0 <_strtod_l+0x474>
 800a616:	2c00      	cmp	r4, #0
 800a618:	dd07      	ble.n	800a62a <_strtod_l+0x7ee>
 800a61a:	0022      	movs	r2, r4
 800a61c:	9908      	ldr	r1, [sp, #32]
 800a61e:	9805      	ldr	r0, [sp, #20]
 800a620:	f7ff f998 	bl	8009954 <__lshift>
 800a624:	9008      	str	r0, [sp, #32]
 800a626:	2800      	cmp	r0, #0
 800a628:	d0e4      	beq.n	800a5f4 <_strtod_l+0x7b8>
 800a62a:	2d00      	cmp	r5, #0
 800a62c:	dd08      	ble.n	800a640 <_strtod_l+0x804>
 800a62e:	002a      	movs	r2, r5
 800a630:	9907      	ldr	r1, [sp, #28]
 800a632:	9805      	ldr	r0, [sp, #20]
 800a634:	f7ff f98e 	bl	8009954 <__lshift>
 800a638:	9007      	str	r0, [sp, #28]
 800a63a:	2800      	cmp	r0, #0
 800a63c:	d100      	bne.n	800a640 <_strtod_l+0x804>
 800a63e:	e637      	b.n	800a2b0 <_strtod_l+0x474>
 800a640:	9a08      	ldr	r2, [sp, #32]
 800a642:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800a644:	9805      	ldr	r0, [sp, #20]
 800a646:	f7ff fa0d 	bl	8009a64 <__mdiff>
 800a64a:	9006      	str	r0, [sp, #24]
 800a64c:	2800      	cmp	r0, #0
 800a64e:	d100      	bne.n	800a652 <_strtod_l+0x816>
 800a650:	e62e      	b.n	800a2b0 <_strtod_l+0x474>
 800a652:	68c3      	ldr	r3, [r0, #12]
 800a654:	9907      	ldr	r1, [sp, #28]
 800a656:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a658:	2300      	movs	r3, #0
 800a65a:	60c3      	str	r3, [r0, #12]
 800a65c:	f7ff f9e6 	bl	8009a2c <__mcmp>
 800a660:	2800      	cmp	r0, #0
 800a662:	da3b      	bge.n	800a6dc <_strtod_l+0x8a0>
 800a664:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a666:	4333      	orrs	r3, r6
 800a668:	d167      	bne.n	800a73a <_strtod_l+0x8fe>
 800a66a:	033b      	lsls	r3, r7, #12
 800a66c:	d165      	bne.n	800a73a <_strtod_l+0x8fe>
 800a66e:	22d6      	movs	r2, #214	@ 0xd6
 800a670:	4b37      	ldr	r3, [pc, #220]	@ (800a750 <_strtod_l+0x914>)
 800a672:	04d2      	lsls	r2, r2, #19
 800a674:	403b      	ands	r3, r7
 800a676:	4293      	cmp	r3, r2
 800a678:	d95f      	bls.n	800a73a <_strtod_l+0x8fe>
 800a67a:	9b06      	ldr	r3, [sp, #24]
 800a67c:	695b      	ldr	r3, [r3, #20]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d103      	bne.n	800a68a <_strtod_l+0x84e>
 800a682:	9b06      	ldr	r3, [sp, #24]
 800a684:	691b      	ldr	r3, [r3, #16]
 800a686:	2b01      	cmp	r3, #1
 800a688:	dd57      	ble.n	800a73a <_strtod_l+0x8fe>
 800a68a:	9906      	ldr	r1, [sp, #24]
 800a68c:	2201      	movs	r2, #1
 800a68e:	9805      	ldr	r0, [sp, #20]
 800a690:	f7ff f960 	bl	8009954 <__lshift>
 800a694:	9907      	ldr	r1, [sp, #28]
 800a696:	9006      	str	r0, [sp, #24]
 800a698:	f7ff f9c8 	bl	8009a2c <__mcmp>
 800a69c:	2800      	cmp	r0, #0
 800a69e:	dd4c      	ble.n	800a73a <_strtod_l+0x8fe>
 800a6a0:	4b2b      	ldr	r3, [pc, #172]	@ (800a750 <_strtod_l+0x914>)
 800a6a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a6a4:	403b      	ands	r3, r7
 800a6a6:	2a00      	cmp	r2, #0
 800a6a8:	d074      	beq.n	800a794 <_strtod_l+0x958>
 800a6aa:	22d6      	movs	r2, #214	@ 0xd6
 800a6ac:	04d2      	lsls	r2, r2, #19
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d870      	bhi.n	800a794 <_strtod_l+0x958>
 800a6b2:	22dc      	movs	r2, #220	@ 0xdc
 800a6b4:	0492      	lsls	r2, r2, #18
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d800      	bhi.n	800a6bc <_strtod_l+0x880>
 800a6ba:	e695      	b.n	800a3e8 <_strtod_l+0x5ac>
 800a6bc:	0030      	movs	r0, r6
 800a6be:	0039      	movs	r1, r7
 800a6c0:	4b24      	ldr	r3, [pc, #144]	@ (800a754 <_strtod_l+0x918>)
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f7f7 ff3a 	bl	800253c <__aeabi_dmul>
 800a6c8:	4b21      	ldr	r3, [pc, #132]	@ (800a750 <_strtod_l+0x914>)
 800a6ca:	0006      	movs	r6, r0
 800a6cc:	000f      	movs	r7, r1
 800a6ce:	420b      	tst	r3, r1
 800a6d0:	d000      	beq.n	800a6d4 <_strtod_l+0x898>
 800a6d2:	e5f6      	b.n	800a2c2 <_strtod_l+0x486>
 800a6d4:	2322      	movs	r3, #34	@ 0x22
 800a6d6:	9a05      	ldr	r2, [sp, #20]
 800a6d8:	6013      	str	r3, [r2, #0]
 800a6da:	e5f2      	b.n	800a2c2 <_strtod_l+0x486>
 800a6dc:	970e      	str	r7, [sp, #56]	@ 0x38
 800a6de:	2800      	cmp	r0, #0
 800a6e0:	d175      	bne.n	800a7ce <_strtod_l+0x992>
 800a6e2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a6e4:	033b      	lsls	r3, r7, #12
 800a6e6:	0b1b      	lsrs	r3, r3, #12
 800a6e8:	2a00      	cmp	r2, #0
 800a6ea:	d039      	beq.n	800a760 <_strtod_l+0x924>
 800a6ec:	4a1a      	ldr	r2, [pc, #104]	@ (800a758 <_strtod_l+0x91c>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d138      	bne.n	800a764 <_strtod_l+0x928>
 800a6f2:	2101      	movs	r1, #1
 800a6f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6f6:	4249      	negs	r1, r1
 800a6f8:	0032      	movs	r2, r6
 800a6fa:	0008      	movs	r0, r1
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d00b      	beq.n	800a718 <_strtod_l+0x8dc>
 800a700:	24d4      	movs	r4, #212	@ 0xd4
 800a702:	4b13      	ldr	r3, [pc, #76]	@ (800a750 <_strtod_l+0x914>)
 800a704:	0008      	movs	r0, r1
 800a706:	403b      	ands	r3, r7
 800a708:	04e4      	lsls	r4, r4, #19
 800a70a:	42a3      	cmp	r3, r4
 800a70c:	d804      	bhi.n	800a718 <_strtod_l+0x8dc>
 800a70e:	306c      	adds	r0, #108	@ 0x6c
 800a710:	0d1b      	lsrs	r3, r3, #20
 800a712:	1ac3      	subs	r3, r0, r3
 800a714:	4099      	lsls	r1, r3
 800a716:	0008      	movs	r0, r1
 800a718:	4282      	cmp	r2, r0
 800a71a:	d123      	bne.n	800a764 <_strtod_l+0x928>
 800a71c:	4b0f      	ldr	r3, [pc, #60]	@ (800a75c <_strtod_l+0x920>)
 800a71e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a720:	4299      	cmp	r1, r3
 800a722:	d102      	bne.n	800a72a <_strtod_l+0x8ee>
 800a724:	3201      	adds	r2, #1
 800a726:	d100      	bne.n	800a72a <_strtod_l+0x8ee>
 800a728:	e5c2      	b.n	800a2b0 <_strtod_l+0x474>
 800a72a:	4b09      	ldr	r3, [pc, #36]	@ (800a750 <_strtod_l+0x914>)
 800a72c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a72e:	2600      	movs	r6, #0
 800a730:	401a      	ands	r2, r3
 800a732:	0013      	movs	r3, r2
 800a734:	2280      	movs	r2, #128	@ 0x80
 800a736:	0352      	lsls	r2, r2, #13
 800a738:	189f      	adds	r7, r3, r2
 800a73a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d1bd      	bne.n	800a6bc <_strtod_l+0x880>
 800a740:	e5bf      	b.n	800a2c2 <_strtod_l+0x486>
 800a742:	46c0      	nop			@ (mov r8, r8)
 800a744:	0800c608 	.word	0x0800c608
 800a748:	fffffc02 	.word	0xfffffc02
 800a74c:	fffffbe2 	.word	0xfffffbe2
 800a750:	7ff00000 	.word	0x7ff00000
 800a754:	39500000 	.word	0x39500000
 800a758:	000fffff 	.word	0x000fffff
 800a75c:	7fefffff 	.word	0x7fefffff
 800a760:	4333      	orrs	r3, r6
 800a762:	d09d      	beq.n	800a6a0 <_strtod_l+0x864>
 800a764:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a766:	2b00      	cmp	r3, #0
 800a768:	d01c      	beq.n	800a7a4 <_strtod_l+0x968>
 800a76a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a76c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a76e:	4213      	tst	r3, r2
 800a770:	d0e3      	beq.n	800a73a <_strtod_l+0x8fe>
 800a772:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a774:	0030      	movs	r0, r6
 800a776:	0039      	movs	r1, r7
 800a778:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d016      	beq.n	800a7ac <_strtod_l+0x970>
 800a77e:	f7ff fb45 	bl	8009e0c <sulp>
 800a782:	0002      	movs	r2, r0
 800a784:	000b      	movs	r3, r1
 800a786:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a788:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a78a:	f7f6 ff2f 	bl	80015ec <__aeabi_dadd>
 800a78e:	0006      	movs	r6, r0
 800a790:	000f      	movs	r7, r1
 800a792:	e7d2      	b.n	800a73a <_strtod_l+0x8fe>
 800a794:	2601      	movs	r6, #1
 800a796:	4a92      	ldr	r2, [pc, #584]	@ (800a9e0 <_strtod_l+0xba4>)
 800a798:	4276      	negs	r6, r6
 800a79a:	189b      	adds	r3, r3, r2
 800a79c:	4a91      	ldr	r2, [pc, #580]	@ (800a9e4 <_strtod_l+0xba8>)
 800a79e:	431a      	orrs	r2, r3
 800a7a0:	0017      	movs	r7, r2
 800a7a2:	e7ca      	b.n	800a73a <_strtod_l+0x8fe>
 800a7a4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a7a6:	4233      	tst	r3, r6
 800a7a8:	d0c7      	beq.n	800a73a <_strtod_l+0x8fe>
 800a7aa:	e7e2      	b.n	800a772 <_strtod_l+0x936>
 800a7ac:	f7ff fb2e 	bl	8009e0c <sulp>
 800a7b0:	0002      	movs	r2, r0
 800a7b2:	000b      	movs	r3, r1
 800a7b4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a7b6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a7b8:	f7f8 f988 	bl	8002acc <__aeabi_dsub>
 800a7bc:	2200      	movs	r2, #0
 800a7be:	2300      	movs	r3, #0
 800a7c0:	0006      	movs	r6, r0
 800a7c2:	000f      	movs	r7, r1
 800a7c4:	f7f5 fe42 	bl	800044c <__aeabi_dcmpeq>
 800a7c8:	2800      	cmp	r0, #0
 800a7ca:	d0b6      	beq.n	800a73a <_strtod_l+0x8fe>
 800a7cc:	e60c      	b.n	800a3e8 <_strtod_l+0x5ac>
 800a7ce:	9907      	ldr	r1, [sp, #28]
 800a7d0:	9806      	ldr	r0, [sp, #24]
 800a7d2:	f7ff faad 	bl	8009d30 <__ratio>
 800a7d6:	2380      	movs	r3, #128	@ 0x80
 800a7d8:	2200      	movs	r2, #0
 800a7da:	05db      	lsls	r3, r3, #23
 800a7dc:	0004      	movs	r4, r0
 800a7de:	000d      	movs	r5, r1
 800a7e0:	f7f5 fe44 	bl	800046c <__aeabi_dcmple>
 800a7e4:	2800      	cmp	r0, #0
 800a7e6:	d06c      	beq.n	800a8c2 <_strtod_l+0xa86>
 800a7e8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d177      	bne.n	800a8de <_strtod_l+0xaa2>
 800a7ee:	2e00      	cmp	r6, #0
 800a7f0:	d157      	bne.n	800a8a2 <_strtod_l+0xa66>
 800a7f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7f4:	031b      	lsls	r3, r3, #12
 800a7f6:	d15a      	bne.n	800a8ae <_strtod_l+0xa72>
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	0020      	movs	r0, r4
 800a7fc:	0029      	movs	r1, r5
 800a7fe:	4b7a      	ldr	r3, [pc, #488]	@ (800a9e8 <_strtod_l+0xbac>)
 800a800:	f7f5 fe2a 	bl	8000458 <__aeabi_dcmplt>
 800a804:	2800      	cmp	r0, #0
 800a806:	d159      	bne.n	800a8bc <_strtod_l+0xa80>
 800a808:	0020      	movs	r0, r4
 800a80a:	0029      	movs	r1, r5
 800a80c:	2200      	movs	r2, #0
 800a80e:	4b77      	ldr	r3, [pc, #476]	@ (800a9ec <_strtod_l+0xbb0>)
 800a810:	f7f7 fe94 	bl	800253c <__aeabi_dmul>
 800a814:	0004      	movs	r4, r0
 800a816:	000d      	movs	r5, r1
 800a818:	2380      	movs	r3, #128	@ 0x80
 800a81a:	061b      	lsls	r3, r3, #24
 800a81c:	18eb      	adds	r3, r5, r3
 800a81e:	940a      	str	r4, [sp, #40]	@ 0x28
 800a820:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a822:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a824:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a826:	9214      	str	r2, [sp, #80]	@ 0x50
 800a828:	9315      	str	r3, [sp, #84]	@ 0x54
 800a82a:	4a71      	ldr	r2, [pc, #452]	@ (800a9f0 <_strtod_l+0xbb4>)
 800a82c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a82e:	4013      	ands	r3, r2
 800a830:	9316      	str	r3, [sp, #88]	@ 0x58
 800a832:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a834:	4b6f      	ldr	r3, [pc, #444]	@ (800a9f4 <_strtod_l+0xbb8>)
 800a836:	429a      	cmp	r2, r3
 800a838:	d000      	beq.n	800a83c <_strtod_l+0xa00>
 800a83a:	e087      	b.n	800a94c <_strtod_l+0xb10>
 800a83c:	4a6e      	ldr	r2, [pc, #440]	@ (800a9f8 <_strtod_l+0xbbc>)
 800a83e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a840:	4694      	mov	ip, r2
 800a842:	4463      	add	r3, ip
 800a844:	001f      	movs	r7, r3
 800a846:	0030      	movs	r0, r6
 800a848:	0019      	movs	r1, r3
 800a84a:	f7ff f9a5 	bl	8009b98 <__ulp>
 800a84e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a850:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a852:	f7f7 fe73 	bl	800253c <__aeabi_dmul>
 800a856:	0032      	movs	r2, r6
 800a858:	003b      	movs	r3, r7
 800a85a:	f7f6 fec7 	bl	80015ec <__aeabi_dadd>
 800a85e:	4a64      	ldr	r2, [pc, #400]	@ (800a9f0 <_strtod_l+0xbb4>)
 800a860:	4b66      	ldr	r3, [pc, #408]	@ (800a9fc <_strtod_l+0xbc0>)
 800a862:	0006      	movs	r6, r0
 800a864:	400a      	ands	r2, r1
 800a866:	429a      	cmp	r2, r3
 800a868:	d940      	bls.n	800a8ec <_strtod_l+0xab0>
 800a86a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a86c:	4a64      	ldr	r2, [pc, #400]	@ (800aa00 <_strtod_l+0xbc4>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d103      	bne.n	800a87a <_strtod_l+0xa3e>
 800a872:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a874:	3301      	adds	r3, #1
 800a876:	d100      	bne.n	800a87a <_strtod_l+0xa3e>
 800a878:	e51a      	b.n	800a2b0 <_strtod_l+0x474>
 800a87a:	2601      	movs	r6, #1
 800a87c:	4f60      	ldr	r7, [pc, #384]	@ (800aa00 <_strtod_l+0xbc4>)
 800a87e:	4276      	negs	r6, r6
 800a880:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800a882:	9805      	ldr	r0, [sp, #20]
 800a884:	f7fe fe3c 	bl	8009500 <_Bfree>
 800a888:	9908      	ldr	r1, [sp, #32]
 800a88a:	9805      	ldr	r0, [sp, #20]
 800a88c:	f7fe fe38 	bl	8009500 <_Bfree>
 800a890:	9907      	ldr	r1, [sp, #28]
 800a892:	9805      	ldr	r0, [sp, #20]
 800a894:	f7fe fe34 	bl	8009500 <_Bfree>
 800a898:	9906      	ldr	r1, [sp, #24]
 800a89a:	9805      	ldr	r0, [sp, #20]
 800a89c:	f7fe fe30 	bl	8009500 <_Bfree>
 800a8a0:	e617      	b.n	800a4d2 <_strtod_l+0x696>
 800a8a2:	2e01      	cmp	r6, #1
 800a8a4:	d103      	bne.n	800a8ae <_strtod_l+0xa72>
 800a8a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d100      	bne.n	800a8ae <_strtod_l+0xa72>
 800a8ac:	e59c      	b.n	800a3e8 <_strtod_l+0x5ac>
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	4c54      	ldr	r4, [pc, #336]	@ (800aa04 <_strtod_l+0xbc8>)
 800a8b2:	4d4d      	ldr	r5, [pc, #308]	@ (800a9e8 <_strtod_l+0xbac>)
 800a8b4:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a8b8:	2400      	movs	r4, #0
 800a8ba:	e7b2      	b.n	800a822 <_strtod_l+0x9e6>
 800a8bc:	2400      	movs	r4, #0
 800a8be:	4d4b      	ldr	r5, [pc, #300]	@ (800a9ec <_strtod_l+0xbb0>)
 800a8c0:	e7aa      	b.n	800a818 <_strtod_l+0x9dc>
 800a8c2:	0020      	movs	r0, r4
 800a8c4:	0029      	movs	r1, r5
 800a8c6:	4b49      	ldr	r3, [pc, #292]	@ (800a9ec <_strtod_l+0xbb0>)
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	f7f7 fe37 	bl	800253c <__aeabi_dmul>
 800a8ce:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a8d0:	0004      	movs	r4, r0
 800a8d2:	000d      	movs	r5, r1
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d09f      	beq.n	800a818 <_strtod_l+0x9dc>
 800a8d8:	940a      	str	r4, [sp, #40]	@ 0x28
 800a8da:	950b      	str	r5, [sp, #44]	@ 0x2c
 800a8dc:	e7a1      	b.n	800a822 <_strtod_l+0x9e6>
 800a8de:	2300      	movs	r3, #0
 800a8e0:	4c41      	ldr	r4, [pc, #260]	@ (800a9e8 <_strtod_l+0xbac>)
 800a8e2:	0025      	movs	r5, r4
 800a8e4:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a8e8:	001c      	movs	r4, r3
 800a8ea:	e79a      	b.n	800a822 <_strtod_l+0x9e6>
 800a8ec:	23d4      	movs	r3, #212	@ 0xd4
 800a8ee:	049b      	lsls	r3, r3, #18
 800a8f0:	18cf      	adds	r7, r1, r3
 800a8f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8f4:	9710      	str	r7, [sp, #64]	@ 0x40
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d1c2      	bne.n	800a880 <_strtod_l+0xa44>
 800a8fa:	4b3d      	ldr	r3, [pc, #244]	@ (800a9f0 <_strtod_l+0xbb4>)
 800a8fc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a8fe:	403b      	ands	r3, r7
 800a900:	429a      	cmp	r2, r3
 800a902:	d1bd      	bne.n	800a880 <_strtod_l+0xa44>
 800a904:	0020      	movs	r0, r4
 800a906:	0029      	movs	r1, r5
 800a908:	f7f5 fe74 	bl	80005f4 <__aeabi_d2lz>
 800a90c:	f7f5 feac 	bl	8000668 <__aeabi_l2d>
 800a910:	0002      	movs	r2, r0
 800a912:	000b      	movs	r3, r1
 800a914:	0020      	movs	r0, r4
 800a916:	0029      	movs	r1, r5
 800a918:	f7f8 f8d8 	bl	8002acc <__aeabi_dsub>
 800a91c:	033c      	lsls	r4, r7, #12
 800a91e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a920:	0b24      	lsrs	r4, r4, #12
 800a922:	4334      	orrs	r4, r6
 800a924:	900e      	str	r0, [sp, #56]	@ 0x38
 800a926:	910f      	str	r1, [sp, #60]	@ 0x3c
 800a928:	4a37      	ldr	r2, [pc, #220]	@ (800aa08 <_strtod_l+0xbcc>)
 800a92a:	431c      	orrs	r4, r3
 800a92c:	d052      	beq.n	800a9d4 <_strtod_l+0xb98>
 800a92e:	4b37      	ldr	r3, [pc, #220]	@ (800aa0c <_strtod_l+0xbd0>)
 800a930:	f7f5 fd92 	bl	8000458 <__aeabi_dcmplt>
 800a934:	2800      	cmp	r0, #0
 800a936:	d000      	beq.n	800a93a <_strtod_l+0xafe>
 800a938:	e4c3      	b.n	800a2c2 <_strtod_l+0x486>
 800a93a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800a93c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a93e:	4a34      	ldr	r2, [pc, #208]	@ (800aa10 <_strtod_l+0xbd4>)
 800a940:	4b2a      	ldr	r3, [pc, #168]	@ (800a9ec <_strtod_l+0xbb0>)
 800a942:	f7f5 fd9d 	bl	8000480 <__aeabi_dcmpgt>
 800a946:	2800      	cmp	r0, #0
 800a948:	d09a      	beq.n	800a880 <_strtod_l+0xa44>
 800a94a:	e4ba      	b.n	800a2c2 <_strtod_l+0x486>
 800a94c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d02a      	beq.n	800a9a8 <_strtod_l+0xb6c>
 800a952:	23d4      	movs	r3, #212	@ 0xd4
 800a954:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a956:	04db      	lsls	r3, r3, #19
 800a958:	429a      	cmp	r2, r3
 800a95a:	d825      	bhi.n	800a9a8 <_strtod_l+0xb6c>
 800a95c:	0020      	movs	r0, r4
 800a95e:	0029      	movs	r1, r5
 800a960:	4a2c      	ldr	r2, [pc, #176]	@ (800aa14 <_strtod_l+0xbd8>)
 800a962:	4b2d      	ldr	r3, [pc, #180]	@ (800aa18 <_strtod_l+0xbdc>)
 800a964:	f7f5 fd82 	bl	800046c <__aeabi_dcmple>
 800a968:	2800      	cmp	r0, #0
 800a96a:	d016      	beq.n	800a99a <_strtod_l+0xb5e>
 800a96c:	0020      	movs	r0, r4
 800a96e:	0029      	movs	r1, r5
 800a970:	f7f5 fe22 	bl	80005b8 <__aeabi_d2uiz>
 800a974:	2800      	cmp	r0, #0
 800a976:	d100      	bne.n	800a97a <_strtod_l+0xb3e>
 800a978:	3001      	adds	r0, #1
 800a97a:	f7f8 fccf 	bl	800331c <__aeabi_ui2d>
 800a97e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a980:	0004      	movs	r4, r0
 800a982:	000d      	movs	r5, r1
 800a984:	2b00      	cmp	r3, #0
 800a986:	d122      	bne.n	800a9ce <_strtod_l+0xb92>
 800a988:	2380      	movs	r3, #128	@ 0x80
 800a98a:	061b      	lsls	r3, r3, #24
 800a98c:	18cb      	adds	r3, r1, r3
 800a98e:	9018      	str	r0, [sp, #96]	@ 0x60
 800a990:	9319      	str	r3, [sp, #100]	@ 0x64
 800a992:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800a994:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a996:	9214      	str	r2, [sp, #80]	@ 0x50
 800a998:	9315      	str	r3, [sp, #84]	@ 0x54
 800a99a:	22d6      	movs	r2, #214	@ 0xd6
 800a99c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a99e:	04d2      	lsls	r2, r2, #19
 800a9a0:	189b      	adds	r3, r3, r2
 800a9a2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a9a4:	1a9b      	subs	r3, r3, r2
 800a9a6:	9315      	str	r3, [sp, #84]	@ 0x54
 800a9a8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a9aa:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a9ac:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800a9ae:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800a9b0:	f7ff f8f2 	bl	8009b98 <__ulp>
 800a9b4:	0002      	movs	r2, r0
 800a9b6:	000b      	movs	r3, r1
 800a9b8:	0030      	movs	r0, r6
 800a9ba:	0039      	movs	r1, r7
 800a9bc:	f7f7 fdbe 	bl	800253c <__aeabi_dmul>
 800a9c0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800a9c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a9c4:	f7f6 fe12 	bl	80015ec <__aeabi_dadd>
 800a9c8:	0006      	movs	r6, r0
 800a9ca:	000f      	movs	r7, r1
 800a9cc:	e791      	b.n	800a8f2 <_strtod_l+0xab6>
 800a9ce:	9418      	str	r4, [sp, #96]	@ 0x60
 800a9d0:	9519      	str	r5, [sp, #100]	@ 0x64
 800a9d2:	e7de      	b.n	800a992 <_strtod_l+0xb56>
 800a9d4:	4b11      	ldr	r3, [pc, #68]	@ (800aa1c <_strtod_l+0xbe0>)
 800a9d6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800a9d8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a9da:	f7f5 fd3d 	bl	8000458 <__aeabi_dcmplt>
 800a9de:	e7b2      	b.n	800a946 <_strtod_l+0xb0a>
 800a9e0:	fff00000 	.word	0xfff00000
 800a9e4:	000fffff 	.word	0x000fffff
 800a9e8:	3ff00000 	.word	0x3ff00000
 800a9ec:	3fe00000 	.word	0x3fe00000
 800a9f0:	7ff00000 	.word	0x7ff00000
 800a9f4:	7fe00000 	.word	0x7fe00000
 800a9f8:	fcb00000 	.word	0xfcb00000
 800a9fc:	7c9fffff 	.word	0x7c9fffff
 800aa00:	7fefffff 	.word	0x7fefffff
 800aa04:	bff00000 	.word	0xbff00000
 800aa08:	94a03595 	.word	0x94a03595
 800aa0c:	3fdfffff 	.word	0x3fdfffff
 800aa10:	35afe535 	.word	0x35afe535
 800aa14:	ffc00000 	.word	0xffc00000
 800aa18:	41dfffff 	.word	0x41dfffff
 800aa1c:	3fcfffff 	.word	0x3fcfffff

0800aa20 <_strtod_r>:
 800aa20:	b510      	push	{r4, lr}
 800aa22:	4b02      	ldr	r3, [pc, #8]	@ (800aa2c <_strtod_r+0xc>)
 800aa24:	f7ff fa0a 	bl	8009e3c <_strtod_l>
 800aa28:	bd10      	pop	{r4, pc}
 800aa2a:	46c0      	nop			@ (mov r8, r8)
 800aa2c:	20000068 	.word	0x20000068

0800aa30 <_strtol_l.constprop.0>:
 800aa30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa32:	b085      	sub	sp, #20
 800aa34:	0017      	movs	r7, r2
 800aa36:	001e      	movs	r6, r3
 800aa38:	9003      	str	r0, [sp, #12]
 800aa3a:	9101      	str	r1, [sp, #4]
 800aa3c:	2b24      	cmp	r3, #36	@ 0x24
 800aa3e:	d844      	bhi.n	800aaca <_strtol_l.constprop.0+0x9a>
 800aa40:	000c      	movs	r4, r1
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d041      	beq.n	800aaca <_strtol_l.constprop.0+0x9a>
 800aa46:	4b3d      	ldr	r3, [pc, #244]	@ (800ab3c <_strtol_l.constprop.0+0x10c>)
 800aa48:	2208      	movs	r2, #8
 800aa4a:	469c      	mov	ip, r3
 800aa4c:	0023      	movs	r3, r4
 800aa4e:	4661      	mov	r1, ip
 800aa50:	781d      	ldrb	r5, [r3, #0]
 800aa52:	3401      	adds	r4, #1
 800aa54:	5d48      	ldrb	r0, [r1, r5]
 800aa56:	0001      	movs	r1, r0
 800aa58:	4011      	ands	r1, r2
 800aa5a:	4210      	tst	r0, r2
 800aa5c:	d1f6      	bne.n	800aa4c <_strtol_l.constprop.0+0x1c>
 800aa5e:	2d2d      	cmp	r5, #45	@ 0x2d
 800aa60:	d13a      	bne.n	800aad8 <_strtol_l.constprop.0+0xa8>
 800aa62:	7825      	ldrb	r5, [r4, #0]
 800aa64:	1c9c      	adds	r4, r3, #2
 800aa66:	2301      	movs	r3, #1
 800aa68:	9300      	str	r3, [sp, #0]
 800aa6a:	2210      	movs	r2, #16
 800aa6c:	0033      	movs	r3, r6
 800aa6e:	4393      	bics	r3, r2
 800aa70:	d109      	bne.n	800aa86 <_strtol_l.constprop.0+0x56>
 800aa72:	2d30      	cmp	r5, #48	@ 0x30
 800aa74:	d136      	bne.n	800aae4 <_strtol_l.constprop.0+0xb4>
 800aa76:	2120      	movs	r1, #32
 800aa78:	7823      	ldrb	r3, [r4, #0]
 800aa7a:	438b      	bics	r3, r1
 800aa7c:	2b58      	cmp	r3, #88	@ 0x58
 800aa7e:	d131      	bne.n	800aae4 <_strtol_l.constprop.0+0xb4>
 800aa80:	0016      	movs	r6, r2
 800aa82:	7865      	ldrb	r5, [r4, #1]
 800aa84:	3402      	adds	r4, #2
 800aa86:	4a2e      	ldr	r2, [pc, #184]	@ (800ab40 <_strtol_l.constprop.0+0x110>)
 800aa88:	9b00      	ldr	r3, [sp, #0]
 800aa8a:	4694      	mov	ip, r2
 800aa8c:	4463      	add	r3, ip
 800aa8e:	0031      	movs	r1, r6
 800aa90:	0018      	movs	r0, r3
 800aa92:	9302      	str	r3, [sp, #8]
 800aa94:	f7f5 fbda 	bl	800024c <__aeabi_uidivmod>
 800aa98:	2200      	movs	r2, #0
 800aa9a:	4684      	mov	ip, r0
 800aa9c:	0010      	movs	r0, r2
 800aa9e:	002b      	movs	r3, r5
 800aaa0:	3b30      	subs	r3, #48	@ 0x30
 800aaa2:	2b09      	cmp	r3, #9
 800aaa4:	d825      	bhi.n	800aaf2 <_strtol_l.constprop.0+0xc2>
 800aaa6:	001d      	movs	r5, r3
 800aaa8:	42ae      	cmp	r6, r5
 800aaaa:	dd31      	ble.n	800ab10 <_strtol_l.constprop.0+0xe0>
 800aaac:	1c53      	adds	r3, r2, #1
 800aaae:	d009      	beq.n	800aac4 <_strtol_l.constprop.0+0x94>
 800aab0:	2201      	movs	r2, #1
 800aab2:	4252      	negs	r2, r2
 800aab4:	4584      	cmp	ip, r0
 800aab6:	d305      	bcc.n	800aac4 <_strtol_l.constprop.0+0x94>
 800aab8:	d101      	bne.n	800aabe <_strtol_l.constprop.0+0x8e>
 800aaba:	42a9      	cmp	r1, r5
 800aabc:	db25      	blt.n	800ab0a <_strtol_l.constprop.0+0xda>
 800aabe:	2201      	movs	r2, #1
 800aac0:	4370      	muls	r0, r6
 800aac2:	1828      	adds	r0, r5, r0
 800aac4:	7825      	ldrb	r5, [r4, #0]
 800aac6:	3401      	adds	r4, #1
 800aac8:	e7e9      	b.n	800aa9e <_strtol_l.constprop.0+0x6e>
 800aaca:	f7fd fdc3 	bl	8008654 <__errno>
 800aace:	2316      	movs	r3, #22
 800aad0:	6003      	str	r3, [r0, #0]
 800aad2:	2000      	movs	r0, #0
 800aad4:	b005      	add	sp, #20
 800aad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aad8:	9100      	str	r1, [sp, #0]
 800aada:	2d2b      	cmp	r5, #43	@ 0x2b
 800aadc:	d1c5      	bne.n	800aa6a <_strtol_l.constprop.0+0x3a>
 800aade:	7825      	ldrb	r5, [r4, #0]
 800aae0:	1c9c      	adds	r4, r3, #2
 800aae2:	e7c2      	b.n	800aa6a <_strtol_l.constprop.0+0x3a>
 800aae4:	2e00      	cmp	r6, #0
 800aae6:	d1ce      	bne.n	800aa86 <_strtol_l.constprop.0+0x56>
 800aae8:	3608      	adds	r6, #8
 800aaea:	2d30      	cmp	r5, #48	@ 0x30
 800aaec:	d0cb      	beq.n	800aa86 <_strtol_l.constprop.0+0x56>
 800aaee:	3602      	adds	r6, #2
 800aaf0:	e7c9      	b.n	800aa86 <_strtol_l.constprop.0+0x56>
 800aaf2:	002b      	movs	r3, r5
 800aaf4:	3b41      	subs	r3, #65	@ 0x41
 800aaf6:	2b19      	cmp	r3, #25
 800aaf8:	d801      	bhi.n	800aafe <_strtol_l.constprop.0+0xce>
 800aafa:	3d37      	subs	r5, #55	@ 0x37
 800aafc:	e7d4      	b.n	800aaa8 <_strtol_l.constprop.0+0x78>
 800aafe:	002b      	movs	r3, r5
 800ab00:	3b61      	subs	r3, #97	@ 0x61
 800ab02:	2b19      	cmp	r3, #25
 800ab04:	d804      	bhi.n	800ab10 <_strtol_l.constprop.0+0xe0>
 800ab06:	3d57      	subs	r5, #87	@ 0x57
 800ab08:	e7ce      	b.n	800aaa8 <_strtol_l.constprop.0+0x78>
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	4252      	negs	r2, r2
 800ab0e:	e7d9      	b.n	800aac4 <_strtol_l.constprop.0+0x94>
 800ab10:	1c53      	adds	r3, r2, #1
 800ab12:	d108      	bne.n	800ab26 <_strtol_l.constprop.0+0xf6>
 800ab14:	2322      	movs	r3, #34	@ 0x22
 800ab16:	9a03      	ldr	r2, [sp, #12]
 800ab18:	9802      	ldr	r0, [sp, #8]
 800ab1a:	6013      	str	r3, [r2, #0]
 800ab1c:	2f00      	cmp	r7, #0
 800ab1e:	d0d9      	beq.n	800aad4 <_strtol_l.constprop.0+0xa4>
 800ab20:	1e63      	subs	r3, r4, #1
 800ab22:	9301      	str	r3, [sp, #4]
 800ab24:	e007      	b.n	800ab36 <_strtol_l.constprop.0+0x106>
 800ab26:	9b00      	ldr	r3, [sp, #0]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d000      	beq.n	800ab2e <_strtol_l.constprop.0+0xfe>
 800ab2c:	4240      	negs	r0, r0
 800ab2e:	2f00      	cmp	r7, #0
 800ab30:	d0d0      	beq.n	800aad4 <_strtol_l.constprop.0+0xa4>
 800ab32:	2a00      	cmp	r2, #0
 800ab34:	d1f4      	bne.n	800ab20 <_strtol_l.constprop.0+0xf0>
 800ab36:	9b01      	ldr	r3, [sp, #4]
 800ab38:	603b      	str	r3, [r7, #0]
 800ab3a:	e7cb      	b.n	800aad4 <_strtol_l.constprop.0+0xa4>
 800ab3c:	0800c631 	.word	0x0800c631
 800ab40:	7fffffff 	.word	0x7fffffff

0800ab44 <_strtol_r>:
 800ab44:	b510      	push	{r4, lr}
 800ab46:	f7ff ff73 	bl	800aa30 <_strtol_l.constprop.0>
 800ab4a:	bd10      	pop	{r4, pc}

0800ab4c <__ssputs_r>:
 800ab4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab4e:	688e      	ldr	r6, [r1, #8]
 800ab50:	b085      	sub	sp, #20
 800ab52:	001f      	movs	r7, r3
 800ab54:	000c      	movs	r4, r1
 800ab56:	680b      	ldr	r3, [r1, #0]
 800ab58:	9002      	str	r0, [sp, #8]
 800ab5a:	9203      	str	r2, [sp, #12]
 800ab5c:	42be      	cmp	r6, r7
 800ab5e:	d830      	bhi.n	800abc2 <__ssputs_r+0x76>
 800ab60:	210c      	movs	r1, #12
 800ab62:	5e62      	ldrsh	r2, [r4, r1]
 800ab64:	2190      	movs	r1, #144	@ 0x90
 800ab66:	00c9      	lsls	r1, r1, #3
 800ab68:	420a      	tst	r2, r1
 800ab6a:	d028      	beq.n	800abbe <__ssputs_r+0x72>
 800ab6c:	2003      	movs	r0, #3
 800ab6e:	6921      	ldr	r1, [r4, #16]
 800ab70:	1a5b      	subs	r3, r3, r1
 800ab72:	9301      	str	r3, [sp, #4]
 800ab74:	6963      	ldr	r3, [r4, #20]
 800ab76:	4343      	muls	r3, r0
 800ab78:	9801      	ldr	r0, [sp, #4]
 800ab7a:	0fdd      	lsrs	r5, r3, #31
 800ab7c:	18ed      	adds	r5, r5, r3
 800ab7e:	1c7b      	adds	r3, r7, #1
 800ab80:	181b      	adds	r3, r3, r0
 800ab82:	106d      	asrs	r5, r5, #1
 800ab84:	42ab      	cmp	r3, r5
 800ab86:	d900      	bls.n	800ab8a <__ssputs_r+0x3e>
 800ab88:	001d      	movs	r5, r3
 800ab8a:	0552      	lsls	r2, r2, #21
 800ab8c:	d528      	bpl.n	800abe0 <__ssputs_r+0x94>
 800ab8e:	0029      	movs	r1, r5
 800ab90:	9802      	ldr	r0, [sp, #8]
 800ab92:	f7fc fcb3 	bl	80074fc <_malloc_r>
 800ab96:	1e06      	subs	r6, r0, #0
 800ab98:	d02c      	beq.n	800abf4 <__ssputs_r+0xa8>
 800ab9a:	9a01      	ldr	r2, [sp, #4]
 800ab9c:	6921      	ldr	r1, [r4, #16]
 800ab9e:	f7fd fd91 	bl	80086c4 <memcpy>
 800aba2:	89a2      	ldrh	r2, [r4, #12]
 800aba4:	4b18      	ldr	r3, [pc, #96]	@ (800ac08 <__ssputs_r+0xbc>)
 800aba6:	401a      	ands	r2, r3
 800aba8:	2380      	movs	r3, #128	@ 0x80
 800abaa:	4313      	orrs	r3, r2
 800abac:	81a3      	strh	r3, [r4, #12]
 800abae:	9b01      	ldr	r3, [sp, #4]
 800abb0:	6126      	str	r6, [r4, #16]
 800abb2:	18f6      	adds	r6, r6, r3
 800abb4:	6026      	str	r6, [r4, #0]
 800abb6:	003e      	movs	r6, r7
 800abb8:	6165      	str	r5, [r4, #20]
 800abba:	1aed      	subs	r5, r5, r3
 800abbc:	60a5      	str	r5, [r4, #8]
 800abbe:	42be      	cmp	r6, r7
 800abc0:	d900      	bls.n	800abc4 <__ssputs_r+0x78>
 800abc2:	003e      	movs	r6, r7
 800abc4:	0032      	movs	r2, r6
 800abc6:	9903      	ldr	r1, [sp, #12]
 800abc8:	6820      	ldr	r0, [r4, #0]
 800abca:	f000 fbb3 	bl	800b334 <memmove>
 800abce:	2000      	movs	r0, #0
 800abd0:	68a3      	ldr	r3, [r4, #8]
 800abd2:	1b9b      	subs	r3, r3, r6
 800abd4:	60a3      	str	r3, [r4, #8]
 800abd6:	6823      	ldr	r3, [r4, #0]
 800abd8:	199b      	adds	r3, r3, r6
 800abda:	6023      	str	r3, [r4, #0]
 800abdc:	b005      	add	sp, #20
 800abde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abe0:	002a      	movs	r2, r5
 800abe2:	9802      	ldr	r0, [sp, #8]
 800abe4:	f000 ff88 	bl	800baf8 <_realloc_r>
 800abe8:	1e06      	subs	r6, r0, #0
 800abea:	d1e0      	bne.n	800abae <__ssputs_r+0x62>
 800abec:	6921      	ldr	r1, [r4, #16]
 800abee:	9802      	ldr	r0, [sp, #8]
 800abf0:	f7fe fbf8 	bl	80093e4 <_free_r>
 800abf4:	230c      	movs	r3, #12
 800abf6:	2001      	movs	r0, #1
 800abf8:	9a02      	ldr	r2, [sp, #8]
 800abfa:	4240      	negs	r0, r0
 800abfc:	6013      	str	r3, [r2, #0]
 800abfe:	89a2      	ldrh	r2, [r4, #12]
 800ac00:	3334      	adds	r3, #52	@ 0x34
 800ac02:	4313      	orrs	r3, r2
 800ac04:	81a3      	strh	r3, [r4, #12]
 800ac06:	e7e9      	b.n	800abdc <__ssputs_r+0x90>
 800ac08:	fffffb7f 	.word	0xfffffb7f

0800ac0c <_svfiprintf_r>:
 800ac0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac0e:	b0a1      	sub	sp, #132	@ 0x84
 800ac10:	9003      	str	r0, [sp, #12]
 800ac12:	001d      	movs	r5, r3
 800ac14:	898b      	ldrh	r3, [r1, #12]
 800ac16:	000f      	movs	r7, r1
 800ac18:	0016      	movs	r6, r2
 800ac1a:	061b      	lsls	r3, r3, #24
 800ac1c:	d511      	bpl.n	800ac42 <_svfiprintf_r+0x36>
 800ac1e:	690b      	ldr	r3, [r1, #16]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d10e      	bne.n	800ac42 <_svfiprintf_r+0x36>
 800ac24:	2140      	movs	r1, #64	@ 0x40
 800ac26:	f7fc fc69 	bl	80074fc <_malloc_r>
 800ac2a:	6038      	str	r0, [r7, #0]
 800ac2c:	6138      	str	r0, [r7, #16]
 800ac2e:	2800      	cmp	r0, #0
 800ac30:	d105      	bne.n	800ac3e <_svfiprintf_r+0x32>
 800ac32:	230c      	movs	r3, #12
 800ac34:	9a03      	ldr	r2, [sp, #12]
 800ac36:	6013      	str	r3, [r2, #0]
 800ac38:	2001      	movs	r0, #1
 800ac3a:	4240      	negs	r0, r0
 800ac3c:	e0cf      	b.n	800adde <_svfiprintf_r+0x1d2>
 800ac3e:	2340      	movs	r3, #64	@ 0x40
 800ac40:	617b      	str	r3, [r7, #20]
 800ac42:	2300      	movs	r3, #0
 800ac44:	ac08      	add	r4, sp, #32
 800ac46:	6163      	str	r3, [r4, #20]
 800ac48:	3320      	adds	r3, #32
 800ac4a:	7663      	strb	r3, [r4, #25]
 800ac4c:	3310      	adds	r3, #16
 800ac4e:	76a3      	strb	r3, [r4, #26]
 800ac50:	9507      	str	r5, [sp, #28]
 800ac52:	0035      	movs	r5, r6
 800ac54:	782b      	ldrb	r3, [r5, #0]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d001      	beq.n	800ac5e <_svfiprintf_r+0x52>
 800ac5a:	2b25      	cmp	r3, #37	@ 0x25
 800ac5c:	d148      	bne.n	800acf0 <_svfiprintf_r+0xe4>
 800ac5e:	1bab      	subs	r3, r5, r6
 800ac60:	9305      	str	r3, [sp, #20]
 800ac62:	42b5      	cmp	r5, r6
 800ac64:	d00b      	beq.n	800ac7e <_svfiprintf_r+0x72>
 800ac66:	0032      	movs	r2, r6
 800ac68:	0039      	movs	r1, r7
 800ac6a:	9803      	ldr	r0, [sp, #12]
 800ac6c:	f7ff ff6e 	bl	800ab4c <__ssputs_r>
 800ac70:	3001      	adds	r0, #1
 800ac72:	d100      	bne.n	800ac76 <_svfiprintf_r+0x6a>
 800ac74:	e0ae      	b.n	800add4 <_svfiprintf_r+0x1c8>
 800ac76:	6963      	ldr	r3, [r4, #20]
 800ac78:	9a05      	ldr	r2, [sp, #20]
 800ac7a:	189b      	adds	r3, r3, r2
 800ac7c:	6163      	str	r3, [r4, #20]
 800ac7e:	782b      	ldrb	r3, [r5, #0]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d100      	bne.n	800ac86 <_svfiprintf_r+0x7a>
 800ac84:	e0a6      	b.n	800add4 <_svfiprintf_r+0x1c8>
 800ac86:	2201      	movs	r2, #1
 800ac88:	2300      	movs	r3, #0
 800ac8a:	4252      	negs	r2, r2
 800ac8c:	6062      	str	r2, [r4, #4]
 800ac8e:	a904      	add	r1, sp, #16
 800ac90:	3254      	adds	r2, #84	@ 0x54
 800ac92:	1852      	adds	r2, r2, r1
 800ac94:	1c6e      	adds	r6, r5, #1
 800ac96:	6023      	str	r3, [r4, #0]
 800ac98:	60e3      	str	r3, [r4, #12]
 800ac9a:	60a3      	str	r3, [r4, #8]
 800ac9c:	7013      	strb	r3, [r2, #0]
 800ac9e:	65a3      	str	r3, [r4, #88]	@ 0x58
 800aca0:	4b54      	ldr	r3, [pc, #336]	@ (800adf4 <_svfiprintf_r+0x1e8>)
 800aca2:	2205      	movs	r2, #5
 800aca4:	0018      	movs	r0, r3
 800aca6:	7831      	ldrb	r1, [r6, #0]
 800aca8:	9305      	str	r3, [sp, #20]
 800acaa:	f7fd fd00 	bl	80086ae <memchr>
 800acae:	1c75      	adds	r5, r6, #1
 800acb0:	2800      	cmp	r0, #0
 800acb2:	d11f      	bne.n	800acf4 <_svfiprintf_r+0xe8>
 800acb4:	6822      	ldr	r2, [r4, #0]
 800acb6:	06d3      	lsls	r3, r2, #27
 800acb8:	d504      	bpl.n	800acc4 <_svfiprintf_r+0xb8>
 800acba:	2353      	movs	r3, #83	@ 0x53
 800acbc:	a904      	add	r1, sp, #16
 800acbe:	185b      	adds	r3, r3, r1
 800acc0:	2120      	movs	r1, #32
 800acc2:	7019      	strb	r1, [r3, #0]
 800acc4:	0713      	lsls	r3, r2, #28
 800acc6:	d504      	bpl.n	800acd2 <_svfiprintf_r+0xc6>
 800acc8:	2353      	movs	r3, #83	@ 0x53
 800acca:	a904      	add	r1, sp, #16
 800accc:	185b      	adds	r3, r3, r1
 800acce:	212b      	movs	r1, #43	@ 0x2b
 800acd0:	7019      	strb	r1, [r3, #0]
 800acd2:	7833      	ldrb	r3, [r6, #0]
 800acd4:	2b2a      	cmp	r3, #42	@ 0x2a
 800acd6:	d016      	beq.n	800ad06 <_svfiprintf_r+0xfa>
 800acd8:	0035      	movs	r5, r6
 800acda:	2100      	movs	r1, #0
 800acdc:	200a      	movs	r0, #10
 800acde:	68e3      	ldr	r3, [r4, #12]
 800ace0:	782a      	ldrb	r2, [r5, #0]
 800ace2:	1c6e      	adds	r6, r5, #1
 800ace4:	3a30      	subs	r2, #48	@ 0x30
 800ace6:	2a09      	cmp	r2, #9
 800ace8:	d950      	bls.n	800ad8c <_svfiprintf_r+0x180>
 800acea:	2900      	cmp	r1, #0
 800acec:	d111      	bne.n	800ad12 <_svfiprintf_r+0x106>
 800acee:	e017      	b.n	800ad20 <_svfiprintf_r+0x114>
 800acf0:	3501      	adds	r5, #1
 800acf2:	e7af      	b.n	800ac54 <_svfiprintf_r+0x48>
 800acf4:	9b05      	ldr	r3, [sp, #20]
 800acf6:	6822      	ldr	r2, [r4, #0]
 800acf8:	1ac0      	subs	r0, r0, r3
 800acfa:	2301      	movs	r3, #1
 800acfc:	4083      	lsls	r3, r0
 800acfe:	4313      	orrs	r3, r2
 800ad00:	002e      	movs	r6, r5
 800ad02:	6023      	str	r3, [r4, #0]
 800ad04:	e7cc      	b.n	800aca0 <_svfiprintf_r+0x94>
 800ad06:	9b07      	ldr	r3, [sp, #28]
 800ad08:	1d19      	adds	r1, r3, #4
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	9107      	str	r1, [sp, #28]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	db01      	blt.n	800ad16 <_svfiprintf_r+0x10a>
 800ad12:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad14:	e004      	b.n	800ad20 <_svfiprintf_r+0x114>
 800ad16:	425b      	negs	r3, r3
 800ad18:	60e3      	str	r3, [r4, #12]
 800ad1a:	2302      	movs	r3, #2
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	6023      	str	r3, [r4, #0]
 800ad20:	782b      	ldrb	r3, [r5, #0]
 800ad22:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad24:	d10c      	bne.n	800ad40 <_svfiprintf_r+0x134>
 800ad26:	786b      	ldrb	r3, [r5, #1]
 800ad28:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad2a:	d134      	bne.n	800ad96 <_svfiprintf_r+0x18a>
 800ad2c:	9b07      	ldr	r3, [sp, #28]
 800ad2e:	3502      	adds	r5, #2
 800ad30:	1d1a      	adds	r2, r3, #4
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	9207      	str	r2, [sp, #28]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	da01      	bge.n	800ad3e <_svfiprintf_r+0x132>
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	425b      	negs	r3, r3
 800ad3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad40:	4e2d      	ldr	r6, [pc, #180]	@ (800adf8 <_svfiprintf_r+0x1ec>)
 800ad42:	2203      	movs	r2, #3
 800ad44:	0030      	movs	r0, r6
 800ad46:	7829      	ldrb	r1, [r5, #0]
 800ad48:	f7fd fcb1 	bl	80086ae <memchr>
 800ad4c:	2800      	cmp	r0, #0
 800ad4e:	d006      	beq.n	800ad5e <_svfiprintf_r+0x152>
 800ad50:	2340      	movs	r3, #64	@ 0x40
 800ad52:	1b80      	subs	r0, r0, r6
 800ad54:	4083      	lsls	r3, r0
 800ad56:	6822      	ldr	r2, [r4, #0]
 800ad58:	3501      	adds	r5, #1
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	6023      	str	r3, [r4, #0]
 800ad5e:	7829      	ldrb	r1, [r5, #0]
 800ad60:	2206      	movs	r2, #6
 800ad62:	4826      	ldr	r0, [pc, #152]	@ (800adfc <_svfiprintf_r+0x1f0>)
 800ad64:	1c6e      	adds	r6, r5, #1
 800ad66:	7621      	strb	r1, [r4, #24]
 800ad68:	f7fd fca1 	bl	80086ae <memchr>
 800ad6c:	2800      	cmp	r0, #0
 800ad6e:	d038      	beq.n	800ade2 <_svfiprintf_r+0x1d6>
 800ad70:	4b23      	ldr	r3, [pc, #140]	@ (800ae00 <_svfiprintf_r+0x1f4>)
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d122      	bne.n	800adbc <_svfiprintf_r+0x1b0>
 800ad76:	2207      	movs	r2, #7
 800ad78:	9b07      	ldr	r3, [sp, #28]
 800ad7a:	3307      	adds	r3, #7
 800ad7c:	4393      	bics	r3, r2
 800ad7e:	3308      	adds	r3, #8
 800ad80:	9307      	str	r3, [sp, #28]
 800ad82:	6963      	ldr	r3, [r4, #20]
 800ad84:	9a04      	ldr	r2, [sp, #16]
 800ad86:	189b      	adds	r3, r3, r2
 800ad88:	6163      	str	r3, [r4, #20]
 800ad8a:	e762      	b.n	800ac52 <_svfiprintf_r+0x46>
 800ad8c:	4343      	muls	r3, r0
 800ad8e:	0035      	movs	r5, r6
 800ad90:	2101      	movs	r1, #1
 800ad92:	189b      	adds	r3, r3, r2
 800ad94:	e7a4      	b.n	800ace0 <_svfiprintf_r+0xd4>
 800ad96:	2300      	movs	r3, #0
 800ad98:	200a      	movs	r0, #10
 800ad9a:	0019      	movs	r1, r3
 800ad9c:	3501      	adds	r5, #1
 800ad9e:	6063      	str	r3, [r4, #4]
 800ada0:	782a      	ldrb	r2, [r5, #0]
 800ada2:	1c6e      	adds	r6, r5, #1
 800ada4:	3a30      	subs	r2, #48	@ 0x30
 800ada6:	2a09      	cmp	r2, #9
 800ada8:	d903      	bls.n	800adb2 <_svfiprintf_r+0x1a6>
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d0c8      	beq.n	800ad40 <_svfiprintf_r+0x134>
 800adae:	9109      	str	r1, [sp, #36]	@ 0x24
 800adb0:	e7c6      	b.n	800ad40 <_svfiprintf_r+0x134>
 800adb2:	4341      	muls	r1, r0
 800adb4:	0035      	movs	r5, r6
 800adb6:	2301      	movs	r3, #1
 800adb8:	1889      	adds	r1, r1, r2
 800adba:	e7f1      	b.n	800ada0 <_svfiprintf_r+0x194>
 800adbc:	aa07      	add	r2, sp, #28
 800adbe:	9200      	str	r2, [sp, #0]
 800adc0:	0021      	movs	r1, r4
 800adc2:	003a      	movs	r2, r7
 800adc4:	4b0f      	ldr	r3, [pc, #60]	@ (800ae04 <_svfiprintf_r+0x1f8>)
 800adc6:	9803      	ldr	r0, [sp, #12]
 800adc8:	f7fc fcce 	bl	8007768 <_printf_float>
 800adcc:	9004      	str	r0, [sp, #16]
 800adce:	9b04      	ldr	r3, [sp, #16]
 800add0:	3301      	adds	r3, #1
 800add2:	d1d6      	bne.n	800ad82 <_svfiprintf_r+0x176>
 800add4:	89bb      	ldrh	r3, [r7, #12]
 800add6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800add8:	065b      	lsls	r3, r3, #25
 800adda:	d500      	bpl.n	800adde <_svfiprintf_r+0x1d2>
 800addc:	e72c      	b.n	800ac38 <_svfiprintf_r+0x2c>
 800adde:	b021      	add	sp, #132	@ 0x84
 800ade0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ade2:	aa07      	add	r2, sp, #28
 800ade4:	9200      	str	r2, [sp, #0]
 800ade6:	0021      	movs	r1, r4
 800ade8:	003a      	movs	r2, r7
 800adea:	4b06      	ldr	r3, [pc, #24]	@ (800ae04 <_svfiprintf_r+0x1f8>)
 800adec:	9803      	ldr	r0, [sp, #12]
 800adee:	f7fc ff69 	bl	8007cc4 <_printf_i>
 800adf2:	e7eb      	b.n	800adcc <_svfiprintf_r+0x1c0>
 800adf4:	0800c731 	.word	0x0800c731
 800adf8:	0800c737 	.word	0x0800c737
 800adfc:	0800c73b 	.word	0x0800c73b
 800ae00:	08007769 	.word	0x08007769
 800ae04:	0800ab4d 	.word	0x0800ab4d

0800ae08 <__sfputc_r>:
 800ae08:	6893      	ldr	r3, [r2, #8]
 800ae0a:	b510      	push	{r4, lr}
 800ae0c:	3b01      	subs	r3, #1
 800ae0e:	6093      	str	r3, [r2, #8]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	da04      	bge.n	800ae1e <__sfputc_r+0x16>
 800ae14:	6994      	ldr	r4, [r2, #24]
 800ae16:	42a3      	cmp	r3, r4
 800ae18:	db07      	blt.n	800ae2a <__sfputc_r+0x22>
 800ae1a:	290a      	cmp	r1, #10
 800ae1c:	d005      	beq.n	800ae2a <__sfputc_r+0x22>
 800ae1e:	6813      	ldr	r3, [r2, #0]
 800ae20:	1c58      	adds	r0, r3, #1
 800ae22:	6010      	str	r0, [r2, #0]
 800ae24:	7019      	strb	r1, [r3, #0]
 800ae26:	0008      	movs	r0, r1
 800ae28:	bd10      	pop	{r4, pc}
 800ae2a:	f000 f9e2 	bl	800b1f2 <__swbuf_r>
 800ae2e:	0001      	movs	r1, r0
 800ae30:	e7f9      	b.n	800ae26 <__sfputc_r+0x1e>

0800ae32 <__sfputs_r>:
 800ae32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae34:	0006      	movs	r6, r0
 800ae36:	000f      	movs	r7, r1
 800ae38:	0014      	movs	r4, r2
 800ae3a:	18d5      	adds	r5, r2, r3
 800ae3c:	42ac      	cmp	r4, r5
 800ae3e:	d101      	bne.n	800ae44 <__sfputs_r+0x12>
 800ae40:	2000      	movs	r0, #0
 800ae42:	e007      	b.n	800ae54 <__sfputs_r+0x22>
 800ae44:	7821      	ldrb	r1, [r4, #0]
 800ae46:	003a      	movs	r2, r7
 800ae48:	0030      	movs	r0, r6
 800ae4a:	f7ff ffdd 	bl	800ae08 <__sfputc_r>
 800ae4e:	3401      	adds	r4, #1
 800ae50:	1c43      	adds	r3, r0, #1
 800ae52:	d1f3      	bne.n	800ae3c <__sfputs_r+0xa>
 800ae54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ae58 <_vfiprintf_r>:
 800ae58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae5a:	b0a1      	sub	sp, #132	@ 0x84
 800ae5c:	000f      	movs	r7, r1
 800ae5e:	0015      	movs	r5, r2
 800ae60:	001e      	movs	r6, r3
 800ae62:	9003      	str	r0, [sp, #12]
 800ae64:	2800      	cmp	r0, #0
 800ae66:	d004      	beq.n	800ae72 <_vfiprintf_r+0x1a>
 800ae68:	6a03      	ldr	r3, [r0, #32]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d101      	bne.n	800ae72 <_vfiprintf_r+0x1a>
 800ae6e:	f7fd fad5 	bl	800841c <__sinit>
 800ae72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae74:	07db      	lsls	r3, r3, #31
 800ae76:	d405      	bmi.n	800ae84 <_vfiprintf_r+0x2c>
 800ae78:	89bb      	ldrh	r3, [r7, #12]
 800ae7a:	059b      	lsls	r3, r3, #22
 800ae7c:	d402      	bmi.n	800ae84 <_vfiprintf_r+0x2c>
 800ae7e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800ae80:	f7fd fc13 	bl	80086aa <__retarget_lock_acquire_recursive>
 800ae84:	89bb      	ldrh	r3, [r7, #12]
 800ae86:	071b      	lsls	r3, r3, #28
 800ae88:	d502      	bpl.n	800ae90 <_vfiprintf_r+0x38>
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d113      	bne.n	800aeb8 <_vfiprintf_r+0x60>
 800ae90:	0039      	movs	r1, r7
 800ae92:	9803      	ldr	r0, [sp, #12]
 800ae94:	f000 f9f0 	bl	800b278 <__swsetup_r>
 800ae98:	2800      	cmp	r0, #0
 800ae9a:	d00d      	beq.n	800aeb8 <_vfiprintf_r+0x60>
 800ae9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae9e:	07db      	lsls	r3, r3, #31
 800aea0:	d503      	bpl.n	800aeaa <_vfiprintf_r+0x52>
 800aea2:	2001      	movs	r0, #1
 800aea4:	4240      	negs	r0, r0
 800aea6:	b021      	add	sp, #132	@ 0x84
 800aea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aeaa:	89bb      	ldrh	r3, [r7, #12]
 800aeac:	059b      	lsls	r3, r3, #22
 800aeae:	d4f8      	bmi.n	800aea2 <_vfiprintf_r+0x4a>
 800aeb0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800aeb2:	f7fd fbfb 	bl	80086ac <__retarget_lock_release_recursive>
 800aeb6:	e7f4      	b.n	800aea2 <_vfiprintf_r+0x4a>
 800aeb8:	2300      	movs	r3, #0
 800aeba:	ac08      	add	r4, sp, #32
 800aebc:	6163      	str	r3, [r4, #20]
 800aebe:	3320      	adds	r3, #32
 800aec0:	7663      	strb	r3, [r4, #25]
 800aec2:	3310      	adds	r3, #16
 800aec4:	76a3      	strb	r3, [r4, #26]
 800aec6:	9607      	str	r6, [sp, #28]
 800aec8:	002e      	movs	r6, r5
 800aeca:	7833      	ldrb	r3, [r6, #0]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d001      	beq.n	800aed4 <_vfiprintf_r+0x7c>
 800aed0:	2b25      	cmp	r3, #37	@ 0x25
 800aed2:	d148      	bne.n	800af66 <_vfiprintf_r+0x10e>
 800aed4:	1b73      	subs	r3, r6, r5
 800aed6:	9305      	str	r3, [sp, #20]
 800aed8:	42ae      	cmp	r6, r5
 800aeda:	d00b      	beq.n	800aef4 <_vfiprintf_r+0x9c>
 800aedc:	002a      	movs	r2, r5
 800aede:	0039      	movs	r1, r7
 800aee0:	9803      	ldr	r0, [sp, #12]
 800aee2:	f7ff ffa6 	bl	800ae32 <__sfputs_r>
 800aee6:	3001      	adds	r0, #1
 800aee8:	d100      	bne.n	800aeec <_vfiprintf_r+0x94>
 800aeea:	e0ae      	b.n	800b04a <_vfiprintf_r+0x1f2>
 800aeec:	6963      	ldr	r3, [r4, #20]
 800aeee:	9a05      	ldr	r2, [sp, #20]
 800aef0:	189b      	adds	r3, r3, r2
 800aef2:	6163      	str	r3, [r4, #20]
 800aef4:	7833      	ldrb	r3, [r6, #0]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d100      	bne.n	800aefc <_vfiprintf_r+0xa4>
 800aefa:	e0a6      	b.n	800b04a <_vfiprintf_r+0x1f2>
 800aefc:	2201      	movs	r2, #1
 800aefe:	2300      	movs	r3, #0
 800af00:	4252      	negs	r2, r2
 800af02:	6062      	str	r2, [r4, #4]
 800af04:	a904      	add	r1, sp, #16
 800af06:	3254      	adds	r2, #84	@ 0x54
 800af08:	1852      	adds	r2, r2, r1
 800af0a:	1c75      	adds	r5, r6, #1
 800af0c:	6023      	str	r3, [r4, #0]
 800af0e:	60e3      	str	r3, [r4, #12]
 800af10:	60a3      	str	r3, [r4, #8]
 800af12:	7013      	strb	r3, [r2, #0]
 800af14:	65a3      	str	r3, [r4, #88]	@ 0x58
 800af16:	4b59      	ldr	r3, [pc, #356]	@ (800b07c <_vfiprintf_r+0x224>)
 800af18:	2205      	movs	r2, #5
 800af1a:	0018      	movs	r0, r3
 800af1c:	7829      	ldrb	r1, [r5, #0]
 800af1e:	9305      	str	r3, [sp, #20]
 800af20:	f7fd fbc5 	bl	80086ae <memchr>
 800af24:	1c6e      	adds	r6, r5, #1
 800af26:	2800      	cmp	r0, #0
 800af28:	d11f      	bne.n	800af6a <_vfiprintf_r+0x112>
 800af2a:	6822      	ldr	r2, [r4, #0]
 800af2c:	06d3      	lsls	r3, r2, #27
 800af2e:	d504      	bpl.n	800af3a <_vfiprintf_r+0xe2>
 800af30:	2353      	movs	r3, #83	@ 0x53
 800af32:	a904      	add	r1, sp, #16
 800af34:	185b      	adds	r3, r3, r1
 800af36:	2120      	movs	r1, #32
 800af38:	7019      	strb	r1, [r3, #0]
 800af3a:	0713      	lsls	r3, r2, #28
 800af3c:	d504      	bpl.n	800af48 <_vfiprintf_r+0xf0>
 800af3e:	2353      	movs	r3, #83	@ 0x53
 800af40:	a904      	add	r1, sp, #16
 800af42:	185b      	adds	r3, r3, r1
 800af44:	212b      	movs	r1, #43	@ 0x2b
 800af46:	7019      	strb	r1, [r3, #0]
 800af48:	782b      	ldrb	r3, [r5, #0]
 800af4a:	2b2a      	cmp	r3, #42	@ 0x2a
 800af4c:	d016      	beq.n	800af7c <_vfiprintf_r+0x124>
 800af4e:	002e      	movs	r6, r5
 800af50:	2100      	movs	r1, #0
 800af52:	200a      	movs	r0, #10
 800af54:	68e3      	ldr	r3, [r4, #12]
 800af56:	7832      	ldrb	r2, [r6, #0]
 800af58:	1c75      	adds	r5, r6, #1
 800af5a:	3a30      	subs	r2, #48	@ 0x30
 800af5c:	2a09      	cmp	r2, #9
 800af5e:	d950      	bls.n	800b002 <_vfiprintf_r+0x1aa>
 800af60:	2900      	cmp	r1, #0
 800af62:	d111      	bne.n	800af88 <_vfiprintf_r+0x130>
 800af64:	e017      	b.n	800af96 <_vfiprintf_r+0x13e>
 800af66:	3601      	adds	r6, #1
 800af68:	e7af      	b.n	800aeca <_vfiprintf_r+0x72>
 800af6a:	9b05      	ldr	r3, [sp, #20]
 800af6c:	6822      	ldr	r2, [r4, #0]
 800af6e:	1ac0      	subs	r0, r0, r3
 800af70:	2301      	movs	r3, #1
 800af72:	4083      	lsls	r3, r0
 800af74:	4313      	orrs	r3, r2
 800af76:	0035      	movs	r5, r6
 800af78:	6023      	str	r3, [r4, #0]
 800af7a:	e7cc      	b.n	800af16 <_vfiprintf_r+0xbe>
 800af7c:	9b07      	ldr	r3, [sp, #28]
 800af7e:	1d19      	adds	r1, r3, #4
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	9107      	str	r1, [sp, #28]
 800af84:	2b00      	cmp	r3, #0
 800af86:	db01      	blt.n	800af8c <_vfiprintf_r+0x134>
 800af88:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af8a:	e004      	b.n	800af96 <_vfiprintf_r+0x13e>
 800af8c:	425b      	negs	r3, r3
 800af8e:	60e3      	str	r3, [r4, #12]
 800af90:	2302      	movs	r3, #2
 800af92:	4313      	orrs	r3, r2
 800af94:	6023      	str	r3, [r4, #0]
 800af96:	7833      	ldrb	r3, [r6, #0]
 800af98:	2b2e      	cmp	r3, #46	@ 0x2e
 800af9a:	d10c      	bne.n	800afb6 <_vfiprintf_r+0x15e>
 800af9c:	7873      	ldrb	r3, [r6, #1]
 800af9e:	2b2a      	cmp	r3, #42	@ 0x2a
 800afa0:	d134      	bne.n	800b00c <_vfiprintf_r+0x1b4>
 800afa2:	9b07      	ldr	r3, [sp, #28]
 800afa4:	3602      	adds	r6, #2
 800afa6:	1d1a      	adds	r2, r3, #4
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	9207      	str	r2, [sp, #28]
 800afac:	2b00      	cmp	r3, #0
 800afae:	da01      	bge.n	800afb4 <_vfiprintf_r+0x15c>
 800afb0:	2301      	movs	r3, #1
 800afb2:	425b      	negs	r3, r3
 800afb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800afb6:	4d32      	ldr	r5, [pc, #200]	@ (800b080 <_vfiprintf_r+0x228>)
 800afb8:	2203      	movs	r2, #3
 800afba:	0028      	movs	r0, r5
 800afbc:	7831      	ldrb	r1, [r6, #0]
 800afbe:	f7fd fb76 	bl	80086ae <memchr>
 800afc2:	2800      	cmp	r0, #0
 800afc4:	d006      	beq.n	800afd4 <_vfiprintf_r+0x17c>
 800afc6:	2340      	movs	r3, #64	@ 0x40
 800afc8:	1b40      	subs	r0, r0, r5
 800afca:	4083      	lsls	r3, r0
 800afcc:	6822      	ldr	r2, [r4, #0]
 800afce:	3601      	adds	r6, #1
 800afd0:	4313      	orrs	r3, r2
 800afd2:	6023      	str	r3, [r4, #0]
 800afd4:	7831      	ldrb	r1, [r6, #0]
 800afd6:	2206      	movs	r2, #6
 800afd8:	482a      	ldr	r0, [pc, #168]	@ (800b084 <_vfiprintf_r+0x22c>)
 800afda:	1c75      	adds	r5, r6, #1
 800afdc:	7621      	strb	r1, [r4, #24]
 800afde:	f7fd fb66 	bl	80086ae <memchr>
 800afe2:	2800      	cmp	r0, #0
 800afe4:	d040      	beq.n	800b068 <_vfiprintf_r+0x210>
 800afe6:	4b28      	ldr	r3, [pc, #160]	@ (800b088 <_vfiprintf_r+0x230>)
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d122      	bne.n	800b032 <_vfiprintf_r+0x1da>
 800afec:	2207      	movs	r2, #7
 800afee:	9b07      	ldr	r3, [sp, #28]
 800aff0:	3307      	adds	r3, #7
 800aff2:	4393      	bics	r3, r2
 800aff4:	3308      	adds	r3, #8
 800aff6:	9307      	str	r3, [sp, #28]
 800aff8:	6963      	ldr	r3, [r4, #20]
 800affa:	9a04      	ldr	r2, [sp, #16]
 800affc:	189b      	adds	r3, r3, r2
 800affe:	6163      	str	r3, [r4, #20]
 800b000:	e762      	b.n	800aec8 <_vfiprintf_r+0x70>
 800b002:	4343      	muls	r3, r0
 800b004:	002e      	movs	r6, r5
 800b006:	2101      	movs	r1, #1
 800b008:	189b      	adds	r3, r3, r2
 800b00a:	e7a4      	b.n	800af56 <_vfiprintf_r+0xfe>
 800b00c:	2300      	movs	r3, #0
 800b00e:	200a      	movs	r0, #10
 800b010:	0019      	movs	r1, r3
 800b012:	3601      	adds	r6, #1
 800b014:	6063      	str	r3, [r4, #4]
 800b016:	7832      	ldrb	r2, [r6, #0]
 800b018:	1c75      	adds	r5, r6, #1
 800b01a:	3a30      	subs	r2, #48	@ 0x30
 800b01c:	2a09      	cmp	r2, #9
 800b01e:	d903      	bls.n	800b028 <_vfiprintf_r+0x1d0>
 800b020:	2b00      	cmp	r3, #0
 800b022:	d0c8      	beq.n	800afb6 <_vfiprintf_r+0x15e>
 800b024:	9109      	str	r1, [sp, #36]	@ 0x24
 800b026:	e7c6      	b.n	800afb6 <_vfiprintf_r+0x15e>
 800b028:	4341      	muls	r1, r0
 800b02a:	002e      	movs	r6, r5
 800b02c:	2301      	movs	r3, #1
 800b02e:	1889      	adds	r1, r1, r2
 800b030:	e7f1      	b.n	800b016 <_vfiprintf_r+0x1be>
 800b032:	aa07      	add	r2, sp, #28
 800b034:	9200      	str	r2, [sp, #0]
 800b036:	0021      	movs	r1, r4
 800b038:	003a      	movs	r2, r7
 800b03a:	4b14      	ldr	r3, [pc, #80]	@ (800b08c <_vfiprintf_r+0x234>)
 800b03c:	9803      	ldr	r0, [sp, #12]
 800b03e:	f7fc fb93 	bl	8007768 <_printf_float>
 800b042:	9004      	str	r0, [sp, #16]
 800b044:	9b04      	ldr	r3, [sp, #16]
 800b046:	3301      	adds	r3, #1
 800b048:	d1d6      	bne.n	800aff8 <_vfiprintf_r+0x1a0>
 800b04a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b04c:	07db      	lsls	r3, r3, #31
 800b04e:	d405      	bmi.n	800b05c <_vfiprintf_r+0x204>
 800b050:	89bb      	ldrh	r3, [r7, #12]
 800b052:	059b      	lsls	r3, r3, #22
 800b054:	d402      	bmi.n	800b05c <_vfiprintf_r+0x204>
 800b056:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b058:	f7fd fb28 	bl	80086ac <__retarget_lock_release_recursive>
 800b05c:	89bb      	ldrh	r3, [r7, #12]
 800b05e:	065b      	lsls	r3, r3, #25
 800b060:	d500      	bpl.n	800b064 <_vfiprintf_r+0x20c>
 800b062:	e71e      	b.n	800aea2 <_vfiprintf_r+0x4a>
 800b064:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800b066:	e71e      	b.n	800aea6 <_vfiprintf_r+0x4e>
 800b068:	aa07      	add	r2, sp, #28
 800b06a:	9200      	str	r2, [sp, #0]
 800b06c:	0021      	movs	r1, r4
 800b06e:	003a      	movs	r2, r7
 800b070:	4b06      	ldr	r3, [pc, #24]	@ (800b08c <_vfiprintf_r+0x234>)
 800b072:	9803      	ldr	r0, [sp, #12]
 800b074:	f7fc fe26 	bl	8007cc4 <_printf_i>
 800b078:	e7e3      	b.n	800b042 <_vfiprintf_r+0x1ea>
 800b07a:	46c0      	nop			@ (mov r8, r8)
 800b07c:	0800c731 	.word	0x0800c731
 800b080:	0800c737 	.word	0x0800c737
 800b084:	0800c73b 	.word	0x0800c73b
 800b088:	08007769 	.word	0x08007769
 800b08c:	0800ae33 	.word	0x0800ae33

0800b090 <__sflush_r>:
 800b090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b092:	220c      	movs	r2, #12
 800b094:	5e8b      	ldrsh	r3, [r1, r2]
 800b096:	0005      	movs	r5, r0
 800b098:	000c      	movs	r4, r1
 800b09a:	071a      	lsls	r2, r3, #28
 800b09c:	d456      	bmi.n	800b14c <__sflush_r+0xbc>
 800b09e:	684a      	ldr	r2, [r1, #4]
 800b0a0:	2a00      	cmp	r2, #0
 800b0a2:	dc02      	bgt.n	800b0aa <__sflush_r+0x1a>
 800b0a4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800b0a6:	2a00      	cmp	r2, #0
 800b0a8:	dd4e      	ble.n	800b148 <__sflush_r+0xb8>
 800b0aa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800b0ac:	2f00      	cmp	r7, #0
 800b0ae:	d04b      	beq.n	800b148 <__sflush_r+0xb8>
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	2080      	movs	r0, #128	@ 0x80
 800b0b4:	682e      	ldr	r6, [r5, #0]
 800b0b6:	602a      	str	r2, [r5, #0]
 800b0b8:	001a      	movs	r2, r3
 800b0ba:	0140      	lsls	r0, r0, #5
 800b0bc:	6a21      	ldr	r1, [r4, #32]
 800b0be:	4002      	ands	r2, r0
 800b0c0:	4203      	tst	r3, r0
 800b0c2:	d033      	beq.n	800b12c <__sflush_r+0x9c>
 800b0c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b0c6:	89a3      	ldrh	r3, [r4, #12]
 800b0c8:	075b      	lsls	r3, r3, #29
 800b0ca:	d506      	bpl.n	800b0da <__sflush_r+0x4a>
 800b0cc:	6863      	ldr	r3, [r4, #4]
 800b0ce:	1ad2      	subs	r2, r2, r3
 800b0d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d001      	beq.n	800b0da <__sflush_r+0x4a>
 800b0d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b0d8:	1ad2      	subs	r2, r2, r3
 800b0da:	2300      	movs	r3, #0
 800b0dc:	0028      	movs	r0, r5
 800b0de:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800b0e0:	6a21      	ldr	r1, [r4, #32]
 800b0e2:	47b8      	blx	r7
 800b0e4:	89a2      	ldrh	r2, [r4, #12]
 800b0e6:	1c43      	adds	r3, r0, #1
 800b0e8:	d106      	bne.n	800b0f8 <__sflush_r+0x68>
 800b0ea:	6829      	ldr	r1, [r5, #0]
 800b0ec:	291d      	cmp	r1, #29
 800b0ee:	d846      	bhi.n	800b17e <__sflush_r+0xee>
 800b0f0:	4b29      	ldr	r3, [pc, #164]	@ (800b198 <__sflush_r+0x108>)
 800b0f2:	410b      	asrs	r3, r1
 800b0f4:	07db      	lsls	r3, r3, #31
 800b0f6:	d442      	bmi.n	800b17e <__sflush_r+0xee>
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	6063      	str	r3, [r4, #4]
 800b0fc:	6923      	ldr	r3, [r4, #16]
 800b0fe:	6023      	str	r3, [r4, #0]
 800b100:	04d2      	lsls	r2, r2, #19
 800b102:	d505      	bpl.n	800b110 <__sflush_r+0x80>
 800b104:	1c43      	adds	r3, r0, #1
 800b106:	d102      	bne.n	800b10e <__sflush_r+0x7e>
 800b108:	682b      	ldr	r3, [r5, #0]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d100      	bne.n	800b110 <__sflush_r+0x80>
 800b10e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b110:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b112:	602e      	str	r6, [r5, #0]
 800b114:	2900      	cmp	r1, #0
 800b116:	d017      	beq.n	800b148 <__sflush_r+0xb8>
 800b118:	0023      	movs	r3, r4
 800b11a:	3344      	adds	r3, #68	@ 0x44
 800b11c:	4299      	cmp	r1, r3
 800b11e:	d002      	beq.n	800b126 <__sflush_r+0x96>
 800b120:	0028      	movs	r0, r5
 800b122:	f7fe f95f 	bl	80093e4 <_free_r>
 800b126:	2300      	movs	r3, #0
 800b128:	6363      	str	r3, [r4, #52]	@ 0x34
 800b12a:	e00d      	b.n	800b148 <__sflush_r+0xb8>
 800b12c:	2301      	movs	r3, #1
 800b12e:	0028      	movs	r0, r5
 800b130:	47b8      	blx	r7
 800b132:	0002      	movs	r2, r0
 800b134:	1c43      	adds	r3, r0, #1
 800b136:	d1c6      	bne.n	800b0c6 <__sflush_r+0x36>
 800b138:	682b      	ldr	r3, [r5, #0]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d0c3      	beq.n	800b0c6 <__sflush_r+0x36>
 800b13e:	2b1d      	cmp	r3, #29
 800b140:	d001      	beq.n	800b146 <__sflush_r+0xb6>
 800b142:	2b16      	cmp	r3, #22
 800b144:	d11a      	bne.n	800b17c <__sflush_r+0xec>
 800b146:	602e      	str	r6, [r5, #0]
 800b148:	2000      	movs	r0, #0
 800b14a:	e01e      	b.n	800b18a <__sflush_r+0xfa>
 800b14c:	690e      	ldr	r6, [r1, #16]
 800b14e:	2e00      	cmp	r6, #0
 800b150:	d0fa      	beq.n	800b148 <__sflush_r+0xb8>
 800b152:	680f      	ldr	r7, [r1, #0]
 800b154:	600e      	str	r6, [r1, #0]
 800b156:	1bba      	subs	r2, r7, r6
 800b158:	9201      	str	r2, [sp, #4]
 800b15a:	2200      	movs	r2, #0
 800b15c:	079b      	lsls	r3, r3, #30
 800b15e:	d100      	bne.n	800b162 <__sflush_r+0xd2>
 800b160:	694a      	ldr	r2, [r1, #20]
 800b162:	60a2      	str	r2, [r4, #8]
 800b164:	9b01      	ldr	r3, [sp, #4]
 800b166:	2b00      	cmp	r3, #0
 800b168:	ddee      	ble.n	800b148 <__sflush_r+0xb8>
 800b16a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b16c:	0032      	movs	r2, r6
 800b16e:	001f      	movs	r7, r3
 800b170:	0028      	movs	r0, r5
 800b172:	9b01      	ldr	r3, [sp, #4]
 800b174:	6a21      	ldr	r1, [r4, #32]
 800b176:	47b8      	blx	r7
 800b178:	2800      	cmp	r0, #0
 800b17a:	dc07      	bgt.n	800b18c <__sflush_r+0xfc>
 800b17c:	89a2      	ldrh	r2, [r4, #12]
 800b17e:	2340      	movs	r3, #64	@ 0x40
 800b180:	2001      	movs	r0, #1
 800b182:	4313      	orrs	r3, r2
 800b184:	b21b      	sxth	r3, r3
 800b186:	81a3      	strh	r3, [r4, #12]
 800b188:	4240      	negs	r0, r0
 800b18a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b18c:	9b01      	ldr	r3, [sp, #4]
 800b18e:	1836      	adds	r6, r6, r0
 800b190:	1a1b      	subs	r3, r3, r0
 800b192:	9301      	str	r3, [sp, #4]
 800b194:	e7e6      	b.n	800b164 <__sflush_r+0xd4>
 800b196:	46c0      	nop			@ (mov r8, r8)
 800b198:	dfbffffe 	.word	0xdfbffffe

0800b19c <_fflush_r>:
 800b19c:	690b      	ldr	r3, [r1, #16]
 800b19e:	b570      	push	{r4, r5, r6, lr}
 800b1a0:	0005      	movs	r5, r0
 800b1a2:	000c      	movs	r4, r1
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d102      	bne.n	800b1ae <_fflush_r+0x12>
 800b1a8:	2500      	movs	r5, #0
 800b1aa:	0028      	movs	r0, r5
 800b1ac:	bd70      	pop	{r4, r5, r6, pc}
 800b1ae:	2800      	cmp	r0, #0
 800b1b0:	d004      	beq.n	800b1bc <_fflush_r+0x20>
 800b1b2:	6a03      	ldr	r3, [r0, #32]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d101      	bne.n	800b1bc <_fflush_r+0x20>
 800b1b8:	f7fd f930 	bl	800841c <__sinit>
 800b1bc:	220c      	movs	r2, #12
 800b1be:	5ea3      	ldrsh	r3, [r4, r2]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d0f1      	beq.n	800b1a8 <_fflush_r+0xc>
 800b1c4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b1c6:	07d2      	lsls	r2, r2, #31
 800b1c8:	d404      	bmi.n	800b1d4 <_fflush_r+0x38>
 800b1ca:	059b      	lsls	r3, r3, #22
 800b1cc:	d402      	bmi.n	800b1d4 <_fflush_r+0x38>
 800b1ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1d0:	f7fd fa6b 	bl	80086aa <__retarget_lock_acquire_recursive>
 800b1d4:	0028      	movs	r0, r5
 800b1d6:	0021      	movs	r1, r4
 800b1d8:	f7ff ff5a 	bl	800b090 <__sflush_r>
 800b1dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b1de:	0005      	movs	r5, r0
 800b1e0:	07db      	lsls	r3, r3, #31
 800b1e2:	d4e2      	bmi.n	800b1aa <_fflush_r+0xe>
 800b1e4:	89a3      	ldrh	r3, [r4, #12]
 800b1e6:	059b      	lsls	r3, r3, #22
 800b1e8:	d4df      	bmi.n	800b1aa <_fflush_r+0xe>
 800b1ea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1ec:	f7fd fa5e 	bl	80086ac <__retarget_lock_release_recursive>
 800b1f0:	e7db      	b.n	800b1aa <_fflush_r+0xe>

0800b1f2 <__swbuf_r>:
 800b1f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1f4:	0006      	movs	r6, r0
 800b1f6:	000d      	movs	r5, r1
 800b1f8:	0014      	movs	r4, r2
 800b1fa:	2800      	cmp	r0, #0
 800b1fc:	d004      	beq.n	800b208 <__swbuf_r+0x16>
 800b1fe:	6a03      	ldr	r3, [r0, #32]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d101      	bne.n	800b208 <__swbuf_r+0x16>
 800b204:	f7fd f90a 	bl	800841c <__sinit>
 800b208:	69a3      	ldr	r3, [r4, #24]
 800b20a:	60a3      	str	r3, [r4, #8]
 800b20c:	89a3      	ldrh	r3, [r4, #12]
 800b20e:	071b      	lsls	r3, r3, #28
 800b210:	d502      	bpl.n	800b218 <__swbuf_r+0x26>
 800b212:	6923      	ldr	r3, [r4, #16]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d109      	bne.n	800b22c <__swbuf_r+0x3a>
 800b218:	0021      	movs	r1, r4
 800b21a:	0030      	movs	r0, r6
 800b21c:	f000 f82c 	bl	800b278 <__swsetup_r>
 800b220:	2800      	cmp	r0, #0
 800b222:	d003      	beq.n	800b22c <__swbuf_r+0x3a>
 800b224:	2501      	movs	r5, #1
 800b226:	426d      	negs	r5, r5
 800b228:	0028      	movs	r0, r5
 800b22a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b22c:	6923      	ldr	r3, [r4, #16]
 800b22e:	6820      	ldr	r0, [r4, #0]
 800b230:	b2ef      	uxtb	r7, r5
 800b232:	1ac0      	subs	r0, r0, r3
 800b234:	6963      	ldr	r3, [r4, #20]
 800b236:	b2ed      	uxtb	r5, r5
 800b238:	4283      	cmp	r3, r0
 800b23a:	dc05      	bgt.n	800b248 <__swbuf_r+0x56>
 800b23c:	0021      	movs	r1, r4
 800b23e:	0030      	movs	r0, r6
 800b240:	f7ff ffac 	bl	800b19c <_fflush_r>
 800b244:	2800      	cmp	r0, #0
 800b246:	d1ed      	bne.n	800b224 <__swbuf_r+0x32>
 800b248:	68a3      	ldr	r3, [r4, #8]
 800b24a:	3001      	adds	r0, #1
 800b24c:	3b01      	subs	r3, #1
 800b24e:	60a3      	str	r3, [r4, #8]
 800b250:	6823      	ldr	r3, [r4, #0]
 800b252:	1c5a      	adds	r2, r3, #1
 800b254:	6022      	str	r2, [r4, #0]
 800b256:	701f      	strb	r7, [r3, #0]
 800b258:	6963      	ldr	r3, [r4, #20]
 800b25a:	4283      	cmp	r3, r0
 800b25c:	d004      	beq.n	800b268 <__swbuf_r+0x76>
 800b25e:	89a3      	ldrh	r3, [r4, #12]
 800b260:	07db      	lsls	r3, r3, #31
 800b262:	d5e1      	bpl.n	800b228 <__swbuf_r+0x36>
 800b264:	2d0a      	cmp	r5, #10
 800b266:	d1df      	bne.n	800b228 <__swbuf_r+0x36>
 800b268:	0021      	movs	r1, r4
 800b26a:	0030      	movs	r0, r6
 800b26c:	f7ff ff96 	bl	800b19c <_fflush_r>
 800b270:	2800      	cmp	r0, #0
 800b272:	d0d9      	beq.n	800b228 <__swbuf_r+0x36>
 800b274:	e7d6      	b.n	800b224 <__swbuf_r+0x32>
	...

0800b278 <__swsetup_r>:
 800b278:	4b2d      	ldr	r3, [pc, #180]	@ (800b330 <__swsetup_r+0xb8>)
 800b27a:	b570      	push	{r4, r5, r6, lr}
 800b27c:	0005      	movs	r5, r0
 800b27e:	6818      	ldr	r0, [r3, #0]
 800b280:	000c      	movs	r4, r1
 800b282:	2800      	cmp	r0, #0
 800b284:	d004      	beq.n	800b290 <__swsetup_r+0x18>
 800b286:	6a03      	ldr	r3, [r0, #32]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d101      	bne.n	800b290 <__swsetup_r+0x18>
 800b28c:	f7fd f8c6 	bl	800841c <__sinit>
 800b290:	230c      	movs	r3, #12
 800b292:	5ee2      	ldrsh	r2, [r4, r3]
 800b294:	0713      	lsls	r3, r2, #28
 800b296:	d423      	bmi.n	800b2e0 <__swsetup_r+0x68>
 800b298:	06d3      	lsls	r3, r2, #27
 800b29a:	d407      	bmi.n	800b2ac <__swsetup_r+0x34>
 800b29c:	2309      	movs	r3, #9
 800b29e:	602b      	str	r3, [r5, #0]
 800b2a0:	2340      	movs	r3, #64	@ 0x40
 800b2a2:	2001      	movs	r0, #1
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	81a3      	strh	r3, [r4, #12]
 800b2a8:	4240      	negs	r0, r0
 800b2aa:	e03a      	b.n	800b322 <__swsetup_r+0xaa>
 800b2ac:	0752      	lsls	r2, r2, #29
 800b2ae:	d513      	bpl.n	800b2d8 <__swsetup_r+0x60>
 800b2b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b2b2:	2900      	cmp	r1, #0
 800b2b4:	d008      	beq.n	800b2c8 <__swsetup_r+0x50>
 800b2b6:	0023      	movs	r3, r4
 800b2b8:	3344      	adds	r3, #68	@ 0x44
 800b2ba:	4299      	cmp	r1, r3
 800b2bc:	d002      	beq.n	800b2c4 <__swsetup_r+0x4c>
 800b2be:	0028      	movs	r0, r5
 800b2c0:	f7fe f890 	bl	80093e4 <_free_r>
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	6363      	str	r3, [r4, #52]	@ 0x34
 800b2c8:	2224      	movs	r2, #36	@ 0x24
 800b2ca:	89a3      	ldrh	r3, [r4, #12]
 800b2cc:	4393      	bics	r3, r2
 800b2ce:	81a3      	strh	r3, [r4, #12]
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	6063      	str	r3, [r4, #4]
 800b2d4:	6923      	ldr	r3, [r4, #16]
 800b2d6:	6023      	str	r3, [r4, #0]
 800b2d8:	2308      	movs	r3, #8
 800b2da:	89a2      	ldrh	r2, [r4, #12]
 800b2dc:	4313      	orrs	r3, r2
 800b2de:	81a3      	strh	r3, [r4, #12]
 800b2e0:	6923      	ldr	r3, [r4, #16]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d10b      	bne.n	800b2fe <__swsetup_r+0x86>
 800b2e6:	21a0      	movs	r1, #160	@ 0xa0
 800b2e8:	2280      	movs	r2, #128	@ 0x80
 800b2ea:	89a3      	ldrh	r3, [r4, #12]
 800b2ec:	0089      	lsls	r1, r1, #2
 800b2ee:	0092      	lsls	r2, r2, #2
 800b2f0:	400b      	ands	r3, r1
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d003      	beq.n	800b2fe <__swsetup_r+0x86>
 800b2f6:	0021      	movs	r1, r4
 800b2f8:	0028      	movs	r0, r5
 800b2fa:	f000 fc73 	bl	800bbe4 <__smakebuf_r>
 800b2fe:	230c      	movs	r3, #12
 800b300:	5ee2      	ldrsh	r2, [r4, r3]
 800b302:	2101      	movs	r1, #1
 800b304:	0013      	movs	r3, r2
 800b306:	400b      	ands	r3, r1
 800b308:	420a      	tst	r2, r1
 800b30a:	d00b      	beq.n	800b324 <__swsetup_r+0xac>
 800b30c:	2300      	movs	r3, #0
 800b30e:	60a3      	str	r3, [r4, #8]
 800b310:	6963      	ldr	r3, [r4, #20]
 800b312:	425b      	negs	r3, r3
 800b314:	61a3      	str	r3, [r4, #24]
 800b316:	2000      	movs	r0, #0
 800b318:	6923      	ldr	r3, [r4, #16]
 800b31a:	4283      	cmp	r3, r0
 800b31c:	d101      	bne.n	800b322 <__swsetup_r+0xaa>
 800b31e:	0613      	lsls	r3, r2, #24
 800b320:	d4be      	bmi.n	800b2a0 <__swsetup_r+0x28>
 800b322:	bd70      	pop	{r4, r5, r6, pc}
 800b324:	0791      	lsls	r1, r2, #30
 800b326:	d400      	bmi.n	800b32a <__swsetup_r+0xb2>
 800b328:	6963      	ldr	r3, [r4, #20]
 800b32a:	60a3      	str	r3, [r4, #8]
 800b32c:	e7f3      	b.n	800b316 <__swsetup_r+0x9e>
 800b32e:	46c0      	nop			@ (mov r8, r8)
 800b330:	20000018 	.word	0x20000018

0800b334 <memmove>:
 800b334:	b510      	push	{r4, lr}
 800b336:	4288      	cmp	r0, r1
 800b338:	d806      	bhi.n	800b348 <memmove+0x14>
 800b33a:	2300      	movs	r3, #0
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d008      	beq.n	800b352 <memmove+0x1e>
 800b340:	5ccc      	ldrb	r4, [r1, r3]
 800b342:	54c4      	strb	r4, [r0, r3]
 800b344:	3301      	adds	r3, #1
 800b346:	e7f9      	b.n	800b33c <memmove+0x8>
 800b348:	188b      	adds	r3, r1, r2
 800b34a:	4298      	cmp	r0, r3
 800b34c:	d2f5      	bcs.n	800b33a <memmove+0x6>
 800b34e:	3a01      	subs	r2, #1
 800b350:	d200      	bcs.n	800b354 <memmove+0x20>
 800b352:	bd10      	pop	{r4, pc}
 800b354:	5c8b      	ldrb	r3, [r1, r2]
 800b356:	5483      	strb	r3, [r0, r2]
 800b358:	e7f9      	b.n	800b34e <memmove+0x1a>

0800b35a <strncmp>:
 800b35a:	b530      	push	{r4, r5, lr}
 800b35c:	0005      	movs	r5, r0
 800b35e:	1e10      	subs	r0, r2, #0
 800b360:	d00b      	beq.n	800b37a <strncmp+0x20>
 800b362:	2400      	movs	r4, #0
 800b364:	3a01      	subs	r2, #1
 800b366:	5d2b      	ldrb	r3, [r5, r4]
 800b368:	5d08      	ldrb	r0, [r1, r4]
 800b36a:	4283      	cmp	r3, r0
 800b36c:	d104      	bne.n	800b378 <strncmp+0x1e>
 800b36e:	42a2      	cmp	r2, r4
 800b370:	d002      	beq.n	800b378 <strncmp+0x1e>
 800b372:	3401      	adds	r4, #1
 800b374:	2b00      	cmp	r3, #0
 800b376:	d1f6      	bne.n	800b366 <strncmp+0xc>
 800b378:	1a18      	subs	r0, r3, r0
 800b37a:	bd30      	pop	{r4, r5, pc}

0800b37c <nan>:
 800b37c:	2000      	movs	r0, #0
 800b37e:	4901      	ldr	r1, [pc, #4]	@ (800b384 <nan+0x8>)
 800b380:	4770      	bx	lr
 800b382:	46c0      	nop			@ (mov r8, r8)
 800b384:	7ff80000 	.word	0x7ff80000

0800b388 <__assert_func>:
 800b388:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b38a:	0014      	movs	r4, r2
 800b38c:	001a      	movs	r2, r3
 800b38e:	4b09      	ldr	r3, [pc, #36]	@ (800b3b4 <__assert_func+0x2c>)
 800b390:	0005      	movs	r5, r0
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	000e      	movs	r6, r1
 800b396:	68d8      	ldr	r0, [r3, #12]
 800b398:	4b07      	ldr	r3, [pc, #28]	@ (800b3b8 <__assert_func+0x30>)
 800b39a:	2c00      	cmp	r4, #0
 800b39c:	d101      	bne.n	800b3a2 <__assert_func+0x1a>
 800b39e:	4b07      	ldr	r3, [pc, #28]	@ (800b3bc <__assert_func+0x34>)
 800b3a0:	001c      	movs	r4, r3
 800b3a2:	4907      	ldr	r1, [pc, #28]	@ (800b3c0 <__assert_func+0x38>)
 800b3a4:	9301      	str	r3, [sp, #4]
 800b3a6:	9402      	str	r4, [sp, #8]
 800b3a8:	002b      	movs	r3, r5
 800b3aa:	9600      	str	r6, [sp, #0]
 800b3ac:	f000 fbe0 	bl	800bb70 <fiprintf>
 800b3b0:	f000 fc7e 	bl	800bcb0 <abort>
 800b3b4:	20000018 	.word	0x20000018
 800b3b8:	0800c74a 	.word	0x0800c74a
 800b3bc:	0800c785 	.word	0x0800c785
 800b3c0:	0800c757 	.word	0x0800c757

0800b3c4 <_calloc_r>:
 800b3c4:	b570      	push	{r4, r5, r6, lr}
 800b3c6:	0c0b      	lsrs	r3, r1, #16
 800b3c8:	0c15      	lsrs	r5, r2, #16
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d11e      	bne.n	800b40c <_calloc_r+0x48>
 800b3ce:	2d00      	cmp	r5, #0
 800b3d0:	d10c      	bne.n	800b3ec <_calloc_r+0x28>
 800b3d2:	b289      	uxth	r1, r1
 800b3d4:	b294      	uxth	r4, r2
 800b3d6:	434c      	muls	r4, r1
 800b3d8:	0021      	movs	r1, r4
 800b3da:	f7fc f88f 	bl	80074fc <_malloc_r>
 800b3de:	1e05      	subs	r5, r0, #0
 800b3e0:	d01a      	beq.n	800b418 <_calloc_r+0x54>
 800b3e2:	0022      	movs	r2, r4
 800b3e4:	2100      	movs	r1, #0
 800b3e6:	f7fd f8c9 	bl	800857c <memset>
 800b3ea:	e016      	b.n	800b41a <_calloc_r+0x56>
 800b3ec:	1c2b      	adds	r3, r5, #0
 800b3ee:	1c0c      	adds	r4, r1, #0
 800b3f0:	b289      	uxth	r1, r1
 800b3f2:	b292      	uxth	r2, r2
 800b3f4:	434a      	muls	r2, r1
 800b3f6:	b29b      	uxth	r3, r3
 800b3f8:	b2a1      	uxth	r1, r4
 800b3fa:	4359      	muls	r1, r3
 800b3fc:	0c14      	lsrs	r4, r2, #16
 800b3fe:	190c      	adds	r4, r1, r4
 800b400:	0c23      	lsrs	r3, r4, #16
 800b402:	d107      	bne.n	800b414 <_calloc_r+0x50>
 800b404:	0424      	lsls	r4, r4, #16
 800b406:	b292      	uxth	r2, r2
 800b408:	4314      	orrs	r4, r2
 800b40a:	e7e5      	b.n	800b3d8 <_calloc_r+0x14>
 800b40c:	2d00      	cmp	r5, #0
 800b40e:	d101      	bne.n	800b414 <_calloc_r+0x50>
 800b410:	1c14      	adds	r4, r2, #0
 800b412:	e7ed      	b.n	800b3f0 <_calloc_r+0x2c>
 800b414:	230c      	movs	r3, #12
 800b416:	6003      	str	r3, [r0, #0]
 800b418:	2500      	movs	r5, #0
 800b41a:	0028      	movs	r0, r5
 800b41c:	bd70      	pop	{r4, r5, r6, pc}

0800b41e <rshift>:
 800b41e:	0002      	movs	r2, r0
 800b420:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b422:	6904      	ldr	r4, [r0, #16]
 800b424:	b085      	sub	sp, #20
 800b426:	3214      	adds	r2, #20
 800b428:	114b      	asrs	r3, r1, #5
 800b42a:	0016      	movs	r6, r2
 800b42c:	9302      	str	r3, [sp, #8]
 800b42e:	429c      	cmp	r4, r3
 800b430:	dd31      	ble.n	800b496 <rshift+0x78>
 800b432:	261f      	movs	r6, #31
 800b434:	000f      	movs	r7, r1
 800b436:	009b      	lsls	r3, r3, #2
 800b438:	00a5      	lsls	r5, r4, #2
 800b43a:	18d3      	adds	r3, r2, r3
 800b43c:	4037      	ands	r7, r6
 800b43e:	1955      	adds	r5, r2, r5
 800b440:	9300      	str	r3, [sp, #0]
 800b442:	9701      	str	r7, [sp, #4]
 800b444:	4231      	tst	r1, r6
 800b446:	d10d      	bne.n	800b464 <rshift+0x46>
 800b448:	0016      	movs	r6, r2
 800b44a:	0019      	movs	r1, r3
 800b44c:	428d      	cmp	r5, r1
 800b44e:	d836      	bhi.n	800b4be <rshift+0xa0>
 800b450:	9b00      	ldr	r3, [sp, #0]
 800b452:	2600      	movs	r6, #0
 800b454:	3b03      	subs	r3, #3
 800b456:	429d      	cmp	r5, r3
 800b458:	d302      	bcc.n	800b460 <rshift+0x42>
 800b45a:	9b02      	ldr	r3, [sp, #8]
 800b45c:	1ae4      	subs	r4, r4, r3
 800b45e:	00a6      	lsls	r6, r4, #2
 800b460:	1996      	adds	r6, r2, r6
 800b462:	e018      	b.n	800b496 <rshift+0x78>
 800b464:	2120      	movs	r1, #32
 800b466:	9e01      	ldr	r6, [sp, #4]
 800b468:	9f01      	ldr	r7, [sp, #4]
 800b46a:	1b89      	subs	r1, r1, r6
 800b46c:	9e00      	ldr	r6, [sp, #0]
 800b46e:	9103      	str	r1, [sp, #12]
 800b470:	ce02      	ldmia	r6!, {r1}
 800b472:	4694      	mov	ip, r2
 800b474:	40f9      	lsrs	r1, r7
 800b476:	42b5      	cmp	r5, r6
 800b478:	d816      	bhi.n	800b4a8 <rshift+0x8a>
 800b47a:	9b00      	ldr	r3, [sp, #0]
 800b47c:	2600      	movs	r6, #0
 800b47e:	3301      	adds	r3, #1
 800b480:	429d      	cmp	r5, r3
 800b482:	d303      	bcc.n	800b48c <rshift+0x6e>
 800b484:	9b02      	ldr	r3, [sp, #8]
 800b486:	1ae4      	subs	r4, r4, r3
 800b488:	00a6      	lsls	r6, r4, #2
 800b48a:	3e04      	subs	r6, #4
 800b48c:	1996      	adds	r6, r2, r6
 800b48e:	6031      	str	r1, [r6, #0]
 800b490:	2900      	cmp	r1, #0
 800b492:	d000      	beq.n	800b496 <rshift+0x78>
 800b494:	3604      	adds	r6, #4
 800b496:	1ab1      	subs	r1, r6, r2
 800b498:	1089      	asrs	r1, r1, #2
 800b49a:	6101      	str	r1, [r0, #16]
 800b49c:	4296      	cmp	r6, r2
 800b49e:	d101      	bne.n	800b4a4 <rshift+0x86>
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	6143      	str	r3, [r0, #20]
 800b4a4:	b005      	add	sp, #20
 800b4a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4a8:	6837      	ldr	r7, [r6, #0]
 800b4aa:	9b03      	ldr	r3, [sp, #12]
 800b4ac:	409f      	lsls	r7, r3
 800b4ae:	430f      	orrs	r7, r1
 800b4b0:	4661      	mov	r1, ip
 800b4b2:	c180      	stmia	r1!, {r7}
 800b4b4:	468c      	mov	ip, r1
 800b4b6:	9b01      	ldr	r3, [sp, #4]
 800b4b8:	ce02      	ldmia	r6!, {r1}
 800b4ba:	40d9      	lsrs	r1, r3
 800b4bc:	e7db      	b.n	800b476 <rshift+0x58>
 800b4be:	c980      	ldmia	r1!, {r7}
 800b4c0:	c680      	stmia	r6!, {r7}
 800b4c2:	e7c3      	b.n	800b44c <rshift+0x2e>

0800b4c4 <__hexdig_fun>:
 800b4c4:	0002      	movs	r2, r0
 800b4c6:	3a30      	subs	r2, #48	@ 0x30
 800b4c8:	0003      	movs	r3, r0
 800b4ca:	2a09      	cmp	r2, #9
 800b4cc:	d802      	bhi.n	800b4d4 <__hexdig_fun+0x10>
 800b4ce:	3b20      	subs	r3, #32
 800b4d0:	b2d8      	uxtb	r0, r3
 800b4d2:	4770      	bx	lr
 800b4d4:	0002      	movs	r2, r0
 800b4d6:	3a61      	subs	r2, #97	@ 0x61
 800b4d8:	2a05      	cmp	r2, #5
 800b4da:	d801      	bhi.n	800b4e0 <__hexdig_fun+0x1c>
 800b4dc:	3b47      	subs	r3, #71	@ 0x47
 800b4de:	e7f7      	b.n	800b4d0 <__hexdig_fun+0xc>
 800b4e0:	001a      	movs	r2, r3
 800b4e2:	3a41      	subs	r2, #65	@ 0x41
 800b4e4:	2000      	movs	r0, #0
 800b4e6:	2a05      	cmp	r2, #5
 800b4e8:	d8f3      	bhi.n	800b4d2 <__hexdig_fun+0xe>
 800b4ea:	3b27      	subs	r3, #39	@ 0x27
 800b4ec:	e7f0      	b.n	800b4d0 <__hexdig_fun+0xc>
	...

0800b4f0 <__gethex>:
 800b4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4f2:	b089      	sub	sp, #36	@ 0x24
 800b4f4:	9307      	str	r3, [sp, #28]
 800b4f6:	680b      	ldr	r3, [r1, #0]
 800b4f8:	9201      	str	r2, [sp, #4]
 800b4fa:	9003      	str	r0, [sp, #12]
 800b4fc:	9106      	str	r1, [sp, #24]
 800b4fe:	1c9a      	adds	r2, r3, #2
 800b500:	0011      	movs	r1, r2
 800b502:	3201      	adds	r2, #1
 800b504:	1e50      	subs	r0, r2, #1
 800b506:	7800      	ldrb	r0, [r0, #0]
 800b508:	2830      	cmp	r0, #48	@ 0x30
 800b50a:	d0f9      	beq.n	800b500 <__gethex+0x10>
 800b50c:	1acb      	subs	r3, r1, r3
 800b50e:	3b02      	subs	r3, #2
 800b510:	9305      	str	r3, [sp, #20]
 800b512:	9100      	str	r1, [sp, #0]
 800b514:	f7ff ffd6 	bl	800b4c4 <__hexdig_fun>
 800b518:	2300      	movs	r3, #0
 800b51a:	001d      	movs	r5, r3
 800b51c:	9302      	str	r3, [sp, #8]
 800b51e:	4298      	cmp	r0, r3
 800b520:	d11e      	bne.n	800b560 <__gethex+0x70>
 800b522:	2201      	movs	r2, #1
 800b524:	49a6      	ldr	r1, [pc, #664]	@ (800b7c0 <__gethex+0x2d0>)
 800b526:	9800      	ldr	r0, [sp, #0]
 800b528:	f7ff ff17 	bl	800b35a <strncmp>
 800b52c:	0007      	movs	r7, r0
 800b52e:	42a8      	cmp	r0, r5
 800b530:	d000      	beq.n	800b534 <__gethex+0x44>
 800b532:	e06a      	b.n	800b60a <__gethex+0x11a>
 800b534:	9b00      	ldr	r3, [sp, #0]
 800b536:	7858      	ldrb	r0, [r3, #1]
 800b538:	1c5c      	adds	r4, r3, #1
 800b53a:	f7ff ffc3 	bl	800b4c4 <__hexdig_fun>
 800b53e:	2301      	movs	r3, #1
 800b540:	9302      	str	r3, [sp, #8]
 800b542:	42a8      	cmp	r0, r5
 800b544:	d02f      	beq.n	800b5a6 <__gethex+0xb6>
 800b546:	9400      	str	r4, [sp, #0]
 800b548:	9b00      	ldr	r3, [sp, #0]
 800b54a:	7818      	ldrb	r0, [r3, #0]
 800b54c:	2830      	cmp	r0, #48	@ 0x30
 800b54e:	d009      	beq.n	800b564 <__gethex+0x74>
 800b550:	f7ff ffb8 	bl	800b4c4 <__hexdig_fun>
 800b554:	4242      	negs	r2, r0
 800b556:	4142      	adcs	r2, r0
 800b558:	2301      	movs	r3, #1
 800b55a:	0025      	movs	r5, r4
 800b55c:	9202      	str	r2, [sp, #8]
 800b55e:	9305      	str	r3, [sp, #20]
 800b560:	9c00      	ldr	r4, [sp, #0]
 800b562:	e004      	b.n	800b56e <__gethex+0x7e>
 800b564:	9b00      	ldr	r3, [sp, #0]
 800b566:	3301      	adds	r3, #1
 800b568:	9300      	str	r3, [sp, #0]
 800b56a:	e7ed      	b.n	800b548 <__gethex+0x58>
 800b56c:	3401      	adds	r4, #1
 800b56e:	7820      	ldrb	r0, [r4, #0]
 800b570:	f7ff ffa8 	bl	800b4c4 <__hexdig_fun>
 800b574:	1e07      	subs	r7, r0, #0
 800b576:	d1f9      	bne.n	800b56c <__gethex+0x7c>
 800b578:	2201      	movs	r2, #1
 800b57a:	0020      	movs	r0, r4
 800b57c:	4990      	ldr	r1, [pc, #576]	@ (800b7c0 <__gethex+0x2d0>)
 800b57e:	f7ff feec 	bl	800b35a <strncmp>
 800b582:	2800      	cmp	r0, #0
 800b584:	d10d      	bne.n	800b5a2 <__gethex+0xb2>
 800b586:	2d00      	cmp	r5, #0
 800b588:	d106      	bne.n	800b598 <__gethex+0xa8>
 800b58a:	3401      	adds	r4, #1
 800b58c:	0025      	movs	r5, r4
 800b58e:	7820      	ldrb	r0, [r4, #0]
 800b590:	f7ff ff98 	bl	800b4c4 <__hexdig_fun>
 800b594:	2800      	cmp	r0, #0
 800b596:	d102      	bne.n	800b59e <__gethex+0xae>
 800b598:	1b2d      	subs	r5, r5, r4
 800b59a:	00af      	lsls	r7, r5, #2
 800b59c:	e003      	b.n	800b5a6 <__gethex+0xb6>
 800b59e:	3401      	adds	r4, #1
 800b5a0:	e7f5      	b.n	800b58e <__gethex+0x9e>
 800b5a2:	2d00      	cmp	r5, #0
 800b5a4:	d1f8      	bne.n	800b598 <__gethex+0xa8>
 800b5a6:	2220      	movs	r2, #32
 800b5a8:	7823      	ldrb	r3, [r4, #0]
 800b5aa:	0026      	movs	r6, r4
 800b5ac:	4393      	bics	r3, r2
 800b5ae:	2b50      	cmp	r3, #80	@ 0x50
 800b5b0:	d11d      	bne.n	800b5ee <__gethex+0xfe>
 800b5b2:	7863      	ldrb	r3, [r4, #1]
 800b5b4:	2b2b      	cmp	r3, #43	@ 0x2b
 800b5b6:	d02d      	beq.n	800b614 <__gethex+0x124>
 800b5b8:	2b2d      	cmp	r3, #45	@ 0x2d
 800b5ba:	d02f      	beq.n	800b61c <__gethex+0x12c>
 800b5bc:	2300      	movs	r3, #0
 800b5be:	1c66      	adds	r6, r4, #1
 800b5c0:	9304      	str	r3, [sp, #16]
 800b5c2:	7830      	ldrb	r0, [r6, #0]
 800b5c4:	f7ff ff7e 	bl	800b4c4 <__hexdig_fun>
 800b5c8:	1e43      	subs	r3, r0, #1
 800b5ca:	b2db      	uxtb	r3, r3
 800b5cc:	0005      	movs	r5, r0
 800b5ce:	2b18      	cmp	r3, #24
 800b5d0:	d82a      	bhi.n	800b628 <__gethex+0x138>
 800b5d2:	7870      	ldrb	r0, [r6, #1]
 800b5d4:	f7ff ff76 	bl	800b4c4 <__hexdig_fun>
 800b5d8:	1e43      	subs	r3, r0, #1
 800b5da:	b2db      	uxtb	r3, r3
 800b5dc:	3601      	adds	r6, #1
 800b5de:	3d10      	subs	r5, #16
 800b5e0:	2b18      	cmp	r3, #24
 800b5e2:	d91d      	bls.n	800b620 <__gethex+0x130>
 800b5e4:	9b04      	ldr	r3, [sp, #16]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d000      	beq.n	800b5ec <__gethex+0xfc>
 800b5ea:	426d      	negs	r5, r5
 800b5ec:	197f      	adds	r7, r7, r5
 800b5ee:	9b06      	ldr	r3, [sp, #24]
 800b5f0:	601e      	str	r6, [r3, #0]
 800b5f2:	9b02      	ldr	r3, [sp, #8]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d019      	beq.n	800b62c <__gethex+0x13c>
 800b5f8:	9b05      	ldr	r3, [sp, #20]
 800b5fa:	2606      	movs	r6, #6
 800b5fc:	425a      	negs	r2, r3
 800b5fe:	4153      	adcs	r3, r2
 800b600:	425b      	negs	r3, r3
 800b602:	401e      	ands	r6, r3
 800b604:	0030      	movs	r0, r6
 800b606:	b009      	add	sp, #36	@ 0x24
 800b608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b60a:	2301      	movs	r3, #1
 800b60c:	2700      	movs	r7, #0
 800b60e:	9c00      	ldr	r4, [sp, #0]
 800b610:	9302      	str	r3, [sp, #8]
 800b612:	e7c8      	b.n	800b5a6 <__gethex+0xb6>
 800b614:	2300      	movs	r3, #0
 800b616:	9304      	str	r3, [sp, #16]
 800b618:	1ca6      	adds	r6, r4, #2
 800b61a:	e7d2      	b.n	800b5c2 <__gethex+0xd2>
 800b61c:	2301      	movs	r3, #1
 800b61e:	e7fa      	b.n	800b616 <__gethex+0x126>
 800b620:	230a      	movs	r3, #10
 800b622:	435d      	muls	r5, r3
 800b624:	182d      	adds	r5, r5, r0
 800b626:	e7d4      	b.n	800b5d2 <__gethex+0xe2>
 800b628:	0026      	movs	r6, r4
 800b62a:	e7e0      	b.n	800b5ee <__gethex+0xfe>
 800b62c:	9b00      	ldr	r3, [sp, #0]
 800b62e:	9902      	ldr	r1, [sp, #8]
 800b630:	1ae3      	subs	r3, r4, r3
 800b632:	3b01      	subs	r3, #1
 800b634:	2b07      	cmp	r3, #7
 800b636:	dc0a      	bgt.n	800b64e <__gethex+0x15e>
 800b638:	9803      	ldr	r0, [sp, #12]
 800b63a:	f7fd ff1d 	bl	8009478 <_Balloc>
 800b63e:	1e05      	subs	r5, r0, #0
 800b640:	d108      	bne.n	800b654 <__gethex+0x164>
 800b642:	002a      	movs	r2, r5
 800b644:	21e4      	movs	r1, #228	@ 0xe4
 800b646:	4b5f      	ldr	r3, [pc, #380]	@ (800b7c4 <__gethex+0x2d4>)
 800b648:	485f      	ldr	r0, [pc, #380]	@ (800b7c8 <__gethex+0x2d8>)
 800b64a:	f7ff fe9d 	bl	800b388 <__assert_func>
 800b64e:	3101      	adds	r1, #1
 800b650:	105b      	asrs	r3, r3, #1
 800b652:	e7ef      	b.n	800b634 <__gethex+0x144>
 800b654:	0003      	movs	r3, r0
 800b656:	3314      	adds	r3, #20
 800b658:	9302      	str	r3, [sp, #8]
 800b65a:	9305      	str	r3, [sp, #20]
 800b65c:	2300      	movs	r3, #0
 800b65e:	001e      	movs	r6, r3
 800b660:	9304      	str	r3, [sp, #16]
 800b662:	9b00      	ldr	r3, [sp, #0]
 800b664:	42a3      	cmp	r3, r4
 800b666:	d338      	bcc.n	800b6da <__gethex+0x1ea>
 800b668:	9c05      	ldr	r4, [sp, #20]
 800b66a:	9b02      	ldr	r3, [sp, #8]
 800b66c:	c440      	stmia	r4!, {r6}
 800b66e:	1ae4      	subs	r4, r4, r3
 800b670:	10a4      	asrs	r4, r4, #2
 800b672:	0030      	movs	r0, r6
 800b674:	612c      	str	r4, [r5, #16]
 800b676:	f7fd fff7 	bl	8009668 <__hi0bits>
 800b67a:	9b01      	ldr	r3, [sp, #4]
 800b67c:	0164      	lsls	r4, r4, #5
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	1a26      	subs	r6, r4, r0
 800b682:	9300      	str	r3, [sp, #0]
 800b684:	429e      	cmp	r6, r3
 800b686:	dd52      	ble.n	800b72e <__gethex+0x23e>
 800b688:	1af6      	subs	r6, r6, r3
 800b68a:	0031      	movs	r1, r6
 800b68c:	0028      	movs	r0, r5
 800b68e:	f7fe fb9a 	bl	8009dc6 <__any_on>
 800b692:	1e04      	subs	r4, r0, #0
 800b694:	d00f      	beq.n	800b6b6 <__gethex+0x1c6>
 800b696:	2401      	movs	r4, #1
 800b698:	231f      	movs	r3, #31
 800b69a:	0020      	movs	r0, r4
 800b69c:	1e72      	subs	r2, r6, #1
 800b69e:	4013      	ands	r3, r2
 800b6a0:	4098      	lsls	r0, r3
 800b6a2:	0003      	movs	r3, r0
 800b6a4:	1151      	asrs	r1, r2, #5
 800b6a6:	9802      	ldr	r0, [sp, #8]
 800b6a8:	0089      	lsls	r1, r1, #2
 800b6aa:	5809      	ldr	r1, [r1, r0]
 800b6ac:	4219      	tst	r1, r3
 800b6ae:	d002      	beq.n	800b6b6 <__gethex+0x1c6>
 800b6b0:	42a2      	cmp	r2, r4
 800b6b2:	dc34      	bgt.n	800b71e <__gethex+0x22e>
 800b6b4:	2402      	movs	r4, #2
 800b6b6:	0031      	movs	r1, r6
 800b6b8:	0028      	movs	r0, r5
 800b6ba:	f7ff feb0 	bl	800b41e <rshift>
 800b6be:	19bf      	adds	r7, r7, r6
 800b6c0:	9b01      	ldr	r3, [sp, #4]
 800b6c2:	689b      	ldr	r3, [r3, #8]
 800b6c4:	42bb      	cmp	r3, r7
 800b6c6:	da42      	bge.n	800b74e <__gethex+0x25e>
 800b6c8:	0029      	movs	r1, r5
 800b6ca:	9803      	ldr	r0, [sp, #12]
 800b6cc:	f7fd ff18 	bl	8009500 <_Bfree>
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b6d4:	26a3      	movs	r6, #163	@ 0xa3
 800b6d6:	6013      	str	r3, [r2, #0]
 800b6d8:	e794      	b.n	800b604 <__gethex+0x114>
 800b6da:	3c01      	subs	r4, #1
 800b6dc:	7823      	ldrb	r3, [r4, #0]
 800b6de:	2b2e      	cmp	r3, #46	@ 0x2e
 800b6e0:	d012      	beq.n	800b708 <__gethex+0x218>
 800b6e2:	9b04      	ldr	r3, [sp, #16]
 800b6e4:	2b20      	cmp	r3, #32
 800b6e6:	d104      	bne.n	800b6f2 <__gethex+0x202>
 800b6e8:	9b05      	ldr	r3, [sp, #20]
 800b6ea:	c340      	stmia	r3!, {r6}
 800b6ec:	2600      	movs	r6, #0
 800b6ee:	9305      	str	r3, [sp, #20]
 800b6f0:	9604      	str	r6, [sp, #16]
 800b6f2:	7820      	ldrb	r0, [r4, #0]
 800b6f4:	f7ff fee6 	bl	800b4c4 <__hexdig_fun>
 800b6f8:	230f      	movs	r3, #15
 800b6fa:	4018      	ands	r0, r3
 800b6fc:	9b04      	ldr	r3, [sp, #16]
 800b6fe:	4098      	lsls	r0, r3
 800b700:	3304      	adds	r3, #4
 800b702:	4306      	orrs	r6, r0
 800b704:	9304      	str	r3, [sp, #16]
 800b706:	e7ac      	b.n	800b662 <__gethex+0x172>
 800b708:	9b00      	ldr	r3, [sp, #0]
 800b70a:	42a3      	cmp	r3, r4
 800b70c:	d8e9      	bhi.n	800b6e2 <__gethex+0x1f2>
 800b70e:	2201      	movs	r2, #1
 800b710:	0020      	movs	r0, r4
 800b712:	492b      	ldr	r1, [pc, #172]	@ (800b7c0 <__gethex+0x2d0>)
 800b714:	f7ff fe21 	bl	800b35a <strncmp>
 800b718:	2800      	cmp	r0, #0
 800b71a:	d1e2      	bne.n	800b6e2 <__gethex+0x1f2>
 800b71c:	e7a1      	b.n	800b662 <__gethex+0x172>
 800b71e:	0028      	movs	r0, r5
 800b720:	1eb1      	subs	r1, r6, #2
 800b722:	f7fe fb50 	bl	8009dc6 <__any_on>
 800b726:	2800      	cmp	r0, #0
 800b728:	d0c4      	beq.n	800b6b4 <__gethex+0x1c4>
 800b72a:	2403      	movs	r4, #3
 800b72c:	e7c3      	b.n	800b6b6 <__gethex+0x1c6>
 800b72e:	9b00      	ldr	r3, [sp, #0]
 800b730:	2400      	movs	r4, #0
 800b732:	429e      	cmp	r6, r3
 800b734:	dac4      	bge.n	800b6c0 <__gethex+0x1d0>
 800b736:	1b9e      	subs	r6, r3, r6
 800b738:	0029      	movs	r1, r5
 800b73a:	0032      	movs	r2, r6
 800b73c:	9803      	ldr	r0, [sp, #12]
 800b73e:	f7fe f909 	bl	8009954 <__lshift>
 800b742:	0003      	movs	r3, r0
 800b744:	3314      	adds	r3, #20
 800b746:	0005      	movs	r5, r0
 800b748:	1bbf      	subs	r7, r7, r6
 800b74a:	9302      	str	r3, [sp, #8]
 800b74c:	e7b8      	b.n	800b6c0 <__gethex+0x1d0>
 800b74e:	9b01      	ldr	r3, [sp, #4]
 800b750:	685e      	ldr	r6, [r3, #4]
 800b752:	42be      	cmp	r6, r7
 800b754:	dd6f      	ble.n	800b836 <__gethex+0x346>
 800b756:	9b00      	ldr	r3, [sp, #0]
 800b758:	1bf6      	subs	r6, r6, r7
 800b75a:	42b3      	cmp	r3, r6
 800b75c:	dc36      	bgt.n	800b7cc <__gethex+0x2dc>
 800b75e:	9b01      	ldr	r3, [sp, #4]
 800b760:	68db      	ldr	r3, [r3, #12]
 800b762:	2b02      	cmp	r3, #2
 800b764:	d024      	beq.n	800b7b0 <__gethex+0x2c0>
 800b766:	2b03      	cmp	r3, #3
 800b768:	d026      	beq.n	800b7b8 <__gethex+0x2c8>
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	d117      	bne.n	800b79e <__gethex+0x2ae>
 800b76e:	9b00      	ldr	r3, [sp, #0]
 800b770:	42b3      	cmp	r3, r6
 800b772:	d114      	bne.n	800b79e <__gethex+0x2ae>
 800b774:	2b01      	cmp	r3, #1
 800b776:	d10b      	bne.n	800b790 <__gethex+0x2a0>
 800b778:	9b01      	ldr	r3, [sp, #4]
 800b77a:	9a07      	ldr	r2, [sp, #28]
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	2662      	movs	r6, #98	@ 0x62
 800b780:	6013      	str	r3, [r2, #0]
 800b782:	2301      	movs	r3, #1
 800b784:	9a02      	ldr	r2, [sp, #8]
 800b786:	612b      	str	r3, [r5, #16]
 800b788:	6013      	str	r3, [r2, #0]
 800b78a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b78c:	601d      	str	r5, [r3, #0]
 800b78e:	e739      	b.n	800b604 <__gethex+0x114>
 800b790:	9900      	ldr	r1, [sp, #0]
 800b792:	0028      	movs	r0, r5
 800b794:	3901      	subs	r1, #1
 800b796:	f7fe fb16 	bl	8009dc6 <__any_on>
 800b79a:	2800      	cmp	r0, #0
 800b79c:	d1ec      	bne.n	800b778 <__gethex+0x288>
 800b79e:	0029      	movs	r1, r5
 800b7a0:	9803      	ldr	r0, [sp, #12]
 800b7a2:	f7fd fead 	bl	8009500 <_Bfree>
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b7aa:	2650      	movs	r6, #80	@ 0x50
 800b7ac:	6013      	str	r3, [r2, #0]
 800b7ae:	e729      	b.n	800b604 <__gethex+0x114>
 800b7b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d1f3      	bne.n	800b79e <__gethex+0x2ae>
 800b7b6:	e7df      	b.n	800b778 <__gethex+0x288>
 800b7b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d1dc      	bne.n	800b778 <__gethex+0x288>
 800b7be:	e7ee      	b.n	800b79e <__gethex+0x2ae>
 800b7c0:	0800c5d8 	.word	0x0800c5d8
 800b7c4:	0800c46d 	.word	0x0800c46d
 800b7c8:	0800c786 	.word	0x0800c786
 800b7cc:	1e77      	subs	r7, r6, #1
 800b7ce:	2c00      	cmp	r4, #0
 800b7d0:	d12f      	bne.n	800b832 <__gethex+0x342>
 800b7d2:	2f00      	cmp	r7, #0
 800b7d4:	d004      	beq.n	800b7e0 <__gethex+0x2f0>
 800b7d6:	0039      	movs	r1, r7
 800b7d8:	0028      	movs	r0, r5
 800b7da:	f7fe faf4 	bl	8009dc6 <__any_on>
 800b7de:	0004      	movs	r4, r0
 800b7e0:	231f      	movs	r3, #31
 800b7e2:	117a      	asrs	r2, r7, #5
 800b7e4:	401f      	ands	r7, r3
 800b7e6:	3b1e      	subs	r3, #30
 800b7e8:	40bb      	lsls	r3, r7
 800b7ea:	9902      	ldr	r1, [sp, #8]
 800b7ec:	0092      	lsls	r2, r2, #2
 800b7ee:	5852      	ldr	r2, [r2, r1]
 800b7f0:	421a      	tst	r2, r3
 800b7f2:	d001      	beq.n	800b7f8 <__gethex+0x308>
 800b7f4:	2302      	movs	r3, #2
 800b7f6:	431c      	orrs	r4, r3
 800b7f8:	9b00      	ldr	r3, [sp, #0]
 800b7fa:	0031      	movs	r1, r6
 800b7fc:	1b9b      	subs	r3, r3, r6
 800b7fe:	2602      	movs	r6, #2
 800b800:	0028      	movs	r0, r5
 800b802:	9300      	str	r3, [sp, #0]
 800b804:	f7ff fe0b 	bl	800b41e <rshift>
 800b808:	9b01      	ldr	r3, [sp, #4]
 800b80a:	685f      	ldr	r7, [r3, #4]
 800b80c:	2c00      	cmp	r4, #0
 800b80e:	d03f      	beq.n	800b890 <__gethex+0x3a0>
 800b810:	9b01      	ldr	r3, [sp, #4]
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	2b02      	cmp	r3, #2
 800b816:	d010      	beq.n	800b83a <__gethex+0x34a>
 800b818:	2b03      	cmp	r3, #3
 800b81a:	d012      	beq.n	800b842 <__gethex+0x352>
 800b81c:	2b01      	cmp	r3, #1
 800b81e:	d106      	bne.n	800b82e <__gethex+0x33e>
 800b820:	07a2      	lsls	r2, r4, #30
 800b822:	d504      	bpl.n	800b82e <__gethex+0x33e>
 800b824:	9a02      	ldr	r2, [sp, #8]
 800b826:	6812      	ldr	r2, [r2, #0]
 800b828:	4314      	orrs	r4, r2
 800b82a:	421c      	tst	r4, r3
 800b82c:	d10c      	bne.n	800b848 <__gethex+0x358>
 800b82e:	2310      	movs	r3, #16
 800b830:	e02d      	b.n	800b88e <__gethex+0x39e>
 800b832:	2401      	movs	r4, #1
 800b834:	e7d4      	b.n	800b7e0 <__gethex+0x2f0>
 800b836:	2601      	movs	r6, #1
 800b838:	e7e8      	b.n	800b80c <__gethex+0x31c>
 800b83a:	2301      	movs	r3, #1
 800b83c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b83e:	1a9b      	subs	r3, r3, r2
 800b840:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b842:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b844:	2b00      	cmp	r3, #0
 800b846:	d0f2      	beq.n	800b82e <__gethex+0x33e>
 800b848:	692b      	ldr	r3, [r5, #16]
 800b84a:	2000      	movs	r0, #0
 800b84c:	9302      	str	r3, [sp, #8]
 800b84e:	009b      	lsls	r3, r3, #2
 800b850:	9304      	str	r3, [sp, #16]
 800b852:	002b      	movs	r3, r5
 800b854:	9a04      	ldr	r2, [sp, #16]
 800b856:	3314      	adds	r3, #20
 800b858:	1899      	adds	r1, r3, r2
 800b85a:	681a      	ldr	r2, [r3, #0]
 800b85c:	1c54      	adds	r4, r2, #1
 800b85e:	d01c      	beq.n	800b89a <__gethex+0x3aa>
 800b860:	3201      	adds	r2, #1
 800b862:	601a      	str	r2, [r3, #0]
 800b864:	002b      	movs	r3, r5
 800b866:	3314      	adds	r3, #20
 800b868:	2e02      	cmp	r6, #2
 800b86a:	d13f      	bne.n	800b8ec <__gethex+0x3fc>
 800b86c:	9a01      	ldr	r2, [sp, #4]
 800b86e:	9900      	ldr	r1, [sp, #0]
 800b870:	6812      	ldr	r2, [r2, #0]
 800b872:	3a01      	subs	r2, #1
 800b874:	428a      	cmp	r2, r1
 800b876:	d109      	bne.n	800b88c <__gethex+0x39c>
 800b878:	000a      	movs	r2, r1
 800b87a:	201f      	movs	r0, #31
 800b87c:	4010      	ands	r0, r2
 800b87e:	2201      	movs	r2, #1
 800b880:	4082      	lsls	r2, r0
 800b882:	1149      	asrs	r1, r1, #5
 800b884:	0089      	lsls	r1, r1, #2
 800b886:	58cb      	ldr	r3, [r1, r3]
 800b888:	4213      	tst	r3, r2
 800b88a:	d13d      	bne.n	800b908 <__gethex+0x418>
 800b88c:	2320      	movs	r3, #32
 800b88e:	431e      	orrs	r6, r3
 800b890:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b892:	601d      	str	r5, [r3, #0]
 800b894:	9b07      	ldr	r3, [sp, #28]
 800b896:	601f      	str	r7, [r3, #0]
 800b898:	e6b4      	b.n	800b604 <__gethex+0x114>
 800b89a:	c301      	stmia	r3!, {r0}
 800b89c:	4299      	cmp	r1, r3
 800b89e:	d8dc      	bhi.n	800b85a <__gethex+0x36a>
 800b8a0:	68ab      	ldr	r3, [r5, #8]
 800b8a2:	9a02      	ldr	r2, [sp, #8]
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	db18      	blt.n	800b8da <__gethex+0x3ea>
 800b8a8:	6869      	ldr	r1, [r5, #4]
 800b8aa:	9803      	ldr	r0, [sp, #12]
 800b8ac:	3101      	adds	r1, #1
 800b8ae:	f7fd fde3 	bl	8009478 <_Balloc>
 800b8b2:	1e04      	subs	r4, r0, #0
 800b8b4:	d104      	bne.n	800b8c0 <__gethex+0x3d0>
 800b8b6:	0022      	movs	r2, r4
 800b8b8:	2184      	movs	r1, #132	@ 0x84
 800b8ba:	4b1d      	ldr	r3, [pc, #116]	@ (800b930 <__gethex+0x440>)
 800b8bc:	481d      	ldr	r0, [pc, #116]	@ (800b934 <__gethex+0x444>)
 800b8be:	e6c4      	b.n	800b64a <__gethex+0x15a>
 800b8c0:	0029      	movs	r1, r5
 800b8c2:	692a      	ldr	r2, [r5, #16]
 800b8c4:	310c      	adds	r1, #12
 800b8c6:	3202      	adds	r2, #2
 800b8c8:	0092      	lsls	r2, r2, #2
 800b8ca:	300c      	adds	r0, #12
 800b8cc:	f7fc fefa 	bl	80086c4 <memcpy>
 800b8d0:	0029      	movs	r1, r5
 800b8d2:	9803      	ldr	r0, [sp, #12]
 800b8d4:	f7fd fe14 	bl	8009500 <_Bfree>
 800b8d8:	0025      	movs	r5, r4
 800b8da:	692b      	ldr	r3, [r5, #16]
 800b8dc:	1c5a      	adds	r2, r3, #1
 800b8de:	612a      	str	r2, [r5, #16]
 800b8e0:	2201      	movs	r2, #1
 800b8e2:	3304      	adds	r3, #4
 800b8e4:	009b      	lsls	r3, r3, #2
 800b8e6:	18eb      	adds	r3, r5, r3
 800b8e8:	605a      	str	r2, [r3, #4]
 800b8ea:	e7bb      	b.n	800b864 <__gethex+0x374>
 800b8ec:	692a      	ldr	r2, [r5, #16]
 800b8ee:	9902      	ldr	r1, [sp, #8]
 800b8f0:	428a      	cmp	r2, r1
 800b8f2:	dd0b      	ble.n	800b90c <__gethex+0x41c>
 800b8f4:	2101      	movs	r1, #1
 800b8f6:	0028      	movs	r0, r5
 800b8f8:	f7ff fd91 	bl	800b41e <rshift>
 800b8fc:	9b01      	ldr	r3, [sp, #4]
 800b8fe:	3701      	adds	r7, #1
 800b900:	689b      	ldr	r3, [r3, #8]
 800b902:	42bb      	cmp	r3, r7
 800b904:	da00      	bge.n	800b908 <__gethex+0x418>
 800b906:	e6df      	b.n	800b6c8 <__gethex+0x1d8>
 800b908:	2601      	movs	r6, #1
 800b90a:	e7bf      	b.n	800b88c <__gethex+0x39c>
 800b90c:	221f      	movs	r2, #31
 800b90e:	9c00      	ldr	r4, [sp, #0]
 800b910:	9900      	ldr	r1, [sp, #0]
 800b912:	4014      	ands	r4, r2
 800b914:	4211      	tst	r1, r2
 800b916:	d0f7      	beq.n	800b908 <__gethex+0x418>
 800b918:	9a04      	ldr	r2, [sp, #16]
 800b91a:	189b      	adds	r3, r3, r2
 800b91c:	3b04      	subs	r3, #4
 800b91e:	6818      	ldr	r0, [r3, #0]
 800b920:	f7fd fea2 	bl	8009668 <__hi0bits>
 800b924:	2320      	movs	r3, #32
 800b926:	1b1b      	subs	r3, r3, r4
 800b928:	4298      	cmp	r0, r3
 800b92a:	dbe3      	blt.n	800b8f4 <__gethex+0x404>
 800b92c:	e7ec      	b.n	800b908 <__gethex+0x418>
 800b92e:	46c0      	nop			@ (mov r8, r8)
 800b930:	0800c46d 	.word	0x0800c46d
 800b934:	0800c786 	.word	0x0800c786

0800b938 <L_shift>:
 800b938:	2308      	movs	r3, #8
 800b93a:	b570      	push	{r4, r5, r6, lr}
 800b93c:	2520      	movs	r5, #32
 800b93e:	1a9a      	subs	r2, r3, r2
 800b940:	0092      	lsls	r2, r2, #2
 800b942:	1aad      	subs	r5, r5, r2
 800b944:	6843      	ldr	r3, [r0, #4]
 800b946:	6804      	ldr	r4, [r0, #0]
 800b948:	001e      	movs	r6, r3
 800b94a:	40ae      	lsls	r6, r5
 800b94c:	40d3      	lsrs	r3, r2
 800b94e:	4334      	orrs	r4, r6
 800b950:	6004      	str	r4, [r0, #0]
 800b952:	6043      	str	r3, [r0, #4]
 800b954:	3004      	adds	r0, #4
 800b956:	4288      	cmp	r0, r1
 800b958:	d3f4      	bcc.n	800b944 <L_shift+0xc>
 800b95a:	bd70      	pop	{r4, r5, r6, pc}

0800b95c <__match>:
 800b95c:	b530      	push	{r4, r5, lr}
 800b95e:	6803      	ldr	r3, [r0, #0]
 800b960:	780c      	ldrb	r4, [r1, #0]
 800b962:	3301      	adds	r3, #1
 800b964:	2c00      	cmp	r4, #0
 800b966:	d102      	bne.n	800b96e <__match+0x12>
 800b968:	6003      	str	r3, [r0, #0]
 800b96a:	2001      	movs	r0, #1
 800b96c:	bd30      	pop	{r4, r5, pc}
 800b96e:	781a      	ldrb	r2, [r3, #0]
 800b970:	0015      	movs	r5, r2
 800b972:	3d41      	subs	r5, #65	@ 0x41
 800b974:	2d19      	cmp	r5, #25
 800b976:	d800      	bhi.n	800b97a <__match+0x1e>
 800b978:	3220      	adds	r2, #32
 800b97a:	3101      	adds	r1, #1
 800b97c:	42a2      	cmp	r2, r4
 800b97e:	d0ef      	beq.n	800b960 <__match+0x4>
 800b980:	2000      	movs	r0, #0
 800b982:	e7f3      	b.n	800b96c <__match+0x10>

0800b984 <__hexnan>:
 800b984:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b986:	680b      	ldr	r3, [r1, #0]
 800b988:	b08b      	sub	sp, #44	@ 0x2c
 800b98a:	9201      	str	r2, [sp, #4]
 800b98c:	9901      	ldr	r1, [sp, #4]
 800b98e:	115a      	asrs	r2, r3, #5
 800b990:	0092      	lsls	r2, r2, #2
 800b992:	188a      	adds	r2, r1, r2
 800b994:	9202      	str	r2, [sp, #8]
 800b996:	0019      	movs	r1, r3
 800b998:	221f      	movs	r2, #31
 800b99a:	4011      	ands	r1, r2
 800b99c:	9008      	str	r0, [sp, #32]
 800b99e:	9106      	str	r1, [sp, #24]
 800b9a0:	4213      	tst	r3, r2
 800b9a2:	d002      	beq.n	800b9aa <__hexnan+0x26>
 800b9a4:	9b02      	ldr	r3, [sp, #8]
 800b9a6:	3304      	adds	r3, #4
 800b9a8:	9302      	str	r3, [sp, #8]
 800b9aa:	9b02      	ldr	r3, [sp, #8]
 800b9ac:	2500      	movs	r5, #0
 800b9ae:	1f1f      	subs	r7, r3, #4
 800b9b0:	003e      	movs	r6, r7
 800b9b2:	003c      	movs	r4, r7
 800b9b4:	9b08      	ldr	r3, [sp, #32]
 800b9b6:	603d      	str	r5, [r7, #0]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	9507      	str	r5, [sp, #28]
 800b9bc:	9305      	str	r3, [sp, #20]
 800b9be:	9503      	str	r5, [sp, #12]
 800b9c0:	9b05      	ldr	r3, [sp, #20]
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9c6:	9b05      	ldr	r3, [sp, #20]
 800b9c8:	785b      	ldrb	r3, [r3, #1]
 800b9ca:	9304      	str	r3, [sp, #16]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d028      	beq.n	800ba22 <__hexnan+0x9e>
 800b9d0:	9804      	ldr	r0, [sp, #16]
 800b9d2:	f7ff fd77 	bl	800b4c4 <__hexdig_fun>
 800b9d6:	2800      	cmp	r0, #0
 800b9d8:	d155      	bne.n	800ba86 <__hexnan+0x102>
 800b9da:	9b04      	ldr	r3, [sp, #16]
 800b9dc:	2b20      	cmp	r3, #32
 800b9de:	d819      	bhi.n	800ba14 <__hexnan+0x90>
 800b9e0:	9b03      	ldr	r3, [sp, #12]
 800b9e2:	9a07      	ldr	r2, [sp, #28]
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	dd12      	ble.n	800ba0e <__hexnan+0x8a>
 800b9e8:	42b4      	cmp	r4, r6
 800b9ea:	d206      	bcs.n	800b9fa <__hexnan+0x76>
 800b9ec:	2d07      	cmp	r5, #7
 800b9ee:	dc04      	bgt.n	800b9fa <__hexnan+0x76>
 800b9f0:	002a      	movs	r2, r5
 800b9f2:	0031      	movs	r1, r6
 800b9f4:	0020      	movs	r0, r4
 800b9f6:	f7ff ff9f 	bl	800b938 <L_shift>
 800b9fa:	9b01      	ldr	r3, [sp, #4]
 800b9fc:	2508      	movs	r5, #8
 800b9fe:	429c      	cmp	r4, r3
 800ba00:	d905      	bls.n	800ba0e <__hexnan+0x8a>
 800ba02:	1f26      	subs	r6, r4, #4
 800ba04:	2500      	movs	r5, #0
 800ba06:	0034      	movs	r4, r6
 800ba08:	9b03      	ldr	r3, [sp, #12]
 800ba0a:	6035      	str	r5, [r6, #0]
 800ba0c:	9307      	str	r3, [sp, #28]
 800ba0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba10:	9305      	str	r3, [sp, #20]
 800ba12:	e7d5      	b.n	800b9c0 <__hexnan+0x3c>
 800ba14:	9b04      	ldr	r3, [sp, #16]
 800ba16:	2b29      	cmp	r3, #41	@ 0x29
 800ba18:	d15a      	bne.n	800bad0 <__hexnan+0x14c>
 800ba1a:	9b05      	ldr	r3, [sp, #20]
 800ba1c:	9a08      	ldr	r2, [sp, #32]
 800ba1e:	3302      	adds	r3, #2
 800ba20:	6013      	str	r3, [r2, #0]
 800ba22:	9b03      	ldr	r3, [sp, #12]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d053      	beq.n	800bad0 <__hexnan+0x14c>
 800ba28:	42b4      	cmp	r4, r6
 800ba2a:	d206      	bcs.n	800ba3a <__hexnan+0xb6>
 800ba2c:	2d07      	cmp	r5, #7
 800ba2e:	dc04      	bgt.n	800ba3a <__hexnan+0xb6>
 800ba30:	002a      	movs	r2, r5
 800ba32:	0031      	movs	r1, r6
 800ba34:	0020      	movs	r0, r4
 800ba36:	f7ff ff7f 	bl	800b938 <L_shift>
 800ba3a:	9b01      	ldr	r3, [sp, #4]
 800ba3c:	429c      	cmp	r4, r3
 800ba3e:	d936      	bls.n	800baae <__hexnan+0x12a>
 800ba40:	001a      	movs	r2, r3
 800ba42:	0023      	movs	r3, r4
 800ba44:	cb02      	ldmia	r3!, {r1}
 800ba46:	c202      	stmia	r2!, {r1}
 800ba48:	429f      	cmp	r7, r3
 800ba4a:	d2fb      	bcs.n	800ba44 <__hexnan+0xc0>
 800ba4c:	9b02      	ldr	r3, [sp, #8]
 800ba4e:	1c61      	adds	r1, r4, #1
 800ba50:	1eda      	subs	r2, r3, #3
 800ba52:	2304      	movs	r3, #4
 800ba54:	4291      	cmp	r1, r2
 800ba56:	d805      	bhi.n	800ba64 <__hexnan+0xe0>
 800ba58:	9b02      	ldr	r3, [sp, #8]
 800ba5a:	3b04      	subs	r3, #4
 800ba5c:	1b1b      	subs	r3, r3, r4
 800ba5e:	089b      	lsrs	r3, r3, #2
 800ba60:	3301      	adds	r3, #1
 800ba62:	009b      	lsls	r3, r3, #2
 800ba64:	9a01      	ldr	r2, [sp, #4]
 800ba66:	18d3      	adds	r3, r2, r3
 800ba68:	2200      	movs	r2, #0
 800ba6a:	c304      	stmia	r3!, {r2}
 800ba6c:	429f      	cmp	r7, r3
 800ba6e:	d2fc      	bcs.n	800ba6a <__hexnan+0xe6>
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d104      	bne.n	800ba80 <__hexnan+0xfc>
 800ba76:	9b01      	ldr	r3, [sp, #4]
 800ba78:	429f      	cmp	r7, r3
 800ba7a:	d127      	bne.n	800bacc <__hexnan+0x148>
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	603b      	str	r3, [r7, #0]
 800ba80:	2005      	movs	r0, #5
 800ba82:	b00b      	add	sp, #44	@ 0x2c
 800ba84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba86:	9b03      	ldr	r3, [sp, #12]
 800ba88:	3501      	adds	r5, #1
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	9303      	str	r3, [sp, #12]
 800ba8e:	2d08      	cmp	r5, #8
 800ba90:	dd06      	ble.n	800baa0 <__hexnan+0x11c>
 800ba92:	9b01      	ldr	r3, [sp, #4]
 800ba94:	429c      	cmp	r4, r3
 800ba96:	d9ba      	bls.n	800ba0e <__hexnan+0x8a>
 800ba98:	2300      	movs	r3, #0
 800ba9a:	2501      	movs	r5, #1
 800ba9c:	3c04      	subs	r4, #4
 800ba9e:	6023      	str	r3, [r4, #0]
 800baa0:	220f      	movs	r2, #15
 800baa2:	6823      	ldr	r3, [r4, #0]
 800baa4:	4010      	ands	r0, r2
 800baa6:	011b      	lsls	r3, r3, #4
 800baa8:	4303      	orrs	r3, r0
 800baaa:	6023      	str	r3, [r4, #0]
 800baac:	e7af      	b.n	800ba0e <__hexnan+0x8a>
 800baae:	9b06      	ldr	r3, [sp, #24]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d0dd      	beq.n	800ba70 <__hexnan+0xec>
 800bab4:	2320      	movs	r3, #32
 800bab6:	9a06      	ldr	r2, [sp, #24]
 800bab8:	9902      	ldr	r1, [sp, #8]
 800baba:	1a9b      	subs	r3, r3, r2
 800babc:	2201      	movs	r2, #1
 800babe:	4252      	negs	r2, r2
 800bac0:	40da      	lsrs	r2, r3
 800bac2:	3904      	subs	r1, #4
 800bac4:	680b      	ldr	r3, [r1, #0]
 800bac6:	4013      	ands	r3, r2
 800bac8:	600b      	str	r3, [r1, #0]
 800baca:	e7d1      	b.n	800ba70 <__hexnan+0xec>
 800bacc:	3f04      	subs	r7, #4
 800bace:	e7cf      	b.n	800ba70 <__hexnan+0xec>
 800bad0:	2004      	movs	r0, #4
 800bad2:	e7d6      	b.n	800ba82 <__hexnan+0xfe>

0800bad4 <__ascii_mbtowc>:
 800bad4:	b082      	sub	sp, #8
 800bad6:	2900      	cmp	r1, #0
 800bad8:	d100      	bne.n	800badc <__ascii_mbtowc+0x8>
 800bada:	a901      	add	r1, sp, #4
 800badc:	1e10      	subs	r0, r2, #0
 800bade:	d006      	beq.n	800baee <__ascii_mbtowc+0x1a>
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d006      	beq.n	800baf2 <__ascii_mbtowc+0x1e>
 800bae4:	7813      	ldrb	r3, [r2, #0]
 800bae6:	600b      	str	r3, [r1, #0]
 800bae8:	7810      	ldrb	r0, [r2, #0]
 800baea:	1e43      	subs	r3, r0, #1
 800baec:	4198      	sbcs	r0, r3
 800baee:	b002      	add	sp, #8
 800baf0:	4770      	bx	lr
 800baf2:	2002      	movs	r0, #2
 800baf4:	4240      	negs	r0, r0
 800baf6:	e7fa      	b.n	800baee <__ascii_mbtowc+0x1a>

0800baf8 <_realloc_r>:
 800baf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bafa:	0006      	movs	r6, r0
 800bafc:	000c      	movs	r4, r1
 800bafe:	0015      	movs	r5, r2
 800bb00:	2900      	cmp	r1, #0
 800bb02:	d105      	bne.n	800bb10 <_realloc_r+0x18>
 800bb04:	0011      	movs	r1, r2
 800bb06:	f7fb fcf9 	bl	80074fc <_malloc_r>
 800bb0a:	0004      	movs	r4, r0
 800bb0c:	0020      	movs	r0, r4
 800bb0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bb10:	2a00      	cmp	r2, #0
 800bb12:	d103      	bne.n	800bb1c <_realloc_r+0x24>
 800bb14:	f7fd fc66 	bl	80093e4 <_free_r>
 800bb18:	2400      	movs	r4, #0
 800bb1a:	e7f7      	b.n	800bb0c <_realloc_r+0x14>
 800bb1c:	f000 f8cf 	bl	800bcbe <_malloc_usable_size_r>
 800bb20:	0007      	movs	r7, r0
 800bb22:	4285      	cmp	r5, r0
 800bb24:	d802      	bhi.n	800bb2c <_realloc_r+0x34>
 800bb26:	0843      	lsrs	r3, r0, #1
 800bb28:	42ab      	cmp	r3, r5
 800bb2a:	d3ef      	bcc.n	800bb0c <_realloc_r+0x14>
 800bb2c:	0029      	movs	r1, r5
 800bb2e:	0030      	movs	r0, r6
 800bb30:	f7fb fce4 	bl	80074fc <_malloc_r>
 800bb34:	9001      	str	r0, [sp, #4]
 800bb36:	2800      	cmp	r0, #0
 800bb38:	d0ee      	beq.n	800bb18 <_realloc_r+0x20>
 800bb3a:	002a      	movs	r2, r5
 800bb3c:	42bd      	cmp	r5, r7
 800bb3e:	d900      	bls.n	800bb42 <_realloc_r+0x4a>
 800bb40:	003a      	movs	r2, r7
 800bb42:	0021      	movs	r1, r4
 800bb44:	9801      	ldr	r0, [sp, #4]
 800bb46:	f7fc fdbd 	bl	80086c4 <memcpy>
 800bb4a:	0021      	movs	r1, r4
 800bb4c:	0030      	movs	r0, r6
 800bb4e:	f7fd fc49 	bl	80093e4 <_free_r>
 800bb52:	9c01      	ldr	r4, [sp, #4]
 800bb54:	e7da      	b.n	800bb0c <_realloc_r+0x14>

0800bb56 <__ascii_wctomb>:
 800bb56:	0003      	movs	r3, r0
 800bb58:	1e08      	subs	r0, r1, #0
 800bb5a:	d005      	beq.n	800bb68 <__ascii_wctomb+0x12>
 800bb5c:	2aff      	cmp	r2, #255	@ 0xff
 800bb5e:	d904      	bls.n	800bb6a <__ascii_wctomb+0x14>
 800bb60:	228a      	movs	r2, #138	@ 0x8a
 800bb62:	2001      	movs	r0, #1
 800bb64:	601a      	str	r2, [r3, #0]
 800bb66:	4240      	negs	r0, r0
 800bb68:	4770      	bx	lr
 800bb6a:	2001      	movs	r0, #1
 800bb6c:	700a      	strb	r2, [r1, #0]
 800bb6e:	e7fb      	b.n	800bb68 <__ascii_wctomb+0x12>

0800bb70 <fiprintf>:
 800bb70:	b40e      	push	{r1, r2, r3}
 800bb72:	b517      	push	{r0, r1, r2, r4, lr}
 800bb74:	4c05      	ldr	r4, [pc, #20]	@ (800bb8c <fiprintf+0x1c>)
 800bb76:	ab05      	add	r3, sp, #20
 800bb78:	cb04      	ldmia	r3!, {r2}
 800bb7a:	0001      	movs	r1, r0
 800bb7c:	6820      	ldr	r0, [r4, #0]
 800bb7e:	9301      	str	r3, [sp, #4]
 800bb80:	f7ff f96a 	bl	800ae58 <_vfiprintf_r>
 800bb84:	bc1e      	pop	{r1, r2, r3, r4}
 800bb86:	bc08      	pop	{r3}
 800bb88:	b003      	add	sp, #12
 800bb8a:	4718      	bx	r3
 800bb8c:	20000018 	.word	0x20000018

0800bb90 <__swhatbuf_r>:
 800bb90:	b570      	push	{r4, r5, r6, lr}
 800bb92:	000e      	movs	r6, r1
 800bb94:	001d      	movs	r5, r3
 800bb96:	230e      	movs	r3, #14
 800bb98:	5ec9      	ldrsh	r1, [r1, r3]
 800bb9a:	0014      	movs	r4, r2
 800bb9c:	b096      	sub	sp, #88	@ 0x58
 800bb9e:	2900      	cmp	r1, #0
 800bba0:	da0c      	bge.n	800bbbc <__swhatbuf_r+0x2c>
 800bba2:	89b2      	ldrh	r2, [r6, #12]
 800bba4:	2380      	movs	r3, #128	@ 0x80
 800bba6:	0011      	movs	r1, r2
 800bba8:	4019      	ands	r1, r3
 800bbaa:	421a      	tst	r2, r3
 800bbac:	d114      	bne.n	800bbd8 <__swhatbuf_r+0x48>
 800bbae:	2380      	movs	r3, #128	@ 0x80
 800bbb0:	00db      	lsls	r3, r3, #3
 800bbb2:	2000      	movs	r0, #0
 800bbb4:	6029      	str	r1, [r5, #0]
 800bbb6:	6023      	str	r3, [r4, #0]
 800bbb8:	b016      	add	sp, #88	@ 0x58
 800bbba:	bd70      	pop	{r4, r5, r6, pc}
 800bbbc:	466a      	mov	r2, sp
 800bbbe:	f000 f853 	bl	800bc68 <_fstat_r>
 800bbc2:	2800      	cmp	r0, #0
 800bbc4:	dbed      	blt.n	800bba2 <__swhatbuf_r+0x12>
 800bbc6:	23f0      	movs	r3, #240	@ 0xf0
 800bbc8:	9901      	ldr	r1, [sp, #4]
 800bbca:	021b      	lsls	r3, r3, #8
 800bbcc:	4019      	ands	r1, r3
 800bbce:	4b04      	ldr	r3, [pc, #16]	@ (800bbe0 <__swhatbuf_r+0x50>)
 800bbd0:	18c9      	adds	r1, r1, r3
 800bbd2:	424b      	negs	r3, r1
 800bbd4:	4159      	adcs	r1, r3
 800bbd6:	e7ea      	b.n	800bbae <__swhatbuf_r+0x1e>
 800bbd8:	2100      	movs	r1, #0
 800bbda:	2340      	movs	r3, #64	@ 0x40
 800bbdc:	e7e9      	b.n	800bbb2 <__swhatbuf_r+0x22>
 800bbde:	46c0      	nop			@ (mov r8, r8)
 800bbe0:	ffffe000 	.word	0xffffe000

0800bbe4 <__smakebuf_r>:
 800bbe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbe6:	2602      	movs	r6, #2
 800bbe8:	898b      	ldrh	r3, [r1, #12]
 800bbea:	0005      	movs	r5, r0
 800bbec:	000c      	movs	r4, r1
 800bbee:	b085      	sub	sp, #20
 800bbf0:	4233      	tst	r3, r6
 800bbf2:	d007      	beq.n	800bc04 <__smakebuf_r+0x20>
 800bbf4:	0023      	movs	r3, r4
 800bbf6:	3347      	adds	r3, #71	@ 0x47
 800bbf8:	6023      	str	r3, [r4, #0]
 800bbfa:	6123      	str	r3, [r4, #16]
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	6163      	str	r3, [r4, #20]
 800bc00:	b005      	add	sp, #20
 800bc02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc04:	ab03      	add	r3, sp, #12
 800bc06:	aa02      	add	r2, sp, #8
 800bc08:	f7ff ffc2 	bl	800bb90 <__swhatbuf_r>
 800bc0c:	9f02      	ldr	r7, [sp, #8]
 800bc0e:	9001      	str	r0, [sp, #4]
 800bc10:	0039      	movs	r1, r7
 800bc12:	0028      	movs	r0, r5
 800bc14:	f7fb fc72 	bl	80074fc <_malloc_r>
 800bc18:	2800      	cmp	r0, #0
 800bc1a:	d108      	bne.n	800bc2e <__smakebuf_r+0x4a>
 800bc1c:	220c      	movs	r2, #12
 800bc1e:	5ea3      	ldrsh	r3, [r4, r2]
 800bc20:	059a      	lsls	r2, r3, #22
 800bc22:	d4ed      	bmi.n	800bc00 <__smakebuf_r+0x1c>
 800bc24:	2203      	movs	r2, #3
 800bc26:	4393      	bics	r3, r2
 800bc28:	431e      	orrs	r6, r3
 800bc2a:	81a6      	strh	r6, [r4, #12]
 800bc2c:	e7e2      	b.n	800bbf4 <__smakebuf_r+0x10>
 800bc2e:	2380      	movs	r3, #128	@ 0x80
 800bc30:	89a2      	ldrh	r2, [r4, #12]
 800bc32:	6020      	str	r0, [r4, #0]
 800bc34:	4313      	orrs	r3, r2
 800bc36:	81a3      	strh	r3, [r4, #12]
 800bc38:	9b03      	ldr	r3, [sp, #12]
 800bc3a:	6120      	str	r0, [r4, #16]
 800bc3c:	6167      	str	r7, [r4, #20]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d00c      	beq.n	800bc5c <__smakebuf_r+0x78>
 800bc42:	0028      	movs	r0, r5
 800bc44:	230e      	movs	r3, #14
 800bc46:	5ee1      	ldrsh	r1, [r4, r3]
 800bc48:	f000 f820 	bl	800bc8c <_isatty_r>
 800bc4c:	2800      	cmp	r0, #0
 800bc4e:	d005      	beq.n	800bc5c <__smakebuf_r+0x78>
 800bc50:	2303      	movs	r3, #3
 800bc52:	89a2      	ldrh	r2, [r4, #12]
 800bc54:	439a      	bics	r2, r3
 800bc56:	3b02      	subs	r3, #2
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	81a3      	strh	r3, [r4, #12]
 800bc5c:	89a3      	ldrh	r3, [r4, #12]
 800bc5e:	9a01      	ldr	r2, [sp, #4]
 800bc60:	4313      	orrs	r3, r2
 800bc62:	81a3      	strh	r3, [r4, #12]
 800bc64:	e7cc      	b.n	800bc00 <__smakebuf_r+0x1c>
	...

0800bc68 <_fstat_r>:
 800bc68:	2300      	movs	r3, #0
 800bc6a:	b570      	push	{r4, r5, r6, lr}
 800bc6c:	4d06      	ldr	r5, [pc, #24]	@ (800bc88 <_fstat_r+0x20>)
 800bc6e:	0004      	movs	r4, r0
 800bc70:	0008      	movs	r0, r1
 800bc72:	0011      	movs	r1, r2
 800bc74:	602b      	str	r3, [r5, #0]
 800bc76:	f7f8 fd35 	bl	80046e4 <_fstat>
 800bc7a:	1c43      	adds	r3, r0, #1
 800bc7c:	d103      	bne.n	800bc86 <_fstat_r+0x1e>
 800bc7e:	682b      	ldr	r3, [r5, #0]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d000      	beq.n	800bc86 <_fstat_r+0x1e>
 800bc84:	6023      	str	r3, [r4, #0]
 800bc86:	bd70      	pop	{r4, r5, r6, pc}
 800bc88:	20000604 	.word	0x20000604

0800bc8c <_isatty_r>:
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	b570      	push	{r4, r5, r6, lr}
 800bc90:	4d06      	ldr	r5, [pc, #24]	@ (800bcac <_isatty_r+0x20>)
 800bc92:	0004      	movs	r4, r0
 800bc94:	0008      	movs	r0, r1
 800bc96:	602b      	str	r3, [r5, #0]
 800bc98:	f7f8 fd32 	bl	8004700 <_isatty>
 800bc9c:	1c43      	adds	r3, r0, #1
 800bc9e:	d103      	bne.n	800bca8 <_isatty_r+0x1c>
 800bca0:	682b      	ldr	r3, [r5, #0]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d000      	beq.n	800bca8 <_isatty_r+0x1c>
 800bca6:	6023      	str	r3, [r4, #0]
 800bca8:	bd70      	pop	{r4, r5, r6, pc}
 800bcaa:	46c0      	nop			@ (mov r8, r8)
 800bcac:	20000604 	.word	0x20000604

0800bcb0 <abort>:
 800bcb0:	2006      	movs	r0, #6
 800bcb2:	b510      	push	{r4, lr}
 800bcb4:	f000 f834 	bl	800bd20 <raise>
 800bcb8:	2001      	movs	r0, #1
 800bcba:	f7f8 fcc3 	bl	8004644 <_exit>

0800bcbe <_malloc_usable_size_r>:
 800bcbe:	1f0b      	subs	r3, r1, #4
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	1f18      	subs	r0, r3, #4
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	da01      	bge.n	800bccc <_malloc_usable_size_r+0xe>
 800bcc8:	580b      	ldr	r3, [r1, r0]
 800bcca:	18c0      	adds	r0, r0, r3
 800bccc:	4770      	bx	lr

0800bcce <_raise_r>:
 800bcce:	b570      	push	{r4, r5, r6, lr}
 800bcd0:	0004      	movs	r4, r0
 800bcd2:	000d      	movs	r5, r1
 800bcd4:	291f      	cmp	r1, #31
 800bcd6:	d904      	bls.n	800bce2 <_raise_r+0x14>
 800bcd8:	2316      	movs	r3, #22
 800bcda:	6003      	str	r3, [r0, #0]
 800bcdc:	2001      	movs	r0, #1
 800bcde:	4240      	negs	r0, r0
 800bce0:	bd70      	pop	{r4, r5, r6, pc}
 800bce2:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d004      	beq.n	800bcf2 <_raise_r+0x24>
 800bce8:	008a      	lsls	r2, r1, #2
 800bcea:	189b      	adds	r3, r3, r2
 800bcec:	681a      	ldr	r2, [r3, #0]
 800bcee:	2a00      	cmp	r2, #0
 800bcf0:	d108      	bne.n	800bd04 <_raise_r+0x36>
 800bcf2:	0020      	movs	r0, r4
 800bcf4:	f000 f830 	bl	800bd58 <_getpid_r>
 800bcf8:	002a      	movs	r2, r5
 800bcfa:	0001      	movs	r1, r0
 800bcfc:	0020      	movs	r0, r4
 800bcfe:	f000 f819 	bl	800bd34 <_kill_r>
 800bd02:	e7ed      	b.n	800bce0 <_raise_r+0x12>
 800bd04:	2a01      	cmp	r2, #1
 800bd06:	d009      	beq.n	800bd1c <_raise_r+0x4e>
 800bd08:	1c51      	adds	r1, r2, #1
 800bd0a:	d103      	bne.n	800bd14 <_raise_r+0x46>
 800bd0c:	2316      	movs	r3, #22
 800bd0e:	6003      	str	r3, [r0, #0]
 800bd10:	2001      	movs	r0, #1
 800bd12:	e7e5      	b.n	800bce0 <_raise_r+0x12>
 800bd14:	2100      	movs	r1, #0
 800bd16:	0028      	movs	r0, r5
 800bd18:	6019      	str	r1, [r3, #0]
 800bd1a:	4790      	blx	r2
 800bd1c:	2000      	movs	r0, #0
 800bd1e:	e7df      	b.n	800bce0 <_raise_r+0x12>

0800bd20 <raise>:
 800bd20:	b510      	push	{r4, lr}
 800bd22:	4b03      	ldr	r3, [pc, #12]	@ (800bd30 <raise+0x10>)
 800bd24:	0001      	movs	r1, r0
 800bd26:	6818      	ldr	r0, [r3, #0]
 800bd28:	f7ff ffd1 	bl	800bcce <_raise_r>
 800bd2c:	bd10      	pop	{r4, pc}
 800bd2e:	46c0      	nop			@ (mov r8, r8)
 800bd30:	20000018 	.word	0x20000018

0800bd34 <_kill_r>:
 800bd34:	2300      	movs	r3, #0
 800bd36:	b570      	push	{r4, r5, r6, lr}
 800bd38:	4d06      	ldr	r5, [pc, #24]	@ (800bd54 <_kill_r+0x20>)
 800bd3a:	0004      	movs	r4, r0
 800bd3c:	0008      	movs	r0, r1
 800bd3e:	0011      	movs	r1, r2
 800bd40:	602b      	str	r3, [r5, #0]
 800bd42:	f7f8 fc6f 	bl	8004624 <_kill>
 800bd46:	1c43      	adds	r3, r0, #1
 800bd48:	d103      	bne.n	800bd52 <_kill_r+0x1e>
 800bd4a:	682b      	ldr	r3, [r5, #0]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d000      	beq.n	800bd52 <_kill_r+0x1e>
 800bd50:	6023      	str	r3, [r4, #0]
 800bd52:	bd70      	pop	{r4, r5, r6, pc}
 800bd54:	20000604 	.word	0x20000604

0800bd58 <_getpid_r>:
 800bd58:	b510      	push	{r4, lr}
 800bd5a:	f7f8 fc5d 	bl	8004618 <_getpid>
 800bd5e:	bd10      	pop	{r4, pc}

0800bd60 <exp>:
 800bd60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd62:	0004      	movs	r4, r0
 800bd64:	000d      	movs	r5, r1
 800bd66:	f000 f883 	bl	800be70 <__ieee754_exp>
 800bd6a:	0006      	movs	r6, r0
 800bd6c:	000f      	movs	r7, r1
 800bd6e:	0020      	movs	r0, r4
 800bd70:	0029      	movs	r1, r5
 800bd72:	f000 f82d 	bl	800bdd0 <finite>
 800bd76:	2800      	cmp	r0, #0
 800bd78:	d00d      	beq.n	800bd96 <exp+0x36>
 800bd7a:	0020      	movs	r0, r4
 800bd7c:	0029      	movs	r1, r5
 800bd7e:	4a0f      	ldr	r2, [pc, #60]	@ (800bdbc <exp+0x5c>)
 800bd80:	4b0f      	ldr	r3, [pc, #60]	@ (800bdc0 <exp+0x60>)
 800bd82:	f7f4 fb7d 	bl	8000480 <__aeabi_dcmpgt>
 800bd86:	2800      	cmp	r0, #0
 800bd88:	d008      	beq.n	800bd9c <exp+0x3c>
 800bd8a:	f7fc fc63 	bl	8008654 <__errno>
 800bd8e:	2322      	movs	r3, #34	@ 0x22
 800bd90:	2600      	movs	r6, #0
 800bd92:	4f0c      	ldr	r7, [pc, #48]	@ (800bdc4 <exp+0x64>)
 800bd94:	6003      	str	r3, [r0, #0]
 800bd96:	0030      	movs	r0, r6
 800bd98:	0039      	movs	r1, r7
 800bd9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd9c:	0020      	movs	r0, r4
 800bd9e:	0029      	movs	r1, r5
 800bda0:	4a09      	ldr	r2, [pc, #36]	@ (800bdc8 <exp+0x68>)
 800bda2:	4b0a      	ldr	r3, [pc, #40]	@ (800bdcc <exp+0x6c>)
 800bda4:	f7f4 fb58 	bl	8000458 <__aeabi_dcmplt>
 800bda8:	2800      	cmp	r0, #0
 800bdaa:	d0f4      	beq.n	800bd96 <exp+0x36>
 800bdac:	f7fc fc52 	bl	8008654 <__errno>
 800bdb0:	2322      	movs	r3, #34	@ 0x22
 800bdb2:	2600      	movs	r6, #0
 800bdb4:	2700      	movs	r7, #0
 800bdb6:	6003      	str	r3, [r0, #0]
 800bdb8:	e7ed      	b.n	800bd96 <exp+0x36>
 800bdba:	46c0      	nop			@ (mov r8, r8)
 800bdbc:	fefa39ef 	.word	0xfefa39ef
 800bdc0:	40862e42 	.word	0x40862e42
 800bdc4:	7ff00000 	.word	0x7ff00000
 800bdc8:	d52d3051 	.word	0xd52d3051
 800bdcc:	c0874910 	.word	0xc0874910

0800bdd0 <finite>:
 800bdd0:	4b02      	ldr	r3, [pc, #8]	@ (800bddc <finite+0xc>)
 800bdd2:	0048      	lsls	r0, r1, #1
 800bdd4:	0840      	lsrs	r0, r0, #1
 800bdd6:	18c0      	adds	r0, r0, r3
 800bdd8:	0fc0      	lsrs	r0, r0, #31
 800bdda:	4770      	bx	lr
 800bddc:	80100000 	.word	0x80100000

0800bde0 <fmaxf>:
 800bde0:	b570      	push	{r4, r5, r6, lr}
 800bde2:	1c04      	adds	r4, r0, #0
 800bde4:	1c0d      	adds	r5, r1, #0
 800bde6:	f000 f827 	bl	800be38 <__fpclassifyf>
 800bdea:	2800      	cmp	r0, #0
 800bdec:	d102      	bne.n	800bdf4 <fmaxf+0x14>
 800bdee:	1c2c      	adds	r4, r5, #0
 800bdf0:	1c20      	adds	r0, r4, #0
 800bdf2:	bd70      	pop	{r4, r5, r6, pc}
 800bdf4:	1c28      	adds	r0, r5, #0
 800bdf6:	f000 f81f 	bl	800be38 <__fpclassifyf>
 800bdfa:	2800      	cmp	r0, #0
 800bdfc:	d0f8      	beq.n	800bdf0 <fmaxf+0x10>
 800bdfe:	1c29      	adds	r1, r5, #0
 800be00:	1c20      	adds	r0, r4, #0
 800be02:	f7f4 fb77 	bl	80004f4 <__aeabi_fcmpgt>
 800be06:	2800      	cmp	r0, #0
 800be08:	d0f1      	beq.n	800bdee <fmaxf+0xe>
 800be0a:	e7f1      	b.n	800bdf0 <fmaxf+0x10>

0800be0c <fminf>:
 800be0c:	b570      	push	{r4, r5, r6, lr}
 800be0e:	1c04      	adds	r4, r0, #0
 800be10:	1c0d      	adds	r5, r1, #0
 800be12:	f000 f811 	bl	800be38 <__fpclassifyf>
 800be16:	2800      	cmp	r0, #0
 800be18:	d102      	bne.n	800be20 <fminf+0x14>
 800be1a:	1c2c      	adds	r4, r5, #0
 800be1c:	1c20      	adds	r0, r4, #0
 800be1e:	bd70      	pop	{r4, r5, r6, pc}
 800be20:	1c28      	adds	r0, r5, #0
 800be22:	f000 f809 	bl	800be38 <__fpclassifyf>
 800be26:	2800      	cmp	r0, #0
 800be28:	d0f8      	beq.n	800be1c <fminf+0x10>
 800be2a:	1c29      	adds	r1, r5, #0
 800be2c:	1c20      	adds	r0, r4, #0
 800be2e:	f7f4 fb4d 	bl	80004cc <__aeabi_fcmplt>
 800be32:	2800      	cmp	r0, #0
 800be34:	d0f1      	beq.n	800be1a <fminf+0xe>
 800be36:	e7f1      	b.n	800be1c <fminf+0x10>

0800be38 <__fpclassifyf>:
 800be38:	0043      	lsls	r3, r0, #1
 800be3a:	085a      	lsrs	r2, r3, #1
 800be3c:	2002      	movs	r0, #2
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d00f      	beq.n	800be62 <__fpclassifyf+0x2a>
 800be42:	21fe      	movs	r1, #254	@ 0xfe
 800be44:	4b07      	ldr	r3, [pc, #28]	@ (800be64 <__fpclassifyf+0x2c>)
 800be46:	05c9      	lsls	r1, r1, #23
 800be48:	18d3      	adds	r3, r2, r3
 800be4a:	1800      	adds	r0, r0, r0
 800be4c:	428b      	cmp	r3, r1
 800be4e:	d308      	bcc.n	800be62 <__fpclassifyf+0x2a>
 800be50:	4905      	ldr	r1, [pc, #20]	@ (800be68 <__fpclassifyf+0x30>)
 800be52:	1e53      	subs	r3, r2, #1
 800be54:	3801      	subs	r0, #1
 800be56:	428b      	cmp	r3, r1
 800be58:	d903      	bls.n	800be62 <__fpclassifyf+0x2a>
 800be5a:	4b04      	ldr	r3, [pc, #16]	@ (800be6c <__fpclassifyf+0x34>)
 800be5c:	18d0      	adds	r0, r2, r3
 800be5e:	4243      	negs	r3, r0
 800be60:	4158      	adcs	r0, r3
 800be62:	4770      	bx	lr
 800be64:	ff800000 	.word	0xff800000
 800be68:	007ffffe 	.word	0x007ffffe
 800be6c:	80800000 	.word	0x80800000

0800be70 <__ieee754_exp>:
 800be70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be72:	004b      	lsls	r3, r1, #1
 800be74:	000f      	movs	r7, r1
 800be76:	0fcc      	lsrs	r4, r1, #31
 800be78:	4991      	ldr	r1, [pc, #580]	@ (800c0c0 <__ieee754_exp+0x250>)
 800be7a:	0006      	movs	r6, r0
 800be7c:	b089      	sub	sp, #36	@ 0x24
 800be7e:	085b      	lsrs	r3, r3, #1
 800be80:	428b      	cmp	r3, r1
 800be82:	d92e      	bls.n	800bee2 <__ieee754_exp+0x72>
 800be84:	498f      	ldr	r1, [pc, #572]	@ (800c0c4 <__ieee754_exp+0x254>)
 800be86:	428b      	cmp	r3, r1
 800be88:	d911      	bls.n	800beae <__ieee754_exp+0x3e>
 800be8a:	033b      	lsls	r3, r7, #12
 800be8c:	0b1b      	lsrs	r3, r3, #12
 800be8e:	4303      	orrs	r3, r0
 800be90:	d006      	beq.n	800bea0 <__ieee754_exp+0x30>
 800be92:	0002      	movs	r2, r0
 800be94:	003b      	movs	r3, r7
 800be96:	0030      	movs	r0, r6
 800be98:	0039      	movs	r1, r7
 800be9a:	f7f5 fba7 	bl	80015ec <__aeabi_dadd>
 800be9e:	e010      	b.n	800bec2 <__ieee754_exp+0x52>
 800bea0:	2c00      	cmp	r4, #0
 800bea2:	d000      	beq.n	800bea6 <__ieee754_exp+0x36>
 800bea4:	e109      	b.n	800c0ba <__ieee754_exp+0x24a>
 800bea6:	0030      	movs	r0, r6
 800bea8:	0039      	movs	r1, r7
 800beaa:	b009      	add	sp, #36	@ 0x24
 800beac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800beae:	0039      	movs	r1, r7
 800beb0:	4a85      	ldr	r2, [pc, #532]	@ (800c0c8 <__ieee754_exp+0x258>)
 800beb2:	4b86      	ldr	r3, [pc, #536]	@ (800c0cc <__ieee754_exp+0x25c>)
 800beb4:	f7f4 fae4 	bl	8000480 <__aeabi_dcmpgt>
 800beb8:	1e05      	subs	r5, r0, #0
 800beba:	d005      	beq.n	800bec8 <__ieee754_exp+0x58>
 800bebc:	2000      	movs	r0, #0
 800bebe:	f000 f965 	bl	800c18c <__math_oflow>
 800bec2:	0006      	movs	r6, r0
 800bec4:	000f      	movs	r7, r1
 800bec6:	e7ee      	b.n	800bea6 <__ieee754_exp+0x36>
 800bec8:	0030      	movs	r0, r6
 800beca:	0039      	movs	r1, r7
 800becc:	4a80      	ldr	r2, [pc, #512]	@ (800c0d0 <__ieee754_exp+0x260>)
 800bece:	4b81      	ldr	r3, [pc, #516]	@ (800c0d4 <__ieee754_exp+0x264>)
 800bed0:	f7f4 fac2 	bl	8000458 <__aeabi_dcmplt>
 800bed4:	2800      	cmp	r0, #0
 800bed6:	d100      	bne.n	800beda <__ieee754_exp+0x6a>
 800bed8:	e07d      	b.n	800bfd6 <__ieee754_exp+0x166>
 800beda:	0028      	movs	r0, r5
 800bedc:	f000 f94f 	bl	800c17e <__math_uflow>
 800bee0:	e7ef      	b.n	800bec2 <__ieee754_exp+0x52>
 800bee2:	4a7d      	ldr	r2, [pc, #500]	@ (800c0d8 <__ieee754_exp+0x268>)
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d800      	bhi.n	800beea <__ieee754_exp+0x7a>
 800bee8:	e09e      	b.n	800c028 <__ieee754_exp+0x1b8>
 800beea:	4a7c      	ldr	r2, [pc, #496]	@ (800c0dc <__ieee754_exp+0x26c>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d872      	bhi.n	800bfd6 <__ieee754_exp+0x166>
 800bef0:	4b7b      	ldr	r3, [pc, #492]	@ (800c0e0 <__ieee754_exp+0x270>)
 800bef2:	00e5      	lsls	r5, r4, #3
 800bef4:	195b      	adds	r3, r3, r5
 800bef6:	681a      	ldr	r2, [r3, #0]
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	0039      	movs	r1, r7
 800befc:	f7f6 fde6 	bl	8002acc <__aeabi_dsub>
 800bf00:	4b78      	ldr	r3, [pc, #480]	@ (800c0e4 <__ieee754_exp+0x274>)
 800bf02:	9002      	str	r0, [sp, #8]
 800bf04:	9103      	str	r1, [sp, #12]
 800bf06:	195b      	adds	r3, r3, r5
 800bf08:	681a      	ldr	r2, [r3, #0]
 800bf0a:	685b      	ldr	r3, [r3, #4]
 800bf0c:	9204      	str	r2, [sp, #16]
 800bf0e:	9305      	str	r3, [sp, #20]
 800bf10:	2301      	movs	r3, #1
 800bf12:	1b1b      	subs	r3, r3, r4
 800bf14:	1b1b      	subs	r3, r3, r4
 800bf16:	9301      	str	r3, [sp, #4]
 800bf18:	9a04      	ldr	r2, [sp, #16]
 800bf1a:	9b05      	ldr	r3, [sp, #20]
 800bf1c:	9802      	ldr	r0, [sp, #8]
 800bf1e:	9903      	ldr	r1, [sp, #12]
 800bf20:	f7f6 fdd4 	bl	8002acc <__aeabi_dsub>
 800bf24:	0006      	movs	r6, r0
 800bf26:	000f      	movs	r7, r1
 800bf28:	0032      	movs	r2, r6
 800bf2a:	003b      	movs	r3, r7
 800bf2c:	0030      	movs	r0, r6
 800bf2e:	0039      	movs	r1, r7
 800bf30:	f7f6 fb04 	bl	800253c <__aeabi_dmul>
 800bf34:	0004      	movs	r4, r0
 800bf36:	000d      	movs	r5, r1
 800bf38:	4a6b      	ldr	r2, [pc, #428]	@ (800c0e8 <__ieee754_exp+0x278>)
 800bf3a:	4b6c      	ldr	r3, [pc, #432]	@ (800c0ec <__ieee754_exp+0x27c>)
 800bf3c:	f7f6 fafe 	bl	800253c <__aeabi_dmul>
 800bf40:	4a6b      	ldr	r2, [pc, #428]	@ (800c0f0 <__ieee754_exp+0x280>)
 800bf42:	4b6c      	ldr	r3, [pc, #432]	@ (800c0f4 <__ieee754_exp+0x284>)
 800bf44:	f7f6 fdc2 	bl	8002acc <__aeabi_dsub>
 800bf48:	0022      	movs	r2, r4
 800bf4a:	002b      	movs	r3, r5
 800bf4c:	f7f6 faf6 	bl	800253c <__aeabi_dmul>
 800bf50:	4a69      	ldr	r2, [pc, #420]	@ (800c0f8 <__ieee754_exp+0x288>)
 800bf52:	4b6a      	ldr	r3, [pc, #424]	@ (800c0fc <__ieee754_exp+0x28c>)
 800bf54:	f7f5 fb4a 	bl	80015ec <__aeabi_dadd>
 800bf58:	0022      	movs	r2, r4
 800bf5a:	002b      	movs	r3, r5
 800bf5c:	f7f6 faee 	bl	800253c <__aeabi_dmul>
 800bf60:	4a67      	ldr	r2, [pc, #412]	@ (800c100 <__ieee754_exp+0x290>)
 800bf62:	4b68      	ldr	r3, [pc, #416]	@ (800c104 <__ieee754_exp+0x294>)
 800bf64:	f7f6 fdb2 	bl	8002acc <__aeabi_dsub>
 800bf68:	0022      	movs	r2, r4
 800bf6a:	002b      	movs	r3, r5
 800bf6c:	f7f6 fae6 	bl	800253c <__aeabi_dmul>
 800bf70:	4a65      	ldr	r2, [pc, #404]	@ (800c108 <__ieee754_exp+0x298>)
 800bf72:	4b66      	ldr	r3, [pc, #408]	@ (800c10c <__ieee754_exp+0x29c>)
 800bf74:	f7f5 fb3a 	bl	80015ec <__aeabi_dadd>
 800bf78:	0022      	movs	r2, r4
 800bf7a:	002b      	movs	r3, r5
 800bf7c:	f7f6 fade 	bl	800253c <__aeabi_dmul>
 800bf80:	0002      	movs	r2, r0
 800bf82:	000b      	movs	r3, r1
 800bf84:	0030      	movs	r0, r6
 800bf86:	0039      	movs	r1, r7
 800bf88:	f7f6 fda0 	bl	8002acc <__aeabi_dsub>
 800bf8c:	000b      	movs	r3, r1
 800bf8e:	0002      	movs	r2, r0
 800bf90:	0004      	movs	r4, r0
 800bf92:	000d      	movs	r5, r1
 800bf94:	0030      	movs	r0, r6
 800bf96:	0039      	movs	r1, r7
 800bf98:	f7f6 fad0 	bl	800253c <__aeabi_dmul>
 800bf9c:	9b01      	ldr	r3, [sp, #4]
 800bf9e:	9006      	str	r0, [sp, #24]
 800bfa0:	9107      	str	r1, [sp, #28]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d156      	bne.n	800c054 <__ieee754_exp+0x1e4>
 800bfa6:	2380      	movs	r3, #128	@ 0x80
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	0020      	movs	r0, r4
 800bfac:	0029      	movs	r1, r5
 800bfae:	05db      	lsls	r3, r3, #23
 800bfb0:	f7f6 fd8c 	bl	8002acc <__aeabi_dsub>
 800bfb4:	0002      	movs	r2, r0
 800bfb6:	000b      	movs	r3, r1
 800bfb8:	9806      	ldr	r0, [sp, #24]
 800bfba:	9907      	ldr	r1, [sp, #28]
 800bfbc:	f7f5 fe7a 	bl	8001cb4 <__aeabi_ddiv>
 800bfc0:	0032      	movs	r2, r6
 800bfc2:	003b      	movs	r3, r7
 800bfc4:	f7f6 fd82 	bl	8002acc <__aeabi_dsub>
 800bfc8:	0002      	movs	r2, r0
 800bfca:	000b      	movs	r3, r1
 800bfcc:	2000      	movs	r0, #0
 800bfce:	4950      	ldr	r1, [pc, #320]	@ (800c110 <__ieee754_exp+0x2a0>)
 800bfd0:	f7f6 fd7c 	bl	8002acc <__aeabi_dsub>
 800bfd4:	e775      	b.n	800bec2 <__ieee754_exp+0x52>
 800bfd6:	4b4f      	ldr	r3, [pc, #316]	@ (800c114 <__ieee754_exp+0x2a4>)
 800bfd8:	00e4      	lsls	r4, r4, #3
 800bfda:	191c      	adds	r4, r3, r4
 800bfdc:	4a4e      	ldr	r2, [pc, #312]	@ (800c118 <__ieee754_exp+0x2a8>)
 800bfde:	4b4f      	ldr	r3, [pc, #316]	@ (800c11c <__ieee754_exp+0x2ac>)
 800bfe0:	0030      	movs	r0, r6
 800bfe2:	0039      	movs	r1, r7
 800bfe4:	f7f6 faaa 	bl	800253c <__aeabi_dmul>
 800bfe8:	6822      	ldr	r2, [r4, #0]
 800bfea:	6863      	ldr	r3, [r4, #4]
 800bfec:	f7f5 fafe 	bl	80015ec <__aeabi_dadd>
 800bff0:	f7f7 f92a 	bl	8003248 <__aeabi_d2iz>
 800bff4:	9001      	str	r0, [sp, #4]
 800bff6:	f7f7 f963 	bl	80032c0 <__aeabi_i2d>
 800bffa:	4a49      	ldr	r2, [pc, #292]	@ (800c120 <__ieee754_exp+0x2b0>)
 800bffc:	4b49      	ldr	r3, [pc, #292]	@ (800c124 <__ieee754_exp+0x2b4>)
 800bffe:	0004      	movs	r4, r0
 800c000:	000d      	movs	r5, r1
 800c002:	f7f6 fa9b 	bl	800253c <__aeabi_dmul>
 800c006:	0002      	movs	r2, r0
 800c008:	000b      	movs	r3, r1
 800c00a:	0030      	movs	r0, r6
 800c00c:	0039      	movs	r1, r7
 800c00e:	f7f6 fd5d 	bl	8002acc <__aeabi_dsub>
 800c012:	4a45      	ldr	r2, [pc, #276]	@ (800c128 <__ieee754_exp+0x2b8>)
 800c014:	9002      	str	r0, [sp, #8]
 800c016:	9103      	str	r1, [sp, #12]
 800c018:	4b44      	ldr	r3, [pc, #272]	@ (800c12c <__ieee754_exp+0x2bc>)
 800c01a:	0020      	movs	r0, r4
 800c01c:	0029      	movs	r1, r5
 800c01e:	f7f6 fa8d 	bl	800253c <__aeabi_dmul>
 800c022:	9004      	str	r0, [sp, #16]
 800c024:	9105      	str	r1, [sp, #20]
 800c026:	e777      	b.n	800bf18 <__ieee754_exp+0xa8>
 800c028:	4a41      	ldr	r2, [pc, #260]	@ (800c130 <__ieee754_exp+0x2c0>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d80d      	bhi.n	800c04a <__ieee754_exp+0x1da>
 800c02e:	4a41      	ldr	r2, [pc, #260]	@ (800c134 <__ieee754_exp+0x2c4>)
 800c030:	4b41      	ldr	r3, [pc, #260]	@ (800c138 <__ieee754_exp+0x2c8>)
 800c032:	0039      	movs	r1, r7
 800c034:	f7f5 fada 	bl	80015ec <__aeabi_dadd>
 800c038:	2200      	movs	r2, #0
 800c03a:	4b35      	ldr	r3, [pc, #212]	@ (800c110 <__ieee754_exp+0x2a0>)
 800c03c:	f7f4 fa20 	bl	8000480 <__aeabi_dcmpgt>
 800c040:	2800      	cmp	r0, #0
 800c042:	d005      	beq.n	800c050 <__ieee754_exp+0x1e0>
 800c044:	2200      	movs	r2, #0
 800c046:	4b32      	ldr	r3, [pc, #200]	@ (800c110 <__ieee754_exp+0x2a0>)
 800c048:	e725      	b.n	800be96 <__ieee754_exp+0x26>
 800c04a:	2300      	movs	r3, #0
 800c04c:	9301      	str	r3, [sp, #4]
 800c04e:	e76b      	b.n	800bf28 <__ieee754_exp+0xb8>
 800c050:	9001      	str	r0, [sp, #4]
 800c052:	e769      	b.n	800bf28 <__ieee754_exp+0xb8>
 800c054:	2180      	movs	r1, #128	@ 0x80
 800c056:	002b      	movs	r3, r5
 800c058:	0022      	movs	r2, r4
 800c05a:	2000      	movs	r0, #0
 800c05c:	05c9      	lsls	r1, r1, #23
 800c05e:	f7f6 fd35 	bl	8002acc <__aeabi_dsub>
 800c062:	0002      	movs	r2, r0
 800c064:	000b      	movs	r3, r1
 800c066:	9806      	ldr	r0, [sp, #24]
 800c068:	9907      	ldr	r1, [sp, #28]
 800c06a:	f7f5 fe23 	bl	8001cb4 <__aeabi_ddiv>
 800c06e:	0002      	movs	r2, r0
 800c070:	000b      	movs	r3, r1
 800c072:	9804      	ldr	r0, [sp, #16]
 800c074:	9905      	ldr	r1, [sp, #20]
 800c076:	f7f6 fd29 	bl	8002acc <__aeabi_dsub>
 800c07a:	9a02      	ldr	r2, [sp, #8]
 800c07c:	9b03      	ldr	r3, [sp, #12]
 800c07e:	f7f6 fd25 	bl	8002acc <__aeabi_dsub>
 800c082:	0002      	movs	r2, r0
 800c084:	000b      	movs	r3, r1
 800c086:	2000      	movs	r0, #0
 800c088:	4921      	ldr	r1, [pc, #132]	@ (800c110 <__ieee754_exp+0x2a0>)
 800c08a:	f7f6 fd1f 	bl	8002acc <__aeabi_dsub>
 800c08e:	4b2b      	ldr	r3, [pc, #172]	@ (800c13c <__ieee754_exp+0x2cc>)
 800c090:	9a01      	ldr	r2, [sp, #4]
 800c092:	000d      	movs	r5, r1
 800c094:	429a      	cmp	r2, r3
 800c096:	db03      	blt.n	800c0a0 <__ieee754_exp+0x230>
 800c098:	0511      	lsls	r1, r2, #20
 800c09a:	0006      	movs	r6, r0
 800c09c:	194f      	adds	r7, r1, r5
 800c09e:	e702      	b.n	800bea6 <__ieee754_exp+0x36>
 800c0a0:	22fa      	movs	r2, #250	@ 0xfa
 800c0a2:	0092      	lsls	r2, r2, #2
 800c0a4:	4694      	mov	ip, r2
 800c0a6:	9b01      	ldr	r3, [sp, #4]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	4463      	add	r3, ip
 800c0ac:	051b      	lsls	r3, r3, #20
 800c0ae:	1859      	adds	r1, r3, r1
 800c0b0:	23b8      	movs	r3, #184	@ 0xb8
 800c0b2:	045b      	lsls	r3, r3, #17
 800c0b4:	f7f6 fa42 	bl	800253c <__aeabi_dmul>
 800c0b8:	e703      	b.n	800bec2 <__ieee754_exp+0x52>
 800c0ba:	2600      	movs	r6, #0
 800c0bc:	2700      	movs	r7, #0
 800c0be:	e6f2      	b.n	800bea6 <__ieee754_exp+0x36>
 800c0c0:	40862e41 	.word	0x40862e41
 800c0c4:	7fefffff 	.word	0x7fefffff
 800c0c8:	fefa39ef 	.word	0xfefa39ef
 800c0cc:	40862e42 	.word	0x40862e42
 800c0d0:	d52d3051 	.word	0xd52d3051
 800c0d4:	c0874910 	.word	0xc0874910
 800c0d8:	3fd62e42 	.word	0x3fd62e42
 800c0dc:	3ff0a2b1 	.word	0x3ff0a2b1
 800c0e0:	0800c7f8 	.word	0x0800c7f8
 800c0e4:	0800c7e8 	.word	0x0800c7e8
 800c0e8:	72bea4d0 	.word	0x72bea4d0
 800c0ec:	3e663769 	.word	0x3e663769
 800c0f0:	c5d26bf1 	.word	0xc5d26bf1
 800c0f4:	3ebbbd41 	.word	0x3ebbbd41
 800c0f8:	af25de2c 	.word	0xaf25de2c
 800c0fc:	3f11566a 	.word	0x3f11566a
 800c100:	16bebd93 	.word	0x16bebd93
 800c104:	3f66c16c 	.word	0x3f66c16c
 800c108:	5555553e 	.word	0x5555553e
 800c10c:	3fc55555 	.word	0x3fc55555
 800c110:	3ff00000 	.word	0x3ff00000
 800c114:	0800c808 	.word	0x0800c808
 800c118:	652b82fe 	.word	0x652b82fe
 800c11c:	3ff71547 	.word	0x3ff71547
 800c120:	fee00000 	.word	0xfee00000
 800c124:	3fe62e42 	.word	0x3fe62e42
 800c128:	35793c76 	.word	0x35793c76
 800c12c:	3dea39ef 	.word	0x3dea39ef
 800c130:	3defffff 	.word	0x3defffff
 800c134:	8800759c 	.word	0x8800759c
 800c138:	7e37e43c 	.word	0x7e37e43c
 800c13c:	fffffc03 	.word	0xfffffc03

0800c140 <with_errno>:
 800c140:	b570      	push	{r4, r5, r6, lr}
 800c142:	000d      	movs	r5, r1
 800c144:	0016      	movs	r6, r2
 800c146:	0004      	movs	r4, r0
 800c148:	f7fc fa84 	bl	8008654 <__errno>
 800c14c:	0029      	movs	r1, r5
 800c14e:	6006      	str	r6, [r0, #0]
 800c150:	0020      	movs	r0, r4
 800c152:	bd70      	pop	{r4, r5, r6, pc}

0800c154 <xflow>:
 800c154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c156:	0014      	movs	r4, r2
 800c158:	001d      	movs	r5, r3
 800c15a:	2800      	cmp	r0, #0
 800c15c:	d002      	beq.n	800c164 <xflow+0x10>
 800c15e:	2180      	movs	r1, #128	@ 0x80
 800c160:	0609      	lsls	r1, r1, #24
 800c162:	185b      	adds	r3, r3, r1
 800c164:	9200      	str	r2, [sp, #0]
 800c166:	9301      	str	r3, [sp, #4]
 800c168:	9a00      	ldr	r2, [sp, #0]
 800c16a:	9b01      	ldr	r3, [sp, #4]
 800c16c:	0020      	movs	r0, r4
 800c16e:	0029      	movs	r1, r5
 800c170:	f7f6 f9e4 	bl	800253c <__aeabi_dmul>
 800c174:	2222      	movs	r2, #34	@ 0x22
 800c176:	f7ff ffe3 	bl	800c140 <with_errno>
 800c17a:	b003      	add	sp, #12
 800c17c:	bd30      	pop	{r4, r5, pc}

0800c17e <__math_uflow>:
 800c17e:	2380      	movs	r3, #128	@ 0x80
 800c180:	b510      	push	{r4, lr}
 800c182:	2200      	movs	r2, #0
 800c184:	055b      	lsls	r3, r3, #21
 800c186:	f7ff ffe5 	bl	800c154 <xflow>
 800c18a:	bd10      	pop	{r4, pc}

0800c18c <__math_oflow>:
 800c18c:	23e0      	movs	r3, #224	@ 0xe0
 800c18e:	b510      	push	{r4, lr}
 800c190:	2200      	movs	r2, #0
 800c192:	05db      	lsls	r3, r3, #23
 800c194:	f7ff ffde 	bl	800c154 <xflow>
 800c198:	bd10      	pop	{r4, pc}
	...

0800c19c <_init>:
 800c19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c19e:	46c0      	nop			@ (mov r8, r8)
 800c1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1a2:	bc08      	pop	{r3}
 800c1a4:	469e      	mov	lr, r3
 800c1a6:	4770      	bx	lr

0800c1a8 <_fini>:
 800c1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1aa:	46c0      	nop			@ (mov r8, r8)
 800c1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1ae:	bc08      	pop	{r3}
 800c1b0:	469e      	mov	lr, r3
 800c1b2:	4770      	bx	lr

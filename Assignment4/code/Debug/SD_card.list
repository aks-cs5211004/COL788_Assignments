
SD_card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d968  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  0800da28  0800da28  0000ea28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dfc0  0800dfc0  0000f1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800dfc0  0800dfc0  0000efc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dfc8  0800dfc8  0000f1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dfc8  0800dfc8  0000efc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dfcc  0800dfcc  0000efcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800dfd0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001580  200001f0  0800e1c0  0000f1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001770  0800e1c0  0000f770  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000f1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a078  00000000  00000000  0000f218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000408f  00000000  00000000  00029290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001950  00000000  00000000  0002d320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000139e  00000000  00000000  0002ec70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000155a0  00000000  00000000  0003000e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00007c58  00000000  00000000  000455ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0004d206  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006fc8  00000000  00000000  0004d24c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000050  00000000  00000000  00054214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f0 	.word	0x200001f0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800da10 	.word	0x0800da10

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f4 	.word	0x200001f4
 8000104:	0800da10 	.word	0x0800da10

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fe79 	bl	8002134 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fdb9 	bl	8001fc4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fe6b 	bl	8002134 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fe61 	bl	8002134 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fde3 	bl	800204c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fdd9 	bl	800204c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	@ (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	@ (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			@ (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f852 	bl	8000580 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			@ (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4699      	mov	r9, r3
 80004ee:	0c03      	lsrs	r3, r0, #16
 80004f0:	469c      	mov	ip, r3
 80004f2:	0413      	lsls	r3, r2, #16
 80004f4:	4647      	mov	r7, r8
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	001d      	movs	r5, r3
 80004fa:	000e      	movs	r6, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	0404      	lsls	r4, r0, #16
 8000500:	0c24      	lsrs	r4, r4, #16
 8000502:	b580      	push	{r7, lr}
 8000504:	0007      	movs	r7, r0
 8000506:	0c10      	lsrs	r0, r2, #16
 8000508:	434b      	muls	r3, r1
 800050a:	4365      	muls	r5, r4
 800050c:	4341      	muls	r1, r0
 800050e:	4360      	muls	r0, r4
 8000510:	0c2c      	lsrs	r4, r5, #16
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	1824      	adds	r4, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	42a3      	cmp	r3, r4
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	@ 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4356      	muls	r6, r2
 800052a:	0c23      	lsrs	r3, r4, #16
 800052c:	042d      	lsls	r5, r5, #16
 800052e:	0c2d      	lsrs	r5, r5, #16
 8000530:	1989      	adds	r1, r1, r6
 8000532:	4463      	add	r3, ip
 8000534:	0424      	lsls	r4, r4, #16
 8000536:	1960      	adds	r0, r4, r5
 8000538:	18c9      	adds	r1, r1, r3
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_d2uiz>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	2200      	movs	r2, #0
 8000548:	4b0c      	ldr	r3, [pc, #48]	@ (800057c <__aeabi_d2uiz+0x38>)
 800054a:	0004      	movs	r4, r0
 800054c:	000d      	movs	r5, r1
 800054e:	f7ff ffa1 	bl	8000494 <__aeabi_dcmpge>
 8000552:	2800      	cmp	r0, #0
 8000554:	d104      	bne.n	8000560 <__aeabi_d2uiz+0x1c>
 8000556:	0020      	movs	r0, r4
 8000558:	0029      	movs	r1, r5
 800055a:	f002 fce3 	bl	8002f24 <__aeabi_d2iz>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	4b06      	ldr	r3, [pc, #24]	@ (800057c <__aeabi_d2uiz+0x38>)
 8000562:	2200      	movs	r2, #0
 8000564:	0020      	movs	r0, r4
 8000566:	0029      	movs	r1, r5
 8000568:	f002 f91e 	bl	80027a8 <__aeabi_dsub>
 800056c:	f002 fcda 	bl	8002f24 <__aeabi_d2iz>
 8000570:	2380      	movs	r3, #128	@ 0x80
 8000572:	061b      	lsls	r3, r3, #24
 8000574:	469c      	mov	ip, r3
 8000576:	4460      	add	r0, ip
 8000578:	e7f1      	b.n	800055e <__aeabi_d2uiz+0x1a>
 800057a:	46c0      	nop			@ (mov r8, r8)
 800057c:	41e00000 	.word	0x41e00000

08000580 <__udivmoddi4>:
 8000580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000582:	4657      	mov	r7, sl
 8000584:	464e      	mov	r6, r9
 8000586:	4645      	mov	r5, r8
 8000588:	46de      	mov	lr, fp
 800058a:	b5e0      	push	{r5, r6, r7, lr}
 800058c:	0004      	movs	r4, r0
 800058e:	000d      	movs	r5, r1
 8000590:	4692      	mov	sl, r2
 8000592:	4699      	mov	r9, r3
 8000594:	b083      	sub	sp, #12
 8000596:	428b      	cmp	r3, r1
 8000598:	d830      	bhi.n	80005fc <__udivmoddi4+0x7c>
 800059a:	d02d      	beq.n	80005f8 <__udivmoddi4+0x78>
 800059c:	4649      	mov	r1, r9
 800059e:	4650      	mov	r0, sl
 80005a0:	f002 fe38 	bl	8003214 <__clzdi2>
 80005a4:	0029      	movs	r1, r5
 80005a6:	0006      	movs	r6, r0
 80005a8:	0020      	movs	r0, r4
 80005aa:	f002 fe33 	bl	8003214 <__clzdi2>
 80005ae:	1a33      	subs	r3, r6, r0
 80005b0:	4698      	mov	r8, r3
 80005b2:	3b20      	subs	r3, #32
 80005b4:	d434      	bmi.n	8000620 <__udivmoddi4+0xa0>
 80005b6:	469b      	mov	fp, r3
 80005b8:	4653      	mov	r3, sl
 80005ba:	465a      	mov	r2, fp
 80005bc:	4093      	lsls	r3, r2
 80005be:	4642      	mov	r2, r8
 80005c0:	001f      	movs	r7, r3
 80005c2:	4653      	mov	r3, sl
 80005c4:	4093      	lsls	r3, r2
 80005c6:	001e      	movs	r6, r3
 80005c8:	42af      	cmp	r7, r5
 80005ca:	d83b      	bhi.n	8000644 <__udivmoddi4+0xc4>
 80005cc:	42af      	cmp	r7, r5
 80005ce:	d100      	bne.n	80005d2 <__udivmoddi4+0x52>
 80005d0:	e079      	b.n	80006c6 <__udivmoddi4+0x146>
 80005d2:	465b      	mov	r3, fp
 80005d4:	1ba4      	subs	r4, r4, r6
 80005d6:	41bd      	sbcs	r5, r7
 80005d8:	2b00      	cmp	r3, #0
 80005da:	da00      	bge.n	80005de <__udivmoddi4+0x5e>
 80005dc:	e076      	b.n	80006cc <__udivmoddi4+0x14c>
 80005de:	2200      	movs	r2, #0
 80005e0:	2300      	movs	r3, #0
 80005e2:	9200      	str	r2, [sp, #0]
 80005e4:	9301      	str	r3, [sp, #4]
 80005e6:	2301      	movs	r3, #1
 80005e8:	465a      	mov	r2, fp
 80005ea:	4093      	lsls	r3, r2
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	2301      	movs	r3, #1
 80005f0:	4642      	mov	r2, r8
 80005f2:	4093      	lsls	r3, r2
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	e029      	b.n	800064c <__udivmoddi4+0xcc>
 80005f8:	4282      	cmp	r2, r0
 80005fa:	d9cf      	bls.n	800059c <__udivmoddi4+0x1c>
 80005fc:	2200      	movs	r2, #0
 80005fe:	2300      	movs	r3, #0
 8000600:	9200      	str	r2, [sp, #0]
 8000602:	9301      	str	r3, [sp, #4]
 8000604:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <__udivmoddi4+0x8e>
 800060a:	601c      	str	r4, [r3, #0]
 800060c:	605d      	str	r5, [r3, #4]
 800060e:	9800      	ldr	r0, [sp, #0]
 8000610:	9901      	ldr	r1, [sp, #4]
 8000612:	b003      	add	sp, #12
 8000614:	bcf0      	pop	{r4, r5, r6, r7}
 8000616:	46bb      	mov	fp, r7
 8000618:	46b2      	mov	sl, r6
 800061a:	46a9      	mov	r9, r5
 800061c:	46a0      	mov	r8, r4
 800061e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000620:	4642      	mov	r2, r8
 8000622:	469b      	mov	fp, r3
 8000624:	2320      	movs	r3, #32
 8000626:	1a9b      	subs	r3, r3, r2
 8000628:	4652      	mov	r2, sl
 800062a:	40da      	lsrs	r2, r3
 800062c:	4641      	mov	r1, r8
 800062e:	0013      	movs	r3, r2
 8000630:	464a      	mov	r2, r9
 8000632:	408a      	lsls	r2, r1
 8000634:	0017      	movs	r7, r2
 8000636:	4642      	mov	r2, r8
 8000638:	431f      	orrs	r7, r3
 800063a:	4653      	mov	r3, sl
 800063c:	4093      	lsls	r3, r2
 800063e:	001e      	movs	r6, r3
 8000640:	42af      	cmp	r7, r5
 8000642:	d9c3      	bls.n	80005cc <__udivmoddi4+0x4c>
 8000644:	2200      	movs	r2, #0
 8000646:	2300      	movs	r3, #0
 8000648:	9200      	str	r2, [sp, #0]
 800064a:	9301      	str	r3, [sp, #4]
 800064c:	4643      	mov	r3, r8
 800064e:	2b00      	cmp	r3, #0
 8000650:	d0d8      	beq.n	8000604 <__udivmoddi4+0x84>
 8000652:	07fb      	lsls	r3, r7, #31
 8000654:	0872      	lsrs	r2, r6, #1
 8000656:	431a      	orrs	r2, r3
 8000658:	4646      	mov	r6, r8
 800065a:	087b      	lsrs	r3, r7, #1
 800065c:	e00e      	b.n	800067c <__udivmoddi4+0xfc>
 800065e:	42ab      	cmp	r3, r5
 8000660:	d101      	bne.n	8000666 <__udivmoddi4+0xe6>
 8000662:	42a2      	cmp	r2, r4
 8000664:	d80c      	bhi.n	8000680 <__udivmoddi4+0x100>
 8000666:	1aa4      	subs	r4, r4, r2
 8000668:	419d      	sbcs	r5, r3
 800066a:	2001      	movs	r0, #1
 800066c:	1924      	adds	r4, r4, r4
 800066e:	416d      	adcs	r5, r5
 8000670:	2100      	movs	r1, #0
 8000672:	3e01      	subs	r6, #1
 8000674:	1824      	adds	r4, r4, r0
 8000676:	414d      	adcs	r5, r1
 8000678:	2e00      	cmp	r6, #0
 800067a:	d006      	beq.n	800068a <__udivmoddi4+0x10a>
 800067c:	42ab      	cmp	r3, r5
 800067e:	d9ee      	bls.n	800065e <__udivmoddi4+0xde>
 8000680:	3e01      	subs	r6, #1
 8000682:	1924      	adds	r4, r4, r4
 8000684:	416d      	adcs	r5, r5
 8000686:	2e00      	cmp	r6, #0
 8000688:	d1f8      	bne.n	800067c <__udivmoddi4+0xfc>
 800068a:	9800      	ldr	r0, [sp, #0]
 800068c:	9901      	ldr	r1, [sp, #4]
 800068e:	465b      	mov	r3, fp
 8000690:	1900      	adds	r0, r0, r4
 8000692:	4169      	adcs	r1, r5
 8000694:	2b00      	cmp	r3, #0
 8000696:	db24      	blt.n	80006e2 <__udivmoddi4+0x162>
 8000698:	002b      	movs	r3, r5
 800069a:	465a      	mov	r2, fp
 800069c:	4644      	mov	r4, r8
 800069e:	40d3      	lsrs	r3, r2
 80006a0:	002a      	movs	r2, r5
 80006a2:	40e2      	lsrs	r2, r4
 80006a4:	001c      	movs	r4, r3
 80006a6:	465b      	mov	r3, fp
 80006a8:	0015      	movs	r5, r2
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	db2a      	blt.n	8000704 <__udivmoddi4+0x184>
 80006ae:	0026      	movs	r6, r4
 80006b0:	409e      	lsls	r6, r3
 80006b2:	0033      	movs	r3, r6
 80006b4:	0026      	movs	r6, r4
 80006b6:	4647      	mov	r7, r8
 80006b8:	40be      	lsls	r6, r7
 80006ba:	0032      	movs	r2, r6
 80006bc:	1a80      	subs	r0, r0, r2
 80006be:	4199      	sbcs	r1, r3
 80006c0:	9000      	str	r0, [sp, #0]
 80006c2:	9101      	str	r1, [sp, #4]
 80006c4:	e79e      	b.n	8000604 <__udivmoddi4+0x84>
 80006c6:	42a3      	cmp	r3, r4
 80006c8:	d8bc      	bhi.n	8000644 <__udivmoddi4+0xc4>
 80006ca:	e782      	b.n	80005d2 <__udivmoddi4+0x52>
 80006cc:	4642      	mov	r2, r8
 80006ce:	2320      	movs	r3, #32
 80006d0:	2100      	movs	r1, #0
 80006d2:	1a9b      	subs	r3, r3, r2
 80006d4:	2200      	movs	r2, #0
 80006d6:	9100      	str	r1, [sp, #0]
 80006d8:	9201      	str	r2, [sp, #4]
 80006da:	2201      	movs	r2, #1
 80006dc:	40da      	lsrs	r2, r3
 80006de:	9201      	str	r2, [sp, #4]
 80006e0:	e785      	b.n	80005ee <__udivmoddi4+0x6e>
 80006e2:	4642      	mov	r2, r8
 80006e4:	2320      	movs	r3, #32
 80006e6:	1a9b      	subs	r3, r3, r2
 80006e8:	002a      	movs	r2, r5
 80006ea:	4646      	mov	r6, r8
 80006ec:	409a      	lsls	r2, r3
 80006ee:	0023      	movs	r3, r4
 80006f0:	40f3      	lsrs	r3, r6
 80006f2:	4644      	mov	r4, r8
 80006f4:	4313      	orrs	r3, r2
 80006f6:	002a      	movs	r2, r5
 80006f8:	40e2      	lsrs	r2, r4
 80006fa:	001c      	movs	r4, r3
 80006fc:	465b      	mov	r3, fp
 80006fe:	0015      	movs	r5, r2
 8000700:	2b00      	cmp	r3, #0
 8000702:	dad4      	bge.n	80006ae <__udivmoddi4+0x12e>
 8000704:	4642      	mov	r2, r8
 8000706:	002f      	movs	r7, r5
 8000708:	2320      	movs	r3, #32
 800070a:	0026      	movs	r6, r4
 800070c:	4097      	lsls	r7, r2
 800070e:	1a9b      	subs	r3, r3, r2
 8000710:	40de      	lsrs	r6, r3
 8000712:	003b      	movs	r3, r7
 8000714:	4333      	orrs	r3, r6
 8000716:	e7cd      	b.n	80006b4 <__udivmoddi4+0x134>

08000718 <__aeabi_fadd>:
 8000718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800071a:	46ce      	mov	lr, r9
 800071c:	4647      	mov	r7, r8
 800071e:	0243      	lsls	r3, r0, #9
 8000720:	0a5a      	lsrs	r2, r3, #9
 8000722:	024e      	lsls	r6, r1, #9
 8000724:	0045      	lsls	r5, r0, #1
 8000726:	0fc4      	lsrs	r4, r0, #31
 8000728:	0048      	lsls	r0, r1, #1
 800072a:	4691      	mov	r9, r2
 800072c:	0e2d      	lsrs	r5, r5, #24
 800072e:	0a72      	lsrs	r2, r6, #9
 8000730:	0e00      	lsrs	r0, r0, #24
 8000732:	4694      	mov	ip, r2
 8000734:	b580      	push	{r7, lr}
 8000736:	099b      	lsrs	r3, r3, #6
 8000738:	0fc9      	lsrs	r1, r1, #31
 800073a:	09b6      	lsrs	r6, r6, #6
 800073c:	1a2a      	subs	r2, r5, r0
 800073e:	428c      	cmp	r4, r1
 8000740:	d021      	beq.n	8000786 <__aeabi_fadd+0x6e>
 8000742:	2a00      	cmp	r2, #0
 8000744:	dd0d      	ble.n	8000762 <__aeabi_fadd+0x4a>
 8000746:	2800      	cmp	r0, #0
 8000748:	d12d      	bne.n	80007a6 <__aeabi_fadd+0x8e>
 800074a:	2e00      	cmp	r6, #0
 800074c:	d100      	bne.n	8000750 <__aeabi_fadd+0x38>
 800074e:	e08d      	b.n	800086c <__aeabi_fadd+0x154>
 8000750:	1e51      	subs	r1, r2, #1
 8000752:	2a01      	cmp	r2, #1
 8000754:	d100      	bne.n	8000758 <__aeabi_fadd+0x40>
 8000756:	e11d      	b.n	8000994 <__aeabi_fadd+0x27c>
 8000758:	2aff      	cmp	r2, #255	@ 0xff
 800075a:	d100      	bne.n	800075e <__aeabi_fadd+0x46>
 800075c:	e0ab      	b.n	80008b6 <__aeabi_fadd+0x19e>
 800075e:	000a      	movs	r2, r1
 8000760:	e027      	b.n	80007b2 <__aeabi_fadd+0x9a>
 8000762:	2a00      	cmp	r2, #0
 8000764:	d04d      	beq.n	8000802 <__aeabi_fadd+0xea>
 8000766:	1b42      	subs	r2, r0, r5
 8000768:	2d00      	cmp	r5, #0
 800076a:	d000      	beq.n	800076e <__aeabi_fadd+0x56>
 800076c:	e0cc      	b.n	8000908 <__aeabi_fadd+0x1f0>
 800076e:	2b00      	cmp	r3, #0
 8000770:	d100      	bne.n	8000774 <__aeabi_fadd+0x5c>
 8000772:	e079      	b.n	8000868 <__aeabi_fadd+0x150>
 8000774:	1e54      	subs	r4, r2, #1
 8000776:	2a01      	cmp	r2, #1
 8000778:	d100      	bne.n	800077c <__aeabi_fadd+0x64>
 800077a:	e128      	b.n	80009ce <__aeabi_fadd+0x2b6>
 800077c:	2aff      	cmp	r2, #255	@ 0xff
 800077e:	d100      	bne.n	8000782 <__aeabi_fadd+0x6a>
 8000780:	e097      	b.n	80008b2 <__aeabi_fadd+0x19a>
 8000782:	0022      	movs	r2, r4
 8000784:	e0c5      	b.n	8000912 <__aeabi_fadd+0x1fa>
 8000786:	2a00      	cmp	r2, #0
 8000788:	dc00      	bgt.n	800078c <__aeabi_fadd+0x74>
 800078a:	e096      	b.n	80008ba <__aeabi_fadd+0x1a2>
 800078c:	2800      	cmp	r0, #0
 800078e:	d04f      	beq.n	8000830 <__aeabi_fadd+0x118>
 8000790:	2dff      	cmp	r5, #255	@ 0xff
 8000792:	d100      	bne.n	8000796 <__aeabi_fadd+0x7e>
 8000794:	e08f      	b.n	80008b6 <__aeabi_fadd+0x19e>
 8000796:	2180      	movs	r1, #128	@ 0x80
 8000798:	04c9      	lsls	r1, r1, #19
 800079a:	430e      	orrs	r6, r1
 800079c:	2a1b      	cmp	r2, #27
 800079e:	dd51      	ble.n	8000844 <__aeabi_fadd+0x12c>
 80007a0:	002a      	movs	r2, r5
 80007a2:	3301      	adds	r3, #1
 80007a4:	e018      	b.n	80007d8 <__aeabi_fadd+0xc0>
 80007a6:	2dff      	cmp	r5, #255	@ 0xff
 80007a8:	d100      	bne.n	80007ac <__aeabi_fadd+0x94>
 80007aa:	e084      	b.n	80008b6 <__aeabi_fadd+0x19e>
 80007ac:	2180      	movs	r1, #128	@ 0x80
 80007ae:	04c9      	lsls	r1, r1, #19
 80007b0:	430e      	orrs	r6, r1
 80007b2:	2101      	movs	r1, #1
 80007b4:	2a1b      	cmp	r2, #27
 80007b6:	dc08      	bgt.n	80007ca <__aeabi_fadd+0xb2>
 80007b8:	0031      	movs	r1, r6
 80007ba:	2020      	movs	r0, #32
 80007bc:	40d1      	lsrs	r1, r2
 80007be:	1a82      	subs	r2, r0, r2
 80007c0:	4096      	lsls	r6, r2
 80007c2:	0032      	movs	r2, r6
 80007c4:	1e50      	subs	r0, r2, #1
 80007c6:	4182      	sbcs	r2, r0
 80007c8:	4311      	orrs	r1, r2
 80007ca:	1a5b      	subs	r3, r3, r1
 80007cc:	015a      	lsls	r2, r3, #5
 80007ce:	d459      	bmi.n	8000884 <__aeabi_fadd+0x16c>
 80007d0:	2107      	movs	r1, #7
 80007d2:	002a      	movs	r2, r5
 80007d4:	4019      	ands	r1, r3
 80007d6:	d049      	beq.n	800086c <__aeabi_fadd+0x154>
 80007d8:	210f      	movs	r1, #15
 80007da:	4019      	ands	r1, r3
 80007dc:	2904      	cmp	r1, #4
 80007de:	d000      	beq.n	80007e2 <__aeabi_fadd+0xca>
 80007e0:	3304      	adds	r3, #4
 80007e2:	0159      	lsls	r1, r3, #5
 80007e4:	d542      	bpl.n	800086c <__aeabi_fadd+0x154>
 80007e6:	1c50      	adds	r0, r2, #1
 80007e8:	2afe      	cmp	r2, #254	@ 0xfe
 80007ea:	d03a      	beq.n	8000862 <__aeabi_fadd+0x14a>
 80007ec:	019b      	lsls	r3, r3, #6
 80007ee:	b2c0      	uxtb	r0, r0
 80007f0:	0a5b      	lsrs	r3, r3, #9
 80007f2:	05c0      	lsls	r0, r0, #23
 80007f4:	4318      	orrs	r0, r3
 80007f6:	07e4      	lsls	r4, r4, #31
 80007f8:	4320      	orrs	r0, r4
 80007fa:	bcc0      	pop	{r6, r7}
 80007fc:	46b9      	mov	r9, r7
 80007fe:	46b0      	mov	r8, r6
 8000800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000802:	20fe      	movs	r0, #254	@ 0xfe
 8000804:	4680      	mov	r8, r0
 8000806:	1c6f      	adds	r7, r5, #1
 8000808:	0038      	movs	r0, r7
 800080a:	4647      	mov	r7, r8
 800080c:	4207      	tst	r7, r0
 800080e:	d000      	beq.n	8000812 <__aeabi_fadd+0xfa>
 8000810:	e08e      	b.n	8000930 <__aeabi_fadd+0x218>
 8000812:	2d00      	cmp	r5, #0
 8000814:	d000      	beq.n	8000818 <__aeabi_fadd+0x100>
 8000816:	e0b4      	b.n	8000982 <__aeabi_fadd+0x26a>
 8000818:	2b00      	cmp	r3, #0
 800081a:	d100      	bne.n	800081e <__aeabi_fadd+0x106>
 800081c:	e0db      	b.n	80009d6 <__aeabi_fadd+0x2be>
 800081e:	2e00      	cmp	r6, #0
 8000820:	d06c      	beq.n	80008fc <__aeabi_fadd+0x1e4>
 8000822:	1b98      	subs	r0, r3, r6
 8000824:	0145      	lsls	r5, r0, #5
 8000826:	d400      	bmi.n	800082a <__aeabi_fadd+0x112>
 8000828:	e0f7      	b.n	8000a1a <__aeabi_fadd+0x302>
 800082a:	000c      	movs	r4, r1
 800082c:	1af3      	subs	r3, r6, r3
 800082e:	e03d      	b.n	80008ac <__aeabi_fadd+0x194>
 8000830:	2e00      	cmp	r6, #0
 8000832:	d01b      	beq.n	800086c <__aeabi_fadd+0x154>
 8000834:	1e51      	subs	r1, r2, #1
 8000836:	2a01      	cmp	r2, #1
 8000838:	d100      	bne.n	800083c <__aeabi_fadd+0x124>
 800083a:	e082      	b.n	8000942 <__aeabi_fadd+0x22a>
 800083c:	2aff      	cmp	r2, #255	@ 0xff
 800083e:	d03a      	beq.n	80008b6 <__aeabi_fadd+0x19e>
 8000840:	000a      	movs	r2, r1
 8000842:	e7ab      	b.n	800079c <__aeabi_fadd+0x84>
 8000844:	0031      	movs	r1, r6
 8000846:	2020      	movs	r0, #32
 8000848:	40d1      	lsrs	r1, r2
 800084a:	1a82      	subs	r2, r0, r2
 800084c:	4096      	lsls	r6, r2
 800084e:	0032      	movs	r2, r6
 8000850:	1e50      	subs	r0, r2, #1
 8000852:	4182      	sbcs	r2, r0
 8000854:	430a      	orrs	r2, r1
 8000856:	189b      	adds	r3, r3, r2
 8000858:	015a      	lsls	r2, r3, #5
 800085a:	d5b9      	bpl.n	80007d0 <__aeabi_fadd+0xb8>
 800085c:	1c6a      	adds	r2, r5, #1
 800085e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000860:	d175      	bne.n	800094e <__aeabi_fadd+0x236>
 8000862:	20ff      	movs	r0, #255	@ 0xff
 8000864:	2300      	movs	r3, #0
 8000866:	e7c4      	b.n	80007f2 <__aeabi_fadd+0xda>
 8000868:	000c      	movs	r4, r1
 800086a:	0033      	movs	r3, r6
 800086c:	08db      	lsrs	r3, r3, #3
 800086e:	2aff      	cmp	r2, #255	@ 0xff
 8000870:	d146      	bne.n	8000900 <__aeabi_fadd+0x1e8>
 8000872:	2b00      	cmp	r3, #0
 8000874:	d0f5      	beq.n	8000862 <__aeabi_fadd+0x14a>
 8000876:	2280      	movs	r2, #128	@ 0x80
 8000878:	03d2      	lsls	r2, r2, #15
 800087a:	4313      	orrs	r3, r2
 800087c:	025b      	lsls	r3, r3, #9
 800087e:	20ff      	movs	r0, #255	@ 0xff
 8000880:	0a5b      	lsrs	r3, r3, #9
 8000882:	e7b6      	b.n	80007f2 <__aeabi_fadd+0xda>
 8000884:	019f      	lsls	r7, r3, #6
 8000886:	09bf      	lsrs	r7, r7, #6
 8000888:	0038      	movs	r0, r7
 800088a:	f002 fca5 	bl	80031d8 <__clzsi2>
 800088e:	3805      	subs	r0, #5
 8000890:	4087      	lsls	r7, r0
 8000892:	4285      	cmp	r5, r0
 8000894:	dc24      	bgt.n	80008e0 <__aeabi_fadd+0x1c8>
 8000896:	003b      	movs	r3, r7
 8000898:	2120      	movs	r1, #32
 800089a:	1b42      	subs	r2, r0, r5
 800089c:	3201      	adds	r2, #1
 800089e:	40d3      	lsrs	r3, r2
 80008a0:	1a8a      	subs	r2, r1, r2
 80008a2:	4097      	lsls	r7, r2
 80008a4:	1e7a      	subs	r2, r7, #1
 80008a6:	4197      	sbcs	r7, r2
 80008a8:	2200      	movs	r2, #0
 80008aa:	433b      	orrs	r3, r7
 80008ac:	0759      	lsls	r1, r3, #29
 80008ae:	d193      	bne.n	80007d8 <__aeabi_fadd+0xc0>
 80008b0:	e797      	b.n	80007e2 <__aeabi_fadd+0xca>
 80008b2:	000c      	movs	r4, r1
 80008b4:	0033      	movs	r3, r6
 80008b6:	08db      	lsrs	r3, r3, #3
 80008b8:	e7db      	b.n	8000872 <__aeabi_fadd+0x15a>
 80008ba:	2a00      	cmp	r2, #0
 80008bc:	d014      	beq.n	80008e8 <__aeabi_fadd+0x1d0>
 80008be:	1b42      	subs	r2, r0, r5
 80008c0:	2d00      	cmp	r5, #0
 80008c2:	d14b      	bne.n	800095c <__aeabi_fadd+0x244>
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d0d0      	beq.n	800086a <__aeabi_fadd+0x152>
 80008c8:	1e51      	subs	r1, r2, #1
 80008ca:	2a01      	cmp	r2, #1
 80008cc:	d100      	bne.n	80008d0 <__aeabi_fadd+0x1b8>
 80008ce:	e09e      	b.n	8000a0e <__aeabi_fadd+0x2f6>
 80008d0:	2aff      	cmp	r2, #255	@ 0xff
 80008d2:	d0ef      	beq.n	80008b4 <__aeabi_fadd+0x19c>
 80008d4:	000a      	movs	r2, r1
 80008d6:	2a1b      	cmp	r2, #27
 80008d8:	dd5f      	ble.n	800099a <__aeabi_fadd+0x282>
 80008da:	0002      	movs	r2, r0
 80008dc:	1c73      	adds	r3, r6, #1
 80008de:	e77b      	b.n	80007d8 <__aeabi_fadd+0xc0>
 80008e0:	4b50      	ldr	r3, [pc, #320]	@ (8000a24 <__aeabi_fadd+0x30c>)
 80008e2:	1a2a      	subs	r2, r5, r0
 80008e4:	403b      	ands	r3, r7
 80008e6:	e7e1      	b.n	80008ac <__aeabi_fadd+0x194>
 80008e8:	21fe      	movs	r1, #254	@ 0xfe
 80008ea:	1c6a      	adds	r2, r5, #1
 80008ec:	4211      	tst	r1, r2
 80008ee:	d13b      	bne.n	8000968 <__aeabi_fadd+0x250>
 80008f0:	2d00      	cmp	r5, #0
 80008f2:	d15d      	bne.n	80009b0 <__aeabi_fadd+0x298>
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d07f      	beq.n	80009f8 <__aeabi_fadd+0x2e0>
 80008f8:	2e00      	cmp	r6, #0
 80008fa:	d17f      	bne.n	80009fc <__aeabi_fadd+0x2e4>
 80008fc:	2200      	movs	r2, #0
 80008fe:	08db      	lsrs	r3, r3, #3
 8000900:	025b      	lsls	r3, r3, #9
 8000902:	0a5b      	lsrs	r3, r3, #9
 8000904:	b2d0      	uxtb	r0, r2
 8000906:	e774      	b.n	80007f2 <__aeabi_fadd+0xda>
 8000908:	28ff      	cmp	r0, #255	@ 0xff
 800090a:	d0d2      	beq.n	80008b2 <__aeabi_fadd+0x19a>
 800090c:	2480      	movs	r4, #128	@ 0x80
 800090e:	04e4      	lsls	r4, r4, #19
 8000910:	4323      	orrs	r3, r4
 8000912:	2401      	movs	r4, #1
 8000914:	2a1b      	cmp	r2, #27
 8000916:	dc07      	bgt.n	8000928 <__aeabi_fadd+0x210>
 8000918:	001c      	movs	r4, r3
 800091a:	2520      	movs	r5, #32
 800091c:	40d4      	lsrs	r4, r2
 800091e:	1aaa      	subs	r2, r5, r2
 8000920:	4093      	lsls	r3, r2
 8000922:	1e5a      	subs	r2, r3, #1
 8000924:	4193      	sbcs	r3, r2
 8000926:	431c      	orrs	r4, r3
 8000928:	1b33      	subs	r3, r6, r4
 800092a:	0005      	movs	r5, r0
 800092c:	000c      	movs	r4, r1
 800092e:	e74d      	b.n	80007cc <__aeabi_fadd+0xb4>
 8000930:	1b9f      	subs	r7, r3, r6
 8000932:	017a      	lsls	r2, r7, #5
 8000934:	d422      	bmi.n	800097c <__aeabi_fadd+0x264>
 8000936:	2f00      	cmp	r7, #0
 8000938:	d1a6      	bne.n	8000888 <__aeabi_fadd+0x170>
 800093a:	2400      	movs	r4, #0
 800093c:	2000      	movs	r0, #0
 800093e:	2300      	movs	r3, #0
 8000940:	e757      	b.n	80007f2 <__aeabi_fadd+0xda>
 8000942:	199b      	adds	r3, r3, r6
 8000944:	2501      	movs	r5, #1
 8000946:	3201      	adds	r2, #1
 8000948:	0159      	lsls	r1, r3, #5
 800094a:	d400      	bmi.n	800094e <__aeabi_fadd+0x236>
 800094c:	e740      	b.n	80007d0 <__aeabi_fadd+0xb8>
 800094e:	2101      	movs	r1, #1
 8000950:	4835      	ldr	r0, [pc, #212]	@ (8000a28 <__aeabi_fadd+0x310>)
 8000952:	4019      	ands	r1, r3
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	4003      	ands	r3, r0
 8000958:	430b      	orrs	r3, r1
 800095a:	e7a7      	b.n	80008ac <__aeabi_fadd+0x194>
 800095c:	28ff      	cmp	r0, #255	@ 0xff
 800095e:	d0a9      	beq.n	80008b4 <__aeabi_fadd+0x19c>
 8000960:	2180      	movs	r1, #128	@ 0x80
 8000962:	04c9      	lsls	r1, r1, #19
 8000964:	430b      	orrs	r3, r1
 8000966:	e7b6      	b.n	80008d6 <__aeabi_fadd+0x1be>
 8000968:	2aff      	cmp	r2, #255	@ 0xff
 800096a:	d100      	bne.n	800096e <__aeabi_fadd+0x256>
 800096c:	e779      	b.n	8000862 <__aeabi_fadd+0x14a>
 800096e:	199b      	adds	r3, r3, r6
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	0759      	lsls	r1, r3, #29
 8000974:	d000      	beq.n	8000978 <__aeabi_fadd+0x260>
 8000976:	e72f      	b.n	80007d8 <__aeabi_fadd+0xc0>
 8000978:	08db      	lsrs	r3, r3, #3
 800097a:	e7c1      	b.n	8000900 <__aeabi_fadd+0x1e8>
 800097c:	000c      	movs	r4, r1
 800097e:	1af7      	subs	r7, r6, r3
 8000980:	e782      	b.n	8000888 <__aeabi_fadd+0x170>
 8000982:	2b00      	cmp	r3, #0
 8000984:	d12c      	bne.n	80009e0 <__aeabi_fadd+0x2c8>
 8000986:	2e00      	cmp	r6, #0
 8000988:	d193      	bne.n	80008b2 <__aeabi_fadd+0x19a>
 800098a:	2380      	movs	r3, #128	@ 0x80
 800098c:	2400      	movs	r4, #0
 800098e:	20ff      	movs	r0, #255	@ 0xff
 8000990:	03db      	lsls	r3, r3, #15
 8000992:	e72e      	b.n	80007f2 <__aeabi_fadd+0xda>
 8000994:	2501      	movs	r5, #1
 8000996:	1b9b      	subs	r3, r3, r6
 8000998:	e718      	b.n	80007cc <__aeabi_fadd+0xb4>
 800099a:	0019      	movs	r1, r3
 800099c:	2520      	movs	r5, #32
 800099e:	40d1      	lsrs	r1, r2
 80009a0:	1aaa      	subs	r2, r5, r2
 80009a2:	4093      	lsls	r3, r2
 80009a4:	1e5a      	subs	r2, r3, #1
 80009a6:	4193      	sbcs	r3, r2
 80009a8:	430b      	orrs	r3, r1
 80009aa:	0005      	movs	r5, r0
 80009ac:	199b      	adds	r3, r3, r6
 80009ae:	e753      	b.n	8000858 <__aeabi_fadd+0x140>
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_fadd+0x29e>
 80009b4:	e77e      	b.n	80008b4 <__aeabi_fadd+0x19c>
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d100      	bne.n	80009bc <__aeabi_fadd+0x2a4>
 80009ba:	e77c      	b.n	80008b6 <__aeabi_fadd+0x19e>
 80009bc:	2280      	movs	r2, #128	@ 0x80
 80009be:	03d2      	lsls	r2, r2, #15
 80009c0:	4591      	cmp	r9, r2
 80009c2:	d302      	bcc.n	80009ca <__aeabi_fadd+0x2b2>
 80009c4:	4594      	cmp	ip, r2
 80009c6:	d200      	bcs.n	80009ca <__aeabi_fadd+0x2b2>
 80009c8:	0033      	movs	r3, r6
 80009ca:	08db      	lsrs	r3, r3, #3
 80009cc:	e753      	b.n	8000876 <__aeabi_fadd+0x15e>
 80009ce:	000c      	movs	r4, r1
 80009d0:	1af3      	subs	r3, r6, r3
 80009d2:	3501      	adds	r5, #1
 80009d4:	e6fa      	b.n	80007cc <__aeabi_fadd+0xb4>
 80009d6:	2e00      	cmp	r6, #0
 80009d8:	d0af      	beq.n	800093a <__aeabi_fadd+0x222>
 80009da:	000c      	movs	r4, r1
 80009dc:	0033      	movs	r3, r6
 80009de:	e78d      	b.n	80008fc <__aeabi_fadd+0x1e4>
 80009e0:	2e00      	cmp	r6, #0
 80009e2:	d100      	bne.n	80009e6 <__aeabi_fadd+0x2ce>
 80009e4:	e767      	b.n	80008b6 <__aeabi_fadd+0x19e>
 80009e6:	2280      	movs	r2, #128	@ 0x80
 80009e8:	03d2      	lsls	r2, r2, #15
 80009ea:	4591      	cmp	r9, r2
 80009ec:	d3ed      	bcc.n	80009ca <__aeabi_fadd+0x2b2>
 80009ee:	4594      	cmp	ip, r2
 80009f0:	d2eb      	bcs.n	80009ca <__aeabi_fadd+0x2b2>
 80009f2:	000c      	movs	r4, r1
 80009f4:	0033      	movs	r3, r6
 80009f6:	e7e8      	b.n	80009ca <__aeabi_fadd+0x2b2>
 80009f8:	0033      	movs	r3, r6
 80009fa:	e77f      	b.n	80008fc <__aeabi_fadd+0x1e4>
 80009fc:	199b      	adds	r3, r3, r6
 80009fe:	2200      	movs	r2, #0
 8000a00:	0159      	lsls	r1, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0x260>
 8000a04:	4a07      	ldr	r2, [pc, #28]	@ (8000a24 <__aeabi_fadd+0x30c>)
 8000a06:	4013      	ands	r3, r2
 8000a08:	08db      	lsrs	r3, r3, #3
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	e778      	b.n	8000900 <__aeabi_fadd+0x1e8>
 8000a0e:	199b      	adds	r3, r3, r6
 8000a10:	3201      	adds	r2, #1
 8000a12:	3501      	adds	r5, #1
 8000a14:	0159      	lsls	r1, r3, #5
 8000a16:	d49a      	bmi.n	800094e <__aeabi_fadd+0x236>
 8000a18:	e6da      	b.n	80007d0 <__aeabi_fadd+0xb8>
 8000a1a:	1e03      	subs	r3, r0, #0
 8000a1c:	d08d      	beq.n	800093a <__aeabi_fadd+0x222>
 8000a1e:	08db      	lsrs	r3, r3, #3
 8000a20:	e76e      	b.n	8000900 <__aeabi_fadd+0x1e8>
 8000a22:	46c0      	nop			@ (mov r8, r8)
 8000a24:	fbffffff 	.word	0xfbffffff
 8000a28:	7dffffff 	.word	0x7dffffff

08000a2c <__aeabi_fdiv>:
 8000a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a2e:	464f      	mov	r7, r9
 8000a30:	4646      	mov	r6, r8
 8000a32:	46d6      	mov	lr, sl
 8000a34:	0244      	lsls	r4, r0, #9
 8000a36:	b5c0      	push	{r6, r7, lr}
 8000a38:	0047      	lsls	r7, r0, #1
 8000a3a:	1c0e      	adds	r6, r1, #0
 8000a3c:	0a64      	lsrs	r4, r4, #9
 8000a3e:	0e3f      	lsrs	r7, r7, #24
 8000a40:	0fc5      	lsrs	r5, r0, #31
 8000a42:	2f00      	cmp	r7, #0
 8000a44:	d03c      	beq.n	8000ac0 <__aeabi_fdiv+0x94>
 8000a46:	2fff      	cmp	r7, #255	@ 0xff
 8000a48:	d042      	beq.n	8000ad0 <__aeabi_fdiv+0xa4>
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	2280      	movs	r2, #128	@ 0x80
 8000a4e:	4699      	mov	r9, r3
 8000a50:	469a      	mov	sl, r3
 8000a52:	00e4      	lsls	r4, r4, #3
 8000a54:	04d2      	lsls	r2, r2, #19
 8000a56:	4314      	orrs	r4, r2
 8000a58:	3f7f      	subs	r7, #127	@ 0x7f
 8000a5a:	0273      	lsls	r3, r6, #9
 8000a5c:	0a5b      	lsrs	r3, r3, #9
 8000a5e:	4698      	mov	r8, r3
 8000a60:	0073      	lsls	r3, r6, #1
 8000a62:	0e1b      	lsrs	r3, r3, #24
 8000a64:	0ff6      	lsrs	r6, r6, #31
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d01b      	beq.n	8000aa2 <__aeabi_fdiv+0x76>
 8000a6a:	2bff      	cmp	r3, #255	@ 0xff
 8000a6c:	d013      	beq.n	8000a96 <__aeabi_fdiv+0x6a>
 8000a6e:	4642      	mov	r2, r8
 8000a70:	2180      	movs	r1, #128	@ 0x80
 8000a72:	00d2      	lsls	r2, r2, #3
 8000a74:	04c9      	lsls	r1, r1, #19
 8000a76:	4311      	orrs	r1, r2
 8000a78:	4688      	mov	r8, r1
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	3b7f      	subs	r3, #127	@ 0x7f
 8000a7e:	0029      	movs	r1, r5
 8000a80:	1aff      	subs	r7, r7, r3
 8000a82:	464b      	mov	r3, r9
 8000a84:	4071      	eors	r1, r6
 8000a86:	b2c9      	uxtb	r1, r1
 8000a88:	2b0f      	cmp	r3, #15
 8000a8a:	d900      	bls.n	8000a8e <__aeabi_fdiv+0x62>
 8000a8c:	e0b5      	b.n	8000bfa <__aeabi_fdiv+0x1ce>
 8000a8e:	4a74      	ldr	r2, [pc, #464]	@ (8000c60 <__aeabi_fdiv+0x234>)
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	58d3      	ldr	r3, [r2, r3]
 8000a94:	469f      	mov	pc, r3
 8000a96:	4643      	mov	r3, r8
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d13f      	bne.n	8000b1c <__aeabi_fdiv+0xf0>
 8000a9c:	3fff      	subs	r7, #255	@ 0xff
 8000a9e:	3302      	adds	r3, #2
 8000aa0:	e003      	b.n	8000aaa <__aeabi_fdiv+0x7e>
 8000aa2:	4643      	mov	r3, r8
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d12d      	bne.n	8000b04 <__aeabi_fdiv+0xd8>
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	0029      	movs	r1, r5
 8000aac:	464a      	mov	r2, r9
 8000aae:	4071      	eors	r1, r6
 8000ab0:	b2c9      	uxtb	r1, r1
 8000ab2:	431a      	orrs	r2, r3
 8000ab4:	2a0e      	cmp	r2, #14
 8000ab6:	d838      	bhi.n	8000b2a <__aeabi_fdiv+0xfe>
 8000ab8:	486a      	ldr	r0, [pc, #424]	@ (8000c64 <__aeabi_fdiv+0x238>)
 8000aba:	0092      	lsls	r2, r2, #2
 8000abc:	5882      	ldr	r2, [r0, r2]
 8000abe:	4697      	mov	pc, r2
 8000ac0:	2c00      	cmp	r4, #0
 8000ac2:	d113      	bne.n	8000aec <__aeabi_fdiv+0xc0>
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	4699      	mov	r9, r3
 8000ac8:	3b03      	subs	r3, #3
 8000aca:	2700      	movs	r7, #0
 8000acc:	469a      	mov	sl, r3
 8000ace:	e7c4      	b.n	8000a5a <__aeabi_fdiv+0x2e>
 8000ad0:	2c00      	cmp	r4, #0
 8000ad2:	d105      	bne.n	8000ae0 <__aeabi_fdiv+0xb4>
 8000ad4:	2308      	movs	r3, #8
 8000ad6:	4699      	mov	r9, r3
 8000ad8:	3b06      	subs	r3, #6
 8000ada:	27ff      	movs	r7, #255	@ 0xff
 8000adc:	469a      	mov	sl, r3
 8000ade:	e7bc      	b.n	8000a5a <__aeabi_fdiv+0x2e>
 8000ae0:	230c      	movs	r3, #12
 8000ae2:	4699      	mov	r9, r3
 8000ae4:	3b09      	subs	r3, #9
 8000ae6:	27ff      	movs	r7, #255	@ 0xff
 8000ae8:	469a      	mov	sl, r3
 8000aea:	e7b6      	b.n	8000a5a <__aeabi_fdiv+0x2e>
 8000aec:	0020      	movs	r0, r4
 8000aee:	f002 fb73 	bl	80031d8 <__clzsi2>
 8000af2:	2776      	movs	r7, #118	@ 0x76
 8000af4:	1f43      	subs	r3, r0, #5
 8000af6:	409c      	lsls	r4, r3
 8000af8:	2300      	movs	r3, #0
 8000afa:	427f      	negs	r7, r7
 8000afc:	4699      	mov	r9, r3
 8000afe:	469a      	mov	sl, r3
 8000b00:	1a3f      	subs	r7, r7, r0
 8000b02:	e7aa      	b.n	8000a5a <__aeabi_fdiv+0x2e>
 8000b04:	4640      	mov	r0, r8
 8000b06:	f002 fb67 	bl	80031d8 <__clzsi2>
 8000b0a:	4642      	mov	r2, r8
 8000b0c:	1f43      	subs	r3, r0, #5
 8000b0e:	409a      	lsls	r2, r3
 8000b10:	2376      	movs	r3, #118	@ 0x76
 8000b12:	425b      	negs	r3, r3
 8000b14:	1a1b      	subs	r3, r3, r0
 8000b16:	4690      	mov	r8, r2
 8000b18:	2000      	movs	r0, #0
 8000b1a:	e7b0      	b.n	8000a7e <__aeabi_fdiv+0x52>
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	464a      	mov	r2, r9
 8000b20:	431a      	orrs	r2, r3
 8000b22:	4691      	mov	r9, r2
 8000b24:	2003      	movs	r0, #3
 8000b26:	33fc      	adds	r3, #252	@ 0xfc
 8000b28:	e7a9      	b.n	8000a7e <__aeabi_fdiv+0x52>
 8000b2a:	000d      	movs	r5, r1
 8000b2c:	20ff      	movs	r0, #255	@ 0xff
 8000b2e:	2200      	movs	r2, #0
 8000b30:	05c0      	lsls	r0, r0, #23
 8000b32:	07ed      	lsls	r5, r5, #31
 8000b34:	4310      	orrs	r0, r2
 8000b36:	4328      	orrs	r0, r5
 8000b38:	bce0      	pop	{r5, r6, r7}
 8000b3a:	46ba      	mov	sl, r7
 8000b3c:	46b1      	mov	r9, r6
 8000b3e:	46a8      	mov	r8, r5
 8000b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b42:	000d      	movs	r5, r1
 8000b44:	2000      	movs	r0, #0
 8000b46:	2200      	movs	r2, #0
 8000b48:	e7f2      	b.n	8000b30 <__aeabi_fdiv+0x104>
 8000b4a:	4653      	mov	r3, sl
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d0ed      	beq.n	8000b2c <__aeabi_fdiv+0x100>
 8000b50:	2b03      	cmp	r3, #3
 8000b52:	d033      	beq.n	8000bbc <__aeabi_fdiv+0x190>
 8000b54:	46a0      	mov	r8, r4
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d105      	bne.n	8000b66 <__aeabi_fdiv+0x13a>
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	e7e7      	b.n	8000b30 <__aeabi_fdiv+0x104>
 8000b60:	0035      	movs	r5, r6
 8000b62:	2803      	cmp	r0, #3
 8000b64:	d07a      	beq.n	8000c5c <__aeabi_fdiv+0x230>
 8000b66:	003b      	movs	r3, r7
 8000b68:	337f      	adds	r3, #127	@ 0x7f
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	dd2d      	ble.n	8000bca <__aeabi_fdiv+0x19e>
 8000b6e:	4642      	mov	r2, r8
 8000b70:	0752      	lsls	r2, r2, #29
 8000b72:	d007      	beq.n	8000b84 <__aeabi_fdiv+0x158>
 8000b74:	220f      	movs	r2, #15
 8000b76:	4641      	mov	r1, r8
 8000b78:	400a      	ands	r2, r1
 8000b7a:	2a04      	cmp	r2, #4
 8000b7c:	d002      	beq.n	8000b84 <__aeabi_fdiv+0x158>
 8000b7e:	2204      	movs	r2, #4
 8000b80:	4694      	mov	ip, r2
 8000b82:	44e0      	add	r8, ip
 8000b84:	4642      	mov	r2, r8
 8000b86:	0112      	lsls	r2, r2, #4
 8000b88:	d505      	bpl.n	8000b96 <__aeabi_fdiv+0x16a>
 8000b8a:	4642      	mov	r2, r8
 8000b8c:	4b36      	ldr	r3, [pc, #216]	@ (8000c68 <__aeabi_fdiv+0x23c>)
 8000b8e:	401a      	ands	r2, r3
 8000b90:	003b      	movs	r3, r7
 8000b92:	4690      	mov	r8, r2
 8000b94:	3380      	adds	r3, #128	@ 0x80
 8000b96:	2bfe      	cmp	r3, #254	@ 0xfe
 8000b98:	dcc8      	bgt.n	8000b2c <__aeabi_fdiv+0x100>
 8000b9a:	4642      	mov	r2, r8
 8000b9c:	0192      	lsls	r2, r2, #6
 8000b9e:	0a52      	lsrs	r2, r2, #9
 8000ba0:	b2d8      	uxtb	r0, r3
 8000ba2:	e7c5      	b.n	8000b30 <__aeabi_fdiv+0x104>
 8000ba4:	2280      	movs	r2, #128	@ 0x80
 8000ba6:	2500      	movs	r5, #0
 8000ba8:	20ff      	movs	r0, #255	@ 0xff
 8000baa:	03d2      	lsls	r2, r2, #15
 8000bac:	e7c0      	b.n	8000b30 <__aeabi_fdiv+0x104>
 8000bae:	2280      	movs	r2, #128	@ 0x80
 8000bb0:	03d2      	lsls	r2, r2, #15
 8000bb2:	4214      	tst	r4, r2
 8000bb4:	d002      	beq.n	8000bbc <__aeabi_fdiv+0x190>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	4213      	tst	r3, r2
 8000bba:	d049      	beq.n	8000c50 <__aeabi_fdiv+0x224>
 8000bbc:	2280      	movs	r2, #128	@ 0x80
 8000bbe:	03d2      	lsls	r2, r2, #15
 8000bc0:	4322      	orrs	r2, r4
 8000bc2:	0252      	lsls	r2, r2, #9
 8000bc4:	20ff      	movs	r0, #255	@ 0xff
 8000bc6:	0a52      	lsrs	r2, r2, #9
 8000bc8:	e7b2      	b.n	8000b30 <__aeabi_fdiv+0x104>
 8000bca:	2201      	movs	r2, #1
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	2b1b      	cmp	r3, #27
 8000bd0:	dcc3      	bgt.n	8000b5a <__aeabi_fdiv+0x12e>
 8000bd2:	4642      	mov	r2, r8
 8000bd4:	40da      	lsrs	r2, r3
 8000bd6:	4643      	mov	r3, r8
 8000bd8:	379e      	adds	r7, #158	@ 0x9e
 8000bda:	40bb      	lsls	r3, r7
 8000bdc:	1e59      	subs	r1, r3, #1
 8000bde:	418b      	sbcs	r3, r1
 8000be0:	431a      	orrs	r2, r3
 8000be2:	0753      	lsls	r3, r2, #29
 8000be4:	d004      	beq.n	8000bf0 <__aeabi_fdiv+0x1c4>
 8000be6:	230f      	movs	r3, #15
 8000be8:	4013      	ands	r3, r2
 8000bea:	2b04      	cmp	r3, #4
 8000bec:	d000      	beq.n	8000bf0 <__aeabi_fdiv+0x1c4>
 8000bee:	3204      	adds	r2, #4
 8000bf0:	0153      	lsls	r3, r2, #5
 8000bf2:	d529      	bpl.n	8000c48 <__aeabi_fdiv+0x21c>
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	e79a      	b.n	8000b30 <__aeabi_fdiv+0x104>
 8000bfa:	4642      	mov	r2, r8
 8000bfc:	0163      	lsls	r3, r4, #5
 8000bfe:	0155      	lsls	r5, r2, #5
 8000c00:	42ab      	cmp	r3, r5
 8000c02:	d215      	bcs.n	8000c30 <__aeabi_fdiv+0x204>
 8000c04:	201b      	movs	r0, #27
 8000c06:	2200      	movs	r2, #0
 8000c08:	3f01      	subs	r7, #1
 8000c0a:	2601      	movs	r6, #1
 8000c0c:	001c      	movs	r4, r3
 8000c0e:	0052      	lsls	r2, r2, #1
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	2c00      	cmp	r4, #0
 8000c14:	db01      	blt.n	8000c1a <__aeabi_fdiv+0x1ee>
 8000c16:	429d      	cmp	r5, r3
 8000c18:	d801      	bhi.n	8000c1e <__aeabi_fdiv+0x1f2>
 8000c1a:	1b5b      	subs	r3, r3, r5
 8000c1c:	4332      	orrs	r2, r6
 8000c1e:	3801      	subs	r0, #1
 8000c20:	2800      	cmp	r0, #0
 8000c22:	d1f3      	bne.n	8000c0c <__aeabi_fdiv+0x1e0>
 8000c24:	1e58      	subs	r0, r3, #1
 8000c26:	4183      	sbcs	r3, r0
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	4698      	mov	r8, r3
 8000c2c:	000d      	movs	r5, r1
 8000c2e:	e79a      	b.n	8000b66 <__aeabi_fdiv+0x13a>
 8000c30:	201a      	movs	r0, #26
 8000c32:	2201      	movs	r2, #1
 8000c34:	1b5b      	subs	r3, r3, r5
 8000c36:	e7e8      	b.n	8000c0a <__aeabi_fdiv+0x1de>
 8000c38:	3b02      	subs	r3, #2
 8000c3a:	425a      	negs	r2, r3
 8000c3c:	4153      	adcs	r3, r2
 8000c3e:	425b      	negs	r3, r3
 8000c40:	0035      	movs	r5, r6
 8000c42:	2200      	movs	r2, #0
 8000c44:	b2d8      	uxtb	r0, r3
 8000c46:	e773      	b.n	8000b30 <__aeabi_fdiv+0x104>
 8000c48:	0192      	lsls	r2, r2, #6
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	0a52      	lsrs	r2, r2, #9
 8000c4e:	e76f      	b.n	8000b30 <__aeabi_fdiv+0x104>
 8000c50:	431a      	orrs	r2, r3
 8000c52:	0252      	lsls	r2, r2, #9
 8000c54:	0035      	movs	r5, r6
 8000c56:	20ff      	movs	r0, #255	@ 0xff
 8000c58:	0a52      	lsrs	r2, r2, #9
 8000c5a:	e769      	b.n	8000b30 <__aeabi_fdiv+0x104>
 8000c5c:	4644      	mov	r4, r8
 8000c5e:	e7ad      	b.n	8000bbc <__aeabi_fdiv+0x190>
 8000c60:	0800daf4 	.word	0x0800daf4
 8000c64:	0800db34 	.word	0x0800db34
 8000c68:	f7ffffff 	.word	0xf7ffffff

08000c6c <__aeabi_fmul>:
 8000c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c6e:	464f      	mov	r7, r9
 8000c70:	4646      	mov	r6, r8
 8000c72:	46d6      	mov	lr, sl
 8000c74:	0243      	lsls	r3, r0, #9
 8000c76:	0a5b      	lsrs	r3, r3, #9
 8000c78:	0045      	lsls	r5, r0, #1
 8000c7a:	b5c0      	push	{r6, r7, lr}
 8000c7c:	4699      	mov	r9, r3
 8000c7e:	1c0f      	adds	r7, r1, #0
 8000c80:	0e2d      	lsrs	r5, r5, #24
 8000c82:	0fc6      	lsrs	r6, r0, #31
 8000c84:	2d00      	cmp	r5, #0
 8000c86:	d100      	bne.n	8000c8a <__aeabi_fmul+0x1e>
 8000c88:	e088      	b.n	8000d9c <__aeabi_fmul+0x130>
 8000c8a:	2dff      	cmp	r5, #255	@ 0xff
 8000c8c:	d100      	bne.n	8000c90 <__aeabi_fmul+0x24>
 8000c8e:	e08d      	b.n	8000dac <__aeabi_fmul+0x140>
 8000c90:	2280      	movs	r2, #128	@ 0x80
 8000c92:	00db      	lsls	r3, r3, #3
 8000c94:	04d2      	lsls	r2, r2, #19
 8000c96:	431a      	orrs	r2, r3
 8000c98:	2300      	movs	r3, #0
 8000c9a:	4691      	mov	r9, r2
 8000c9c:	4698      	mov	r8, r3
 8000c9e:	469a      	mov	sl, r3
 8000ca0:	3d7f      	subs	r5, #127	@ 0x7f
 8000ca2:	027c      	lsls	r4, r7, #9
 8000ca4:	007b      	lsls	r3, r7, #1
 8000ca6:	0a64      	lsrs	r4, r4, #9
 8000ca8:	0e1b      	lsrs	r3, r3, #24
 8000caa:	0fff      	lsrs	r7, r7, #31
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d068      	beq.n	8000d82 <__aeabi_fmul+0x116>
 8000cb0:	2bff      	cmp	r3, #255	@ 0xff
 8000cb2:	d021      	beq.n	8000cf8 <__aeabi_fmul+0x8c>
 8000cb4:	2280      	movs	r2, #128	@ 0x80
 8000cb6:	00e4      	lsls	r4, r4, #3
 8000cb8:	04d2      	lsls	r2, r2, #19
 8000cba:	4314      	orrs	r4, r2
 8000cbc:	4642      	mov	r2, r8
 8000cbe:	3b7f      	subs	r3, #127	@ 0x7f
 8000cc0:	195b      	adds	r3, r3, r5
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	1c5d      	adds	r5, r3, #1
 8000cc6:	2a0a      	cmp	r2, #10
 8000cc8:	dc2e      	bgt.n	8000d28 <__aeabi_fmul+0xbc>
 8000cca:	407e      	eors	r6, r7
 8000ccc:	4642      	mov	r2, r8
 8000cce:	2a02      	cmp	r2, #2
 8000cd0:	dc23      	bgt.n	8000d1a <__aeabi_fmul+0xae>
 8000cd2:	3a01      	subs	r2, #1
 8000cd4:	2a01      	cmp	r2, #1
 8000cd6:	d900      	bls.n	8000cda <__aeabi_fmul+0x6e>
 8000cd8:	e0bd      	b.n	8000e56 <__aeabi_fmul+0x1ea>
 8000cda:	2902      	cmp	r1, #2
 8000cdc:	d06e      	beq.n	8000dbc <__aeabi_fmul+0x150>
 8000cde:	2901      	cmp	r1, #1
 8000ce0:	d12c      	bne.n	8000d3c <__aeabi_fmul+0xd0>
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	05c0      	lsls	r0, r0, #23
 8000ce8:	07f6      	lsls	r6, r6, #31
 8000cea:	4310      	orrs	r0, r2
 8000cec:	4330      	orrs	r0, r6
 8000cee:	bce0      	pop	{r5, r6, r7}
 8000cf0:	46ba      	mov	sl, r7
 8000cf2:	46b1      	mov	r9, r6
 8000cf4:	46a8      	mov	r8, r5
 8000cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cf8:	002b      	movs	r3, r5
 8000cfa:	33ff      	adds	r3, #255	@ 0xff
 8000cfc:	2c00      	cmp	r4, #0
 8000cfe:	d065      	beq.n	8000dcc <__aeabi_fmul+0x160>
 8000d00:	2203      	movs	r2, #3
 8000d02:	4641      	mov	r1, r8
 8000d04:	4311      	orrs	r1, r2
 8000d06:	0032      	movs	r2, r6
 8000d08:	3501      	adds	r5, #1
 8000d0a:	4688      	mov	r8, r1
 8000d0c:	407a      	eors	r2, r7
 8000d0e:	35ff      	adds	r5, #255	@ 0xff
 8000d10:	290a      	cmp	r1, #10
 8000d12:	dd00      	ble.n	8000d16 <__aeabi_fmul+0xaa>
 8000d14:	e0d8      	b.n	8000ec8 <__aeabi_fmul+0x25c>
 8000d16:	0016      	movs	r6, r2
 8000d18:	2103      	movs	r1, #3
 8000d1a:	4640      	mov	r0, r8
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	4082      	lsls	r2, r0
 8000d20:	20a6      	movs	r0, #166	@ 0xa6
 8000d22:	00c0      	lsls	r0, r0, #3
 8000d24:	4202      	tst	r2, r0
 8000d26:	d020      	beq.n	8000d6a <__aeabi_fmul+0xfe>
 8000d28:	4653      	mov	r3, sl
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d046      	beq.n	8000dbc <__aeabi_fmul+0x150>
 8000d2e:	2b03      	cmp	r3, #3
 8000d30:	d100      	bne.n	8000d34 <__aeabi_fmul+0xc8>
 8000d32:	e0bb      	b.n	8000eac <__aeabi_fmul+0x240>
 8000d34:	4651      	mov	r1, sl
 8000d36:	464c      	mov	r4, r9
 8000d38:	2901      	cmp	r1, #1
 8000d3a:	d0d2      	beq.n	8000ce2 <__aeabi_fmul+0x76>
 8000d3c:	002b      	movs	r3, r5
 8000d3e:	337f      	adds	r3, #127	@ 0x7f
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	dd70      	ble.n	8000e26 <__aeabi_fmul+0x1ba>
 8000d44:	0762      	lsls	r2, r4, #29
 8000d46:	d004      	beq.n	8000d52 <__aeabi_fmul+0xe6>
 8000d48:	220f      	movs	r2, #15
 8000d4a:	4022      	ands	r2, r4
 8000d4c:	2a04      	cmp	r2, #4
 8000d4e:	d000      	beq.n	8000d52 <__aeabi_fmul+0xe6>
 8000d50:	3404      	adds	r4, #4
 8000d52:	0122      	lsls	r2, r4, #4
 8000d54:	d503      	bpl.n	8000d5e <__aeabi_fmul+0xf2>
 8000d56:	4b63      	ldr	r3, [pc, #396]	@ (8000ee4 <__aeabi_fmul+0x278>)
 8000d58:	401c      	ands	r4, r3
 8000d5a:	002b      	movs	r3, r5
 8000d5c:	3380      	adds	r3, #128	@ 0x80
 8000d5e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d60:	dc2c      	bgt.n	8000dbc <__aeabi_fmul+0x150>
 8000d62:	01a2      	lsls	r2, r4, #6
 8000d64:	0a52      	lsrs	r2, r2, #9
 8000d66:	b2d8      	uxtb	r0, r3
 8000d68:	e7bd      	b.n	8000ce6 <__aeabi_fmul+0x7a>
 8000d6a:	2090      	movs	r0, #144	@ 0x90
 8000d6c:	0080      	lsls	r0, r0, #2
 8000d6e:	4202      	tst	r2, r0
 8000d70:	d127      	bne.n	8000dc2 <__aeabi_fmul+0x156>
 8000d72:	38b9      	subs	r0, #185	@ 0xb9
 8000d74:	38ff      	subs	r0, #255	@ 0xff
 8000d76:	4210      	tst	r0, r2
 8000d78:	d06d      	beq.n	8000e56 <__aeabi_fmul+0x1ea>
 8000d7a:	003e      	movs	r6, r7
 8000d7c:	46a1      	mov	r9, r4
 8000d7e:	468a      	mov	sl, r1
 8000d80:	e7d2      	b.n	8000d28 <__aeabi_fmul+0xbc>
 8000d82:	2c00      	cmp	r4, #0
 8000d84:	d141      	bne.n	8000e0a <__aeabi_fmul+0x19e>
 8000d86:	2301      	movs	r3, #1
 8000d88:	4642      	mov	r2, r8
 8000d8a:	431a      	orrs	r2, r3
 8000d8c:	4690      	mov	r8, r2
 8000d8e:	002b      	movs	r3, r5
 8000d90:	4642      	mov	r2, r8
 8000d92:	2101      	movs	r1, #1
 8000d94:	1c5d      	adds	r5, r3, #1
 8000d96:	2a0a      	cmp	r2, #10
 8000d98:	dd97      	ble.n	8000cca <__aeabi_fmul+0x5e>
 8000d9a:	e7c5      	b.n	8000d28 <__aeabi_fmul+0xbc>
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d126      	bne.n	8000dee <__aeabi_fmul+0x182>
 8000da0:	2304      	movs	r3, #4
 8000da2:	4698      	mov	r8, r3
 8000da4:	3b03      	subs	r3, #3
 8000da6:	2500      	movs	r5, #0
 8000da8:	469a      	mov	sl, r3
 8000daa:	e77a      	b.n	8000ca2 <__aeabi_fmul+0x36>
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d118      	bne.n	8000de2 <__aeabi_fmul+0x176>
 8000db0:	2308      	movs	r3, #8
 8000db2:	4698      	mov	r8, r3
 8000db4:	3b06      	subs	r3, #6
 8000db6:	25ff      	movs	r5, #255	@ 0xff
 8000db8:	469a      	mov	sl, r3
 8000dba:	e772      	b.n	8000ca2 <__aeabi_fmul+0x36>
 8000dbc:	20ff      	movs	r0, #255	@ 0xff
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	e791      	b.n	8000ce6 <__aeabi_fmul+0x7a>
 8000dc2:	2280      	movs	r2, #128	@ 0x80
 8000dc4:	2600      	movs	r6, #0
 8000dc6:	20ff      	movs	r0, #255	@ 0xff
 8000dc8:	03d2      	lsls	r2, r2, #15
 8000dca:	e78c      	b.n	8000ce6 <__aeabi_fmul+0x7a>
 8000dcc:	4641      	mov	r1, r8
 8000dce:	2202      	movs	r2, #2
 8000dd0:	3501      	adds	r5, #1
 8000dd2:	4311      	orrs	r1, r2
 8000dd4:	4688      	mov	r8, r1
 8000dd6:	35ff      	adds	r5, #255	@ 0xff
 8000dd8:	290a      	cmp	r1, #10
 8000dda:	dca5      	bgt.n	8000d28 <__aeabi_fmul+0xbc>
 8000ddc:	2102      	movs	r1, #2
 8000dde:	407e      	eors	r6, r7
 8000de0:	e774      	b.n	8000ccc <__aeabi_fmul+0x60>
 8000de2:	230c      	movs	r3, #12
 8000de4:	4698      	mov	r8, r3
 8000de6:	3b09      	subs	r3, #9
 8000de8:	25ff      	movs	r5, #255	@ 0xff
 8000dea:	469a      	mov	sl, r3
 8000dec:	e759      	b.n	8000ca2 <__aeabi_fmul+0x36>
 8000dee:	0018      	movs	r0, r3
 8000df0:	f002 f9f2 	bl	80031d8 <__clzsi2>
 8000df4:	464a      	mov	r2, r9
 8000df6:	1f43      	subs	r3, r0, #5
 8000df8:	2576      	movs	r5, #118	@ 0x76
 8000dfa:	409a      	lsls	r2, r3
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	426d      	negs	r5, r5
 8000e00:	4691      	mov	r9, r2
 8000e02:	4698      	mov	r8, r3
 8000e04:	469a      	mov	sl, r3
 8000e06:	1a2d      	subs	r5, r5, r0
 8000e08:	e74b      	b.n	8000ca2 <__aeabi_fmul+0x36>
 8000e0a:	0020      	movs	r0, r4
 8000e0c:	f002 f9e4 	bl	80031d8 <__clzsi2>
 8000e10:	4642      	mov	r2, r8
 8000e12:	1f43      	subs	r3, r0, #5
 8000e14:	409c      	lsls	r4, r3
 8000e16:	1a2b      	subs	r3, r5, r0
 8000e18:	3b76      	subs	r3, #118	@ 0x76
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	1c5d      	adds	r5, r3, #1
 8000e1e:	2a0a      	cmp	r2, #10
 8000e20:	dc00      	bgt.n	8000e24 <__aeabi_fmul+0x1b8>
 8000e22:	e752      	b.n	8000cca <__aeabi_fmul+0x5e>
 8000e24:	e780      	b.n	8000d28 <__aeabi_fmul+0xbc>
 8000e26:	2201      	movs	r2, #1
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	2b1b      	cmp	r3, #27
 8000e2c:	dd00      	ble.n	8000e30 <__aeabi_fmul+0x1c4>
 8000e2e:	e758      	b.n	8000ce2 <__aeabi_fmul+0x76>
 8000e30:	359e      	adds	r5, #158	@ 0x9e
 8000e32:	0022      	movs	r2, r4
 8000e34:	40ac      	lsls	r4, r5
 8000e36:	40da      	lsrs	r2, r3
 8000e38:	1e63      	subs	r3, r4, #1
 8000e3a:	419c      	sbcs	r4, r3
 8000e3c:	4322      	orrs	r2, r4
 8000e3e:	0753      	lsls	r3, r2, #29
 8000e40:	d004      	beq.n	8000e4c <__aeabi_fmul+0x1e0>
 8000e42:	230f      	movs	r3, #15
 8000e44:	4013      	ands	r3, r2
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	d000      	beq.n	8000e4c <__aeabi_fmul+0x1e0>
 8000e4a:	3204      	adds	r2, #4
 8000e4c:	0153      	lsls	r3, r2, #5
 8000e4e:	d537      	bpl.n	8000ec0 <__aeabi_fmul+0x254>
 8000e50:	2001      	movs	r0, #1
 8000e52:	2200      	movs	r2, #0
 8000e54:	e747      	b.n	8000ce6 <__aeabi_fmul+0x7a>
 8000e56:	0c21      	lsrs	r1, r4, #16
 8000e58:	464a      	mov	r2, r9
 8000e5a:	0424      	lsls	r4, r4, #16
 8000e5c:	0c24      	lsrs	r4, r4, #16
 8000e5e:	0027      	movs	r7, r4
 8000e60:	0c10      	lsrs	r0, r2, #16
 8000e62:	0412      	lsls	r2, r2, #16
 8000e64:	0c12      	lsrs	r2, r2, #16
 8000e66:	4344      	muls	r4, r0
 8000e68:	4357      	muls	r7, r2
 8000e6a:	4348      	muls	r0, r1
 8000e6c:	4351      	muls	r1, r2
 8000e6e:	0c3a      	lsrs	r2, r7, #16
 8000e70:	1909      	adds	r1, r1, r4
 8000e72:	1852      	adds	r2, r2, r1
 8000e74:	4294      	cmp	r4, r2
 8000e76:	d903      	bls.n	8000e80 <__aeabi_fmul+0x214>
 8000e78:	2180      	movs	r1, #128	@ 0x80
 8000e7a:	0249      	lsls	r1, r1, #9
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	4460      	add	r0, ip
 8000e80:	043f      	lsls	r7, r7, #16
 8000e82:	0411      	lsls	r1, r2, #16
 8000e84:	0c3f      	lsrs	r7, r7, #16
 8000e86:	19c9      	adds	r1, r1, r7
 8000e88:	018c      	lsls	r4, r1, #6
 8000e8a:	1e67      	subs	r7, r4, #1
 8000e8c:	41bc      	sbcs	r4, r7
 8000e8e:	0c12      	lsrs	r2, r2, #16
 8000e90:	0e89      	lsrs	r1, r1, #26
 8000e92:	1812      	adds	r2, r2, r0
 8000e94:	430c      	orrs	r4, r1
 8000e96:	0192      	lsls	r2, r2, #6
 8000e98:	4314      	orrs	r4, r2
 8000e9a:	0112      	lsls	r2, r2, #4
 8000e9c:	d50e      	bpl.n	8000ebc <__aeabi_fmul+0x250>
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	0862      	lsrs	r2, r4, #1
 8000ea2:	401c      	ands	r4, r3
 8000ea4:	4314      	orrs	r4, r2
 8000ea6:	e749      	b.n	8000d3c <__aeabi_fmul+0xd0>
 8000ea8:	003e      	movs	r6, r7
 8000eaa:	46a1      	mov	r9, r4
 8000eac:	2280      	movs	r2, #128	@ 0x80
 8000eae:	464b      	mov	r3, r9
 8000eb0:	03d2      	lsls	r2, r2, #15
 8000eb2:	431a      	orrs	r2, r3
 8000eb4:	0252      	lsls	r2, r2, #9
 8000eb6:	20ff      	movs	r0, #255	@ 0xff
 8000eb8:	0a52      	lsrs	r2, r2, #9
 8000eba:	e714      	b.n	8000ce6 <__aeabi_fmul+0x7a>
 8000ebc:	001d      	movs	r5, r3
 8000ebe:	e73d      	b.n	8000d3c <__aeabi_fmul+0xd0>
 8000ec0:	0192      	lsls	r2, r2, #6
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	0a52      	lsrs	r2, r2, #9
 8000ec6:	e70e      	b.n	8000ce6 <__aeabi_fmul+0x7a>
 8000ec8:	290f      	cmp	r1, #15
 8000eca:	d1ed      	bne.n	8000ea8 <__aeabi_fmul+0x23c>
 8000ecc:	2280      	movs	r2, #128	@ 0x80
 8000ece:	464b      	mov	r3, r9
 8000ed0:	03d2      	lsls	r2, r2, #15
 8000ed2:	4213      	tst	r3, r2
 8000ed4:	d0ea      	beq.n	8000eac <__aeabi_fmul+0x240>
 8000ed6:	4214      	tst	r4, r2
 8000ed8:	d1e8      	bne.n	8000eac <__aeabi_fmul+0x240>
 8000eda:	003e      	movs	r6, r7
 8000edc:	20ff      	movs	r0, #255	@ 0xff
 8000ede:	4322      	orrs	r2, r4
 8000ee0:	e701      	b.n	8000ce6 <__aeabi_fmul+0x7a>
 8000ee2:	46c0      	nop			@ (mov r8, r8)
 8000ee4:	f7ffffff 	.word	0xf7ffffff

08000ee8 <__aeabi_fsub>:
 8000ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eea:	4647      	mov	r7, r8
 8000eec:	46ce      	mov	lr, r9
 8000eee:	024e      	lsls	r6, r1, #9
 8000ef0:	0243      	lsls	r3, r0, #9
 8000ef2:	0045      	lsls	r5, r0, #1
 8000ef4:	0a72      	lsrs	r2, r6, #9
 8000ef6:	0fc4      	lsrs	r4, r0, #31
 8000ef8:	0048      	lsls	r0, r1, #1
 8000efa:	b580      	push	{r7, lr}
 8000efc:	4694      	mov	ip, r2
 8000efe:	0a5f      	lsrs	r7, r3, #9
 8000f00:	0e2d      	lsrs	r5, r5, #24
 8000f02:	099b      	lsrs	r3, r3, #6
 8000f04:	0e00      	lsrs	r0, r0, #24
 8000f06:	0fc9      	lsrs	r1, r1, #31
 8000f08:	09b6      	lsrs	r6, r6, #6
 8000f0a:	28ff      	cmp	r0, #255	@ 0xff
 8000f0c:	d024      	beq.n	8000f58 <__aeabi_fsub+0x70>
 8000f0e:	2201      	movs	r2, #1
 8000f10:	4051      	eors	r1, r2
 8000f12:	1a2a      	subs	r2, r5, r0
 8000f14:	428c      	cmp	r4, r1
 8000f16:	d00f      	beq.n	8000f38 <__aeabi_fsub+0x50>
 8000f18:	2a00      	cmp	r2, #0
 8000f1a:	dc00      	bgt.n	8000f1e <__aeabi_fsub+0x36>
 8000f1c:	e16a      	b.n	80011f4 <__aeabi_fsub+0x30c>
 8000f1e:	2800      	cmp	r0, #0
 8000f20:	d135      	bne.n	8000f8e <__aeabi_fsub+0xa6>
 8000f22:	2e00      	cmp	r6, #0
 8000f24:	d100      	bne.n	8000f28 <__aeabi_fsub+0x40>
 8000f26:	e0a2      	b.n	800106e <__aeabi_fsub+0x186>
 8000f28:	1e51      	subs	r1, r2, #1
 8000f2a:	2a01      	cmp	r2, #1
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_fsub+0x48>
 8000f2e:	e124      	b.n	800117a <__aeabi_fsub+0x292>
 8000f30:	2aff      	cmp	r2, #255	@ 0xff
 8000f32:	d021      	beq.n	8000f78 <__aeabi_fsub+0x90>
 8000f34:	000a      	movs	r2, r1
 8000f36:	e02f      	b.n	8000f98 <__aeabi_fsub+0xb0>
 8000f38:	2a00      	cmp	r2, #0
 8000f3a:	dc00      	bgt.n	8000f3e <__aeabi_fsub+0x56>
 8000f3c:	e167      	b.n	800120e <__aeabi_fsub+0x326>
 8000f3e:	2800      	cmp	r0, #0
 8000f40:	d05e      	beq.n	8001000 <__aeabi_fsub+0x118>
 8000f42:	2dff      	cmp	r5, #255	@ 0xff
 8000f44:	d018      	beq.n	8000f78 <__aeabi_fsub+0x90>
 8000f46:	2180      	movs	r1, #128	@ 0x80
 8000f48:	04c9      	lsls	r1, r1, #19
 8000f4a:	430e      	orrs	r6, r1
 8000f4c:	2a1b      	cmp	r2, #27
 8000f4e:	dc00      	bgt.n	8000f52 <__aeabi_fsub+0x6a>
 8000f50:	e076      	b.n	8001040 <__aeabi_fsub+0x158>
 8000f52:	002a      	movs	r2, r5
 8000f54:	3301      	adds	r3, #1
 8000f56:	e032      	b.n	8000fbe <__aeabi_fsub+0xd6>
 8000f58:	002a      	movs	r2, r5
 8000f5a:	3aff      	subs	r2, #255	@ 0xff
 8000f5c:	4691      	mov	r9, r2
 8000f5e:	2e00      	cmp	r6, #0
 8000f60:	d042      	beq.n	8000fe8 <__aeabi_fsub+0x100>
 8000f62:	428c      	cmp	r4, r1
 8000f64:	d055      	beq.n	8001012 <__aeabi_fsub+0x12a>
 8000f66:	464a      	mov	r2, r9
 8000f68:	2a00      	cmp	r2, #0
 8000f6a:	d100      	bne.n	8000f6e <__aeabi_fsub+0x86>
 8000f6c:	e09c      	b.n	80010a8 <__aeabi_fsub+0x1c0>
 8000f6e:	2d00      	cmp	r5, #0
 8000f70:	d100      	bne.n	8000f74 <__aeabi_fsub+0x8c>
 8000f72:	e077      	b.n	8001064 <__aeabi_fsub+0x17c>
 8000f74:	000c      	movs	r4, r1
 8000f76:	0033      	movs	r3, r6
 8000f78:	08db      	lsrs	r3, r3, #3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d100      	bne.n	8000f80 <__aeabi_fsub+0x98>
 8000f7e:	e06e      	b.n	800105e <__aeabi_fsub+0x176>
 8000f80:	2280      	movs	r2, #128	@ 0x80
 8000f82:	03d2      	lsls	r2, r2, #15
 8000f84:	4313      	orrs	r3, r2
 8000f86:	025b      	lsls	r3, r3, #9
 8000f88:	20ff      	movs	r0, #255	@ 0xff
 8000f8a:	0a5b      	lsrs	r3, r3, #9
 8000f8c:	e024      	b.n	8000fd8 <__aeabi_fsub+0xf0>
 8000f8e:	2dff      	cmp	r5, #255	@ 0xff
 8000f90:	d0f2      	beq.n	8000f78 <__aeabi_fsub+0x90>
 8000f92:	2180      	movs	r1, #128	@ 0x80
 8000f94:	04c9      	lsls	r1, r1, #19
 8000f96:	430e      	orrs	r6, r1
 8000f98:	2101      	movs	r1, #1
 8000f9a:	2a1b      	cmp	r2, #27
 8000f9c:	dc08      	bgt.n	8000fb0 <__aeabi_fsub+0xc8>
 8000f9e:	0031      	movs	r1, r6
 8000fa0:	2020      	movs	r0, #32
 8000fa2:	40d1      	lsrs	r1, r2
 8000fa4:	1a82      	subs	r2, r0, r2
 8000fa6:	4096      	lsls	r6, r2
 8000fa8:	0032      	movs	r2, r6
 8000faa:	1e50      	subs	r0, r2, #1
 8000fac:	4182      	sbcs	r2, r0
 8000fae:	4311      	orrs	r1, r2
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	015a      	lsls	r2, r3, #5
 8000fb4:	d460      	bmi.n	8001078 <__aeabi_fsub+0x190>
 8000fb6:	2107      	movs	r1, #7
 8000fb8:	002a      	movs	r2, r5
 8000fba:	4019      	ands	r1, r3
 8000fbc:	d057      	beq.n	800106e <__aeabi_fsub+0x186>
 8000fbe:	210f      	movs	r1, #15
 8000fc0:	4019      	ands	r1, r3
 8000fc2:	2904      	cmp	r1, #4
 8000fc4:	d000      	beq.n	8000fc8 <__aeabi_fsub+0xe0>
 8000fc6:	3304      	adds	r3, #4
 8000fc8:	0159      	lsls	r1, r3, #5
 8000fca:	d550      	bpl.n	800106e <__aeabi_fsub+0x186>
 8000fcc:	1c50      	adds	r0, r2, #1
 8000fce:	2afe      	cmp	r2, #254	@ 0xfe
 8000fd0:	d045      	beq.n	800105e <__aeabi_fsub+0x176>
 8000fd2:	019b      	lsls	r3, r3, #6
 8000fd4:	b2c0      	uxtb	r0, r0
 8000fd6:	0a5b      	lsrs	r3, r3, #9
 8000fd8:	05c0      	lsls	r0, r0, #23
 8000fda:	4318      	orrs	r0, r3
 8000fdc:	07e4      	lsls	r4, r4, #31
 8000fde:	4320      	orrs	r0, r4
 8000fe0:	bcc0      	pop	{r6, r7}
 8000fe2:	46b9      	mov	r9, r7
 8000fe4:	46b0      	mov	r8, r6
 8000fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fe8:	2201      	movs	r2, #1
 8000fea:	4051      	eors	r1, r2
 8000fec:	428c      	cmp	r4, r1
 8000fee:	d1ba      	bne.n	8000f66 <__aeabi_fsub+0x7e>
 8000ff0:	464a      	mov	r2, r9
 8000ff2:	2a00      	cmp	r2, #0
 8000ff4:	d010      	beq.n	8001018 <__aeabi_fsub+0x130>
 8000ff6:	2d00      	cmp	r5, #0
 8000ff8:	d100      	bne.n	8000ffc <__aeabi_fsub+0x114>
 8000ffa:	e098      	b.n	800112e <__aeabi_fsub+0x246>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	e7bb      	b.n	8000f78 <__aeabi_fsub+0x90>
 8001000:	2e00      	cmp	r6, #0
 8001002:	d034      	beq.n	800106e <__aeabi_fsub+0x186>
 8001004:	1e51      	subs	r1, r2, #1
 8001006:	2a01      	cmp	r2, #1
 8001008:	d06e      	beq.n	80010e8 <__aeabi_fsub+0x200>
 800100a:	2aff      	cmp	r2, #255	@ 0xff
 800100c:	d0b4      	beq.n	8000f78 <__aeabi_fsub+0x90>
 800100e:	000a      	movs	r2, r1
 8001010:	e79c      	b.n	8000f4c <__aeabi_fsub+0x64>
 8001012:	2a00      	cmp	r2, #0
 8001014:	d000      	beq.n	8001018 <__aeabi_fsub+0x130>
 8001016:	e088      	b.n	800112a <__aeabi_fsub+0x242>
 8001018:	20fe      	movs	r0, #254	@ 0xfe
 800101a:	1c6a      	adds	r2, r5, #1
 800101c:	4210      	tst	r0, r2
 800101e:	d000      	beq.n	8001022 <__aeabi_fsub+0x13a>
 8001020:	e092      	b.n	8001148 <__aeabi_fsub+0x260>
 8001022:	2d00      	cmp	r5, #0
 8001024:	d000      	beq.n	8001028 <__aeabi_fsub+0x140>
 8001026:	e0a4      	b.n	8001172 <__aeabi_fsub+0x28a>
 8001028:	2b00      	cmp	r3, #0
 800102a:	d100      	bne.n	800102e <__aeabi_fsub+0x146>
 800102c:	e0cb      	b.n	80011c6 <__aeabi_fsub+0x2de>
 800102e:	2e00      	cmp	r6, #0
 8001030:	d000      	beq.n	8001034 <__aeabi_fsub+0x14c>
 8001032:	e0ca      	b.n	80011ca <__aeabi_fsub+0x2e2>
 8001034:	2200      	movs	r2, #0
 8001036:	08db      	lsrs	r3, r3, #3
 8001038:	025b      	lsls	r3, r3, #9
 800103a:	0a5b      	lsrs	r3, r3, #9
 800103c:	b2d0      	uxtb	r0, r2
 800103e:	e7cb      	b.n	8000fd8 <__aeabi_fsub+0xf0>
 8001040:	0031      	movs	r1, r6
 8001042:	2020      	movs	r0, #32
 8001044:	40d1      	lsrs	r1, r2
 8001046:	1a82      	subs	r2, r0, r2
 8001048:	4096      	lsls	r6, r2
 800104a:	0032      	movs	r2, r6
 800104c:	1e50      	subs	r0, r2, #1
 800104e:	4182      	sbcs	r2, r0
 8001050:	430a      	orrs	r2, r1
 8001052:	189b      	adds	r3, r3, r2
 8001054:	015a      	lsls	r2, r3, #5
 8001056:	d5ae      	bpl.n	8000fb6 <__aeabi_fsub+0xce>
 8001058:	1c6a      	adds	r2, r5, #1
 800105a:	2dfe      	cmp	r5, #254	@ 0xfe
 800105c:	d14a      	bne.n	80010f4 <__aeabi_fsub+0x20c>
 800105e:	20ff      	movs	r0, #255	@ 0xff
 8001060:	2300      	movs	r3, #0
 8001062:	e7b9      	b.n	8000fd8 <__aeabi_fsub+0xf0>
 8001064:	22ff      	movs	r2, #255	@ 0xff
 8001066:	2b00      	cmp	r3, #0
 8001068:	d14b      	bne.n	8001102 <__aeabi_fsub+0x21a>
 800106a:	000c      	movs	r4, r1
 800106c:	0033      	movs	r3, r6
 800106e:	08db      	lsrs	r3, r3, #3
 8001070:	2aff      	cmp	r2, #255	@ 0xff
 8001072:	d100      	bne.n	8001076 <__aeabi_fsub+0x18e>
 8001074:	e781      	b.n	8000f7a <__aeabi_fsub+0x92>
 8001076:	e7df      	b.n	8001038 <__aeabi_fsub+0x150>
 8001078:	019f      	lsls	r7, r3, #6
 800107a:	09bf      	lsrs	r7, r7, #6
 800107c:	0038      	movs	r0, r7
 800107e:	f002 f8ab 	bl	80031d8 <__clzsi2>
 8001082:	3805      	subs	r0, #5
 8001084:	4087      	lsls	r7, r0
 8001086:	4285      	cmp	r5, r0
 8001088:	dc21      	bgt.n	80010ce <__aeabi_fsub+0x1e6>
 800108a:	003b      	movs	r3, r7
 800108c:	2120      	movs	r1, #32
 800108e:	1b42      	subs	r2, r0, r5
 8001090:	3201      	adds	r2, #1
 8001092:	40d3      	lsrs	r3, r2
 8001094:	1a8a      	subs	r2, r1, r2
 8001096:	4097      	lsls	r7, r2
 8001098:	1e7a      	subs	r2, r7, #1
 800109a:	4197      	sbcs	r7, r2
 800109c:	2200      	movs	r2, #0
 800109e:	433b      	orrs	r3, r7
 80010a0:	0759      	lsls	r1, r3, #29
 80010a2:	d000      	beq.n	80010a6 <__aeabi_fsub+0x1be>
 80010a4:	e78b      	b.n	8000fbe <__aeabi_fsub+0xd6>
 80010a6:	e78f      	b.n	8000fc8 <__aeabi_fsub+0xe0>
 80010a8:	20fe      	movs	r0, #254	@ 0xfe
 80010aa:	1c6a      	adds	r2, r5, #1
 80010ac:	4210      	tst	r0, r2
 80010ae:	d112      	bne.n	80010d6 <__aeabi_fsub+0x1ee>
 80010b0:	2d00      	cmp	r5, #0
 80010b2:	d152      	bne.n	800115a <__aeabi_fsub+0x272>
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d07c      	beq.n	80011b2 <__aeabi_fsub+0x2ca>
 80010b8:	2e00      	cmp	r6, #0
 80010ba:	d0bb      	beq.n	8001034 <__aeabi_fsub+0x14c>
 80010bc:	1b9a      	subs	r2, r3, r6
 80010be:	0150      	lsls	r0, r2, #5
 80010c0:	d400      	bmi.n	80010c4 <__aeabi_fsub+0x1dc>
 80010c2:	e08b      	b.n	80011dc <__aeabi_fsub+0x2f4>
 80010c4:	2401      	movs	r4, #1
 80010c6:	2200      	movs	r2, #0
 80010c8:	1af3      	subs	r3, r6, r3
 80010ca:	400c      	ands	r4, r1
 80010cc:	e7e8      	b.n	80010a0 <__aeabi_fsub+0x1b8>
 80010ce:	4b56      	ldr	r3, [pc, #344]	@ (8001228 <__aeabi_fsub+0x340>)
 80010d0:	1a2a      	subs	r2, r5, r0
 80010d2:	403b      	ands	r3, r7
 80010d4:	e7e4      	b.n	80010a0 <__aeabi_fsub+0x1b8>
 80010d6:	1b9f      	subs	r7, r3, r6
 80010d8:	017a      	lsls	r2, r7, #5
 80010da:	d446      	bmi.n	800116a <__aeabi_fsub+0x282>
 80010dc:	2f00      	cmp	r7, #0
 80010de:	d1cd      	bne.n	800107c <__aeabi_fsub+0x194>
 80010e0:	2400      	movs	r4, #0
 80010e2:	2000      	movs	r0, #0
 80010e4:	2300      	movs	r3, #0
 80010e6:	e777      	b.n	8000fd8 <__aeabi_fsub+0xf0>
 80010e8:	199b      	adds	r3, r3, r6
 80010ea:	2501      	movs	r5, #1
 80010ec:	3201      	adds	r2, #1
 80010ee:	0159      	lsls	r1, r3, #5
 80010f0:	d400      	bmi.n	80010f4 <__aeabi_fsub+0x20c>
 80010f2:	e760      	b.n	8000fb6 <__aeabi_fsub+0xce>
 80010f4:	2101      	movs	r1, #1
 80010f6:	484d      	ldr	r0, [pc, #308]	@ (800122c <__aeabi_fsub+0x344>)
 80010f8:	4019      	ands	r1, r3
 80010fa:	085b      	lsrs	r3, r3, #1
 80010fc:	4003      	ands	r3, r0
 80010fe:	430b      	orrs	r3, r1
 8001100:	e7ce      	b.n	80010a0 <__aeabi_fsub+0x1b8>
 8001102:	1e57      	subs	r7, r2, #1
 8001104:	2a01      	cmp	r2, #1
 8001106:	d05a      	beq.n	80011be <__aeabi_fsub+0x2d6>
 8001108:	000c      	movs	r4, r1
 800110a:	2aff      	cmp	r2, #255	@ 0xff
 800110c:	d033      	beq.n	8001176 <__aeabi_fsub+0x28e>
 800110e:	2201      	movs	r2, #1
 8001110:	2f1b      	cmp	r7, #27
 8001112:	dc07      	bgt.n	8001124 <__aeabi_fsub+0x23c>
 8001114:	2120      	movs	r1, #32
 8001116:	1bc9      	subs	r1, r1, r7
 8001118:	001a      	movs	r2, r3
 800111a:	408b      	lsls	r3, r1
 800111c:	40fa      	lsrs	r2, r7
 800111e:	1e59      	subs	r1, r3, #1
 8001120:	418b      	sbcs	r3, r1
 8001122:	431a      	orrs	r2, r3
 8001124:	0005      	movs	r5, r0
 8001126:	1ab3      	subs	r3, r6, r2
 8001128:	e743      	b.n	8000fb2 <__aeabi_fsub+0xca>
 800112a:	2d00      	cmp	r5, #0
 800112c:	d123      	bne.n	8001176 <__aeabi_fsub+0x28e>
 800112e:	22ff      	movs	r2, #255	@ 0xff
 8001130:	2b00      	cmp	r3, #0
 8001132:	d09b      	beq.n	800106c <__aeabi_fsub+0x184>
 8001134:	1e51      	subs	r1, r2, #1
 8001136:	2a01      	cmp	r2, #1
 8001138:	d0d6      	beq.n	80010e8 <__aeabi_fsub+0x200>
 800113a:	2aff      	cmp	r2, #255	@ 0xff
 800113c:	d01b      	beq.n	8001176 <__aeabi_fsub+0x28e>
 800113e:	291b      	cmp	r1, #27
 8001140:	dd2c      	ble.n	800119c <__aeabi_fsub+0x2b4>
 8001142:	0002      	movs	r2, r0
 8001144:	1c73      	adds	r3, r6, #1
 8001146:	e73a      	b.n	8000fbe <__aeabi_fsub+0xd6>
 8001148:	2aff      	cmp	r2, #255	@ 0xff
 800114a:	d088      	beq.n	800105e <__aeabi_fsub+0x176>
 800114c:	199b      	adds	r3, r3, r6
 800114e:	085b      	lsrs	r3, r3, #1
 8001150:	0759      	lsls	r1, r3, #29
 8001152:	d000      	beq.n	8001156 <__aeabi_fsub+0x26e>
 8001154:	e733      	b.n	8000fbe <__aeabi_fsub+0xd6>
 8001156:	08db      	lsrs	r3, r3, #3
 8001158:	e76e      	b.n	8001038 <__aeabi_fsub+0x150>
 800115a:	2b00      	cmp	r3, #0
 800115c:	d110      	bne.n	8001180 <__aeabi_fsub+0x298>
 800115e:	2e00      	cmp	r6, #0
 8001160:	d043      	beq.n	80011ea <__aeabi_fsub+0x302>
 8001162:	2401      	movs	r4, #1
 8001164:	0033      	movs	r3, r6
 8001166:	400c      	ands	r4, r1
 8001168:	e706      	b.n	8000f78 <__aeabi_fsub+0x90>
 800116a:	2401      	movs	r4, #1
 800116c:	1af7      	subs	r7, r6, r3
 800116e:	400c      	ands	r4, r1
 8001170:	e784      	b.n	800107c <__aeabi_fsub+0x194>
 8001172:	2b00      	cmp	r3, #0
 8001174:	d104      	bne.n	8001180 <__aeabi_fsub+0x298>
 8001176:	0033      	movs	r3, r6
 8001178:	e6fe      	b.n	8000f78 <__aeabi_fsub+0x90>
 800117a:	2501      	movs	r5, #1
 800117c:	1b9b      	subs	r3, r3, r6
 800117e:	e718      	b.n	8000fb2 <__aeabi_fsub+0xca>
 8001180:	2e00      	cmp	r6, #0
 8001182:	d100      	bne.n	8001186 <__aeabi_fsub+0x29e>
 8001184:	e6f8      	b.n	8000f78 <__aeabi_fsub+0x90>
 8001186:	2280      	movs	r2, #128	@ 0x80
 8001188:	03d2      	lsls	r2, r2, #15
 800118a:	4297      	cmp	r7, r2
 800118c:	d304      	bcc.n	8001198 <__aeabi_fsub+0x2b0>
 800118e:	4594      	cmp	ip, r2
 8001190:	d202      	bcs.n	8001198 <__aeabi_fsub+0x2b0>
 8001192:	2401      	movs	r4, #1
 8001194:	0033      	movs	r3, r6
 8001196:	400c      	ands	r4, r1
 8001198:	08db      	lsrs	r3, r3, #3
 800119a:	e6f1      	b.n	8000f80 <__aeabi_fsub+0x98>
 800119c:	001a      	movs	r2, r3
 800119e:	2520      	movs	r5, #32
 80011a0:	40ca      	lsrs	r2, r1
 80011a2:	1a69      	subs	r1, r5, r1
 80011a4:	408b      	lsls	r3, r1
 80011a6:	1e59      	subs	r1, r3, #1
 80011a8:	418b      	sbcs	r3, r1
 80011aa:	4313      	orrs	r3, r2
 80011ac:	0005      	movs	r5, r0
 80011ae:	199b      	adds	r3, r3, r6
 80011b0:	e750      	b.n	8001054 <__aeabi_fsub+0x16c>
 80011b2:	2e00      	cmp	r6, #0
 80011b4:	d094      	beq.n	80010e0 <__aeabi_fsub+0x1f8>
 80011b6:	2401      	movs	r4, #1
 80011b8:	0033      	movs	r3, r6
 80011ba:	400c      	ands	r4, r1
 80011bc:	e73a      	b.n	8001034 <__aeabi_fsub+0x14c>
 80011be:	000c      	movs	r4, r1
 80011c0:	2501      	movs	r5, #1
 80011c2:	1af3      	subs	r3, r6, r3
 80011c4:	e6f5      	b.n	8000fb2 <__aeabi_fsub+0xca>
 80011c6:	0033      	movs	r3, r6
 80011c8:	e734      	b.n	8001034 <__aeabi_fsub+0x14c>
 80011ca:	199b      	adds	r3, r3, r6
 80011cc:	2200      	movs	r2, #0
 80011ce:	0159      	lsls	r1, r3, #5
 80011d0:	d5c1      	bpl.n	8001156 <__aeabi_fsub+0x26e>
 80011d2:	4a15      	ldr	r2, [pc, #84]	@ (8001228 <__aeabi_fsub+0x340>)
 80011d4:	4013      	ands	r3, r2
 80011d6:	08db      	lsrs	r3, r3, #3
 80011d8:	2201      	movs	r2, #1
 80011da:	e72d      	b.n	8001038 <__aeabi_fsub+0x150>
 80011dc:	2a00      	cmp	r2, #0
 80011de:	d100      	bne.n	80011e2 <__aeabi_fsub+0x2fa>
 80011e0:	e77e      	b.n	80010e0 <__aeabi_fsub+0x1f8>
 80011e2:	0013      	movs	r3, r2
 80011e4:	2200      	movs	r2, #0
 80011e6:	08db      	lsrs	r3, r3, #3
 80011e8:	e726      	b.n	8001038 <__aeabi_fsub+0x150>
 80011ea:	2380      	movs	r3, #128	@ 0x80
 80011ec:	2400      	movs	r4, #0
 80011ee:	20ff      	movs	r0, #255	@ 0xff
 80011f0:	03db      	lsls	r3, r3, #15
 80011f2:	e6f1      	b.n	8000fd8 <__aeabi_fsub+0xf0>
 80011f4:	2a00      	cmp	r2, #0
 80011f6:	d100      	bne.n	80011fa <__aeabi_fsub+0x312>
 80011f8:	e756      	b.n	80010a8 <__aeabi_fsub+0x1c0>
 80011fa:	1b47      	subs	r7, r0, r5
 80011fc:	003a      	movs	r2, r7
 80011fe:	2d00      	cmp	r5, #0
 8001200:	d100      	bne.n	8001204 <__aeabi_fsub+0x31c>
 8001202:	e730      	b.n	8001066 <__aeabi_fsub+0x17e>
 8001204:	2280      	movs	r2, #128	@ 0x80
 8001206:	04d2      	lsls	r2, r2, #19
 8001208:	000c      	movs	r4, r1
 800120a:	4313      	orrs	r3, r2
 800120c:	e77f      	b.n	800110e <__aeabi_fsub+0x226>
 800120e:	2a00      	cmp	r2, #0
 8001210:	d100      	bne.n	8001214 <__aeabi_fsub+0x32c>
 8001212:	e701      	b.n	8001018 <__aeabi_fsub+0x130>
 8001214:	1b41      	subs	r1, r0, r5
 8001216:	2d00      	cmp	r5, #0
 8001218:	d101      	bne.n	800121e <__aeabi_fsub+0x336>
 800121a:	000a      	movs	r2, r1
 800121c:	e788      	b.n	8001130 <__aeabi_fsub+0x248>
 800121e:	2280      	movs	r2, #128	@ 0x80
 8001220:	04d2      	lsls	r2, r2, #19
 8001222:	4313      	orrs	r3, r2
 8001224:	e78b      	b.n	800113e <__aeabi_fsub+0x256>
 8001226:	46c0      	nop			@ (mov r8, r8)
 8001228:	fbffffff 	.word	0xfbffffff
 800122c:	7dffffff 	.word	0x7dffffff

08001230 <__aeabi_i2f>:
 8001230:	b570      	push	{r4, r5, r6, lr}
 8001232:	2800      	cmp	r0, #0
 8001234:	d013      	beq.n	800125e <__aeabi_i2f+0x2e>
 8001236:	17c3      	asrs	r3, r0, #31
 8001238:	18c5      	adds	r5, r0, r3
 800123a:	405d      	eors	r5, r3
 800123c:	0fc4      	lsrs	r4, r0, #31
 800123e:	0028      	movs	r0, r5
 8001240:	f001 ffca 	bl	80031d8 <__clzsi2>
 8001244:	239e      	movs	r3, #158	@ 0x9e
 8001246:	0001      	movs	r1, r0
 8001248:	1a1b      	subs	r3, r3, r0
 800124a:	2b96      	cmp	r3, #150	@ 0x96
 800124c:	dc0f      	bgt.n	800126e <__aeabi_i2f+0x3e>
 800124e:	2808      	cmp	r0, #8
 8001250:	d034      	beq.n	80012bc <__aeabi_i2f+0x8c>
 8001252:	3908      	subs	r1, #8
 8001254:	408d      	lsls	r5, r1
 8001256:	026d      	lsls	r5, r5, #9
 8001258:	0a6d      	lsrs	r5, r5, #9
 800125a:	b2d8      	uxtb	r0, r3
 800125c:	e002      	b.n	8001264 <__aeabi_i2f+0x34>
 800125e:	2400      	movs	r4, #0
 8001260:	2000      	movs	r0, #0
 8001262:	2500      	movs	r5, #0
 8001264:	05c0      	lsls	r0, r0, #23
 8001266:	4328      	orrs	r0, r5
 8001268:	07e4      	lsls	r4, r4, #31
 800126a:	4320      	orrs	r0, r4
 800126c:	bd70      	pop	{r4, r5, r6, pc}
 800126e:	2b99      	cmp	r3, #153	@ 0x99
 8001270:	dc16      	bgt.n	80012a0 <__aeabi_i2f+0x70>
 8001272:	1f42      	subs	r2, r0, #5
 8001274:	2805      	cmp	r0, #5
 8001276:	d000      	beq.n	800127a <__aeabi_i2f+0x4a>
 8001278:	4095      	lsls	r5, r2
 800127a:	002a      	movs	r2, r5
 800127c:	4811      	ldr	r0, [pc, #68]	@ (80012c4 <__aeabi_i2f+0x94>)
 800127e:	4002      	ands	r2, r0
 8001280:	076e      	lsls	r6, r5, #29
 8001282:	d009      	beq.n	8001298 <__aeabi_i2f+0x68>
 8001284:	260f      	movs	r6, #15
 8001286:	4035      	ands	r5, r6
 8001288:	2d04      	cmp	r5, #4
 800128a:	d005      	beq.n	8001298 <__aeabi_i2f+0x68>
 800128c:	3204      	adds	r2, #4
 800128e:	0155      	lsls	r5, r2, #5
 8001290:	d502      	bpl.n	8001298 <__aeabi_i2f+0x68>
 8001292:	239f      	movs	r3, #159	@ 0x9f
 8001294:	4002      	ands	r2, r0
 8001296:	1a5b      	subs	r3, r3, r1
 8001298:	0192      	lsls	r2, r2, #6
 800129a:	0a55      	lsrs	r5, r2, #9
 800129c:	b2d8      	uxtb	r0, r3
 800129e:	e7e1      	b.n	8001264 <__aeabi_i2f+0x34>
 80012a0:	2205      	movs	r2, #5
 80012a2:	1a12      	subs	r2, r2, r0
 80012a4:	0028      	movs	r0, r5
 80012a6:	40d0      	lsrs	r0, r2
 80012a8:	0002      	movs	r2, r0
 80012aa:	0008      	movs	r0, r1
 80012ac:	301b      	adds	r0, #27
 80012ae:	4085      	lsls	r5, r0
 80012b0:	0028      	movs	r0, r5
 80012b2:	1e45      	subs	r5, r0, #1
 80012b4:	41a8      	sbcs	r0, r5
 80012b6:	4302      	orrs	r2, r0
 80012b8:	0015      	movs	r5, r2
 80012ba:	e7de      	b.n	800127a <__aeabi_i2f+0x4a>
 80012bc:	026d      	lsls	r5, r5, #9
 80012be:	2096      	movs	r0, #150	@ 0x96
 80012c0:	0a6d      	lsrs	r5, r5, #9
 80012c2:	e7cf      	b.n	8001264 <__aeabi_i2f+0x34>
 80012c4:	fbffffff 	.word	0xfbffffff

080012c8 <__aeabi_dadd>:
 80012c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ca:	4657      	mov	r7, sl
 80012cc:	464e      	mov	r6, r9
 80012ce:	4645      	mov	r5, r8
 80012d0:	46de      	mov	lr, fp
 80012d2:	b5e0      	push	{r5, r6, r7, lr}
 80012d4:	b083      	sub	sp, #12
 80012d6:	9000      	str	r0, [sp, #0]
 80012d8:	9101      	str	r1, [sp, #4]
 80012da:	030c      	lsls	r4, r1, #12
 80012dc:	004f      	lsls	r7, r1, #1
 80012de:	0fce      	lsrs	r6, r1, #31
 80012e0:	0a61      	lsrs	r1, r4, #9
 80012e2:	9c00      	ldr	r4, [sp, #0]
 80012e4:	031d      	lsls	r5, r3, #12
 80012e6:	0f64      	lsrs	r4, r4, #29
 80012e8:	430c      	orrs	r4, r1
 80012ea:	9900      	ldr	r1, [sp, #0]
 80012ec:	9200      	str	r2, [sp, #0]
 80012ee:	9301      	str	r3, [sp, #4]
 80012f0:	00c8      	lsls	r0, r1, #3
 80012f2:	0059      	lsls	r1, r3, #1
 80012f4:	0d4b      	lsrs	r3, r1, #21
 80012f6:	4699      	mov	r9, r3
 80012f8:	9a00      	ldr	r2, [sp, #0]
 80012fa:	9b01      	ldr	r3, [sp, #4]
 80012fc:	0a6d      	lsrs	r5, r5, #9
 80012fe:	0fd9      	lsrs	r1, r3, #31
 8001300:	0f53      	lsrs	r3, r2, #29
 8001302:	432b      	orrs	r3, r5
 8001304:	469a      	mov	sl, r3
 8001306:	9b00      	ldr	r3, [sp, #0]
 8001308:	0d7f      	lsrs	r7, r7, #21
 800130a:	00da      	lsls	r2, r3, #3
 800130c:	4694      	mov	ip, r2
 800130e:	464a      	mov	r2, r9
 8001310:	46b0      	mov	r8, r6
 8001312:	1aba      	subs	r2, r7, r2
 8001314:	428e      	cmp	r6, r1
 8001316:	d100      	bne.n	800131a <__aeabi_dadd+0x52>
 8001318:	e0b0      	b.n	800147c <__aeabi_dadd+0x1b4>
 800131a:	2a00      	cmp	r2, #0
 800131c:	dc00      	bgt.n	8001320 <__aeabi_dadd+0x58>
 800131e:	e078      	b.n	8001412 <__aeabi_dadd+0x14a>
 8001320:	4649      	mov	r1, r9
 8001322:	2900      	cmp	r1, #0
 8001324:	d100      	bne.n	8001328 <__aeabi_dadd+0x60>
 8001326:	e0e9      	b.n	80014fc <__aeabi_dadd+0x234>
 8001328:	49c9      	ldr	r1, [pc, #804]	@ (8001650 <__aeabi_dadd+0x388>)
 800132a:	428f      	cmp	r7, r1
 800132c:	d100      	bne.n	8001330 <__aeabi_dadd+0x68>
 800132e:	e195      	b.n	800165c <__aeabi_dadd+0x394>
 8001330:	2501      	movs	r5, #1
 8001332:	2a38      	cmp	r2, #56	@ 0x38
 8001334:	dc16      	bgt.n	8001364 <__aeabi_dadd+0x9c>
 8001336:	2180      	movs	r1, #128	@ 0x80
 8001338:	4653      	mov	r3, sl
 800133a:	0409      	lsls	r1, r1, #16
 800133c:	430b      	orrs	r3, r1
 800133e:	469a      	mov	sl, r3
 8001340:	2a1f      	cmp	r2, #31
 8001342:	dd00      	ble.n	8001346 <__aeabi_dadd+0x7e>
 8001344:	e1e7      	b.n	8001716 <__aeabi_dadd+0x44e>
 8001346:	2120      	movs	r1, #32
 8001348:	4655      	mov	r5, sl
 800134a:	1a8b      	subs	r3, r1, r2
 800134c:	4661      	mov	r1, ip
 800134e:	409d      	lsls	r5, r3
 8001350:	40d1      	lsrs	r1, r2
 8001352:	430d      	orrs	r5, r1
 8001354:	4661      	mov	r1, ip
 8001356:	4099      	lsls	r1, r3
 8001358:	1e4b      	subs	r3, r1, #1
 800135a:	4199      	sbcs	r1, r3
 800135c:	4653      	mov	r3, sl
 800135e:	40d3      	lsrs	r3, r2
 8001360:	430d      	orrs	r5, r1
 8001362:	1ae4      	subs	r4, r4, r3
 8001364:	1b45      	subs	r5, r0, r5
 8001366:	42a8      	cmp	r0, r5
 8001368:	4180      	sbcs	r0, r0
 800136a:	4240      	negs	r0, r0
 800136c:	1a24      	subs	r4, r4, r0
 800136e:	0223      	lsls	r3, r4, #8
 8001370:	d400      	bmi.n	8001374 <__aeabi_dadd+0xac>
 8001372:	e10f      	b.n	8001594 <__aeabi_dadd+0x2cc>
 8001374:	0264      	lsls	r4, r4, #9
 8001376:	0a64      	lsrs	r4, r4, #9
 8001378:	2c00      	cmp	r4, #0
 800137a:	d100      	bne.n	800137e <__aeabi_dadd+0xb6>
 800137c:	e139      	b.n	80015f2 <__aeabi_dadd+0x32a>
 800137e:	0020      	movs	r0, r4
 8001380:	f001 ff2a 	bl	80031d8 <__clzsi2>
 8001384:	0003      	movs	r3, r0
 8001386:	3b08      	subs	r3, #8
 8001388:	2120      	movs	r1, #32
 800138a:	0028      	movs	r0, r5
 800138c:	1aca      	subs	r2, r1, r3
 800138e:	40d0      	lsrs	r0, r2
 8001390:	409c      	lsls	r4, r3
 8001392:	0002      	movs	r2, r0
 8001394:	409d      	lsls	r5, r3
 8001396:	4322      	orrs	r2, r4
 8001398:	429f      	cmp	r7, r3
 800139a:	dd00      	ble.n	800139e <__aeabi_dadd+0xd6>
 800139c:	e173      	b.n	8001686 <__aeabi_dadd+0x3be>
 800139e:	1bd8      	subs	r0, r3, r7
 80013a0:	3001      	adds	r0, #1
 80013a2:	1a09      	subs	r1, r1, r0
 80013a4:	002c      	movs	r4, r5
 80013a6:	408d      	lsls	r5, r1
 80013a8:	40c4      	lsrs	r4, r0
 80013aa:	1e6b      	subs	r3, r5, #1
 80013ac:	419d      	sbcs	r5, r3
 80013ae:	0013      	movs	r3, r2
 80013b0:	40c2      	lsrs	r2, r0
 80013b2:	408b      	lsls	r3, r1
 80013b4:	4325      	orrs	r5, r4
 80013b6:	2700      	movs	r7, #0
 80013b8:	0014      	movs	r4, r2
 80013ba:	431d      	orrs	r5, r3
 80013bc:	076b      	lsls	r3, r5, #29
 80013be:	d009      	beq.n	80013d4 <__aeabi_dadd+0x10c>
 80013c0:	230f      	movs	r3, #15
 80013c2:	402b      	ands	r3, r5
 80013c4:	2b04      	cmp	r3, #4
 80013c6:	d005      	beq.n	80013d4 <__aeabi_dadd+0x10c>
 80013c8:	1d2b      	adds	r3, r5, #4
 80013ca:	42ab      	cmp	r3, r5
 80013cc:	41ad      	sbcs	r5, r5
 80013ce:	426d      	negs	r5, r5
 80013d0:	1964      	adds	r4, r4, r5
 80013d2:	001d      	movs	r5, r3
 80013d4:	0223      	lsls	r3, r4, #8
 80013d6:	d400      	bmi.n	80013da <__aeabi_dadd+0x112>
 80013d8:	e12d      	b.n	8001636 <__aeabi_dadd+0x36e>
 80013da:	4a9d      	ldr	r2, [pc, #628]	@ (8001650 <__aeabi_dadd+0x388>)
 80013dc:	3701      	adds	r7, #1
 80013de:	4297      	cmp	r7, r2
 80013e0:	d100      	bne.n	80013e4 <__aeabi_dadd+0x11c>
 80013e2:	e0d3      	b.n	800158c <__aeabi_dadd+0x2c4>
 80013e4:	4646      	mov	r6, r8
 80013e6:	499b      	ldr	r1, [pc, #620]	@ (8001654 <__aeabi_dadd+0x38c>)
 80013e8:	08ed      	lsrs	r5, r5, #3
 80013ea:	4021      	ands	r1, r4
 80013ec:	074a      	lsls	r2, r1, #29
 80013ee:	432a      	orrs	r2, r5
 80013f0:	057c      	lsls	r4, r7, #21
 80013f2:	024d      	lsls	r5, r1, #9
 80013f4:	0b2d      	lsrs	r5, r5, #12
 80013f6:	0d64      	lsrs	r4, r4, #21
 80013f8:	0524      	lsls	r4, r4, #20
 80013fa:	432c      	orrs	r4, r5
 80013fc:	07f6      	lsls	r6, r6, #31
 80013fe:	4334      	orrs	r4, r6
 8001400:	0010      	movs	r0, r2
 8001402:	0021      	movs	r1, r4
 8001404:	b003      	add	sp, #12
 8001406:	bcf0      	pop	{r4, r5, r6, r7}
 8001408:	46bb      	mov	fp, r7
 800140a:	46b2      	mov	sl, r6
 800140c:	46a9      	mov	r9, r5
 800140e:	46a0      	mov	r8, r4
 8001410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001412:	2a00      	cmp	r2, #0
 8001414:	d100      	bne.n	8001418 <__aeabi_dadd+0x150>
 8001416:	e084      	b.n	8001522 <__aeabi_dadd+0x25a>
 8001418:	464a      	mov	r2, r9
 800141a:	1bd2      	subs	r2, r2, r7
 800141c:	2f00      	cmp	r7, #0
 800141e:	d000      	beq.n	8001422 <__aeabi_dadd+0x15a>
 8001420:	e16d      	b.n	80016fe <__aeabi_dadd+0x436>
 8001422:	0025      	movs	r5, r4
 8001424:	4305      	orrs	r5, r0
 8001426:	d100      	bne.n	800142a <__aeabi_dadd+0x162>
 8001428:	e127      	b.n	800167a <__aeabi_dadd+0x3b2>
 800142a:	1e56      	subs	r6, r2, #1
 800142c:	2a01      	cmp	r2, #1
 800142e:	d100      	bne.n	8001432 <__aeabi_dadd+0x16a>
 8001430:	e23b      	b.n	80018aa <__aeabi_dadd+0x5e2>
 8001432:	4d87      	ldr	r5, [pc, #540]	@ (8001650 <__aeabi_dadd+0x388>)
 8001434:	42aa      	cmp	r2, r5
 8001436:	d100      	bne.n	800143a <__aeabi_dadd+0x172>
 8001438:	e26a      	b.n	8001910 <__aeabi_dadd+0x648>
 800143a:	2501      	movs	r5, #1
 800143c:	2e38      	cmp	r6, #56	@ 0x38
 800143e:	dc12      	bgt.n	8001466 <__aeabi_dadd+0x19e>
 8001440:	0032      	movs	r2, r6
 8001442:	2a1f      	cmp	r2, #31
 8001444:	dd00      	ble.n	8001448 <__aeabi_dadd+0x180>
 8001446:	e1f8      	b.n	800183a <__aeabi_dadd+0x572>
 8001448:	2620      	movs	r6, #32
 800144a:	0025      	movs	r5, r4
 800144c:	1ab6      	subs	r6, r6, r2
 800144e:	0007      	movs	r7, r0
 8001450:	4653      	mov	r3, sl
 8001452:	40b0      	lsls	r0, r6
 8001454:	40d4      	lsrs	r4, r2
 8001456:	40b5      	lsls	r5, r6
 8001458:	40d7      	lsrs	r7, r2
 800145a:	1e46      	subs	r6, r0, #1
 800145c:	41b0      	sbcs	r0, r6
 800145e:	1b1b      	subs	r3, r3, r4
 8001460:	469a      	mov	sl, r3
 8001462:	433d      	orrs	r5, r7
 8001464:	4305      	orrs	r5, r0
 8001466:	4662      	mov	r2, ip
 8001468:	1b55      	subs	r5, r2, r5
 800146a:	45ac      	cmp	ip, r5
 800146c:	4192      	sbcs	r2, r2
 800146e:	4653      	mov	r3, sl
 8001470:	4252      	negs	r2, r2
 8001472:	000e      	movs	r6, r1
 8001474:	464f      	mov	r7, r9
 8001476:	4688      	mov	r8, r1
 8001478:	1a9c      	subs	r4, r3, r2
 800147a:	e778      	b.n	800136e <__aeabi_dadd+0xa6>
 800147c:	2a00      	cmp	r2, #0
 800147e:	dc00      	bgt.n	8001482 <__aeabi_dadd+0x1ba>
 8001480:	e08e      	b.n	80015a0 <__aeabi_dadd+0x2d8>
 8001482:	4649      	mov	r1, r9
 8001484:	2900      	cmp	r1, #0
 8001486:	d175      	bne.n	8001574 <__aeabi_dadd+0x2ac>
 8001488:	4661      	mov	r1, ip
 800148a:	4653      	mov	r3, sl
 800148c:	4319      	orrs	r1, r3
 800148e:	d100      	bne.n	8001492 <__aeabi_dadd+0x1ca>
 8001490:	e0f6      	b.n	8001680 <__aeabi_dadd+0x3b8>
 8001492:	1e51      	subs	r1, r2, #1
 8001494:	2a01      	cmp	r2, #1
 8001496:	d100      	bne.n	800149a <__aeabi_dadd+0x1d2>
 8001498:	e191      	b.n	80017be <__aeabi_dadd+0x4f6>
 800149a:	4d6d      	ldr	r5, [pc, #436]	@ (8001650 <__aeabi_dadd+0x388>)
 800149c:	42aa      	cmp	r2, r5
 800149e:	d100      	bne.n	80014a2 <__aeabi_dadd+0x1da>
 80014a0:	e0dc      	b.n	800165c <__aeabi_dadd+0x394>
 80014a2:	2501      	movs	r5, #1
 80014a4:	2938      	cmp	r1, #56	@ 0x38
 80014a6:	dc14      	bgt.n	80014d2 <__aeabi_dadd+0x20a>
 80014a8:	000a      	movs	r2, r1
 80014aa:	2a1f      	cmp	r2, #31
 80014ac:	dd00      	ble.n	80014b0 <__aeabi_dadd+0x1e8>
 80014ae:	e1a2      	b.n	80017f6 <__aeabi_dadd+0x52e>
 80014b0:	2120      	movs	r1, #32
 80014b2:	4653      	mov	r3, sl
 80014b4:	1a89      	subs	r1, r1, r2
 80014b6:	408b      	lsls	r3, r1
 80014b8:	001d      	movs	r5, r3
 80014ba:	4663      	mov	r3, ip
 80014bc:	40d3      	lsrs	r3, r2
 80014be:	431d      	orrs	r5, r3
 80014c0:	4663      	mov	r3, ip
 80014c2:	408b      	lsls	r3, r1
 80014c4:	0019      	movs	r1, r3
 80014c6:	1e4b      	subs	r3, r1, #1
 80014c8:	4199      	sbcs	r1, r3
 80014ca:	4653      	mov	r3, sl
 80014cc:	40d3      	lsrs	r3, r2
 80014ce:	430d      	orrs	r5, r1
 80014d0:	18e4      	adds	r4, r4, r3
 80014d2:	182d      	adds	r5, r5, r0
 80014d4:	4285      	cmp	r5, r0
 80014d6:	4180      	sbcs	r0, r0
 80014d8:	4240      	negs	r0, r0
 80014da:	1824      	adds	r4, r4, r0
 80014dc:	0223      	lsls	r3, r4, #8
 80014de:	d559      	bpl.n	8001594 <__aeabi_dadd+0x2cc>
 80014e0:	4b5b      	ldr	r3, [pc, #364]	@ (8001650 <__aeabi_dadd+0x388>)
 80014e2:	3701      	adds	r7, #1
 80014e4:	429f      	cmp	r7, r3
 80014e6:	d051      	beq.n	800158c <__aeabi_dadd+0x2c4>
 80014e8:	2101      	movs	r1, #1
 80014ea:	4b5a      	ldr	r3, [pc, #360]	@ (8001654 <__aeabi_dadd+0x38c>)
 80014ec:	086a      	lsrs	r2, r5, #1
 80014ee:	401c      	ands	r4, r3
 80014f0:	4029      	ands	r1, r5
 80014f2:	430a      	orrs	r2, r1
 80014f4:	07e5      	lsls	r5, r4, #31
 80014f6:	4315      	orrs	r5, r2
 80014f8:	0864      	lsrs	r4, r4, #1
 80014fa:	e75f      	b.n	80013bc <__aeabi_dadd+0xf4>
 80014fc:	4661      	mov	r1, ip
 80014fe:	4653      	mov	r3, sl
 8001500:	4319      	orrs	r1, r3
 8001502:	d100      	bne.n	8001506 <__aeabi_dadd+0x23e>
 8001504:	e0bc      	b.n	8001680 <__aeabi_dadd+0x3b8>
 8001506:	1e51      	subs	r1, r2, #1
 8001508:	2a01      	cmp	r2, #1
 800150a:	d100      	bne.n	800150e <__aeabi_dadd+0x246>
 800150c:	e164      	b.n	80017d8 <__aeabi_dadd+0x510>
 800150e:	4d50      	ldr	r5, [pc, #320]	@ (8001650 <__aeabi_dadd+0x388>)
 8001510:	42aa      	cmp	r2, r5
 8001512:	d100      	bne.n	8001516 <__aeabi_dadd+0x24e>
 8001514:	e16a      	b.n	80017ec <__aeabi_dadd+0x524>
 8001516:	2501      	movs	r5, #1
 8001518:	2938      	cmp	r1, #56	@ 0x38
 800151a:	dd00      	ble.n	800151e <__aeabi_dadd+0x256>
 800151c:	e722      	b.n	8001364 <__aeabi_dadd+0x9c>
 800151e:	000a      	movs	r2, r1
 8001520:	e70e      	b.n	8001340 <__aeabi_dadd+0x78>
 8001522:	4a4d      	ldr	r2, [pc, #308]	@ (8001658 <__aeabi_dadd+0x390>)
 8001524:	1c7d      	adds	r5, r7, #1
 8001526:	4215      	tst	r5, r2
 8001528:	d000      	beq.n	800152c <__aeabi_dadd+0x264>
 800152a:	e0d0      	b.n	80016ce <__aeabi_dadd+0x406>
 800152c:	0025      	movs	r5, r4
 800152e:	4662      	mov	r2, ip
 8001530:	4653      	mov	r3, sl
 8001532:	4305      	orrs	r5, r0
 8001534:	431a      	orrs	r2, r3
 8001536:	2f00      	cmp	r7, #0
 8001538:	d000      	beq.n	800153c <__aeabi_dadd+0x274>
 800153a:	e137      	b.n	80017ac <__aeabi_dadd+0x4e4>
 800153c:	2d00      	cmp	r5, #0
 800153e:	d100      	bne.n	8001542 <__aeabi_dadd+0x27a>
 8001540:	e1a8      	b.n	8001894 <__aeabi_dadd+0x5cc>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_dadd+0x280>
 8001546:	e16a      	b.n	800181e <__aeabi_dadd+0x556>
 8001548:	4663      	mov	r3, ip
 800154a:	1ac5      	subs	r5, r0, r3
 800154c:	4653      	mov	r3, sl
 800154e:	1ae2      	subs	r2, r4, r3
 8001550:	42a8      	cmp	r0, r5
 8001552:	419b      	sbcs	r3, r3
 8001554:	425b      	negs	r3, r3
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	021a      	lsls	r2, r3, #8
 800155a:	d400      	bmi.n	800155e <__aeabi_dadd+0x296>
 800155c:	e203      	b.n	8001966 <__aeabi_dadd+0x69e>
 800155e:	4663      	mov	r3, ip
 8001560:	1a1d      	subs	r5, r3, r0
 8001562:	45ac      	cmp	ip, r5
 8001564:	4192      	sbcs	r2, r2
 8001566:	4653      	mov	r3, sl
 8001568:	4252      	negs	r2, r2
 800156a:	1b1c      	subs	r4, r3, r4
 800156c:	000e      	movs	r6, r1
 800156e:	4688      	mov	r8, r1
 8001570:	1aa4      	subs	r4, r4, r2
 8001572:	e723      	b.n	80013bc <__aeabi_dadd+0xf4>
 8001574:	4936      	ldr	r1, [pc, #216]	@ (8001650 <__aeabi_dadd+0x388>)
 8001576:	428f      	cmp	r7, r1
 8001578:	d070      	beq.n	800165c <__aeabi_dadd+0x394>
 800157a:	2501      	movs	r5, #1
 800157c:	2a38      	cmp	r2, #56	@ 0x38
 800157e:	dca8      	bgt.n	80014d2 <__aeabi_dadd+0x20a>
 8001580:	2180      	movs	r1, #128	@ 0x80
 8001582:	4653      	mov	r3, sl
 8001584:	0409      	lsls	r1, r1, #16
 8001586:	430b      	orrs	r3, r1
 8001588:	469a      	mov	sl, r3
 800158a:	e78e      	b.n	80014aa <__aeabi_dadd+0x1e2>
 800158c:	003c      	movs	r4, r7
 800158e:	2500      	movs	r5, #0
 8001590:	2200      	movs	r2, #0
 8001592:	e731      	b.n	80013f8 <__aeabi_dadd+0x130>
 8001594:	2307      	movs	r3, #7
 8001596:	402b      	ands	r3, r5
 8001598:	2b00      	cmp	r3, #0
 800159a:	d000      	beq.n	800159e <__aeabi_dadd+0x2d6>
 800159c:	e710      	b.n	80013c0 <__aeabi_dadd+0xf8>
 800159e:	e093      	b.n	80016c8 <__aeabi_dadd+0x400>
 80015a0:	2a00      	cmp	r2, #0
 80015a2:	d074      	beq.n	800168e <__aeabi_dadd+0x3c6>
 80015a4:	464a      	mov	r2, r9
 80015a6:	1bd2      	subs	r2, r2, r7
 80015a8:	2f00      	cmp	r7, #0
 80015aa:	d100      	bne.n	80015ae <__aeabi_dadd+0x2e6>
 80015ac:	e0c7      	b.n	800173e <__aeabi_dadd+0x476>
 80015ae:	4928      	ldr	r1, [pc, #160]	@ (8001650 <__aeabi_dadd+0x388>)
 80015b0:	4589      	cmp	r9, r1
 80015b2:	d100      	bne.n	80015b6 <__aeabi_dadd+0x2ee>
 80015b4:	e185      	b.n	80018c2 <__aeabi_dadd+0x5fa>
 80015b6:	2501      	movs	r5, #1
 80015b8:	2a38      	cmp	r2, #56	@ 0x38
 80015ba:	dc12      	bgt.n	80015e2 <__aeabi_dadd+0x31a>
 80015bc:	2180      	movs	r1, #128	@ 0x80
 80015be:	0409      	lsls	r1, r1, #16
 80015c0:	430c      	orrs	r4, r1
 80015c2:	2a1f      	cmp	r2, #31
 80015c4:	dd00      	ble.n	80015c8 <__aeabi_dadd+0x300>
 80015c6:	e1ab      	b.n	8001920 <__aeabi_dadd+0x658>
 80015c8:	2120      	movs	r1, #32
 80015ca:	0025      	movs	r5, r4
 80015cc:	1a89      	subs	r1, r1, r2
 80015ce:	0007      	movs	r7, r0
 80015d0:	4088      	lsls	r0, r1
 80015d2:	408d      	lsls	r5, r1
 80015d4:	40d7      	lsrs	r7, r2
 80015d6:	1e41      	subs	r1, r0, #1
 80015d8:	4188      	sbcs	r0, r1
 80015da:	40d4      	lsrs	r4, r2
 80015dc:	433d      	orrs	r5, r7
 80015de:	4305      	orrs	r5, r0
 80015e0:	44a2      	add	sl, r4
 80015e2:	4465      	add	r5, ip
 80015e4:	4565      	cmp	r5, ip
 80015e6:	4192      	sbcs	r2, r2
 80015e8:	4252      	negs	r2, r2
 80015ea:	4452      	add	r2, sl
 80015ec:	0014      	movs	r4, r2
 80015ee:	464f      	mov	r7, r9
 80015f0:	e774      	b.n	80014dc <__aeabi_dadd+0x214>
 80015f2:	0028      	movs	r0, r5
 80015f4:	f001 fdf0 	bl	80031d8 <__clzsi2>
 80015f8:	0003      	movs	r3, r0
 80015fa:	3318      	adds	r3, #24
 80015fc:	2b1f      	cmp	r3, #31
 80015fe:	dc00      	bgt.n	8001602 <__aeabi_dadd+0x33a>
 8001600:	e6c2      	b.n	8001388 <__aeabi_dadd+0xc0>
 8001602:	002a      	movs	r2, r5
 8001604:	3808      	subs	r0, #8
 8001606:	4082      	lsls	r2, r0
 8001608:	429f      	cmp	r7, r3
 800160a:	dd00      	ble.n	800160e <__aeabi_dadd+0x346>
 800160c:	e0a9      	b.n	8001762 <__aeabi_dadd+0x49a>
 800160e:	1bdb      	subs	r3, r3, r7
 8001610:	1c58      	adds	r0, r3, #1
 8001612:	281f      	cmp	r0, #31
 8001614:	dc00      	bgt.n	8001618 <__aeabi_dadd+0x350>
 8001616:	e1ac      	b.n	8001972 <__aeabi_dadd+0x6aa>
 8001618:	0015      	movs	r5, r2
 800161a:	3b1f      	subs	r3, #31
 800161c:	40dd      	lsrs	r5, r3
 800161e:	2820      	cmp	r0, #32
 8001620:	d005      	beq.n	800162e <__aeabi_dadd+0x366>
 8001622:	2340      	movs	r3, #64	@ 0x40
 8001624:	1a1b      	subs	r3, r3, r0
 8001626:	409a      	lsls	r2, r3
 8001628:	1e53      	subs	r3, r2, #1
 800162a:	419a      	sbcs	r2, r3
 800162c:	4315      	orrs	r5, r2
 800162e:	2307      	movs	r3, #7
 8001630:	2700      	movs	r7, #0
 8001632:	402b      	ands	r3, r5
 8001634:	e7b0      	b.n	8001598 <__aeabi_dadd+0x2d0>
 8001636:	08ed      	lsrs	r5, r5, #3
 8001638:	4b05      	ldr	r3, [pc, #20]	@ (8001650 <__aeabi_dadd+0x388>)
 800163a:	0762      	lsls	r2, r4, #29
 800163c:	432a      	orrs	r2, r5
 800163e:	08e4      	lsrs	r4, r4, #3
 8001640:	429f      	cmp	r7, r3
 8001642:	d00f      	beq.n	8001664 <__aeabi_dadd+0x39c>
 8001644:	0324      	lsls	r4, r4, #12
 8001646:	0b25      	lsrs	r5, r4, #12
 8001648:	057c      	lsls	r4, r7, #21
 800164a:	0d64      	lsrs	r4, r4, #21
 800164c:	e6d4      	b.n	80013f8 <__aeabi_dadd+0x130>
 800164e:	46c0      	nop			@ (mov r8, r8)
 8001650:	000007ff 	.word	0x000007ff
 8001654:	ff7fffff 	.word	0xff7fffff
 8001658:	000007fe 	.word	0x000007fe
 800165c:	08c0      	lsrs	r0, r0, #3
 800165e:	0762      	lsls	r2, r4, #29
 8001660:	4302      	orrs	r2, r0
 8001662:	08e4      	lsrs	r4, r4, #3
 8001664:	0013      	movs	r3, r2
 8001666:	4323      	orrs	r3, r4
 8001668:	d100      	bne.n	800166c <__aeabi_dadd+0x3a4>
 800166a:	e186      	b.n	800197a <__aeabi_dadd+0x6b2>
 800166c:	2580      	movs	r5, #128	@ 0x80
 800166e:	032d      	lsls	r5, r5, #12
 8001670:	4325      	orrs	r5, r4
 8001672:	032d      	lsls	r5, r5, #12
 8001674:	4cc3      	ldr	r4, [pc, #780]	@ (8001984 <__aeabi_dadd+0x6bc>)
 8001676:	0b2d      	lsrs	r5, r5, #12
 8001678:	e6be      	b.n	80013f8 <__aeabi_dadd+0x130>
 800167a:	4660      	mov	r0, ip
 800167c:	4654      	mov	r4, sl
 800167e:	000e      	movs	r6, r1
 8001680:	0017      	movs	r7, r2
 8001682:	08c5      	lsrs	r5, r0, #3
 8001684:	e7d8      	b.n	8001638 <__aeabi_dadd+0x370>
 8001686:	4cc0      	ldr	r4, [pc, #768]	@ (8001988 <__aeabi_dadd+0x6c0>)
 8001688:	1aff      	subs	r7, r7, r3
 800168a:	4014      	ands	r4, r2
 800168c:	e696      	b.n	80013bc <__aeabi_dadd+0xf4>
 800168e:	4abf      	ldr	r2, [pc, #764]	@ (800198c <__aeabi_dadd+0x6c4>)
 8001690:	1c79      	adds	r1, r7, #1
 8001692:	4211      	tst	r1, r2
 8001694:	d16b      	bne.n	800176e <__aeabi_dadd+0x4a6>
 8001696:	0022      	movs	r2, r4
 8001698:	4302      	orrs	r2, r0
 800169a:	2f00      	cmp	r7, #0
 800169c:	d000      	beq.n	80016a0 <__aeabi_dadd+0x3d8>
 800169e:	e0db      	b.n	8001858 <__aeabi_dadd+0x590>
 80016a0:	2a00      	cmp	r2, #0
 80016a2:	d100      	bne.n	80016a6 <__aeabi_dadd+0x3de>
 80016a4:	e12d      	b.n	8001902 <__aeabi_dadd+0x63a>
 80016a6:	4662      	mov	r2, ip
 80016a8:	4653      	mov	r3, sl
 80016aa:	431a      	orrs	r2, r3
 80016ac:	d100      	bne.n	80016b0 <__aeabi_dadd+0x3e8>
 80016ae:	e0b6      	b.n	800181e <__aeabi_dadd+0x556>
 80016b0:	4663      	mov	r3, ip
 80016b2:	18c5      	adds	r5, r0, r3
 80016b4:	4285      	cmp	r5, r0
 80016b6:	4180      	sbcs	r0, r0
 80016b8:	4454      	add	r4, sl
 80016ba:	4240      	negs	r0, r0
 80016bc:	1824      	adds	r4, r4, r0
 80016be:	0223      	lsls	r3, r4, #8
 80016c0:	d502      	bpl.n	80016c8 <__aeabi_dadd+0x400>
 80016c2:	000f      	movs	r7, r1
 80016c4:	4bb0      	ldr	r3, [pc, #704]	@ (8001988 <__aeabi_dadd+0x6c0>)
 80016c6:	401c      	ands	r4, r3
 80016c8:	003a      	movs	r2, r7
 80016ca:	0028      	movs	r0, r5
 80016cc:	e7d8      	b.n	8001680 <__aeabi_dadd+0x3b8>
 80016ce:	4662      	mov	r2, ip
 80016d0:	1a85      	subs	r5, r0, r2
 80016d2:	42a8      	cmp	r0, r5
 80016d4:	4192      	sbcs	r2, r2
 80016d6:	4653      	mov	r3, sl
 80016d8:	4252      	negs	r2, r2
 80016da:	4691      	mov	r9, r2
 80016dc:	1ae3      	subs	r3, r4, r3
 80016de:	001a      	movs	r2, r3
 80016e0:	464b      	mov	r3, r9
 80016e2:	1ad2      	subs	r2, r2, r3
 80016e4:	0013      	movs	r3, r2
 80016e6:	4691      	mov	r9, r2
 80016e8:	021a      	lsls	r2, r3, #8
 80016ea:	d454      	bmi.n	8001796 <__aeabi_dadd+0x4ce>
 80016ec:	464a      	mov	r2, r9
 80016ee:	464c      	mov	r4, r9
 80016f0:	432a      	orrs	r2, r5
 80016f2:	d000      	beq.n	80016f6 <__aeabi_dadd+0x42e>
 80016f4:	e640      	b.n	8001378 <__aeabi_dadd+0xb0>
 80016f6:	2600      	movs	r6, #0
 80016f8:	2400      	movs	r4, #0
 80016fa:	2500      	movs	r5, #0
 80016fc:	e67c      	b.n	80013f8 <__aeabi_dadd+0x130>
 80016fe:	4da1      	ldr	r5, [pc, #644]	@ (8001984 <__aeabi_dadd+0x6bc>)
 8001700:	45a9      	cmp	r9, r5
 8001702:	d100      	bne.n	8001706 <__aeabi_dadd+0x43e>
 8001704:	e090      	b.n	8001828 <__aeabi_dadd+0x560>
 8001706:	2501      	movs	r5, #1
 8001708:	2a38      	cmp	r2, #56	@ 0x38
 800170a:	dd00      	ble.n	800170e <__aeabi_dadd+0x446>
 800170c:	e6ab      	b.n	8001466 <__aeabi_dadd+0x19e>
 800170e:	2580      	movs	r5, #128	@ 0x80
 8001710:	042d      	lsls	r5, r5, #16
 8001712:	432c      	orrs	r4, r5
 8001714:	e695      	b.n	8001442 <__aeabi_dadd+0x17a>
 8001716:	0011      	movs	r1, r2
 8001718:	4655      	mov	r5, sl
 800171a:	3920      	subs	r1, #32
 800171c:	40cd      	lsrs	r5, r1
 800171e:	46a9      	mov	r9, r5
 8001720:	2a20      	cmp	r2, #32
 8001722:	d006      	beq.n	8001732 <__aeabi_dadd+0x46a>
 8001724:	2140      	movs	r1, #64	@ 0x40
 8001726:	4653      	mov	r3, sl
 8001728:	1a8a      	subs	r2, r1, r2
 800172a:	4093      	lsls	r3, r2
 800172c:	4662      	mov	r2, ip
 800172e:	431a      	orrs	r2, r3
 8001730:	4694      	mov	ip, r2
 8001732:	4665      	mov	r5, ip
 8001734:	1e6b      	subs	r3, r5, #1
 8001736:	419d      	sbcs	r5, r3
 8001738:	464b      	mov	r3, r9
 800173a:	431d      	orrs	r5, r3
 800173c:	e612      	b.n	8001364 <__aeabi_dadd+0x9c>
 800173e:	0021      	movs	r1, r4
 8001740:	4301      	orrs	r1, r0
 8001742:	d100      	bne.n	8001746 <__aeabi_dadd+0x47e>
 8001744:	e0c4      	b.n	80018d0 <__aeabi_dadd+0x608>
 8001746:	1e51      	subs	r1, r2, #1
 8001748:	2a01      	cmp	r2, #1
 800174a:	d100      	bne.n	800174e <__aeabi_dadd+0x486>
 800174c:	e0fb      	b.n	8001946 <__aeabi_dadd+0x67e>
 800174e:	4d8d      	ldr	r5, [pc, #564]	@ (8001984 <__aeabi_dadd+0x6bc>)
 8001750:	42aa      	cmp	r2, r5
 8001752:	d100      	bne.n	8001756 <__aeabi_dadd+0x48e>
 8001754:	e0b5      	b.n	80018c2 <__aeabi_dadd+0x5fa>
 8001756:	2501      	movs	r5, #1
 8001758:	2938      	cmp	r1, #56	@ 0x38
 800175a:	dd00      	ble.n	800175e <__aeabi_dadd+0x496>
 800175c:	e741      	b.n	80015e2 <__aeabi_dadd+0x31a>
 800175e:	000a      	movs	r2, r1
 8001760:	e72f      	b.n	80015c2 <__aeabi_dadd+0x2fa>
 8001762:	4c89      	ldr	r4, [pc, #548]	@ (8001988 <__aeabi_dadd+0x6c0>)
 8001764:	1aff      	subs	r7, r7, r3
 8001766:	4014      	ands	r4, r2
 8001768:	0762      	lsls	r2, r4, #29
 800176a:	08e4      	lsrs	r4, r4, #3
 800176c:	e76a      	b.n	8001644 <__aeabi_dadd+0x37c>
 800176e:	4a85      	ldr	r2, [pc, #532]	@ (8001984 <__aeabi_dadd+0x6bc>)
 8001770:	4291      	cmp	r1, r2
 8001772:	d100      	bne.n	8001776 <__aeabi_dadd+0x4ae>
 8001774:	e0e3      	b.n	800193e <__aeabi_dadd+0x676>
 8001776:	4663      	mov	r3, ip
 8001778:	18c2      	adds	r2, r0, r3
 800177a:	4282      	cmp	r2, r0
 800177c:	4180      	sbcs	r0, r0
 800177e:	0023      	movs	r3, r4
 8001780:	4240      	negs	r0, r0
 8001782:	4453      	add	r3, sl
 8001784:	181b      	adds	r3, r3, r0
 8001786:	07dd      	lsls	r5, r3, #31
 8001788:	085c      	lsrs	r4, r3, #1
 800178a:	2307      	movs	r3, #7
 800178c:	0852      	lsrs	r2, r2, #1
 800178e:	4315      	orrs	r5, r2
 8001790:	000f      	movs	r7, r1
 8001792:	402b      	ands	r3, r5
 8001794:	e700      	b.n	8001598 <__aeabi_dadd+0x2d0>
 8001796:	4663      	mov	r3, ip
 8001798:	1a1d      	subs	r5, r3, r0
 800179a:	45ac      	cmp	ip, r5
 800179c:	4192      	sbcs	r2, r2
 800179e:	4653      	mov	r3, sl
 80017a0:	4252      	negs	r2, r2
 80017a2:	1b1c      	subs	r4, r3, r4
 80017a4:	000e      	movs	r6, r1
 80017a6:	4688      	mov	r8, r1
 80017a8:	1aa4      	subs	r4, r4, r2
 80017aa:	e5e5      	b.n	8001378 <__aeabi_dadd+0xb0>
 80017ac:	2d00      	cmp	r5, #0
 80017ae:	d000      	beq.n	80017b2 <__aeabi_dadd+0x4ea>
 80017b0:	e091      	b.n	80018d6 <__aeabi_dadd+0x60e>
 80017b2:	2a00      	cmp	r2, #0
 80017b4:	d138      	bne.n	8001828 <__aeabi_dadd+0x560>
 80017b6:	2480      	movs	r4, #128	@ 0x80
 80017b8:	2600      	movs	r6, #0
 80017ba:	0324      	lsls	r4, r4, #12
 80017bc:	e756      	b.n	800166c <__aeabi_dadd+0x3a4>
 80017be:	4663      	mov	r3, ip
 80017c0:	18c5      	adds	r5, r0, r3
 80017c2:	4285      	cmp	r5, r0
 80017c4:	4180      	sbcs	r0, r0
 80017c6:	4454      	add	r4, sl
 80017c8:	4240      	negs	r0, r0
 80017ca:	1824      	adds	r4, r4, r0
 80017cc:	2701      	movs	r7, #1
 80017ce:	0223      	lsls	r3, r4, #8
 80017d0:	d400      	bmi.n	80017d4 <__aeabi_dadd+0x50c>
 80017d2:	e6df      	b.n	8001594 <__aeabi_dadd+0x2cc>
 80017d4:	2702      	movs	r7, #2
 80017d6:	e687      	b.n	80014e8 <__aeabi_dadd+0x220>
 80017d8:	4663      	mov	r3, ip
 80017da:	1ac5      	subs	r5, r0, r3
 80017dc:	42a8      	cmp	r0, r5
 80017de:	4180      	sbcs	r0, r0
 80017e0:	4653      	mov	r3, sl
 80017e2:	4240      	negs	r0, r0
 80017e4:	1ae4      	subs	r4, r4, r3
 80017e6:	2701      	movs	r7, #1
 80017e8:	1a24      	subs	r4, r4, r0
 80017ea:	e5c0      	b.n	800136e <__aeabi_dadd+0xa6>
 80017ec:	0762      	lsls	r2, r4, #29
 80017ee:	08c0      	lsrs	r0, r0, #3
 80017f0:	4302      	orrs	r2, r0
 80017f2:	08e4      	lsrs	r4, r4, #3
 80017f4:	e736      	b.n	8001664 <__aeabi_dadd+0x39c>
 80017f6:	0011      	movs	r1, r2
 80017f8:	4653      	mov	r3, sl
 80017fa:	3920      	subs	r1, #32
 80017fc:	40cb      	lsrs	r3, r1
 80017fe:	4699      	mov	r9, r3
 8001800:	2a20      	cmp	r2, #32
 8001802:	d006      	beq.n	8001812 <__aeabi_dadd+0x54a>
 8001804:	2140      	movs	r1, #64	@ 0x40
 8001806:	4653      	mov	r3, sl
 8001808:	1a8a      	subs	r2, r1, r2
 800180a:	4093      	lsls	r3, r2
 800180c:	4662      	mov	r2, ip
 800180e:	431a      	orrs	r2, r3
 8001810:	4694      	mov	ip, r2
 8001812:	4665      	mov	r5, ip
 8001814:	1e6b      	subs	r3, r5, #1
 8001816:	419d      	sbcs	r5, r3
 8001818:	464b      	mov	r3, r9
 800181a:	431d      	orrs	r5, r3
 800181c:	e659      	b.n	80014d2 <__aeabi_dadd+0x20a>
 800181e:	0762      	lsls	r2, r4, #29
 8001820:	08c0      	lsrs	r0, r0, #3
 8001822:	4302      	orrs	r2, r0
 8001824:	08e4      	lsrs	r4, r4, #3
 8001826:	e70d      	b.n	8001644 <__aeabi_dadd+0x37c>
 8001828:	4653      	mov	r3, sl
 800182a:	075a      	lsls	r2, r3, #29
 800182c:	4663      	mov	r3, ip
 800182e:	08d8      	lsrs	r0, r3, #3
 8001830:	4653      	mov	r3, sl
 8001832:	000e      	movs	r6, r1
 8001834:	4302      	orrs	r2, r0
 8001836:	08dc      	lsrs	r4, r3, #3
 8001838:	e714      	b.n	8001664 <__aeabi_dadd+0x39c>
 800183a:	0015      	movs	r5, r2
 800183c:	0026      	movs	r6, r4
 800183e:	3d20      	subs	r5, #32
 8001840:	40ee      	lsrs	r6, r5
 8001842:	2a20      	cmp	r2, #32
 8001844:	d003      	beq.n	800184e <__aeabi_dadd+0x586>
 8001846:	2540      	movs	r5, #64	@ 0x40
 8001848:	1aaa      	subs	r2, r5, r2
 800184a:	4094      	lsls	r4, r2
 800184c:	4320      	orrs	r0, r4
 800184e:	1e42      	subs	r2, r0, #1
 8001850:	4190      	sbcs	r0, r2
 8001852:	0005      	movs	r5, r0
 8001854:	4335      	orrs	r5, r6
 8001856:	e606      	b.n	8001466 <__aeabi_dadd+0x19e>
 8001858:	2a00      	cmp	r2, #0
 800185a:	d07c      	beq.n	8001956 <__aeabi_dadd+0x68e>
 800185c:	4662      	mov	r2, ip
 800185e:	4653      	mov	r3, sl
 8001860:	08c0      	lsrs	r0, r0, #3
 8001862:	431a      	orrs	r2, r3
 8001864:	d100      	bne.n	8001868 <__aeabi_dadd+0x5a0>
 8001866:	e6fa      	b.n	800165e <__aeabi_dadd+0x396>
 8001868:	0762      	lsls	r2, r4, #29
 800186a:	4310      	orrs	r0, r2
 800186c:	2280      	movs	r2, #128	@ 0x80
 800186e:	08e4      	lsrs	r4, r4, #3
 8001870:	0312      	lsls	r2, r2, #12
 8001872:	4214      	tst	r4, r2
 8001874:	d008      	beq.n	8001888 <__aeabi_dadd+0x5c0>
 8001876:	08d9      	lsrs	r1, r3, #3
 8001878:	4211      	tst	r1, r2
 800187a:	d105      	bne.n	8001888 <__aeabi_dadd+0x5c0>
 800187c:	4663      	mov	r3, ip
 800187e:	08d8      	lsrs	r0, r3, #3
 8001880:	4653      	mov	r3, sl
 8001882:	000c      	movs	r4, r1
 8001884:	075b      	lsls	r3, r3, #29
 8001886:	4318      	orrs	r0, r3
 8001888:	0f42      	lsrs	r2, r0, #29
 800188a:	00c0      	lsls	r0, r0, #3
 800188c:	08c0      	lsrs	r0, r0, #3
 800188e:	0752      	lsls	r2, r2, #29
 8001890:	4302      	orrs	r2, r0
 8001892:	e6e7      	b.n	8001664 <__aeabi_dadd+0x39c>
 8001894:	2a00      	cmp	r2, #0
 8001896:	d100      	bne.n	800189a <__aeabi_dadd+0x5d2>
 8001898:	e72d      	b.n	80016f6 <__aeabi_dadd+0x42e>
 800189a:	4663      	mov	r3, ip
 800189c:	08d8      	lsrs	r0, r3, #3
 800189e:	4653      	mov	r3, sl
 80018a0:	075a      	lsls	r2, r3, #29
 80018a2:	000e      	movs	r6, r1
 80018a4:	4302      	orrs	r2, r0
 80018a6:	08dc      	lsrs	r4, r3, #3
 80018a8:	e6cc      	b.n	8001644 <__aeabi_dadd+0x37c>
 80018aa:	4663      	mov	r3, ip
 80018ac:	1a1d      	subs	r5, r3, r0
 80018ae:	45ac      	cmp	ip, r5
 80018b0:	4192      	sbcs	r2, r2
 80018b2:	4653      	mov	r3, sl
 80018b4:	4252      	negs	r2, r2
 80018b6:	1b1c      	subs	r4, r3, r4
 80018b8:	000e      	movs	r6, r1
 80018ba:	4688      	mov	r8, r1
 80018bc:	1aa4      	subs	r4, r4, r2
 80018be:	3701      	adds	r7, #1
 80018c0:	e555      	b.n	800136e <__aeabi_dadd+0xa6>
 80018c2:	4663      	mov	r3, ip
 80018c4:	08d9      	lsrs	r1, r3, #3
 80018c6:	4653      	mov	r3, sl
 80018c8:	075a      	lsls	r2, r3, #29
 80018ca:	430a      	orrs	r2, r1
 80018cc:	08dc      	lsrs	r4, r3, #3
 80018ce:	e6c9      	b.n	8001664 <__aeabi_dadd+0x39c>
 80018d0:	4660      	mov	r0, ip
 80018d2:	4654      	mov	r4, sl
 80018d4:	e6d4      	b.n	8001680 <__aeabi_dadd+0x3b8>
 80018d6:	08c0      	lsrs	r0, r0, #3
 80018d8:	2a00      	cmp	r2, #0
 80018da:	d100      	bne.n	80018de <__aeabi_dadd+0x616>
 80018dc:	e6bf      	b.n	800165e <__aeabi_dadd+0x396>
 80018de:	0762      	lsls	r2, r4, #29
 80018e0:	4310      	orrs	r0, r2
 80018e2:	2280      	movs	r2, #128	@ 0x80
 80018e4:	08e4      	lsrs	r4, r4, #3
 80018e6:	0312      	lsls	r2, r2, #12
 80018e8:	4214      	tst	r4, r2
 80018ea:	d0cd      	beq.n	8001888 <__aeabi_dadd+0x5c0>
 80018ec:	08dd      	lsrs	r5, r3, #3
 80018ee:	4215      	tst	r5, r2
 80018f0:	d1ca      	bne.n	8001888 <__aeabi_dadd+0x5c0>
 80018f2:	4663      	mov	r3, ip
 80018f4:	08d8      	lsrs	r0, r3, #3
 80018f6:	4653      	mov	r3, sl
 80018f8:	075b      	lsls	r3, r3, #29
 80018fa:	000e      	movs	r6, r1
 80018fc:	002c      	movs	r4, r5
 80018fe:	4318      	orrs	r0, r3
 8001900:	e7c2      	b.n	8001888 <__aeabi_dadd+0x5c0>
 8001902:	4663      	mov	r3, ip
 8001904:	08d9      	lsrs	r1, r3, #3
 8001906:	4653      	mov	r3, sl
 8001908:	075a      	lsls	r2, r3, #29
 800190a:	430a      	orrs	r2, r1
 800190c:	08dc      	lsrs	r4, r3, #3
 800190e:	e699      	b.n	8001644 <__aeabi_dadd+0x37c>
 8001910:	4663      	mov	r3, ip
 8001912:	08d8      	lsrs	r0, r3, #3
 8001914:	4653      	mov	r3, sl
 8001916:	075a      	lsls	r2, r3, #29
 8001918:	000e      	movs	r6, r1
 800191a:	4302      	orrs	r2, r0
 800191c:	08dc      	lsrs	r4, r3, #3
 800191e:	e6a1      	b.n	8001664 <__aeabi_dadd+0x39c>
 8001920:	0011      	movs	r1, r2
 8001922:	0027      	movs	r7, r4
 8001924:	3920      	subs	r1, #32
 8001926:	40cf      	lsrs	r7, r1
 8001928:	2a20      	cmp	r2, #32
 800192a:	d003      	beq.n	8001934 <__aeabi_dadd+0x66c>
 800192c:	2140      	movs	r1, #64	@ 0x40
 800192e:	1a8a      	subs	r2, r1, r2
 8001930:	4094      	lsls	r4, r2
 8001932:	4320      	orrs	r0, r4
 8001934:	1e42      	subs	r2, r0, #1
 8001936:	4190      	sbcs	r0, r2
 8001938:	0005      	movs	r5, r0
 800193a:	433d      	orrs	r5, r7
 800193c:	e651      	b.n	80015e2 <__aeabi_dadd+0x31a>
 800193e:	000c      	movs	r4, r1
 8001940:	2500      	movs	r5, #0
 8001942:	2200      	movs	r2, #0
 8001944:	e558      	b.n	80013f8 <__aeabi_dadd+0x130>
 8001946:	4460      	add	r0, ip
 8001948:	4560      	cmp	r0, ip
 800194a:	4192      	sbcs	r2, r2
 800194c:	4454      	add	r4, sl
 800194e:	4252      	negs	r2, r2
 8001950:	0005      	movs	r5, r0
 8001952:	18a4      	adds	r4, r4, r2
 8001954:	e73a      	b.n	80017cc <__aeabi_dadd+0x504>
 8001956:	4653      	mov	r3, sl
 8001958:	075a      	lsls	r2, r3, #29
 800195a:	4663      	mov	r3, ip
 800195c:	08d9      	lsrs	r1, r3, #3
 800195e:	4653      	mov	r3, sl
 8001960:	430a      	orrs	r2, r1
 8001962:	08dc      	lsrs	r4, r3, #3
 8001964:	e67e      	b.n	8001664 <__aeabi_dadd+0x39c>
 8001966:	001a      	movs	r2, r3
 8001968:	001c      	movs	r4, r3
 800196a:	432a      	orrs	r2, r5
 800196c:	d000      	beq.n	8001970 <__aeabi_dadd+0x6a8>
 800196e:	e6ab      	b.n	80016c8 <__aeabi_dadd+0x400>
 8001970:	e6c1      	b.n	80016f6 <__aeabi_dadd+0x42e>
 8001972:	2120      	movs	r1, #32
 8001974:	2500      	movs	r5, #0
 8001976:	1a09      	subs	r1, r1, r0
 8001978:	e519      	b.n	80013ae <__aeabi_dadd+0xe6>
 800197a:	2200      	movs	r2, #0
 800197c:	2500      	movs	r5, #0
 800197e:	4c01      	ldr	r4, [pc, #4]	@ (8001984 <__aeabi_dadd+0x6bc>)
 8001980:	e53a      	b.n	80013f8 <__aeabi_dadd+0x130>
 8001982:	46c0      	nop			@ (mov r8, r8)
 8001984:	000007ff 	.word	0x000007ff
 8001988:	ff7fffff 	.word	0xff7fffff
 800198c:	000007fe 	.word	0x000007fe

08001990 <__aeabi_ddiv>:
 8001990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001992:	46de      	mov	lr, fp
 8001994:	4645      	mov	r5, r8
 8001996:	4657      	mov	r7, sl
 8001998:	464e      	mov	r6, r9
 800199a:	b5e0      	push	{r5, r6, r7, lr}
 800199c:	b087      	sub	sp, #28
 800199e:	9200      	str	r2, [sp, #0]
 80019a0:	9301      	str	r3, [sp, #4]
 80019a2:	030b      	lsls	r3, r1, #12
 80019a4:	0b1b      	lsrs	r3, r3, #12
 80019a6:	469b      	mov	fp, r3
 80019a8:	0fca      	lsrs	r2, r1, #31
 80019aa:	004b      	lsls	r3, r1, #1
 80019ac:	0004      	movs	r4, r0
 80019ae:	4680      	mov	r8, r0
 80019b0:	0d5b      	lsrs	r3, r3, #21
 80019b2:	9202      	str	r2, [sp, #8]
 80019b4:	d100      	bne.n	80019b8 <__aeabi_ddiv+0x28>
 80019b6:	e16a      	b.n	8001c8e <__aeabi_ddiv+0x2fe>
 80019b8:	4ad4      	ldr	r2, [pc, #848]	@ (8001d0c <__aeabi_ddiv+0x37c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d100      	bne.n	80019c0 <__aeabi_ddiv+0x30>
 80019be:	e18c      	b.n	8001cda <__aeabi_ddiv+0x34a>
 80019c0:	4659      	mov	r1, fp
 80019c2:	0f42      	lsrs	r2, r0, #29
 80019c4:	00c9      	lsls	r1, r1, #3
 80019c6:	430a      	orrs	r2, r1
 80019c8:	2180      	movs	r1, #128	@ 0x80
 80019ca:	0409      	lsls	r1, r1, #16
 80019cc:	4311      	orrs	r1, r2
 80019ce:	00c2      	lsls	r2, r0, #3
 80019d0:	4690      	mov	r8, r2
 80019d2:	4acf      	ldr	r2, [pc, #828]	@ (8001d10 <__aeabi_ddiv+0x380>)
 80019d4:	4689      	mov	r9, r1
 80019d6:	4692      	mov	sl, r2
 80019d8:	449a      	add	sl, r3
 80019da:	2300      	movs	r3, #0
 80019dc:	2400      	movs	r4, #0
 80019de:	9303      	str	r3, [sp, #12]
 80019e0:	9e00      	ldr	r6, [sp, #0]
 80019e2:	9f01      	ldr	r7, [sp, #4]
 80019e4:	033b      	lsls	r3, r7, #12
 80019e6:	0b1b      	lsrs	r3, r3, #12
 80019e8:	469b      	mov	fp, r3
 80019ea:	007b      	lsls	r3, r7, #1
 80019ec:	0030      	movs	r0, r6
 80019ee:	0d5b      	lsrs	r3, r3, #21
 80019f0:	0ffd      	lsrs	r5, r7, #31
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d100      	bne.n	80019f8 <__aeabi_ddiv+0x68>
 80019f6:	e128      	b.n	8001c4a <__aeabi_ddiv+0x2ba>
 80019f8:	4ac4      	ldr	r2, [pc, #784]	@ (8001d0c <__aeabi_ddiv+0x37c>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d100      	bne.n	8001a00 <__aeabi_ddiv+0x70>
 80019fe:	e177      	b.n	8001cf0 <__aeabi_ddiv+0x360>
 8001a00:	4659      	mov	r1, fp
 8001a02:	0f72      	lsrs	r2, r6, #29
 8001a04:	00c9      	lsls	r1, r1, #3
 8001a06:	430a      	orrs	r2, r1
 8001a08:	2180      	movs	r1, #128	@ 0x80
 8001a0a:	0409      	lsls	r1, r1, #16
 8001a0c:	4311      	orrs	r1, r2
 8001a0e:	468b      	mov	fp, r1
 8001a10:	49bf      	ldr	r1, [pc, #764]	@ (8001d10 <__aeabi_ddiv+0x380>)
 8001a12:	00f2      	lsls	r2, r6, #3
 8001a14:	468c      	mov	ip, r1
 8001a16:	4651      	mov	r1, sl
 8001a18:	4463      	add	r3, ip
 8001a1a:	1acb      	subs	r3, r1, r3
 8001a1c:	469a      	mov	sl, r3
 8001a1e:	2300      	movs	r3, #0
 8001a20:	9e02      	ldr	r6, [sp, #8]
 8001a22:	406e      	eors	r6, r5
 8001a24:	2c0f      	cmp	r4, #15
 8001a26:	d827      	bhi.n	8001a78 <__aeabi_ddiv+0xe8>
 8001a28:	49ba      	ldr	r1, [pc, #744]	@ (8001d14 <__aeabi_ddiv+0x384>)
 8001a2a:	00a4      	lsls	r4, r4, #2
 8001a2c:	5909      	ldr	r1, [r1, r4]
 8001a2e:	468f      	mov	pc, r1
 8001a30:	46cb      	mov	fp, r9
 8001a32:	4642      	mov	r2, r8
 8001a34:	9e02      	ldr	r6, [sp, #8]
 8001a36:	9b03      	ldr	r3, [sp, #12]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d016      	beq.n	8001a6a <__aeabi_ddiv+0xda>
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d100      	bne.n	8001a42 <__aeabi_ddiv+0xb2>
 8001a40:	e2a6      	b.n	8001f90 <__aeabi_ddiv+0x600>
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d000      	beq.n	8001a48 <__aeabi_ddiv+0xb8>
 8001a46:	e0df      	b.n	8001c08 <__aeabi_ddiv+0x278>
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	2400      	movs	r4, #0
 8001a4e:	4690      	mov	r8, r2
 8001a50:	051b      	lsls	r3, r3, #20
 8001a52:	4323      	orrs	r3, r4
 8001a54:	07f6      	lsls	r6, r6, #31
 8001a56:	4333      	orrs	r3, r6
 8001a58:	4640      	mov	r0, r8
 8001a5a:	0019      	movs	r1, r3
 8001a5c:	b007      	add	sp, #28
 8001a5e:	bcf0      	pop	{r4, r5, r6, r7}
 8001a60:	46bb      	mov	fp, r7
 8001a62:	46b2      	mov	sl, r6
 8001a64:	46a9      	mov	r9, r5
 8001a66:	46a0      	mov	r8, r4
 8001a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2400      	movs	r4, #0
 8001a6e:	4690      	mov	r8, r2
 8001a70:	4ba6      	ldr	r3, [pc, #664]	@ (8001d0c <__aeabi_ddiv+0x37c>)
 8001a72:	e7ed      	b.n	8001a50 <__aeabi_ddiv+0xc0>
 8001a74:	002e      	movs	r6, r5
 8001a76:	e7df      	b.n	8001a38 <__aeabi_ddiv+0xa8>
 8001a78:	45cb      	cmp	fp, r9
 8001a7a:	d200      	bcs.n	8001a7e <__aeabi_ddiv+0xee>
 8001a7c:	e1d4      	b.n	8001e28 <__aeabi_ddiv+0x498>
 8001a7e:	d100      	bne.n	8001a82 <__aeabi_ddiv+0xf2>
 8001a80:	e1cf      	b.n	8001e22 <__aeabi_ddiv+0x492>
 8001a82:	2301      	movs	r3, #1
 8001a84:	425b      	negs	r3, r3
 8001a86:	469c      	mov	ip, r3
 8001a88:	4644      	mov	r4, r8
 8001a8a:	4648      	mov	r0, r9
 8001a8c:	2700      	movs	r7, #0
 8001a8e:	44e2      	add	sl, ip
 8001a90:	465b      	mov	r3, fp
 8001a92:	0e15      	lsrs	r5, r2, #24
 8001a94:	021b      	lsls	r3, r3, #8
 8001a96:	431d      	orrs	r5, r3
 8001a98:	0c19      	lsrs	r1, r3, #16
 8001a9a:	042b      	lsls	r3, r5, #16
 8001a9c:	0212      	lsls	r2, r2, #8
 8001a9e:	9500      	str	r5, [sp, #0]
 8001aa0:	0c1d      	lsrs	r5, r3, #16
 8001aa2:	4691      	mov	r9, r2
 8001aa4:	9102      	str	r1, [sp, #8]
 8001aa6:	9503      	str	r5, [sp, #12]
 8001aa8:	f7fe fbd0 	bl	800024c <__aeabi_uidivmod>
 8001aac:	0002      	movs	r2, r0
 8001aae:	436a      	muls	r2, r5
 8001ab0:	040b      	lsls	r3, r1, #16
 8001ab2:	0c21      	lsrs	r1, r4, #16
 8001ab4:	4680      	mov	r8, r0
 8001ab6:	4319      	orrs	r1, r3
 8001ab8:	428a      	cmp	r2, r1
 8001aba:	d909      	bls.n	8001ad0 <__aeabi_ddiv+0x140>
 8001abc:	9d00      	ldr	r5, [sp, #0]
 8001abe:	2301      	movs	r3, #1
 8001ac0:	46ac      	mov	ip, r5
 8001ac2:	425b      	negs	r3, r3
 8001ac4:	4461      	add	r1, ip
 8001ac6:	469c      	mov	ip, r3
 8001ac8:	44e0      	add	r8, ip
 8001aca:	428d      	cmp	r5, r1
 8001acc:	d800      	bhi.n	8001ad0 <__aeabi_ddiv+0x140>
 8001ace:	e1fb      	b.n	8001ec8 <__aeabi_ddiv+0x538>
 8001ad0:	1a88      	subs	r0, r1, r2
 8001ad2:	9902      	ldr	r1, [sp, #8]
 8001ad4:	f7fe fbba 	bl	800024c <__aeabi_uidivmod>
 8001ad8:	9a03      	ldr	r2, [sp, #12]
 8001ada:	0424      	lsls	r4, r4, #16
 8001adc:	4342      	muls	r2, r0
 8001ade:	0409      	lsls	r1, r1, #16
 8001ae0:	0c24      	lsrs	r4, r4, #16
 8001ae2:	0003      	movs	r3, r0
 8001ae4:	430c      	orrs	r4, r1
 8001ae6:	42a2      	cmp	r2, r4
 8001ae8:	d906      	bls.n	8001af8 <__aeabi_ddiv+0x168>
 8001aea:	9900      	ldr	r1, [sp, #0]
 8001aec:	3b01      	subs	r3, #1
 8001aee:	468c      	mov	ip, r1
 8001af0:	4464      	add	r4, ip
 8001af2:	42a1      	cmp	r1, r4
 8001af4:	d800      	bhi.n	8001af8 <__aeabi_ddiv+0x168>
 8001af6:	e1e1      	b.n	8001ebc <__aeabi_ddiv+0x52c>
 8001af8:	1aa0      	subs	r0, r4, r2
 8001afa:	4642      	mov	r2, r8
 8001afc:	0412      	lsls	r2, r2, #16
 8001afe:	431a      	orrs	r2, r3
 8001b00:	4693      	mov	fp, r2
 8001b02:	464b      	mov	r3, r9
 8001b04:	4659      	mov	r1, fp
 8001b06:	0c1b      	lsrs	r3, r3, #16
 8001b08:	001d      	movs	r5, r3
 8001b0a:	9304      	str	r3, [sp, #16]
 8001b0c:	040b      	lsls	r3, r1, #16
 8001b0e:	4649      	mov	r1, r9
 8001b10:	0409      	lsls	r1, r1, #16
 8001b12:	0c09      	lsrs	r1, r1, #16
 8001b14:	000c      	movs	r4, r1
 8001b16:	0c1b      	lsrs	r3, r3, #16
 8001b18:	435c      	muls	r4, r3
 8001b1a:	0c12      	lsrs	r2, r2, #16
 8001b1c:	436b      	muls	r3, r5
 8001b1e:	4688      	mov	r8, r1
 8001b20:	4351      	muls	r1, r2
 8001b22:	436a      	muls	r2, r5
 8001b24:	0c25      	lsrs	r5, r4, #16
 8001b26:	46ac      	mov	ip, r5
 8001b28:	185b      	adds	r3, r3, r1
 8001b2a:	4463      	add	r3, ip
 8001b2c:	4299      	cmp	r1, r3
 8001b2e:	d903      	bls.n	8001b38 <__aeabi_ddiv+0x1a8>
 8001b30:	2180      	movs	r1, #128	@ 0x80
 8001b32:	0249      	lsls	r1, r1, #9
 8001b34:	468c      	mov	ip, r1
 8001b36:	4462      	add	r2, ip
 8001b38:	0c19      	lsrs	r1, r3, #16
 8001b3a:	0424      	lsls	r4, r4, #16
 8001b3c:	041b      	lsls	r3, r3, #16
 8001b3e:	0c24      	lsrs	r4, r4, #16
 8001b40:	188a      	adds	r2, r1, r2
 8001b42:	191c      	adds	r4, r3, r4
 8001b44:	4290      	cmp	r0, r2
 8001b46:	d302      	bcc.n	8001b4e <__aeabi_ddiv+0x1be>
 8001b48:	d116      	bne.n	8001b78 <__aeabi_ddiv+0x1e8>
 8001b4a:	42a7      	cmp	r7, r4
 8001b4c:	d214      	bcs.n	8001b78 <__aeabi_ddiv+0x1e8>
 8001b4e:	465b      	mov	r3, fp
 8001b50:	9d00      	ldr	r5, [sp, #0]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	444f      	add	r7, r9
 8001b56:	9305      	str	r3, [sp, #20]
 8001b58:	454f      	cmp	r7, r9
 8001b5a:	419b      	sbcs	r3, r3
 8001b5c:	46ac      	mov	ip, r5
 8001b5e:	425b      	negs	r3, r3
 8001b60:	4463      	add	r3, ip
 8001b62:	18c0      	adds	r0, r0, r3
 8001b64:	4285      	cmp	r5, r0
 8001b66:	d300      	bcc.n	8001b6a <__aeabi_ddiv+0x1da>
 8001b68:	e1a1      	b.n	8001eae <__aeabi_ddiv+0x51e>
 8001b6a:	4282      	cmp	r2, r0
 8001b6c:	d900      	bls.n	8001b70 <__aeabi_ddiv+0x1e0>
 8001b6e:	e1f6      	b.n	8001f5e <__aeabi_ddiv+0x5ce>
 8001b70:	d100      	bne.n	8001b74 <__aeabi_ddiv+0x1e4>
 8001b72:	e1f1      	b.n	8001f58 <__aeabi_ddiv+0x5c8>
 8001b74:	9b05      	ldr	r3, [sp, #20]
 8001b76:	469b      	mov	fp, r3
 8001b78:	1b3c      	subs	r4, r7, r4
 8001b7a:	42a7      	cmp	r7, r4
 8001b7c:	41bf      	sbcs	r7, r7
 8001b7e:	9d00      	ldr	r5, [sp, #0]
 8001b80:	1a80      	subs	r0, r0, r2
 8001b82:	427f      	negs	r7, r7
 8001b84:	1bc0      	subs	r0, r0, r7
 8001b86:	4285      	cmp	r5, r0
 8001b88:	d100      	bne.n	8001b8c <__aeabi_ddiv+0x1fc>
 8001b8a:	e1d0      	b.n	8001f2e <__aeabi_ddiv+0x59e>
 8001b8c:	9902      	ldr	r1, [sp, #8]
 8001b8e:	f7fe fb5d 	bl	800024c <__aeabi_uidivmod>
 8001b92:	9a03      	ldr	r2, [sp, #12]
 8001b94:	040b      	lsls	r3, r1, #16
 8001b96:	4342      	muls	r2, r0
 8001b98:	0c21      	lsrs	r1, r4, #16
 8001b9a:	0007      	movs	r7, r0
 8001b9c:	4319      	orrs	r1, r3
 8001b9e:	428a      	cmp	r2, r1
 8001ba0:	d900      	bls.n	8001ba4 <__aeabi_ddiv+0x214>
 8001ba2:	e178      	b.n	8001e96 <__aeabi_ddiv+0x506>
 8001ba4:	1a88      	subs	r0, r1, r2
 8001ba6:	9902      	ldr	r1, [sp, #8]
 8001ba8:	f7fe fb50 	bl	800024c <__aeabi_uidivmod>
 8001bac:	9a03      	ldr	r2, [sp, #12]
 8001bae:	0424      	lsls	r4, r4, #16
 8001bb0:	4342      	muls	r2, r0
 8001bb2:	0409      	lsls	r1, r1, #16
 8001bb4:	0c24      	lsrs	r4, r4, #16
 8001bb6:	0003      	movs	r3, r0
 8001bb8:	430c      	orrs	r4, r1
 8001bba:	42a2      	cmp	r2, r4
 8001bbc:	d900      	bls.n	8001bc0 <__aeabi_ddiv+0x230>
 8001bbe:	e15d      	b.n	8001e7c <__aeabi_ddiv+0x4ec>
 8001bc0:	4641      	mov	r1, r8
 8001bc2:	1aa4      	subs	r4, r4, r2
 8001bc4:	043a      	lsls	r2, r7, #16
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	9d04      	ldr	r5, [sp, #16]
 8001bca:	0413      	lsls	r3, r2, #16
 8001bcc:	0c1b      	lsrs	r3, r3, #16
 8001bce:	4359      	muls	r1, r3
 8001bd0:	4647      	mov	r7, r8
 8001bd2:	436b      	muls	r3, r5
 8001bd4:	469c      	mov	ip, r3
 8001bd6:	0c10      	lsrs	r0, r2, #16
 8001bd8:	4347      	muls	r7, r0
 8001bda:	0c0b      	lsrs	r3, r1, #16
 8001bdc:	44bc      	add	ip, r7
 8001bde:	4463      	add	r3, ip
 8001be0:	4368      	muls	r0, r5
 8001be2:	429f      	cmp	r7, r3
 8001be4:	d903      	bls.n	8001bee <__aeabi_ddiv+0x25e>
 8001be6:	2580      	movs	r5, #128	@ 0x80
 8001be8:	026d      	lsls	r5, r5, #9
 8001bea:	46ac      	mov	ip, r5
 8001bec:	4460      	add	r0, ip
 8001bee:	0c1f      	lsrs	r7, r3, #16
 8001bf0:	0409      	lsls	r1, r1, #16
 8001bf2:	041b      	lsls	r3, r3, #16
 8001bf4:	0c09      	lsrs	r1, r1, #16
 8001bf6:	183f      	adds	r7, r7, r0
 8001bf8:	185b      	adds	r3, r3, r1
 8001bfa:	42bc      	cmp	r4, r7
 8001bfc:	d200      	bcs.n	8001c00 <__aeabi_ddiv+0x270>
 8001bfe:	e102      	b.n	8001e06 <__aeabi_ddiv+0x476>
 8001c00:	d100      	bne.n	8001c04 <__aeabi_ddiv+0x274>
 8001c02:	e0fd      	b.n	8001e00 <__aeabi_ddiv+0x470>
 8001c04:	2301      	movs	r3, #1
 8001c06:	431a      	orrs	r2, r3
 8001c08:	4b43      	ldr	r3, [pc, #268]	@ (8001d18 <__aeabi_ddiv+0x388>)
 8001c0a:	4453      	add	r3, sl
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	dc00      	bgt.n	8001c12 <__aeabi_ddiv+0x282>
 8001c10:	e0ae      	b.n	8001d70 <__aeabi_ddiv+0x3e0>
 8001c12:	0751      	lsls	r1, r2, #29
 8001c14:	d000      	beq.n	8001c18 <__aeabi_ddiv+0x288>
 8001c16:	e198      	b.n	8001f4a <__aeabi_ddiv+0x5ba>
 8001c18:	4659      	mov	r1, fp
 8001c1a:	01c9      	lsls	r1, r1, #7
 8001c1c:	d506      	bpl.n	8001c2c <__aeabi_ddiv+0x29c>
 8001c1e:	4659      	mov	r1, fp
 8001c20:	4b3e      	ldr	r3, [pc, #248]	@ (8001d1c <__aeabi_ddiv+0x38c>)
 8001c22:	4019      	ands	r1, r3
 8001c24:	2380      	movs	r3, #128	@ 0x80
 8001c26:	468b      	mov	fp, r1
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	4453      	add	r3, sl
 8001c2c:	493c      	ldr	r1, [pc, #240]	@ (8001d20 <__aeabi_ddiv+0x390>)
 8001c2e:	428b      	cmp	r3, r1
 8001c30:	dd00      	ble.n	8001c34 <__aeabi_ddiv+0x2a4>
 8001c32:	e71a      	b.n	8001a6a <__aeabi_ddiv+0xda>
 8001c34:	4659      	mov	r1, fp
 8001c36:	08d2      	lsrs	r2, r2, #3
 8001c38:	0749      	lsls	r1, r1, #29
 8001c3a:	4311      	orrs	r1, r2
 8001c3c:	465a      	mov	r2, fp
 8001c3e:	055b      	lsls	r3, r3, #21
 8001c40:	0254      	lsls	r4, r2, #9
 8001c42:	4688      	mov	r8, r1
 8001c44:	0b24      	lsrs	r4, r4, #12
 8001c46:	0d5b      	lsrs	r3, r3, #21
 8001c48:	e702      	b.n	8001a50 <__aeabi_ddiv+0xc0>
 8001c4a:	465a      	mov	r2, fp
 8001c4c:	9b00      	ldr	r3, [sp, #0]
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	d100      	bne.n	8001c54 <__aeabi_ddiv+0x2c4>
 8001c52:	e07e      	b.n	8001d52 <__aeabi_ddiv+0x3c2>
 8001c54:	465b      	mov	r3, fp
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d100      	bne.n	8001c5c <__aeabi_ddiv+0x2cc>
 8001c5a:	e100      	b.n	8001e5e <__aeabi_ddiv+0x4ce>
 8001c5c:	4658      	mov	r0, fp
 8001c5e:	f001 fabb 	bl	80031d8 <__clzsi2>
 8001c62:	0002      	movs	r2, r0
 8001c64:	0003      	movs	r3, r0
 8001c66:	3a0b      	subs	r2, #11
 8001c68:	271d      	movs	r7, #29
 8001c6a:	9e00      	ldr	r6, [sp, #0]
 8001c6c:	1aba      	subs	r2, r7, r2
 8001c6e:	0019      	movs	r1, r3
 8001c70:	4658      	mov	r0, fp
 8001c72:	40d6      	lsrs	r6, r2
 8001c74:	3908      	subs	r1, #8
 8001c76:	4088      	lsls	r0, r1
 8001c78:	0032      	movs	r2, r6
 8001c7a:	4302      	orrs	r2, r0
 8001c7c:	4693      	mov	fp, r2
 8001c7e:	9a00      	ldr	r2, [sp, #0]
 8001c80:	408a      	lsls	r2, r1
 8001c82:	4928      	ldr	r1, [pc, #160]	@ (8001d24 <__aeabi_ddiv+0x394>)
 8001c84:	4453      	add	r3, sl
 8001c86:	468a      	mov	sl, r1
 8001c88:	449a      	add	sl, r3
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e6c8      	b.n	8001a20 <__aeabi_ddiv+0x90>
 8001c8e:	465b      	mov	r3, fp
 8001c90:	4303      	orrs	r3, r0
 8001c92:	4699      	mov	r9, r3
 8001c94:	d056      	beq.n	8001d44 <__aeabi_ddiv+0x3b4>
 8001c96:	465b      	mov	r3, fp
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d100      	bne.n	8001c9e <__aeabi_ddiv+0x30e>
 8001c9c:	e0cd      	b.n	8001e3a <__aeabi_ddiv+0x4aa>
 8001c9e:	4658      	mov	r0, fp
 8001ca0:	f001 fa9a 	bl	80031d8 <__clzsi2>
 8001ca4:	230b      	movs	r3, #11
 8001ca6:	425b      	negs	r3, r3
 8001ca8:	469c      	mov	ip, r3
 8001caa:	0002      	movs	r2, r0
 8001cac:	4484      	add	ip, r0
 8001cae:	4666      	mov	r6, ip
 8001cb0:	231d      	movs	r3, #29
 8001cb2:	1b9b      	subs	r3, r3, r6
 8001cb4:	0026      	movs	r6, r4
 8001cb6:	0011      	movs	r1, r2
 8001cb8:	4658      	mov	r0, fp
 8001cba:	40de      	lsrs	r6, r3
 8001cbc:	3908      	subs	r1, #8
 8001cbe:	4088      	lsls	r0, r1
 8001cc0:	0033      	movs	r3, r6
 8001cc2:	4303      	orrs	r3, r0
 8001cc4:	4699      	mov	r9, r3
 8001cc6:	0023      	movs	r3, r4
 8001cc8:	408b      	lsls	r3, r1
 8001cca:	4698      	mov	r8, r3
 8001ccc:	4b16      	ldr	r3, [pc, #88]	@ (8001d28 <__aeabi_ddiv+0x398>)
 8001cce:	2400      	movs	r4, #0
 8001cd0:	1a9b      	subs	r3, r3, r2
 8001cd2:	469a      	mov	sl, r3
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	9303      	str	r3, [sp, #12]
 8001cd8:	e682      	b.n	80019e0 <__aeabi_ddiv+0x50>
 8001cda:	465a      	mov	r2, fp
 8001cdc:	4302      	orrs	r2, r0
 8001cde:	4691      	mov	r9, r2
 8001ce0:	d12a      	bne.n	8001d38 <__aeabi_ddiv+0x3a8>
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	469a      	mov	sl, r3
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	4690      	mov	r8, r2
 8001cea:	2408      	movs	r4, #8
 8001cec:	9303      	str	r3, [sp, #12]
 8001cee:	e677      	b.n	80019e0 <__aeabi_ddiv+0x50>
 8001cf0:	465a      	mov	r2, fp
 8001cf2:	9b00      	ldr	r3, [sp, #0]
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8001d2c <__aeabi_ddiv+0x39c>)
 8001cf8:	469c      	mov	ip, r3
 8001cfa:	44e2      	add	sl, ip
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d117      	bne.n	8001d30 <__aeabi_ddiv+0x3a0>
 8001d00:	2302      	movs	r3, #2
 8001d02:	431c      	orrs	r4, r3
 8001d04:	2300      	movs	r3, #0
 8001d06:	469b      	mov	fp, r3
 8001d08:	3302      	adds	r3, #2
 8001d0a:	e689      	b.n	8001a20 <__aeabi_ddiv+0x90>
 8001d0c:	000007ff 	.word	0x000007ff
 8001d10:	fffffc01 	.word	0xfffffc01
 8001d14:	0800db70 	.word	0x0800db70
 8001d18:	000003ff 	.word	0x000003ff
 8001d1c:	feffffff 	.word	0xfeffffff
 8001d20:	000007fe 	.word	0x000007fe
 8001d24:	000003f3 	.word	0x000003f3
 8001d28:	fffffc0d 	.word	0xfffffc0d
 8001d2c:	fffff801 	.word	0xfffff801
 8001d30:	2303      	movs	r3, #3
 8001d32:	0032      	movs	r2, r6
 8001d34:	431c      	orrs	r4, r3
 8001d36:	e673      	b.n	8001a20 <__aeabi_ddiv+0x90>
 8001d38:	469a      	mov	sl, r3
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	46d9      	mov	r9, fp
 8001d3e:	240c      	movs	r4, #12
 8001d40:	9303      	str	r3, [sp, #12]
 8001d42:	e64d      	b.n	80019e0 <__aeabi_ddiv+0x50>
 8001d44:	2300      	movs	r3, #0
 8001d46:	4698      	mov	r8, r3
 8001d48:	469a      	mov	sl, r3
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	2404      	movs	r4, #4
 8001d4e:	9303      	str	r3, [sp, #12]
 8001d50:	e646      	b.n	80019e0 <__aeabi_ddiv+0x50>
 8001d52:	2301      	movs	r3, #1
 8001d54:	431c      	orrs	r4, r3
 8001d56:	2300      	movs	r3, #0
 8001d58:	469b      	mov	fp, r3
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	e660      	b.n	8001a20 <__aeabi_ddiv+0x90>
 8001d5e:	2300      	movs	r3, #0
 8001d60:	2480      	movs	r4, #128	@ 0x80
 8001d62:	4698      	mov	r8, r3
 8001d64:	2600      	movs	r6, #0
 8001d66:	4b92      	ldr	r3, [pc, #584]	@ (8001fb0 <__aeabi_ddiv+0x620>)
 8001d68:	0324      	lsls	r4, r4, #12
 8001d6a:	e671      	b.n	8001a50 <__aeabi_ddiv+0xc0>
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	4252      	negs	r2, r2
 8001d70:	2101      	movs	r1, #1
 8001d72:	1ac9      	subs	r1, r1, r3
 8001d74:	2938      	cmp	r1, #56	@ 0x38
 8001d76:	dd00      	ble.n	8001d7a <__aeabi_ddiv+0x3ea>
 8001d78:	e666      	b.n	8001a48 <__aeabi_ddiv+0xb8>
 8001d7a:	291f      	cmp	r1, #31
 8001d7c:	dc00      	bgt.n	8001d80 <__aeabi_ddiv+0x3f0>
 8001d7e:	e0ab      	b.n	8001ed8 <__aeabi_ddiv+0x548>
 8001d80:	201f      	movs	r0, #31
 8001d82:	4240      	negs	r0, r0
 8001d84:	1ac3      	subs	r3, r0, r3
 8001d86:	4658      	mov	r0, fp
 8001d88:	40d8      	lsrs	r0, r3
 8001d8a:	0003      	movs	r3, r0
 8001d8c:	2920      	cmp	r1, #32
 8001d8e:	d004      	beq.n	8001d9a <__aeabi_ddiv+0x40a>
 8001d90:	4658      	mov	r0, fp
 8001d92:	4988      	ldr	r1, [pc, #544]	@ (8001fb4 <__aeabi_ddiv+0x624>)
 8001d94:	4451      	add	r1, sl
 8001d96:	4088      	lsls	r0, r1
 8001d98:	4302      	orrs	r2, r0
 8001d9a:	1e51      	subs	r1, r2, #1
 8001d9c:	418a      	sbcs	r2, r1
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	2307      	movs	r3, #7
 8001da2:	0019      	movs	r1, r3
 8001da4:	2400      	movs	r4, #0
 8001da6:	4011      	ands	r1, r2
 8001da8:	4213      	tst	r3, r2
 8001daa:	d00c      	beq.n	8001dc6 <__aeabi_ddiv+0x436>
 8001dac:	230f      	movs	r3, #15
 8001dae:	4013      	ands	r3, r2
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d100      	bne.n	8001db6 <__aeabi_ddiv+0x426>
 8001db4:	e0f9      	b.n	8001faa <__aeabi_ddiv+0x61a>
 8001db6:	1d11      	adds	r1, r2, #4
 8001db8:	4291      	cmp	r1, r2
 8001dba:	419b      	sbcs	r3, r3
 8001dbc:	000a      	movs	r2, r1
 8001dbe:	425b      	negs	r3, r3
 8001dc0:	0759      	lsls	r1, r3, #29
 8001dc2:	025b      	lsls	r3, r3, #9
 8001dc4:	0b1c      	lsrs	r4, r3, #12
 8001dc6:	08d2      	lsrs	r2, r2, #3
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	4690      	mov	r8, r2
 8001dcc:	2300      	movs	r3, #0
 8001dce:	e63f      	b.n	8001a50 <__aeabi_ddiv+0xc0>
 8001dd0:	2480      	movs	r4, #128	@ 0x80
 8001dd2:	464b      	mov	r3, r9
 8001dd4:	0324      	lsls	r4, r4, #12
 8001dd6:	4223      	tst	r3, r4
 8001dd8:	d009      	beq.n	8001dee <__aeabi_ddiv+0x45e>
 8001dda:	465b      	mov	r3, fp
 8001ddc:	4223      	tst	r3, r4
 8001dde:	d106      	bne.n	8001dee <__aeabi_ddiv+0x45e>
 8001de0:	431c      	orrs	r4, r3
 8001de2:	0324      	lsls	r4, r4, #12
 8001de4:	002e      	movs	r6, r5
 8001de6:	4690      	mov	r8, r2
 8001de8:	4b71      	ldr	r3, [pc, #452]	@ (8001fb0 <__aeabi_ddiv+0x620>)
 8001dea:	0b24      	lsrs	r4, r4, #12
 8001dec:	e630      	b.n	8001a50 <__aeabi_ddiv+0xc0>
 8001dee:	2480      	movs	r4, #128	@ 0x80
 8001df0:	464b      	mov	r3, r9
 8001df2:	0324      	lsls	r4, r4, #12
 8001df4:	431c      	orrs	r4, r3
 8001df6:	0324      	lsls	r4, r4, #12
 8001df8:	9e02      	ldr	r6, [sp, #8]
 8001dfa:	4b6d      	ldr	r3, [pc, #436]	@ (8001fb0 <__aeabi_ddiv+0x620>)
 8001dfc:	0b24      	lsrs	r4, r4, #12
 8001dfe:	e627      	b.n	8001a50 <__aeabi_ddiv+0xc0>
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d100      	bne.n	8001e06 <__aeabi_ddiv+0x476>
 8001e04:	e700      	b.n	8001c08 <__aeabi_ddiv+0x278>
 8001e06:	9800      	ldr	r0, [sp, #0]
 8001e08:	1e51      	subs	r1, r2, #1
 8001e0a:	4684      	mov	ip, r0
 8001e0c:	4464      	add	r4, ip
 8001e0e:	4284      	cmp	r4, r0
 8001e10:	d200      	bcs.n	8001e14 <__aeabi_ddiv+0x484>
 8001e12:	e084      	b.n	8001f1e <__aeabi_ddiv+0x58e>
 8001e14:	42bc      	cmp	r4, r7
 8001e16:	d200      	bcs.n	8001e1a <__aeabi_ddiv+0x48a>
 8001e18:	e0ae      	b.n	8001f78 <__aeabi_ddiv+0x5e8>
 8001e1a:	d100      	bne.n	8001e1e <__aeabi_ddiv+0x48e>
 8001e1c:	e0c1      	b.n	8001fa2 <__aeabi_ddiv+0x612>
 8001e1e:	000a      	movs	r2, r1
 8001e20:	e6f0      	b.n	8001c04 <__aeabi_ddiv+0x274>
 8001e22:	4542      	cmp	r2, r8
 8001e24:	d900      	bls.n	8001e28 <__aeabi_ddiv+0x498>
 8001e26:	e62c      	b.n	8001a82 <__aeabi_ddiv+0xf2>
 8001e28:	464b      	mov	r3, r9
 8001e2a:	07dc      	lsls	r4, r3, #31
 8001e2c:	0858      	lsrs	r0, r3, #1
 8001e2e:	4643      	mov	r3, r8
 8001e30:	085b      	lsrs	r3, r3, #1
 8001e32:	431c      	orrs	r4, r3
 8001e34:	4643      	mov	r3, r8
 8001e36:	07df      	lsls	r7, r3, #31
 8001e38:	e62a      	b.n	8001a90 <__aeabi_ddiv+0x100>
 8001e3a:	f001 f9cd 	bl	80031d8 <__clzsi2>
 8001e3e:	2315      	movs	r3, #21
 8001e40:	469c      	mov	ip, r3
 8001e42:	4484      	add	ip, r0
 8001e44:	0002      	movs	r2, r0
 8001e46:	4663      	mov	r3, ip
 8001e48:	3220      	adds	r2, #32
 8001e4a:	2b1c      	cmp	r3, #28
 8001e4c:	dc00      	bgt.n	8001e50 <__aeabi_ddiv+0x4c0>
 8001e4e:	e72e      	b.n	8001cae <__aeabi_ddiv+0x31e>
 8001e50:	0023      	movs	r3, r4
 8001e52:	3808      	subs	r0, #8
 8001e54:	4083      	lsls	r3, r0
 8001e56:	4699      	mov	r9, r3
 8001e58:	2300      	movs	r3, #0
 8001e5a:	4698      	mov	r8, r3
 8001e5c:	e736      	b.n	8001ccc <__aeabi_ddiv+0x33c>
 8001e5e:	f001 f9bb 	bl	80031d8 <__clzsi2>
 8001e62:	0002      	movs	r2, r0
 8001e64:	0003      	movs	r3, r0
 8001e66:	3215      	adds	r2, #21
 8001e68:	3320      	adds	r3, #32
 8001e6a:	2a1c      	cmp	r2, #28
 8001e6c:	dc00      	bgt.n	8001e70 <__aeabi_ddiv+0x4e0>
 8001e6e:	e6fb      	b.n	8001c68 <__aeabi_ddiv+0x2d8>
 8001e70:	9900      	ldr	r1, [sp, #0]
 8001e72:	3808      	subs	r0, #8
 8001e74:	4081      	lsls	r1, r0
 8001e76:	2200      	movs	r2, #0
 8001e78:	468b      	mov	fp, r1
 8001e7a:	e702      	b.n	8001c82 <__aeabi_ddiv+0x2f2>
 8001e7c:	9900      	ldr	r1, [sp, #0]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	468c      	mov	ip, r1
 8001e82:	4464      	add	r4, ip
 8001e84:	42a1      	cmp	r1, r4
 8001e86:	d900      	bls.n	8001e8a <__aeabi_ddiv+0x4fa>
 8001e88:	e69a      	b.n	8001bc0 <__aeabi_ddiv+0x230>
 8001e8a:	42a2      	cmp	r2, r4
 8001e8c:	d800      	bhi.n	8001e90 <__aeabi_ddiv+0x500>
 8001e8e:	e697      	b.n	8001bc0 <__aeabi_ddiv+0x230>
 8001e90:	1e83      	subs	r3, r0, #2
 8001e92:	4464      	add	r4, ip
 8001e94:	e694      	b.n	8001bc0 <__aeabi_ddiv+0x230>
 8001e96:	46ac      	mov	ip, r5
 8001e98:	4461      	add	r1, ip
 8001e9a:	3f01      	subs	r7, #1
 8001e9c:	428d      	cmp	r5, r1
 8001e9e:	d900      	bls.n	8001ea2 <__aeabi_ddiv+0x512>
 8001ea0:	e680      	b.n	8001ba4 <__aeabi_ddiv+0x214>
 8001ea2:	428a      	cmp	r2, r1
 8001ea4:	d800      	bhi.n	8001ea8 <__aeabi_ddiv+0x518>
 8001ea6:	e67d      	b.n	8001ba4 <__aeabi_ddiv+0x214>
 8001ea8:	1e87      	subs	r7, r0, #2
 8001eaa:	4461      	add	r1, ip
 8001eac:	e67a      	b.n	8001ba4 <__aeabi_ddiv+0x214>
 8001eae:	4285      	cmp	r5, r0
 8001eb0:	d000      	beq.n	8001eb4 <__aeabi_ddiv+0x524>
 8001eb2:	e65f      	b.n	8001b74 <__aeabi_ddiv+0x1e4>
 8001eb4:	45b9      	cmp	r9, r7
 8001eb6:	d900      	bls.n	8001eba <__aeabi_ddiv+0x52a>
 8001eb8:	e65c      	b.n	8001b74 <__aeabi_ddiv+0x1e4>
 8001eba:	e656      	b.n	8001b6a <__aeabi_ddiv+0x1da>
 8001ebc:	42a2      	cmp	r2, r4
 8001ebe:	d800      	bhi.n	8001ec2 <__aeabi_ddiv+0x532>
 8001ec0:	e61a      	b.n	8001af8 <__aeabi_ddiv+0x168>
 8001ec2:	1e83      	subs	r3, r0, #2
 8001ec4:	4464      	add	r4, ip
 8001ec6:	e617      	b.n	8001af8 <__aeabi_ddiv+0x168>
 8001ec8:	428a      	cmp	r2, r1
 8001eca:	d800      	bhi.n	8001ece <__aeabi_ddiv+0x53e>
 8001ecc:	e600      	b.n	8001ad0 <__aeabi_ddiv+0x140>
 8001ece:	46ac      	mov	ip, r5
 8001ed0:	1e83      	subs	r3, r0, #2
 8001ed2:	4698      	mov	r8, r3
 8001ed4:	4461      	add	r1, ip
 8001ed6:	e5fb      	b.n	8001ad0 <__aeabi_ddiv+0x140>
 8001ed8:	4837      	ldr	r0, [pc, #220]	@ (8001fb8 <__aeabi_ddiv+0x628>)
 8001eda:	0014      	movs	r4, r2
 8001edc:	4450      	add	r0, sl
 8001ede:	4082      	lsls	r2, r0
 8001ee0:	465b      	mov	r3, fp
 8001ee2:	0017      	movs	r7, r2
 8001ee4:	4083      	lsls	r3, r0
 8001ee6:	40cc      	lsrs	r4, r1
 8001ee8:	1e7a      	subs	r2, r7, #1
 8001eea:	4197      	sbcs	r7, r2
 8001eec:	4323      	orrs	r3, r4
 8001eee:	433b      	orrs	r3, r7
 8001ef0:	001a      	movs	r2, r3
 8001ef2:	465b      	mov	r3, fp
 8001ef4:	40cb      	lsrs	r3, r1
 8001ef6:	0751      	lsls	r1, r2, #29
 8001ef8:	d009      	beq.n	8001f0e <__aeabi_ddiv+0x57e>
 8001efa:	210f      	movs	r1, #15
 8001efc:	4011      	ands	r1, r2
 8001efe:	2904      	cmp	r1, #4
 8001f00:	d005      	beq.n	8001f0e <__aeabi_ddiv+0x57e>
 8001f02:	1d11      	adds	r1, r2, #4
 8001f04:	4291      	cmp	r1, r2
 8001f06:	4192      	sbcs	r2, r2
 8001f08:	4252      	negs	r2, r2
 8001f0a:	189b      	adds	r3, r3, r2
 8001f0c:	000a      	movs	r2, r1
 8001f0e:	0219      	lsls	r1, r3, #8
 8001f10:	d400      	bmi.n	8001f14 <__aeabi_ddiv+0x584>
 8001f12:	e755      	b.n	8001dc0 <__aeabi_ddiv+0x430>
 8001f14:	2200      	movs	r2, #0
 8001f16:	2301      	movs	r3, #1
 8001f18:	2400      	movs	r4, #0
 8001f1a:	4690      	mov	r8, r2
 8001f1c:	e598      	b.n	8001a50 <__aeabi_ddiv+0xc0>
 8001f1e:	000a      	movs	r2, r1
 8001f20:	42bc      	cmp	r4, r7
 8001f22:	d000      	beq.n	8001f26 <__aeabi_ddiv+0x596>
 8001f24:	e66e      	b.n	8001c04 <__aeabi_ddiv+0x274>
 8001f26:	454b      	cmp	r3, r9
 8001f28:	d000      	beq.n	8001f2c <__aeabi_ddiv+0x59c>
 8001f2a:	e66b      	b.n	8001c04 <__aeabi_ddiv+0x274>
 8001f2c:	e66c      	b.n	8001c08 <__aeabi_ddiv+0x278>
 8001f2e:	4b23      	ldr	r3, [pc, #140]	@ (8001fbc <__aeabi_ddiv+0x62c>)
 8001f30:	4a23      	ldr	r2, [pc, #140]	@ (8001fc0 <__aeabi_ddiv+0x630>)
 8001f32:	4453      	add	r3, sl
 8001f34:	4592      	cmp	sl, r2
 8001f36:	da00      	bge.n	8001f3a <__aeabi_ddiv+0x5aa>
 8001f38:	e718      	b.n	8001d6c <__aeabi_ddiv+0x3dc>
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	4249      	negs	r1, r1
 8001f3e:	1d0a      	adds	r2, r1, #4
 8001f40:	428a      	cmp	r2, r1
 8001f42:	4189      	sbcs	r1, r1
 8001f44:	4249      	negs	r1, r1
 8001f46:	448b      	add	fp, r1
 8001f48:	e666      	b.n	8001c18 <__aeabi_ddiv+0x288>
 8001f4a:	210f      	movs	r1, #15
 8001f4c:	4011      	ands	r1, r2
 8001f4e:	2904      	cmp	r1, #4
 8001f50:	d100      	bne.n	8001f54 <__aeabi_ddiv+0x5c4>
 8001f52:	e661      	b.n	8001c18 <__aeabi_ddiv+0x288>
 8001f54:	0011      	movs	r1, r2
 8001f56:	e7f2      	b.n	8001f3e <__aeabi_ddiv+0x5ae>
 8001f58:	42bc      	cmp	r4, r7
 8001f5a:	d800      	bhi.n	8001f5e <__aeabi_ddiv+0x5ce>
 8001f5c:	e60a      	b.n	8001b74 <__aeabi_ddiv+0x1e4>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	425b      	negs	r3, r3
 8001f62:	469c      	mov	ip, r3
 8001f64:	9900      	ldr	r1, [sp, #0]
 8001f66:	444f      	add	r7, r9
 8001f68:	454f      	cmp	r7, r9
 8001f6a:	419b      	sbcs	r3, r3
 8001f6c:	44e3      	add	fp, ip
 8001f6e:	468c      	mov	ip, r1
 8001f70:	425b      	negs	r3, r3
 8001f72:	4463      	add	r3, ip
 8001f74:	18c0      	adds	r0, r0, r3
 8001f76:	e5ff      	b.n	8001b78 <__aeabi_ddiv+0x1e8>
 8001f78:	4649      	mov	r1, r9
 8001f7a:	9d00      	ldr	r5, [sp, #0]
 8001f7c:	0048      	lsls	r0, r1, #1
 8001f7e:	4548      	cmp	r0, r9
 8001f80:	4189      	sbcs	r1, r1
 8001f82:	46ac      	mov	ip, r5
 8001f84:	4249      	negs	r1, r1
 8001f86:	4461      	add	r1, ip
 8001f88:	4681      	mov	r9, r0
 8001f8a:	3a02      	subs	r2, #2
 8001f8c:	1864      	adds	r4, r4, r1
 8001f8e:	e7c7      	b.n	8001f20 <__aeabi_ddiv+0x590>
 8001f90:	2480      	movs	r4, #128	@ 0x80
 8001f92:	465b      	mov	r3, fp
 8001f94:	0324      	lsls	r4, r4, #12
 8001f96:	431c      	orrs	r4, r3
 8001f98:	0324      	lsls	r4, r4, #12
 8001f9a:	4690      	mov	r8, r2
 8001f9c:	4b04      	ldr	r3, [pc, #16]	@ (8001fb0 <__aeabi_ddiv+0x620>)
 8001f9e:	0b24      	lsrs	r4, r4, #12
 8001fa0:	e556      	b.n	8001a50 <__aeabi_ddiv+0xc0>
 8001fa2:	4599      	cmp	r9, r3
 8001fa4:	d3e8      	bcc.n	8001f78 <__aeabi_ddiv+0x5e8>
 8001fa6:	000a      	movs	r2, r1
 8001fa8:	e7bd      	b.n	8001f26 <__aeabi_ddiv+0x596>
 8001faa:	2300      	movs	r3, #0
 8001fac:	e708      	b.n	8001dc0 <__aeabi_ddiv+0x430>
 8001fae:	46c0      	nop			@ (mov r8, r8)
 8001fb0:	000007ff 	.word	0x000007ff
 8001fb4:	0000043e 	.word	0x0000043e
 8001fb8:	0000041e 	.word	0x0000041e
 8001fbc:	000003ff 	.word	0x000003ff
 8001fc0:	fffffc02 	.word	0xfffffc02

08001fc4 <__eqdf2>:
 8001fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fc6:	4657      	mov	r7, sl
 8001fc8:	46de      	mov	lr, fp
 8001fca:	464e      	mov	r6, r9
 8001fcc:	4645      	mov	r5, r8
 8001fce:	b5e0      	push	{r5, r6, r7, lr}
 8001fd0:	000d      	movs	r5, r1
 8001fd2:	0004      	movs	r4, r0
 8001fd4:	0fe8      	lsrs	r0, r5, #31
 8001fd6:	4683      	mov	fp, r0
 8001fd8:	0309      	lsls	r1, r1, #12
 8001fda:	0fd8      	lsrs	r0, r3, #31
 8001fdc:	0b09      	lsrs	r1, r1, #12
 8001fde:	4682      	mov	sl, r0
 8001fe0:	4819      	ldr	r0, [pc, #100]	@ (8002048 <__eqdf2+0x84>)
 8001fe2:	468c      	mov	ip, r1
 8001fe4:	031f      	lsls	r7, r3, #12
 8001fe6:	0069      	lsls	r1, r5, #1
 8001fe8:	005e      	lsls	r6, r3, #1
 8001fea:	0d49      	lsrs	r1, r1, #21
 8001fec:	0b3f      	lsrs	r7, r7, #12
 8001fee:	0d76      	lsrs	r6, r6, #21
 8001ff0:	4281      	cmp	r1, r0
 8001ff2:	d018      	beq.n	8002026 <__eqdf2+0x62>
 8001ff4:	4286      	cmp	r6, r0
 8001ff6:	d00f      	beq.n	8002018 <__eqdf2+0x54>
 8001ff8:	2001      	movs	r0, #1
 8001ffa:	42b1      	cmp	r1, r6
 8001ffc:	d10d      	bne.n	800201a <__eqdf2+0x56>
 8001ffe:	45bc      	cmp	ip, r7
 8002000:	d10b      	bne.n	800201a <__eqdf2+0x56>
 8002002:	4294      	cmp	r4, r2
 8002004:	d109      	bne.n	800201a <__eqdf2+0x56>
 8002006:	45d3      	cmp	fp, sl
 8002008:	d01c      	beq.n	8002044 <__eqdf2+0x80>
 800200a:	2900      	cmp	r1, #0
 800200c:	d105      	bne.n	800201a <__eqdf2+0x56>
 800200e:	4660      	mov	r0, ip
 8002010:	4320      	orrs	r0, r4
 8002012:	1e43      	subs	r3, r0, #1
 8002014:	4198      	sbcs	r0, r3
 8002016:	e000      	b.n	800201a <__eqdf2+0x56>
 8002018:	2001      	movs	r0, #1
 800201a:	bcf0      	pop	{r4, r5, r6, r7}
 800201c:	46bb      	mov	fp, r7
 800201e:	46b2      	mov	sl, r6
 8002020:	46a9      	mov	r9, r5
 8002022:	46a0      	mov	r8, r4
 8002024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002026:	2001      	movs	r0, #1
 8002028:	428e      	cmp	r6, r1
 800202a:	d1f6      	bne.n	800201a <__eqdf2+0x56>
 800202c:	4661      	mov	r1, ip
 800202e:	4339      	orrs	r1, r7
 8002030:	000f      	movs	r7, r1
 8002032:	4317      	orrs	r7, r2
 8002034:	4327      	orrs	r7, r4
 8002036:	d1f0      	bne.n	800201a <__eqdf2+0x56>
 8002038:	465b      	mov	r3, fp
 800203a:	4652      	mov	r2, sl
 800203c:	1a98      	subs	r0, r3, r2
 800203e:	1e43      	subs	r3, r0, #1
 8002040:	4198      	sbcs	r0, r3
 8002042:	e7ea      	b.n	800201a <__eqdf2+0x56>
 8002044:	2000      	movs	r0, #0
 8002046:	e7e8      	b.n	800201a <__eqdf2+0x56>
 8002048:	000007ff 	.word	0x000007ff

0800204c <__gedf2>:
 800204c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800204e:	4657      	mov	r7, sl
 8002050:	464e      	mov	r6, r9
 8002052:	4645      	mov	r5, r8
 8002054:	46de      	mov	lr, fp
 8002056:	b5e0      	push	{r5, r6, r7, lr}
 8002058:	000d      	movs	r5, r1
 800205a:	030f      	lsls	r7, r1, #12
 800205c:	0b39      	lsrs	r1, r7, #12
 800205e:	b083      	sub	sp, #12
 8002060:	0004      	movs	r4, r0
 8002062:	4680      	mov	r8, r0
 8002064:	9101      	str	r1, [sp, #4]
 8002066:	0058      	lsls	r0, r3, #1
 8002068:	0fe9      	lsrs	r1, r5, #31
 800206a:	4f31      	ldr	r7, [pc, #196]	@ (8002130 <__gedf2+0xe4>)
 800206c:	0d40      	lsrs	r0, r0, #21
 800206e:	468c      	mov	ip, r1
 8002070:	006e      	lsls	r6, r5, #1
 8002072:	0319      	lsls	r1, r3, #12
 8002074:	4682      	mov	sl, r0
 8002076:	4691      	mov	r9, r2
 8002078:	0d76      	lsrs	r6, r6, #21
 800207a:	0b09      	lsrs	r1, r1, #12
 800207c:	0fd8      	lsrs	r0, r3, #31
 800207e:	42be      	cmp	r6, r7
 8002080:	d01f      	beq.n	80020c2 <__gedf2+0x76>
 8002082:	45ba      	cmp	sl, r7
 8002084:	d00f      	beq.n	80020a6 <__gedf2+0x5a>
 8002086:	2e00      	cmp	r6, #0
 8002088:	d12f      	bne.n	80020ea <__gedf2+0x9e>
 800208a:	4655      	mov	r5, sl
 800208c:	9e01      	ldr	r6, [sp, #4]
 800208e:	4334      	orrs	r4, r6
 8002090:	2d00      	cmp	r5, #0
 8002092:	d127      	bne.n	80020e4 <__gedf2+0x98>
 8002094:	430a      	orrs	r2, r1
 8002096:	d03a      	beq.n	800210e <__gedf2+0xc2>
 8002098:	2c00      	cmp	r4, #0
 800209a:	d145      	bne.n	8002128 <__gedf2+0xdc>
 800209c:	2800      	cmp	r0, #0
 800209e:	d11a      	bne.n	80020d6 <__gedf2+0x8a>
 80020a0:	2001      	movs	r0, #1
 80020a2:	4240      	negs	r0, r0
 80020a4:	e017      	b.n	80020d6 <__gedf2+0x8a>
 80020a6:	4311      	orrs	r1, r2
 80020a8:	d13b      	bne.n	8002122 <__gedf2+0xd6>
 80020aa:	2e00      	cmp	r6, #0
 80020ac:	d102      	bne.n	80020b4 <__gedf2+0x68>
 80020ae:	9f01      	ldr	r7, [sp, #4]
 80020b0:	4327      	orrs	r7, r4
 80020b2:	d0f3      	beq.n	800209c <__gedf2+0x50>
 80020b4:	4584      	cmp	ip, r0
 80020b6:	d109      	bne.n	80020cc <__gedf2+0x80>
 80020b8:	4663      	mov	r3, ip
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0f0      	beq.n	80020a0 <__gedf2+0x54>
 80020be:	4660      	mov	r0, ip
 80020c0:	e009      	b.n	80020d6 <__gedf2+0x8a>
 80020c2:	9f01      	ldr	r7, [sp, #4]
 80020c4:	4327      	orrs	r7, r4
 80020c6:	d12c      	bne.n	8002122 <__gedf2+0xd6>
 80020c8:	45b2      	cmp	sl, r6
 80020ca:	d024      	beq.n	8002116 <__gedf2+0xca>
 80020cc:	4663      	mov	r3, ip
 80020ce:	2002      	movs	r0, #2
 80020d0:	3b01      	subs	r3, #1
 80020d2:	4018      	ands	r0, r3
 80020d4:	3801      	subs	r0, #1
 80020d6:	b003      	add	sp, #12
 80020d8:	bcf0      	pop	{r4, r5, r6, r7}
 80020da:	46bb      	mov	fp, r7
 80020dc:	46b2      	mov	sl, r6
 80020de:	46a9      	mov	r9, r5
 80020e0:	46a0      	mov	r8, r4
 80020e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020e4:	2c00      	cmp	r4, #0
 80020e6:	d0d9      	beq.n	800209c <__gedf2+0x50>
 80020e8:	e7e4      	b.n	80020b4 <__gedf2+0x68>
 80020ea:	4654      	mov	r4, sl
 80020ec:	2c00      	cmp	r4, #0
 80020ee:	d0ed      	beq.n	80020cc <__gedf2+0x80>
 80020f0:	4584      	cmp	ip, r0
 80020f2:	d1eb      	bne.n	80020cc <__gedf2+0x80>
 80020f4:	4556      	cmp	r6, sl
 80020f6:	dce9      	bgt.n	80020cc <__gedf2+0x80>
 80020f8:	dbde      	blt.n	80020b8 <__gedf2+0x6c>
 80020fa:	9b01      	ldr	r3, [sp, #4]
 80020fc:	428b      	cmp	r3, r1
 80020fe:	d8e5      	bhi.n	80020cc <__gedf2+0x80>
 8002100:	d1da      	bne.n	80020b8 <__gedf2+0x6c>
 8002102:	45c8      	cmp	r8, r9
 8002104:	d8e2      	bhi.n	80020cc <__gedf2+0x80>
 8002106:	2000      	movs	r0, #0
 8002108:	45c8      	cmp	r8, r9
 800210a:	d2e4      	bcs.n	80020d6 <__gedf2+0x8a>
 800210c:	e7d4      	b.n	80020b8 <__gedf2+0x6c>
 800210e:	2000      	movs	r0, #0
 8002110:	2c00      	cmp	r4, #0
 8002112:	d0e0      	beq.n	80020d6 <__gedf2+0x8a>
 8002114:	e7da      	b.n	80020cc <__gedf2+0x80>
 8002116:	4311      	orrs	r1, r2
 8002118:	d103      	bne.n	8002122 <__gedf2+0xd6>
 800211a:	4584      	cmp	ip, r0
 800211c:	d1d6      	bne.n	80020cc <__gedf2+0x80>
 800211e:	2000      	movs	r0, #0
 8002120:	e7d9      	b.n	80020d6 <__gedf2+0x8a>
 8002122:	2002      	movs	r0, #2
 8002124:	4240      	negs	r0, r0
 8002126:	e7d6      	b.n	80020d6 <__gedf2+0x8a>
 8002128:	4584      	cmp	ip, r0
 800212a:	d0e6      	beq.n	80020fa <__gedf2+0xae>
 800212c:	e7ce      	b.n	80020cc <__gedf2+0x80>
 800212e:	46c0      	nop			@ (mov r8, r8)
 8002130:	000007ff 	.word	0x000007ff

08002134 <__ledf2>:
 8002134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002136:	4657      	mov	r7, sl
 8002138:	464e      	mov	r6, r9
 800213a:	4645      	mov	r5, r8
 800213c:	46de      	mov	lr, fp
 800213e:	b5e0      	push	{r5, r6, r7, lr}
 8002140:	000d      	movs	r5, r1
 8002142:	030f      	lsls	r7, r1, #12
 8002144:	0004      	movs	r4, r0
 8002146:	4680      	mov	r8, r0
 8002148:	0fe8      	lsrs	r0, r5, #31
 800214a:	0b39      	lsrs	r1, r7, #12
 800214c:	4684      	mov	ip, r0
 800214e:	b083      	sub	sp, #12
 8002150:	0058      	lsls	r0, r3, #1
 8002152:	4f30      	ldr	r7, [pc, #192]	@ (8002214 <__ledf2+0xe0>)
 8002154:	0d40      	lsrs	r0, r0, #21
 8002156:	9101      	str	r1, [sp, #4]
 8002158:	031e      	lsls	r6, r3, #12
 800215a:	0069      	lsls	r1, r5, #1
 800215c:	4682      	mov	sl, r0
 800215e:	4691      	mov	r9, r2
 8002160:	0d49      	lsrs	r1, r1, #21
 8002162:	0b36      	lsrs	r6, r6, #12
 8002164:	0fd8      	lsrs	r0, r3, #31
 8002166:	42b9      	cmp	r1, r7
 8002168:	d020      	beq.n	80021ac <__ledf2+0x78>
 800216a:	45ba      	cmp	sl, r7
 800216c:	d00f      	beq.n	800218e <__ledf2+0x5a>
 800216e:	2900      	cmp	r1, #0
 8002170:	d12b      	bne.n	80021ca <__ledf2+0x96>
 8002172:	9901      	ldr	r1, [sp, #4]
 8002174:	430c      	orrs	r4, r1
 8002176:	4651      	mov	r1, sl
 8002178:	2900      	cmp	r1, #0
 800217a:	d137      	bne.n	80021ec <__ledf2+0xb8>
 800217c:	4332      	orrs	r2, r6
 800217e:	d038      	beq.n	80021f2 <__ledf2+0xbe>
 8002180:	2c00      	cmp	r4, #0
 8002182:	d144      	bne.n	800220e <__ledf2+0xda>
 8002184:	2800      	cmp	r0, #0
 8002186:	d119      	bne.n	80021bc <__ledf2+0x88>
 8002188:	2001      	movs	r0, #1
 800218a:	4240      	negs	r0, r0
 800218c:	e016      	b.n	80021bc <__ledf2+0x88>
 800218e:	4316      	orrs	r6, r2
 8002190:	d113      	bne.n	80021ba <__ledf2+0x86>
 8002192:	2900      	cmp	r1, #0
 8002194:	d102      	bne.n	800219c <__ledf2+0x68>
 8002196:	9f01      	ldr	r7, [sp, #4]
 8002198:	4327      	orrs	r7, r4
 800219a:	d0f3      	beq.n	8002184 <__ledf2+0x50>
 800219c:	4584      	cmp	ip, r0
 800219e:	d020      	beq.n	80021e2 <__ledf2+0xae>
 80021a0:	4663      	mov	r3, ip
 80021a2:	2002      	movs	r0, #2
 80021a4:	3b01      	subs	r3, #1
 80021a6:	4018      	ands	r0, r3
 80021a8:	3801      	subs	r0, #1
 80021aa:	e007      	b.n	80021bc <__ledf2+0x88>
 80021ac:	9f01      	ldr	r7, [sp, #4]
 80021ae:	4327      	orrs	r7, r4
 80021b0:	d103      	bne.n	80021ba <__ledf2+0x86>
 80021b2:	458a      	cmp	sl, r1
 80021b4:	d1f4      	bne.n	80021a0 <__ledf2+0x6c>
 80021b6:	4316      	orrs	r6, r2
 80021b8:	d01f      	beq.n	80021fa <__ledf2+0xc6>
 80021ba:	2002      	movs	r0, #2
 80021bc:	b003      	add	sp, #12
 80021be:	bcf0      	pop	{r4, r5, r6, r7}
 80021c0:	46bb      	mov	fp, r7
 80021c2:	46b2      	mov	sl, r6
 80021c4:	46a9      	mov	r9, r5
 80021c6:	46a0      	mov	r8, r4
 80021c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021ca:	4654      	mov	r4, sl
 80021cc:	2c00      	cmp	r4, #0
 80021ce:	d0e7      	beq.n	80021a0 <__ledf2+0x6c>
 80021d0:	4584      	cmp	ip, r0
 80021d2:	d1e5      	bne.n	80021a0 <__ledf2+0x6c>
 80021d4:	4551      	cmp	r1, sl
 80021d6:	dce3      	bgt.n	80021a0 <__ledf2+0x6c>
 80021d8:	db03      	blt.n	80021e2 <__ledf2+0xae>
 80021da:	9b01      	ldr	r3, [sp, #4]
 80021dc:	42b3      	cmp	r3, r6
 80021de:	d8df      	bhi.n	80021a0 <__ledf2+0x6c>
 80021e0:	d00f      	beq.n	8002202 <__ledf2+0xce>
 80021e2:	4663      	mov	r3, ip
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0cf      	beq.n	8002188 <__ledf2+0x54>
 80021e8:	4660      	mov	r0, ip
 80021ea:	e7e7      	b.n	80021bc <__ledf2+0x88>
 80021ec:	2c00      	cmp	r4, #0
 80021ee:	d0c9      	beq.n	8002184 <__ledf2+0x50>
 80021f0:	e7d4      	b.n	800219c <__ledf2+0x68>
 80021f2:	2000      	movs	r0, #0
 80021f4:	2c00      	cmp	r4, #0
 80021f6:	d0e1      	beq.n	80021bc <__ledf2+0x88>
 80021f8:	e7d2      	b.n	80021a0 <__ledf2+0x6c>
 80021fa:	4584      	cmp	ip, r0
 80021fc:	d1d0      	bne.n	80021a0 <__ledf2+0x6c>
 80021fe:	2000      	movs	r0, #0
 8002200:	e7dc      	b.n	80021bc <__ledf2+0x88>
 8002202:	45c8      	cmp	r8, r9
 8002204:	d8cc      	bhi.n	80021a0 <__ledf2+0x6c>
 8002206:	2000      	movs	r0, #0
 8002208:	45c8      	cmp	r8, r9
 800220a:	d2d7      	bcs.n	80021bc <__ledf2+0x88>
 800220c:	e7e9      	b.n	80021e2 <__ledf2+0xae>
 800220e:	4584      	cmp	ip, r0
 8002210:	d0e3      	beq.n	80021da <__ledf2+0xa6>
 8002212:	e7c5      	b.n	80021a0 <__ledf2+0x6c>
 8002214:	000007ff 	.word	0x000007ff

08002218 <__aeabi_dmul>:
 8002218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800221a:	4657      	mov	r7, sl
 800221c:	46de      	mov	lr, fp
 800221e:	464e      	mov	r6, r9
 8002220:	4645      	mov	r5, r8
 8002222:	b5e0      	push	{r5, r6, r7, lr}
 8002224:	001f      	movs	r7, r3
 8002226:	030b      	lsls	r3, r1, #12
 8002228:	0b1b      	lsrs	r3, r3, #12
 800222a:	0016      	movs	r6, r2
 800222c:	469a      	mov	sl, r3
 800222e:	0fca      	lsrs	r2, r1, #31
 8002230:	004b      	lsls	r3, r1, #1
 8002232:	0004      	movs	r4, r0
 8002234:	4693      	mov	fp, r2
 8002236:	b087      	sub	sp, #28
 8002238:	0d5b      	lsrs	r3, r3, #21
 800223a:	d100      	bne.n	800223e <__aeabi_dmul+0x26>
 800223c:	e0d5      	b.n	80023ea <__aeabi_dmul+0x1d2>
 800223e:	4abb      	ldr	r2, [pc, #748]	@ (800252c <__aeabi_dmul+0x314>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d100      	bne.n	8002246 <__aeabi_dmul+0x2e>
 8002244:	e0f8      	b.n	8002438 <__aeabi_dmul+0x220>
 8002246:	4651      	mov	r1, sl
 8002248:	0f42      	lsrs	r2, r0, #29
 800224a:	00c9      	lsls	r1, r1, #3
 800224c:	430a      	orrs	r2, r1
 800224e:	2180      	movs	r1, #128	@ 0x80
 8002250:	0409      	lsls	r1, r1, #16
 8002252:	4311      	orrs	r1, r2
 8002254:	00c2      	lsls	r2, r0, #3
 8002256:	4691      	mov	r9, r2
 8002258:	4ab5      	ldr	r2, [pc, #724]	@ (8002530 <__aeabi_dmul+0x318>)
 800225a:	468a      	mov	sl, r1
 800225c:	189d      	adds	r5, r3, r2
 800225e:	2300      	movs	r3, #0
 8002260:	4698      	mov	r8, r3
 8002262:	9302      	str	r3, [sp, #8]
 8002264:	033c      	lsls	r4, r7, #12
 8002266:	007b      	lsls	r3, r7, #1
 8002268:	0ffa      	lsrs	r2, r7, #31
 800226a:	0030      	movs	r0, r6
 800226c:	0b24      	lsrs	r4, r4, #12
 800226e:	0d5b      	lsrs	r3, r3, #21
 8002270:	9200      	str	r2, [sp, #0]
 8002272:	d100      	bne.n	8002276 <__aeabi_dmul+0x5e>
 8002274:	e096      	b.n	80023a4 <__aeabi_dmul+0x18c>
 8002276:	4aad      	ldr	r2, [pc, #692]	@ (800252c <__aeabi_dmul+0x314>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d031      	beq.n	80022e0 <__aeabi_dmul+0xc8>
 800227c:	0f72      	lsrs	r2, r6, #29
 800227e:	00e4      	lsls	r4, r4, #3
 8002280:	4322      	orrs	r2, r4
 8002282:	2480      	movs	r4, #128	@ 0x80
 8002284:	0424      	lsls	r4, r4, #16
 8002286:	4314      	orrs	r4, r2
 8002288:	4aa9      	ldr	r2, [pc, #676]	@ (8002530 <__aeabi_dmul+0x318>)
 800228a:	00f0      	lsls	r0, r6, #3
 800228c:	4694      	mov	ip, r2
 800228e:	4463      	add	r3, ip
 8002290:	195b      	adds	r3, r3, r5
 8002292:	1c5a      	adds	r2, r3, #1
 8002294:	9201      	str	r2, [sp, #4]
 8002296:	4642      	mov	r2, r8
 8002298:	2600      	movs	r6, #0
 800229a:	2a0a      	cmp	r2, #10
 800229c:	dc42      	bgt.n	8002324 <__aeabi_dmul+0x10c>
 800229e:	465a      	mov	r2, fp
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	404a      	eors	r2, r1
 80022a4:	4693      	mov	fp, r2
 80022a6:	4642      	mov	r2, r8
 80022a8:	2a02      	cmp	r2, #2
 80022aa:	dc32      	bgt.n	8002312 <__aeabi_dmul+0xfa>
 80022ac:	3a01      	subs	r2, #1
 80022ae:	2a01      	cmp	r2, #1
 80022b0:	d900      	bls.n	80022b4 <__aeabi_dmul+0x9c>
 80022b2:	e149      	b.n	8002548 <__aeabi_dmul+0x330>
 80022b4:	2e02      	cmp	r6, #2
 80022b6:	d100      	bne.n	80022ba <__aeabi_dmul+0xa2>
 80022b8:	e0ca      	b.n	8002450 <__aeabi_dmul+0x238>
 80022ba:	2e01      	cmp	r6, #1
 80022bc:	d13d      	bne.n	800233a <__aeabi_dmul+0x122>
 80022be:	2300      	movs	r3, #0
 80022c0:	2400      	movs	r4, #0
 80022c2:	2200      	movs	r2, #0
 80022c4:	0010      	movs	r0, r2
 80022c6:	465a      	mov	r2, fp
 80022c8:	051b      	lsls	r3, r3, #20
 80022ca:	4323      	orrs	r3, r4
 80022cc:	07d2      	lsls	r2, r2, #31
 80022ce:	4313      	orrs	r3, r2
 80022d0:	0019      	movs	r1, r3
 80022d2:	b007      	add	sp, #28
 80022d4:	bcf0      	pop	{r4, r5, r6, r7}
 80022d6:	46bb      	mov	fp, r7
 80022d8:	46b2      	mov	sl, r6
 80022da:	46a9      	mov	r9, r5
 80022dc:	46a0      	mov	r8, r4
 80022de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022e0:	4b92      	ldr	r3, [pc, #584]	@ (800252c <__aeabi_dmul+0x314>)
 80022e2:	4326      	orrs	r6, r4
 80022e4:	18eb      	adds	r3, r5, r3
 80022e6:	2e00      	cmp	r6, #0
 80022e8:	d100      	bne.n	80022ec <__aeabi_dmul+0xd4>
 80022ea:	e0bb      	b.n	8002464 <__aeabi_dmul+0x24c>
 80022ec:	2203      	movs	r2, #3
 80022ee:	4641      	mov	r1, r8
 80022f0:	4311      	orrs	r1, r2
 80022f2:	465a      	mov	r2, fp
 80022f4:	4688      	mov	r8, r1
 80022f6:	9900      	ldr	r1, [sp, #0]
 80022f8:	404a      	eors	r2, r1
 80022fa:	2180      	movs	r1, #128	@ 0x80
 80022fc:	0109      	lsls	r1, r1, #4
 80022fe:	468c      	mov	ip, r1
 8002300:	0029      	movs	r1, r5
 8002302:	4461      	add	r1, ip
 8002304:	9101      	str	r1, [sp, #4]
 8002306:	4641      	mov	r1, r8
 8002308:	290a      	cmp	r1, #10
 800230a:	dd00      	ble.n	800230e <__aeabi_dmul+0xf6>
 800230c:	e233      	b.n	8002776 <__aeabi_dmul+0x55e>
 800230e:	4693      	mov	fp, r2
 8002310:	2603      	movs	r6, #3
 8002312:	4642      	mov	r2, r8
 8002314:	2701      	movs	r7, #1
 8002316:	4097      	lsls	r7, r2
 8002318:	21a6      	movs	r1, #166	@ 0xa6
 800231a:	003a      	movs	r2, r7
 800231c:	00c9      	lsls	r1, r1, #3
 800231e:	400a      	ands	r2, r1
 8002320:	420f      	tst	r7, r1
 8002322:	d031      	beq.n	8002388 <__aeabi_dmul+0x170>
 8002324:	9e02      	ldr	r6, [sp, #8]
 8002326:	2e02      	cmp	r6, #2
 8002328:	d100      	bne.n	800232c <__aeabi_dmul+0x114>
 800232a:	e235      	b.n	8002798 <__aeabi_dmul+0x580>
 800232c:	2e03      	cmp	r6, #3
 800232e:	d100      	bne.n	8002332 <__aeabi_dmul+0x11a>
 8002330:	e1d2      	b.n	80026d8 <__aeabi_dmul+0x4c0>
 8002332:	4654      	mov	r4, sl
 8002334:	4648      	mov	r0, r9
 8002336:	2e01      	cmp	r6, #1
 8002338:	d0c1      	beq.n	80022be <__aeabi_dmul+0xa6>
 800233a:	9a01      	ldr	r2, [sp, #4]
 800233c:	4b7d      	ldr	r3, [pc, #500]	@ (8002534 <__aeabi_dmul+0x31c>)
 800233e:	4694      	mov	ip, r2
 8002340:	4463      	add	r3, ip
 8002342:	2b00      	cmp	r3, #0
 8002344:	dc00      	bgt.n	8002348 <__aeabi_dmul+0x130>
 8002346:	e0c0      	b.n	80024ca <__aeabi_dmul+0x2b2>
 8002348:	0742      	lsls	r2, r0, #29
 800234a:	d009      	beq.n	8002360 <__aeabi_dmul+0x148>
 800234c:	220f      	movs	r2, #15
 800234e:	4002      	ands	r2, r0
 8002350:	2a04      	cmp	r2, #4
 8002352:	d005      	beq.n	8002360 <__aeabi_dmul+0x148>
 8002354:	1d02      	adds	r2, r0, #4
 8002356:	4282      	cmp	r2, r0
 8002358:	4180      	sbcs	r0, r0
 800235a:	4240      	negs	r0, r0
 800235c:	1824      	adds	r4, r4, r0
 800235e:	0010      	movs	r0, r2
 8002360:	01e2      	lsls	r2, r4, #7
 8002362:	d506      	bpl.n	8002372 <__aeabi_dmul+0x15a>
 8002364:	4b74      	ldr	r3, [pc, #464]	@ (8002538 <__aeabi_dmul+0x320>)
 8002366:	9a01      	ldr	r2, [sp, #4]
 8002368:	401c      	ands	r4, r3
 800236a:	2380      	movs	r3, #128	@ 0x80
 800236c:	4694      	mov	ip, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4463      	add	r3, ip
 8002372:	4a72      	ldr	r2, [pc, #456]	@ (800253c <__aeabi_dmul+0x324>)
 8002374:	4293      	cmp	r3, r2
 8002376:	dc6b      	bgt.n	8002450 <__aeabi_dmul+0x238>
 8002378:	0762      	lsls	r2, r4, #29
 800237a:	08c0      	lsrs	r0, r0, #3
 800237c:	0264      	lsls	r4, r4, #9
 800237e:	055b      	lsls	r3, r3, #21
 8002380:	4302      	orrs	r2, r0
 8002382:	0b24      	lsrs	r4, r4, #12
 8002384:	0d5b      	lsrs	r3, r3, #21
 8002386:	e79d      	b.n	80022c4 <__aeabi_dmul+0xac>
 8002388:	2190      	movs	r1, #144	@ 0x90
 800238a:	0089      	lsls	r1, r1, #2
 800238c:	420f      	tst	r7, r1
 800238e:	d163      	bne.n	8002458 <__aeabi_dmul+0x240>
 8002390:	2288      	movs	r2, #136	@ 0x88
 8002392:	423a      	tst	r2, r7
 8002394:	d100      	bne.n	8002398 <__aeabi_dmul+0x180>
 8002396:	e0d7      	b.n	8002548 <__aeabi_dmul+0x330>
 8002398:	9b00      	ldr	r3, [sp, #0]
 800239a:	46a2      	mov	sl, r4
 800239c:	469b      	mov	fp, r3
 800239e:	4681      	mov	r9, r0
 80023a0:	9602      	str	r6, [sp, #8]
 80023a2:	e7bf      	b.n	8002324 <__aeabi_dmul+0x10c>
 80023a4:	0023      	movs	r3, r4
 80023a6:	4333      	orrs	r3, r6
 80023a8:	d100      	bne.n	80023ac <__aeabi_dmul+0x194>
 80023aa:	e07f      	b.n	80024ac <__aeabi_dmul+0x294>
 80023ac:	2c00      	cmp	r4, #0
 80023ae:	d100      	bne.n	80023b2 <__aeabi_dmul+0x19a>
 80023b0:	e1ad      	b.n	800270e <__aeabi_dmul+0x4f6>
 80023b2:	0020      	movs	r0, r4
 80023b4:	f000 ff10 	bl	80031d8 <__clzsi2>
 80023b8:	0002      	movs	r2, r0
 80023ba:	0003      	movs	r3, r0
 80023bc:	3a0b      	subs	r2, #11
 80023be:	201d      	movs	r0, #29
 80023c0:	0019      	movs	r1, r3
 80023c2:	1a82      	subs	r2, r0, r2
 80023c4:	0030      	movs	r0, r6
 80023c6:	3908      	subs	r1, #8
 80023c8:	40d0      	lsrs	r0, r2
 80023ca:	408c      	lsls	r4, r1
 80023cc:	4304      	orrs	r4, r0
 80023ce:	0030      	movs	r0, r6
 80023d0:	4088      	lsls	r0, r1
 80023d2:	4a5b      	ldr	r2, [pc, #364]	@ (8002540 <__aeabi_dmul+0x328>)
 80023d4:	1aeb      	subs	r3, r5, r3
 80023d6:	4694      	mov	ip, r2
 80023d8:	4463      	add	r3, ip
 80023da:	1c5a      	adds	r2, r3, #1
 80023dc:	9201      	str	r2, [sp, #4]
 80023de:	4642      	mov	r2, r8
 80023e0:	2600      	movs	r6, #0
 80023e2:	2a0a      	cmp	r2, #10
 80023e4:	dc00      	bgt.n	80023e8 <__aeabi_dmul+0x1d0>
 80023e6:	e75a      	b.n	800229e <__aeabi_dmul+0x86>
 80023e8:	e79c      	b.n	8002324 <__aeabi_dmul+0x10c>
 80023ea:	4653      	mov	r3, sl
 80023ec:	4303      	orrs	r3, r0
 80023ee:	4699      	mov	r9, r3
 80023f0:	d054      	beq.n	800249c <__aeabi_dmul+0x284>
 80023f2:	4653      	mov	r3, sl
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d100      	bne.n	80023fa <__aeabi_dmul+0x1e2>
 80023f8:	e177      	b.n	80026ea <__aeabi_dmul+0x4d2>
 80023fa:	4650      	mov	r0, sl
 80023fc:	f000 feec 	bl	80031d8 <__clzsi2>
 8002400:	230b      	movs	r3, #11
 8002402:	425b      	negs	r3, r3
 8002404:	469c      	mov	ip, r3
 8002406:	0002      	movs	r2, r0
 8002408:	4484      	add	ip, r0
 800240a:	0011      	movs	r1, r2
 800240c:	4650      	mov	r0, sl
 800240e:	3908      	subs	r1, #8
 8002410:	4088      	lsls	r0, r1
 8002412:	231d      	movs	r3, #29
 8002414:	4680      	mov	r8, r0
 8002416:	4660      	mov	r0, ip
 8002418:	1a1b      	subs	r3, r3, r0
 800241a:	0020      	movs	r0, r4
 800241c:	40d8      	lsrs	r0, r3
 800241e:	0003      	movs	r3, r0
 8002420:	4640      	mov	r0, r8
 8002422:	4303      	orrs	r3, r0
 8002424:	469a      	mov	sl, r3
 8002426:	0023      	movs	r3, r4
 8002428:	408b      	lsls	r3, r1
 800242a:	4699      	mov	r9, r3
 800242c:	2300      	movs	r3, #0
 800242e:	4d44      	ldr	r5, [pc, #272]	@ (8002540 <__aeabi_dmul+0x328>)
 8002430:	4698      	mov	r8, r3
 8002432:	1aad      	subs	r5, r5, r2
 8002434:	9302      	str	r3, [sp, #8]
 8002436:	e715      	b.n	8002264 <__aeabi_dmul+0x4c>
 8002438:	4652      	mov	r2, sl
 800243a:	4302      	orrs	r2, r0
 800243c:	4691      	mov	r9, r2
 800243e:	d126      	bne.n	800248e <__aeabi_dmul+0x276>
 8002440:	2200      	movs	r2, #0
 8002442:	001d      	movs	r5, r3
 8002444:	2302      	movs	r3, #2
 8002446:	4692      	mov	sl, r2
 8002448:	3208      	adds	r2, #8
 800244a:	4690      	mov	r8, r2
 800244c:	9302      	str	r3, [sp, #8]
 800244e:	e709      	b.n	8002264 <__aeabi_dmul+0x4c>
 8002450:	2400      	movs	r4, #0
 8002452:	2200      	movs	r2, #0
 8002454:	4b35      	ldr	r3, [pc, #212]	@ (800252c <__aeabi_dmul+0x314>)
 8002456:	e735      	b.n	80022c4 <__aeabi_dmul+0xac>
 8002458:	2300      	movs	r3, #0
 800245a:	2480      	movs	r4, #128	@ 0x80
 800245c:	469b      	mov	fp, r3
 800245e:	0324      	lsls	r4, r4, #12
 8002460:	4b32      	ldr	r3, [pc, #200]	@ (800252c <__aeabi_dmul+0x314>)
 8002462:	e72f      	b.n	80022c4 <__aeabi_dmul+0xac>
 8002464:	2202      	movs	r2, #2
 8002466:	4641      	mov	r1, r8
 8002468:	4311      	orrs	r1, r2
 800246a:	2280      	movs	r2, #128	@ 0x80
 800246c:	0112      	lsls	r2, r2, #4
 800246e:	4694      	mov	ip, r2
 8002470:	002a      	movs	r2, r5
 8002472:	4462      	add	r2, ip
 8002474:	4688      	mov	r8, r1
 8002476:	9201      	str	r2, [sp, #4]
 8002478:	290a      	cmp	r1, #10
 800247a:	dd00      	ble.n	800247e <__aeabi_dmul+0x266>
 800247c:	e752      	b.n	8002324 <__aeabi_dmul+0x10c>
 800247e:	465a      	mov	r2, fp
 8002480:	2000      	movs	r0, #0
 8002482:	9900      	ldr	r1, [sp, #0]
 8002484:	0004      	movs	r4, r0
 8002486:	404a      	eors	r2, r1
 8002488:	4693      	mov	fp, r2
 800248a:	2602      	movs	r6, #2
 800248c:	e70b      	b.n	80022a6 <__aeabi_dmul+0x8e>
 800248e:	220c      	movs	r2, #12
 8002490:	001d      	movs	r5, r3
 8002492:	2303      	movs	r3, #3
 8002494:	4681      	mov	r9, r0
 8002496:	4690      	mov	r8, r2
 8002498:	9302      	str	r3, [sp, #8]
 800249a:	e6e3      	b.n	8002264 <__aeabi_dmul+0x4c>
 800249c:	2300      	movs	r3, #0
 800249e:	469a      	mov	sl, r3
 80024a0:	3304      	adds	r3, #4
 80024a2:	4698      	mov	r8, r3
 80024a4:	3b03      	subs	r3, #3
 80024a6:	2500      	movs	r5, #0
 80024a8:	9302      	str	r3, [sp, #8]
 80024aa:	e6db      	b.n	8002264 <__aeabi_dmul+0x4c>
 80024ac:	4642      	mov	r2, r8
 80024ae:	3301      	adds	r3, #1
 80024b0:	431a      	orrs	r2, r3
 80024b2:	002b      	movs	r3, r5
 80024b4:	4690      	mov	r8, r2
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	9201      	str	r2, [sp, #4]
 80024ba:	4642      	mov	r2, r8
 80024bc:	2400      	movs	r4, #0
 80024be:	2000      	movs	r0, #0
 80024c0:	2601      	movs	r6, #1
 80024c2:	2a0a      	cmp	r2, #10
 80024c4:	dc00      	bgt.n	80024c8 <__aeabi_dmul+0x2b0>
 80024c6:	e6ea      	b.n	800229e <__aeabi_dmul+0x86>
 80024c8:	e72c      	b.n	8002324 <__aeabi_dmul+0x10c>
 80024ca:	2201      	movs	r2, #1
 80024cc:	1ad2      	subs	r2, r2, r3
 80024ce:	2a38      	cmp	r2, #56	@ 0x38
 80024d0:	dd00      	ble.n	80024d4 <__aeabi_dmul+0x2bc>
 80024d2:	e6f4      	b.n	80022be <__aeabi_dmul+0xa6>
 80024d4:	2a1f      	cmp	r2, #31
 80024d6:	dc00      	bgt.n	80024da <__aeabi_dmul+0x2c2>
 80024d8:	e12a      	b.n	8002730 <__aeabi_dmul+0x518>
 80024da:	211f      	movs	r1, #31
 80024dc:	4249      	negs	r1, r1
 80024de:	1acb      	subs	r3, r1, r3
 80024e0:	0021      	movs	r1, r4
 80024e2:	40d9      	lsrs	r1, r3
 80024e4:	000b      	movs	r3, r1
 80024e6:	2a20      	cmp	r2, #32
 80024e8:	d005      	beq.n	80024f6 <__aeabi_dmul+0x2de>
 80024ea:	4a16      	ldr	r2, [pc, #88]	@ (8002544 <__aeabi_dmul+0x32c>)
 80024ec:	9d01      	ldr	r5, [sp, #4]
 80024ee:	4694      	mov	ip, r2
 80024f0:	4465      	add	r5, ip
 80024f2:	40ac      	lsls	r4, r5
 80024f4:	4320      	orrs	r0, r4
 80024f6:	1e42      	subs	r2, r0, #1
 80024f8:	4190      	sbcs	r0, r2
 80024fa:	4318      	orrs	r0, r3
 80024fc:	2307      	movs	r3, #7
 80024fe:	0019      	movs	r1, r3
 8002500:	2400      	movs	r4, #0
 8002502:	4001      	ands	r1, r0
 8002504:	4203      	tst	r3, r0
 8002506:	d00c      	beq.n	8002522 <__aeabi_dmul+0x30a>
 8002508:	230f      	movs	r3, #15
 800250a:	4003      	ands	r3, r0
 800250c:	2b04      	cmp	r3, #4
 800250e:	d100      	bne.n	8002512 <__aeabi_dmul+0x2fa>
 8002510:	e140      	b.n	8002794 <__aeabi_dmul+0x57c>
 8002512:	1d03      	adds	r3, r0, #4
 8002514:	4283      	cmp	r3, r0
 8002516:	41a4      	sbcs	r4, r4
 8002518:	0018      	movs	r0, r3
 800251a:	4264      	negs	r4, r4
 800251c:	0761      	lsls	r1, r4, #29
 800251e:	0264      	lsls	r4, r4, #9
 8002520:	0b24      	lsrs	r4, r4, #12
 8002522:	08c2      	lsrs	r2, r0, #3
 8002524:	2300      	movs	r3, #0
 8002526:	430a      	orrs	r2, r1
 8002528:	e6cc      	b.n	80022c4 <__aeabi_dmul+0xac>
 800252a:	46c0      	nop			@ (mov r8, r8)
 800252c:	000007ff 	.word	0x000007ff
 8002530:	fffffc01 	.word	0xfffffc01
 8002534:	000003ff 	.word	0x000003ff
 8002538:	feffffff 	.word	0xfeffffff
 800253c:	000007fe 	.word	0x000007fe
 8002540:	fffffc0d 	.word	0xfffffc0d
 8002544:	0000043e 	.word	0x0000043e
 8002548:	4649      	mov	r1, r9
 800254a:	464a      	mov	r2, r9
 800254c:	0409      	lsls	r1, r1, #16
 800254e:	0c09      	lsrs	r1, r1, #16
 8002550:	000d      	movs	r5, r1
 8002552:	0c16      	lsrs	r6, r2, #16
 8002554:	0c02      	lsrs	r2, r0, #16
 8002556:	0400      	lsls	r0, r0, #16
 8002558:	0c00      	lsrs	r0, r0, #16
 800255a:	4345      	muls	r5, r0
 800255c:	46ac      	mov	ip, r5
 800255e:	0005      	movs	r5, r0
 8002560:	4375      	muls	r5, r6
 8002562:	46a8      	mov	r8, r5
 8002564:	0015      	movs	r5, r2
 8002566:	000f      	movs	r7, r1
 8002568:	4375      	muls	r5, r6
 800256a:	9200      	str	r2, [sp, #0]
 800256c:	9502      	str	r5, [sp, #8]
 800256e:	002a      	movs	r2, r5
 8002570:	9d00      	ldr	r5, [sp, #0]
 8002572:	436f      	muls	r7, r5
 8002574:	4665      	mov	r5, ip
 8002576:	0c2d      	lsrs	r5, r5, #16
 8002578:	46a9      	mov	r9, r5
 800257a:	4447      	add	r7, r8
 800257c:	444f      	add	r7, r9
 800257e:	45b8      	cmp	r8, r7
 8002580:	d905      	bls.n	800258e <__aeabi_dmul+0x376>
 8002582:	0015      	movs	r5, r2
 8002584:	2280      	movs	r2, #128	@ 0x80
 8002586:	0252      	lsls	r2, r2, #9
 8002588:	4690      	mov	r8, r2
 800258a:	4445      	add	r5, r8
 800258c:	9502      	str	r5, [sp, #8]
 800258e:	0c3d      	lsrs	r5, r7, #16
 8002590:	9503      	str	r5, [sp, #12]
 8002592:	4665      	mov	r5, ip
 8002594:	042d      	lsls	r5, r5, #16
 8002596:	043f      	lsls	r7, r7, #16
 8002598:	0c2d      	lsrs	r5, r5, #16
 800259a:	46ac      	mov	ip, r5
 800259c:	003d      	movs	r5, r7
 800259e:	4465      	add	r5, ip
 80025a0:	9504      	str	r5, [sp, #16]
 80025a2:	0c25      	lsrs	r5, r4, #16
 80025a4:	0424      	lsls	r4, r4, #16
 80025a6:	0c24      	lsrs	r4, r4, #16
 80025a8:	46ac      	mov	ip, r5
 80025aa:	0025      	movs	r5, r4
 80025ac:	4375      	muls	r5, r6
 80025ae:	46a8      	mov	r8, r5
 80025b0:	4665      	mov	r5, ip
 80025b2:	000f      	movs	r7, r1
 80025b4:	4369      	muls	r1, r5
 80025b6:	4441      	add	r1, r8
 80025b8:	4689      	mov	r9, r1
 80025ba:	4367      	muls	r7, r4
 80025bc:	0c39      	lsrs	r1, r7, #16
 80025be:	4449      	add	r1, r9
 80025c0:	436e      	muls	r6, r5
 80025c2:	4588      	cmp	r8, r1
 80025c4:	d903      	bls.n	80025ce <__aeabi_dmul+0x3b6>
 80025c6:	2280      	movs	r2, #128	@ 0x80
 80025c8:	0252      	lsls	r2, r2, #9
 80025ca:	4690      	mov	r8, r2
 80025cc:	4446      	add	r6, r8
 80025ce:	0c0d      	lsrs	r5, r1, #16
 80025d0:	46a8      	mov	r8, r5
 80025d2:	0035      	movs	r5, r6
 80025d4:	4445      	add	r5, r8
 80025d6:	9505      	str	r5, [sp, #20]
 80025d8:	9d03      	ldr	r5, [sp, #12]
 80025da:	043f      	lsls	r7, r7, #16
 80025dc:	46a8      	mov	r8, r5
 80025de:	0c3f      	lsrs	r7, r7, #16
 80025e0:	0409      	lsls	r1, r1, #16
 80025e2:	19c9      	adds	r1, r1, r7
 80025e4:	4488      	add	r8, r1
 80025e6:	4645      	mov	r5, r8
 80025e8:	9503      	str	r5, [sp, #12]
 80025ea:	4655      	mov	r5, sl
 80025ec:	042e      	lsls	r6, r5, #16
 80025ee:	0c36      	lsrs	r6, r6, #16
 80025f0:	0c2f      	lsrs	r7, r5, #16
 80025f2:	0035      	movs	r5, r6
 80025f4:	4345      	muls	r5, r0
 80025f6:	4378      	muls	r0, r7
 80025f8:	4681      	mov	r9, r0
 80025fa:	0038      	movs	r0, r7
 80025fc:	46a8      	mov	r8, r5
 80025fe:	0c2d      	lsrs	r5, r5, #16
 8002600:	46aa      	mov	sl, r5
 8002602:	9a00      	ldr	r2, [sp, #0]
 8002604:	4350      	muls	r0, r2
 8002606:	4372      	muls	r2, r6
 8002608:	444a      	add	r2, r9
 800260a:	4452      	add	r2, sl
 800260c:	4591      	cmp	r9, r2
 800260e:	d903      	bls.n	8002618 <__aeabi_dmul+0x400>
 8002610:	2580      	movs	r5, #128	@ 0x80
 8002612:	026d      	lsls	r5, r5, #9
 8002614:	46a9      	mov	r9, r5
 8002616:	4448      	add	r0, r9
 8002618:	0c15      	lsrs	r5, r2, #16
 800261a:	46a9      	mov	r9, r5
 800261c:	4645      	mov	r5, r8
 800261e:	042d      	lsls	r5, r5, #16
 8002620:	0c2d      	lsrs	r5, r5, #16
 8002622:	46a8      	mov	r8, r5
 8002624:	4665      	mov	r5, ip
 8002626:	437d      	muls	r5, r7
 8002628:	0412      	lsls	r2, r2, #16
 800262a:	4448      	add	r0, r9
 800262c:	4490      	add	r8, r2
 800262e:	46a9      	mov	r9, r5
 8002630:	0032      	movs	r2, r6
 8002632:	4665      	mov	r5, ip
 8002634:	4362      	muls	r2, r4
 8002636:	436e      	muls	r6, r5
 8002638:	437c      	muls	r4, r7
 800263a:	0c17      	lsrs	r7, r2, #16
 800263c:	1936      	adds	r6, r6, r4
 800263e:	19bf      	adds	r7, r7, r6
 8002640:	42bc      	cmp	r4, r7
 8002642:	d903      	bls.n	800264c <__aeabi_dmul+0x434>
 8002644:	2480      	movs	r4, #128	@ 0x80
 8002646:	0264      	lsls	r4, r4, #9
 8002648:	46a4      	mov	ip, r4
 800264a:	44e1      	add	r9, ip
 800264c:	9c02      	ldr	r4, [sp, #8]
 800264e:	9e03      	ldr	r6, [sp, #12]
 8002650:	46a4      	mov	ip, r4
 8002652:	9d05      	ldr	r5, [sp, #20]
 8002654:	4466      	add	r6, ip
 8002656:	428e      	cmp	r6, r1
 8002658:	4189      	sbcs	r1, r1
 800265a:	46ac      	mov	ip, r5
 800265c:	0412      	lsls	r2, r2, #16
 800265e:	043c      	lsls	r4, r7, #16
 8002660:	0c12      	lsrs	r2, r2, #16
 8002662:	18a2      	adds	r2, r4, r2
 8002664:	4462      	add	r2, ip
 8002666:	4249      	negs	r1, r1
 8002668:	1854      	adds	r4, r2, r1
 800266a:	4446      	add	r6, r8
 800266c:	46a4      	mov	ip, r4
 800266e:	4546      	cmp	r6, r8
 8002670:	41a4      	sbcs	r4, r4
 8002672:	4682      	mov	sl, r0
 8002674:	4264      	negs	r4, r4
 8002676:	46a0      	mov	r8, r4
 8002678:	42aa      	cmp	r2, r5
 800267a:	4192      	sbcs	r2, r2
 800267c:	458c      	cmp	ip, r1
 800267e:	4189      	sbcs	r1, r1
 8002680:	44e2      	add	sl, ip
 8002682:	44d0      	add	r8, sl
 8002684:	4249      	negs	r1, r1
 8002686:	4252      	negs	r2, r2
 8002688:	430a      	orrs	r2, r1
 800268a:	45a0      	cmp	r8, r4
 800268c:	41a4      	sbcs	r4, r4
 800268e:	4582      	cmp	sl, r0
 8002690:	4189      	sbcs	r1, r1
 8002692:	4264      	negs	r4, r4
 8002694:	4249      	negs	r1, r1
 8002696:	430c      	orrs	r4, r1
 8002698:	4641      	mov	r1, r8
 800269a:	0c3f      	lsrs	r7, r7, #16
 800269c:	19d2      	adds	r2, r2, r7
 800269e:	1912      	adds	r2, r2, r4
 80026a0:	0dcc      	lsrs	r4, r1, #23
 80026a2:	9904      	ldr	r1, [sp, #16]
 80026a4:	0270      	lsls	r0, r6, #9
 80026a6:	4308      	orrs	r0, r1
 80026a8:	1e41      	subs	r1, r0, #1
 80026aa:	4188      	sbcs	r0, r1
 80026ac:	4641      	mov	r1, r8
 80026ae:	444a      	add	r2, r9
 80026b0:	0df6      	lsrs	r6, r6, #23
 80026b2:	0252      	lsls	r2, r2, #9
 80026b4:	4330      	orrs	r0, r6
 80026b6:	0249      	lsls	r1, r1, #9
 80026b8:	4314      	orrs	r4, r2
 80026ba:	4308      	orrs	r0, r1
 80026bc:	01d2      	lsls	r2, r2, #7
 80026be:	d535      	bpl.n	800272c <__aeabi_dmul+0x514>
 80026c0:	2201      	movs	r2, #1
 80026c2:	0843      	lsrs	r3, r0, #1
 80026c4:	4002      	ands	r2, r0
 80026c6:	4313      	orrs	r3, r2
 80026c8:	07e0      	lsls	r0, r4, #31
 80026ca:	4318      	orrs	r0, r3
 80026cc:	0864      	lsrs	r4, r4, #1
 80026ce:	e634      	b.n	800233a <__aeabi_dmul+0x122>
 80026d0:	9b00      	ldr	r3, [sp, #0]
 80026d2:	46a2      	mov	sl, r4
 80026d4:	469b      	mov	fp, r3
 80026d6:	4681      	mov	r9, r0
 80026d8:	2480      	movs	r4, #128	@ 0x80
 80026da:	4653      	mov	r3, sl
 80026dc:	0324      	lsls	r4, r4, #12
 80026de:	431c      	orrs	r4, r3
 80026e0:	0324      	lsls	r4, r4, #12
 80026e2:	464a      	mov	r2, r9
 80026e4:	4b2e      	ldr	r3, [pc, #184]	@ (80027a0 <__aeabi_dmul+0x588>)
 80026e6:	0b24      	lsrs	r4, r4, #12
 80026e8:	e5ec      	b.n	80022c4 <__aeabi_dmul+0xac>
 80026ea:	f000 fd75 	bl	80031d8 <__clzsi2>
 80026ee:	2315      	movs	r3, #21
 80026f0:	469c      	mov	ip, r3
 80026f2:	4484      	add	ip, r0
 80026f4:	0002      	movs	r2, r0
 80026f6:	4663      	mov	r3, ip
 80026f8:	3220      	adds	r2, #32
 80026fa:	2b1c      	cmp	r3, #28
 80026fc:	dc00      	bgt.n	8002700 <__aeabi_dmul+0x4e8>
 80026fe:	e684      	b.n	800240a <__aeabi_dmul+0x1f2>
 8002700:	2300      	movs	r3, #0
 8002702:	4699      	mov	r9, r3
 8002704:	0023      	movs	r3, r4
 8002706:	3808      	subs	r0, #8
 8002708:	4083      	lsls	r3, r0
 800270a:	469a      	mov	sl, r3
 800270c:	e68e      	b.n	800242c <__aeabi_dmul+0x214>
 800270e:	f000 fd63 	bl	80031d8 <__clzsi2>
 8002712:	0002      	movs	r2, r0
 8002714:	0003      	movs	r3, r0
 8002716:	3215      	adds	r2, #21
 8002718:	3320      	adds	r3, #32
 800271a:	2a1c      	cmp	r2, #28
 800271c:	dc00      	bgt.n	8002720 <__aeabi_dmul+0x508>
 800271e:	e64e      	b.n	80023be <__aeabi_dmul+0x1a6>
 8002720:	0002      	movs	r2, r0
 8002722:	0034      	movs	r4, r6
 8002724:	3a08      	subs	r2, #8
 8002726:	2000      	movs	r0, #0
 8002728:	4094      	lsls	r4, r2
 800272a:	e652      	b.n	80023d2 <__aeabi_dmul+0x1ba>
 800272c:	9301      	str	r3, [sp, #4]
 800272e:	e604      	b.n	800233a <__aeabi_dmul+0x122>
 8002730:	4b1c      	ldr	r3, [pc, #112]	@ (80027a4 <__aeabi_dmul+0x58c>)
 8002732:	0021      	movs	r1, r4
 8002734:	469c      	mov	ip, r3
 8002736:	0003      	movs	r3, r0
 8002738:	9d01      	ldr	r5, [sp, #4]
 800273a:	40d3      	lsrs	r3, r2
 800273c:	4465      	add	r5, ip
 800273e:	40a9      	lsls	r1, r5
 8002740:	4319      	orrs	r1, r3
 8002742:	0003      	movs	r3, r0
 8002744:	40ab      	lsls	r3, r5
 8002746:	1e58      	subs	r0, r3, #1
 8002748:	4183      	sbcs	r3, r0
 800274a:	4319      	orrs	r1, r3
 800274c:	0008      	movs	r0, r1
 800274e:	40d4      	lsrs	r4, r2
 8002750:	074b      	lsls	r3, r1, #29
 8002752:	d009      	beq.n	8002768 <__aeabi_dmul+0x550>
 8002754:	230f      	movs	r3, #15
 8002756:	400b      	ands	r3, r1
 8002758:	2b04      	cmp	r3, #4
 800275a:	d005      	beq.n	8002768 <__aeabi_dmul+0x550>
 800275c:	1d0b      	adds	r3, r1, #4
 800275e:	428b      	cmp	r3, r1
 8002760:	4180      	sbcs	r0, r0
 8002762:	4240      	negs	r0, r0
 8002764:	1824      	adds	r4, r4, r0
 8002766:	0018      	movs	r0, r3
 8002768:	0223      	lsls	r3, r4, #8
 800276a:	d400      	bmi.n	800276e <__aeabi_dmul+0x556>
 800276c:	e6d6      	b.n	800251c <__aeabi_dmul+0x304>
 800276e:	2301      	movs	r3, #1
 8002770:	2400      	movs	r4, #0
 8002772:	2200      	movs	r2, #0
 8002774:	e5a6      	b.n	80022c4 <__aeabi_dmul+0xac>
 8002776:	290f      	cmp	r1, #15
 8002778:	d1aa      	bne.n	80026d0 <__aeabi_dmul+0x4b8>
 800277a:	2380      	movs	r3, #128	@ 0x80
 800277c:	4652      	mov	r2, sl
 800277e:	031b      	lsls	r3, r3, #12
 8002780:	421a      	tst	r2, r3
 8002782:	d0a9      	beq.n	80026d8 <__aeabi_dmul+0x4c0>
 8002784:	421c      	tst	r4, r3
 8002786:	d1a7      	bne.n	80026d8 <__aeabi_dmul+0x4c0>
 8002788:	431c      	orrs	r4, r3
 800278a:	9b00      	ldr	r3, [sp, #0]
 800278c:	0002      	movs	r2, r0
 800278e:	469b      	mov	fp, r3
 8002790:	4b03      	ldr	r3, [pc, #12]	@ (80027a0 <__aeabi_dmul+0x588>)
 8002792:	e597      	b.n	80022c4 <__aeabi_dmul+0xac>
 8002794:	2400      	movs	r4, #0
 8002796:	e6c1      	b.n	800251c <__aeabi_dmul+0x304>
 8002798:	2400      	movs	r4, #0
 800279a:	4b01      	ldr	r3, [pc, #4]	@ (80027a0 <__aeabi_dmul+0x588>)
 800279c:	0022      	movs	r2, r4
 800279e:	e591      	b.n	80022c4 <__aeabi_dmul+0xac>
 80027a0:	000007ff 	.word	0x000007ff
 80027a4:	0000041e 	.word	0x0000041e

080027a8 <__aeabi_dsub>:
 80027a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027aa:	464e      	mov	r6, r9
 80027ac:	4645      	mov	r5, r8
 80027ae:	46de      	mov	lr, fp
 80027b0:	4657      	mov	r7, sl
 80027b2:	b5e0      	push	{r5, r6, r7, lr}
 80027b4:	b085      	sub	sp, #20
 80027b6:	9000      	str	r0, [sp, #0]
 80027b8:	9101      	str	r1, [sp, #4]
 80027ba:	030c      	lsls	r4, r1, #12
 80027bc:	004f      	lsls	r7, r1, #1
 80027be:	0fce      	lsrs	r6, r1, #31
 80027c0:	0a61      	lsrs	r1, r4, #9
 80027c2:	9c00      	ldr	r4, [sp, #0]
 80027c4:	46b0      	mov	r8, r6
 80027c6:	0f64      	lsrs	r4, r4, #29
 80027c8:	430c      	orrs	r4, r1
 80027ca:	9900      	ldr	r1, [sp, #0]
 80027cc:	0d7f      	lsrs	r7, r7, #21
 80027ce:	00c8      	lsls	r0, r1, #3
 80027d0:	0011      	movs	r1, r2
 80027d2:	001a      	movs	r2, r3
 80027d4:	031b      	lsls	r3, r3, #12
 80027d6:	469c      	mov	ip, r3
 80027d8:	9100      	str	r1, [sp, #0]
 80027da:	9201      	str	r2, [sp, #4]
 80027dc:	0051      	lsls	r1, r2, #1
 80027de:	0d4b      	lsrs	r3, r1, #21
 80027e0:	4699      	mov	r9, r3
 80027e2:	9b01      	ldr	r3, [sp, #4]
 80027e4:	9d00      	ldr	r5, [sp, #0]
 80027e6:	0fd9      	lsrs	r1, r3, #31
 80027e8:	4663      	mov	r3, ip
 80027ea:	0f6a      	lsrs	r2, r5, #29
 80027ec:	0a5b      	lsrs	r3, r3, #9
 80027ee:	4313      	orrs	r3, r2
 80027f0:	00ea      	lsls	r2, r5, #3
 80027f2:	4694      	mov	ip, r2
 80027f4:	4693      	mov	fp, r2
 80027f6:	4ac1      	ldr	r2, [pc, #772]	@ (8002afc <__aeabi_dsub+0x354>)
 80027f8:	9003      	str	r0, [sp, #12]
 80027fa:	9302      	str	r3, [sp, #8]
 80027fc:	4591      	cmp	r9, r2
 80027fe:	d100      	bne.n	8002802 <__aeabi_dsub+0x5a>
 8002800:	e0cd      	b.n	800299e <__aeabi_dsub+0x1f6>
 8002802:	2501      	movs	r5, #1
 8002804:	4069      	eors	r1, r5
 8002806:	464d      	mov	r5, r9
 8002808:	1b7d      	subs	r5, r7, r5
 800280a:	46aa      	mov	sl, r5
 800280c:	428e      	cmp	r6, r1
 800280e:	d100      	bne.n	8002812 <__aeabi_dsub+0x6a>
 8002810:	e080      	b.n	8002914 <__aeabi_dsub+0x16c>
 8002812:	2d00      	cmp	r5, #0
 8002814:	dc00      	bgt.n	8002818 <__aeabi_dsub+0x70>
 8002816:	e335      	b.n	8002e84 <__aeabi_dsub+0x6dc>
 8002818:	4649      	mov	r1, r9
 800281a:	2900      	cmp	r1, #0
 800281c:	d100      	bne.n	8002820 <__aeabi_dsub+0x78>
 800281e:	e0df      	b.n	80029e0 <__aeabi_dsub+0x238>
 8002820:	4297      	cmp	r7, r2
 8002822:	d100      	bne.n	8002826 <__aeabi_dsub+0x7e>
 8002824:	e194      	b.n	8002b50 <__aeabi_dsub+0x3a8>
 8002826:	4652      	mov	r2, sl
 8002828:	2501      	movs	r5, #1
 800282a:	2a38      	cmp	r2, #56	@ 0x38
 800282c:	dc19      	bgt.n	8002862 <__aeabi_dsub+0xba>
 800282e:	2280      	movs	r2, #128	@ 0x80
 8002830:	9b02      	ldr	r3, [sp, #8]
 8002832:	0412      	lsls	r2, r2, #16
 8002834:	4313      	orrs	r3, r2
 8002836:	9302      	str	r3, [sp, #8]
 8002838:	4652      	mov	r2, sl
 800283a:	2a1f      	cmp	r2, #31
 800283c:	dd00      	ble.n	8002840 <__aeabi_dsub+0x98>
 800283e:	e1e3      	b.n	8002c08 <__aeabi_dsub+0x460>
 8002840:	4653      	mov	r3, sl
 8002842:	2220      	movs	r2, #32
 8002844:	4661      	mov	r1, ip
 8002846:	9d02      	ldr	r5, [sp, #8]
 8002848:	1ad2      	subs	r2, r2, r3
 800284a:	4095      	lsls	r5, r2
 800284c:	40d9      	lsrs	r1, r3
 800284e:	430d      	orrs	r5, r1
 8002850:	4661      	mov	r1, ip
 8002852:	4091      	lsls	r1, r2
 8002854:	000a      	movs	r2, r1
 8002856:	1e51      	subs	r1, r2, #1
 8002858:	418a      	sbcs	r2, r1
 800285a:	4315      	orrs	r5, r2
 800285c:	9a02      	ldr	r2, [sp, #8]
 800285e:	40da      	lsrs	r2, r3
 8002860:	1aa4      	subs	r4, r4, r2
 8002862:	1b45      	subs	r5, r0, r5
 8002864:	42a8      	cmp	r0, r5
 8002866:	4180      	sbcs	r0, r0
 8002868:	4240      	negs	r0, r0
 800286a:	1a24      	subs	r4, r4, r0
 800286c:	0223      	lsls	r3, r4, #8
 800286e:	d400      	bmi.n	8002872 <__aeabi_dsub+0xca>
 8002870:	e13d      	b.n	8002aee <__aeabi_dsub+0x346>
 8002872:	0264      	lsls	r4, r4, #9
 8002874:	0a64      	lsrs	r4, r4, #9
 8002876:	2c00      	cmp	r4, #0
 8002878:	d100      	bne.n	800287c <__aeabi_dsub+0xd4>
 800287a:	e147      	b.n	8002b0c <__aeabi_dsub+0x364>
 800287c:	0020      	movs	r0, r4
 800287e:	f000 fcab 	bl	80031d8 <__clzsi2>
 8002882:	0003      	movs	r3, r0
 8002884:	3b08      	subs	r3, #8
 8002886:	2120      	movs	r1, #32
 8002888:	0028      	movs	r0, r5
 800288a:	1aca      	subs	r2, r1, r3
 800288c:	40d0      	lsrs	r0, r2
 800288e:	409c      	lsls	r4, r3
 8002890:	0002      	movs	r2, r0
 8002892:	409d      	lsls	r5, r3
 8002894:	4322      	orrs	r2, r4
 8002896:	429f      	cmp	r7, r3
 8002898:	dd00      	ble.n	800289c <__aeabi_dsub+0xf4>
 800289a:	e177      	b.n	8002b8c <__aeabi_dsub+0x3e4>
 800289c:	1bd8      	subs	r0, r3, r7
 800289e:	3001      	adds	r0, #1
 80028a0:	1a09      	subs	r1, r1, r0
 80028a2:	002c      	movs	r4, r5
 80028a4:	408d      	lsls	r5, r1
 80028a6:	40c4      	lsrs	r4, r0
 80028a8:	1e6b      	subs	r3, r5, #1
 80028aa:	419d      	sbcs	r5, r3
 80028ac:	0013      	movs	r3, r2
 80028ae:	40c2      	lsrs	r2, r0
 80028b0:	408b      	lsls	r3, r1
 80028b2:	4325      	orrs	r5, r4
 80028b4:	2700      	movs	r7, #0
 80028b6:	0014      	movs	r4, r2
 80028b8:	431d      	orrs	r5, r3
 80028ba:	076b      	lsls	r3, r5, #29
 80028bc:	d009      	beq.n	80028d2 <__aeabi_dsub+0x12a>
 80028be:	230f      	movs	r3, #15
 80028c0:	402b      	ands	r3, r5
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d005      	beq.n	80028d2 <__aeabi_dsub+0x12a>
 80028c6:	1d2b      	adds	r3, r5, #4
 80028c8:	42ab      	cmp	r3, r5
 80028ca:	41ad      	sbcs	r5, r5
 80028cc:	426d      	negs	r5, r5
 80028ce:	1964      	adds	r4, r4, r5
 80028d0:	001d      	movs	r5, r3
 80028d2:	0223      	lsls	r3, r4, #8
 80028d4:	d400      	bmi.n	80028d8 <__aeabi_dsub+0x130>
 80028d6:	e140      	b.n	8002b5a <__aeabi_dsub+0x3b2>
 80028d8:	4a88      	ldr	r2, [pc, #544]	@ (8002afc <__aeabi_dsub+0x354>)
 80028da:	3701      	adds	r7, #1
 80028dc:	4297      	cmp	r7, r2
 80028de:	d100      	bne.n	80028e2 <__aeabi_dsub+0x13a>
 80028e0:	e101      	b.n	8002ae6 <__aeabi_dsub+0x33e>
 80028e2:	2601      	movs	r6, #1
 80028e4:	4643      	mov	r3, r8
 80028e6:	4986      	ldr	r1, [pc, #536]	@ (8002b00 <__aeabi_dsub+0x358>)
 80028e8:	08ed      	lsrs	r5, r5, #3
 80028ea:	4021      	ands	r1, r4
 80028ec:	074a      	lsls	r2, r1, #29
 80028ee:	432a      	orrs	r2, r5
 80028f0:	057c      	lsls	r4, r7, #21
 80028f2:	024d      	lsls	r5, r1, #9
 80028f4:	0b2d      	lsrs	r5, r5, #12
 80028f6:	0d64      	lsrs	r4, r4, #21
 80028f8:	401e      	ands	r6, r3
 80028fa:	0524      	lsls	r4, r4, #20
 80028fc:	432c      	orrs	r4, r5
 80028fe:	07f6      	lsls	r6, r6, #31
 8002900:	4334      	orrs	r4, r6
 8002902:	0010      	movs	r0, r2
 8002904:	0021      	movs	r1, r4
 8002906:	b005      	add	sp, #20
 8002908:	bcf0      	pop	{r4, r5, r6, r7}
 800290a:	46bb      	mov	fp, r7
 800290c:	46b2      	mov	sl, r6
 800290e:	46a9      	mov	r9, r5
 8002910:	46a0      	mov	r8, r4
 8002912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002914:	2d00      	cmp	r5, #0
 8002916:	dc00      	bgt.n	800291a <__aeabi_dsub+0x172>
 8002918:	e2d0      	b.n	8002ebc <__aeabi_dsub+0x714>
 800291a:	4649      	mov	r1, r9
 800291c:	2900      	cmp	r1, #0
 800291e:	d000      	beq.n	8002922 <__aeabi_dsub+0x17a>
 8002920:	e0d4      	b.n	8002acc <__aeabi_dsub+0x324>
 8002922:	4661      	mov	r1, ip
 8002924:	9b02      	ldr	r3, [sp, #8]
 8002926:	4319      	orrs	r1, r3
 8002928:	d100      	bne.n	800292c <__aeabi_dsub+0x184>
 800292a:	e12b      	b.n	8002b84 <__aeabi_dsub+0x3dc>
 800292c:	1e69      	subs	r1, r5, #1
 800292e:	2d01      	cmp	r5, #1
 8002930:	d100      	bne.n	8002934 <__aeabi_dsub+0x18c>
 8002932:	e1d9      	b.n	8002ce8 <__aeabi_dsub+0x540>
 8002934:	4295      	cmp	r5, r2
 8002936:	d100      	bne.n	800293a <__aeabi_dsub+0x192>
 8002938:	e10a      	b.n	8002b50 <__aeabi_dsub+0x3a8>
 800293a:	2501      	movs	r5, #1
 800293c:	2938      	cmp	r1, #56	@ 0x38
 800293e:	dc17      	bgt.n	8002970 <__aeabi_dsub+0x1c8>
 8002940:	468a      	mov	sl, r1
 8002942:	4653      	mov	r3, sl
 8002944:	2b1f      	cmp	r3, #31
 8002946:	dd00      	ble.n	800294a <__aeabi_dsub+0x1a2>
 8002948:	e1e7      	b.n	8002d1a <__aeabi_dsub+0x572>
 800294a:	2220      	movs	r2, #32
 800294c:	1ad2      	subs	r2, r2, r3
 800294e:	9b02      	ldr	r3, [sp, #8]
 8002950:	4661      	mov	r1, ip
 8002952:	4093      	lsls	r3, r2
 8002954:	001d      	movs	r5, r3
 8002956:	4653      	mov	r3, sl
 8002958:	40d9      	lsrs	r1, r3
 800295a:	4663      	mov	r3, ip
 800295c:	4093      	lsls	r3, r2
 800295e:	001a      	movs	r2, r3
 8002960:	430d      	orrs	r5, r1
 8002962:	1e51      	subs	r1, r2, #1
 8002964:	418a      	sbcs	r2, r1
 8002966:	4653      	mov	r3, sl
 8002968:	4315      	orrs	r5, r2
 800296a:	9a02      	ldr	r2, [sp, #8]
 800296c:	40da      	lsrs	r2, r3
 800296e:	18a4      	adds	r4, r4, r2
 8002970:	182d      	adds	r5, r5, r0
 8002972:	4285      	cmp	r5, r0
 8002974:	4180      	sbcs	r0, r0
 8002976:	4240      	negs	r0, r0
 8002978:	1824      	adds	r4, r4, r0
 800297a:	0223      	lsls	r3, r4, #8
 800297c:	d400      	bmi.n	8002980 <__aeabi_dsub+0x1d8>
 800297e:	e0b6      	b.n	8002aee <__aeabi_dsub+0x346>
 8002980:	4b5e      	ldr	r3, [pc, #376]	@ (8002afc <__aeabi_dsub+0x354>)
 8002982:	3701      	adds	r7, #1
 8002984:	429f      	cmp	r7, r3
 8002986:	d100      	bne.n	800298a <__aeabi_dsub+0x1e2>
 8002988:	e0ad      	b.n	8002ae6 <__aeabi_dsub+0x33e>
 800298a:	2101      	movs	r1, #1
 800298c:	4b5c      	ldr	r3, [pc, #368]	@ (8002b00 <__aeabi_dsub+0x358>)
 800298e:	086a      	lsrs	r2, r5, #1
 8002990:	401c      	ands	r4, r3
 8002992:	4029      	ands	r1, r5
 8002994:	430a      	orrs	r2, r1
 8002996:	07e5      	lsls	r5, r4, #31
 8002998:	4315      	orrs	r5, r2
 800299a:	0864      	lsrs	r4, r4, #1
 800299c:	e78d      	b.n	80028ba <__aeabi_dsub+0x112>
 800299e:	4a59      	ldr	r2, [pc, #356]	@ (8002b04 <__aeabi_dsub+0x35c>)
 80029a0:	9b02      	ldr	r3, [sp, #8]
 80029a2:	4692      	mov	sl, r2
 80029a4:	4662      	mov	r2, ip
 80029a6:	44ba      	add	sl, r7
 80029a8:	431a      	orrs	r2, r3
 80029aa:	d02c      	beq.n	8002a06 <__aeabi_dsub+0x25e>
 80029ac:	428e      	cmp	r6, r1
 80029ae:	d02e      	beq.n	8002a0e <__aeabi_dsub+0x266>
 80029b0:	4652      	mov	r2, sl
 80029b2:	2a00      	cmp	r2, #0
 80029b4:	d060      	beq.n	8002a78 <__aeabi_dsub+0x2d0>
 80029b6:	2f00      	cmp	r7, #0
 80029b8:	d100      	bne.n	80029bc <__aeabi_dsub+0x214>
 80029ba:	e0db      	b.n	8002b74 <__aeabi_dsub+0x3cc>
 80029bc:	4663      	mov	r3, ip
 80029be:	000e      	movs	r6, r1
 80029c0:	9c02      	ldr	r4, [sp, #8]
 80029c2:	08d8      	lsrs	r0, r3, #3
 80029c4:	0762      	lsls	r2, r4, #29
 80029c6:	4302      	orrs	r2, r0
 80029c8:	08e4      	lsrs	r4, r4, #3
 80029ca:	0013      	movs	r3, r2
 80029cc:	4323      	orrs	r3, r4
 80029ce:	d100      	bne.n	80029d2 <__aeabi_dsub+0x22a>
 80029d0:	e254      	b.n	8002e7c <__aeabi_dsub+0x6d4>
 80029d2:	2580      	movs	r5, #128	@ 0x80
 80029d4:	032d      	lsls	r5, r5, #12
 80029d6:	4325      	orrs	r5, r4
 80029d8:	032d      	lsls	r5, r5, #12
 80029da:	4c48      	ldr	r4, [pc, #288]	@ (8002afc <__aeabi_dsub+0x354>)
 80029dc:	0b2d      	lsrs	r5, r5, #12
 80029de:	e78c      	b.n	80028fa <__aeabi_dsub+0x152>
 80029e0:	4661      	mov	r1, ip
 80029e2:	9b02      	ldr	r3, [sp, #8]
 80029e4:	4319      	orrs	r1, r3
 80029e6:	d100      	bne.n	80029ea <__aeabi_dsub+0x242>
 80029e8:	e0cc      	b.n	8002b84 <__aeabi_dsub+0x3dc>
 80029ea:	0029      	movs	r1, r5
 80029ec:	3901      	subs	r1, #1
 80029ee:	2d01      	cmp	r5, #1
 80029f0:	d100      	bne.n	80029f4 <__aeabi_dsub+0x24c>
 80029f2:	e188      	b.n	8002d06 <__aeabi_dsub+0x55e>
 80029f4:	4295      	cmp	r5, r2
 80029f6:	d100      	bne.n	80029fa <__aeabi_dsub+0x252>
 80029f8:	e0aa      	b.n	8002b50 <__aeabi_dsub+0x3a8>
 80029fa:	2501      	movs	r5, #1
 80029fc:	2938      	cmp	r1, #56	@ 0x38
 80029fe:	dd00      	ble.n	8002a02 <__aeabi_dsub+0x25a>
 8002a00:	e72f      	b.n	8002862 <__aeabi_dsub+0xba>
 8002a02:	468a      	mov	sl, r1
 8002a04:	e718      	b.n	8002838 <__aeabi_dsub+0x90>
 8002a06:	2201      	movs	r2, #1
 8002a08:	4051      	eors	r1, r2
 8002a0a:	428e      	cmp	r6, r1
 8002a0c:	d1d0      	bne.n	80029b0 <__aeabi_dsub+0x208>
 8002a0e:	4653      	mov	r3, sl
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d100      	bne.n	8002a16 <__aeabi_dsub+0x26e>
 8002a14:	e0be      	b.n	8002b94 <__aeabi_dsub+0x3ec>
 8002a16:	2f00      	cmp	r7, #0
 8002a18:	d000      	beq.n	8002a1c <__aeabi_dsub+0x274>
 8002a1a:	e138      	b.n	8002c8e <__aeabi_dsub+0x4e6>
 8002a1c:	46ca      	mov	sl, r9
 8002a1e:	0022      	movs	r2, r4
 8002a20:	4302      	orrs	r2, r0
 8002a22:	d100      	bne.n	8002a26 <__aeabi_dsub+0x27e>
 8002a24:	e1e2      	b.n	8002dec <__aeabi_dsub+0x644>
 8002a26:	4653      	mov	r3, sl
 8002a28:	1e59      	subs	r1, r3, #1
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d100      	bne.n	8002a30 <__aeabi_dsub+0x288>
 8002a2e:	e20d      	b.n	8002e4c <__aeabi_dsub+0x6a4>
 8002a30:	4a32      	ldr	r2, [pc, #200]	@ (8002afc <__aeabi_dsub+0x354>)
 8002a32:	4592      	cmp	sl, r2
 8002a34:	d100      	bne.n	8002a38 <__aeabi_dsub+0x290>
 8002a36:	e1d2      	b.n	8002dde <__aeabi_dsub+0x636>
 8002a38:	2701      	movs	r7, #1
 8002a3a:	2938      	cmp	r1, #56	@ 0x38
 8002a3c:	dc13      	bgt.n	8002a66 <__aeabi_dsub+0x2be>
 8002a3e:	291f      	cmp	r1, #31
 8002a40:	dd00      	ble.n	8002a44 <__aeabi_dsub+0x29c>
 8002a42:	e1ee      	b.n	8002e22 <__aeabi_dsub+0x67a>
 8002a44:	2220      	movs	r2, #32
 8002a46:	9b02      	ldr	r3, [sp, #8]
 8002a48:	1a52      	subs	r2, r2, r1
 8002a4a:	0025      	movs	r5, r4
 8002a4c:	0007      	movs	r7, r0
 8002a4e:	469a      	mov	sl, r3
 8002a50:	40cc      	lsrs	r4, r1
 8002a52:	4090      	lsls	r0, r2
 8002a54:	4095      	lsls	r5, r2
 8002a56:	40cf      	lsrs	r7, r1
 8002a58:	44a2      	add	sl, r4
 8002a5a:	1e42      	subs	r2, r0, #1
 8002a5c:	4190      	sbcs	r0, r2
 8002a5e:	4653      	mov	r3, sl
 8002a60:	432f      	orrs	r7, r5
 8002a62:	4307      	orrs	r7, r0
 8002a64:	9302      	str	r3, [sp, #8]
 8002a66:	003d      	movs	r5, r7
 8002a68:	4465      	add	r5, ip
 8002a6a:	4565      	cmp	r5, ip
 8002a6c:	4192      	sbcs	r2, r2
 8002a6e:	9b02      	ldr	r3, [sp, #8]
 8002a70:	4252      	negs	r2, r2
 8002a72:	464f      	mov	r7, r9
 8002a74:	18d4      	adds	r4, r2, r3
 8002a76:	e780      	b.n	800297a <__aeabi_dsub+0x1d2>
 8002a78:	4a23      	ldr	r2, [pc, #140]	@ (8002b08 <__aeabi_dsub+0x360>)
 8002a7a:	1c7d      	adds	r5, r7, #1
 8002a7c:	4215      	tst	r5, r2
 8002a7e:	d000      	beq.n	8002a82 <__aeabi_dsub+0x2da>
 8002a80:	e0aa      	b.n	8002bd8 <__aeabi_dsub+0x430>
 8002a82:	4662      	mov	r2, ip
 8002a84:	0025      	movs	r5, r4
 8002a86:	9b02      	ldr	r3, [sp, #8]
 8002a88:	4305      	orrs	r5, r0
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	2f00      	cmp	r7, #0
 8002a8e:	d000      	beq.n	8002a92 <__aeabi_dsub+0x2ea>
 8002a90:	e0f5      	b.n	8002c7e <__aeabi_dsub+0x4d6>
 8002a92:	2d00      	cmp	r5, #0
 8002a94:	d100      	bne.n	8002a98 <__aeabi_dsub+0x2f0>
 8002a96:	e16b      	b.n	8002d70 <__aeabi_dsub+0x5c8>
 8002a98:	2a00      	cmp	r2, #0
 8002a9a:	d100      	bne.n	8002a9e <__aeabi_dsub+0x2f6>
 8002a9c:	e152      	b.n	8002d44 <__aeabi_dsub+0x59c>
 8002a9e:	4663      	mov	r3, ip
 8002aa0:	1ac5      	subs	r5, r0, r3
 8002aa2:	9b02      	ldr	r3, [sp, #8]
 8002aa4:	1ae2      	subs	r2, r4, r3
 8002aa6:	42a8      	cmp	r0, r5
 8002aa8:	419b      	sbcs	r3, r3
 8002aaa:	425b      	negs	r3, r3
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	021a      	lsls	r2, r3, #8
 8002ab0:	d400      	bmi.n	8002ab4 <__aeabi_dsub+0x30c>
 8002ab2:	e1d5      	b.n	8002e60 <__aeabi_dsub+0x6b8>
 8002ab4:	4663      	mov	r3, ip
 8002ab6:	1a1d      	subs	r5, r3, r0
 8002ab8:	45ac      	cmp	ip, r5
 8002aba:	4192      	sbcs	r2, r2
 8002abc:	2601      	movs	r6, #1
 8002abe:	9b02      	ldr	r3, [sp, #8]
 8002ac0:	4252      	negs	r2, r2
 8002ac2:	1b1c      	subs	r4, r3, r4
 8002ac4:	4688      	mov	r8, r1
 8002ac6:	1aa4      	subs	r4, r4, r2
 8002ac8:	400e      	ands	r6, r1
 8002aca:	e6f6      	b.n	80028ba <__aeabi_dsub+0x112>
 8002acc:	4297      	cmp	r7, r2
 8002ace:	d03f      	beq.n	8002b50 <__aeabi_dsub+0x3a8>
 8002ad0:	4652      	mov	r2, sl
 8002ad2:	2501      	movs	r5, #1
 8002ad4:	2a38      	cmp	r2, #56	@ 0x38
 8002ad6:	dd00      	ble.n	8002ada <__aeabi_dsub+0x332>
 8002ad8:	e74a      	b.n	8002970 <__aeabi_dsub+0x1c8>
 8002ada:	2280      	movs	r2, #128	@ 0x80
 8002adc:	9b02      	ldr	r3, [sp, #8]
 8002ade:	0412      	lsls	r2, r2, #16
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	9302      	str	r3, [sp, #8]
 8002ae4:	e72d      	b.n	8002942 <__aeabi_dsub+0x19a>
 8002ae6:	003c      	movs	r4, r7
 8002ae8:	2500      	movs	r5, #0
 8002aea:	2200      	movs	r2, #0
 8002aec:	e705      	b.n	80028fa <__aeabi_dsub+0x152>
 8002aee:	2307      	movs	r3, #7
 8002af0:	402b      	ands	r3, r5
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d000      	beq.n	8002af8 <__aeabi_dsub+0x350>
 8002af6:	e6e2      	b.n	80028be <__aeabi_dsub+0x116>
 8002af8:	e06b      	b.n	8002bd2 <__aeabi_dsub+0x42a>
 8002afa:	46c0      	nop			@ (mov r8, r8)
 8002afc:	000007ff 	.word	0x000007ff
 8002b00:	ff7fffff 	.word	0xff7fffff
 8002b04:	fffff801 	.word	0xfffff801
 8002b08:	000007fe 	.word	0x000007fe
 8002b0c:	0028      	movs	r0, r5
 8002b0e:	f000 fb63 	bl	80031d8 <__clzsi2>
 8002b12:	0003      	movs	r3, r0
 8002b14:	3318      	adds	r3, #24
 8002b16:	2b1f      	cmp	r3, #31
 8002b18:	dc00      	bgt.n	8002b1c <__aeabi_dsub+0x374>
 8002b1a:	e6b4      	b.n	8002886 <__aeabi_dsub+0xde>
 8002b1c:	002a      	movs	r2, r5
 8002b1e:	3808      	subs	r0, #8
 8002b20:	4082      	lsls	r2, r0
 8002b22:	429f      	cmp	r7, r3
 8002b24:	dd00      	ble.n	8002b28 <__aeabi_dsub+0x380>
 8002b26:	e0b9      	b.n	8002c9c <__aeabi_dsub+0x4f4>
 8002b28:	1bdb      	subs	r3, r3, r7
 8002b2a:	1c58      	adds	r0, r3, #1
 8002b2c:	281f      	cmp	r0, #31
 8002b2e:	dc00      	bgt.n	8002b32 <__aeabi_dsub+0x38a>
 8002b30:	e1a0      	b.n	8002e74 <__aeabi_dsub+0x6cc>
 8002b32:	0015      	movs	r5, r2
 8002b34:	3b1f      	subs	r3, #31
 8002b36:	40dd      	lsrs	r5, r3
 8002b38:	2820      	cmp	r0, #32
 8002b3a:	d005      	beq.n	8002b48 <__aeabi_dsub+0x3a0>
 8002b3c:	2340      	movs	r3, #64	@ 0x40
 8002b3e:	1a1b      	subs	r3, r3, r0
 8002b40:	409a      	lsls	r2, r3
 8002b42:	1e53      	subs	r3, r2, #1
 8002b44:	419a      	sbcs	r2, r3
 8002b46:	4315      	orrs	r5, r2
 8002b48:	2307      	movs	r3, #7
 8002b4a:	2700      	movs	r7, #0
 8002b4c:	402b      	ands	r3, r5
 8002b4e:	e7d0      	b.n	8002af2 <__aeabi_dsub+0x34a>
 8002b50:	08c0      	lsrs	r0, r0, #3
 8002b52:	0762      	lsls	r2, r4, #29
 8002b54:	4302      	orrs	r2, r0
 8002b56:	08e4      	lsrs	r4, r4, #3
 8002b58:	e737      	b.n	80029ca <__aeabi_dsub+0x222>
 8002b5a:	08ea      	lsrs	r2, r5, #3
 8002b5c:	0763      	lsls	r3, r4, #29
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	4bd3      	ldr	r3, [pc, #844]	@ (8002eb0 <__aeabi_dsub+0x708>)
 8002b62:	08e4      	lsrs	r4, r4, #3
 8002b64:	429f      	cmp	r7, r3
 8002b66:	d100      	bne.n	8002b6a <__aeabi_dsub+0x3c2>
 8002b68:	e72f      	b.n	80029ca <__aeabi_dsub+0x222>
 8002b6a:	0324      	lsls	r4, r4, #12
 8002b6c:	0b25      	lsrs	r5, r4, #12
 8002b6e:	057c      	lsls	r4, r7, #21
 8002b70:	0d64      	lsrs	r4, r4, #21
 8002b72:	e6c2      	b.n	80028fa <__aeabi_dsub+0x152>
 8002b74:	46ca      	mov	sl, r9
 8002b76:	0022      	movs	r2, r4
 8002b78:	4302      	orrs	r2, r0
 8002b7a:	d158      	bne.n	8002c2e <__aeabi_dsub+0x486>
 8002b7c:	4663      	mov	r3, ip
 8002b7e:	000e      	movs	r6, r1
 8002b80:	9c02      	ldr	r4, [sp, #8]
 8002b82:	9303      	str	r3, [sp, #12]
 8002b84:	9b03      	ldr	r3, [sp, #12]
 8002b86:	4657      	mov	r7, sl
 8002b88:	08da      	lsrs	r2, r3, #3
 8002b8a:	e7e7      	b.n	8002b5c <__aeabi_dsub+0x3b4>
 8002b8c:	4cc9      	ldr	r4, [pc, #804]	@ (8002eb4 <__aeabi_dsub+0x70c>)
 8002b8e:	1aff      	subs	r7, r7, r3
 8002b90:	4014      	ands	r4, r2
 8002b92:	e692      	b.n	80028ba <__aeabi_dsub+0x112>
 8002b94:	4dc8      	ldr	r5, [pc, #800]	@ (8002eb8 <__aeabi_dsub+0x710>)
 8002b96:	1c7a      	adds	r2, r7, #1
 8002b98:	422a      	tst	r2, r5
 8002b9a:	d000      	beq.n	8002b9e <__aeabi_dsub+0x3f6>
 8002b9c:	e084      	b.n	8002ca8 <__aeabi_dsub+0x500>
 8002b9e:	0022      	movs	r2, r4
 8002ba0:	4302      	orrs	r2, r0
 8002ba2:	2f00      	cmp	r7, #0
 8002ba4:	d000      	beq.n	8002ba8 <__aeabi_dsub+0x400>
 8002ba6:	e0ef      	b.n	8002d88 <__aeabi_dsub+0x5e0>
 8002ba8:	2a00      	cmp	r2, #0
 8002baa:	d100      	bne.n	8002bae <__aeabi_dsub+0x406>
 8002bac:	e0e5      	b.n	8002d7a <__aeabi_dsub+0x5d2>
 8002bae:	4662      	mov	r2, ip
 8002bb0:	9902      	ldr	r1, [sp, #8]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	d100      	bne.n	8002bb8 <__aeabi_dsub+0x410>
 8002bb6:	e0c5      	b.n	8002d44 <__aeabi_dsub+0x59c>
 8002bb8:	4663      	mov	r3, ip
 8002bba:	18c5      	adds	r5, r0, r3
 8002bbc:	468c      	mov	ip, r1
 8002bbe:	4285      	cmp	r5, r0
 8002bc0:	4180      	sbcs	r0, r0
 8002bc2:	4464      	add	r4, ip
 8002bc4:	4240      	negs	r0, r0
 8002bc6:	1824      	adds	r4, r4, r0
 8002bc8:	0223      	lsls	r3, r4, #8
 8002bca:	d502      	bpl.n	8002bd2 <__aeabi_dsub+0x42a>
 8002bcc:	4bb9      	ldr	r3, [pc, #740]	@ (8002eb4 <__aeabi_dsub+0x70c>)
 8002bce:	3701      	adds	r7, #1
 8002bd0:	401c      	ands	r4, r3
 8002bd2:	46ba      	mov	sl, r7
 8002bd4:	9503      	str	r5, [sp, #12]
 8002bd6:	e7d5      	b.n	8002b84 <__aeabi_dsub+0x3dc>
 8002bd8:	4662      	mov	r2, ip
 8002bda:	1a85      	subs	r5, r0, r2
 8002bdc:	42a8      	cmp	r0, r5
 8002bde:	4192      	sbcs	r2, r2
 8002be0:	4252      	negs	r2, r2
 8002be2:	4691      	mov	r9, r2
 8002be4:	9b02      	ldr	r3, [sp, #8]
 8002be6:	1ae3      	subs	r3, r4, r3
 8002be8:	001a      	movs	r2, r3
 8002bea:	464b      	mov	r3, r9
 8002bec:	1ad2      	subs	r2, r2, r3
 8002bee:	0013      	movs	r3, r2
 8002bf0:	4691      	mov	r9, r2
 8002bf2:	021a      	lsls	r2, r3, #8
 8002bf4:	d46c      	bmi.n	8002cd0 <__aeabi_dsub+0x528>
 8002bf6:	464a      	mov	r2, r9
 8002bf8:	464c      	mov	r4, r9
 8002bfa:	432a      	orrs	r2, r5
 8002bfc:	d000      	beq.n	8002c00 <__aeabi_dsub+0x458>
 8002bfe:	e63a      	b.n	8002876 <__aeabi_dsub+0xce>
 8002c00:	2600      	movs	r6, #0
 8002c02:	2400      	movs	r4, #0
 8002c04:	2500      	movs	r5, #0
 8002c06:	e678      	b.n	80028fa <__aeabi_dsub+0x152>
 8002c08:	9902      	ldr	r1, [sp, #8]
 8002c0a:	4653      	mov	r3, sl
 8002c0c:	000d      	movs	r5, r1
 8002c0e:	3a20      	subs	r2, #32
 8002c10:	40d5      	lsrs	r5, r2
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	d006      	beq.n	8002c24 <__aeabi_dsub+0x47c>
 8002c16:	2240      	movs	r2, #64	@ 0x40
 8002c18:	1ad2      	subs	r2, r2, r3
 8002c1a:	000b      	movs	r3, r1
 8002c1c:	4093      	lsls	r3, r2
 8002c1e:	4662      	mov	r2, ip
 8002c20:	431a      	orrs	r2, r3
 8002c22:	4693      	mov	fp, r2
 8002c24:	465b      	mov	r3, fp
 8002c26:	1e5a      	subs	r2, r3, #1
 8002c28:	4193      	sbcs	r3, r2
 8002c2a:	431d      	orrs	r5, r3
 8002c2c:	e619      	b.n	8002862 <__aeabi_dsub+0xba>
 8002c2e:	4653      	mov	r3, sl
 8002c30:	1e5a      	subs	r2, r3, #1
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d100      	bne.n	8002c38 <__aeabi_dsub+0x490>
 8002c36:	e0c6      	b.n	8002dc6 <__aeabi_dsub+0x61e>
 8002c38:	4e9d      	ldr	r6, [pc, #628]	@ (8002eb0 <__aeabi_dsub+0x708>)
 8002c3a:	45b2      	cmp	sl, r6
 8002c3c:	d100      	bne.n	8002c40 <__aeabi_dsub+0x498>
 8002c3e:	e6bd      	b.n	80029bc <__aeabi_dsub+0x214>
 8002c40:	4688      	mov	r8, r1
 8002c42:	000e      	movs	r6, r1
 8002c44:	2501      	movs	r5, #1
 8002c46:	2a38      	cmp	r2, #56	@ 0x38
 8002c48:	dc10      	bgt.n	8002c6c <__aeabi_dsub+0x4c4>
 8002c4a:	2a1f      	cmp	r2, #31
 8002c4c:	dc7f      	bgt.n	8002d4e <__aeabi_dsub+0x5a6>
 8002c4e:	2120      	movs	r1, #32
 8002c50:	0025      	movs	r5, r4
 8002c52:	1a89      	subs	r1, r1, r2
 8002c54:	0007      	movs	r7, r0
 8002c56:	4088      	lsls	r0, r1
 8002c58:	408d      	lsls	r5, r1
 8002c5a:	40d7      	lsrs	r7, r2
 8002c5c:	40d4      	lsrs	r4, r2
 8002c5e:	1e41      	subs	r1, r0, #1
 8002c60:	4188      	sbcs	r0, r1
 8002c62:	9b02      	ldr	r3, [sp, #8]
 8002c64:	433d      	orrs	r5, r7
 8002c66:	1b1b      	subs	r3, r3, r4
 8002c68:	4305      	orrs	r5, r0
 8002c6a:	9302      	str	r3, [sp, #8]
 8002c6c:	4662      	mov	r2, ip
 8002c6e:	1b55      	subs	r5, r2, r5
 8002c70:	45ac      	cmp	ip, r5
 8002c72:	4192      	sbcs	r2, r2
 8002c74:	9b02      	ldr	r3, [sp, #8]
 8002c76:	4252      	negs	r2, r2
 8002c78:	464f      	mov	r7, r9
 8002c7a:	1a9c      	subs	r4, r3, r2
 8002c7c:	e5f6      	b.n	800286c <__aeabi_dsub+0xc4>
 8002c7e:	2d00      	cmp	r5, #0
 8002c80:	d000      	beq.n	8002c84 <__aeabi_dsub+0x4dc>
 8002c82:	e0b7      	b.n	8002df4 <__aeabi_dsub+0x64c>
 8002c84:	2a00      	cmp	r2, #0
 8002c86:	d100      	bne.n	8002c8a <__aeabi_dsub+0x4e2>
 8002c88:	e0f0      	b.n	8002e6c <__aeabi_dsub+0x6c4>
 8002c8a:	2601      	movs	r6, #1
 8002c8c:	400e      	ands	r6, r1
 8002c8e:	4663      	mov	r3, ip
 8002c90:	9802      	ldr	r0, [sp, #8]
 8002c92:	08d9      	lsrs	r1, r3, #3
 8002c94:	0742      	lsls	r2, r0, #29
 8002c96:	430a      	orrs	r2, r1
 8002c98:	08c4      	lsrs	r4, r0, #3
 8002c9a:	e696      	b.n	80029ca <__aeabi_dsub+0x222>
 8002c9c:	4c85      	ldr	r4, [pc, #532]	@ (8002eb4 <__aeabi_dsub+0x70c>)
 8002c9e:	1aff      	subs	r7, r7, r3
 8002ca0:	4014      	ands	r4, r2
 8002ca2:	0762      	lsls	r2, r4, #29
 8002ca4:	08e4      	lsrs	r4, r4, #3
 8002ca6:	e760      	b.n	8002b6a <__aeabi_dsub+0x3c2>
 8002ca8:	4981      	ldr	r1, [pc, #516]	@ (8002eb0 <__aeabi_dsub+0x708>)
 8002caa:	428a      	cmp	r2, r1
 8002cac:	d100      	bne.n	8002cb0 <__aeabi_dsub+0x508>
 8002cae:	e0c9      	b.n	8002e44 <__aeabi_dsub+0x69c>
 8002cb0:	4663      	mov	r3, ip
 8002cb2:	18c1      	adds	r1, r0, r3
 8002cb4:	4281      	cmp	r1, r0
 8002cb6:	4180      	sbcs	r0, r0
 8002cb8:	9b02      	ldr	r3, [sp, #8]
 8002cba:	4240      	negs	r0, r0
 8002cbc:	18e3      	adds	r3, r4, r3
 8002cbe:	181b      	adds	r3, r3, r0
 8002cc0:	07dd      	lsls	r5, r3, #31
 8002cc2:	085c      	lsrs	r4, r3, #1
 8002cc4:	2307      	movs	r3, #7
 8002cc6:	0849      	lsrs	r1, r1, #1
 8002cc8:	430d      	orrs	r5, r1
 8002cca:	0017      	movs	r7, r2
 8002ccc:	402b      	ands	r3, r5
 8002cce:	e710      	b.n	8002af2 <__aeabi_dsub+0x34a>
 8002cd0:	4663      	mov	r3, ip
 8002cd2:	1a1d      	subs	r5, r3, r0
 8002cd4:	45ac      	cmp	ip, r5
 8002cd6:	4192      	sbcs	r2, r2
 8002cd8:	2601      	movs	r6, #1
 8002cda:	9b02      	ldr	r3, [sp, #8]
 8002cdc:	4252      	negs	r2, r2
 8002cde:	1b1c      	subs	r4, r3, r4
 8002ce0:	4688      	mov	r8, r1
 8002ce2:	1aa4      	subs	r4, r4, r2
 8002ce4:	400e      	ands	r6, r1
 8002ce6:	e5c6      	b.n	8002876 <__aeabi_dsub+0xce>
 8002ce8:	4663      	mov	r3, ip
 8002cea:	18c5      	adds	r5, r0, r3
 8002cec:	9b02      	ldr	r3, [sp, #8]
 8002cee:	4285      	cmp	r5, r0
 8002cf0:	4180      	sbcs	r0, r0
 8002cf2:	469c      	mov	ip, r3
 8002cf4:	4240      	negs	r0, r0
 8002cf6:	4464      	add	r4, ip
 8002cf8:	1824      	adds	r4, r4, r0
 8002cfa:	2701      	movs	r7, #1
 8002cfc:	0223      	lsls	r3, r4, #8
 8002cfe:	d400      	bmi.n	8002d02 <__aeabi_dsub+0x55a>
 8002d00:	e6f5      	b.n	8002aee <__aeabi_dsub+0x346>
 8002d02:	2702      	movs	r7, #2
 8002d04:	e641      	b.n	800298a <__aeabi_dsub+0x1e2>
 8002d06:	4663      	mov	r3, ip
 8002d08:	1ac5      	subs	r5, r0, r3
 8002d0a:	42a8      	cmp	r0, r5
 8002d0c:	4180      	sbcs	r0, r0
 8002d0e:	9b02      	ldr	r3, [sp, #8]
 8002d10:	4240      	negs	r0, r0
 8002d12:	1ae4      	subs	r4, r4, r3
 8002d14:	2701      	movs	r7, #1
 8002d16:	1a24      	subs	r4, r4, r0
 8002d18:	e5a8      	b.n	800286c <__aeabi_dsub+0xc4>
 8002d1a:	9d02      	ldr	r5, [sp, #8]
 8002d1c:	4652      	mov	r2, sl
 8002d1e:	002b      	movs	r3, r5
 8002d20:	3a20      	subs	r2, #32
 8002d22:	40d3      	lsrs	r3, r2
 8002d24:	0019      	movs	r1, r3
 8002d26:	4653      	mov	r3, sl
 8002d28:	2b20      	cmp	r3, #32
 8002d2a:	d006      	beq.n	8002d3a <__aeabi_dsub+0x592>
 8002d2c:	2240      	movs	r2, #64	@ 0x40
 8002d2e:	1ad2      	subs	r2, r2, r3
 8002d30:	002b      	movs	r3, r5
 8002d32:	4093      	lsls	r3, r2
 8002d34:	4662      	mov	r2, ip
 8002d36:	431a      	orrs	r2, r3
 8002d38:	4693      	mov	fp, r2
 8002d3a:	465d      	mov	r5, fp
 8002d3c:	1e6b      	subs	r3, r5, #1
 8002d3e:	419d      	sbcs	r5, r3
 8002d40:	430d      	orrs	r5, r1
 8002d42:	e615      	b.n	8002970 <__aeabi_dsub+0x1c8>
 8002d44:	0762      	lsls	r2, r4, #29
 8002d46:	08c0      	lsrs	r0, r0, #3
 8002d48:	4302      	orrs	r2, r0
 8002d4a:	08e4      	lsrs	r4, r4, #3
 8002d4c:	e70d      	b.n	8002b6a <__aeabi_dsub+0x3c2>
 8002d4e:	0011      	movs	r1, r2
 8002d50:	0027      	movs	r7, r4
 8002d52:	3920      	subs	r1, #32
 8002d54:	40cf      	lsrs	r7, r1
 8002d56:	2a20      	cmp	r2, #32
 8002d58:	d005      	beq.n	8002d66 <__aeabi_dsub+0x5be>
 8002d5a:	2140      	movs	r1, #64	@ 0x40
 8002d5c:	1a8a      	subs	r2, r1, r2
 8002d5e:	4094      	lsls	r4, r2
 8002d60:	0025      	movs	r5, r4
 8002d62:	4305      	orrs	r5, r0
 8002d64:	9503      	str	r5, [sp, #12]
 8002d66:	9d03      	ldr	r5, [sp, #12]
 8002d68:	1e6a      	subs	r2, r5, #1
 8002d6a:	4195      	sbcs	r5, r2
 8002d6c:	433d      	orrs	r5, r7
 8002d6e:	e77d      	b.n	8002c6c <__aeabi_dsub+0x4c4>
 8002d70:	2a00      	cmp	r2, #0
 8002d72:	d100      	bne.n	8002d76 <__aeabi_dsub+0x5ce>
 8002d74:	e744      	b.n	8002c00 <__aeabi_dsub+0x458>
 8002d76:	2601      	movs	r6, #1
 8002d78:	400e      	ands	r6, r1
 8002d7a:	4663      	mov	r3, ip
 8002d7c:	08d9      	lsrs	r1, r3, #3
 8002d7e:	9b02      	ldr	r3, [sp, #8]
 8002d80:	075a      	lsls	r2, r3, #29
 8002d82:	430a      	orrs	r2, r1
 8002d84:	08dc      	lsrs	r4, r3, #3
 8002d86:	e6f0      	b.n	8002b6a <__aeabi_dsub+0x3c2>
 8002d88:	2a00      	cmp	r2, #0
 8002d8a:	d028      	beq.n	8002dde <__aeabi_dsub+0x636>
 8002d8c:	4662      	mov	r2, ip
 8002d8e:	9f02      	ldr	r7, [sp, #8]
 8002d90:	08c0      	lsrs	r0, r0, #3
 8002d92:	433a      	orrs	r2, r7
 8002d94:	d100      	bne.n	8002d98 <__aeabi_dsub+0x5f0>
 8002d96:	e6dc      	b.n	8002b52 <__aeabi_dsub+0x3aa>
 8002d98:	0762      	lsls	r2, r4, #29
 8002d9a:	4310      	orrs	r0, r2
 8002d9c:	2280      	movs	r2, #128	@ 0x80
 8002d9e:	08e4      	lsrs	r4, r4, #3
 8002da0:	0312      	lsls	r2, r2, #12
 8002da2:	4214      	tst	r4, r2
 8002da4:	d009      	beq.n	8002dba <__aeabi_dsub+0x612>
 8002da6:	08fd      	lsrs	r5, r7, #3
 8002da8:	4215      	tst	r5, r2
 8002daa:	d106      	bne.n	8002dba <__aeabi_dsub+0x612>
 8002dac:	4663      	mov	r3, ip
 8002dae:	2601      	movs	r6, #1
 8002db0:	002c      	movs	r4, r5
 8002db2:	08d8      	lsrs	r0, r3, #3
 8002db4:	077b      	lsls	r3, r7, #29
 8002db6:	4318      	orrs	r0, r3
 8002db8:	400e      	ands	r6, r1
 8002dba:	0f42      	lsrs	r2, r0, #29
 8002dbc:	00c0      	lsls	r0, r0, #3
 8002dbe:	08c0      	lsrs	r0, r0, #3
 8002dc0:	0752      	lsls	r2, r2, #29
 8002dc2:	4302      	orrs	r2, r0
 8002dc4:	e601      	b.n	80029ca <__aeabi_dsub+0x222>
 8002dc6:	4663      	mov	r3, ip
 8002dc8:	1a1d      	subs	r5, r3, r0
 8002dca:	45ac      	cmp	ip, r5
 8002dcc:	4192      	sbcs	r2, r2
 8002dce:	9b02      	ldr	r3, [sp, #8]
 8002dd0:	4252      	negs	r2, r2
 8002dd2:	1b1c      	subs	r4, r3, r4
 8002dd4:	000e      	movs	r6, r1
 8002dd6:	4688      	mov	r8, r1
 8002dd8:	2701      	movs	r7, #1
 8002dda:	1aa4      	subs	r4, r4, r2
 8002ddc:	e546      	b.n	800286c <__aeabi_dsub+0xc4>
 8002dde:	4663      	mov	r3, ip
 8002de0:	08d9      	lsrs	r1, r3, #3
 8002de2:	9b02      	ldr	r3, [sp, #8]
 8002de4:	075a      	lsls	r2, r3, #29
 8002de6:	430a      	orrs	r2, r1
 8002de8:	08dc      	lsrs	r4, r3, #3
 8002dea:	e5ee      	b.n	80029ca <__aeabi_dsub+0x222>
 8002dec:	4663      	mov	r3, ip
 8002dee:	9c02      	ldr	r4, [sp, #8]
 8002df0:	9303      	str	r3, [sp, #12]
 8002df2:	e6c7      	b.n	8002b84 <__aeabi_dsub+0x3dc>
 8002df4:	08c0      	lsrs	r0, r0, #3
 8002df6:	2a00      	cmp	r2, #0
 8002df8:	d100      	bne.n	8002dfc <__aeabi_dsub+0x654>
 8002dfa:	e6aa      	b.n	8002b52 <__aeabi_dsub+0x3aa>
 8002dfc:	0762      	lsls	r2, r4, #29
 8002dfe:	4310      	orrs	r0, r2
 8002e00:	2280      	movs	r2, #128	@ 0x80
 8002e02:	08e4      	lsrs	r4, r4, #3
 8002e04:	0312      	lsls	r2, r2, #12
 8002e06:	4214      	tst	r4, r2
 8002e08:	d0d7      	beq.n	8002dba <__aeabi_dsub+0x612>
 8002e0a:	9f02      	ldr	r7, [sp, #8]
 8002e0c:	08fd      	lsrs	r5, r7, #3
 8002e0e:	4215      	tst	r5, r2
 8002e10:	d1d3      	bne.n	8002dba <__aeabi_dsub+0x612>
 8002e12:	4663      	mov	r3, ip
 8002e14:	2601      	movs	r6, #1
 8002e16:	08d8      	lsrs	r0, r3, #3
 8002e18:	077b      	lsls	r3, r7, #29
 8002e1a:	002c      	movs	r4, r5
 8002e1c:	4318      	orrs	r0, r3
 8002e1e:	400e      	ands	r6, r1
 8002e20:	e7cb      	b.n	8002dba <__aeabi_dsub+0x612>
 8002e22:	000a      	movs	r2, r1
 8002e24:	0027      	movs	r7, r4
 8002e26:	3a20      	subs	r2, #32
 8002e28:	40d7      	lsrs	r7, r2
 8002e2a:	2920      	cmp	r1, #32
 8002e2c:	d005      	beq.n	8002e3a <__aeabi_dsub+0x692>
 8002e2e:	2240      	movs	r2, #64	@ 0x40
 8002e30:	1a52      	subs	r2, r2, r1
 8002e32:	4094      	lsls	r4, r2
 8002e34:	0025      	movs	r5, r4
 8002e36:	4305      	orrs	r5, r0
 8002e38:	9503      	str	r5, [sp, #12]
 8002e3a:	9d03      	ldr	r5, [sp, #12]
 8002e3c:	1e6a      	subs	r2, r5, #1
 8002e3e:	4195      	sbcs	r5, r2
 8002e40:	432f      	orrs	r7, r5
 8002e42:	e610      	b.n	8002a66 <__aeabi_dsub+0x2be>
 8002e44:	0014      	movs	r4, r2
 8002e46:	2500      	movs	r5, #0
 8002e48:	2200      	movs	r2, #0
 8002e4a:	e556      	b.n	80028fa <__aeabi_dsub+0x152>
 8002e4c:	9b02      	ldr	r3, [sp, #8]
 8002e4e:	4460      	add	r0, ip
 8002e50:	4699      	mov	r9, r3
 8002e52:	4560      	cmp	r0, ip
 8002e54:	4192      	sbcs	r2, r2
 8002e56:	444c      	add	r4, r9
 8002e58:	4252      	negs	r2, r2
 8002e5a:	0005      	movs	r5, r0
 8002e5c:	18a4      	adds	r4, r4, r2
 8002e5e:	e74c      	b.n	8002cfa <__aeabi_dsub+0x552>
 8002e60:	001a      	movs	r2, r3
 8002e62:	001c      	movs	r4, r3
 8002e64:	432a      	orrs	r2, r5
 8002e66:	d000      	beq.n	8002e6a <__aeabi_dsub+0x6c2>
 8002e68:	e6b3      	b.n	8002bd2 <__aeabi_dsub+0x42a>
 8002e6a:	e6c9      	b.n	8002c00 <__aeabi_dsub+0x458>
 8002e6c:	2480      	movs	r4, #128	@ 0x80
 8002e6e:	2600      	movs	r6, #0
 8002e70:	0324      	lsls	r4, r4, #12
 8002e72:	e5ae      	b.n	80029d2 <__aeabi_dsub+0x22a>
 8002e74:	2120      	movs	r1, #32
 8002e76:	2500      	movs	r5, #0
 8002e78:	1a09      	subs	r1, r1, r0
 8002e7a:	e517      	b.n	80028ac <__aeabi_dsub+0x104>
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2500      	movs	r5, #0
 8002e80:	4c0b      	ldr	r4, [pc, #44]	@ (8002eb0 <__aeabi_dsub+0x708>)
 8002e82:	e53a      	b.n	80028fa <__aeabi_dsub+0x152>
 8002e84:	2d00      	cmp	r5, #0
 8002e86:	d100      	bne.n	8002e8a <__aeabi_dsub+0x6e2>
 8002e88:	e5f6      	b.n	8002a78 <__aeabi_dsub+0x2d0>
 8002e8a:	464b      	mov	r3, r9
 8002e8c:	1bda      	subs	r2, r3, r7
 8002e8e:	4692      	mov	sl, r2
 8002e90:	2f00      	cmp	r7, #0
 8002e92:	d100      	bne.n	8002e96 <__aeabi_dsub+0x6ee>
 8002e94:	e66f      	b.n	8002b76 <__aeabi_dsub+0x3ce>
 8002e96:	2a38      	cmp	r2, #56	@ 0x38
 8002e98:	dc05      	bgt.n	8002ea6 <__aeabi_dsub+0x6fe>
 8002e9a:	2680      	movs	r6, #128	@ 0x80
 8002e9c:	0436      	lsls	r6, r6, #16
 8002e9e:	4334      	orrs	r4, r6
 8002ea0:	4688      	mov	r8, r1
 8002ea2:	000e      	movs	r6, r1
 8002ea4:	e6d1      	b.n	8002c4a <__aeabi_dsub+0x4a2>
 8002ea6:	4688      	mov	r8, r1
 8002ea8:	000e      	movs	r6, r1
 8002eaa:	2501      	movs	r5, #1
 8002eac:	e6de      	b.n	8002c6c <__aeabi_dsub+0x4c4>
 8002eae:	46c0      	nop			@ (mov r8, r8)
 8002eb0:	000007ff 	.word	0x000007ff
 8002eb4:	ff7fffff 	.word	0xff7fffff
 8002eb8:	000007fe 	.word	0x000007fe
 8002ebc:	2d00      	cmp	r5, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x71a>
 8002ec0:	e668      	b.n	8002b94 <__aeabi_dsub+0x3ec>
 8002ec2:	464b      	mov	r3, r9
 8002ec4:	1bd9      	subs	r1, r3, r7
 8002ec6:	2f00      	cmp	r7, #0
 8002ec8:	d101      	bne.n	8002ece <__aeabi_dsub+0x726>
 8002eca:	468a      	mov	sl, r1
 8002ecc:	e5a7      	b.n	8002a1e <__aeabi_dsub+0x276>
 8002ece:	2701      	movs	r7, #1
 8002ed0:	2938      	cmp	r1, #56	@ 0x38
 8002ed2:	dd00      	ble.n	8002ed6 <__aeabi_dsub+0x72e>
 8002ed4:	e5c7      	b.n	8002a66 <__aeabi_dsub+0x2be>
 8002ed6:	2280      	movs	r2, #128	@ 0x80
 8002ed8:	0412      	lsls	r2, r2, #16
 8002eda:	4314      	orrs	r4, r2
 8002edc:	e5af      	b.n	8002a3e <__aeabi_dsub+0x296>
 8002ede:	46c0      	nop			@ (mov r8, r8)

08002ee0 <__aeabi_dcmpun>:
 8002ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ee2:	46c6      	mov	lr, r8
 8002ee4:	031e      	lsls	r6, r3, #12
 8002ee6:	0b36      	lsrs	r6, r6, #12
 8002ee8:	46b0      	mov	r8, r6
 8002eea:	4e0d      	ldr	r6, [pc, #52]	@ (8002f20 <__aeabi_dcmpun+0x40>)
 8002eec:	030c      	lsls	r4, r1, #12
 8002eee:	004d      	lsls	r5, r1, #1
 8002ef0:	005f      	lsls	r7, r3, #1
 8002ef2:	b500      	push	{lr}
 8002ef4:	0b24      	lsrs	r4, r4, #12
 8002ef6:	0d6d      	lsrs	r5, r5, #21
 8002ef8:	0d7f      	lsrs	r7, r7, #21
 8002efa:	42b5      	cmp	r5, r6
 8002efc:	d00b      	beq.n	8002f16 <__aeabi_dcmpun+0x36>
 8002efe:	4908      	ldr	r1, [pc, #32]	@ (8002f20 <__aeabi_dcmpun+0x40>)
 8002f00:	2000      	movs	r0, #0
 8002f02:	428f      	cmp	r7, r1
 8002f04:	d104      	bne.n	8002f10 <__aeabi_dcmpun+0x30>
 8002f06:	4646      	mov	r6, r8
 8002f08:	4316      	orrs	r6, r2
 8002f0a:	0030      	movs	r0, r6
 8002f0c:	1e43      	subs	r3, r0, #1
 8002f0e:	4198      	sbcs	r0, r3
 8002f10:	bc80      	pop	{r7}
 8002f12:	46b8      	mov	r8, r7
 8002f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f16:	4304      	orrs	r4, r0
 8002f18:	2001      	movs	r0, #1
 8002f1a:	2c00      	cmp	r4, #0
 8002f1c:	d1f8      	bne.n	8002f10 <__aeabi_dcmpun+0x30>
 8002f1e:	e7ee      	b.n	8002efe <__aeabi_dcmpun+0x1e>
 8002f20:	000007ff 	.word	0x000007ff

08002f24 <__aeabi_d2iz>:
 8002f24:	000b      	movs	r3, r1
 8002f26:	0002      	movs	r2, r0
 8002f28:	b570      	push	{r4, r5, r6, lr}
 8002f2a:	4d16      	ldr	r5, [pc, #88]	@ (8002f84 <__aeabi_d2iz+0x60>)
 8002f2c:	030c      	lsls	r4, r1, #12
 8002f2e:	b082      	sub	sp, #8
 8002f30:	0049      	lsls	r1, r1, #1
 8002f32:	2000      	movs	r0, #0
 8002f34:	9200      	str	r2, [sp, #0]
 8002f36:	9301      	str	r3, [sp, #4]
 8002f38:	0b24      	lsrs	r4, r4, #12
 8002f3a:	0d49      	lsrs	r1, r1, #21
 8002f3c:	0fde      	lsrs	r6, r3, #31
 8002f3e:	42a9      	cmp	r1, r5
 8002f40:	dd04      	ble.n	8002f4c <__aeabi_d2iz+0x28>
 8002f42:	4811      	ldr	r0, [pc, #68]	@ (8002f88 <__aeabi_d2iz+0x64>)
 8002f44:	4281      	cmp	r1, r0
 8002f46:	dd03      	ble.n	8002f50 <__aeabi_d2iz+0x2c>
 8002f48:	4b10      	ldr	r3, [pc, #64]	@ (8002f8c <__aeabi_d2iz+0x68>)
 8002f4a:	18f0      	adds	r0, r6, r3
 8002f4c:	b002      	add	sp, #8
 8002f4e:	bd70      	pop	{r4, r5, r6, pc}
 8002f50:	2080      	movs	r0, #128	@ 0x80
 8002f52:	0340      	lsls	r0, r0, #13
 8002f54:	4320      	orrs	r0, r4
 8002f56:	4c0e      	ldr	r4, [pc, #56]	@ (8002f90 <__aeabi_d2iz+0x6c>)
 8002f58:	1a64      	subs	r4, r4, r1
 8002f5a:	2c1f      	cmp	r4, #31
 8002f5c:	dd08      	ble.n	8002f70 <__aeabi_d2iz+0x4c>
 8002f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f94 <__aeabi_d2iz+0x70>)
 8002f60:	1a5b      	subs	r3, r3, r1
 8002f62:	40d8      	lsrs	r0, r3
 8002f64:	0003      	movs	r3, r0
 8002f66:	4258      	negs	r0, r3
 8002f68:	2e00      	cmp	r6, #0
 8002f6a:	d1ef      	bne.n	8002f4c <__aeabi_d2iz+0x28>
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	e7ed      	b.n	8002f4c <__aeabi_d2iz+0x28>
 8002f70:	4b09      	ldr	r3, [pc, #36]	@ (8002f98 <__aeabi_d2iz+0x74>)
 8002f72:	9a00      	ldr	r2, [sp, #0]
 8002f74:	469c      	mov	ip, r3
 8002f76:	0003      	movs	r3, r0
 8002f78:	4461      	add	r1, ip
 8002f7a:	408b      	lsls	r3, r1
 8002f7c:	40e2      	lsrs	r2, r4
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	e7f1      	b.n	8002f66 <__aeabi_d2iz+0x42>
 8002f82:	46c0      	nop			@ (mov r8, r8)
 8002f84:	000003fe 	.word	0x000003fe
 8002f88:	0000041d 	.word	0x0000041d
 8002f8c:	7fffffff 	.word	0x7fffffff
 8002f90:	00000433 	.word	0x00000433
 8002f94:	00000413 	.word	0x00000413
 8002f98:	fffffbed 	.word	0xfffffbed

08002f9c <__aeabi_i2d>:
 8002f9c:	b570      	push	{r4, r5, r6, lr}
 8002f9e:	2800      	cmp	r0, #0
 8002fa0:	d016      	beq.n	8002fd0 <__aeabi_i2d+0x34>
 8002fa2:	17c3      	asrs	r3, r0, #31
 8002fa4:	18c5      	adds	r5, r0, r3
 8002fa6:	405d      	eors	r5, r3
 8002fa8:	0fc4      	lsrs	r4, r0, #31
 8002faa:	0028      	movs	r0, r5
 8002fac:	f000 f914 	bl	80031d8 <__clzsi2>
 8002fb0:	4b10      	ldr	r3, [pc, #64]	@ (8002ff4 <__aeabi_i2d+0x58>)
 8002fb2:	1a1b      	subs	r3, r3, r0
 8002fb4:	055b      	lsls	r3, r3, #21
 8002fb6:	0d5b      	lsrs	r3, r3, #21
 8002fb8:	280a      	cmp	r0, #10
 8002fba:	dc14      	bgt.n	8002fe6 <__aeabi_i2d+0x4a>
 8002fbc:	0002      	movs	r2, r0
 8002fbe:	002e      	movs	r6, r5
 8002fc0:	3215      	adds	r2, #21
 8002fc2:	4096      	lsls	r6, r2
 8002fc4:	220b      	movs	r2, #11
 8002fc6:	1a12      	subs	r2, r2, r0
 8002fc8:	40d5      	lsrs	r5, r2
 8002fca:	032d      	lsls	r5, r5, #12
 8002fcc:	0b2d      	lsrs	r5, r5, #12
 8002fce:	e003      	b.n	8002fd8 <__aeabi_i2d+0x3c>
 8002fd0:	2400      	movs	r4, #0
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	2500      	movs	r5, #0
 8002fd6:	2600      	movs	r6, #0
 8002fd8:	051b      	lsls	r3, r3, #20
 8002fda:	432b      	orrs	r3, r5
 8002fdc:	07e4      	lsls	r4, r4, #31
 8002fde:	4323      	orrs	r3, r4
 8002fe0:	0030      	movs	r0, r6
 8002fe2:	0019      	movs	r1, r3
 8002fe4:	bd70      	pop	{r4, r5, r6, pc}
 8002fe6:	380b      	subs	r0, #11
 8002fe8:	4085      	lsls	r5, r0
 8002fea:	032d      	lsls	r5, r5, #12
 8002fec:	2600      	movs	r6, #0
 8002fee:	0b2d      	lsrs	r5, r5, #12
 8002ff0:	e7f2      	b.n	8002fd8 <__aeabi_i2d+0x3c>
 8002ff2:	46c0      	nop			@ (mov r8, r8)
 8002ff4:	0000041e 	.word	0x0000041e

08002ff8 <__aeabi_ui2d>:
 8002ff8:	b510      	push	{r4, lr}
 8002ffa:	1e04      	subs	r4, r0, #0
 8002ffc:	d010      	beq.n	8003020 <__aeabi_ui2d+0x28>
 8002ffe:	f000 f8eb 	bl	80031d8 <__clzsi2>
 8003002:	4b0e      	ldr	r3, [pc, #56]	@ (800303c <__aeabi_ui2d+0x44>)
 8003004:	1a1b      	subs	r3, r3, r0
 8003006:	055b      	lsls	r3, r3, #21
 8003008:	0d5b      	lsrs	r3, r3, #21
 800300a:	280a      	cmp	r0, #10
 800300c:	dc0f      	bgt.n	800302e <__aeabi_ui2d+0x36>
 800300e:	220b      	movs	r2, #11
 8003010:	0021      	movs	r1, r4
 8003012:	1a12      	subs	r2, r2, r0
 8003014:	40d1      	lsrs	r1, r2
 8003016:	3015      	adds	r0, #21
 8003018:	030a      	lsls	r2, r1, #12
 800301a:	4084      	lsls	r4, r0
 800301c:	0b12      	lsrs	r2, r2, #12
 800301e:	e001      	b.n	8003024 <__aeabi_ui2d+0x2c>
 8003020:	2300      	movs	r3, #0
 8003022:	2200      	movs	r2, #0
 8003024:	051b      	lsls	r3, r3, #20
 8003026:	4313      	orrs	r3, r2
 8003028:	0020      	movs	r0, r4
 800302a:	0019      	movs	r1, r3
 800302c:	bd10      	pop	{r4, pc}
 800302e:	0022      	movs	r2, r4
 8003030:	380b      	subs	r0, #11
 8003032:	4082      	lsls	r2, r0
 8003034:	0312      	lsls	r2, r2, #12
 8003036:	2400      	movs	r4, #0
 8003038:	0b12      	lsrs	r2, r2, #12
 800303a:	e7f3      	b.n	8003024 <__aeabi_ui2d+0x2c>
 800303c:	0000041e 	.word	0x0000041e

08003040 <__aeabi_f2d>:
 8003040:	b570      	push	{r4, r5, r6, lr}
 8003042:	0242      	lsls	r2, r0, #9
 8003044:	0043      	lsls	r3, r0, #1
 8003046:	0fc4      	lsrs	r4, r0, #31
 8003048:	20fe      	movs	r0, #254	@ 0xfe
 800304a:	0e1b      	lsrs	r3, r3, #24
 800304c:	1c59      	adds	r1, r3, #1
 800304e:	0a55      	lsrs	r5, r2, #9
 8003050:	4208      	tst	r0, r1
 8003052:	d00c      	beq.n	800306e <__aeabi_f2d+0x2e>
 8003054:	21e0      	movs	r1, #224	@ 0xe0
 8003056:	0089      	lsls	r1, r1, #2
 8003058:	468c      	mov	ip, r1
 800305a:	076d      	lsls	r5, r5, #29
 800305c:	0b12      	lsrs	r2, r2, #12
 800305e:	4463      	add	r3, ip
 8003060:	051b      	lsls	r3, r3, #20
 8003062:	4313      	orrs	r3, r2
 8003064:	07e4      	lsls	r4, r4, #31
 8003066:	4323      	orrs	r3, r4
 8003068:	0028      	movs	r0, r5
 800306a:	0019      	movs	r1, r3
 800306c:	bd70      	pop	{r4, r5, r6, pc}
 800306e:	2b00      	cmp	r3, #0
 8003070:	d114      	bne.n	800309c <__aeabi_f2d+0x5c>
 8003072:	2d00      	cmp	r5, #0
 8003074:	d01b      	beq.n	80030ae <__aeabi_f2d+0x6e>
 8003076:	0028      	movs	r0, r5
 8003078:	f000 f8ae 	bl	80031d8 <__clzsi2>
 800307c:	280a      	cmp	r0, #10
 800307e:	dc1c      	bgt.n	80030ba <__aeabi_f2d+0x7a>
 8003080:	230b      	movs	r3, #11
 8003082:	002a      	movs	r2, r5
 8003084:	1a1b      	subs	r3, r3, r0
 8003086:	40da      	lsrs	r2, r3
 8003088:	0003      	movs	r3, r0
 800308a:	3315      	adds	r3, #21
 800308c:	409d      	lsls	r5, r3
 800308e:	4b0e      	ldr	r3, [pc, #56]	@ (80030c8 <__aeabi_f2d+0x88>)
 8003090:	0312      	lsls	r2, r2, #12
 8003092:	1a1b      	subs	r3, r3, r0
 8003094:	055b      	lsls	r3, r3, #21
 8003096:	0b12      	lsrs	r2, r2, #12
 8003098:	0d5b      	lsrs	r3, r3, #21
 800309a:	e7e1      	b.n	8003060 <__aeabi_f2d+0x20>
 800309c:	2d00      	cmp	r5, #0
 800309e:	d009      	beq.n	80030b4 <__aeabi_f2d+0x74>
 80030a0:	0b13      	lsrs	r3, r2, #12
 80030a2:	2280      	movs	r2, #128	@ 0x80
 80030a4:	0312      	lsls	r2, r2, #12
 80030a6:	431a      	orrs	r2, r3
 80030a8:	076d      	lsls	r5, r5, #29
 80030aa:	4b08      	ldr	r3, [pc, #32]	@ (80030cc <__aeabi_f2d+0x8c>)
 80030ac:	e7d8      	b.n	8003060 <__aeabi_f2d+0x20>
 80030ae:	2300      	movs	r3, #0
 80030b0:	2200      	movs	r2, #0
 80030b2:	e7d5      	b.n	8003060 <__aeabi_f2d+0x20>
 80030b4:	2200      	movs	r2, #0
 80030b6:	4b05      	ldr	r3, [pc, #20]	@ (80030cc <__aeabi_f2d+0x8c>)
 80030b8:	e7d2      	b.n	8003060 <__aeabi_f2d+0x20>
 80030ba:	0003      	movs	r3, r0
 80030bc:	002a      	movs	r2, r5
 80030be:	3b0b      	subs	r3, #11
 80030c0:	409a      	lsls	r2, r3
 80030c2:	2500      	movs	r5, #0
 80030c4:	e7e3      	b.n	800308e <__aeabi_f2d+0x4e>
 80030c6:	46c0      	nop			@ (mov r8, r8)
 80030c8:	00000389 	.word	0x00000389
 80030cc:	000007ff 	.word	0x000007ff

080030d0 <__aeabi_d2f>:
 80030d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030d2:	004b      	lsls	r3, r1, #1
 80030d4:	030f      	lsls	r7, r1, #12
 80030d6:	0d5b      	lsrs	r3, r3, #21
 80030d8:	4c3b      	ldr	r4, [pc, #236]	@ (80031c8 <__aeabi_d2f+0xf8>)
 80030da:	0f45      	lsrs	r5, r0, #29
 80030dc:	b083      	sub	sp, #12
 80030de:	0a7f      	lsrs	r7, r7, #9
 80030e0:	1c5e      	adds	r6, r3, #1
 80030e2:	432f      	orrs	r7, r5
 80030e4:	9000      	str	r0, [sp, #0]
 80030e6:	9101      	str	r1, [sp, #4]
 80030e8:	0fca      	lsrs	r2, r1, #31
 80030ea:	00c5      	lsls	r5, r0, #3
 80030ec:	4226      	tst	r6, r4
 80030ee:	d00b      	beq.n	8003108 <__aeabi_d2f+0x38>
 80030f0:	4936      	ldr	r1, [pc, #216]	@ (80031cc <__aeabi_d2f+0xfc>)
 80030f2:	185c      	adds	r4, r3, r1
 80030f4:	2cfe      	cmp	r4, #254	@ 0xfe
 80030f6:	dd13      	ble.n	8003120 <__aeabi_d2f+0x50>
 80030f8:	20ff      	movs	r0, #255	@ 0xff
 80030fa:	2300      	movs	r3, #0
 80030fc:	05c0      	lsls	r0, r0, #23
 80030fe:	4318      	orrs	r0, r3
 8003100:	07d2      	lsls	r2, r2, #31
 8003102:	4310      	orrs	r0, r2
 8003104:	b003      	add	sp, #12
 8003106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003108:	2b00      	cmp	r3, #0
 800310a:	d102      	bne.n	8003112 <__aeabi_d2f+0x42>
 800310c:	2000      	movs	r0, #0
 800310e:	2300      	movs	r3, #0
 8003110:	e7f4      	b.n	80030fc <__aeabi_d2f+0x2c>
 8003112:	433d      	orrs	r5, r7
 8003114:	d0f0      	beq.n	80030f8 <__aeabi_d2f+0x28>
 8003116:	2380      	movs	r3, #128	@ 0x80
 8003118:	03db      	lsls	r3, r3, #15
 800311a:	20ff      	movs	r0, #255	@ 0xff
 800311c:	433b      	orrs	r3, r7
 800311e:	e7ed      	b.n	80030fc <__aeabi_d2f+0x2c>
 8003120:	2c00      	cmp	r4, #0
 8003122:	dd14      	ble.n	800314e <__aeabi_d2f+0x7e>
 8003124:	9b00      	ldr	r3, [sp, #0]
 8003126:	00ff      	lsls	r7, r7, #3
 8003128:	019b      	lsls	r3, r3, #6
 800312a:	1e58      	subs	r0, r3, #1
 800312c:	4183      	sbcs	r3, r0
 800312e:	0f69      	lsrs	r1, r5, #29
 8003130:	433b      	orrs	r3, r7
 8003132:	430b      	orrs	r3, r1
 8003134:	0759      	lsls	r1, r3, #29
 8003136:	d041      	beq.n	80031bc <__aeabi_d2f+0xec>
 8003138:	210f      	movs	r1, #15
 800313a:	4019      	ands	r1, r3
 800313c:	2904      	cmp	r1, #4
 800313e:	d028      	beq.n	8003192 <__aeabi_d2f+0xc2>
 8003140:	3304      	adds	r3, #4
 8003142:	0159      	lsls	r1, r3, #5
 8003144:	d525      	bpl.n	8003192 <__aeabi_d2f+0xc2>
 8003146:	3401      	adds	r4, #1
 8003148:	2300      	movs	r3, #0
 800314a:	b2e0      	uxtb	r0, r4
 800314c:	e7d6      	b.n	80030fc <__aeabi_d2f+0x2c>
 800314e:	0021      	movs	r1, r4
 8003150:	3117      	adds	r1, #23
 8003152:	dbdb      	blt.n	800310c <__aeabi_d2f+0x3c>
 8003154:	2180      	movs	r1, #128	@ 0x80
 8003156:	201e      	movs	r0, #30
 8003158:	0409      	lsls	r1, r1, #16
 800315a:	4339      	orrs	r1, r7
 800315c:	1b00      	subs	r0, r0, r4
 800315e:	281f      	cmp	r0, #31
 8003160:	dd1b      	ble.n	800319a <__aeabi_d2f+0xca>
 8003162:	2602      	movs	r6, #2
 8003164:	4276      	negs	r6, r6
 8003166:	1b34      	subs	r4, r6, r4
 8003168:	000e      	movs	r6, r1
 800316a:	40e6      	lsrs	r6, r4
 800316c:	0034      	movs	r4, r6
 800316e:	2820      	cmp	r0, #32
 8003170:	d004      	beq.n	800317c <__aeabi_d2f+0xac>
 8003172:	4817      	ldr	r0, [pc, #92]	@ (80031d0 <__aeabi_d2f+0x100>)
 8003174:	4684      	mov	ip, r0
 8003176:	4463      	add	r3, ip
 8003178:	4099      	lsls	r1, r3
 800317a:	430d      	orrs	r5, r1
 800317c:	002b      	movs	r3, r5
 800317e:	1e59      	subs	r1, r3, #1
 8003180:	418b      	sbcs	r3, r1
 8003182:	4323      	orrs	r3, r4
 8003184:	0759      	lsls	r1, r3, #29
 8003186:	d015      	beq.n	80031b4 <__aeabi_d2f+0xe4>
 8003188:	210f      	movs	r1, #15
 800318a:	2400      	movs	r4, #0
 800318c:	4019      	ands	r1, r3
 800318e:	2904      	cmp	r1, #4
 8003190:	d117      	bne.n	80031c2 <__aeabi_d2f+0xf2>
 8003192:	019b      	lsls	r3, r3, #6
 8003194:	0a5b      	lsrs	r3, r3, #9
 8003196:	b2e0      	uxtb	r0, r4
 8003198:	e7b0      	b.n	80030fc <__aeabi_d2f+0x2c>
 800319a:	4c0e      	ldr	r4, [pc, #56]	@ (80031d4 <__aeabi_d2f+0x104>)
 800319c:	191c      	adds	r4, r3, r4
 800319e:	002b      	movs	r3, r5
 80031a0:	40a5      	lsls	r5, r4
 80031a2:	40c3      	lsrs	r3, r0
 80031a4:	40a1      	lsls	r1, r4
 80031a6:	1e68      	subs	r0, r5, #1
 80031a8:	4185      	sbcs	r5, r0
 80031aa:	4329      	orrs	r1, r5
 80031ac:	430b      	orrs	r3, r1
 80031ae:	2400      	movs	r4, #0
 80031b0:	0759      	lsls	r1, r3, #29
 80031b2:	d1c1      	bne.n	8003138 <__aeabi_d2f+0x68>
 80031b4:	019b      	lsls	r3, r3, #6
 80031b6:	2000      	movs	r0, #0
 80031b8:	0a5b      	lsrs	r3, r3, #9
 80031ba:	e79f      	b.n	80030fc <__aeabi_d2f+0x2c>
 80031bc:	08db      	lsrs	r3, r3, #3
 80031be:	b2e0      	uxtb	r0, r4
 80031c0:	e79c      	b.n	80030fc <__aeabi_d2f+0x2c>
 80031c2:	3304      	adds	r3, #4
 80031c4:	e7e5      	b.n	8003192 <__aeabi_d2f+0xc2>
 80031c6:	46c0      	nop			@ (mov r8, r8)
 80031c8:	000007fe 	.word	0x000007fe
 80031cc:	fffffc80 	.word	0xfffffc80
 80031d0:	fffffca2 	.word	0xfffffca2
 80031d4:	fffffc82 	.word	0xfffffc82

080031d8 <__clzsi2>:
 80031d8:	211c      	movs	r1, #28
 80031da:	2301      	movs	r3, #1
 80031dc:	041b      	lsls	r3, r3, #16
 80031de:	4298      	cmp	r0, r3
 80031e0:	d301      	bcc.n	80031e6 <__clzsi2+0xe>
 80031e2:	0c00      	lsrs	r0, r0, #16
 80031e4:	3910      	subs	r1, #16
 80031e6:	0a1b      	lsrs	r3, r3, #8
 80031e8:	4298      	cmp	r0, r3
 80031ea:	d301      	bcc.n	80031f0 <__clzsi2+0x18>
 80031ec:	0a00      	lsrs	r0, r0, #8
 80031ee:	3908      	subs	r1, #8
 80031f0:	091b      	lsrs	r3, r3, #4
 80031f2:	4298      	cmp	r0, r3
 80031f4:	d301      	bcc.n	80031fa <__clzsi2+0x22>
 80031f6:	0900      	lsrs	r0, r0, #4
 80031f8:	3904      	subs	r1, #4
 80031fa:	a202      	add	r2, pc, #8	@ (adr r2, 8003204 <__clzsi2+0x2c>)
 80031fc:	5c10      	ldrb	r0, [r2, r0]
 80031fe:	1840      	adds	r0, r0, r1
 8003200:	4770      	bx	lr
 8003202:	46c0      	nop			@ (mov r8, r8)
 8003204:	02020304 	.word	0x02020304
 8003208:	01010101 	.word	0x01010101
	...

08003214 <__clzdi2>:
 8003214:	b510      	push	{r4, lr}
 8003216:	2900      	cmp	r1, #0
 8003218:	d103      	bne.n	8003222 <__clzdi2+0xe>
 800321a:	f7ff ffdd 	bl	80031d8 <__clzsi2>
 800321e:	3020      	adds	r0, #32
 8003220:	e002      	b.n	8003228 <__clzdi2+0x14>
 8003222:	0008      	movs	r0, r1
 8003224:	f7ff ffd8 	bl	80031d8 <__clzsi2>
 8003228:	bd10      	pop	{r4, pc}
 800322a:	46c0      	nop			@ (mov r8, r8)

0800322c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4a06      	ldr	r2, [pc, #24]	@ (8003254 <vApplicationGetIdleTaskMemory+0x28>)
 800323c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	4a05      	ldr	r2, [pc, #20]	@ (8003258 <vApplicationGetIdleTaskMemory+0x2c>)
 8003242:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2280      	movs	r2, #128	@ 0x80
 8003248:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800324a:	46c0      	nop			@ (mov r8, r8)
 800324c:	46bd      	mov	sp, r7
 800324e:	b004      	add	sp, #16
 8003250:	bd80      	pop	{r7, pc}
 8003252:	46c0      	nop			@ (mov r8, r8)
 8003254:	2000020c 	.word	0x2000020c
 8003258:	20000260 	.word	0x20000260

0800325c <__io_putchar>:
SemaphoreHandle_t sem1Handle;
/* USER CODE BEGIN PV */

// printf() function
int __io_putchar(int ch)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint8_t temp = ch;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	b2da      	uxtb	r2, r3
 8003268:	210f      	movs	r1, #15
 800326a:	187b      	adds	r3, r7, r1
 800326c:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, &temp, 1, HAL_MAX_DELAY);
 800326e:	2301      	movs	r3, #1
 8003270:	425b      	negs	r3, r3
 8003272:	1879      	adds	r1, r7, r1
 8003274:	4804      	ldr	r0, [pc, #16]	@ (8003288 <__io_putchar+0x2c>)
 8003276:	2201      	movs	r2, #1
 8003278:	f004 fa1e 	bl	80076b8 <HAL_UART_Transmit>
  return ch;
 800327c:	687b      	ldr	r3, [r7, #4]
}
 800327e:	0018      	movs	r0, r3
 8003280:	46bd      	mov	sp, r7
 8003282:	b004      	add	sp, #16
 8003284:	bd80      	pop	{r7, pc}
 8003286:	46c0      	nop			@ (mov r8, r8)
 8003288:	2000050c 	.word	0x2000050c

0800328c <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 800328c:	b40f      	push	{r0, r1, r2, r3}
 800328e:	b580      	push	{r7, lr}
 8003290:	b082      	sub	sp, #8
 8003292:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8003294:	2314      	movs	r3, #20
 8003296:	18fb      	adds	r3, r7, r3
 8003298:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	2180      	movs	r1, #128	@ 0x80
 80032a0:	0049      	lsls	r1, r1, #1
 80032a2:	480c      	ldr	r0, [pc, #48]	@ (80032d4 <myprintf+0x48>)
 80032a4:	f008 f8be 	bl	800b424 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80032a8:	4b0a      	ldr	r3, [pc, #40]	@ (80032d4 <myprintf+0x48>)
 80032aa:	0018      	movs	r0, r3
 80032ac:	f7fc ff2c 	bl	8000108 <strlen>
 80032b0:	0003      	movs	r3, r0
 80032b2:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	2301      	movs	r3, #1
 80032ba:	425b      	negs	r3, r3
 80032bc:	4905      	ldr	r1, [pc, #20]	@ (80032d4 <myprintf+0x48>)
 80032be:	4806      	ldr	r0, [pc, #24]	@ (80032d8 <myprintf+0x4c>)
 80032c0:	f004 f9fa 	bl	80076b8 <HAL_UART_Transmit>

}
 80032c4:	46c0      	nop			@ (mov r8, r8)
 80032c6:	46bd      	mov	sp, r7
 80032c8:	b002      	add	sp, #8
 80032ca:	bc80      	pop	{r7}
 80032cc:	bc08      	pop	{r3}
 80032ce:	b004      	add	sp, #16
 80032d0:	4718      	bx	r3
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	200006a4 	.word	0x200006a4
 80032d8:	2000050c 	.word	0x2000050c

080032dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80032dc:	b5b0      	push	{r4, r5, r7, lr}
 80032de:	b0a6      	sub	sp, #152	@ 0x98
 80032e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80032e2:	f001 fa81 	bl	80047e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80032e6:	f000 f8b5 	bl	8003454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80032ea:	f000 f9c9 	bl	8003680 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80032ee:	f000 f997 	bl	8003620 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80032f2:	f000 f95d 	bl	80035b0 <MX_SPI2_Init>
  MX_FATFS_Init();
 80032f6:	f004 ff47 	bl	8008188 <MX_FATFS_Init>
  MX_I2C1_Init();
 80032fa:	f000 f919 	bl	8003530 <MX_I2C1_Init>
//    //Be a tidy kiwi - don't forget to close your file!
//    f_close(&fil);


    // Initiation Sensor
    max30102_init(&max30102, &hi2c1);
 80032fe:	4a4d      	ldr	r2, [pc, #308]	@ (8003434 <main+0x158>)
 8003300:	4b4d      	ldr	r3, [pc, #308]	@ (8003438 <main+0x15c>)
 8003302:	0011      	movs	r1, r2
 8003304:	0018      	movs	r0, r3
 8003306:	f000 fae6 	bl	80038d6 <max30102_init>
  	max30102_reset(&max30102);
 800330a:	4b4b      	ldr	r3, [pc, #300]	@ (8003438 <main+0x15c>)
 800330c:	0018      	movs	r0, r3
 800330e:	f000 fb70 	bl	80039f2 <max30102_reset>
  	max30102_clear_fifo(&max30102);
 8003312:	4b49      	ldr	r3, [pc, #292]	@ (8003438 <main+0x15c>)
 8003314:	0018      	movs	r0, r3
 8003316:	f000 fd82 	bl	8003e1e <max30102_clear_fifo>
  	max30102_set_fifo_config(&max30102, max30102_smp_ave_8, 1, 7);
 800331a:	4847      	ldr	r0, [pc, #284]	@ (8003438 <main+0x15c>)
 800331c:	2307      	movs	r3, #7
 800331e:	2201      	movs	r2, #1
 8003320:	2103      	movs	r1, #3
 8003322:	f000 fd35 	bl	8003d90 <max30102_set_fifo_config>

  	// Sensor settings
  	max30102_set_led_pulse_width(&max30102, max30102_pw_16_bit);
 8003326:	4b44      	ldr	r3, [pc, #272]	@ (8003438 <main+0x15c>)
 8003328:	2101      	movs	r1, #1
 800332a:	0018      	movs	r0, r3
 800332c:	f000 fc95 	bl	8003c5a <max30102_set_led_pulse_width>
  	max30102_set_adc_resolution(&max30102, max30102_adc_2048);
 8003330:	4b41      	ldr	r3, [pc, #260]	@ (8003438 <main+0x15c>)
 8003332:	2100      	movs	r1, #0
 8003334:	0018      	movs	r0, r3
 8003336:	f000 fcb7 	bl	8003ca8 <max30102_set_adc_resolution>
  	max30102_set_sampling_rate(&max30102, max30102_sr_800);
 800333a:	4b3f      	ldr	r3, [pc, #252]	@ (8003438 <main+0x15c>)
 800333c:	2104      	movs	r1, #4
 800333e:	0018      	movs	r0, r3
 8003340:	f000 fc63 	bl	8003c0a <max30102_set_sampling_rate>
  	max30102_set_led_current_1(&max30102, 6.2);
 8003344:	4a3d      	ldr	r2, [pc, #244]	@ (800343c <main+0x160>)
 8003346:	4b3c      	ldr	r3, [pc, #240]	@ (8003438 <main+0x15c>)
 8003348:	1c11      	adds	r1, r2, #0
 800334a:	0018      	movs	r0, r3
 800334c:	f000 fcd4 	bl	8003cf8 <max30102_set_led_current_1>
  	max30102_set_led_current_2(&max30102, 6.2);
 8003350:	4a3a      	ldr	r2, [pc, #232]	@ (800343c <main+0x160>)
 8003352:	4b39      	ldr	r3, [pc, #228]	@ (8003438 <main+0x15c>)
 8003354:	1c11      	adds	r1, r2, #0
 8003356:	0018      	movs	r0, r3
 8003358:	f000 fcf4 	bl	8003d44 <max30102_set_led_current_2>

  	// Enter SpO2 mode
  	max30102_set_mode(&max30102, max30102_spo2);
 800335c:	4b36      	ldr	r3, [pc, #216]	@ (8003438 <main+0x15c>)
 800335e:	2103      	movs	r1, #3
 8003360:	0018      	movs	r0, r3
 8003362:	f000 fc27 	bl	8003bb4 <max30102_set_mode>
  	max30102_set_a_full(&max30102, 1);
 8003366:	4b34      	ldr	r3, [pc, #208]	@ (8003438 <main+0x15c>)
 8003368:	2101      	movs	r1, #1
 800336a:	0018      	movs	r0, r3
 800336c:	f000 fb53 	bl	8003a16 <max30102_set_a_full>

  	// Initiate 1 temperature measurement
  	max30102_set_die_temp_en(&max30102, 1);
 8003370:	4b31      	ldr	r3, [pc, #196]	@ (8003438 <main+0x15c>)
 8003372:	2101      	movs	r1, #1
 8003374:	0018      	movs	r0, r3
 8003376:	f000 fb99 	bl	8003aac <max30102_set_die_temp_en>
  	max30102_set_die_temp_rdy(&max30102, 1);
 800337a:	4b2f      	ldr	r3, [pc, #188]	@ (8003438 <main+0x15c>)
 800337c:	2101      	movs	r1, #1
 800337e:	0018      	movs	r0, r3
 8003380:	f000 fb79 	bl	8003a76 <max30102_set_die_temp_rdy>

  	uint8_t en_reg[2] = {0};
 8003384:	218c      	movs	r1, #140	@ 0x8c
 8003386:	187b      	adds	r3, r7, r1
 8003388:	2200      	movs	r2, #0
 800338a:	801a      	strh	r2, [r3, #0]
  	max30102_read(&max30102, 0x00, en_reg, 1);
 800338c:	187a      	adds	r2, r7, r1
 800338e:	482a      	ldr	r0, [pc, #168]	@ (8003438 <main+0x15c>)
 8003390:	2301      	movs	r3, #1
 8003392:	2100      	movs	r1, #0
 8003394:	f000 faff 	bl	8003996 <max30102_read>
    initialize_filters_1();
 8003398:	f000 ff46 	bl	8004228 <initialize_filters_1>
    initialize_filters_2();
 800339c:	f000 ff6e 	bl	800427c <initialize_filters_2>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of sem1 */
    sem1Handle = xSemaphoreCreateBinary();
 80033a0:	2203      	movs	r2, #3
 80033a2:	2100      	movs	r1, #0
 80033a4:	2001      	movs	r0, #1
 80033a6:	f005 fea7 	bl	80090f8 <xQueueGenericCreate>
 80033aa:	0002      	movs	r2, r0
 80033ac:	4b24      	ldr	r3, [pc, #144]	@ (8003440 <main+0x164>)
 80033ae:	601a      	str	r2, [r3, #0]
    if(sem1Handle==NULL){
 80033b0:	4b23      	ldr	r3, [pc, #140]	@ (8003440 <main+0x164>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d103      	bne.n	80033c0 <main+0xe4>
    	printf("LOL");
 80033b8:	4b22      	ldr	r3, [pc, #136]	@ (8003444 <main+0x168>)
 80033ba:	0018      	movs	r0, r3
 80033bc:	f008 f83e 	bl	800b43c <iprintf>
  /* definition and creation of Logger */
//  osThreadDef(Logger, sLogger, osPriorityHigh, 0, 128);
//  LoggerHandle = osThreadCreate(osThread(Logger), NULL);

  /* definition and creation of Handler */
  osThreadDef(Handler, sHandler, osPriorityHigh, 0, 128);
 80033c0:	2570      	movs	r5, #112	@ 0x70
 80033c2:	197b      	adds	r3, r7, r5
 80033c4:	4a20      	ldr	r2, [pc, #128]	@ (8003448 <main+0x16c>)
 80033c6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80033c8:	c313      	stmia	r3!, {r0, r1, r4}
 80033ca:	ca13      	ldmia	r2!, {r0, r1, r4}
 80033cc:	c313      	stmia	r3!, {r0, r1, r4}
 80033ce:	6812      	ldr	r2, [r2, #0]
 80033d0:	601a      	str	r2, [r3, #0]
  HandlerHandle = osThreadCreate(osThread(Handler), NULL);
 80033d2:	197b      	adds	r3, r7, r5
 80033d4:	2100      	movs	r1, #0
 80033d6:	0018      	movs	r0, r3
 80033d8:	f005 fd43 	bl	8008e62 <osThreadCreate>
 80033dc:	0002      	movs	r2, r0
 80033de:	4b1b      	ldr	r3, [pc, #108]	@ (800344c <main+0x170>)
 80033e0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80033e2:	f005 fd36 	bl	8008e52 <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Max30102Samples samples = max30102_read_fifo(&max30102);
 80033e6:	2468      	movs	r4, #104	@ 0x68
 80033e8:	193b      	adds	r3, r7, r4
 80033ea:	4a13      	ldr	r2, [pc, #76]	@ (8003438 <main+0x15c>)
 80033ec:	0011      	movs	r1, r2
 80033ee:	0018      	movs	r0, r3
 80033f0:	f000 fd34 	bl	8003e5c <max30102_read_fifo>
	  uint32_t latest_red_value = samples.red_sample;
 80033f4:	0022      	movs	r2, r4
 80033f6:	18bb      	adds	r3, r7, r2
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2194      	movs	r1, #148	@ 0x94
 80033fc:	1879      	adds	r1, r7, r1
 80033fe:	600b      	str	r3, [r1, #0]
	  uint32_t latest_ir_value = samples.ir_sample;
 8003400:	18bb      	adds	r3, r7, r2
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2290      	movs	r2, #144	@ 0x90
 8003406:	18ba      	adds	r2, r7, r2
 8003408:	6013      	str	r3, [r2, #0]
//	      }
//	    }


	// Part 4: Temperature Interrupt, Write and Read
	  if (max30102_has_interrupt(&max30102)){
 800340a:	4b0b      	ldr	r3, [pc, #44]	@ (8003438 <main+0x15c>)
 800340c:	0018      	movs	r0, r3
 800340e:	f000 fb73 	bl	8003af8 <max30102_has_interrupt>
 8003412:	1e03      	subs	r3, r0, #0
 8003414:	d0e7      	beq.n	80033e6 <main+0x10a>
	 		  // Run interrupt handler to read FIFO
	 		  printf("%.2f\r\n",max30102_interrupt_handler(&max30102));
 8003416:	4b08      	ldr	r3, [pc, #32]	@ (8003438 <main+0x15c>)
 8003418:	0018      	movs	r0, r3
 800341a:	f000 fb79 	bl	8003b10 <max30102_interrupt_handler>
 800341e:	1c03      	adds	r3, r0, #0
 8003420:	1c18      	adds	r0, r3, #0
 8003422:	f7ff fe0d 	bl	8003040 <__aeabi_f2d>
 8003426:	0002      	movs	r2, r0
 8003428:	000b      	movs	r3, r1
 800342a:	4909      	ldr	r1, [pc, #36]	@ (8003450 <main+0x174>)
 800342c:	0008      	movs	r0, r1
 800342e:	f008 f805 	bl	800b43c <iprintf>
  {
 8003432:	e7d8      	b.n	80033e6 <main+0x10a>
 8003434:	20000460 	.word	0x20000460
 8003438:	2000059c 	.word	0x2000059c
 800343c:	40c66666 	.word	0x40c66666
 8003440:	20000598 	.word	0x20000598
 8003444:	0800da28 	.word	0x0800da28
 8003448:	0800da3c 	.word	0x0800da3c
 800344c:	20000594 	.word	0x20000594
 8003450:	0800da2c 	.word	0x0800da2c

08003454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003454:	b590      	push	{r4, r7, lr}
 8003456:	b09f      	sub	sp, #124	@ 0x7c
 8003458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800345a:	2440      	movs	r4, #64	@ 0x40
 800345c:	193b      	adds	r3, r7, r4
 800345e:	0018      	movs	r0, r3
 8003460:	2338      	movs	r3, #56	@ 0x38
 8003462:	001a      	movs	r2, r3
 8003464:	2100      	movs	r1, #0
 8003466:	f007 fff9 	bl	800b45c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800346a:	232c      	movs	r3, #44	@ 0x2c
 800346c:	18fb      	adds	r3, r7, r3
 800346e:	0018      	movs	r0, r3
 8003470:	2314      	movs	r3, #20
 8003472:	001a      	movs	r2, r3
 8003474:	2100      	movs	r1, #0
 8003476:	f007 fff1 	bl	800b45c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800347a:	1d3b      	adds	r3, r7, #4
 800347c:	0018      	movs	r0, r3
 800347e:	2328      	movs	r3, #40	@ 0x28
 8003480:	001a      	movs	r2, r3
 8003482:	2100      	movs	r1, #0
 8003484:	f007 ffea 	bl	800b45c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003488:	4b27      	ldr	r3, [pc, #156]	@ (8003528 <SystemClock_Config+0xd4>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a27      	ldr	r2, [pc, #156]	@ (800352c <SystemClock_Config+0xd8>)
 800348e:	401a      	ands	r2, r3
 8003490:	4b25      	ldr	r3, [pc, #148]	@ (8003528 <SystemClock_Config+0xd4>)
 8003492:	2180      	movs	r1, #128	@ 0x80
 8003494:	0109      	lsls	r1, r1, #4
 8003496:	430a      	orrs	r2, r1
 8003498:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800349a:	0021      	movs	r1, r4
 800349c:	187b      	adds	r3, r7, r1
 800349e:	2210      	movs	r2, #16
 80034a0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80034a2:	187b      	adds	r3, r7, r1
 80034a4:	2201      	movs	r2, #1
 80034a6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80034a8:	187b      	adds	r3, r7, r1
 80034aa:	2200      	movs	r2, #0
 80034ac:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80034ae:	187b      	adds	r3, r7, r1
 80034b0:	22a0      	movs	r2, #160	@ 0xa0
 80034b2:	0212      	lsls	r2, r2, #8
 80034b4:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80034b6:	187b      	adds	r3, r7, r1
 80034b8:	2200      	movs	r2, #0
 80034ba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034bc:	187b      	adds	r3, r7, r1
 80034be:	0018      	movs	r0, r3
 80034c0:	f002 fa4e 	bl	8005960 <HAL_RCC_OscConfig>
 80034c4:	1e03      	subs	r3, r0, #0
 80034c6:	d001      	beq.n	80034cc <SystemClock_Config+0x78>
  {
    Error_Handler();
 80034c8:	f000 f9f6 	bl	80038b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034cc:	212c      	movs	r1, #44	@ 0x2c
 80034ce:	187b      	adds	r3, r7, r1
 80034d0:	220f      	movs	r2, #15
 80034d2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80034d4:	187b      	adds	r3, r7, r1
 80034d6:	2200      	movs	r2, #0
 80034d8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034da:	187b      	adds	r3, r7, r1
 80034dc:	2200      	movs	r2, #0
 80034de:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80034e0:	187b      	adds	r3, r7, r1
 80034e2:	2200      	movs	r2, #0
 80034e4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034e6:	187b      	adds	r3, r7, r1
 80034e8:	2200      	movs	r2, #0
 80034ea:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80034ec:	187b      	adds	r3, r7, r1
 80034ee:	2100      	movs	r1, #0
 80034f0:	0018      	movs	r0, r3
 80034f2:	f002 fe09 	bl	8006108 <HAL_RCC_ClockConfig>
 80034f6:	1e03      	subs	r3, r0, #0
 80034f8:	d001      	beq.n	80034fe <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80034fa:	f000 f9dd 	bl	80038b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80034fe:	1d3b      	adds	r3, r7, #4
 8003500:	220a      	movs	r2, #10
 8003502:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003504:	1d3b      	adds	r3, r7, #4
 8003506:	2200      	movs	r2, #0
 8003508:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800350a:	1d3b      	adds	r3, r7, #4
 800350c:	2200      	movs	r2, #0
 800350e:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003510:	1d3b      	adds	r3, r7, #4
 8003512:	0018      	movs	r0, r3
 8003514:	f003 f84e 	bl	80065b4 <HAL_RCCEx_PeriphCLKConfig>
 8003518:	1e03      	subs	r3, r0, #0
 800351a:	d001      	beq.n	8003520 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800351c:	f000 f9cc 	bl	80038b8 <Error_Handler>
  }
}
 8003520:	46c0      	nop			@ (mov r8, r8)
 8003522:	46bd      	mov	sp, r7
 8003524:	b01f      	add	sp, #124	@ 0x7c
 8003526:	bd90      	pop	{r4, r7, pc}
 8003528:	40007000 	.word	0x40007000
 800352c:	ffffe7ff 	.word	0xffffe7ff

08003530 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003534:	4b1c      	ldr	r3, [pc, #112]	@ (80035a8 <MX_I2C1_Init+0x78>)
 8003536:	4a1d      	ldr	r2, [pc, #116]	@ (80035ac <MX_I2C1_Init+0x7c>)
 8003538:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 800353a:	4b1b      	ldr	r3, [pc, #108]	@ (80035a8 <MX_I2C1_Init+0x78>)
 800353c:	22c1      	movs	r2, #193	@ 0xc1
 800353e:	00d2      	lsls	r2, r2, #3
 8003540:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003542:	4b19      	ldr	r3, [pc, #100]	@ (80035a8 <MX_I2C1_Init+0x78>)
 8003544:	2200      	movs	r2, #0
 8003546:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003548:	4b17      	ldr	r3, [pc, #92]	@ (80035a8 <MX_I2C1_Init+0x78>)
 800354a:	2201      	movs	r2, #1
 800354c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800354e:	4b16      	ldr	r3, [pc, #88]	@ (80035a8 <MX_I2C1_Init+0x78>)
 8003550:	2200      	movs	r2, #0
 8003552:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003554:	4b14      	ldr	r3, [pc, #80]	@ (80035a8 <MX_I2C1_Init+0x78>)
 8003556:	2200      	movs	r2, #0
 8003558:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800355a:	4b13      	ldr	r3, [pc, #76]	@ (80035a8 <MX_I2C1_Init+0x78>)
 800355c:	2200      	movs	r2, #0
 800355e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003560:	4b11      	ldr	r3, [pc, #68]	@ (80035a8 <MX_I2C1_Init+0x78>)
 8003562:	2200      	movs	r2, #0
 8003564:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003566:	4b10      	ldr	r3, [pc, #64]	@ (80035a8 <MX_I2C1_Init+0x78>)
 8003568:	2200      	movs	r2, #0
 800356a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800356c:	4b0e      	ldr	r3, [pc, #56]	@ (80035a8 <MX_I2C1_Init+0x78>)
 800356e:	0018      	movs	r0, r3
 8003570:	f001 fc0a 	bl	8004d88 <HAL_I2C_Init>
 8003574:	1e03      	subs	r3, r0, #0
 8003576:	d001      	beq.n	800357c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003578:	f000 f99e 	bl	80038b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800357c:	4b0a      	ldr	r3, [pc, #40]	@ (80035a8 <MX_I2C1_Init+0x78>)
 800357e:	2100      	movs	r1, #0
 8003580:	0018      	movs	r0, r3
 8003582:	f002 f955 	bl	8005830 <HAL_I2CEx_ConfigAnalogFilter>
 8003586:	1e03      	subs	r3, r0, #0
 8003588:	d001      	beq.n	800358e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800358a:	f000 f995 	bl	80038b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800358e:	4b06      	ldr	r3, [pc, #24]	@ (80035a8 <MX_I2C1_Init+0x78>)
 8003590:	2100      	movs	r1, #0
 8003592:	0018      	movs	r0, r3
 8003594:	f002 f998 	bl	80058c8 <HAL_I2CEx_ConfigDigitalFilter>
 8003598:	1e03      	subs	r3, r0, #0
 800359a:	d001      	beq.n	80035a0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800359c:	f000 f98c 	bl	80038b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80035a0:	46c0      	nop			@ (mov r8, r8)
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	46c0      	nop			@ (mov r8, r8)
 80035a8:	20000460 	.word	0x20000460
 80035ac:	40005400 	.word	0x40005400

080035b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80035b4:	4b18      	ldr	r3, [pc, #96]	@ (8003618 <MX_SPI2_Init+0x68>)
 80035b6:	4a19      	ldr	r2, [pc, #100]	@ (800361c <MX_SPI2_Init+0x6c>)
 80035b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80035ba:	4b17      	ldr	r3, [pc, #92]	@ (8003618 <MX_SPI2_Init+0x68>)
 80035bc:	2282      	movs	r2, #130	@ 0x82
 80035be:	0052      	lsls	r2, r2, #1
 80035c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80035c2:	4b15      	ldr	r3, [pc, #84]	@ (8003618 <MX_SPI2_Init+0x68>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80035c8:	4b13      	ldr	r3, [pc, #76]	@ (8003618 <MX_SPI2_Init+0x68>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80035ce:	4b12      	ldr	r3, [pc, #72]	@ (8003618 <MX_SPI2_Init+0x68>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80035d4:	4b10      	ldr	r3, [pc, #64]	@ (8003618 <MX_SPI2_Init+0x68>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80035da:	4b0f      	ldr	r3, [pc, #60]	@ (8003618 <MX_SPI2_Init+0x68>)
 80035dc:	2280      	movs	r2, #128	@ 0x80
 80035de:	0092      	lsls	r2, r2, #2
 80035e0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80035e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003618 <MX_SPI2_Init+0x68>)
 80035e4:	2230      	movs	r2, #48	@ 0x30
 80035e6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003618 <MX_SPI2_Init+0x68>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80035ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003618 <MX_SPI2_Init+0x68>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035f4:	4b08      	ldr	r3, [pc, #32]	@ (8003618 <MX_SPI2_Init+0x68>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80035fa:	4b07      	ldr	r3, [pc, #28]	@ (8003618 <MX_SPI2_Init+0x68>)
 80035fc:	2207      	movs	r2, #7
 80035fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003600:	4b05      	ldr	r3, [pc, #20]	@ (8003618 <MX_SPI2_Init+0x68>)
 8003602:	0018      	movs	r0, r3
 8003604:	f003 f974 	bl	80068f0 <HAL_SPI_Init>
 8003608:	1e03      	subs	r3, r0, #0
 800360a:	d001      	beq.n	8003610 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800360c:	f000 f954 	bl	80038b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003610:	46c0      	nop			@ (mov r8, r8)
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	46c0      	nop			@ (mov r8, r8)
 8003618:	200004b4 	.word	0x200004b4
 800361c:	40003800 	.word	0x40003800

08003620 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003624:	4b14      	ldr	r3, [pc, #80]	@ (8003678 <MX_USART2_UART_Init+0x58>)
 8003626:	4a15      	ldr	r2, [pc, #84]	@ (800367c <MX_USART2_UART_Init+0x5c>)
 8003628:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800362a:	4b13      	ldr	r3, [pc, #76]	@ (8003678 <MX_USART2_UART_Init+0x58>)
 800362c:	22e1      	movs	r2, #225	@ 0xe1
 800362e:	0252      	lsls	r2, r2, #9
 8003630:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003632:	4b11      	ldr	r3, [pc, #68]	@ (8003678 <MX_USART2_UART_Init+0x58>)
 8003634:	2200      	movs	r2, #0
 8003636:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003638:	4b0f      	ldr	r3, [pc, #60]	@ (8003678 <MX_USART2_UART_Init+0x58>)
 800363a:	2200      	movs	r2, #0
 800363c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800363e:	4b0e      	ldr	r3, [pc, #56]	@ (8003678 <MX_USART2_UART_Init+0x58>)
 8003640:	2200      	movs	r2, #0
 8003642:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003644:	4b0c      	ldr	r3, [pc, #48]	@ (8003678 <MX_USART2_UART_Init+0x58>)
 8003646:	220c      	movs	r2, #12
 8003648:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800364a:	4b0b      	ldr	r3, [pc, #44]	@ (8003678 <MX_USART2_UART_Init+0x58>)
 800364c:	2200      	movs	r2, #0
 800364e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003650:	4b09      	ldr	r3, [pc, #36]	@ (8003678 <MX_USART2_UART_Init+0x58>)
 8003652:	2200      	movs	r2, #0
 8003654:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003656:	4b08      	ldr	r3, [pc, #32]	@ (8003678 <MX_USART2_UART_Init+0x58>)
 8003658:	2200      	movs	r2, #0
 800365a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800365c:	4b06      	ldr	r3, [pc, #24]	@ (8003678 <MX_USART2_UART_Init+0x58>)
 800365e:	2200      	movs	r2, #0
 8003660:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003662:	4b05      	ldr	r3, [pc, #20]	@ (8003678 <MX_USART2_UART_Init+0x58>)
 8003664:	0018      	movs	r0, r3
 8003666:	f003 ffd3 	bl	8007610 <HAL_UART_Init>
 800366a:	1e03      	subs	r3, r0, #0
 800366c:	d001      	beq.n	8003672 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800366e:	f000 f923 	bl	80038b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003672:	46c0      	nop			@ (mov r8, r8)
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	2000050c 	.word	0x2000050c
 800367c:	40004400 	.word	0x40004400

08003680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003680:	b590      	push	{r4, r7, lr}
 8003682:	b08b      	sub	sp, #44	@ 0x2c
 8003684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003686:	2414      	movs	r4, #20
 8003688:	193b      	adds	r3, r7, r4
 800368a:	0018      	movs	r0, r3
 800368c:	2314      	movs	r3, #20
 800368e:	001a      	movs	r2, r3
 8003690:	2100      	movs	r1, #0
 8003692:	f007 fee3 	bl	800b45c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003696:	4b3f      	ldr	r3, [pc, #252]	@ (8003794 <MX_GPIO_Init+0x114>)
 8003698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800369a:	4b3e      	ldr	r3, [pc, #248]	@ (8003794 <MX_GPIO_Init+0x114>)
 800369c:	2104      	movs	r1, #4
 800369e:	430a      	orrs	r2, r1
 80036a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80036a2:	4b3c      	ldr	r3, [pc, #240]	@ (8003794 <MX_GPIO_Init+0x114>)
 80036a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a6:	2204      	movs	r2, #4
 80036a8:	4013      	ands	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]
 80036ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80036ae:	4b39      	ldr	r3, [pc, #228]	@ (8003794 <MX_GPIO_Init+0x114>)
 80036b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036b2:	4b38      	ldr	r3, [pc, #224]	@ (8003794 <MX_GPIO_Init+0x114>)
 80036b4:	2180      	movs	r1, #128	@ 0x80
 80036b6:	430a      	orrs	r2, r1
 80036b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80036ba:	4b36      	ldr	r3, [pc, #216]	@ (8003794 <MX_GPIO_Init+0x114>)
 80036bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036be:	2280      	movs	r2, #128	@ 0x80
 80036c0:	4013      	ands	r3, r2
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80036c6:	4b33      	ldr	r3, [pc, #204]	@ (8003794 <MX_GPIO_Init+0x114>)
 80036c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036ca:	4b32      	ldr	r3, [pc, #200]	@ (8003794 <MX_GPIO_Init+0x114>)
 80036cc:	2101      	movs	r1, #1
 80036ce:	430a      	orrs	r2, r1
 80036d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80036d2:	4b30      	ldr	r3, [pc, #192]	@ (8003794 <MX_GPIO_Init+0x114>)
 80036d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d6:	2201      	movs	r2, #1
 80036d8:	4013      	ands	r3, r2
 80036da:	60bb      	str	r3, [r7, #8]
 80036dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036de:	4b2d      	ldr	r3, [pc, #180]	@ (8003794 <MX_GPIO_Init+0x114>)
 80036e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036e2:	4b2c      	ldr	r3, [pc, #176]	@ (8003794 <MX_GPIO_Init+0x114>)
 80036e4:	2102      	movs	r1, #2
 80036e6:	430a      	orrs	r2, r1
 80036e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80036ea:	4b2a      	ldr	r3, [pc, #168]	@ (8003794 <MX_GPIO_Init+0x114>)
 80036ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ee:	2202      	movs	r2, #2
 80036f0:	4013      	ands	r3, r2
 80036f2:	607b      	str	r3, [r7, #4]
 80036f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80036f6:	23a0      	movs	r3, #160	@ 0xa0
 80036f8:	05db      	lsls	r3, r3, #23
 80036fa:	2200      	movs	r2, #0
 80036fc:	2120      	movs	r1, #32
 80036fe:	0018      	movs	r0, r3
 8003700:	f001 fafe 	bl	8004d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8003704:	4b24      	ldr	r3, [pc, #144]	@ (8003798 <MX_GPIO_Init+0x118>)
 8003706:	2200      	movs	r2, #0
 8003708:	2102      	movs	r1, #2
 800370a:	0018      	movs	r0, r3
 800370c:	f001 faf8 	bl	8004d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin PC0 */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_PIN_0;
 8003710:	193b      	adds	r3, r7, r4
 8003712:	4a22      	ldr	r2, [pc, #136]	@ (800379c <MX_GPIO_Init+0x11c>)
 8003714:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003716:	193b      	adds	r3, r7, r4
 8003718:	2284      	movs	r2, #132	@ 0x84
 800371a:	0392      	lsls	r2, r2, #14
 800371c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371e:	193b      	adds	r3, r7, r4
 8003720:	2200      	movs	r2, #0
 8003722:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003724:	193b      	adds	r3, r7, r4
 8003726:	4a1e      	ldr	r2, [pc, #120]	@ (80037a0 <MX_GPIO_Init+0x120>)
 8003728:	0019      	movs	r1, r3
 800372a:	0010      	movs	r0, r2
 800372c:	f001 f96a 	bl	8004a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003730:	193b      	adds	r3, r7, r4
 8003732:	2220      	movs	r2, #32
 8003734:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003736:	193b      	adds	r3, r7, r4
 8003738:	2201      	movs	r2, #1
 800373a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373c:	193b      	adds	r3, r7, r4
 800373e:	2200      	movs	r2, #0
 8003740:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003742:	193b      	adds	r3, r7, r4
 8003744:	2200      	movs	r2, #0
 8003746:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003748:	193a      	adds	r2, r7, r4
 800374a:	23a0      	movs	r3, #160	@ 0xa0
 800374c:	05db      	lsls	r3, r3, #23
 800374e:	0011      	movs	r1, r2
 8003750:	0018      	movs	r0, r3
 8003752:	f001 f957 	bl	8004a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8003756:	0021      	movs	r1, r4
 8003758:	187b      	adds	r3, r7, r1
 800375a:	2202      	movs	r2, #2
 800375c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800375e:	187b      	adds	r3, r7, r1
 8003760:	2201      	movs	r2, #1
 8003762:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003764:	187b      	adds	r3, r7, r1
 8003766:	2200      	movs	r2, #0
 8003768:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800376a:	187b      	adds	r3, r7, r1
 800376c:	2200      	movs	r2, #0
 800376e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8003770:	187b      	adds	r3, r7, r1
 8003772:	4a09      	ldr	r2, [pc, #36]	@ (8003798 <MX_GPIO_Init+0x118>)
 8003774:	0019      	movs	r1, r3
 8003776:	0010      	movs	r0, r2
 8003778:	f001 f944 	bl	8004a04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 2, 0);
 800377c:	2200      	movs	r2, #0
 800377e:	2102      	movs	r1, #2
 8003780:	2005      	movs	r0, #5
 8003782:	f001 f919 	bl	80049b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003786:	2005      	movs	r0, #5
 8003788:	f001 f92b 	bl	80049e2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800378c:	46c0      	nop			@ (mov r8, r8)
 800378e:	46bd      	mov	sp, r7
 8003790:	b00b      	add	sp, #44	@ 0x2c
 8003792:	bd90      	pop	{r4, r7, pc}
 8003794:	40021000 	.word	0x40021000
 8003798:	50000400 	.word	0x50000400
 800379c:	00002001 	.word	0x00002001
 80037a0:	50000800 	.word	0x50000800

080037a4 <EXTI0_1_IRQHandler>:
* @param argument: Not used
* @retval None
*/

void EXTI0_1_IRQHandler(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
	 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80037a8:	2001      	movs	r0, #1
 80037aa:	f001 fac7 	bl	8004d3c <HAL_GPIO_EXTI_IRQHandler>
	max30102_on_interrupt(&max30102);
 80037ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003818 <EXTI0_1_IRQHandler+0x74>)
 80037b0:	0018      	movs	r0, r3
 80037b2:	f000 f994 	bl	8003ade <max30102_on_interrupt>
	static signed long xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 80037b6:	4b19      	ldr	r3, [pc, #100]	@ (800381c <EXTI0_1_IRQHandler+0x78>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]
	 if (sem1Handle != NULL){
 80037bc:	4b18      	ldr	r3, [pc, #96]	@ (8003820 <EXTI0_1_IRQHandler+0x7c>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d012      	beq.n	80037ea <EXTI0_1_IRQHandler+0x46>
		 myprintf("SemRels\r\n");
 80037c4:	4b17      	ldr	r3, [pc, #92]	@ (8003824 <EXTI0_1_IRQHandler+0x80>)
 80037c6:	0018      	movs	r0, r3
 80037c8:	f7ff fd60 	bl	800328c <myprintf>
		 if(xSemaphoreGiveFromISR(sem1Handle,&xHigherPriorityTaskWoken)==pdTRUE){
 80037cc:	4b14      	ldr	r3, [pc, #80]	@ (8003820 <EXTI0_1_IRQHandler+0x7c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a12      	ldr	r2, [pc, #72]	@ (800381c <EXTI0_1_IRQHandler+0x78>)
 80037d2:	0011      	movs	r1, r2
 80037d4:	0018      	movs	r0, r3
 80037d6:	f005 fcea 	bl	80091ae <xQueueGiveFromISR>
 80037da:	0003      	movs	r3, r0
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d108      	bne.n	80037f2 <EXTI0_1_IRQHandler+0x4e>
			 myprintf("SemRelease\r\n");
 80037e0:	4b11      	ldr	r3, [pc, #68]	@ (8003828 <EXTI0_1_IRQHandler+0x84>)
 80037e2:	0018      	movs	r0, r3
 80037e4:	f7ff fd52 	bl	800328c <myprintf>
 80037e8:	e003      	b.n	80037f2 <EXTI0_1_IRQHandler+0x4e>
		 }
	 }
	 else{
		 myprintf("SemRNULL\r\n");
 80037ea:	4b10      	ldr	r3, [pc, #64]	@ (800382c <EXTI0_1_IRQHandler+0x88>)
 80037ec:	0018      	movs	r0, r3
 80037ee:	f7ff fd4d 	bl	800328c <myprintf>
	 }
	 portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80037f2:	4b0a      	ldr	r3, [pc, #40]	@ (800381c <EXTI0_1_IRQHandler+0x78>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <EXTI0_1_IRQHandler+0x5e>
 80037fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003830 <EXTI0_1_IRQHandler+0x8c>)
 80037fc:	2280      	movs	r2, #128	@ 0x80
 80037fe:	0552      	lsls	r2, r2, #21
 8003800:	601a      	str	r2, [r3, #0]
	 portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 8003802:	4b06      	ldr	r3, [pc, #24]	@ (800381c <EXTI0_1_IRQHandler+0x78>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <EXTI0_1_IRQHandler+0x6e>
 800380a:	4b09      	ldr	r3, [pc, #36]	@ (8003830 <EXTI0_1_IRQHandler+0x8c>)
 800380c:	2280      	movs	r2, #128	@ 0x80
 800380e:	0552      	lsls	r2, r2, #21
 8003810:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI0_1_IRQn 0 */

  /* USER CODE BEGIN EXTI0_1_IRQn 1 */
  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8003812:	46c0      	nop			@ (mov r8, r8)
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	2000059c 	.word	0x2000059c
 800381c:	200007a4 	.word	0x200007a4
 8003820:	20000598 	.word	0x20000598
 8003824:	0800da9c 	.word	0x0800da9c
 8003828:	0800daa8 	.word	0x0800daa8
 800382c:	0800dab8 	.word	0x0800dab8
 8003830:	e000ed04 	.word	0xe000ed04

08003834 <sHandler>:


/* USER CODE END Header_sHandler */
void sHandler(void const * argument)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sHandler */
  /* Infinite loop */
//osSemaphoreId semaphore = (osSemaphoreId) argument;
  for(;;)
  {
	  if (sem1Handle != NULL){
 800383c:	4b11      	ldr	r3, [pc, #68]	@ (8003884 <sHandler+0x50>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d01a      	beq.n	800387a <sHandler+0x46>
		  myprintf("SemH\r\n");
 8003844:	4b10      	ldr	r3, [pc, #64]	@ (8003888 <sHandler+0x54>)
 8003846:	0018      	movs	r0, r3
 8003848:	f7ff fd20 	bl	800328c <myprintf>
		  xSemaphoreTake( sem1Handle, portMAX_DELAY );
 800384c:	4b0d      	ldr	r3, [pc, #52]	@ (8003884 <sHandler+0x50>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2201      	movs	r2, #1
 8003852:	4252      	negs	r2, r2
 8003854:	0011      	movs	r1, r2
 8003856:	0018      	movs	r0, r3
 8003858:	f005 fd11 	bl	800927e <xQueueSemaphoreTake>
		  myprintf("Int Handler: %.2f\r\n",max30102_interrupt_handler(&max30102));
 800385c:	4b0b      	ldr	r3, [pc, #44]	@ (800388c <sHandler+0x58>)
 800385e:	0018      	movs	r0, r3
 8003860:	f000 f956 	bl	8003b10 <max30102_interrupt_handler>
 8003864:	1c03      	adds	r3, r0, #0
 8003866:	1c18      	adds	r0, r3, #0
 8003868:	f7ff fbea 	bl	8003040 <__aeabi_f2d>
 800386c:	0002      	movs	r2, r0
 800386e:	000b      	movs	r3, r1
 8003870:	4907      	ldr	r1, [pc, #28]	@ (8003890 <sHandler+0x5c>)
 8003872:	0008      	movs	r0, r1
 8003874:	f7ff fd0a 	bl	800328c <myprintf>
 8003878:	e7e0      	b.n	800383c <sHandler+0x8>
	  }
	  else{
	  		 myprintf("SemHNULL\r\n");
 800387a:	4b06      	ldr	r3, [pc, #24]	@ (8003894 <sHandler+0x60>)
 800387c:	0018      	movs	r0, r3
 800387e:	f7ff fd05 	bl	800328c <myprintf>
	  if (sem1Handle != NULL){
 8003882:	e7db      	b.n	800383c <sHandler+0x8>
 8003884:	20000598 	.word	0x20000598
 8003888:	0800dac4 	.word	0x0800dac4
 800388c:	2000059c 	.word	0x2000059c
 8003890:	0800dacc 	.word	0x0800dacc
 8003894:	0800dae0 	.word	0x0800dae0

08003898 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	2380      	movs	r3, #128	@ 0x80
 80038a6:	05db      	lsls	r3, r3, #23
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d101      	bne.n	80038b0 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 80038ac:	f000 ffbc 	bl	8004828 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80038b0:	46c0      	nop			@ (mov r8, r8)
 80038b2:	46bd      	mov	sp, r7
 80038b4:	b002      	add	sp, #8
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038bc:	b672      	cpsid	i
}
 80038be:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038c0:	46c0      	nop			@ (mov r8, r8)
 80038c2:	e7fd      	b.n	80038c0 <Error_Handler+0x8>

080038c4 <max30102_plot>:
 * @note Override this in your main.c if you do not use printf() for printing.
 * @param ir_sample
 * @param red_sample
 */
__weak void max30102_plot(uint32_t ir_sample, uint32_t red_sample)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
    UNUSED(ir_sample);
    UNUSED(red_sample);
}
 80038ce:	46c0      	nop			@ (mov r8, r8)
 80038d0:	46bd      	mov	sp, r7
 80038d2:	b002      	add	sp, #8
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b082      	sub	sp, #8
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
 80038de:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	601a      	str	r2, [r3, #0]
    obj->_interrupt_flag = 0;
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	2382      	movs	r3, #130	@ 0x82
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	2100      	movs	r1, #0
 80038ee:	54d1      	strb	r1, [r2, r3]
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3304      	adds	r3, #4
 80038f4:	2280      	movs	r2, #128	@ 0x80
 80038f6:	2100      	movs	r1, #0
 80038f8:	0018      	movs	r0, r3
 80038fa:	f007 fdaf 	bl	800b45c <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3384      	adds	r3, #132	@ 0x84
 8003902:	2280      	movs	r2, #128	@ 0x80
 8003904:	2100      	movs	r1, #0
 8003906:	0018      	movs	r0, r3
 8003908:	f007 fda8 	bl	800b45c <memset>
}
 800390c:	46c0      	nop			@ (mov r8, r8)
 800390e:	46bd      	mov	sp, r7
 8003910:	b002      	add	sp, #8
 8003912:	bd80      	pop	{r7, pc}

08003914 <max30102_write>:
 * @param reg Register address to write to.
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */
void max30102_write(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8003914:	b5b0      	push	{r4, r5, r7, lr}
 8003916:	b088      	sub	sp, #32
 8003918:	af02      	add	r7, sp, #8
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	0008      	movs	r0, r1
 800391e:	607a      	str	r2, [r7, #4]
 8003920:	0019      	movs	r1, r3
 8003922:	250b      	movs	r5, #11
 8003924:	197b      	adds	r3, r7, r5
 8003926:	1c02      	adds	r2, r0, #0
 8003928:	701a      	strb	r2, [r3, #0]
 800392a:	2408      	movs	r4, #8
 800392c:	193b      	adds	r3, r7, r4
 800392e:	1c0a      	adds	r2, r1, #0
 8003930:	801a      	strh	r2, [r3, #0]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8003932:	193b      	adds	r3, r7, r4
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	3301      	adds	r3, #1
 8003938:	0018      	movs	r0, r3
 800393a:	f007 fa3f 	bl	800adbc <malloc>
 800393e:	0003      	movs	r3, r0
 8003940:	617b      	str	r3, [r7, #20]
    *payload = reg;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	197a      	adds	r2, r7, r5
 8003946:	7812      	ldrb	r2, [r2, #0]
 8003948:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00b      	beq.n	8003968 <max30102_write+0x54>
 8003950:	193b      	adds	r3, r7, r4
 8003952:	881b      	ldrh	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d007      	beq.n	8003968 <max30102_write+0x54>
        memcpy(payload + 1, buf, buflen);
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	1c58      	adds	r0, r3, #1
 800395c:	193b      	adds	r3, r7, r4
 800395e:	881a      	ldrh	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	0019      	movs	r1, r3
 8003964:	f007 fdd0 	bl	800b508 <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6818      	ldr	r0, [r3, #0]
 800396c:	2308      	movs	r3, #8
 800396e:	18fb      	adds	r3, r7, r3
 8003970:	881b      	ldrh	r3, [r3, #0]
 8003972:	3301      	adds	r3, #1
 8003974:	b299      	uxth	r1, r3
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	23fa      	movs	r3, #250	@ 0xfa
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	000b      	movs	r3, r1
 8003980:	21ae      	movs	r1, #174	@ 0xae
 8003982:	f001 fa97 	bl	8004eb4 <HAL_I2C_Master_Transmit>
    free(payload);
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	0018      	movs	r0, r3
 800398a:	f007 fa21 	bl	800add0 <free>
}
 800398e:	46c0      	nop			@ (mov r8, r8)
 8003990:	46bd      	mov	sp, r7
 8003992:	b006      	add	sp, #24
 8003994:	bdb0      	pop	{r4, r5, r7, pc}

08003996 <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8003996:	b5b0      	push	{r4, r5, r7, lr}
 8003998:	b088      	sub	sp, #32
 800399a:	af02      	add	r7, sp, #8
 800399c:	60f8      	str	r0, [r7, #12]
 800399e:	0008      	movs	r0, r1
 80039a0:	607a      	str	r2, [r7, #4]
 80039a2:	0019      	movs	r1, r3
 80039a4:	240b      	movs	r4, #11
 80039a6:	193b      	adds	r3, r7, r4
 80039a8:	1c02      	adds	r2, r0, #0
 80039aa:	701a      	strb	r2, [r3, #0]
 80039ac:	2508      	movs	r5, #8
 80039ae:	197b      	adds	r3, r7, r5
 80039b0:	1c0a      	adds	r2, r1, #0
 80039b2:	801a      	strh	r2, [r3, #0]
    uint8_t reg_addr = reg;
 80039b4:	2117      	movs	r1, #23
 80039b6:	187b      	adds	r3, r7, r1
 80039b8:	193a      	adds	r2, r7, r4
 80039ba:	7812      	ldrb	r2, [r2, #0]
 80039bc:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	187a      	adds	r2, r7, r1
 80039c4:	23fa      	movs	r3, #250	@ 0xfa
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	2301      	movs	r3, #1
 80039cc:	21ae      	movs	r1, #174	@ 0xae
 80039ce:	f001 fa71 	bl	8004eb4 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6818      	ldr	r0, [r3, #0]
 80039d6:	197b      	adds	r3, r7, r5
 80039d8:	8819      	ldrh	r1, [r3, #0]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	23fa      	movs	r3, #250	@ 0xfa
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	000b      	movs	r3, r1
 80039e4:	21ae      	movs	r1, #174	@ 0xae
 80039e6:	f001 fb6d 	bl	80050c4 <HAL_I2C_Master_Receive>
}
 80039ea:	46c0      	nop			@ (mov r8, r8)
 80039ec:	46bd      	mov	sp, r7
 80039ee:	b006      	add	sp, #24
 80039f0:	bdb0      	pop	{r4, r5, r7, pc}

080039f2 <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102_t *obj)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b084      	sub	sp, #16
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 80039fa:	210f      	movs	r1, #15
 80039fc:	187b      	adds	r3, r7, r1
 80039fe:	2240      	movs	r2, #64	@ 0x40
 8003a00:	701a      	strb	r2, [r3, #0]
    max30102_write(obj, MAX30102_MODE_CONFIG, &val, 1);
 8003a02:	187a      	adds	r2, r7, r1
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	2301      	movs	r3, #1
 8003a08:	2109      	movs	r1, #9
 8003a0a:	f7ff ff83 	bl	8003914 <max30102_write>
}
 8003a0e:	46c0      	nop			@ (mov r8, r8)
 8003a10:	46bd      	mov	sp, r7
 8003a12:	b004      	add	sp, #16
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <max30102_set_a_full>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_a_full(max30102_t *obj, uint8_t enable)
{
 8003a16:	b590      	push	{r4, r7, lr}
 8003a18:	b085      	sub	sp, #20
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	000a      	movs	r2, r1
 8003a20:	1cfb      	adds	r3, r7, #3
 8003a22:	701a      	strb	r2, [r3, #0]
    uint8_t reg = 0;
 8003a24:	210f      	movs	r1, #15
 8003a26:	187b      	adds	r3, r7, r1
 8003a28:	2200      	movs	r2, #0
 8003a2a:	701a      	strb	r2, [r3, #0]
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8003a2c:	000c      	movs	r4, r1
 8003a2e:	187a      	adds	r2, r7, r1
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	2301      	movs	r3, #1
 8003a34:	2102      	movs	r1, #2
 8003a36:	f7ff ffae 	bl	8003996 <max30102_read>
    reg &= ~(0x01 << MAX30102_INTERRUPT_A_FULL);
 8003a3a:	0021      	movs	r1, r4
 8003a3c:	187b      	adds	r3, r7, r1
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	227f      	movs	r2, #127	@ 0x7f
 8003a42:	4013      	ands	r3, r2
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	187b      	adds	r3, r7, r1
 8003a48:	701a      	strb	r2, [r3, #0]
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_A_FULL);
 8003a4a:	1cfb      	adds	r3, r7, #3
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	01db      	lsls	r3, r3, #7
 8003a50:	b25a      	sxtb	r2, r3
 8003a52:	187b      	adds	r3, r7, r1
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	b25b      	sxtb	r3, r3
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	b25b      	sxtb	r3, r3
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	187b      	adds	r3, r7, r1
 8003a60:	701a      	strb	r2, [r3, #0]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8003a62:	187a      	adds	r2, r7, r1
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	2301      	movs	r3, #1
 8003a68:	2102      	movs	r1, #2
 8003a6a:	f7ff ff53 	bl	8003914 <max30102_write>
}
 8003a6e:	46c0      	nop			@ (mov r8, r8)
 8003a70:	46bd      	mov	sp, r7
 8003a72:	b005      	add	sp, #20
 8003a74:	bd90      	pop	{r4, r7, pc}

08003a76 <max30102_set_die_temp_rdy>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_rdy(max30102_t *obj, uint8_t enable)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b084      	sub	sp, #16
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
 8003a7e:	000a      	movs	r2, r1
 8003a80:	1cfb      	adds	r3, r7, #3
 8003a82:	701a      	strb	r2, [r3, #0]
    uint8_t reg = (enable & 0x01) << MAX30102_INTERRUPT_DIE_TEMP_RDY;
 8003a84:	1cfb      	adds	r3, r7, #3
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	4013      	ands	r3, r2
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	210f      	movs	r1, #15
 8003a94:	187b      	adds	r3, r7, r1
 8003a96:	701a      	strb	r2, [r3, #0]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_2, &reg, 1);
 8003a98:	187a      	adds	r2, r7, r1
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	2103      	movs	r1, #3
 8003aa0:	f7ff ff38 	bl	8003914 <max30102_write>
}
 8003aa4:	46c0      	nop			@ (mov r8, r8)
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	b004      	add	sp, #16
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <max30102_set_die_temp_en>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_en(max30102_t *obj, uint8_t enable)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	000a      	movs	r2, r1
 8003ab6:	1cfb      	adds	r3, r7, #3
 8003ab8:	701a      	strb	r2, [r3, #0]
    uint8_t reg = (enable & 0x01);
 8003aba:	1cfb      	adds	r3, r7, #3
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	210f      	movs	r1, #15
 8003ac6:	187b      	adds	r3, r7, r1
 8003ac8:	701a      	strb	r2, [r3, #0]
    max30102_write(obj, MAX30102_DIE_TEMP_CONFIG, &reg, 1);
 8003aca:	187a      	adds	r2, r7, r1
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	2301      	movs	r3, #1
 8003ad0:	2121      	movs	r1, #33	@ 0x21
 8003ad2:	f7ff ff1f 	bl	8003914 <max30102_write>
}
 8003ad6:	46c0      	nop			@ (mov r8, r8)
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	b004      	add	sp, #16
 8003adc:	bd80      	pop	{r7, pc}

08003ade <max30102_on_interrupt>:
 * @brief Set interrupt flag on interrupt. To be called in the corresponding external interrupt handler.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_on_interrupt(max30102_t *obj)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b082      	sub	sp, #8
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
    obj->_interrupt_flag = 1;
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	2382      	movs	r3, #130	@ 0x82
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	2101      	movs	r1, #1
 8003aee:	54d1      	strb	r1, [r2, r3]
}
 8003af0:	46c0      	nop			@ (mov r8, r8)
 8003af2:	46bd      	mov	sp, r7
 8003af4:	b002      	add	sp, #8
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <max30102_has_interrupt>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @return uint8_t Active (1) or inactive (0).
 */
uint8_t max30102_has_interrupt(max30102_t *obj)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
    return obj->_interrupt_flag;
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	2382      	movs	r3, #130	@ 0x82
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	5cd3      	ldrb	r3, [r2, r3]
}
 8003b08:	0018      	movs	r0, r3
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	b002      	add	sp, #8
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <max30102_interrupt_handler>:
 * @brief Read interrupt status registers (0x00 and 0x01) and perform corresponding tasks.
 *
 * @param obj Pointer to max30102_t object instance.
 */
float max30102_interrupt_handler(max30102_t *obj)
{
 8003b10:	b5b0      	push	{r4, r5, r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
//		float temp = temp_int + 0.0625f * temp_frac;
//		printf("Temperature: %.2f °C\n", temp);
//    }
	// Poll for bit to clear, reading is then complete
	  // Timeout after 100ms
	  uint32_t startTime = HAL_GetTick();
 8003b18:	f000 fe98 	bl	800484c <HAL_GetTick>
 8003b1c:	0003      	movs	r3, r0
 8003b1e:	617b      	str	r3, [r7, #20]
	  while (HAL_GetTick() - startTime < 100)
 8003b20:	e014      	b.n	8003b4c <max30102_interrupt_handler+0x3c>
	  {
		//Check to see if DIE_TEMP_RDY interrupt is set
		uint8_t response = 0x00;
 8003b22:	210d      	movs	r1, #13
 8003b24:	187b      	adds	r3, r7, r1
 8003b26:	2200      	movs	r2, #0
 8003b28:	701a      	strb	r2, [r3, #0]
		max30102_read(obj, MAX30102_INTERRUPT_STATUS_2, &response, 1);
 8003b2a:	000c      	movs	r4, r1
 8003b2c:	187a      	adds	r2, r7, r1
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	2301      	movs	r3, #1
 8003b32:	2101      	movs	r1, #1
 8003b34:	f7ff ff2f 	bl	8003996 <max30102_read>
	    if ((response & 0x02) > 0) break; //We're done!
 8003b38:	193b      	adds	r3, r7, r4
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	001a      	movs	r2, r3
 8003b3e:	2302      	movs	r3, #2
 8003b40:	4013      	ands	r3, r2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	dc0a      	bgt.n	8003b5c <max30102_interrupt_handler+0x4c>
	    HAL_Delay(1); //Let's not over burden the I2C bus
 8003b46:	2001      	movs	r0, #1
 8003b48:	f000 fe8a 	bl	8004860 <HAL_Delay>
	  while (HAL_GetTick() - startTime < 100)
 8003b4c:	f000 fe7e 	bl	800484c <HAL_GetTick>
 8003b50:	0002      	movs	r2, r0
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b63      	cmp	r3, #99	@ 0x63
 8003b58:	d9e3      	bls.n	8003b22 <max30102_interrupt_handler+0x12>
 8003b5a:	e000      	b.n	8003b5e <max30102_interrupt_handler+0x4e>
	    if ((response & 0x02) > 0) break; //We're done!
 8003b5c:	46c0      	nop			@ (mov r8, r8)
	  //TODO How do we want to fail? With what type of error?
	  //? if(millis() - startTime >= 100) return(-999.0);

	  int8_t temp_int;
	  uint8_t temp_frac;
	  max30102_read_temp(obj, &temp_int, &temp_frac);
 8003b5e:	250e      	movs	r5, #14
 8003b60:	197a      	adds	r2, r7, r5
 8003b62:	240f      	movs	r4, #15
 8003b64:	1939      	adds	r1, r7, r4
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	0018      	movs	r0, r3
 8003b6a:	f000 fa1b 	bl	8003fa4 <max30102_read_temp>
	  float temp = temp_int + 0.0625f * temp_frac;
 8003b6e:	193b      	adds	r3, r7, r4
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	b25b      	sxtb	r3, r3
 8003b74:	0018      	movs	r0, r3
 8003b76:	f7fd fb5b 	bl	8001230 <__aeabi_i2f>
 8003b7a:	1c04      	adds	r4, r0, #0
 8003b7c:	197b      	adds	r3, r7, r5
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	0018      	movs	r0, r3
 8003b82:	f7fd fb55 	bl	8001230 <__aeabi_i2f>
 8003b86:	1c03      	adds	r3, r0, #0
 8003b88:	21f6      	movs	r1, #246	@ 0xf6
 8003b8a:	0589      	lsls	r1, r1, #22
 8003b8c:	1c18      	adds	r0, r3, #0
 8003b8e:	f7fd f86d 	bl	8000c6c <__aeabi_fmul>
 8003b92:	1c03      	adds	r3, r0, #0
 8003b94:	1c19      	adds	r1, r3, #0
 8003b96:	1c20      	adds	r0, r4, #0
 8003b98:	f7fc fdbe 	bl	8000718 <__aeabi_fadd>
 8003b9c:	1c03      	adds	r3, r0, #0
 8003b9e:	613b      	str	r3, [r7, #16]
//	  printf("Temperature: %f °C\r\n", temp);
	  // Reset interrupt flag
	  obj->_interrupt_flag = 0;
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	2382      	movs	r3, #130	@ 0x82
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	54d1      	strb	r1, [r2, r3]
	  return temp;
 8003baa:	693b      	ldr	r3, [r7, #16]
}
 8003bac:	1c18      	adds	r0, r3, #0
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	b006      	add	sp, #24
 8003bb2:	bdb0      	pop	{r4, r5, r7, pc}

08003bb4 <max30102_set_mode>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param mode Measurement mode enum (max30102_mode_t).
 */
void max30102_set_mode(max30102_t *obj, max30102_mode_t mode)
{
 8003bb4:	b590      	push	{r4, r7, lr}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	000a      	movs	r2, r1
 8003bbe:	1cfb      	adds	r3, r7, #3
 8003bc0:	701a      	strb	r2, [r3, #0]
    uint8_t config;
    max30102_read(obj, MAX30102_MODE_CONFIG, &config, 1);
 8003bc2:	240f      	movs	r4, #15
 8003bc4:	193a      	adds	r2, r7, r4
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	2301      	movs	r3, #1
 8003bca:	2109      	movs	r1, #9
 8003bcc:	f7ff fee3 	bl	8003996 <max30102_read>
    config = (config & 0xf8) | mode;
 8003bd0:	0021      	movs	r1, r4
 8003bd2:	187b      	adds	r3, r7, r1
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	b25b      	sxtb	r3, r3
 8003bd8:	2207      	movs	r2, #7
 8003bda:	4393      	bics	r3, r2
 8003bdc:	b25a      	sxtb	r2, r3
 8003bde:	1cfb      	adds	r3, r7, #3
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	b25b      	sxtb	r3, r3
 8003be4:	4313      	orrs	r3, r2
 8003be6:	b25b      	sxtb	r3, r3
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	187b      	adds	r3, r7, r1
 8003bec:	701a      	strb	r2, [r3, #0]
    max30102_write(obj, MAX30102_MODE_CONFIG, &config, 1);
 8003bee:	187a      	adds	r2, r7, r1
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	2109      	movs	r1, #9
 8003bf6:	f7ff fe8d 	bl	8003914 <max30102_write>
    max30102_clear_fifo(obj);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	f000 f90e 	bl	8003e1e <max30102_clear_fifo>
}
 8003c02:	46c0      	nop			@ (mov r8, r8)
 8003c04:	46bd      	mov	sp, r7
 8003c06:	b005      	add	sp, #20
 8003c08:	bd90      	pop	{r4, r7, pc}

08003c0a <max30102_set_sampling_rate>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param sr Sampling rate enum (max30102_spo2_st_t).
 */
void max30102_set_sampling_rate(max30102_t *obj, max30102_sr_t sr)
{
 8003c0a:	b590      	push	{r4, r7, lr}
 8003c0c:	b085      	sub	sp, #20
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
 8003c12:	000a      	movs	r2, r1
 8003c14:	1cfb      	adds	r3, r7, #3
 8003c16:	701a      	strb	r2, [r3, #0]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8003c18:	240f      	movs	r4, #15
 8003c1a:	193a      	adds	r2, r7, r4
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	2301      	movs	r3, #1
 8003c20:	210a      	movs	r1, #10
 8003c22:	f7ff feb8 	bl	8003996 <max30102_read>
    config = (config & 0x63) | (sr << MAX30102_SPO2_SR);
 8003c26:	0021      	movs	r1, r4
 8003c28:	187b      	adds	r3, r7, r1
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	b25b      	sxtb	r3, r3
 8003c2e:	2263      	movs	r2, #99	@ 0x63
 8003c30:	4013      	ands	r3, r2
 8003c32:	b25a      	sxtb	r2, r3
 8003c34:	1cfb      	adds	r3, r7, #3
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	b25b      	sxtb	r3, r3
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	b25b      	sxtb	r3, r3
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	187b      	adds	r3, r7, r1
 8003c44:	701a      	strb	r2, [r3, #0]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8003c46:	187a      	adds	r2, r7, r1
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	210a      	movs	r1, #10
 8003c4e:	f7ff fe61 	bl	8003914 <max30102_write>
}
 8003c52:	46c0      	nop			@ (mov r8, r8)
 8003c54:	46bd      	mov	sp, r7
 8003c56:	b005      	add	sp, #20
 8003c58:	bd90      	pop	{r4, r7, pc}

08003c5a <max30102_set_led_pulse_width>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param pw Pulse width enum (max30102_led_pw_t).
 */
void max30102_set_led_pulse_width(max30102_t *obj, max30102_led_pw_t pw)
{
 8003c5a:	b590      	push	{r4, r7, lr}
 8003c5c:	b085      	sub	sp, #20
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
 8003c62:	000a      	movs	r2, r1
 8003c64:	1cfb      	adds	r3, r7, #3
 8003c66:	701a      	strb	r2, [r3, #0]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8003c68:	240f      	movs	r4, #15
 8003c6a:	193a      	adds	r2, r7, r4
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	2301      	movs	r3, #1
 8003c70:	210a      	movs	r1, #10
 8003c72:	f7ff fe90 	bl	8003996 <max30102_read>
    config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 8003c76:	0021      	movs	r1, r4
 8003c78:	187b      	adds	r3, r7, r1
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	b25b      	sxtb	r3, r3
 8003c7e:	227c      	movs	r2, #124	@ 0x7c
 8003c80:	4013      	ands	r3, r2
 8003c82:	b25a      	sxtb	r2, r3
 8003c84:	1cfb      	adds	r3, r7, #3
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	b25b      	sxtb	r3, r3
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	b25b      	sxtb	r3, r3
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	187b      	adds	r3, r7, r1
 8003c92:	701a      	strb	r2, [r3, #0]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8003c94:	187a      	adds	r2, r7, r1
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	2301      	movs	r3, #1
 8003c9a:	210a      	movs	r1, #10
 8003c9c:	f7ff fe3a 	bl	8003914 <max30102_write>
}
 8003ca0:	46c0      	nop			@ (mov r8, r8)
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	b005      	add	sp, #20
 8003ca6:	bd90      	pop	{r4, r7, pc}

08003ca8 <max30102_set_adc_resolution>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param adc ADC resolution enum (max30102_adc_t).
 */
void max30102_set_adc_resolution(max30102_t *obj, max30102_adc_t adc)
{
 8003ca8:	b590      	push	{r4, r7, lr}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	000a      	movs	r2, r1
 8003cb2:	1cfb      	adds	r3, r7, #3
 8003cb4:	701a      	strb	r2, [r3, #0]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8003cb6:	240f      	movs	r4, #15
 8003cb8:	193a      	adds	r2, r7, r4
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	210a      	movs	r1, #10
 8003cc0:	f7ff fe69 	bl	8003996 <max30102_read>
    config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 8003cc4:	0021      	movs	r1, r4
 8003cc6:	187b      	adds	r3, r7, r1
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	b25b      	sxtb	r3, r3
 8003ccc:	221f      	movs	r2, #31
 8003cce:	4013      	ands	r3, r2
 8003cd0:	b25a      	sxtb	r2, r3
 8003cd2:	1cfb      	adds	r3, r7, #3
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	015b      	lsls	r3, r3, #5
 8003cd8:	b25b      	sxtb	r3, r3
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	b25b      	sxtb	r3, r3
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	187b      	adds	r3, r7, r1
 8003ce2:	701a      	strb	r2, [r3, #0]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8003ce4:	187a      	adds	r2, r7, r1
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	2301      	movs	r3, #1
 8003cea:	210a      	movs	r1, #10
 8003cec:	f7ff fe12 	bl	8003914 <max30102_write>
}
 8003cf0:	46c0      	nop			@ (mov r8, r8)
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	b005      	add	sp, #20
 8003cf6:	bd90      	pop	{r4, r7, pc}

08003cf8 <max30102_set_led_current_1>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_1(max30102_t *obj, float ma)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
    uint8_t pa = ma / 0.2;
 8003d02:	6838      	ldr	r0, [r7, #0]
 8003d04:	f7ff f99c 	bl	8003040 <__aeabi_f2d>
 8003d08:	4a0c      	ldr	r2, [pc, #48]	@ (8003d3c <max30102_set_led_current_1+0x44>)
 8003d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d40 <max30102_set_led_current_1+0x48>)
 8003d0c:	f7fd fe40 	bl	8001990 <__aeabi_ddiv>
 8003d10:	0002      	movs	r2, r0
 8003d12:	000b      	movs	r3, r1
 8003d14:	0010      	movs	r0, r2
 8003d16:	0019      	movs	r1, r3
 8003d18:	f7fc fc14 	bl	8000544 <__aeabi_d2uiz>
 8003d1c:	0003      	movs	r3, r0
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	210f      	movs	r1, #15
 8003d22:	187b      	adds	r3, r7, r1
 8003d24:	701a      	strb	r2, [r3, #0]
    max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
 8003d26:	187a      	adds	r2, r7, r1
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	210c      	movs	r1, #12
 8003d2e:	f7ff fdf1 	bl	8003914 <max30102_write>
}
 8003d32:	46c0      	nop			@ (mov r8, r8)
 8003d34:	46bd      	mov	sp, r7
 8003d36:	b004      	add	sp, #16
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	46c0      	nop			@ (mov r8, r8)
 8003d3c:	9999999a 	.word	0x9999999a
 8003d40:	3fc99999 	.word	0x3fc99999

08003d44 <max30102_set_led_current_2>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_2(max30102_t *obj, float ma)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
    uint8_t pa = ma / 0.2;
 8003d4e:	6838      	ldr	r0, [r7, #0]
 8003d50:	f7ff f976 	bl	8003040 <__aeabi_f2d>
 8003d54:	4a0c      	ldr	r2, [pc, #48]	@ (8003d88 <max30102_set_led_current_2+0x44>)
 8003d56:	4b0d      	ldr	r3, [pc, #52]	@ (8003d8c <max30102_set_led_current_2+0x48>)
 8003d58:	f7fd fe1a 	bl	8001990 <__aeabi_ddiv>
 8003d5c:	0002      	movs	r2, r0
 8003d5e:	000b      	movs	r3, r1
 8003d60:	0010      	movs	r0, r2
 8003d62:	0019      	movs	r1, r3
 8003d64:	f7fc fbee 	bl	8000544 <__aeabi_d2uiz>
 8003d68:	0003      	movs	r3, r0
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	210f      	movs	r1, #15
 8003d6e:	187b      	adds	r3, r7, r1
 8003d70:	701a      	strb	r2, [r3, #0]
    max30102_write(obj, MAX30102_LED_RED_PA2, &pa, 1);
 8003d72:	187a      	adds	r2, r7, r1
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	2301      	movs	r3, #1
 8003d78:	210d      	movs	r1, #13
 8003d7a:	f7ff fdcb 	bl	8003914 <max30102_write>
}
 8003d7e:	46c0      	nop			@ (mov r8, r8)
 8003d80:	46bd      	mov	sp, r7
 8003d82:	b004      	add	sp, #16
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	46c0      	nop			@ (mov r8, r8)
 8003d88:	9999999a 	.word	0x9999999a
 8003d8c:	3fc99999 	.word	0x3fc99999

08003d90 <max30102_set_fifo_config>:
 * @param smp_ave
 * @param roll_over_en Roll over enabled(1) or disabled(0).
 * @param fifo_a_full Number of empty samples when A_FULL interrupt issued (0 < fifo_a_full < 15).
 */
void max30102_set_fifo_config(max30102_t *obj, max30102_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
 8003d90:	b590      	push	{r4, r7, lr}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	000c      	movs	r4, r1
 8003d9a:	0010      	movs	r0, r2
 8003d9c:	0019      	movs	r1, r3
 8003d9e:	1cfb      	adds	r3, r7, #3
 8003da0:	1c22      	adds	r2, r4, #0
 8003da2:	701a      	strb	r2, [r3, #0]
 8003da4:	1cbb      	adds	r3, r7, #2
 8003da6:	1c02      	adds	r2, r0, #0
 8003da8:	701a      	strb	r2, [r3, #0]
 8003daa:	1c7b      	adds	r3, r7, #1
 8003dac:	1c0a      	adds	r2, r1, #0
 8003dae:	701a      	strb	r2, [r3, #0]
    uint8_t config = 0x00;
 8003db0:	210f      	movs	r1, #15
 8003db2:	187b      	adds	r3, r7, r1
 8003db4:	2200      	movs	r2, #0
 8003db6:	701a      	strb	r2, [r3, #0]
    config |= smp_ave << MAX30102_FIFO_CONFIG_SMP_AVE;
 8003db8:	1cfb      	adds	r3, r7, #3
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	015b      	lsls	r3, r3, #5
 8003dbe:	b25a      	sxtb	r2, r3
 8003dc0:	187b      	adds	r3, r7, r1
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	b25b      	sxtb	r3, r3
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	b25b      	sxtb	r3, r3
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	187b      	adds	r3, r7, r1
 8003dce:	701a      	strb	r2, [r3, #0]
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 8003dd0:	1cbb      	adds	r3, r7, #2
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	b25b      	sxtb	r3, r3
 8003dd8:	2210      	movs	r2, #16
 8003dda:	4013      	ands	r3, r2
 8003ddc:	b25a      	sxtb	r2, r3
 8003dde:	187b      	adds	r3, r7, r1
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	b25b      	sxtb	r3, r3
 8003de4:	4313      	orrs	r3, r2
 8003de6:	b25b      	sxtb	r3, r3
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	187b      	adds	r3, r7, r1
 8003dec:	701a      	strb	r2, [r3, #0]
    config |= ((fifo_a_full & 0x0f) << MAX30102_FIFO_CONFIG_FIFO_A_FULL);
 8003dee:	1c7b      	adds	r3, r7, #1
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	b25b      	sxtb	r3, r3
 8003df4:	220f      	movs	r2, #15
 8003df6:	4013      	ands	r3, r2
 8003df8:	b25a      	sxtb	r2, r3
 8003dfa:	187b      	adds	r3, r7, r1
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	b25b      	sxtb	r3, r3
 8003e00:	4313      	orrs	r3, r2
 8003e02:	b25b      	sxtb	r3, r3
 8003e04:	b2da      	uxtb	r2, r3
 8003e06:	187b      	adds	r3, r7, r1
 8003e08:	701a      	strb	r2, [r3, #0]
    max30102_write(obj, MAX30102_FIFO_CONFIG, &config, 1);
 8003e0a:	187a      	adds	r2, r7, r1
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	2301      	movs	r3, #1
 8003e10:	2108      	movs	r1, #8
 8003e12:	f7ff fd7f 	bl	8003914 <max30102_write>
}
 8003e16:	46c0      	nop			@ (mov r8, r8)
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	b005      	add	sp, #20
 8003e1c:	bd90      	pop	{r4, r7, pc}

08003e1e <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102_t *obj)
{
 8003e1e:	b590      	push	{r4, r7, lr}
 8003e20:	b085      	sub	sp, #20
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 8003e26:	210f      	movs	r1, #15
 8003e28:	187b      	adds	r3, r7, r1
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	701a      	strb	r2, [r3, #0]
    max30102_write(obj, MAX30102_FIFO_WR_PTR, &val, 3);
 8003e2e:	000c      	movs	r4, r1
 8003e30:	193a      	adds	r2, r7, r4
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	2303      	movs	r3, #3
 8003e36:	2104      	movs	r1, #4
 8003e38:	f7ff fd6c 	bl	8003914 <max30102_write>
    max30102_write(obj, MAX30102_FIFO_RD_PTR, &val, 3);
 8003e3c:	193a      	adds	r2, r7, r4
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	2303      	movs	r3, #3
 8003e42:	2106      	movs	r1, #6
 8003e44:	f7ff fd66 	bl	8003914 <max30102_write>
    max30102_write(obj, MAX30102_OVF_COUNTER, &val, 3);
 8003e48:	193a      	adds	r2, r7, r4
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	2105      	movs	r1, #5
 8003e50:	f7ff fd60 	bl	8003914 <max30102_write>
}
 8003e54:	46c0      	nop			@ (mov r8, r8)
 8003e56:	46bd      	mov	sp, r7
 8003e58:	b005      	add	sp, #20
 8003e5a:	bd90      	pop	{r4, r7, pc}

08003e5c <max30102_read_fifo>:
 * @param obj Pointer to max30102_t object instance.
 */


Max30102Samples max30102_read_fifo(max30102_t *obj)
{
 8003e5c:	b5b0      	push	{r4, r5, r7, lr}
 8003e5e:	b08e      	sub	sp, #56	@ 0x38
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr = 0, rd_ptr = 0;
 8003e66:	211f      	movs	r1, #31
 8003e68:	187b      	adds	r3, r7, r1
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	701a      	strb	r2, [r3, #0]
 8003e6e:	251e      	movs	r5, #30
 8003e70:	197b      	adds	r3, r7, r5
 8003e72:	2200      	movs	r2, #0
 8003e74:	701a      	strb	r2, [r3, #0]
    max30102_read(obj, MAX30102_FIFO_WR_PTR, &wr_ptr, 1);
 8003e76:	000c      	movs	r4, r1
 8003e78:	187a      	adds	r2, r7, r1
 8003e7a:	6838      	ldr	r0, [r7, #0]
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	2104      	movs	r1, #4
 8003e80:	f7ff fd89 	bl	8003996 <max30102_read>
    max30102_read(obj, MAX30102_FIFO_RD_PTR, &rd_ptr, 1);
 8003e84:	197a      	adds	r2, r7, r5
 8003e86:	6838      	ldr	r0, [r7, #0]
 8003e88:	2301      	movs	r3, #1
 8003e8a:	2106      	movs	r1, #6
 8003e8c:	f7ff fd83 	bl	8003996 <max30102_read>
//    printf("Before Reading: Write Ptr: %u, Read Ptr: %u\n", wr_ptr, rd_ptr);

    int8_t num_samples;


    num_samples = (int8_t)wr_ptr - (int8_t)rd_ptr;
 8003e90:	193b      	adds	r3, r7, r4
 8003e92:	781a      	ldrb	r2, [r3, #0]
 8003e94:	197b      	adds	r3, r7, r5
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	2137      	movs	r1, #55	@ 0x37
 8003e9e:	187b      	adds	r3, r7, r1
 8003ea0:	701a      	strb	r2, [r3, #0]

    if (num_samples < 1)
 8003ea2:	187b      	adds	r3, r7, r1
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	b25b      	sxtb	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	dc05      	bgt.n	8003eb8 <max30102_read_fifo+0x5c>
    {
        num_samples += 32;
 8003eac:	187b      	adds	r3, r7, r1
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	3320      	adds	r3, #32
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	187b      	adds	r3, r7, r1
 8003eb6:	701a      	strb	r2, [r3, #0]
    }
    uint32_t last_ir_sample = 0;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t last_red_sample = 0;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
    for (int8_t i = 0; i < num_samples; i++)
 8003ec0:	232b      	movs	r3, #43	@ 0x2b
 8003ec2:	18fb      	adds	r3, r7, r3
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	701a      	strb	r2, [r3, #0]
 8003ec8:	e047      	b.n	8003f5a <max30102_read_fifo+0xfe>
    {
        uint8_t sample[6];
        max30102_read(obj, MAX30102_FIFO_DATA, sample, 6);
 8003eca:	240c      	movs	r4, #12
 8003ecc:	193a      	adds	r2, r7, r4
 8003ece:	6838      	ldr	r0, [r7, #0]
 8003ed0:	2306      	movs	r3, #6
 8003ed2:	2107      	movs	r1, #7
 8003ed4:	f7ff fd5f 	bl	8003996 <max30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 8003ed8:	0021      	movs	r1, r4
 8003eda:	187b      	adds	r3, r7, r1
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	041a      	lsls	r2, r3, #16
 8003ee0:	187b      	adds	r3, r7, r1
 8003ee2:	785b      	ldrb	r3, [r3, #1]
 8003ee4:	021b      	lsls	r3, r3, #8
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	187a      	adds	r2, r7, r1
 8003eea:	7892      	ldrb	r2, [r2, #2]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	039b      	lsls	r3, r3, #14
 8003ef0:	0b9b      	lsrs	r3, r3, #14
 8003ef2:	627b      	str	r3, [r7, #36]	@ 0x24
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 8003ef4:	187b      	adds	r3, r7, r1
 8003ef6:	78db      	ldrb	r3, [r3, #3]
 8003ef8:	041a      	lsls	r2, r3, #16
 8003efa:	187b      	adds	r3, r7, r1
 8003efc:	791b      	ldrb	r3, [r3, #4]
 8003efe:	021b      	lsls	r3, r3, #8
 8003f00:	4313      	orrs	r3, r2
 8003f02:	187a      	adds	r2, r7, r1
 8003f04:	7952      	ldrb	r2, [r2, #5]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	039b      	lsls	r3, r3, #14
 8003f0a:	0b9b      	lsrs	r3, r3, #14
 8003f0c:	623b      	str	r3, [r7, #32]
        obj->_ir_samples[i] = ir_sample;
 8003f0e:	242b      	movs	r4, #43	@ 0x2b
 8003f10:	193b      	adds	r3, r7, r4
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	b25b      	sxtb	r3, r3
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	18d3      	adds	r3, r2, r3
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f20:	601a      	str	r2, [r3, #0]
        obj->_red_samples[i] = red_sample;
 8003f22:	193b      	adds	r3, r7, r4
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	b25b      	sxtb	r3, r3
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	3320      	adds	r3, #32
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	18d3      	adds	r3, r2, r3
 8003f30:	3304      	adds	r3, #4
 8003f32:	6a3a      	ldr	r2, [r7, #32]
 8003f34:	601a      	str	r2, [r3, #0]
        max30102_plot(ir_sample, red_sample);
 8003f36:	6a3a      	ldr	r2, [r7, #32]
 8003f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3a:	0011      	movs	r1, r2
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	f7ff fcc1 	bl	80038c4 <max30102_plot>
        // Store the latest sample
		last_ir_sample = ir_sample;
 8003f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f44:	633b      	str	r3, [r7, #48]	@ 0x30
		last_red_sample = red_sample;
 8003f46:	6a3b      	ldr	r3, [r7, #32]
 8003f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (int8_t i = 0; i < num_samples; i++)
 8003f4a:	193b      	adds	r3, r7, r4
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	b25b      	sxtb	r3, r3
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	3301      	adds	r3, #1
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	193b      	adds	r3, r7, r4
 8003f58:	701a      	strb	r2, [r3, #0]
 8003f5a:	232b      	movs	r3, #43	@ 0x2b
 8003f5c:	18fa      	adds	r2, r7, r3
 8003f5e:	2337      	movs	r3, #55	@ 0x37
 8003f60:	18fb      	adds	r3, r7, r3
 8003f62:	7812      	ldrb	r2, [r2, #0]
 8003f64:	b252      	sxtb	r2, r2
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	b25b      	sxtb	r3, r3
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	dbad      	blt.n	8003eca <max30102_read_fifo+0x6e>

    // Print only the most recent sample after the loop

//    printf("Most Recent Sample - IR: %lu, Red: %lu\n", last_ir_sample, last_red_sample);
    // Reset the FIFO read pointer to clear the data after reading
	uint8_t reset_value = wr_ptr;
 8003f6e:	231f      	movs	r3, #31
 8003f70:	18fb      	adds	r3, r7, r3
 8003f72:	781a      	ldrb	r2, [r3, #0]
 8003f74:	211d      	movs	r1, #29
 8003f76:	187b      	adds	r3, r7, r1
 8003f78:	701a      	strb	r2, [r3, #0]
	max30102_write(obj, MAX30102_FIFO_RD_PTR, &reset_value, 1);
 8003f7a:	187a      	adds	r2, r7, r1
 8003f7c:	6838      	ldr	r0, [r7, #0]
 8003f7e:	2301      	movs	r3, #1
 8003f80:	2106      	movs	r1, #6
 8003f82:	f7ff fcc7 	bl	8003914 <max30102_write>
	// Return both the last IR and Red samples in a struct
	Max30102Samples result = { last_ir_sample, last_red_sample };
 8003f86:	2114      	movs	r1, #20
 8003f88:	187b      	adds	r3, r7, r1
 8003f8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	187b      	adds	r3, r7, r1
 8003f90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f92:	605a      	str	r2, [r3, #4]
	return result;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	187a      	adds	r2, r7, r1
 8003f98:	ca03      	ldmia	r2!, {r0, r1}
 8003f9a:	c303      	stmia	r3!, {r0, r1}

}
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	b00e      	add	sp, #56	@ 0x38
 8003fa2:	bdb0      	pop	{r4, r5, r7, pc}

08003fa4 <max30102_read_temp>:
 * @param temp_int Pointer to store the integer part of temperature. Stored in 2's complement format.
 * @param temp_frac Pointer to store the fractional part of temperature. Increments of 0.0625 deg C.
 */

void max30102_read_temp(max30102_t *obj, int8_t *temp_int, uint8_t *temp_frac)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
    max30102_read(obj, MAX30102_DIE_TINT, (uint8_t *)temp_int, 1);
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	211f      	movs	r1, #31
 8003fb8:	f7ff fced 	bl	8003996 <max30102_read>
    max30102_read(obj, MAX30102_DIE_TFRAC, temp_frac, 1);
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	2120      	movs	r1, #32
 8003fc4:	f7ff fce7 	bl	8003996 <max30102_read>
}
 8003fc8:	46c0      	nop			@ (mov r8, r8)
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	b004      	add	sp, #16
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <MinMaxAvgStatistic_init>:
    float sum;
    int count;
} MinMaxAvgStatistic;

// Function to initialize the statistic block
void MinMaxAvgStatistic_init(MinMaxAvgStatistic *stat) {
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
    stat->min = NAN;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a07      	ldr	r2, [pc, #28]	@ (8003ff8 <MinMaxAvgStatistic_init+0x28>)
 8003fdc:	601a      	str	r2, [r3, #0]
    stat->max = NAN;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a05      	ldr	r2, [pc, #20]	@ (8003ff8 <MinMaxAvgStatistic_init+0x28>)
 8003fe2:	605a      	str	r2, [r3, #4]
    stat->sum = 0;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	609a      	str	r2, [r3, #8]
    stat->count = 0;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	60da      	str	r2, [r3, #12]
}
 8003ff0:	46c0      	nop			@ (mov r8, r8)
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	b002      	add	sp, #8
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	7fc00000 	.word	0x7fc00000

08003ffc <HighPassFilter_init1>:

/**s
 * @brief Initialize the High Pass Filter
 * @param samples Number of samples until decay to 36.8 %
 */
void HighPassFilter_init1(HighPassFilter* filter, float samples) {
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
    filter->kX = exp(-1 / samples);
 8004006:	6839      	ldr	r1, [r7, #0]
 8004008:	481d      	ldr	r0, [pc, #116]	@ (8004080 <HighPassFilter_init1+0x84>)
 800400a:	f7fc fd0f 	bl	8000a2c <__aeabi_fdiv>
 800400e:	1c03      	adds	r3, r0, #0
 8004010:	1c18      	adds	r0, r3, #0
 8004012:	f7ff f815 	bl	8003040 <__aeabi_f2d>
 8004016:	0002      	movs	r2, r0
 8004018:	000b      	movs	r3, r1
 800401a:	0010      	movs	r0, r2
 800401c:	0019      	movs	r1, r3
 800401e:	f009 fb21 	bl	800d664 <exp>
 8004022:	0002      	movs	r2, r0
 8004024:	000b      	movs	r3, r1
 8004026:	0010      	movs	r0, r2
 8004028:	0019      	movs	r1, r3
 800402a:	f7ff f851 	bl	80030d0 <__aeabi_d2f>
 800402e:	1c02      	adds	r2, r0, #0
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	601a      	str	r2, [r3, #0]
    filter->kA0 = (1 + filter->kX) / 2;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	21fe      	movs	r1, #254	@ 0xfe
 800403a:	0589      	lsls	r1, r1, #22
 800403c:	1c18      	adds	r0, r3, #0
 800403e:	f7fc fb6b 	bl	8000718 <__aeabi_fadd>
 8004042:	1c03      	adds	r3, r0, #0
 8004044:	2180      	movs	r1, #128	@ 0x80
 8004046:	05c9      	lsls	r1, r1, #23
 8004048:	1c18      	adds	r0, r3, #0
 800404a:	f7fc fcef 	bl	8000a2c <__aeabi_fdiv>
 800404e:	1c03      	adds	r3, r0, #0
 8004050:	1c1a      	adds	r2, r3, #0
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	605a      	str	r2, [r3, #4]
    filter->kA1 = -filter->kA0;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2280      	movs	r2, #128	@ 0x80
 800405c:	0612      	lsls	r2, r2, #24
 800405e:	405a      	eors	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	609a      	str	r2, [r3, #8]
    filter->kB1 = filter->kX;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	60da      	str	r2, [r3, #12]
    filter->last_filter_value = NAN;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a05      	ldr	r2, [pc, #20]	@ (8004084 <HighPassFilter_init1+0x88>)
 8004070:	611a      	str	r2, [r3, #16]
    filter->last_raw_value = NAN;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a03      	ldr	r2, [pc, #12]	@ (8004084 <HighPassFilter_init1+0x88>)
 8004076:	615a      	str	r2, [r3, #20]
}
 8004078:	46c0      	nop			@ (mov r8, r8)
 800407a:	46bd      	mov	sp, r7
 800407c:	b002      	add	sp, #8
 800407e:	bd80      	pop	{r7, pc}
 8004080:	bf800000 	.word	0xbf800000
 8004084:	7fc00000 	.word	0x7fc00000

08004088 <HighPassFilter_init2>:

void HighPassFilter_init2(HighPassFilter* filter, float cutoff, float sampling_frequency){
 8004088:	b5b0      	push	{r4, r5, r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
    HighPassFilter_init1(filter, sampling_frequency/(cutoff*2*PI));
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f7fe ffd3 	bl	8003040 <__aeabi_f2d>
 800409a:	0004      	movs	r4, r0
 800409c:	000d      	movs	r5, r1
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	1c19      	adds	r1, r3, #0
 80040a2:	1c18      	adds	r0, r3, #0
 80040a4:	f7fc fb38 	bl	8000718 <__aeabi_fadd>
 80040a8:	1c03      	adds	r3, r0, #0
 80040aa:	1c18      	adds	r0, r3, #0
 80040ac:	f7fe ffc8 	bl	8003040 <__aeabi_f2d>
 80040b0:	4a0c      	ldr	r2, [pc, #48]	@ (80040e4 <HighPassFilter_init2+0x5c>)
 80040b2:	4b0d      	ldr	r3, [pc, #52]	@ (80040e8 <HighPassFilter_init2+0x60>)
 80040b4:	f7fe f8b0 	bl	8002218 <__aeabi_dmul>
 80040b8:	0002      	movs	r2, r0
 80040ba:	000b      	movs	r3, r1
 80040bc:	0020      	movs	r0, r4
 80040be:	0029      	movs	r1, r5
 80040c0:	f7fd fc66 	bl	8001990 <__aeabi_ddiv>
 80040c4:	0002      	movs	r2, r0
 80040c6:	000b      	movs	r3, r1
 80040c8:	0010      	movs	r0, r2
 80040ca:	0019      	movs	r1, r3
 80040cc:	f7ff f800 	bl	80030d0 <__aeabi_d2f>
 80040d0:	1c02      	adds	r2, r0, #0
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	1c11      	adds	r1, r2, #0
 80040d6:	0018      	movs	r0, r3
 80040d8:	f7ff ff90 	bl	8003ffc <HighPassFilter_init1>
}
 80040dc:	46c0      	nop			@ (mov r8, r8)
 80040de:	46bd      	mov	sp, r7
 80040e0:	b004      	add	sp, #16
 80040e2:	bdb0      	pop	{r4, r5, r7, pc}
 80040e4:	54442d18 	.word	0x54442d18
 80040e8:	400921fb 	.word	0x400921fb

080040ec <LowPassFilter_init1>:

/**
 * @brief Initialize the Low Pass Filter
 * @param samples Number of samples until decay to 36.8 %
 */
void LowPassFilter_init1(LowPassFilter* filter, float samples) {
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
    filter->kX = exp(-1 / samples);
 80040f6:	6839      	ldr	r1, [r7, #0]
 80040f8:	4815      	ldr	r0, [pc, #84]	@ (8004150 <LowPassFilter_init1+0x64>)
 80040fa:	f7fc fc97 	bl	8000a2c <__aeabi_fdiv>
 80040fe:	1c03      	adds	r3, r0, #0
 8004100:	1c18      	adds	r0, r3, #0
 8004102:	f7fe ff9d 	bl	8003040 <__aeabi_f2d>
 8004106:	0002      	movs	r2, r0
 8004108:	000b      	movs	r3, r1
 800410a:	0010      	movs	r0, r2
 800410c:	0019      	movs	r1, r3
 800410e:	f009 faa9 	bl	800d664 <exp>
 8004112:	0002      	movs	r2, r0
 8004114:	000b      	movs	r3, r1
 8004116:	0010      	movs	r0, r2
 8004118:	0019      	movs	r1, r3
 800411a:	f7fe ffd9 	bl	80030d0 <__aeabi_d2f>
 800411e:	1c02      	adds	r2, r0, #0
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	601a      	str	r2, [r3, #0]
    filter->kA0 = 1 - filter->kX;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	1c19      	adds	r1, r3, #0
 800412a:	20fe      	movs	r0, #254	@ 0xfe
 800412c:	0580      	lsls	r0, r0, #22
 800412e:	f7fc fedb 	bl	8000ee8 <__aeabi_fsub>
 8004132:	1c03      	adds	r3, r0, #0
 8004134:	1c1a      	adds	r2, r3, #0
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	605a      	str	r2, [r3, #4]
    filter->kB1 = filter->kX;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	609a      	str	r2, [r3, #8]
    filter->last_value = NAN;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a03      	ldr	r2, [pc, #12]	@ (8004154 <LowPassFilter_init1+0x68>)
 8004146:	60da      	str	r2, [r3, #12]
}
 8004148:	46c0      	nop			@ (mov r8, r8)
 800414a:	46bd      	mov	sp, r7
 800414c:	b002      	add	sp, #8
 800414e:	bd80      	pop	{r7, pc}
 8004150:	bf800000 	.word	0xbf800000
 8004154:	7fc00000 	.word	0x7fc00000

08004158 <LowPassFilter_init2>:

void LowPassFilter_init2(LowPassFilter* filter,float cutoff, float sampling_frequency){
 8004158:	b5b0      	push	{r4, r5, r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
	LowPassFilter_init1(filter, sampling_frequency/(cutoff*2*PI));
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7fe ff6b 	bl	8003040 <__aeabi_f2d>
 800416a:	0004      	movs	r4, r0
 800416c:	000d      	movs	r5, r1
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	1c19      	adds	r1, r3, #0
 8004172:	1c18      	adds	r0, r3, #0
 8004174:	f7fc fad0 	bl	8000718 <__aeabi_fadd>
 8004178:	1c03      	adds	r3, r0, #0
 800417a:	1c18      	adds	r0, r3, #0
 800417c:	f7fe ff60 	bl	8003040 <__aeabi_f2d>
 8004180:	4a0c      	ldr	r2, [pc, #48]	@ (80041b4 <LowPassFilter_init2+0x5c>)
 8004182:	4b0d      	ldr	r3, [pc, #52]	@ (80041b8 <LowPassFilter_init2+0x60>)
 8004184:	f7fe f848 	bl	8002218 <__aeabi_dmul>
 8004188:	0002      	movs	r2, r0
 800418a:	000b      	movs	r3, r1
 800418c:	0020      	movs	r0, r4
 800418e:	0029      	movs	r1, r5
 8004190:	f7fd fbfe 	bl	8001990 <__aeabi_ddiv>
 8004194:	0002      	movs	r2, r0
 8004196:	000b      	movs	r3, r1
 8004198:	0010      	movs	r0, r2
 800419a:	0019      	movs	r1, r3
 800419c:	f7fe ff98 	bl	80030d0 <__aeabi_d2f>
 80041a0:	1c02      	adds	r2, r0, #0
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	1c11      	adds	r1, r2, #0
 80041a6:	0018      	movs	r0, r3
 80041a8:	f7ff ffa0 	bl	80040ec <LowPassFilter_init1>
}
 80041ac:	46c0      	nop			@ (mov r8, r8)
 80041ae:	46bd      	mov	sp, r7
 80041b0:	b004      	add	sp, #16
 80041b2:	bdb0      	pop	{r4, r5, r7, pc}
 80041b4:	54442d18 	.word	0x54442d18
 80041b8:	400921fb 	.word	0x400921fb

080041bc <Differentiator_init1>:
} Differentiator;

/**
 * @brief Initializes the differentiator
 */
void Differentiator_init1(Differentiator* diff, float sampling_frequency) {
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
    diff->kSamplingFrequency = sampling_frequency;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	601a      	str	r2, [r3, #0]
    diff->last_value = NAN;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a03      	ldr	r2, [pc, #12]	@ (80041dc <Differentiator_init1+0x20>)
 80041d0:	605a      	str	r2, [r3, #4]
}
 80041d2:	46c0      	nop			@ (mov r8, r8)
 80041d4:	46bd      	mov	sp, r7
 80041d6:	b002      	add	sp, #8
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	46c0      	nop			@ (mov r8, r8)
 80041dc:	7fc00000 	.word	0x7fc00000

080041e0 <MovingAverageFilter_init1>:
} MovingAverageFilter;

/**
 * @brief Initializes moving average filter
 */
void MovingAverageFilter_init1(MovingAverageFilter* filter, int buffer_size) {
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
    filter->index = 0;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	601a      	str	r2, [r3, #0]
    filter->count = 0;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	605a      	str	r2, [r3, #4]
    filter->buffer_size = buffer_size;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	609a      	str	r2, [r3, #8]
    filter->values = (float *)malloc(buffer_size * sizeof(float));  // Allocate memory for values
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	0018      	movs	r0, r3
 8004202:	f006 fddb 	bl	800adbc <malloc>
 8004206:	0003      	movs	r3, r0
 8004208:	001a      	movs	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	60da      	str	r2, [r3, #12]
    memset(filter->values, 0, buffer_size * sizeof(float));  // Initialize buffer with zeros
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68d8      	ldr	r0, [r3, #12]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	001a      	movs	r2, r3
 8004218:	2100      	movs	r1, #0
 800421a:	f007 f91f 	bl	800b45c <memset>

}
 800421e:	46c0      	nop			@ (mov r8, r8)
 8004220:	46bd      	mov	sp, r7
 8004222:	b002      	add	sp, #8
 8004224:	bd80      	pop	{r7, pc}
	...

08004228 <initialize_filters_1>:
static HighPassFilter high_pass_filter;
static LowPassFilter low_pass_filter;
static Differentiator differentiator;
static MovingAverageFilter averager;
// Function to initialize the filters
void initialize_filters_1() {
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
    MovingAverageFilter_init1(&averager, kAveragingSamples);
 800422c:	2232      	movs	r2, #50	@ 0x32
 800422e:	4b0d      	ldr	r3, [pc, #52]	@ (8004264 <initialize_filters_1+0x3c>)
 8004230:	0011      	movs	r1, r2
 8004232:	0018      	movs	r0, r3
 8004234:	f7ff ffd4 	bl	80041e0 <MovingAverageFilter_init1>
    Differentiator_init1(&differentiator, kSamplingFrequency);
 8004238:	4a0b      	ldr	r2, [pc, #44]	@ (8004268 <initialize_filters_1+0x40>)
 800423a:	4b0c      	ldr	r3, [pc, #48]	@ (800426c <initialize_filters_1+0x44>)
 800423c:	1c11      	adds	r1, r2, #0
 800423e:	0018      	movs	r0, r3
 8004240:	f7ff ffbc 	bl	80041bc <Differentiator_init1>
    LowPassFilter_init2(&low_pass_filter, kLowPassCutoff, kSamplingFrequency);
 8004244:	490a      	ldr	r1, [pc, #40]	@ (8004270 <initialize_filters_1+0x48>)
 8004246:	4a08      	ldr	r2, [pc, #32]	@ (8004268 <initialize_filters_1+0x40>)
 8004248:	4b0a      	ldr	r3, [pc, #40]	@ (8004274 <initialize_filters_1+0x4c>)
 800424a:	0018      	movs	r0, r3
 800424c:	f7ff ff84 	bl	8004158 <LowPassFilter_init2>
    HighPassFilter_init2(&high_pass_filter, kHighPassCutoff, kSamplingFrequency);
 8004250:	21fc      	movs	r1, #252	@ 0xfc
 8004252:	0589      	lsls	r1, r1, #22
 8004254:	4a04      	ldr	r2, [pc, #16]	@ (8004268 <initialize_filters_1+0x40>)
 8004256:	4b08      	ldr	r3, [pc, #32]	@ (8004278 <initialize_filters_1+0x50>)
 8004258:	0018      	movs	r0, r3
 800425a:	f7ff ff15 	bl	8004088 <HighPassFilter_init2>
}
 800425e:	46c0      	nop			@ (mov r8, r8)
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	200007d8 	.word	0x200007d8
 8004268:	43c80000 	.word	0x43c80000
 800426c:	200007d0 	.word	0x200007d0
 8004270:	40a00000 	.word	0x40a00000
 8004274:	200007c0 	.word	0x200007c0
 8004278:	200007a8 	.word	0x200007a8

0800427c <initialize_filters_2>:
// Statistic for pulse oximetry
static MinMaxAvgStatistic stat_red;
static MinMaxAvgStatistic stat_ir;


void initialize_filters_2() {
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
    MovingAverageFilter_init1(&averager_bpm, kAveragingSamples_spo2);
 8004280:	2205      	movs	r2, #5
 8004282:	4b1a      	ldr	r3, [pc, #104]	@ (80042ec <initialize_filters_2+0x70>)
 8004284:	0011      	movs	r1, r2
 8004286:	0018      	movs	r0, r3
 8004288:	f7ff ffaa 	bl	80041e0 <MovingAverageFilter_init1>
    MovingAverageFilter_init1(&averager_r, kAveragingSamples_spo2);
 800428c:	2205      	movs	r2, #5
 800428e:	4b18      	ldr	r3, [pc, #96]	@ (80042f0 <initialize_filters_2+0x74>)
 8004290:	0011      	movs	r1, r2
 8004292:	0018      	movs	r0, r3
 8004294:	f7ff ffa4 	bl	80041e0 <MovingAverageFilter_init1>
    MovingAverageFilter_init1(&averager_spo2, kAveragingSamples_spo2);
 8004298:	2205      	movs	r2, #5
 800429a:	4b16      	ldr	r3, [pc, #88]	@ (80042f4 <initialize_filters_2+0x78>)
 800429c:	0011      	movs	r1, r2
 800429e:	0018      	movs	r0, r3
 80042a0:	f7ff ff9e 	bl	80041e0 <MovingAverageFilter_init1>
    Differentiator_init1(&differentiator_spo2, kSamplingFrequency_spo2);
 80042a4:	4a14      	ldr	r2, [pc, #80]	@ (80042f8 <initialize_filters_2+0x7c>)
 80042a6:	4b15      	ldr	r3, [pc, #84]	@ (80042fc <initialize_filters_2+0x80>)
 80042a8:	1c11      	adds	r1, r2, #0
 80042aa:	0018      	movs	r0, r3
 80042ac:	f7ff ff86 	bl	80041bc <Differentiator_init1>
    LowPassFilter_init2(&low_pass_filter_red, kLowPassCutoff_spo2, kSamplingFrequency_spo2);
 80042b0:	4913      	ldr	r1, [pc, #76]	@ (8004300 <initialize_filters_2+0x84>)
 80042b2:	4a11      	ldr	r2, [pc, #68]	@ (80042f8 <initialize_filters_2+0x7c>)
 80042b4:	4b13      	ldr	r3, [pc, #76]	@ (8004304 <initialize_filters_2+0x88>)
 80042b6:	0018      	movs	r0, r3
 80042b8:	f7ff ff4e 	bl	8004158 <LowPassFilter_init2>
    LowPassFilter_init2(&low_pass_filter_ir, kLowPassCutoff_spo2, kSamplingFrequency_spo2);
 80042bc:	4910      	ldr	r1, [pc, #64]	@ (8004300 <initialize_filters_2+0x84>)
 80042be:	4a0e      	ldr	r2, [pc, #56]	@ (80042f8 <initialize_filters_2+0x7c>)
 80042c0:	4b11      	ldr	r3, [pc, #68]	@ (8004308 <initialize_filters_2+0x8c>)
 80042c2:	0018      	movs	r0, r3
 80042c4:	f7ff ff48 	bl	8004158 <LowPassFilter_init2>
    HighPassFilter_init2(&high_pass_filter_spo2, kHighPassCutoff_spo2, kSamplingFrequency_spo2);
 80042c8:	21fc      	movs	r1, #252	@ 0xfc
 80042ca:	0589      	lsls	r1, r1, #22
 80042cc:	4a0a      	ldr	r2, [pc, #40]	@ (80042f8 <initialize_filters_2+0x7c>)
 80042ce:	4b0f      	ldr	r3, [pc, #60]	@ (800430c <initialize_filters_2+0x90>)
 80042d0:	0018      	movs	r0, r3
 80042d2:	f7ff fed9 	bl	8004088 <HighPassFilter_init2>
    MinMaxAvgStatistic_init(&stat_red);
 80042d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004310 <initialize_filters_2+0x94>)
 80042d8:	0018      	movs	r0, r3
 80042da:	f7ff fe79 	bl	8003fd0 <MinMaxAvgStatistic_init>
    MinMaxAvgStatistic_init(&stat_ir);
 80042de:	4b0d      	ldr	r3, [pc, #52]	@ (8004314 <initialize_filters_2+0x98>)
 80042e0:	0018      	movs	r0, r3
 80042e2:	f7ff fe75 	bl	8003fd0 <MinMaxAvgStatistic_init>
}
 80042e6:	46c0      	nop			@ (mov r8, r8)
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	20000828 	.word	0x20000828
 80042f0:	20000838 	.word	0x20000838
 80042f4:	20000848 	.word	0x20000848
 80042f8:	43c80000 	.word	0x43c80000
 80042fc:	20000820 	.word	0x20000820
 8004300:	40a00000 	.word	0x40a00000
 8004304:	200007e8 	.word	0x200007e8
 8004308:	200007f8 	.word	0x200007f8
 800430c:	20000808 	.word	0x20000808
 8004310:	20000858 	.word	0x20000858
 8004314:	20000868 	.word	0x20000868

08004318 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800431c:	4b0b      	ldr	r3, [pc, #44]	@ (800434c <HAL_MspInit+0x34>)
 800431e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004320:	4b0a      	ldr	r3, [pc, #40]	@ (800434c <HAL_MspInit+0x34>)
 8004322:	2101      	movs	r1, #1
 8004324:	430a      	orrs	r2, r1
 8004326:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004328:	4b08      	ldr	r3, [pc, #32]	@ (800434c <HAL_MspInit+0x34>)
 800432a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800432c:	4b07      	ldr	r3, [pc, #28]	@ (800434c <HAL_MspInit+0x34>)
 800432e:	2180      	movs	r1, #128	@ 0x80
 8004330:	0549      	lsls	r1, r1, #21
 8004332:	430a      	orrs	r2, r1
 8004334:	639a      	str	r2, [r3, #56]	@ 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8004336:	2302      	movs	r3, #2
 8004338:	425b      	negs	r3, r3
 800433a:	2200      	movs	r2, #0
 800433c:	2103      	movs	r1, #3
 800433e:	0018      	movs	r0, r3
 8004340:	f000 fb3a 	bl	80049b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004344:	46c0      	nop			@ (mov r8, r8)
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	46c0      	nop			@ (mov r8, r8)
 800434c:	40021000 	.word	0x40021000

08004350 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004350:	b590      	push	{r4, r7, lr}
 8004352:	b089      	sub	sp, #36	@ 0x24
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004358:	240c      	movs	r4, #12
 800435a:	193b      	adds	r3, r7, r4
 800435c:	0018      	movs	r0, r3
 800435e:	2314      	movs	r3, #20
 8004360:	001a      	movs	r2, r3
 8004362:	2100      	movs	r1, #0
 8004364:	f007 f87a 	bl	800b45c <memset>
  if(hi2c->Instance==I2C1)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a18      	ldr	r2, [pc, #96]	@ (80043d0 <HAL_I2C_MspInit+0x80>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d12a      	bne.n	80043c8 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004372:	4b18      	ldr	r3, [pc, #96]	@ (80043d4 <HAL_I2C_MspInit+0x84>)
 8004374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004376:	4b17      	ldr	r3, [pc, #92]	@ (80043d4 <HAL_I2C_MspInit+0x84>)
 8004378:	2101      	movs	r1, #1
 800437a:	430a      	orrs	r2, r1
 800437c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800437e:	4b15      	ldr	r3, [pc, #84]	@ (80043d4 <HAL_I2C_MspInit+0x84>)
 8004380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004382:	2201      	movs	r2, #1
 8004384:	4013      	ands	r3, r2
 8004386:	60bb      	str	r3, [r7, #8]
 8004388:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800438a:	193b      	adds	r3, r7, r4
 800438c:	22c0      	movs	r2, #192	@ 0xc0
 800438e:	00d2      	lsls	r2, r2, #3
 8004390:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004392:	0021      	movs	r1, r4
 8004394:	187b      	adds	r3, r7, r1
 8004396:	2212      	movs	r2, #18
 8004398:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800439a:	187b      	adds	r3, r7, r1
 800439c:	2200      	movs	r2, #0
 800439e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043a0:	187b      	adds	r3, r7, r1
 80043a2:	2203      	movs	r2, #3
 80043a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80043a6:	187b      	adds	r3, r7, r1
 80043a8:	2206      	movs	r2, #6
 80043aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043ac:	187a      	adds	r2, r7, r1
 80043ae:	23a0      	movs	r3, #160	@ 0xa0
 80043b0:	05db      	lsls	r3, r3, #23
 80043b2:	0011      	movs	r1, r2
 80043b4:	0018      	movs	r0, r3
 80043b6:	f000 fb25 	bl	8004a04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80043ba:	4b06      	ldr	r3, [pc, #24]	@ (80043d4 <HAL_I2C_MspInit+0x84>)
 80043bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043be:	4b05      	ldr	r3, [pc, #20]	@ (80043d4 <HAL_I2C_MspInit+0x84>)
 80043c0:	2180      	movs	r1, #128	@ 0x80
 80043c2:	0389      	lsls	r1, r1, #14
 80043c4:	430a      	orrs	r2, r1
 80043c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80043c8:	46c0      	nop			@ (mov r8, r8)
 80043ca:	46bd      	mov	sp, r7
 80043cc:	b009      	add	sp, #36	@ 0x24
 80043ce:	bd90      	pop	{r4, r7, pc}
 80043d0:	40005400 	.word	0x40005400
 80043d4:	40021000 	.word	0x40021000

080043d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80043d8:	b590      	push	{r4, r7, lr}
 80043da:	b089      	sub	sp, #36	@ 0x24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043e0:	240c      	movs	r4, #12
 80043e2:	193b      	adds	r3, r7, r4
 80043e4:	0018      	movs	r0, r3
 80043e6:	2314      	movs	r3, #20
 80043e8:	001a      	movs	r2, r3
 80043ea:	2100      	movs	r1, #0
 80043ec:	f007 f836 	bl	800b45c <memset>
  if(hspi->Instance==SPI2)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a18      	ldr	r2, [pc, #96]	@ (8004458 <HAL_SPI_MspInit+0x80>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d129      	bne.n	800444e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80043fa:	4b18      	ldr	r3, [pc, #96]	@ (800445c <HAL_SPI_MspInit+0x84>)
 80043fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043fe:	4b17      	ldr	r3, [pc, #92]	@ (800445c <HAL_SPI_MspInit+0x84>)
 8004400:	2180      	movs	r1, #128	@ 0x80
 8004402:	01c9      	lsls	r1, r1, #7
 8004404:	430a      	orrs	r2, r1
 8004406:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004408:	4b14      	ldr	r3, [pc, #80]	@ (800445c <HAL_SPI_MspInit+0x84>)
 800440a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800440c:	4b13      	ldr	r3, [pc, #76]	@ (800445c <HAL_SPI_MspInit+0x84>)
 800440e:	2102      	movs	r1, #2
 8004410:	430a      	orrs	r2, r1
 8004412:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004414:	4b11      	ldr	r3, [pc, #68]	@ (800445c <HAL_SPI_MspInit+0x84>)
 8004416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004418:	2202      	movs	r2, #2
 800441a:	4013      	ands	r3, r2
 800441c:	60bb      	str	r3, [r7, #8]
 800441e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004420:	193b      	adds	r3, r7, r4
 8004422:	22e0      	movs	r2, #224	@ 0xe0
 8004424:	0212      	lsls	r2, r2, #8
 8004426:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004428:	0021      	movs	r1, r4
 800442a:	187b      	adds	r3, r7, r1
 800442c:	2202      	movs	r2, #2
 800442e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004430:	187b      	adds	r3, r7, r1
 8004432:	2200      	movs	r2, #0
 8004434:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004436:	187b      	adds	r3, r7, r1
 8004438:	2203      	movs	r2, #3
 800443a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800443c:	187b      	adds	r3, r7, r1
 800443e:	2200      	movs	r2, #0
 8004440:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004442:	187b      	adds	r3, r7, r1
 8004444:	4a06      	ldr	r2, [pc, #24]	@ (8004460 <HAL_SPI_MspInit+0x88>)
 8004446:	0019      	movs	r1, r3
 8004448:	0010      	movs	r0, r2
 800444a:	f000 fadb 	bl	8004a04 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 800444e:	46c0      	nop			@ (mov r8, r8)
 8004450:	46bd      	mov	sp, r7
 8004452:	b009      	add	sp, #36	@ 0x24
 8004454:	bd90      	pop	{r4, r7, pc}
 8004456:	46c0      	nop			@ (mov r8, r8)
 8004458:	40003800 	.word	0x40003800
 800445c:	40021000 	.word	0x40021000
 8004460:	50000400 	.word	0x50000400

08004464 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004464:	b590      	push	{r4, r7, lr}
 8004466:	b089      	sub	sp, #36	@ 0x24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800446c:	240c      	movs	r4, #12
 800446e:	193b      	adds	r3, r7, r4
 8004470:	0018      	movs	r0, r3
 8004472:	2314      	movs	r3, #20
 8004474:	001a      	movs	r2, r3
 8004476:	2100      	movs	r1, #0
 8004478:	f006 fff0 	bl	800b45c <memset>
  if(huart->Instance==USART2)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a18      	ldr	r2, [pc, #96]	@ (80044e4 <HAL_UART_MspInit+0x80>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d129      	bne.n	80044da <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004486:	4b18      	ldr	r3, [pc, #96]	@ (80044e8 <HAL_UART_MspInit+0x84>)
 8004488:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800448a:	4b17      	ldr	r3, [pc, #92]	@ (80044e8 <HAL_UART_MspInit+0x84>)
 800448c:	2180      	movs	r1, #128	@ 0x80
 800448e:	0289      	lsls	r1, r1, #10
 8004490:	430a      	orrs	r2, r1
 8004492:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004494:	4b14      	ldr	r3, [pc, #80]	@ (80044e8 <HAL_UART_MspInit+0x84>)
 8004496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004498:	4b13      	ldr	r3, [pc, #76]	@ (80044e8 <HAL_UART_MspInit+0x84>)
 800449a:	2101      	movs	r1, #1
 800449c:	430a      	orrs	r2, r1
 800449e:	62da      	str	r2, [r3, #44]	@ 0x2c
 80044a0:	4b11      	ldr	r3, [pc, #68]	@ (80044e8 <HAL_UART_MspInit+0x84>)
 80044a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a4:	2201      	movs	r2, #1
 80044a6:	4013      	ands	r3, r2
 80044a8:	60bb      	str	r3, [r7, #8]
 80044aa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80044ac:	0021      	movs	r1, r4
 80044ae:	187b      	adds	r3, r7, r1
 80044b0:	220c      	movs	r2, #12
 80044b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044b4:	187b      	adds	r3, r7, r1
 80044b6:	2202      	movs	r2, #2
 80044b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ba:	187b      	adds	r3, r7, r1
 80044bc:	2200      	movs	r2, #0
 80044be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044c0:	187b      	adds	r3, r7, r1
 80044c2:	2203      	movs	r2, #3
 80044c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80044c6:	187b      	adds	r3, r7, r1
 80044c8:	2204      	movs	r2, #4
 80044ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044cc:	187a      	adds	r2, r7, r1
 80044ce:	23a0      	movs	r3, #160	@ 0xa0
 80044d0:	05db      	lsls	r3, r3, #23
 80044d2:	0011      	movs	r1, r2
 80044d4:	0018      	movs	r0, r3
 80044d6:	f000 fa95 	bl	8004a04 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80044da:	46c0      	nop			@ (mov r8, r8)
 80044dc:	46bd      	mov	sp, r7
 80044de:	b009      	add	sp, #36	@ 0x24
 80044e0:	bd90      	pop	{r4, r7, pc}
 80044e2:	46c0      	nop			@ (mov r8, r8)
 80044e4:	40004400 	.word	0x40004400
 80044e8:	40021000 	.word	0x40021000

080044ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044ec:	b5b0      	push	{r4, r5, r7, lr}
 80044ee:	b08c      	sub	sp, #48	@ 0x30
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	0019      	movs	r1, r3
 80044fa:	200f      	movs	r0, #15
 80044fc:	f000 fa5c 	bl	80049b8 <HAL_NVIC_SetPriority>
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004500:	200f      	movs	r0, #15
 8004502:	f000 fa6e 	bl	80049e2 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8004506:	4b32      	ldr	r3, [pc, #200]	@ (80045d0 <HAL_InitTick+0xe4>)
 8004508:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800450a:	4b31      	ldr	r3, [pc, #196]	@ (80045d0 <HAL_InitTick+0xe4>)
 800450c:	2101      	movs	r1, #1
 800450e:	430a      	orrs	r2, r1
 8004510:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004512:	2308      	movs	r3, #8
 8004514:	18fa      	adds	r2, r7, r3
 8004516:	240c      	movs	r4, #12
 8004518:	193b      	adds	r3, r7, r4
 800451a:	0011      	movs	r1, r2
 800451c:	0018      	movs	r0, r3
 800451e:	f002 f817 	bl	8006550 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004522:	193b      	adds	r3, r7, r4
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452a:	2b00      	cmp	r3, #0
 800452c:	d104      	bne.n	8004538 <HAL_InitTick+0x4c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800452e:	f001 ffe3 	bl	80064f8 <HAL_RCC_GetPCLK1Freq>
 8004532:	0003      	movs	r3, r0
 8004534:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004536:	e004      	b.n	8004542 <HAL_InitTick+0x56>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004538:	f001 ffde 	bl	80064f8 <HAL_RCC_GetPCLK1Freq>
 800453c:	0003      	movs	r3, r0
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004544:	4923      	ldr	r1, [pc, #140]	@ (80045d4 <HAL_InitTick+0xe8>)
 8004546:	0018      	movs	r0, r3
 8004548:	f7fb fdfa 	bl	8000140 <__udivsi3>
 800454c:	0003      	movs	r3, r0
 800454e:	3b01      	subs	r3, #1
 8004550:	623b      	str	r3, [r7, #32]

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8004552:	4b21      	ldr	r3, [pc, #132]	@ (80045d8 <HAL_InitTick+0xec>)
 8004554:	2280      	movs	r2, #128	@ 0x80
 8004556:	05d2      	lsls	r2, r2, #23
 8004558:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800455a:	4b1f      	ldr	r3, [pc, #124]	@ (80045d8 <HAL_InitTick+0xec>)
 800455c:	4a1f      	ldr	r2, [pc, #124]	@ (80045dc <HAL_InitTick+0xf0>)
 800455e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8004560:	4b1d      	ldr	r3, [pc, #116]	@ (80045d8 <HAL_InitTick+0xec>)
 8004562:	6a3a      	ldr	r2, [r7, #32]
 8004564:	605a      	str	r2, [r3, #4]
  htim2.Init.ClockDivision = 0;
 8004566:	4b1c      	ldr	r3, [pc, #112]	@ (80045d8 <HAL_InitTick+0xec>)
 8004568:	2200      	movs	r2, #0
 800456a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800456c:	4b1a      	ldr	r3, [pc, #104]	@ (80045d8 <HAL_InitTick+0xec>)
 800456e:	2200      	movs	r2, #0
 8004570:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 8004572:	252b      	movs	r5, #43	@ 0x2b
 8004574:	197c      	adds	r4, r7, r5
 8004576:	4b18      	ldr	r3, [pc, #96]	@ (80045d8 <HAL_InitTick+0xec>)
 8004578:	0018      	movs	r0, r3
 800457a:	f002 fe49 	bl	8007210 <HAL_TIM_Base_Init>
 800457e:	0003      	movs	r3, r0
 8004580:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8004582:	197b      	adds	r3, r7, r5
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d11b      	bne.n	80045c2 <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800458a:	197c      	adds	r4, r7, r5
 800458c:	4b12      	ldr	r3, [pc, #72]	@ (80045d8 <HAL_InitTick+0xec>)
 800458e:	0018      	movs	r0, r3
 8004590:	f002 fe86 	bl	80072a0 <HAL_TIM_Base_Start_IT>
 8004594:	0003      	movs	r3, r0
 8004596:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8004598:	197b      	adds	r3, r7, r5
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d110      	bne.n	80045c2 <HAL_InitTick+0xd6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b03      	cmp	r3, #3
 80045a4:	d809      	bhi.n	80045ba <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	0019      	movs	r1, r3
 80045ac:	200f      	movs	r0, #15
 80045ae:	f000 fa03 	bl	80049b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80045b2:	4b0b      	ldr	r3, [pc, #44]	@ (80045e0 <HAL_InitTick+0xf4>)
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	e003      	b.n	80045c2 <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 80045ba:	232b      	movs	r3, #43	@ 0x2b
 80045bc:	18fb      	adds	r3, r7, r3
 80045be:	2201      	movs	r2, #1
 80045c0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80045c2:	232b      	movs	r3, #43	@ 0x2b
 80045c4:	18fb      	adds	r3, r7, r3
 80045c6:	781b      	ldrb	r3, [r3, #0]
}
 80045c8:	0018      	movs	r0, r3
 80045ca:	46bd      	mov	sp, r7
 80045cc:	b00c      	add	sp, #48	@ 0x30
 80045ce:	bdb0      	pop	{r4, r5, r7, pc}
 80045d0:	40021000 	.word	0x40021000
 80045d4:	000f4240 	.word	0x000f4240
 80045d8:	20000878 	.word	0x20000878
 80045dc:	000003e7 	.word	0x000003e7
 80045e0:	20000004 	.word	0x20000004

080045e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80045e8:	46c0      	nop			@ (mov r8, r8)
 80045ea:	e7fd      	b.n	80045e8 <NMI_Handler+0x4>

080045ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045f0:	46c0      	nop			@ (mov r8, r8)
 80045f2:	e7fd      	b.n	80045f0 <HardFault_Handler+0x4>

080045f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80045f8:	4b03      	ldr	r3, [pc, #12]	@ (8004608 <TIM2_IRQHandler+0x14>)
 80045fa:	0018      	movs	r0, r3
 80045fc:	f002 fea2 	bl	8007344 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004600:	46c0      	nop			@ (mov r8, r8)
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	46c0      	nop			@ (mov r8, r8)
 8004608:	20000878 	.word	0x20000878

0800460c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
  return 1;
 8004610:	2301      	movs	r3, #1
}
 8004612:	0018      	movs	r0, r3
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <_kill>:

int _kill(int pid, int sig)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004622:	f006 ff39 	bl	800b498 <__errno>
 8004626:	0003      	movs	r3, r0
 8004628:	2216      	movs	r2, #22
 800462a:	601a      	str	r2, [r3, #0]
  return -1;
 800462c:	2301      	movs	r3, #1
 800462e:	425b      	negs	r3, r3
}
 8004630:	0018      	movs	r0, r3
 8004632:	46bd      	mov	sp, r7
 8004634:	b002      	add	sp, #8
 8004636:	bd80      	pop	{r7, pc}

08004638 <_exit>:

void _exit (int status)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004640:	2301      	movs	r3, #1
 8004642:	425a      	negs	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	0011      	movs	r1, r2
 8004648:	0018      	movs	r0, r3
 800464a:	f7ff ffe5 	bl	8004618 <_kill>
  while (1) {}    /* Make sure we hang here */
 800464e:	46c0      	nop			@ (mov r8, r8)
 8004650:	e7fd      	b.n	800464e <_exit+0x16>

08004652 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b086      	sub	sp, #24
 8004656:	af00      	add	r7, sp, #0
 8004658:	60f8      	str	r0, [r7, #12]
 800465a:	60b9      	str	r1, [r7, #8]
 800465c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800465e:	2300      	movs	r3, #0
 8004660:	617b      	str	r3, [r7, #20]
 8004662:	e00a      	b.n	800467a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004664:	e000      	b.n	8004668 <_read+0x16>
 8004666:	bf00      	nop
 8004668:	0001      	movs	r1, r0
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	60ba      	str	r2, [r7, #8]
 8004670:	b2ca      	uxtb	r2, r1
 8004672:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	3301      	adds	r3, #1
 8004678:	617b      	str	r3, [r7, #20]
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	429a      	cmp	r2, r3
 8004680:	dbf0      	blt.n	8004664 <_read+0x12>
  }

  return len;
 8004682:	687b      	ldr	r3, [r7, #4]
}
 8004684:	0018      	movs	r0, r3
 8004686:	46bd      	mov	sp, r7
 8004688:	b006      	add	sp, #24
 800468a:	bd80      	pop	{r7, pc}

0800468c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004698:	2300      	movs	r3, #0
 800469a:	617b      	str	r3, [r7, #20]
 800469c:	e009      	b.n	80046b2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	1c5a      	adds	r2, r3, #1
 80046a2:	60ba      	str	r2, [r7, #8]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	0018      	movs	r0, r3
 80046a8:	f7fe fdd8 	bl	800325c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	3301      	adds	r3, #1
 80046b0:	617b      	str	r3, [r7, #20]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	dbf1      	blt.n	800469e <_write+0x12>
  }
  return len;
 80046ba:	687b      	ldr	r3, [r7, #4]
}
 80046bc:	0018      	movs	r0, r3
 80046be:	46bd      	mov	sp, r7
 80046c0:	b006      	add	sp, #24
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <_close>:

int _close(int file)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80046cc:	2301      	movs	r3, #1
 80046ce:	425b      	negs	r3, r3
}
 80046d0:	0018      	movs	r0, r3
 80046d2:	46bd      	mov	sp, r7
 80046d4:	b002      	add	sp, #8
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2280      	movs	r2, #128	@ 0x80
 80046e6:	0192      	lsls	r2, r2, #6
 80046e8:	605a      	str	r2, [r3, #4]
  return 0;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	0018      	movs	r0, r3
 80046ee:	46bd      	mov	sp, r7
 80046f0:	b002      	add	sp, #8
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <_isatty>:

int _isatty(int file)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80046fc:	2301      	movs	r3, #1
}
 80046fe:	0018      	movs	r0, r3
 8004700:	46bd      	mov	sp, r7
 8004702:	b002      	add	sp, #8
 8004704:	bd80      	pop	{r7, pc}

08004706 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b084      	sub	sp, #16
 800470a:	af00      	add	r7, sp, #0
 800470c:	60f8      	str	r0, [r7, #12]
 800470e:	60b9      	str	r1, [r7, #8]
 8004710:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004712:	2300      	movs	r3, #0
}
 8004714:	0018      	movs	r0, r3
 8004716:	46bd      	mov	sp, r7
 8004718:	b004      	add	sp, #16
 800471a:	bd80      	pop	{r7, pc}

0800471c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004724:	4a14      	ldr	r2, [pc, #80]	@ (8004778 <_sbrk+0x5c>)
 8004726:	4b15      	ldr	r3, [pc, #84]	@ (800477c <_sbrk+0x60>)
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004730:	4b13      	ldr	r3, [pc, #76]	@ (8004780 <_sbrk+0x64>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d102      	bne.n	800473e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004738:	4b11      	ldr	r3, [pc, #68]	@ (8004780 <_sbrk+0x64>)
 800473a:	4a12      	ldr	r2, [pc, #72]	@ (8004784 <_sbrk+0x68>)
 800473c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800473e:	4b10      	ldr	r3, [pc, #64]	@ (8004780 <_sbrk+0x64>)
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	18d3      	adds	r3, r2, r3
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	429a      	cmp	r2, r3
 800474a:	d207      	bcs.n	800475c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800474c:	f006 fea4 	bl	800b498 <__errno>
 8004750:	0003      	movs	r3, r0
 8004752:	220c      	movs	r2, #12
 8004754:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004756:	2301      	movs	r3, #1
 8004758:	425b      	negs	r3, r3
 800475a:	e009      	b.n	8004770 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800475c:	4b08      	ldr	r3, [pc, #32]	@ (8004780 <_sbrk+0x64>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004762:	4b07      	ldr	r3, [pc, #28]	@ (8004780 <_sbrk+0x64>)
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	18d2      	adds	r2, r2, r3
 800476a:	4b05      	ldr	r3, [pc, #20]	@ (8004780 <_sbrk+0x64>)
 800476c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800476e:	68fb      	ldr	r3, [r7, #12]
}
 8004770:	0018      	movs	r0, r3
 8004772:	46bd      	mov	sp, r7
 8004774:	b006      	add	sp, #24
 8004776:	bd80      	pop	{r7, pc}
 8004778:	20005000 	.word	0x20005000
 800477c:	00000400 	.word	0x00000400
 8004780:	200008b8 	.word	0x200008b8
 8004784:	20001770 	.word	0x20001770

08004788 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800478c:	46c0      	nop			@ (mov r8, r8)
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
	...

08004794 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004794:	480d      	ldr	r0, [pc, #52]	@ (80047cc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004796:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004798:	f7ff fff6 	bl	8004788 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800479c:	480c      	ldr	r0, [pc, #48]	@ (80047d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800479e:	490d      	ldr	r1, [pc, #52]	@ (80047d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80047a0:	4a0d      	ldr	r2, [pc, #52]	@ (80047d8 <LoopForever+0xe>)
  movs r3, #0
 80047a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80047a4:	e002      	b.n	80047ac <LoopCopyDataInit>

080047a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80047a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047aa:	3304      	adds	r3, #4

080047ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047b0:	d3f9      	bcc.n	80047a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047b2:	4a0a      	ldr	r2, [pc, #40]	@ (80047dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80047b4:	4c0a      	ldr	r4, [pc, #40]	@ (80047e0 <LoopForever+0x16>)
  movs r3, #0
 80047b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047b8:	e001      	b.n	80047be <LoopFillZerobss>

080047ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047bc:	3204      	adds	r2, #4

080047be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047c0:	d3fb      	bcc.n	80047ba <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80047c2:	f006 fe6f 	bl	800b4a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80047c6:	f7fe fd89 	bl	80032dc <main>

080047ca <LoopForever>:

LoopForever:
    b LoopForever
 80047ca:	e7fe      	b.n	80047ca <LoopForever>
   ldr   r0, =_estack
 80047cc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80047d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047d4:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80047d8:	0800dfd0 	.word	0x0800dfd0
  ldr r2, =_sbss
 80047dc:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80047e0:	20001770 	.word	0x20001770

080047e4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80047e4:	e7fe      	b.n	80047e4 <ADC1_COMP_IRQHandler>
	...

080047e8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80047ee:	1dfb      	adds	r3, r7, #7
 80047f0:	2200      	movs	r2, #0
 80047f2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80047f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004824 <HAL_Init+0x3c>)
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004824 <HAL_Init+0x3c>)
 80047fa:	2140      	movs	r1, #64	@ 0x40
 80047fc:	430a      	orrs	r2, r1
 80047fe:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004800:	2003      	movs	r0, #3
 8004802:	f7ff fe73 	bl	80044ec <HAL_InitTick>
 8004806:	1e03      	subs	r3, r0, #0
 8004808:	d003      	beq.n	8004812 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800480a:	1dfb      	adds	r3, r7, #7
 800480c:	2201      	movs	r2, #1
 800480e:	701a      	strb	r2, [r3, #0]
 8004810:	e001      	b.n	8004816 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004812:	f7ff fd81 	bl	8004318 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004816:	1dfb      	adds	r3, r7, #7
 8004818:	781b      	ldrb	r3, [r3, #0]
}
 800481a:	0018      	movs	r0, r3
 800481c:	46bd      	mov	sp, r7
 800481e:	b002      	add	sp, #8
 8004820:	bd80      	pop	{r7, pc}
 8004822:	46c0      	nop			@ (mov r8, r8)
 8004824:	40022000 	.word	0x40022000

08004828 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800482c:	4b05      	ldr	r3, [pc, #20]	@ (8004844 <HAL_IncTick+0x1c>)
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	001a      	movs	r2, r3
 8004832:	4b05      	ldr	r3, [pc, #20]	@ (8004848 <HAL_IncTick+0x20>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	18d2      	adds	r2, r2, r3
 8004838:	4b03      	ldr	r3, [pc, #12]	@ (8004848 <HAL_IncTick+0x20>)
 800483a:	601a      	str	r2, [r3, #0]
}
 800483c:	46c0      	nop			@ (mov r8, r8)
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	46c0      	nop			@ (mov r8, r8)
 8004844:	20000008 	.word	0x20000008
 8004848:	200008bc 	.word	0x200008bc

0800484c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
  return uwTick;
 8004850:	4b02      	ldr	r3, [pc, #8]	@ (800485c <HAL_GetTick+0x10>)
 8004852:	681b      	ldr	r3, [r3, #0]
}
 8004854:	0018      	movs	r0, r3
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	46c0      	nop			@ (mov r8, r8)
 800485c:	200008bc 	.word	0x200008bc

08004860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004868:	f7ff fff0 	bl	800484c <HAL_GetTick>
 800486c:	0003      	movs	r3, r0
 800486e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	3301      	adds	r3, #1
 8004878:	d005      	beq.n	8004886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800487a:	4b0a      	ldr	r3, [pc, #40]	@ (80048a4 <HAL_Delay+0x44>)
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	001a      	movs	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	189b      	adds	r3, r3, r2
 8004884:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004886:	46c0      	nop			@ (mov r8, r8)
 8004888:	f7ff ffe0 	bl	800484c <HAL_GetTick>
 800488c:	0002      	movs	r2, r0
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	429a      	cmp	r2, r3
 8004896:	d8f7      	bhi.n	8004888 <HAL_Delay+0x28>
  {
  }
}
 8004898:	46c0      	nop			@ (mov r8, r8)
 800489a:	46c0      	nop			@ (mov r8, r8)
 800489c:	46bd      	mov	sp, r7
 800489e:	b004      	add	sp, #16
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	46c0      	nop			@ (mov r8, r8)
 80048a4:	20000008 	.word	0x20000008

080048a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	0002      	movs	r2, r0
 80048b0:	1dfb      	adds	r3, r7, #7
 80048b2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80048b4:	1dfb      	adds	r3, r7, #7
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80048ba:	d809      	bhi.n	80048d0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048bc:	1dfb      	adds	r3, r7, #7
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	001a      	movs	r2, r3
 80048c2:	231f      	movs	r3, #31
 80048c4:	401a      	ands	r2, r3
 80048c6:	4b04      	ldr	r3, [pc, #16]	@ (80048d8 <__NVIC_EnableIRQ+0x30>)
 80048c8:	2101      	movs	r1, #1
 80048ca:	4091      	lsls	r1, r2
 80048cc:	000a      	movs	r2, r1
 80048ce:	601a      	str	r2, [r3, #0]
  }
}
 80048d0:	46c0      	nop			@ (mov r8, r8)
 80048d2:	46bd      	mov	sp, r7
 80048d4:	b002      	add	sp, #8
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	e000e100 	.word	0xe000e100

080048dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048dc:	b590      	push	{r4, r7, lr}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	0002      	movs	r2, r0
 80048e4:	6039      	str	r1, [r7, #0]
 80048e6:	1dfb      	adds	r3, r7, #7
 80048e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80048ea:	1dfb      	adds	r3, r7, #7
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80048f0:	d828      	bhi.n	8004944 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80048f2:	4a2f      	ldr	r2, [pc, #188]	@ (80049b0 <__NVIC_SetPriority+0xd4>)
 80048f4:	1dfb      	adds	r3, r7, #7
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	b25b      	sxtb	r3, r3
 80048fa:	089b      	lsrs	r3, r3, #2
 80048fc:	33c0      	adds	r3, #192	@ 0xc0
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	589b      	ldr	r3, [r3, r2]
 8004902:	1dfa      	adds	r2, r7, #7
 8004904:	7812      	ldrb	r2, [r2, #0]
 8004906:	0011      	movs	r1, r2
 8004908:	2203      	movs	r2, #3
 800490a:	400a      	ands	r2, r1
 800490c:	00d2      	lsls	r2, r2, #3
 800490e:	21ff      	movs	r1, #255	@ 0xff
 8004910:	4091      	lsls	r1, r2
 8004912:	000a      	movs	r2, r1
 8004914:	43d2      	mvns	r2, r2
 8004916:	401a      	ands	r2, r3
 8004918:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	019b      	lsls	r3, r3, #6
 800491e:	22ff      	movs	r2, #255	@ 0xff
 8004920:	401a      	ands	r2, r3
 8004922:	1dfb      	adds	r3, r7, #7
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	0018      	movs	r0, r3
 8004928:	2303      	movs	r3, #3
 800492a:	4003      	ands	r3, r0
 800492c:	00db      	lsls	r3, r3, #3
 800492e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004930:	481f      	ldr	r0, [pc, #124]	@ (80049b0 <__NVIC_SetPriority+0xd4>)
 8004932:	1dfb      	adds	r3, r7, #7
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	b25b      	sxtb	r3, r3
 8004938:	089b      	lsrs	r3, r3, #2
 800493a:	430a      	orrs	r2, r1
 800493c:	33c0      	adds	r3, #192	@ 0xc0
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004942:	e031      	b.n	80049a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004944:	4a1b      	ldr	r2, [pc, #108]	@ (80049b4 <__NVIC_SetPriority+0xd8>)
 8004946:	1dfb      	adds	r3, r7, #7
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	0019      	movs	r1, r3
 800494c:	230f      	movs	r3, #15
 800494e:	400b      	ands	r3, r1
 8004950:	3b08      	subs	r3, #8
 8004952:	089b      	lsrs	r3, r3, #2
 8004954:	3306      	adds	r3, #6
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	18d3      	adds	r3, r2, r3
 800495a:	3304      	adds	r3, #4
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	1dfa      	adds	r2, r7, #7
 8004960:	7812      	ldrb	r2, [r2, #0]
 8004962:	0011      	movs	r1, r2
 8004964:	2203      	movs	r2, #3
 8004966:	400a      	ands	r2, r1
 8004968:	00d2      	lsls	r2, r2, #3
 800496a:	21ff      	movs	r1, #255	@ 0xff
 800496c:	4091      	lsls	r1, r2
 800496e:	000a      	movs	r2, r1
 8004970:	43d2      	mvns	r2, r2
 8004972:	401a      	ands	r2, r3
 8004974:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	019b      	lsls	r3, r3, #6
 800497a:	22ff      	movs	r2, #255	@ 0xff
 800497c:	401a      	ands	r2, r3
 800497e:	1dfb      	adds	r3, r7, #7
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	0018      	movs	r0, r3
 8004984:	2303      	movs	r3, #3
 8004986:	4003      	ands	r3, r0
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800498c:	4809      	ldr	r0, [pc, #36]	@ (80049b4 <__NVIC_SetPriority+0xd8>)
 800498e:	1dfb      	adds	r3, r7, #7
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	001c      	movs	r4, r3
 8004994:	230f      	movs	r3, #15
 8004996:	4023      	ands	r3, r4
 8004998:	3b08      	subs	r3, #8
 800499a:	089b      	lsrs	r3, r3, #2
 800499c:	430a      	orrs	r2, r1
 800499e:	3306      	adds	r3, #6
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	18c3      	adds	r3, r0, r3
 80049a4:	3304      	adds	r3, #4
 80049a6:	601a      	str	r2, [r3, #0]
}
 80049a8:	46c0      	nop			@ (mov r8, r8)
 80049aa:	46bd      	mov	sp, r7
 80049ac:	b003      	add	sp, #12
 80049ae:	bd90      	pop	{r4, r7, pc}
 80049b0:	e000e100 	.word	0xe000e100
 80049b4:	e000ed00 	.word	0xe000ed00

080049b8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60b9      	str	r1, [r7, #8]
 80049c0:	607a      	str	r2, [r7, #4]
 80049c2:	210f      	movs	r1, #15
 80049c4:	187b      	adds	r3, r7, r1
 80049c6:	1c02      	adds	r2, r0, #0
 80049c8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	187b      	adds	r3, r7, r1
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	b25b      	sxtb	r3, r3
 80049d2:	0011      	movs	r1, r2
 80049d4:	0018      	movs	r0, r3
 80049d6:	f7ff ff81 	bl	80048dc <__NVIC_SetPriority>
}
 80049da:	46c0      	nop			@ (mov r8, r8)
 80049dc:	46bd      	mov	sp, r7
 80049de:	b004      	add	sp, #16
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b082      	sub	sp, #8
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	0002      	movs	r2, r0
 80049ea:	1dfb      	adds	r3, r7, #7
 80049ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049ee:	1dfb      	adds	r3, r7, #7
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	b25b      	sxtb	r3, r3
 80049f4:	0018      	movs	r0, r3
 80049f6:	f7ff ff57 	bl	80048a8 <__NVIC_EnableIRQ>
}
 80049fa:	46c0      	nop			@ (mov r8, r8)
 80049fc:	46bd      	mov	sp, r7
 80049fe:	b002      	add	sp, #8
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a12:	2300      	movs	r3, #0
 8004a14:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004a16:	2300      	movs	r3, #0
 8004a18:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004a1a:	e155      	b.n	8004cc8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2101      	movs	r1, #1
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	4091      	lsls	r1, r2
 8004a26:	000a      	movs	r2, r1
 8004a28:	4013      	ands	r3, r2
 8004a2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d100      	bne.n	8004a34 <HAL_GPIO_Init+0x30>
 8004a32:	e146      	b.n	8004cc2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	2203      	movs	r2, #3
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d005      	beq.n	8004a4c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	2203      	movs	r2, #3
 8004a46:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d130      	bne.n	8004aae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	2203      	movs	r2, #3
 8004a58:	409a      	lsls	r2, r3
 8004a5a:	0013      	movs	r3, r2
 8004a5c:	43da      	mvns	r2, r3
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	4013      	ands	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	68da      	ldr	r2, [r3, #12]
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	409a      	lsls	r2, r3
 8004a6e:	0013      	movs	r3, r2
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a82:	2201      	movs	r2, #1
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	409a      	lsls	r2, r3
 8004a88:	0013      	movs	r3, r2
 8004a8a:	43da      	mvns	r2, r3
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	091b      	lsrs	r3, r3, #4
 8004a98:	2201      	movs	r2, #1
 8004a9a:	401a      	ands	r2, r3
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	409a      	lsls	r2, r3
 8004aa0:	0013      	movs	r3, r2
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	2203      	movs	r2, #3
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	2b03      	cmp	r3, #3
 8004ab8:	d017      	beq.n	8004aea <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	2203      	movs	r2, #3
 8004ac6:	409a      	lsls	r2, r3
 8004ac8:	0013      	movs	r3, r2
 8004aca:	43da      	mvns	r2, r3
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	4013      	ands	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	689a      	ldr	r2, [r3, #8]
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	409a      	lsls	r2, r3
 8004adc:	0013      	movs	r3, r2
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2203      	movs	r2, #3
 8004af0:	4013      	ands	r3, r2
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d123      	bne.n	8004b3e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	08da      	lsrs	r2, r3, #3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	3208      	adds	r2, #8
 8004afe:	0092      	lsls	r2, r2, #2
 8004b00:	58d3      	ldr	r3, [r2, r3]
 8004b02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	2207      	movs	r2, #7
 8004b08:	4013      	ands	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	220f      	movs	r2, #15
 8004b0e:	409a      	lsls	r2, r3
 8004b10:	0013      	movs	r3, r2
 8004b12:	43da      	mvns	r2, r3
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	4013      	ands	r3, r2
 8004b18:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	691a      	ldr	r2, [r3, #16]
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2107      	movs	r1, #7
 8004b22:	400b      	ands	r3, r1
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	409a      	lsls	r2, r3
 8004b28:	0013      	movs	r3, r2
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	08da      	lsrs	r2, r3, #3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	3208      	adds	r2, #8
 8004b38:	0092      	lsls	r2, r2, #2
 8004b3a:	6939      	ldr	r1, [r7, #16]
 8004b3c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	2203      	movs	r2, #3
 8004b4a:	409a      	lsls	r2, r3
 8004b4c:	0013      	movs	r3, r2
 8004b4e:	43da      	mvns	r2, r3
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	4013      	ands	r3, r2
 8004b54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2203      	movs	r2, #3
 8004b5c:	401a      	ands	r2, r3
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	005b      	lsls	r3, r3, #1
 8004b62:	409a      	lsls	r2, r3
 8004b64:	0013      	movs	r3, r2
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	23c0      	movs	r3, #192	@ 0xc0
 8004b78:	029b      	lsls	r3, r3, #10
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	d100      	bne.n	8004b80 <HAL_GPIO_Init+0x17c>
 8004b7e:	e0a0      	b.n	8004cc2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b80:	4b57      	ldr	r3, [pc, #348]	@ (8004ce0 <HAL_GPIO_Init+0x2dc>)
 8004b82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b84:	4b56      	ldr	r3, [pc, #344]	@ (8004ce0 <HAL_GPIO_Init+0x2dc>)
 8004b86:	2101      	movs	r1, #1
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b8c:	4a55      	ldr	r2, [pc, #340]	@ (8004ce4 <HAL_GPIO_Init+0x2e0>)
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	089b      	lsrs	r3, r3, #2
 8004b92:	3302      	adds	r3, #2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	589b      	ldr	r3, [r3, r2]
 8004b98:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	2203      	movs	r2, #3
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	220f      	movs	r2, #15
 8004ba4:	409a      	lsls	r2, r3
 8004ba6:	0013      	movs	r3, r2
 8004ba8:	43da      	mvns	r2, r3
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	4013      	ands	r3, r2
 8004bae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	23a0      	movs	r3, #160	@ 0xa0
 8004bb4:	05db      	lsls	r3, r3, #23
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d01f      	beq.n	8004bfa <HAL_GPIO_Init+0x1f6>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a4a      	ldr	r2, [pc, #296]	@ (8004ce8 <HAL_GPIO_Init+0x2e4>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d019      	beq.n	8004bf6 <HAL_GPIO_Init+0x1f2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a49      	ldr	r2, [pc, #292]	@ (8004cec <HAL_GPIO_Init+0x2e8>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d013      	beq.n	8004bf2 <HAL_GPIO_Init+0x1ee>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a48      	ldr	r2, [pc, #288]	@ (8004cf0 <HAL_GPIO_Init+0x2ec>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d00d      	beq.n	8004bee <HAL_GPIO_Init+0x1ea>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a47      	ldr	r2, [pc, #284]	@ (8004cf4 <HAL_GPIO_Init+0x2f0>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d007      	beq.n	8004bea <HAL_GPIO_Init+0x1e6>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a46      	ldr	r2, [pc, #280]	@ (8004cf8 <HAL_GPIO_Init+0x2f4>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d101      	bne.n	8004be6 <HAL_GPIO_Init+0x1e2>
 8004be2:	2305      	movs	r3, #5
 8004be4:	e00a      	b.n	8004bfc <HAL_GPIO_Init+0x1f8>
 8004be6:	2306      	movs	r3, #6
 8004be8:	e008      	b.n	8004bfc <HAL_GPIO_Init+0x1f8>
 8004bea:	2304      	movs	r3, #4
 8004bec:	e006      	b.n	8004bfc <HAL_GPIO_Init+0x1f8>
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e004      	b.n	8004bfc <HAL_GPIO_Init+0x1f8>
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	e002      	b.n	8004bfc <HAL_GPIO_Init+0x1f8>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e000      	b.n	8004bfc <HAL_GPIO_Init+0x1f8>
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	2103      	movs	r1, #3
 8004c00:	400a      	ands	r2, r1
 8004c02:	0092      	lsls	r2, r2, #2
 8004c04:	4093      	lsls	r3, r2
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c0c:	4935      	ldr	r1, [pc, #212]	@ (8004ce4 <HAL_GPIO_Init+0x2e0>)
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	089b      	lsrs	r3, r3, #2
 8004c12:	3302      	adds	r3, #2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c1a:	4b38      	ldr	r3, [pc, #224]	@ (8004cfc <HAL_GPIO_Init+0x2f8>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	43da      	mvns	r2, r3
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	4013      	ands	r3, r2
 8004c28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	2380      	movs	r3, #128	@ 0x80
 8004c30:	035b      	lsls	r3, r3, #13
 8004c32:	4013      	ands	r3, r2
 8004c34:	d003      	beq.n	8004c3e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004c3e:	4b2f      	ldr	r3, [pc, #188]	@ (8004cfc <HAL_GPIO_Init+0x2f8>)
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004c44:	4b2d      	ldr	r3, [pc, #180]	@ (8004cfc <HAL_GPIO_Init+0x2f8>)
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	43da      	mvns	r2, r3
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	4013      	ands	r3, r2
 8004c52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	2380      	movs	r3, #128	@ 0x80
 8004c5a:	039b      	lsls	r3, r3, #14
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	d003      	beq.n	8004c68 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004c68:	4b24      	ldr	r3, [pc, #144]	@ (8004cfc <HAL_GPIO_Init+0x2f8>)
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8004c6e:	4b23      	ldr	r3, [pc, #140]	@ (8004cfc <HAL_GPIO_Init+0x2f8>)
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	43da      	mvns	r2, r3
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	2380      	movs	r3, #128	@ 0x80
 8004c84:	029b      	lsls	r3, r3, #10
 8004c86:	4013      	ands	r3, r2
 8004c88:	d003      	beq.n	8004c92 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004c92:	4b1a      	ldr	r3, [pc, #104]	@ (8004cfc <HAL_GPIO_Init+0x2f8>)
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c98:	4b18      	ldr	r3, [pc, #96]	@ (8004cfc <HAL_GPIO_Init+0x2f8>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	43da      	mvns	r2, r3
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	2380      	movs	r3, #128	@ 0x80
 8004cae:	025b      	lsls	r3, r3, #9
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	d003      	beq.n	8004cbc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8004cfc <HAL_GPIO_Init+0x2f8>)
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	40da      	lsrs	r2, r3
 8004cd0:	1e13      	subs	r3, r2, #0
 8004cd2:	d000      	beq.n	8004cd6 <HAL_GPIO_Init+0x2d2>
 8004cd4:	e6a2      	b.n	8004a1c <HAL_GPIO_Init+0x18>
  }
}
 8004cd6:	46c0      	nop			@ (mov r8, r8)
 8004cd8:	46c0      	nop			@ (mov r8, r8)
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	b006      	add	sp, #24
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	40021000 	.word	0x40021000
 8004ce4:	40010000 	.word	0x40010000
 8004ce8:	50000400 	.word	0x50000400
 8004cec:	50000800 	.word	0x50000800
 8004cf0:	50000c00 	.word	0x50000c00
 8004cf4:	50001000 	.word	0x50001000
 8004cf8:	50001c00 	.word	0x50001c00
 8004cfc:	40010400 	.word	0x40010400

08004d00 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	0008      	movs	r0, r1
 8004d0a:	0011      	movs	r1, r2
 8004d0c:	1cbb      	adds	r3, r7, #2
 8004d0e:	1c02      	adds	r2, r0, #0
 8004d10:	801a      	strh	r2, [r3, #0]
 8004d12:	1c7b      	adds	r3, r7, #1
 8004d14:	1c0a      	adds	r2, r1, #0
 8004d16:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d18:	1c7b      	adds	r3, r7, #1
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d004      	beq.n	8004d2a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d20:	1cbb      	adds	r3, r7, #2
 8004d22:	881a      	ldrh	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004d28:	e003      	b.n	8004d32 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004d2a:	1cbb      	adds	r3, r7, #2
 8004d2c:	881a      	ldrh	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d32:	46c0      	nop			@ (mov r8, r8)
 8004d34:	46bd      	mov	sp, r7
 8004d36:	b002      	add	sp, #8
 8004d38:	bd80      	pop	{r7, pc}
	...

08004d3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	0002      	movs	r2, r0
 8004d44:	1dbb      	adds	r3, r7, #6
 8004d46:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004d48:	4b09      	ldr	r3, [pc, #36]	@ (8004d70 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	1dba      	adds	r2, r7, #6
 8004d4e:	8812      	ldrh	r2, [r2, #0]
 8004d50:	4013      	ands	r3, r2
 8004d52:	d008      	beq.n	8004d66 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d54:	4b06      	ldr	r3, [pc, #24]	@ (8004d70 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004d56:	1dba      	adds	r2, r7, #6
 8004d58:	8812      	ldrh	r2, [r2, #0]
 8004d5a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d5c:	1dbb      	adds	r3, r7, #6
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	0018      	movs	r0, r3
 8004d62:	f000 f807 	bl	8004d74 <HAL_GPIO_EXTI_Callback>
  }
}
 8004d66:	46c0      	nop			@ (mov r8, r8)
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	b002      	add	sp, #8
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	46c0      	nop			@ (mov r8, r8)
 8004d70:	40010400 	.word	0x40010400

08004d74 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	0002      	movs	r2, r0
 8004d7c:	1dbb      	adds	r3, r7, #6
 8004d7e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004d80:	46c0      	nop			@ (mov r8, r8)
 8004d82:	46bd      	mov	sp, r7
 8004d84:	b002      	add	sp, #8
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e082      	b.n	8004ea0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2241      	movs	r2, #65	@ 0x41
 8004d9e:	5c9b      	ldrb	r3, [r3, r2]
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d107      	bne.n	8004db6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2240      	movs	r2, #64	@ 0x40
 8004daa:	2100      	movs	r1, #0
 8004dac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	0018      	movs	r0, r3
 8004db2:	f7ff facd 	bl	8004350 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2241      	movs	r2, #65	@ 0x41
 8004dba:	2124      	movs	r1, #36	@ 0x24
 8004dbc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2101      	movs	r1, #1
 8004dca:	438a      	bics	r2, r1
 8004dcc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4934      	ldr	r1, [pc, #208]	@ (8004ea8 <HAL_I2C_Init+0x120>)
 8004dd8:	400a      	ands	r2, r1
 8004dda:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689a      	ldr	r2, [r3, #8]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4931      	ldr	r1, [pc, #196]	@ (8004eac <HAL_I2C_Init+0x124>)
 8004de8:	400a      	ands	r2, r1
 8004dea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d108      	bne.n	8004e06 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2180      	movs	r1, #128	@ 0x80
 8004dfe:	0209      	lsls	r1, r1, #8
 8004e00:	430a      	orrs	r2, r1
 8004e02:	609a      	str	r2, [r3, #8]
 8004e04:	e007      	b.n	8004e16 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	689a      	ldr	r2, [r3, #8]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2184      	movs	r1, #132	@ 0x84
 8004e10:	0209      	lsls	r1, r1, #8
 8004e12:	430a      	orrs	r2, r1
 8004e14:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d104      	bne.n	8004e28 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2280      	movs	r2, #128	@ 0x80
 8004e24:	0112      	lsls	r2, r2, #4
 8004e26:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	491f      	ldr	r1, [pc, #124]	@ (8004eb0 <HAL_I2C_Init+0x128>)
 8004e34:	430a      	orrs	r2, r1
 8004e36:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68da      	ldr	r2, [r3, #12]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	491a      	ldr	r1, [pc, #104]	@ (8004eac <HAL_I2C_Init+0x124>)
 8004e44:	400a      	ands	r2, r1
 8004e46:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	691a      	ldr	r2, [r3, #16]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	431a      	orrs	r2, r3
 8004e52:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	69d9      	ldr	r1, [r3, #28]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1a      	ldr	r2, [r3, #32]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2101      	movs	r1, #1
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2241      	movs	r2, #65	@ 0x41
 8004e8c:	2120      	movs	r1, #32
 8004e8e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2242      	movs	r2, #66	@ 0x42
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	0018      	movs	r0, r3
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	b002      	add	sp, #8
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	f0ffffff 	.word	0xf0ffffff
 8004eac:	ffff7fff 	.word	0xffff7fff
 8004eb0:	02008000 	.word	0x02008000

08004eb4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004eb4:	b590      	push	{r4, r7, lr}
 8004eb6:	b089      	sub	sp, #36	@ 0x24
 8004eb8:	af02      	add	r7, sp, #8
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	0008      	movs	r0, r1
 8004ebe:	607a      	str	r2, [r7, #4]
 8004ec0:	0019      	movs	r1, r3
 8004ec2:	230a      	movs	r3, #10
 8004ec4:	18fb      	adds	r3, r7, r3
 8004ec6:	1c02      	adds	r2, r0, #0
 8004ec8:	801a      	strh	r2, [r3, #0]
 8004eca:	2308      	movs	r3, #8
 8004ecc:	18fb      	adds	r3, r7, r3
 8004ece:	1c0a      	adds	r2, r1, #0
 8004ed0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2241      	movs	r2, #65	@ 0x41
 8004ed6:	5c9b      	ldrb	r3, [r3, r2]
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b20      	cmp	r3, #32
 8004edc:	d000      	beq.n	8004ee0 <HAL_I2C_Master_Transmit+0x2c>
 8004ede:	e0e7      	b.n	80050b0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2240      	movs	r2, #64	@ 0x40
 8004ee4:	5c9b      	ldrb	r3, [r3, r2]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d101      	bne.n	8004eee <HAL_I2C_Master_Transmit+0x3a>
 8004eea:	2302      	movs	r3, #2
 8004eec:	e0e1      	b.n	80050b2 <HAL_I2C_Master_Transmit+0x1fe>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2240      	movs	r2, #64	@ 0x40
 8004ef2:	2101      	movs	r1, #1
 8004ef4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ef6:	f7ff fca9 	bl	800484c <HAL_GetTick>
 8004efa:	0003      	movs	r3, r0
 8004efc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004efe:	2380      	movs	r3, #128	@ 0x80
 8004f00:	0219      	lsls	r1, r3, #8
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	9300      	str	r3, [sp, #0]
 8004f08:	2319      	movs	r3, #25
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f000 fa04 	bl	8005318 <I2C_WaitOnFlagUntilTimeout>
 8004f10:	1e03      	subs	r3, r0, #0
 8004f12:	d001      	beq.n	8004f18 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e0cc      	b.n	80050b2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2241      	movs	r2, #65	@ 0x41
 8004f1c:	2121      	movs	r1, #33	@ 0x21
 8004f1e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2242      	movs	r2, #66	@ 0x42
 8004f24:	2110      	movs	r1, #16
 8004f26:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2208      	movs	r2, #8
 8004f38:	18ba      	adds	r2, r7, r2
 8004f3a:	8812      	ldrh	r2, [r2, #0]
 8004f3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	2bff      	cmp	r3, #255	@ 0xff
 8004f4c:	d911      	bls.n	8004f72 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	22ff      	movs	r2, #255	@ 0xff
 8004f52:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f58:	b2da      	uxtb	r2, r3
 8004f5a:	2380      	movs	r3, #128	@ 0x80
 8004f5c:	045c      	lsls	r4, r3, #17
 8004f5e:	230a      	movs	r3, #10
 8004f60:	18fb      	adds	r3, r7, r3
 8004f62:	8819      	ldrh	r1, [r3, #0]
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	4b55      	ldr	r3, [pc, #340]	@ (80050bc <HAL_I2C_Master_Transmit+0x208>)
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	0023      	movs	r3, r4
 8004f6c:	f000 fc26 	bl	80057bc <I2C_TransferConfig>
 8004f70:	e075      	b.n	800505e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f80:	b2da      	uxtb	r2, r3
 8004f82:	2380      	movs	r3, #128	@ 0x80
 8004f84:	049c      	lsls	r4, r3, #18
 8004f86:	230a      	movs	r3, #10
 8004f88:	18fb      	adds	r3, r7, r3
 8004f8a:	8819      	ldrh	r1, [r3, #0]
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	4b4b      	ldr	r3, [pc, #300]	@ (80050bc <HAL_I2C_Master_Transmit+0x208>)
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	0023      	movs	r3, r4
 8004f94:	f000 fc12 	bl	80057bc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004f98:	e061      	b.n	800505e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	0018      	movs	r0, r3
 8004fa2:	f000 fa07 	bl	80053b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004fa6:	1e03      	subs	r3, r0, #0
 8004fa8:	d001      	beq.n	8004fae <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e081      	b.n	80050b2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb2:	781a      	ldrb	r2, [r3, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fbe:	1c5a      	adds	r2, r3, #1
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d03a      	beq.n	800505e <HAL_I2C_Master_Transmit+0x1aa>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d136      	bne.n	800505e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ff0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	0013      	movs	r3, r2
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	2180      	movs	r1, #128	@ 0x80
 8004ffe:	f000 f98b 	bl	8005318 <I2C_WaitOnFlagUntilTimeout>
 8005002:	1e03      	subs	r3, r0, #0
 8005004:	d001      	beq.n	800500a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e053      	b.n	80050b2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800500e:	b29b      	uxth	r3, r3
 8005010:	2bff      	cmp	r3, #255	@ 0xff
 8005012:	d911      	bls.n	8005038 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	22ff      	movs	r2, #255	@ 0xff
 8005018:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800501e:	b2da      	uxtb	r2, r3
 8005020:	2380      	movs	r3, #128	@ 0x80
 8005022:	045c      	lsls	r4, r3, #17
 8005024:	230a      	movs	r3, #10
 8005026:	18fb      	adds	r3, r7, r3
 8005028:	8819      	ldrh	r1, [r3, #0]
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	2300      	movs	r3, #0
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	0023      	movs	r3, r4
 8005032:	f000 fbc3 	bl	80057bc <I2C_TransferConfig>
 8005036:	e012      	b.n	800505e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800503c:	b29a      	uxth	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005046:	b2da      	uxtb	r2, r3
 8005048:	2380      	movs	r3, #128	@ 0x80
 800504a:	049c      	lsls	r4, r3, #18
 800504c:	230a      	movs	r3, #10
 800504e:	18fb      	adds	r3, r7, r3
 8005050:	8819      	ldrh	r1, [r3, #0]
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	2300      	movs	r3, #0
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	0023      	movs	r3, r4
 800505a:	f000 fbaf 	bl	80057bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005062:	b29b      	uxth	r3, r3
 8005064:	2b00      	cmp	r3, #0
 8005066:	d198      	bne.n	8004f9a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	0018      	movs	r0, r3
 8005070:	f000 f9e6 	bl	8005440 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005074:	1e03      	subs	r3, r0, #0
 8005076:	d001      	beq.n	800507c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e01a      	b.n	80050b2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2220      	movs	r2, #32
 8005082:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	490c      	ldr	r1, [pc, #48]	@ (80050c0 <HAL_I2C_Master_Transmit+0x20c>)
 8005090:	400a      	ands	r2, r1
 8005092:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2241      	movs	r2, #65	@ 0x41
 8005098:	2120      	movs	r1, #32
 800509a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2242      	movs	r2, #66	@ 0x42
 80050a0:	2100      	movs	r1, #0
 80050a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2240      	movs	r2, #64	@ 0x40
 80050a8:	2100      	movs	r1, #0
 80050aa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80050ac:	2300      	movs	r3, #0
 80050ae:	e000      	b.n	80050b2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80050b0:	2302      	movs	r3, #2
  }
}
 80050b2:	0018      	movs	r0, r3
 80050b4:	46bd      	mov	sp, r7
 80050b6:	b007      	add	sp, #28
 80050b8:	bd90      	pop	{r4, r7, pc}
 80050ba:	46c0      	nop			@ (mov r8, r8)
 80050bc:	80002000 	.word	0x80002000
 80050c0:	fe00e800 	.word	0xfe00e800

080050c4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80050c4:	b590      	push	{r4, r7, lr}
 80050c6:	b089      	sub	sp, #36	@ 0x24
 80050c8:	af02      	add	r7, sp, #8
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	0008      	movs	r0, r1
 80050ce:	607a      	str	r2, [r7, #4]
 80050d0:	0019      	movs	r1, r3
 80050d2:	230a      	movs	r3, #10
 80050d4:	18fb      	adds	r3, r7, r3
 80050d6:	1c02      	adds	r2, r0, #0
 80050d8:	801a      	strh	r2, [r3, #0]
 80050da:	2308      	movs	r3, #8
 80050dc:	18fb      	adds	r3, r7, r3
 80050de:	1c0a      	adds	r2, r1, #0
 80050e0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2241      	movs	r2, #65	@ 0x41
 80050e6:	5c9b      	ldrb	r3, [r3, r2]
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b20      	cmp	r3, #32
 80050ec:	d000      	beq.n	80050f0 <HAL_I2C_Master_Receive+0x2c>
 80050ee:	e0e8      	b.n	80052c2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2240      	movs	r2, #64	@ 0x40
 80050f4:	5c9b      	ldrb	r3, [r3, r2]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d101      	bne.n	80050fe <HAL_I2C_Master_Receive+0x3a>
 80050fa:	2302      	movs	r3, #2
 80050fc:	e0e2      	b.n	80052c4 <HAL_I2C_Master_Receive+0x200>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2240      	movs	r2, #64	@ 0x40
 8005102:	2101      	movs	r1, #1
 8005104:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005106:	f7ff fba1 	bl	800484c <HAL_GetTick>
 800510a:	0003      	movs	r3, r0
 800510c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800510e:	2380      	movs	r3, #128	@ 0x80
 8005110:	0219      	lsls	r1, r3, #8
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	2319      	movs	r3, #25
 800511a:	2201      	movs	r2, #1
 800511c:	f000 f8fc 	bl	8005318 <I2C_WaitOnFlagUntilTimeout>
 8005120:	1e03      	subs	r3, r0, #0
 8005122:	d001      	beq.n	8005128 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e0cd      	b.n	80052c4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2241      	movs	r2, #65	@ 0x41
 800512c:	2122      	movs	r1, #34	@ 0x22
 800512e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2242      	movs	r2, #66	@ 0x42
 8005134:	2110      	movs	r1, #16
 8005136:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2208      	movs	r2, #8
 8005148:	18ba      	adds	r2, r7, r2
 800514a:	8812      	ldrh	r2, [r2, #0]
 800514c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005158:	b29b      	uxth	r3, r3
 800515a:	2bff      	cmp	r3, #255	@ 0xff
 800515c:	d911      	bls.n	8005182 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	22ff      	movs	r2, #255	@ 0xff
 8005162:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005168:	b2da      	uxtb	r2, r3
 800516a:	2380      	movs	r3, #128	@ 0x80
 800516c:	045c      	lsls	r4, r3, #17
 800516e:	230a      	movs	r3, #10
 8005170:	18fb      	adds	r3, r7, r3
 8005172:	8819      	ldrh	r1, [r3, #0]
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	4b55      	ldr	r3, [pc, #340]	@ (80052cc <HAL_I2C_Master_Receive+0x208>)
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	0023      	movs	r3, r4
 800517c:	f000 fb1e 	bl	80057bc <I2C_TransferConfig>
 8005180:	e076      	b.n	8005270 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005186:	b29a      	uxth	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005190:	b2da      	uxtb	r2, r3
 8005192:	2380      	movs	r3, #128	@ 0x80
 8005194:	049c      	lsls	r4, r3, #18
 8005196:	230a      	movs	r3, #10
 8005198:	18fb      	adds	r3, r7, r3
 800519a:	8819      	ldrh	r1, [r3, #0]
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	4b4b      	ldr	r3, [pc, #300]	@ (80052cc <HAL_I2C_Master_Receive+0x208>)
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	0023      	movs	r3, r4
 80051a4:	f000 fb0a 	bl	80057bc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80051a8:	e062      	b.n	8005270 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	0018      	movs	r0, r3
 80051b2:	f000 f989 	bl	80054c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051b6:	1e03      	subs	r3, r0, #0
 80051b8:	d001      	beq.n	80051be <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e082      	b.n	80052c4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c8:	b2d2      	uxtb	r2, r2
 80051ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d0:	1c5a      	adds	r2, r3, #1
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051da:	3b01      	subs	r3, #1
 80051dc:	b29a      	uxth	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	3b01      	subs	r3, #1
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d03a      	beq.n	8005270 <HAL_I2C_Master_Receive+0x1ac>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d136      	bne.n	8005270 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005202:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	0013      	movs	r3, r2
 800520c:	2200      	movs	r2, #0
 800520e:	2180      	movs	r1, #128	@ 0x80
 8005210:	f000 f882 	bl	8005318 <I2C_WaitOnFlagUntilTimeout>
 8005214:	1e03      	subs	r3, r0, #0
 8005216:	d001      	beq.n	800521c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e053      	b.n	80052c4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005220:	b29b      	uxth	r3, r3
 8005222:	2bff      	cmp	r3, #255	@ 0xff
 8005224:	d911      	bls.n	800524a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	22ff      	movs	r2, #255	@ 0xff
 800522a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005230:	b2da      	uxtb	r2, r3
 8005232:	2380      	movs	r3, #128	@ 0x80
 8005234:	045c      	lsls	r4, r3, #17
 8005236:	230a      	movs	r3, #10
 8005238:	18fb      	adds	r3, r7, r3
 800523a:	8819      	ldrh	r1, [r3, #0]
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	2300      	movs	r3, #0
 8005240:	9300      	str	r3, [sp, #0]
 8005242:	0023      	movs	r3, r4
 8005244:	f000 faba 	bl	80057bc <I2C_TransferConfig>
 8005248:	e012      	b.n	8005270 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800524e:	b29a      	uxth	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005258:	b2da      	uxtb	r2, r3
 800525a:	2380      	movs	r3, #128	@ 0x80
 800525c:	049c      	lsls	r4, r3, #18
 800525e:	230a      	movs	r3, #10
 8005260:	18fb      	adds	r3, r7, r3
 8005262:	8819      	ldrh	r1, [r3, #0]
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	2300      	movs	r3, #0
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	0023      	movs	r3, r4
 800526c:	f000 faa6 	bl	80057bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005274:	b29b      	uxth	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d197      	bne.n	80051aa <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	0018      	movs	r0, r3
 8005282:	f000 f8dd 	bl	8005440 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005286:	1e03      	subs	r3, r0, #0
 8005288:	d001      	beq.n	800528e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e01a      	b.n	80052c4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2220      	movs	r2, #32
 8005294:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	490b      	ldr	r1, [pc, #44]	@ (80052d0 <HAL_I2C_Master_Receive+0x20c>)
 80052a2:	400a      	ands	r2, r1
 80052a4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2241      	movs	r2, #65	@ 0x41
 80052aa:	2120      	movs	r1, #32
 80052ac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2242      	movs	r2, #66	@ 0x42
 80052b2:	2100      	movs	r1, #0
 80052b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2240      	movs	r2, #64	@ 0x40
 80052ba:	2100      	movs	r1, #0
 80052bc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80052be:	2300      	movs	r3, #0
 80052c0:	e000      	b.n	80052c4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80052c2:	2302      	movs	r3, #2
  }
}
 80052c4:	0018      	movs	r0, r3
 80052c6:	46bd      	mov	sp, r7
 80052c8:	b007      	add	sp, #28
 80052ca:	bd90      	pop	{r4, r7, pc}
 80052cc:	80002400 	.word	0x80002400
 80052d0:	fe00e800 	.word	0xfe00e800

080052d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	2202      	movs	r2, #2
 80052e4:	4013      	ands	r3, r2
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d103      	bne.n	80052f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2200      	movs	r2, #0
 80052f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	2201      	movs	r2, #1
 80052fa:	4013      	ands	r3, r2
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d007      	beq.n	8005310 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	699a      	ldr	r2, [r3, #24]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2101      	movs	r1, #1
 800530c:	430a      	orrs	r2, r1
 800530e:	619a      	str	r2, [r3, #24]
  }
}
 8005310:	46c0      	nop			@ (mov r8, r8)
 8005312:	46bd      	mov	sp, r7
 8005314:	b002      	add	sp, #8
 8005316:	bd80      	pop	{r7, pc}

08005318 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	603b      	str	r3, [r7, #0]
 8005324:	1dfb      	adds	r3, r7, #7
 8005326:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005328:	e030      	b.n	800538c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	3301      	adds	r3, #1
 800532e:	d02d      	beq.n	800538c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005330:	f7ff fa8c 	bl	800484c <HAL_GetTick>
 8005334:	0002      	movs	r2, r0
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	429a      	cmp	r2, r3
 800533e:	d302      	bcc.n	8005346 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d122      	bne.n	800538c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	4013      	ands	r3, r2
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	425a      	negs	r2, r3
 8005356:	4153      	adcs	r3, r2
 8005358:	b2db      	uxtb	r3, r3
 800535a:	001a      	movs	r2, r3
 800535c:	1dfb      	adds	r3, r7, #7
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	429a      	cmp	r2, r3
 8005362:	d113      	bne.n	800538c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005368:	2220      	movs	r2, #32
 800536a:	431a      	orrs	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2241      	movs	r2, #65	@ 0x41
 8005374:	2120      	movs	r1, #32
 8005376:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2242      	movs	r2, #66	@ 0x42
 800537c:	2100      	movs	r1, #0
 800537e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2240      	movs	r2, #64	@ 0x40
 8005384:	2100      	movs	r1, #0
 8005386:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e00f      	b.n	80053ac <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	4013      	ands	r3, r2
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	425a      	negs	r2, r3
 800539c:	4153      	adcs	r3, r2
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	001a      	movs	r2, r3
 80053a2:	1dfb      	adds	r3, r7, #7
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d0bf      	beq.n	800532a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	0018      	movs	r0, r3
 80053ae:	46bd      	mov	sp, r7
 80053b0:	b004      	add	sp, #16
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053c0:	e032      	b.n	8005428 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	68b9      	ldr	r1, [r7, #8]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	0018      	movs	r0, r3
 80053ca:	f000 f8ff 	bl	80055cc <I2C_IsErrorOccurred>
 80053ce:	1e03      	subs	r3, r0, #0
 80053d0:	d001      	beq.n	80053d6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e030      	b.n	8005438 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	3301      	adds	r3, #1
 80053da:	d025      	beq.n	8005428 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053dc:	f7ff fa36 	bl	800484c <HAL_GetTick>
 80053e0:	0002      	movs	r2, r0
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d302      	bcc.n	80053f2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d11a      	bne.n	8005428 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	2202      	movs	r2, #2
 80053fa:	4013      	ands	r3, r2
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d013      	beq.n	8005428 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005404:	2220      	movs	r2, #32
 8005406:	431a      	orrs	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2241      	movs	r2, #65	@ 0x41
 8005410:	2120      	movs	r1, #32
 8005412:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2242      	movs	r2, #66	@ 0x42
 8005418:	2100      	movs	r1, #0
 800541a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2240      	movs	r2, #64	@ 0x40
 8005420:	2100      	movs	r1, #0
 8005422:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e007      	b.n	8005438 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	2202      	movs	r2, #2
 8005430:	4013      	ands	r3, r2
 8005432:	2b02      	cmp	r3, #2
 8005434:	d1c5      	bne.n	80053c2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	0018      	movs	r0, r3
 800543a:	46bd      	mov	sp, r7
 800543c:	b004      	add	sp, #16
 800543e:	bd80      	pop	{r7, pc}

08005440 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800544c:	e02f      	b.n	80054ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	68b9      	ldr	r1, [r7, #8]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	0018      	movs	r0, r3
 8005456:	f000 f8b9 	bl	80055cc <I2C_IsErrorOccurred>
 800545a:	1e03      	subs	r3, r0, #0
 800545c:	d001      	beq.n	8005462 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e02d      	b.n	80054be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005462:	f7ff f9f3 	bl	800484c <HAL_GetTick>
 8005466:	0002      	movs	r2, r0
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	429a      	cmp	r2, r3
 8005470:	d302      	bcc.n	8005478 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d11a      	bne.n	80054ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	2220      	movs	r2, #32
 8005480:	4013      	ands	r3, r2
 8005482:	2b20      	cmp	r3, #32
 8005484:	d013      	beq.n	80054ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800548a:	2220      	movs	r2, #32
 800548c:	431a      	orrs	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2241      	movs	r2, #65	@ 0x41
 8005496:	2120      	movs	r1, #32
 8005498:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2242      	movs	r2, #66	@ 0x42
 800549e:	2100      	movs	r1, #0
 80054a0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2240      	movs	r2, #64	@ 0x40
 80054a6:	2100      	movs	r1, #0
 80054a8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e007      	b.n	80054be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	2220      	movs	r2, #32
 80054b6:	4013      	ands	r3, r2
 80054b8:	2b20      	cmp	r3, #32
 80054ba:	d1c8      	bne.n	800544e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	0018      	movs	r0, r3
 80054c0:	46bd      	mov	sp, r7
 80054c2:	b004      	add	sp, #16
 80054c4:	bd80      	pop	{r7, pc}
	...

080054c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054d4:	e06b      	b.n	80055ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	68b9      	ldr	r1, [r7, #8]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	0018      	movs	r0, r3
 80054de:	f000 f875 	bl	80055cc <I2C_IsErrorOccurred>
 80054e2:	1e03      	subs	r3, r0, #0
 80054e4:	d001      	beq.n	80054ea <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e069      	b.n	80055be <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	2220      	movs	r2, #32
 80054f2:	4013      	ands	r3, r2
 80054f4:	2b20      	cmp	r3, #32
 80054f6:	d138      	bne.n	800556a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	2204      	movs	r2, #4
 8005500:	4013      	ands	r3, r2
 8005502:	2b04      	cmp	r3, #4
 8005504:	d105      	bne.n	8005512 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800550e:	2300      	movs	r3, #0
 8005510:	e055      	b.n	80055be <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	2210      	movs	r2, #16
 800551a:	4013      	ands	r3, r2
 800551c:	2b10      	cmp	r3, #16
 800551e:	d107      	bne.n	8005530 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2210      	movs	r2, #16
 8005526:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2204      	movs	r2, #4
 800552c:	645a      	str	r2, [r3, #68]	@ 0x44
 800552e:	e002      	b.n	8005536 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2220      	movs	r2, #32
 800553c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	491f      	ldr	r1, [pc, #124]	@ (80055c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800554a:	400a      	ands	r2, r1
 800554c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2241      	movs	r2, #65	@ 0x41
 8005552:	2120      	movs	r1, #32
 8005554:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2242      	movs	r2, #66	@ 0x42
 800555a:	2100      	movs	r1, #0
 800555c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2240      	movs	r2, #64	@ 0x40
 8005562:	2100      	movs	r1, #0
 8005564:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e029      	b.n	80055be <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800556a:	f7ff f96f 	bl	800484c <HAL_GetTick>
 800556e:	0002      	movs	r2, r0
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	429a      	cmp	r2, r3
 8005578:	d302      	bcc.n	8005580 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d116      	bne.n	80055ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	2204      	movs	r2, #4
 8005588:	4013      	ands	r3, r2
 800558a:	2b04      	cmp	r3, #4
 800558c:	d00f      	beq.n	80055ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005592:	2220      	movs	r2, #32
 8005594:	431a      	orrs	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2241      	movs	r2, #65	@ 0x41
 800559e:	2120      	movs	r1, #32
 80055a0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2240      	movs	r2, #64	@ 0x40
 80055a6:	2100      	movs	r1, #0
 80055a8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e007      	b.n	80055be <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	2204      	movs	r2, #4
 80055b6:	4013      	ands	r3, r2
 80055b8:	2b04      	cmp	r3, #4
 80055ba:	d18c      	bne.n	80054d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	0018      	movs	r0, r3
 80055c0:	46bd      	mov	sp, r7
 80055c2:	b004      	add	sp, #16
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	46c0      	nop			@ (mov r8, r8)
 80055c8:	fe00e800 	.word	0xfe00e800

080055cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b08a      	sub	sp, #40	@ 0x28
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055d8:	2327      	movs	r3, #39	@ 0x27
 80055da:	18fb      	adds	r3, r7, r3
 80055dc:	2200      	movs	r2, #0
 80055de:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80055e8:	2300      	movs	r3, #0
 80055ea:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	2210      	movs	r2, #16
 80055f4:	4013      	ands	r3, r2
 80055f6:	d100      	bne.n	80055fa <I2C_IsErrorOccurred+0x2e>
 80055f8:	e079      	b.n	80056ee <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2210      	movs	r2, #16
 8005600:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005602:	e057      	b.n	80056b4 <I2C_IsErrorOccurred+0xe8>
 8005604:	2227      	movs	r2, #39	@ 0x27
 8005606:	18bb      	adds	r3, r7, r2
 8005608:	18ba      	adds	r2, r7, r2
 800560a:	7812      	ldrb	r2, [r2, #0]
 800560c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	3301      	adds	r3, #1
 8005612:	d04f      	beq.n	80056b4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005614:	f7ff f91a 	bl	800484c <HAL_GetTick>
 8005618:	0002      	movs	r2, r0
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	429a      	cmp	r2, r3
 8005622:	d302      	bcc.n	800562a <I2C_IsErrorOccurred+0x5e>
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d144      	bne.n	80056b4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	2380      	movs	r3, #128	@ 0x80
 8005632:	01db      	lsls	r3, r3, #7
 8005634:	4013      	ands	r3, r2
 8005636:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005638:	2013      	movs	r0, #19
 800563a:	183b      	adds	r3, r7, r0
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	2142      	movs	r1, #66	@ 0x42
 8005640:	5c52      	ldrb	r2, [r2, r1]
 8005642:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	699a      	ldr	r2, [r3, #24]
 800564a:	2380      	movs	r3, #128	@ 0x80
 800564c:	021b      	lsls	r3, r3, #8
 800564e:	401a      	ands	r2, r3
 8005650:	2380      	movs	r3, #128	@ 0x80
 8005652:	021b      	lsls	r3, r3, #8
 8005654:	429a      	cmp	r2, r3
 8005656:	d126      	bne.n	80056a6 <I2C_IsErrorOccurred+0xda>
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	2380      	movs	r3, #128	@ 0x80
 800565c:	01db      	lsls	r3, r3, #7
 800565e:	429a      	cmp	r2, r3
 8005660:	d021      	beq.n	80056a6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8005662:	183b      	adds	r3, r7, r0
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	2b20      	cmp	r3, #32
 8005668:	d01d      	beq.n	80056a6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2180      	movs	r1, #128	@ 0x80
 8005676:	01c9      	lsls	r1, r1, #7
 8005678:	430a      	orrs	r2, r1
 800567a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800567c:	f7ff f8e6 	bl	800484c <HAL_GetTick>
 8005680:	0003      	movs	r3, r0
 8005682:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005684:	e00f      	b.n	80056a6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005686:	f7ff f8e1 	bl	800484c <HAL_GetTick>
 800568a:	0002      	movs	r2, r0
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b19      	cmp	r3, #25
 8005692:	d908      	bls.n	80056a6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005694:	6a3b      	ldr	r3, [r7, #32]
 8005696:	2220      	movs	r2, #32
 8005698:	4313      	orrs	r3, r2
 800569a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800569c:	2327      	movs	r3, #39	@ 0x27
 800569e:	18fb      	adds	r3, r7, r3
 80056a0:	2201      	movs	r2, #1
 80056a2:	701a      	strb	r2, [r3, #0]

              break;
 80056a4:	e006      	b.n	80056b4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	2220      	movs	r2, #32
 80056ae:	4013      	ands	r3, r2
 80056b0:	2b20      	cmp	r3, #32
 80056b2:	d1e8      	bne.n	8005686 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	2220      	movs	r2, #32
 80056bc:	4013      	ands	r3, r2
 80056be:	2b20      	cmp	r3, #32
 80056c0:	d004      	beq.n	80056cc <I2C_IsErrorOccurred+0x100>
 80056c2:	2327      	movs	r3, #39	@ 0x27
 80056c4:	18fb      	adds	r3, r7, r3
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d09b      	beq.n	8005604 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80056cc:	2327      	movs	r3, #39	@ 0x27
 80056ce:	18fb      	adds	r3, r7, r3
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d103      	bne.n	80056de <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2220      	movs	r2, #32
 80056dc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	2204      	movs	r2, #4
 80056e2:	4313      	orrs	r3, r2
 80056e4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80056e6:	2327      	movs	r3, #39	@ 0x27
 80056e8:	18fb      	adds	r3, r7, r3
 80056ea:	2201      	movs	r2, #1
 80056ec:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	2380      	movs	r3, #128	@ 0x80
 80056fa:	005b      	lsls	r3, r3, #1
 80056fc:	4013      	ands	r3, r2
 80056fe:	d00c      	beq.n	800571a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	2201      	movs	r2, #1
 8005704:	4313      	orrs	r3, r2
 8005706:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2280      	movs	r2, #128	@ 0x80
 800570e:	0052      	lsls	r2, r2, #1
 8005710:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005712:	2327      	movs	r3, #39	@ 0x27
 8005714:	18fb      	adds	r3, r7, r3
 8005716:	2201      	movs	r2, #1
 8005718:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	2380      	movs	r3, #128	@ 0x80
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	4013      	ands	r3, r2
 8005722:	d00c      	beq.n	800573e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005724:	6a3b      	ldr	r3, [r7, #32]
 8005726:	2208      	movs	r2, #8
 8005728:	4313      	orrs	r3, r2
 800572a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2280      	movs	r2, #128	@ 0x80
 8005732:	00d2      	lsls	r2, r2, #3
 8005734:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005736:	2327      	movs	r3, #39	@ 0x27
 8005738:	18fb      	adds	r3, r7, r3
 800573a:	2201      	movs	r2, #1
 800573c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	2380      	movs	r3, #128	@ 0x80
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4013      	ands	r3, r2
 8005746:	d00c      	beq.n	8005762 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	2202      	movs	r2, #2
 800574c:	4313      	orrs	r3, r2
 800574e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2280      	movs	r2, #128	@ 0x80
 8005756:	0092      	lsls	r2, r2, #2
 8005758:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800575a:	2327      	movs	r3, #39	@ 0x27
 800575c:	18fb      	adds	r3, r7, r3
 800575e:	2201      	movs	r2, #1
 8005760:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8005762:	2327      	movs	r3, #39	@ 0x27
 8005764:	18fb      	adds	r3, r7, r3
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d01d      	beq.n	80057a8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	0018      	movs	r0, r3
 8005770:	f7ff fdb0 	bl	80052d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	490e      	ldr	r1, [pc, #56]	@ (80057b8 <I2C_IsErrorOccurred+0x1ec>)
 8005780:	400a      	ands	r2, r1
 8005782:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005788:	6a3b      	ldr	r3, [r7, #32]
 800578a:	431a      	orrs	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2241      	movs	r2, #65	@ 0x41
 8005794:	2120      	movs	r1, #32
 8005796:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2242      	movs	r2, #66	@ 0x42
 800579c:	2100      	movs	r1, #0
 800579e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2240      	movs	r2, #64	@ 0x40
 80057a4:	2100      	movs	r1, #0
 80057a6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80057a8:	2327      	movs	r3, #39	@ 0x27
 80057aa:	18fb      	adds	r3, r7, r3
 80057ac:	781b      	ldrb	r3, [r3, #0]
}
 80057ae:	0018      	movs	r0, r3
 80057b0:	46bd      	mov	sp, r7
 80057b2:	b00a      	add	sp, #40	@ 0x28
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	46c0      	nop			@ (mov r8, r8)
 80057b8:	fe00e800 	.word	0xfe00e800

080057bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80057bc:	b590      	push	{r4, r7, lr}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	0008      	movs	r0, r1
 80057c6:	0011      	movs	r1, r2
 80057c8:	607b      	str	r3, [r7, #4]
 80057ca:	240a      	movs	r4, #10
 80057cc:	193b      	adds	r3, r7, r4
 80057ce:	1c02      	adds	r2, r0, #0
 80057d0:	801a      	strh	r2, [r3, #0]
 80057d2:	2009      	movs	r0, #9
 80057d4:	183b      	adds	r3, r7, r0
 80057d6:	1c0a      	adds	r2, r1, #0
 80057d8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057da:	193b      	adds	r3, r7, r4
 80057dc:	881b      	ldrh	r3, [r3, #0]
 80057de:	059b      	lsls	r3, r3, #22
 80057e0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80057e2:	183b      	adds	r3, r7, r0
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	0419      	lsls	r1, r3, #16
 80057e8:	23ff      	movs	r3, #255	@ 0xff
 80057ea:	041b      	lsls	r3, r3, #16
 80057ec:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057ee:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f6:	4313      	orrs	r3, r2
 80057f8:	005b      	lsls	r3, r3, #1
 80057fa:	085b      	lsrs	r3, r3, #1
 80057fc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005806:	0d51      	lsrs	r1, r2, #21
 8005808:	2280      	movs	r2, #128	@ 0x80
 800580a:	00d2      	lsls	r2, r2, #3
 800580c:	400a      	ands	r2, r1
 800580e:	4907      	ldr	r1, [pc, #28]	@ (800582c <I2C_TransferConfig+0x70>)
 8005810:	430a      	orrs	r2, r1
 8005812:	43d2      	mvns	r2, r2
 8005814:	401a      	ands	r2, r3
 8005816:	0011      	movs	r1, r2
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	430a      	orrs	r2, r1
 8005820:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005822:	46c0      	nop			@ (mov r8, r8)
 8005824:	46bd      	mov	sp, r7
 8005826:	b007      	add	sp, #28
 8005828:	bd90      	pop	{r4, r7, pc}
 800582a:	46c0      	nop			@ (mov r8, r8)
 800582c:	03ff63ff 	.word	0x03ff63ff

08005830 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2241      	movs	r2, #65	@ 0x41
 800583e:	5c9b      	ldrb	r3, [r3, r2]
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b20      	cmp	r3, #32
 8005844:	d138      	bne.n	80058b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2240      	movs	r2, #64	@ 0x40
 800584a:	5c9b      	ldrb	r3, [r3, r2]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d101      	bne.n	8005854 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005850:	2302      	movs	r3, #2
 8005852:	e032      	b.n	80058ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2240      	movs	r2, #64	@ 0x40
 8005858:	2101      	movs	r1, #1
 800585a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2241      	movs	r2, #65	@ 0x41
 8005860:	2124      	movs	r1, #36	@ 0x24
 8005862:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2101      	movs	r1, #1
 8005870:	438a      	bics	r2, r1
 8005872:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4911      	ldr	r1, [pc, #68]	@ (80058c4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005880:	400a      	ands	r2, r1
 8005882:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6819      	ldr	r1, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	430a      	orrs	r2, r1
 8005892:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2101      	movs	r1, #1
 80058a0:	430a      	orrs	r2, r1
 80058a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2241      	movs	r2, #65	@ 0x41
 80058a8:	2120      	movs	r1, #32
 80058aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2240      	movs	r2, #64	@ 0x40
 80058b0:	2100      	movs	r1, #0
 80058b2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80058b4:	2300      	movs	r3, #0
 80058b6:	e000      	b.n	80058ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80058b8:	2302      	movs	r3, #2
  }
}
 80058ba:	0018      	movs	r0, r3
 80058bc:	46bd      	mov	sp, r7
 80058be:	b002      	add	sp, #8
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	46c0      	nop			@ (mov r8, r8)
 80058c4:	ffffefff 	.word	0xffffefff

080058c8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2241      	movs	r2, #65	@ 0x41
 80058d6:	5c9b      	ldrb	r3, [r3, r2]
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b20      	cmp	r3, #32
 80058dc:	d139      	bne.n	8005952 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2240      	movs	r2, #64	@ 0x40
 80058e2:	5c9b      	ldrb	r3, [r3, r2]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d101      	bne.n	80058ec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80058e8:	2302      	movs	r3, #2
 80058ea:	e033      	b.n	8005954 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2240      	movs	r2, #64	@ 0x40
 80058f0:	2101      	movs	r1, #1
 80058f2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2241      	movs	r2, #65	@ 0x41
 80058f8:	2124      	movs	r1, #36	@ 0x24
 80058fa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2101      	movs	r1, #1
 8005908:	438a      	bics	r2, r1
 800590a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4a11      	ldr	r2, [pc, #68]	@ (800595c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005918:	4013      	ands	r3, r2
 800591a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	021b      	lsls	r3, r3, #8
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	4313      	orrs	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2101      	movs	r1, #1
 800593a:	430a      	orrs	r2, r1
 800593c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2241      	movs	r2, #65	@ 0x41
 8005942:	2120      	movs	r1, #32
 8005944:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2240      	movs	r2, #64	@ 0x40
 800594a:	2100      	movs	r1, #0
 800594c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	e000      	b.n	8005954 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005952:	2302      	movs	r3, #2
  }
}
 8005954:	0018      	movs	r0, r3
 8005956:	46bd      	mov	sp, r7
 8005958:	b004      	add	sp, #16
 800595a:	bd80      	pop	{r7, pc}
 800595c:	fffff0ff 	.word	0xfffff0ff

08005960 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005960:	b5b0      	push	{r4, r5, r7, lr}
 8005962:	b08a      	sub	sp, #40	@ 0x28
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d102      	bne.n	8005974 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	f000 fbbf 	bl	80060f2 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005974:	4bc9      	ldr	r3, [pc, #804]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	220c      	movs	r2, #12
 800597a:	4013      	ands	r3, r2
 800597c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800597e:	4bc7      	ldr	r3, [pc, #796]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 8005980:	68da      	ldr	r2, [r3, #12]
 8005982:	2380      	movs	r3, #128	@ 0x80
 8005984:	025b      	lsls	r3, r3, #9
 8005986:	4013      	ands	r3, r2
 8005988:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2201      	movs	r2, #1
 8005990:	4013      	ands	r3, r2
 8005992:	d100      	bne.n	8005996 <HAL_RCC_OscConfig+0x36>
 8005994:	e07e      	b.n	8005a94 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	2b08      	cmp	r3, #8
 800599a:	d007      	beq.n	80059ac <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	2b0c      	cmp	r3, #12
 80059a0:	d112      	bne.n	80059c8 <HAL_RCC_OscConfig+0x68>
 80059a2:	69ba      	ldr	r2, [r7, #24]
 80059a4:	2380      	movs	r3, #128	@ 0x80
 80059a6:	025b      	lsls	r3, r3, #9
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d10d      	bne.n	80059c8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059ac:	4bbb      	ldr	r3, [pc, #748]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	2380      	movs	r3, #128	@ 0x80
 80059b2:	029b      	lsls	r3, r3, #10
 80059b4:	4013      	ands	r3, r2
 80059b6:	d100      	bne.n	80059ba <HAL_RCC_OscConfig+0x5a>
 80059b8:	e06b      	b.n	8005a92 <HAL_RCC_OscConfig+0x132>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d167      	bne.n	8005a92 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	f000 fb95 	bl	80060f2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	2380      	movs	r3, #128	@ 0x80
 80059ce:	025b      	lsls	r3, r3, #9
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d107      	bne.n	80059e4 <HAL_RCC_OscConfig+0x84>
 80059d4:	4bb1      	ldr	r3, [pc, #708]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	4bb0      	ldr	r3, [pc, #704]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 80059da:	2180      	movs	r1, #128	@ 0x80
 80059dc:	0249      	lsls	r1, r1, #9
 80059de:	430a      	orrs	r2, r1
 80059e0:	601a      	str	r2, [r3, #0]
 80059e2:	e027      	b.n	8005a34 <HAL_RCC_OscConfig+0xd4>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685a      	ldr	r2, [r3, #4]
 80059e8:	23a0      	movs	r3, #160	@ 0xa0
 80059ea:	02db      	lsls	r3, r3, #11
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d10e      	bne.n	8005a0e <HAL_RCC_OscConfig+0xae>
 80059f0:	4baa      	ldr	r3, [pc, #680]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	4ba9      	ldr	r3, [pc, #676]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 80059f6:	2180      	movs	r1, #128	@ 0x80
 80059f8:	02c9      	lsls	r1, r1, #11
 80059fa:	430a      	orrs	r2, r1
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	4ba7      	ldr	r3, [pc, #668]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	4ba6      	ldr	r3, [pc, #664]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 8005a04:	2180      	movs	r1, #128	@ 0x80
 8005a06:	0249      	lsls	r1, r1, #9
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	601a      	str	r2, [r3, #0]
 8005a0c:	e012      	b.n	8005a34 <HAL_RCC_OscConfig+0xd4>
 8005a0e:	4ba3      	ldr	r3, [pc, #652]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	4ba2      	ldr	r3, [pc, #648]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 8005a14:	49a2      	ldr	r1, [pc, #648]	@ (8005ca0 <HAL_RCC_OscConfig+0x340>)
 8005a16:	400a      	ands	r2, r1
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	4ba0      	ldr	r3, [pc, #640]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	2380      	movs	r3, #128	@ 0x80
 8005a20:	025b      	lsls	r3, r3, #9
 8005a22:	4013      	ands	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	4b9c      	ldr	r3, [pc, #624]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	4b9b      	ldr	r3, [pc, #620]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 8005a2e:	499d      	ldr	r1, [pc, #628]	@ (8005ca4 <HAL_RCC_OscConfig+0x344>)
 8005a30:	400a      	ands	r2, r1
 8005a32:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d015      	beq.n	8005a68 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a3c:	f7fe ff06 	bl	800484c <HAL_GetTick>
 8005a40:	0003      	movs	r3, r0
 8005a42:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a44:	e009      	b.n	8005a5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a46:	f7fe ff01 	bl	800484c <HAL_GetTick>
 8005a4a:	0002      	movs	r2, r0
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	2b64      	cmp	r3, #100	@ 0x64
 8005a52:	d902      	bls.n	8005a5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	f000 fb4c 	bl	80060f2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a5a:	4b90      	ldr	r3, [pc, #576]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	2380      	movs	r3, #128	@ 0x80
 8005a60:	029b      	lsls	r3, r3, #10
 8005a62:	4013      	ands	r3, r2
 8005a64:	d0ef      	beq.n	8005a46 <HAL_RCC_OscConfig+0xe6>
 8005a66:	e015      	b.n	8005a94 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a68:	f7fe fef0 	bl	800484c <HAL_GetTick>
 8005a6c:	0003      	movs	r3, r0
 8005a6e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a70:	e008      	b.n	8005a84 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a72:	f7fe feeb 	bl	800484c <HAL_GetTick>
 8005a76:	0002      	movs	r2, r0
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	2b64      	cmp	r3, #100	@ 0x64
 8005a7e:	d901      	bls.n	8005a84 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e336      	b.n	80060f2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a84:	4b85      	ldr	r3, [pc, #532]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	2380      	movs	r3, #128	@ 0x80
 8005a8a:	029b      	lsls	r3, r3, #10
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	d1f0      	bne.n	8005a72 <HAL_RCC_OscConfig+0x112>
 8005a90:	e000      	b.n	8005a94 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a92:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2202      	movs	r2, #2
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	d100      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x140>
 8005a9e:	e099      	b.n	8005bd4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	4013      	ands	r3, r2
 8005aac:	d009      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005aae:	4b7b      	ldr	r3, [pc, #492]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	4b7a      	ldr	r3, [pc, #488]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 8005ab4:	2120      	movs	r1, #32
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8005aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005abc:	2220      	movs	r2, #32
 8005abe:	4393      	bics	r3, r2
 8005ac0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	2b04      	cmp	r3, #4
 8005ac6:	d005      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	2b0c      	cmp	r3, #12
 8005acc:	d13e      	bne.n	8005b4c <HAL_RCC_OscConfig+0x1ec>
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d13b      	bne.n	8005b4c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005ad4:	4b71      	ldr	r3, [pc, #452]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2204      	movs	r2, #4
 8005ada:	4013      	ands	r3, r2
 8005adc:	d004      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x188>
 8005ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d101      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e304      	b.n	80060f2 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ae8:	4b6c      	ldr	r3, [pc, #432]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	4a6e      	ldr	r2, [pc, #440]	@ (8005ca8 <HAL_RCC_OscConfig+0x348>)
 8005aee:	4013      	ands	r3, r2
 8005af0:	0019      	movs	r1, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	021a      	lsls	r2, r3, #8
 8005af8:	4b68      	ldr	r3, [pc, #416]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 8005afa:	430a      	orrs	r2, r1
 8005afc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005afe:	4b67      	ldr	r3, [pc, #412]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2209      	movs	r2, #9
 8005b04:	4393      	bics	r3, r2
 8005b06:	0019      	movs	r1, r3
 8005b08:	4b64      	ldr	r3, [pc, #400]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 8005b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b10:	f000 fc42 	bl	8006398 <HAL_RCC_GetSysClockFreq>
 8005b14:	0001      	movs	r1, r0
 8005b16:	4b61      	ldr	r3, [pc, #388]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	091b      	lsrs	r3, r3, #4
 8005b1c:	220f      	movs	r2, #15
 8005b1e:	4013      	ands	r3, r2
 8005b20:	4a62      	ldr	r2, [pc, #392]	@ (8005cac <HAL_RCC_OscConfig+0x34c>)
 8005b22:	5cd3      	ldrb	r3, [r2, r3]
 8005b24:	000a      	movs	r2, r1
 8005b26:	40da      	lsrs	r2, r3
 8005b28:	4b61      	ldr	r3, [pc, #388]	@ (8005cb0 <HAL_RCC_OscConfig+0x350>)
 8005b2a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005b2c:	4b61      	ldr	r3, [pc, #388]	@ (8005cb4 <HAL_RCC_OscConfig+0x354>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2513      	movs	r5, #19
 8005b32:	197c      	adds	r4, r7, r5
 8005b34:	0018      	movs	r0, r3
 8005b36:	f7fe fcd9 	bl	80044ec <HAL_InitTick>
 8005b3a:	0003      	movs	r3, r0
 8005b3c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005b3e:	197b      	adds	r3, r7, r5
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d046      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8005b46:	197b      	adds	r3, r7, r5
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	e2d2      	b.n	80060f2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d027      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005b52:	4b52      	ldr	r3, [pc, #328]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2209      	movs	r2, #9
 8005b58:	4393      	bics	r3, r2
 8005b5a:	0019      	movs	r1, r3
 8005b5c:	4b4f      	ldr	r3, [pc, #316]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 8005b5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b60:	430a      	orrs	r2, r1
 8005b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b64:	f7fe fe72 	bl	800484c <HAL_GetTick>
 8005b68:	0003      	movs	r3, r0
 8005b6a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b6c:	e008      	b.n	8005b80 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b6e:	f7fe fe6d 	bl	800484c <HAL_GetTick>
 8005b72:	0002      	movs	r2, r0
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d901      	bls.n	8005b80 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e2b8      	b.n	80060f2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b80:	4b46      	ldr	r3, [pc, #280]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2204      	movs	r2, #4
 8005b86:	4013      	ands	r3, r2
 8005b88:	d0f1      	beq.n	8005b6e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b8a:	4b44      	ldr	r3, [pc, #272]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	4a46      	ldr	r2, [pc, #280]	@ (8005ca8 <HAL_RCC_OscConfig+0x348>)
 8005b90:	4013      	ands	r3, r2
 8005b92:	0019      	movs	r1, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	021a      	lsls	r2, r3, #8
 8005b9a:	4b40      	ldr	r3, [pc, #256]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	605a      	str	r2, [r3, #4]
 8005ba0:	e018      	b.n	8005bd4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ba2:	4b3e      	ldr	r3, [pc, #248]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	4b3d      	ldr	r3, [pc, #244]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 8005ba8:	2101      	movs	r1, #1
 8005baa:	438a      	bics	r2, r1
 8005bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bae:	f7fe fe4d 	bl	800484c <HAL_GetTick>
 8005bb2:	0003      	movs	r3, r0
 8005bb4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005bb6:	e008      	b.n	8005bca <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bb8:	f7fe fe48 	bl	800484c <HAL_GetTick>
 8005bbc:	0002      	movs	r2, r0
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d901      	bls.n	8005bca <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e293      	b.n	80060f2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005bca:	4b34      	ldr	r3, [pc, #208]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2204      	movs	r2, #4
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	d1f1      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2210      	movs	r2, #16
 8005bda:	4013      	ands	r3, r2
 8005bdc:	d100      	bne.n	8005be0 <HAL_RCC_OscConfig+0x280>
 8005bde:	e0a2      	b.n	8005d26 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d140      	bne.n	8005c68 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005be6:	4b2d      	ldr	r3, [pc, #180]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	2380      	movs	r3, #128	@ 0x80
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4013      	ands	r3, r2
 8005bf0:	d005      	beq.n	8005bfe <HAL_RCC_OscConfig+0x29e>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e279      	b.n	80060f2 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005bfe:	4b27      	ldr	r3, [pc, #156]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	4a2d      	ldr	r2, [pc, #180]	@ (8005cb8 <HAL_RCC_OscConfig+0x358>)
 8005c04:	4013      	ands	r3, r2
 8005c06:	0019      	movs	r1, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c0c:	4b23      	ldr	r3, [pc, #140]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c12:	4b22      	ldr	r3, [pc, #136]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	021b      	lsls	r3, r3, #8
 8005c18:	0a19      	lsrs	r1, r3, #8
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	061a      	lsls	r2, r3, #24
 8005c20:	4b1e      	ldr	r3, [pc, #120]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 8005c22:	430a      	orrs	r2, r1
 8005c24:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c2a:	0b5b      	lsrs	r3, r3, #13
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	2280      	movs	r2, #128	@ 0x80
 8005c30:	0212      	lsls	r2, r2, #8
 8005c32:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005c34:	4b19      	ldr	r3, [pc, #100]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	091b      	lsrs	r3, r3, #4
 8005c3a:	210f      	movs	r1, #15
 8005c3c:	400b      	ands	r3, r1
 8005c3e:	491b      	ldr	r1, [pc, #108]	@ (8005cac <HAL_RCC_OscConfig+0x34c>)
 8005c40:	5ccb      	ldrb	r3, [r1, r3]
 8005c42:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005c44:	4b1a      	ldr	r3, [pc, #104]	@ (8005cb0 <HAL_RCC_OscConfig+0x350>)
 8005c46:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005c48:	4b1a      	ldr	r3, [pc, #104]	@ (8005cb4 <HAL_RCC_OscConfig+0x354>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2513      	movs	r5, #19
 8005c4e:	197c      	adds	r4, r7, r5
 8005c50:	0018      	movs	r0, r3
 8005c52:	f7fe fc4b 	bl	80044ec <HAL_InitTick>
 8005c56:	0003      	movs	r3, r0
 8005c58:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005c5a:	197b      	adds	r3, r7, r5
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d061      	beq.n	8005d26 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8005c62:	197b      	adds	r3, r7, r5
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	e244      	b.n	80060f2 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	69db      	ldr	r3, [r3, #28]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d040      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005c70:	4b0a      	ldr	r3, [pc, #40]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	4b09      	ldr	r3, [pc, #36]	@ (8005c9c <HAL_RCC_OscConfig+0x33c>)
 8005c76:	2180      	movs	r1, #128	@ 0x80
 8005c78:	0049      	lsls	r1, r1, #1
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c7e:	f7fe fde5 	bl	800484c <HAL_GetTick>
 8005c82:	0003      	movs	r3, r0
 8005c84:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005c86:	e019      	b.n	8005cbc <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c88:	f7fe fde0 	bl	800484c <HAL_GetTick>
 8005c8c:	0002      	movs	r2, r0
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d912      	bls.n	8005cbc <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e22b      	b.n	80060f2 <HAL_RCC_OscConfig+0x792>
 8005c9a:	46c0      	nop			@ (mov r8, r8)
 8005c9c:	40021000 	.word	0x40021000
 8005ca0:	fffeffff 	.word	0xfffeffff
 8005ca4:	fffbffff 	.word	0xfffbffff
 8005ca8:	ffffe0ff 	.word	0xffffe0ff
 8005cac:	0800dbb0 	.word	0x0800dbb0
 8005cb0:	20000000 	.word	0x20000000
 8005cb4:	20000004 	.word	0x20000004
 8005cb8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005cbc:	4bca      	ldr	r3, [pc, #808]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	2380      	movs	r3, #128	@ 0x80
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	d0df      	beq.n	8005c88 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005cc8:	4bc7      	ldr	r3, [pc, #796]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	4ac7      	ldr	r2, [pc, #796]	@ (8005fec <HAL_RCC_OscConfig+0x68c>)
 8005cce:	4013      	ands	r3, r2
 8005cd0:	0019      	movs	r1, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005cd6:	4bc4      	ldr	r3, [pc, #784]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005cdc:	4bc2      	ldr	r3, [pc, #776]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	021b      	lsls	r3, r3, #8
 8005ce2:	0a19      	lsrs	r1, r3, #8
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
 8005ce8:	061a      	lsls	r2, r3, #24
 8005cea:	4bbf      	ldr	r3, [pc, #764]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005cec:	430a      	orrs	r2, r1
 8005cee:	605a      	str	r2, [r3, #4]
 8005cf0:	e019      	b.n	8005d26 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005cf2:	4bbd      	ldr	r3, [pc, #756]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	4bbc      	ldr	r3, [pc, #752]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005cf8:	49bd      	ldr	r1, [pc, #756]	@ (8005ff0 <HAL_RCC_OscConfig+0x690>)
 8005cfa:	400a      	ands	r2, r1
 8005cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cfe:	f7fe fda5 	bl	800484c <HAL_GetTick>
 8005d02:	0003      	movs	r3, r0
 8005d04:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005d06:	e008      	b.n	8005d1a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d08:	f7fe fda0 	bl	800484c <HAL_GetTick>
 8005d0c:	0002      	movs	r2, r0
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d901      	bls.n	8005d1a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e1eb      	b.n	80060f2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005d1a:	4bb3      	ldr	r3, [pc, #716]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	2380      	movs	r3, #128	@ 0x80
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4013      	ands	r3, r2
 8005d24:	d1f0      	bne.n	8005d08 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2208      	movs	r2, #8
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	d036      	beq.n	8005d9e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	695b      	ldr	r3, [r3, #20]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d019      	beq.n	8005d6c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d38:	4bab      	ldr	r3, [pc, #684]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005d3a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d3c:	4baa      	ldr	r3, [pc, #680]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005d3e:	2101      	movs	r1, #1
 8005d40:	430a      	orrs	r2, r1
 8005d42:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d44:	f7fe fd82 	bl	800484c <HAL_GetTick>
 8005d48:	0003      	movs	r3, r0
 8005d4a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005d4c:	e008      	b.n	8005d60 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d4e:	f7fe fd7d 	bl	800484c <HAL_GetTick>
 8005d52:	0002      	movs	r2, r0
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d901      	bls.n	8005d60 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e1c8      	b.n	80060f2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005d60:	4ba1      	ldr	r3, [pc, #644]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d64:	2202      	movs	r2, #2
 8005d66:	4013      	ands	r3, r2
 8005d68:	d0f1      	beq.n	8005d4e <HAL_RCC_OscConfig+0x3ee>
 8005d6a:	e018      	b.n	8005d9e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d6c:	4b9e      	ldr	r3, [pc, #632]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005d6e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d70:	4b9d      	ldr	r3, [pc, #628]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005d72:	2101      	movs	r1, #1
 8005d74:	438a      	bics	r2, r1
 8005d76:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d78:	f7fe fd68 	bl	800484c <HAL_GetTick>
 8005d7c:	0003      	movs	r3, r0
 8005d7e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005d80:	e008      	b.n	8005d94 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d82:	f7fe fd63 	bl	800484c <HAL_GetTick>
 8005d86:	0002      	movs	r2, r0
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d901      	bls.n	8005d94 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e1ae      	b.n	80060f2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005d94:	4b94      	ldr	r3, [pc, #592]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005d96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d98:	2202      	movs	r2, #2
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	d1f1      	bne.n	8005d82 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2204      	movs	r2, #4
 8005da4:	4013      	ands	r3, r2
 8005da6:	d100      	bne.n	8005daa <HAL_RCC_OscConfig+0x44a>
 8005da8:	e0ae      	b.n	8005f08 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005daa:	2023      	movs	r0, #35	@ 0x23
 8005dac:	183b      	adds	r3, r7, r0
 8005dae:	2200      	movs	r2, #0
 8005db0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005db2:	4b8d      	ldr	r3, [pc, #564]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005db4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005db6:	2380      	movs	r3, #128	@ 0x80
 8005db8:	055b      	lsls	r3, r3, #21
 8005dba:	4013      	ands	r3, r2
 8005dbc:	d109      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dbe:	4b8a      	ldr	r3, [pc, #552]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005dc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005dc2:	4b89      	ldr	r3, [pc, #548]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005dc4:	2180      	movs	r1, #128	@ 0x80
 8005dc6:	0549      	lsls	r1, r1, #21
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8005dcc:	183b      	adds	r3, r7, r0
 8005dce:	2201      	movs	r2, #1
 8005dd0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dd2:	4b88      	ldr	r3, [pc, #544]	@ (8005ff4 <HAL_RCC_OscConfig+0x694>)
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	2380      	movs	r3, #128	@ 0x80
 8005dd8:	005b      	lsls	r3, r3, #1
 8005dda:	4013      	ands	r3, r2
 8005ddc:	d11a      	bne.n	8005e14 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dde:	4b85      	ldr	r3, [pc, #532]	@ (8005ff4 <HAL_RCC_OscConfig+0x694>)
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	4b84      	ldr	r3, [pc, #528]	@ (8005ff4 <HAL_RCC_OscConfig+0x694>)
 8005de4:	2180      	movs	r1, #128	@ 0x80
 8005de6:	0049      	lsls	r1, r1, #1
 8005de8:	430a      	orrs	r2, r1
 8005dea:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dec:	f7fe fd2e 	bl	800484c <HAL_GetTick>
 8005df0:	0003      	movs	r3, r0
 8005df2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005df4:	e008      	b.n	8005e08 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005df6:	f7fe fd29 	bl	800484c <HAL_GetTick>
 8005dfa:	0002      	movs	r2, r0
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	2b64      	cmp	r3, #100	@ 0x64
 8005e02:	d901      	bls.n	8005e08 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e174      	b.n	80060f2 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e08:	4b7a      	ldr	r3, [pc, #488]	@ (8005ff4 <HAL_RCC_OscConfig+0x694>)
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	2380      	movs	r3, #128	@ 0x80
 8005e0e:	005b      	lsls	r3, r3, #1
 8005e10:	4013      	ands	r3, r2
 8005e12:	d0f0      	beq.n	8005df6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	689a      	ldr	r2, [r3, #8]
 8005e18:	2380      	movs	r3, #128	@ 0x80
 8005e1a:	005b      	lsls	r3, r3, #1
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d107      	bne.n	8005e30 <HAL_RCC_OscConfig+0x4d0>
 8005e20:	4b71      	ldr	r3, [pc, #452]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005e22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e24:	4b70      	ldr	r3, [pc, #448]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005e26:	2180      	movs	r1, #128	@ 0x80
 8005e28:	0049      	lsls	r1, r1, #1
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e2e:	e031      	b.n	8005e94 <HAL_RCC_OscConfig+0x534>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d10c      	bne.n	8005e52 <HAL_RCC_OscConfig+0x4f2>
 8005e38:	4b6b      	ldr	r3, [pc, #428]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005e3a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e3c:	4b6a      	ldr	r3, [pc, #424]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005e3e:	496c      	ldr	r1, [pc, #432]	@ (8005ff0 <HAL_RCC_OscConfig+0x690>)
 8005e40:	400a      	ands	r2, r1
 8005e42:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e44:	4b68      	ldr	r3, [pc, #416]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005e46:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e48:	4b67      	ldr	r3, [pc, #412]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005e4a:	496b      	ldr	r1, [pc, #428]	@ (8005ff8 <HAL_RCC_OscConfig+0x698>)
 8005e4c:	400a      	ands	r2, r1
 8005e4e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e50:	e020      	b.n	8005e94 <HAL_RCC_OscConfig+0x534>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	689a      	ldr	r2, [r3, #8]
 8005e56:	23a0      	movs	r3, #160	@ 0xa0
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d10e      	bne.n	8005e7c <HAL_RCC_OscConfig+0x51c>
 8005e5e:	4b62      	ldr	r3, [pc, #392]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005e60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e62:	4b61      	ldr	r3, [pc, #388]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005e64:	2180      	movs	r1, #128	@ 0x80
 8005e66:	00c9      	lsls	r1, r1, #3
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e6c:	4b5e      	ldr	r3, [pc, #376]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005e6e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e70:	4b5d      	ldr	r3, [pc, #372]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005e72:	2180      	movs	r1, #128	@ 0x80
 8005e74:	0049      	lsls	r1, r1, #1
 8005e76:	430a      	orrs	r2, r1
 8005e78:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e7a:	e00b      	b.n	8005e94 <HAL_RCC_OscConfig+0x534>
 8005e7c:	4b5a      	ldr	r3, [pc, #360]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005e7e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e80:	4b59      	ldr	r3, [pc, #356]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005e82:	495b      	ldr	r1, [pc, #364]	@ (8005ff0 <HAL_RCC_OscConfig+0x690>)
 8005e84:	400a      	ands	r2, r1
 8005e86:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e88:	4b57      	ldr	r3, [pc, #348]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005e8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e8c:	4b56      	ldr	r3, [pc, #344]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005e8e:	495a      	ldr	r1, [pc, #360]	@ (8005ff8 <HAL_RCC_OscConfig+0x698>)
 8005e90:	400a      	ands	r2, r1
 8005e92:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d015      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e9c:	f7fe fcd6 	bl	800484c <HAL_GetTick>
 8005ea0:	0003      	movs	r3, r0
 8005ea2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ea4:	e009      	b.n	8005eba <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ea6:	f7fe fcd1 	bl	800484c <HAL_GetTick>
 8005eaa:	0002      	movs	r2, r0
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	4a52      	ldr	r2, [pc, #328]	@ (8005ffc <HAL_RCC_OscConfig+0x69c>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e11b      	b.n	80060f2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005eba:	4b4b      	ldr	r3, [pc, #300]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005ebc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ebe:	2380      	movs	r3, #128	@ 0x80
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	d0ef      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x546>
 8005ec6:	e014      	b.n	8005ef2 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ec8:	f7fe fcc0 	bl	800484c <HAL_GetTick>
 8005ecc:	0003      	movs	r3, r0
 8005ece:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005ed0:	e009      	b.n	8005ee6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ed2:	f7fe fcbb 	bl	800484c <HAL_GetTick>
 8005ed6:	0002      	movs	r2, r0
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	4a47      	ldr	r2, [pc, #284]	@ (8005ffc <HAL_RCC_OscConfig+0x69c>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d901      	bls.n	8005ee6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e105      	b.n	80060f2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005ee6:	4b40      	ldr	r3, [pc, #256]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005ee8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005eea:	2380      	movs	r3, #128	@ 0x80
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4013      	ands	r3, r2
 8005ef0:	d1ef      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005ef2:	2323      	movs	r3, #35	@ 0x23
 8005ef4:	18fb      	adds	r3, r7, r3
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d105      	bne.n	8005f08 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005efc:	4b3a      	ldr	r3, [pc, #232]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005efe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f00:	4b39      	ldr	r3, [pc, #228]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005f02:	493f      	ldr	r1, [pc, #252]	@ (8006000 <HAL_RCC_OscConfig+0x6a0>)
 8005f04:	400a      	ands	r2, r1
 8005f06:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2220      	movs	r2, #32
 8005f0e:	4013      	ands	r3, r2
 8005f10:	d049      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d026      	beq.n	8005f68 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005f1a:	4b33      	ldr	r3, [pc, #204]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005f1c:	689a      	ldr	r2, [r3, #8]
 8005f1e:	4b32      	ldr	r3, [pc, #200]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005f20:	2101      	movs	r1, #1
 8005f22:	430a      	orrs	r2, r1
 8005f24:	609a      	str	r2, [r3, #8]
 8005f26:	4b30      	ldr	r3, [pc, #192]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005f28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f2a:	4b2f      	ldr	r3, [pc, #188]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	635a      	str	r2, [r3, #52]	@ 0x34
 8005f32:	4b34      	ldr	r3, [pc, #208]	@ (8006004 <HAL_RCC_OscConfig+0x6a4>)
 8005f34:	6a1a      	ldr	r2, [r3, #32]
 8005f36:	4b33      	ldr	r3, [pc, #204]	@ (8006004 <HAL_RCC_OscConfig+0x6a4>)
 8005f38:	2180      	movs	r1, #128	@ 0x80
 8005f3a:	0189      	lsls	r1, r1, #6
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f40:	f7fe fc84 	bl	800484c <HAL_GetTick>
 8005f44:	0003      	movs	r3, r0
 8005f46:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005f48:	e008      	b.n	8005f5c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f4a:	f7fe fc7f 	bl	800484c <HAL_GetTick>
 8005f4e:	0002      	movs	r2, r0
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d901      	bls.n	8005f5c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e0ca      	b.n	80060f2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005f5c:	4b22      	ldr	r3, [pc, #136]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	2202      	movs	r2, #2
 8005f62:	4013      	ands	r3, r2
 8005f64:	d0f1      	beq.n	8005f4a <HAL_RCC_OscConfig+0x5ea>
 8005f66:	e01e      	b.n	8005fa6 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005f68:	4b1f      	ldr	r3, [pc, #124]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005f6a:	689a      	ldr	r2, [r3, #8]
 8005f6c:	4b1e      	ldr	r3, [pc, #120]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005f6e:	2101      	movs	r1, #1
 8005f70:	438a      	bics	r2, r1
 8005f72:	609a      	str	r2, [r3, #8]
 8005f74:	4b23      	ldr	r3, [pc, #140]	@ (8006004 <HAL_RCC_OscConfig+0x6a4>)
 8005f76:	6a1a      	ldr	r2, [r3, #32]
 8005f78:	4b22      	ldr	r3, [pc, #136]	@ (8006004 <HAL_RCC_OscConfig+0x6a4>)
 8005f7a:	4923      	ldr	r1, [pc, #140]	@ (8006008 <HAL_RCC_OscConfig+0x6a8>)
 8005f7c:	400a      	ands	r2, r1
 8005f7e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f80:	f7fe fc64 	bl	800484c <HAL_GetTick>
 8005f84:	0003      	movs	r3, r0
 8005f86:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f88:	e008      	b.n	8005f9c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f8a:	f7fe fc5f 	bl	800484c <HAL_GetTick>
 8005f8e:	0002      	movs	r2, r0
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d901      	bls.n	8005f9c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e0aa      	b.n	80060f2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f9c:	4b12      	ldr	r3, [pc, #72]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	2202      	movs	r2, #2
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	d1f1      	bne.n	8005f8a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d100      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x650>
 8005fae:	e09f      	b.n	80060f0 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	2b0c      	cmp	r3, #12
 8005fb4:	d100      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x658>
 8005fb6:	e078      	b.n	80060aa <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d159      	bne.n	8006074 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fc0:	4b09      	ldr	r3, [pc, #36]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	4b08      	ldr	r3, [pc, #32]	@ (8005fe8 <HAL_RCC_OscConfig+0x688>)
 8005fc6:	4911      	ldr	r1, [pc, #68]	@ (800600c <HAL_RCC_OscConfig+0x6ac>)
 8005fc8:	400a      	ands	r2, r1
 8005fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fcc:	f7fe fc3e 	bl	800484c <HAL_GetTick>
 8005fd0:	0003      	movs	r3, r0
 8005fd2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005fd4:	e01c      	b.n	8006010 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fd6:	f7fe fc39 	bl	800484c <HAL_GetTick>
 8005fda:	0002      	movs	r2, r0
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d915      	bls.n	8006010 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e084      	b.n	80060f2 <HAL_RCC_OscConfig+0x792>
 8005fe8:	40021000 	.word	0x40021000
 8005fec:	ffff1fff 	.word	0xffff1fff
 8005ff0:	fffffeff 	.word	0xfffffeff
 8005ff4:	40007000 	.word	0x40007000
 8005ff8:	fffffbff 	.word	0xfffffbff
 8005ffc:	00001388 	.word	0x00001388
 8006000:	efffffff 	.word	0xefffffff
 8006004:	40010000 	.word	0x40010000
 8006008:	ffffdfff 	.word	0xffffdfff
 800600c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006010:	4b3a      	ldr	r3, [pc, #232]	@ (80060fc <HAL_RCC_OscConfig+0x79c>)
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	2380      	movs	r3, #128	@ 0x80
 8006016:	049b      	lsls	r3, r3, #18
 8006018:	4013      	ands	r3, r2
 800601a:	d1dc      	bne.n	8005fd6 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800601c:	4b37      	ldr	r3, [pc, #220]	@ (80060fc <HAL_RCC_OscConfig+0x79c>)
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	4a37      	ldr	r2, [pc, #220]	@ (8006100 <HAL_RCC_OscConfig+0x7a0>)
 8006022:	4013      	ands	r3, r2
 8006024:	0019      	movs	r1, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800602e:	431a      	orrs	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006034:	431a      	orrs	r2, r3
 8006036:	4b31      	ldr	r3, [pc, #196]	@ (80060fc <HAL_RCC_OscConfig+0x79c>)
 8006038:	430a      	orrs	r2, r1
 800603a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800603c:	4b2f      	ldr	r3, [pc, #188]	@ (80060fc <HAL_RCC_OscConfig+0x79c>)
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	4b2e      	ldr	r3, [pc, #184]	@ (80060fc <HAL_RCC_OscConfig+0x79c>)
 8006042:	2180      	movs	r1, #128	@ 0x80
 8006044:	0449      	lsls	r1, r1, #17
 8006046:	430a      	orrs	r2, r1
 8006048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800604a:	f7fe fbff 	bl	800484c <HAL_GetTick>
 800604e:	0003      	movs	r3, r0
 8006050:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006052:	e008      	b.n	8006066 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006054:	f7fe fbfa 	bl	800484c <HAL_GetTick>
 8006058:	0002      	movs	r2, r0
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	2b02      	cmp	r3, #2
 8006060:	d901      	bls.n	8006066 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e045      	b.n	80060f2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006066:	4b25      	ldr	r3, [pc, #148]	@ (80060fc <HAL_RCC_OscConfig+0x79c>)
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	2380      	movs	r3, #128	@ 0x80
 800606c:	049b      	lsls	r3, r3, #18
 800606e:	4013      	ands	r3, r2
 8006070:	d0f0      	beq.n	8006054 <HAL_RCC_OscConfig+0x6f4>
 8006072:	e03d      	b.n	80060f0 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006074:	4b21      	ldr	r3, [pc, #132]	@ (80060fc <HAL_RCC_OscConfig+0x79c>)
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	4b20      	ldr	r3, [pc, #128]	@ (80060fc <HAL_RCC_OscConfig+0x79c>)
 800607a:	4922      	ldr	r1, [pc, #136]	@ (8006104 <HAL_RCC_OscConfig+0x7a4>)
 800607c:	400a      	ands	r2, r1
 800607e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006080:	f7fe fbe4 	bl	800484c <HAL_GetTick>
 8006084:	0003      	movs	r3, r0
 8006086:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006088:	e008      	b.n	800609c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800608a:	f7fe fbdf 	bl	800484c <HAL_GetTick>
 800608e:	0002      	movs	r2, r0
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	2b02      	cmp	r3, #2
 8006096:	d901      	bls.n	800609c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e02a      	b.n	80060f2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800609c:	4b17      	ldr	r3, [pc, #92]	@ (80060fc <HAL_RCC_OscConfig+0x79c>)
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	2380      	movs	r3, #128	@ 0x80
 80060a2:	049b      	lsls	r3, r3, #18
 80060a4:	4013      	ands	r3, r2
 80060a6:	d1f0      	bne.n	800608a <HAL_RCC_OscConfig+0x72a>
 80060a8:	e022      	b.n	80060f0 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d101      	bne.n	80060b6 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e01d      	b.n	80060f2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80060b6:	4b11      	ldr	r3, [pc, #68]	@ (80060fc <HAL_RCC_OscConfig+0x79c>)
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	2380      	movs	r3, #128	@ 0x80
 80060c0:	025b      	lsls	r3, r3, #9
 80060c2:	401a      	ands	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d10f      	bne.n	80060ec <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	23f0      	movs	r3, #240	@ 0xf0
 80060d0:	039b      	lsls	r3, r3, #14
 80060d2:	401a      	ands	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060d8:	429a      	cmp	r2, r3
 80060da:	d107      	bne.n	80060ec <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80060dc:	69ba      	ldr	r2, [r7, #24]
 80060de:	23c0      	movs	r3, #192	@ 0xc0
 80060e0:	041b      	lsls	r3, r3, #16
 80060e2:	401a      	ands	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d001      	beq.n	80060f0 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e000      	b.n	80060f2 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	0018      	movs	r0, r3
 80060f4:	46bd      	mov	sp, r7
 80060f6:	b00a      	add	sp, #40	@ 0x28
 80060f8:	bdb0      	pop	{r4, r5, r7, pc}
 80060fa:	46c0      	nop			@ (mov r8, r8)
 80060fc:	40021000 	.word	0x40021000
 8006100:	ff02ffff 	.word	0xff02ffff
 8006104:	feffffff 	.word	0xfeffffff

08006108 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006108:	b5b0      	push	{r4, r5, r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d101      	bne.n	800611c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e128      	b.n	800636e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800611c:	4b96      	ldr	r3, [pc, #600]	@ (8006378 <HAL_RCC_ClockConfig+0x270>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2201      	movs	r2, #1
 8006122:	4013      	ands	r3, r2
 8006124:	683a      	ldr	r2, [r7, #0]
 8006126:	429a      	cmp	r2, r3
 8006128:	d91e      	bls.n	8006168 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800612a:	4b93      	ldr	r3, [pc, #588]	@ (8006378 <HAL_RCC_ClockConfig+0x270>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2201      	movs	r2, #1
 8006130:	4393      	bics	r3, r2
 8006132:	0019      	movs	r1, r3
 8006134:	4b90      	ldr	r3, [pc, #576]	@ (8006378 <HAL_RCC_ClockConfig+0x270>)
 8006136:	683a      	ldr	r2, [r7, #0]
 8006138:	430a      	orrs	r2, r1
 800613a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800613c:	f7fe fb86 	bl	800484c <HAL_GetTick>
 8006140:	0003      	movs	r3, r0
 8006142:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006144:	e009      	b.n	800615a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006146:	f7fe fb81 	bl	800484c <HAL_GetTick>
 800614a:	0002      	movs	r2, r0
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	4a8a      	ldr	r2, [pc, #552]	@ (800637c <HAL_RCC_ClockConfig+0x274>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d901      	bls.n	800615a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e109      	b.n	800636e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800615a:	4b87      	ldr	r3, [pc, #540]	@ (8006378 <HAL_RCC_ClockConfig+0x270>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2201      	movs	r2, #1
 8006160:	4013      	ands	r3, r2
 8006162:	683a      	ldr	r2, [r7, #0]
 8006164:	429a      	cmp	r2, r3
 8006166:	d1ee      	bne.n	8006146 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2202      	movs	r2, #2
 800616e:	4013      	ands	r3, r2
 8006170:	d009      	beq.n	8006186 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006172:	4b83      	ldr	r3, [pc, #524]	@ (8006380 <HAL_RCC_ClockConfig+0x278>)
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	22f0      	movs	r2, #240	@ 0xf0
 8006178:	4393      	bics	r3, r2
 800617a:	0019      	movs	r1, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	689a      	ldr	r2, [r3, #8]
 8006180:	4b7f      	ldr	r3, [pc, #508]	@ (8006380 <HAL_RCC_ClockConfig+0x278>)
 8006182:	430a      	orrs	r2, r1
 8006184:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2201      	movs	r2, #1
 800618c:	4013      	ands	r3, r2
 800618e:	d100      	bne.n	8006192 <HAL_RCC_ClockConfig+0x8a>
 8006190:	e089      	b.n	80062a6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	2b02      	cmp	r3, #2
 8006198:	d107      	bne.n	80061aa <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800619a:	4b79      	ldr	r3, [pc, #484]	@ (8006380 <HAL_RCC_ClockConfig+0x278>)
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	2380      	movs	r3, #128	@ 0x80
 80061a0:	029b      	lsls	r3, r3, #10
 80061a2:	4013      	ands	r3, r2
 80061a4:	d120      	bne.n	80061e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e0e1      	b.n	800636e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	2b03      	cmp	r3, #3
 80061b0:	d107      	bne.n	80061c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80061b2:	4b73      	ldr	r3, [pc, #460]	@ (8006380 <HAL_RCC_ClockConfig+0x278>)
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	2380      	movs	r3, #128	@ 0x80
 80061b8:	049b      	lsls	r3, r3, #18
 80061ba:	4013      	ands	r3, r2
 80061bc:	d114      	bne.n	80061e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e0d5      	b.n	800636e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d106      	bne.n	80061d8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061ca:	4b6d      	ldr	r3, [pc, #436]	@ (8006380 <HAL_RCC_ClockConfig+0x278>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2204      	movs	r2, #4
 80061d0:	4013      	ands	r3, r2
 80061d2:	d109      	bne.n	80061e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e0ca      	b.n	800636e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80061d8:	4b69      	ldr	r3, [pc, #420]	@ (8006380 <HAL_RCC_ClockConfig+0x278>)
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	2380      	movs	r3, #128	@ 0x80
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4013      	ands	r3, r2
 80061e2:	d101      	bne.n	80061e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e0c2      	b.n	800636e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061e8:	4b65      	ldr	r3, [pc, #404]	@ (8006380 <HAL_RCC_ClockConfig+0x278>)
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	2203      	movs	r2, #3
 80061ee:	4393      	bics	r3, r2
 80061f0:	0019      	movs	r1, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	4b62      	ldr	r3, [pc, #392]	@ (8006380 <HAL_RCC_ClockConfig+0x278>)
 80061f8:	430a      	orrs	r2, r1
 80061fa:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80061fc:	f7fe fb26 	bl	800484c <HAL_GetTick>
 8006200:	0003      	movs	r3, r0
 8006202:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	2b02      	cmp	r3, #2
 800620a:	d111      	bne.n	8006230 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800620c:	e009      	b.n	8006222 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800620e:	f7fe fb1d 	bl	800484c <HAL_GetTick>
 8006212:	0002      	movs	r2, r0
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	4a58      	ldr	r2, [pc, #352]	@ (800637c <HAL_RCC_ClockConfig+0x274>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d901      	bls.n	8006222 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e0a5      	b.n	800636e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006222:	4b57      	ldr	r3, [pc, #348]	@ (8006380 <HAL_RCC_ClockConfig+0x278>)
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	220c      	movs	r2, #12
 8006228:	4013      	ands	r3, r2
 800622a:	2b08      	cmp	r3, #8
 800622c:	d1ef      	bne.n	800620e <HAL_RCC_ClockConfig+0x106>
 800622e:	e03a      	b.n	80062a6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	2b03      	cmp	r3, #3
 8006236:	d111      	bne.n	800625c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006238:	e009      	b.n	800624e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800623a:	f7fe fb07 	bl	800484c <HAL_GetTick>
 800623e:	0002      	movs	r2, r0
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	4a4d      	ldr	r2, [pc, #308]	@ (800637c <HAL_RCC_ClockConfig+0x274>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d901      	bls.n	800624e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e08f      	b.n	800636e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800624e:	4b4c      	ldr	r3, [pc, #304]	@ (8006380 <HAL_RCC_ClockConfig+0x278>)
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	220c      	movs	r2, #12
 8006254:	4013      	ands	r3, r2
 8006256:	2b0c      	cmp	r3, #12
 8006258:	d1ef      	bne.n	800623a <HAL_RCC_ClockConfig+0x132>
 800625a:	e024      	b.n	80062a6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d11b      	bne.n	800629c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006264:	e009      	b.n	800627a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006266:	f7fe faf1 	bl	800484c <HAL_GetTick>
 800626a:	0002      	movs	r2, r0
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	4a42      	ldr	r2, [pc, #264]	@ (800637c <HAL_RCC_ClockConfig+0x274>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d901      	bls.n	800627a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e079      	b.n	800636e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800627a:	4b41      	ldr	r3, [pc, #260]	@ (8006380 <HAL_RCC_ClockConfig+0x278>)
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	220c      	movs	r2, #12
 8006280:	4013      	ands	r3, r2
 8006282:	2b04      	cmp	r3, #4
 8006284:	d1ef      	bne.n	8006266 <HAL_RCC_ClockConfig+0x15e>
 8006286:	e00e      	b.n	80062a6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006288:	f7fe fae0 	bl	800484c <HAL_GetTick>
 800628c:	0002      	movs	r2, r0
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	4a3a      	ldr	r2, [pc, #232]	@ (800637c <HAL_RCC_ClockConfig+0x274>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d901      	bls.n	800629c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e068      	b.n	800636e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800629c:	4b38      	ldr	r3, [pc, #224]	@ (8006380 <HAL_RCC_ClockConfig+0x278>)
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	220c      	movs	r2, #12
 80062a2:	4013      	ands	r3, r2
 80062a4:	d1f0      	bne.n	8006288 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062a6:	4b34      	ldr	r3, [pc, #208]	@ (8006378 <HAL_RCC_ClockConfig+0x270>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2201      	movs	r2, #1
 80062ac:	4013      	ands	r3, r2
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d21e      	bcs.n	80062f2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062b4:	4b30      	ldr	r3, [pc, #192]	@ (8006378 <HAL_RCC_ClockConfig+0x270>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2201      	movs	r2, #1
 80062ba:	4393      	bics	r3, r2
 80062bc:	0019      	movs	r1, r3
 80062be:	4b2e      	ldr	r3, [pc, #184]	@ (8006378 <HAL_RCC_ClockConfig+0x270>)
 80062c0:	683a      	ldr	r2, [r7, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80062c6:	f7fe fac1 	bl	800484c <HAL_GetTick>
 80062ca:	0003      	movs	r3, r0
 80062cc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ce:	e009      	b.n	80062e4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062d0:	f7fe fabc 	bl	800484c <HAL_GetTick>
 80062d4:	0002      	movs	r2, r0
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	4a28      	ldr	r2, [pc, #160]	@ (800637c <HAL_RCC_ClockConfig+0x274>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d901      	bls.n	80062e4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e044      	b.n	800636e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062e4:	4b24      	ldr	r3, [pc, #144]	@ (8006378 <HAL_RCC_ClockConfig+0x270>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2201      	movs	r2, #1
 80062ea:	4013      	ands	r3, r2
 80062ec:	683a      	ldr	r2, [r7, #0]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d1ee      	bne.n	80062d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2204      	movs	r2, #4
 80062f8:	4013      	ands	r3, r2
 80062fa:	d009      	beq.n	8006310 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062fc:	4b20      	ldr	r3, [pc, #128]	@ (8006380 <HAL_RCC_ClockConfig+0x278>)
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	4a20      	ldr	r2, [pc, #128]	@ (8006384 <HAL_RCC_ClockConfig+0x27c>)
 8006302:	4013      	ands	r3, r2
 8006304:	0019      	movs	r1, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	68da      	ldr	r2, [r3, #12]
 800630a:	4b1d      	ldr	r3, [pc, #116]	@ (8006380 <HAL_RCC_ClockConfig+0x278>)
 800630c:	430a      	orrs	r2, r1
 800630e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2208      	movs	r2, #8
 8006316:	4013      	ands	r3, r2
 8006318:	d00a      	beq.n	8006330 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800631a:	4b19      	ldr	r3, [pc, #100]	@ (8006380 <HAL_RCC_ClockConfig+0x278>)
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	4a1a      	ldr	r2, [pc, #104]	@ (8006388 <HAL_RCC_ClockConfig+0x280>)
 8006320:	4013      	ands	r3, r2
 8006322:	0019      	movs	r1, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	00da      	lsls	r2, r3, #3
 800632a:	4b15      	ldr	r3, [pc, #84]	@ (8006380 <HAL_RCC_ClockConfig+0x278>)
 800632c:	430a      	orrs	r2, r1
 800632e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006330:	f000 f832 	bl	8006398 <HAL_RCC_GetSysClockFreq>
 8006334:	0001      	movs	r1, r0
 8006336:	4b12      	ldr	r3, [pc, #72]	@ (8006380 <HAL_RCC_ClockConfig+0x278>)
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	091b      	lsrs	r3, r3, #4
 800633c:	220f      	movs	r2, #15
 800633e:	4013      	ands	r3, r2
 8006340:	4a12      	ldr	r2, [pc, #72]	@ (800638c <HAL_RCC_ClockConfig+0x284>)
 8006342:	5cd3      	ldrb	r3, [r2, r3]
 8006344:	000a      	movs	r2, r1
 8006346:	40da      	lsrs	r2, r3
 8006348:	4b11      	ldr	r3, [pc, #68]	@ (8006390 <HAL_RCC_ClockConfig+0x288>)
 800634a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800634c:	4b11      	ldr	r3, [pc, #68]	@ (8006394 <HAL_RCC_ClockConfig+0x28c>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	250b      	movs	r5, #11
 8006352:	197c      	adds	r4, r7, r5
 8006354:	0018      	movs	r0, r3
 8006356:	f7fe f8c9 	bl	80044ec <HAL_InitTick>
 800635a:	0003      	movs	r3, r0
 800635c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800635e:	197b      	adds	r3, r7, r5
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d002      	beq.n	800636c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8006366:	197b      	adds	r3, r7, r5
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	e000      	b.n	800636e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	0018      	movs	r0, r3
 8006370:	46bd      	mov	sp, r7
 8006372:	b004      	add	sp, #16
 8006374:	bdb0      	pop	{r4, r5, r7, pc}
 8006376:	46c0      	nop			@ (mov r8, r8)
 8006378:	40022000 	.word	0x40022000
 800637c:	00001388 	.word	0x00001388
 8006380:	40021000 	.word	0x40021000
 8006384:	fffff8ff 	.word	0xfffff8ff
 8006388:	ffffc7ff 	.word	0xffffc7ff
 800638c:	0800dbb0 	.word	0x0800dbb0
 8006390:	20000000 	.word	0x20000000
 8006394:	20000004 	.word	0x20000004

08006398 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006398:	b5b0      	push	{r4, r5, r7, lr}
 800639a:	b08e      	sub	sp, #56	@ 0x38
 800639c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800639e:	4b4c      	ldr	r3, [pc, #304]	@ (80064d0 <HAL_RCC_GetSysClockFreq+0x138>)
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80063a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063a6:	230c      	movs	r3, #12
 80063a8:	4013      	ands	r3, r2
 80063aa:	2b0c      	cmp	r3, #12
 80063ac:	d014      	beq.n	80063d8 <HAL_RCC_GetSysClockFreq+0x40>
 80063ae:	d900      	bls.n	80063b2 <HAL_RCC_GetSysClockFreq+0x1a>
 80063b0:	e07b      	b.n	80064aa <HAL_RCC_GetSysClockFreq+0x112>
 80063b2:	2b04      	cmp	r3, #4
 80063b4:	d002      	beq.n	80063bc <HAL_RCC_GetSysClockFreq+0x24>
 80063b6:	2b08      	cmp	r3, #8
 80063b8:	d00b      	beq.n	80063d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80063ba:	e076      	b.n	80064aa <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80063bc:	4b44      	ldr	r3, [pc, #272]	@ (80064d0 <HAL_RCC_GetSysClockFreq+0x138>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2210      	movs	r2, #16
 80063c2:	4013      	ands	r3, r2
 80063c4:	d002      	beq.n	80063cc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80063c6:	4b43      	ldr	r3, [pc, #268]	@ (80064d4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80063c8:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80063ca:	e07c      	b.n	80064c6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80063cc:	4b42      	ldr	r3, [pc, #264]	@ (80064d8 <HAL_RCC_GetSysClockFreq+0x140>)
 80063ce:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80063d0:	e079      	b.n	80064c6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80063d2:	4b42      	ldr	r3, [pc, #264]	@ (80064dc <HAL_RCC_GetSysClockFreq+0x144>)
 80063d4:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80063d6:	e076      	b.n	80064c6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80063d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063da:	0c9a      	lsrs	r2, r3, #18
 80063dc:	230f      	movs	r3, #15
 80063de:	401a      	ands	r2, r3
 80063e0:	4b3f      	ldr	r3, [pc, #252]	@ (80064e0 <HAL_RCC_GetSysClockFreq+0x148>)
 80063e2:	5c9b      	ldrb	r3, [r3, r2]
 80063e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80063e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063e8:	0d9a      	lsrs	r2, r3, #22
 80063ea:	2303      	movs	r3, #3
 80063ec:	4013      	ands	r3, r2
 80063ee:	3301      	adds	r3, #1
 80063f0:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063f2:	4b37      	ldr	r3, [pc, #220]	@ (80064d0 <HAL_RCC_GetSysClockFreq+0x138>)
 80063f4:	68da      	ldr	r2, [r3, #12]
 80063f6:	2380      	movs	r3, #128	@ 0x80
 80063f8:	025b      	lsls	r3, r3, #9
 80063fa:	4013      	ands	r3, r2
 80063fc:	d01a      	beq.n	8006434 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80063fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006400:	61bb      	str	r3, [r7, #24]
 8006402:	2300      	movs	r3, #0
 8006404:	61fb      	str	r3, [r7, #28]
 8006406:	4a35      	ldr	r2, [pc, #212]	@ (80064dc <HAL_RCC_GetSysClockFreq+0x144>)
 8006408:	2300      	movs	r3, #0
 800640a:	69b8      	ldr	r0, [r7, #24]
 800640c:	69f9      	ldr	r1, [r7, #28]
 800640e:	f7fa f86b 	bl	80004e8 <__aeabi_lmul>
 8006412:	0002      	movs	r2, r0
 8006414:	000b      	movs	r3, r1
 8006416:	0010      	movs	r0, r2
 8006418:	0019      	movs	r1, r3
 800641a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641c:	613b      	str	r3, [r7, #16]
 800641e:	2300      	movs	r3, #0
 8006420:	617b      	str	r3, [r7, #20]
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	f7fa f83f 	bl	80004a8 <__aeabi_uldivmod>
 800642a:	0002      	movs	r2, r0
 800642c:	000b      	movs	r3, r1
 800642e:	0013      	movs	r3, r2
 8006430:	637b      	str	r3, [r7, #52]	@ 0x34
 8006432:	e037      	b.n	80064a4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006434:	4b26      	ldr	r3, [pc, #152]	@ (80064d0 <HAL_RCC_GetSysClockFreq+0x138>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2210      	movs	r2, #16
 800643a:	4013      	ands	r3, r2
 800643c:	d01a      	beq.n	8006474 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800643e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006440:	60bb      	str	r3, [r7, #8]
 8006442:	2300      	movs	r3, #0
 8006444:	60fb      	str	r3, [r7, #12]
 8006446:	4a23      	ldr	r2, [pc, #140]	@ (80064d4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006448:	2300      	movs	r3, #0
 800644a:	68b8      	ldr	r0, [r7, #8]
 800644c:	68f9      	ldr	r1, [r7, #12]
 800644e:	f7fa f84b 	bl	80004e8 <__aeabi_lmul>
 8006452:	0002      	movs	r2, r0
 8006454:	000b      	movs	r3, r1
 8006456:	0010      	movs	r0, r2
 8006458:	0019      	movs	r1, r3
 800645a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645c:	603b      	str	r3, [r7, #0]
 800645e:	2300      	movs	r3, #0
 8006460:	607b      	str	r3, [r7, #4]
 8006462:	683a      	ldr	r2, [r7, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f7fa f81f 	bl	80004a8 <__aeabi_uldivmod>
 800646a:	0002      	movs	r2, r0
 800646c:	000b      	movs	r3, r1
 800646e:	0013      	movs	r3, r2
 8006470:	637b      	str	r3, [r7, #52]	@ 0x34
 8006472:	e017      	b.n	80064a4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006476:	0018      	movs	r0, r3
 8006478:	2300      	movs	r3, #0
 800647a:	0019      	movs	r1, r3
 800647c:	4a16      	ldr	r2, [pc, #88]	@ (80064d8 <HAL_RCC_GetSysClockFreq+0x140>)
 800647e:	2300      	movs	r3, #0
 8006480:	f7fa f832 	bl	80004e8 <__aeabi_lmul>
 8006484:	0002      	movs	r2, r0
 8006486:	000b      	movs	r3, r1
 8006488:	0010      	movs	r0, r2
 800648a:	0019      	movs	r1, r3
 800648c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648e:	001c      	movs	r4, r3
 8006490:	2300      	movs	r3, #0
 8006492:	001d      	movs	r5, r3
 8006494:	0022      	movs	r2, r4
 8006496:	002b      	movs	r3, r5
 8006498:	f7fa f806 	bl	80004a8 <__aeabi_uldivmod>
 800649c:	0002      	movs	r2, r0
 800649e:	000b      	movs	r3, r1
 80064a0:	0013      	movs	r3, r2
 80064a2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80064a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064a6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80064a8:	e00d      	b.n	80064c6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80064aa:	4b09      	ldr	r3, [pc, #36]	@ (80064d0 <HAL_RCC_GetSysClockFreq+0x138>)
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	0b5b      	lsrs	r3, r3, #13
 80064b0:	2207      	movs	r2, #7
 80064b2:	4013      	ands	r3, r2
 80064b4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80064b6:	6a3b      	ldr	r3, [r7, #32]
 80064b8:	3301      	adds	r3, #1
 80064ba:	2280      	movs	r2, #128	@ 0x80
 80064bc:	0212      	lsls	r2, r2, #8
 80064be:	409a      	lsls	r2, r3
 80064c0:	0013      	movs	r3, r2
 80064c2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80064c4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80064c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80064c8:	0018      	movs	r0, r3
 80064ca:	46bd      	mov	sp, r7
 80064cc:	b00e      	add	sp, #56	@ 0x38
 80064ce:	bdb0      	pop	{r4, r5, r7, pc}
 80064d0:	40021000 	.word	0x40021000
 80064d4:	003d0900 	.word	0x003d0900
 80064d8:	00f42400 	.word	0x00f42400
 80064dc:	007a1200 	.word	0x007a1200
 80064e0:	0800dbc8 	.word	0x0800dbc8

080064e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064e8:	4b02      	ldr	r3, [pc, #8]	@ (80064f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80064ea:	681b      	ldr	r3, [r3, #0]
}
 80064ec:	0018      	movs	r0, r3
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	46c0      	nop			@ (mov r8, r8)
 80064f4:	20000000 	.word	0x20000000

080064f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80064fc:	f7ff fff2 	bl	80064e4 <HAL_RCC_GetHCLKFreq>
 8006500:	0001      	movs	r1, r0
 8006502:	4b06      	ldr	r3, [pc, #24]	@ (800651c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	0a1b      	lsrs	r3, r3, #8
 8006508:	2207      	movs	r2, #7
 800650a:	4013      	ands	r3, r2
 800650c:	4a04      	ldr	r2, [pc, #16]	@ (8006520 <HAL_RCC_GetPCLK1Freq+0x28>)
 800650e:	5cd3      	ldrb	r3, [r2, r3]
 8006510:	40d9      	lsrs	r1, r3
 8006512:	000b      	movs	r3, r1
}
 8006514:	0018      	movs	r0, r3
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	46c0      	nop			@ (mov r8, r8)
 800651c:	40021000 	.word	0x40021000
 8006520:	0800dbc0 	.word	0x0800dbc0

08006524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006528:	f7ff ffdc 	bl	80064e4 <HAL_RCC_GetHCLKFreq>
 800652c:	0001      	movs	r1, r0
 800652e:	4b06      	ldr	r3, [pc, #24]	@ (8006548 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	0adb      	lsrs	r3, r3, #11
 8006534:	2207      	movs	r2, #7
 8006536:	4013      	ands	r3, r2
 8006538:	4a04      	ldr	r2, [pc, #16]	@ (800654c <HAL_RCC_GetPCLK2Freq+0x28>)
 800653a:	5cd3      	ldrb	r3, [r2, r3]
 800653c:	40d9      	lsrs	r1, r3
 800653e:	000b      	movs	r3, r1
}
 8006540:	0018      	movs	r0, r3
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	46c0      	nop			@ (mov r8, r8)
 8006548:	40021000 	.word	0x40021000
 800654c:	0800dbc0 	.word	0x0800dbc0

08006550 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	220f      	movs	r2, #15
 800655e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006560:	4b12      	ldr	r3, [pc, #72]	@ (80065ac <HAL_RCC_GetClockConfig+0x5c>)
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	2203      	movs	r2, #3
 8006566:	401a      	ands	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800656c:	4b0f      	ldr	r3, [pc, #60]	@ (80065ac <HAL_RCC_GetClockConfig+0x5c>)
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	22f0      	movs	r2, #240	@ 0xf0
 8006572:	401a      	ands	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006578:	4b0c      	ldr	r3, [pc, #48]	@ (80065ac <HAL_RCC_GetClockConfig+0x5c>)
 800657a:	68da      	ldr	r2, [r3, #12]
 800657c:	23e0      	movs	r3, #224	@ 0xe0
 800657e:	00db      	lsls	r3, r3, #3
 8006580:	401a      	ands	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006586:	4b09      	ldr	r3, [pc, #36]	@ (80065ac <HAL_RCC_GetClockConfig+0x5c>)
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	08da      	lsrs	r2, r3, #3
 800658c:	23e0      	movs	r3, #224	@ 0xe0
 800658e:	00db      	lsls	r3, r3, #3
 8006590:	401a      	ands	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006596:	4b06      	ldr	r3, [pc, #24]	@ (80065b0 <HAL_RCC_GetClockConfig+0x60>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2201      	movs	r2, #1
 800659c:	401a      	ands	r2, r3
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	601a      	str	r2, [r3, #0]
}
 80065a2:	46c0      	nop			@ (mov r8, r8)
 80065a4:	46bd      	mov	sp, r7
 80065a6:	b002      	add	sp, #8
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	46c0      	nop			@ (mov r8, r8)
 80065ac:	40021000 	.word	0x40021000
 80065b0:	40022000 	.word	0x40022000

080065b4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80065bc:	2317      	movs	r3, #23
 80065be:	18fb      	adds	r3, r7, r3
 80065c0:	2200      	movs	r2, #0
 80065c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2220      	movs	r2, #32
 80065ca:	4013      	ands	r3, r2
 80065cc:	d106      	bne.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	2380      	movs	r3, #128	@ 0x80
 80065d4:	011b      	lsls	r3, r3, #4
 80065d6:	4013      	ands	r3, r2
 80065d8:	d100      	bne.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x28>
 80065da:	e104      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065dc:	4bb9      	ldr	r3, [pc, #740]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80065de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065e0:	2380      	movs	r3, #128	@ 0x80
 80065e2:	055b      	lsls	r3, r3, #21
 80065e4:	4013      	ands	r3, r2
 80065e6:	d10a      	bne.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065e8:	4bb6      	ldr	r3, [pc, #728]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80065ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065ec:	4bb5      	ldr	r3, [pc, #724]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80065ee:	2180      	movs	r1, #128	@ 0x80
 80065f0:	0549      	lsls	r1, r1, #21
 80065f2:	430a      	orrs	r2, r1
 80065f4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80065f6:	2317      	movs	r3, #23
 80065f8:	18fb      	adds	r3, r7, r3
 80065fa:	2201      	movs	r2, #1
 80065fc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065fe:	4bb2      	ldr	r3, [pc, #712]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	2380      	movs	r3, #128	@ 0x80
 8006604:	005b      	lsls	r3, r3, #1
 8006606:	4013      	ands	r3, r2
 8006608:	d11a      	bne.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800660a:	4baf      	ldr	r3, [pc, #700]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	4bae      	ldr	r3, [pc, #696]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8006610:	2180      	movs	r1, #128	@ 0x80
 8006612:	0049      	lsls	r1, r1, #1
 8006614:	430a      	orrs	r2, r1
 8006616:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006618:	f7fe f918 	bl	800484c <HAL_GetTick>
 800661c:	0003      	movs	r3, r0
 800661e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006620:	e008      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006622:	f7fe f913 	bl	800484c <HAL_GetTick>
 8006626:	0002      	movs	r2, r0
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	2b64      	cmp	r3, #100	@ 0x64
 800662e:	d901      	bls.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e143      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006634:	4ba4      	ldr	r3, [pc, #656]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	2380      	movs	r3, #128	@ 0x80
 800663a:	005b      	lsls	r3, r3, #1
 800663c:	4013      	ands	r3, r2
 800663e:	d0f0      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006640:	4ba0      	ldr	r3, [pc, #640]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	23c0      	movs	r3, #192	@ 0xc0
 8006646:	039b      	lsls	r3, r3, #14
 8006648:	4013      	ands	r3, r2
 800664a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	23c0      	movs	r3, #192	@ 0xc0
 8006652:	039b      	lsls	r3, r3, #14
 8006654:	4013      	ands	r3, r2
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	429a      	cmp	r2, r3
 800665a:	d107      	bne.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689a      	ldr	r2, [r3, #8]
 8006660:	23c0      	movs	r3, #192	@ 0xc0
 8006662:	039b      	lsls	r3, r3, #14
 8006664:	4013      	ands	r3, r2
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	429a      	cmp	r2, r3
 800666a:	d013      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685a      	ldr	r2, [r3, #4]
 8006670:	23c0      	movs	r3, #192	@ 0xc0
 8006672:	029b      	lsls	r3, r3, #10
 8006674:	401a      	ands	r2, r3
 8006676:	23c0      	movs	r3, #192	@ 0xc0
 8006678:	029b      	lsls	r3, r3, #10
 800667a:	429a      	cmp	r2, r3
 800667c:	d10a      	bne.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800667e:	4b91      	ldr	r3, [pc, #580]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	2380      	movs	r3, #128	@ 0x80
 8006684:	029b      	lsls	r3, r3, #10
 8006686:	401a      	ands	r2, r3
 8006688:	2380      	movs	r3, #128	@ 0x80
 800668a:	029b      	lsls	r3, r3, #10
 800668c:	429a      	cmp	r2, r3
 800668e:	d101      	bne.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e113      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006694:	4b8b      	ldr	r3, [pc, #556]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006696:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006698:	23c0      	movs	r3, #192	@ 0xc0
 800669a:	029b      	lsls	r3, r3, #10
 800669c:	4013      	ands	r3, r2
 800669e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d049      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	23c0      	movs	r3, #192	@ 0xc0
 80066ac:	029b      	lsls	r3, r3, #10
 80066ae:	4013      	ands	r3, r2
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d004      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2220      	movs	r2, #32
 80066bc:	4013      	ands	r3, r2
 80066be:	d10d      	bne.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	689a      	ldr	r2, [r3, #8]
 80066c4:	23c0      	movs	r3, #192	@ 0xc0
 80066c6:	029b      	lsls	r3, r3, #10
 80066c8:	4013      	ands	r3, r2
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d034      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	2380      	movs	r3, #128	@ 0x80
 80066d6:	011b      	lsls	r3, r3, #4
 80066d8:	4013      	ands	r3, r2
 80066da:	d02e      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80066dc:	4b79      	ldr	r3, [pc, #484]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80066de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066e0:	4a7a      	ldr	r2, [pc, #488]	@ (80068cc <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80066e2:	4013      	ands	r3, r2
 80066e4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80066e6:	4b77      	ldr	r3, [pc, #476]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80066e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80066ea:	4b76      	ldr	r3, [pc, #472]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80066ec:	2180      	movs	r1, #128	@ 0x80
 80066ee:	0309      	lsls	r1, r1, #12
 80066f0:	430a      	orrs	r2, r1
 80066f2:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80066f4:	4b73      	ldr	r3, [pc, #460]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80066f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80066f8:	4b72      	ldr	r3, [pc, #456]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80066fa:	4975      	ldr	r1, [pc, #468]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80066fc:	400a      	ands	r2, r1
 80066fe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8006700:	4b70      	ldr	r3, [pc, #448]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	2380      	movs	r3, #128	@ 0x80
 800670a:	005b      	lsls	r3, r3, #1
 800670c:	4013      	ands	r3, r2
 800670e:	d014      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006710:	f7fe f89c 	bl	800484c <HAL_GetTick>
 8006714:	0003      	movs	r3, r0
 8006716:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006718:	e009      	b.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800671a:	f7fe f897 	bl	800484c <HAL_GetTick>
 800671e:	0002      	movs	r2, r0
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	4a6b      	ldr	r2, [pc, #428]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d901      	bls.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e0c6      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800672e:	4b65      	ldr	r3, [pc, #404]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006730:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006732:	2380      	movs	r3, #128	@ 0x80
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4013      	ands	r3, r2
 8006738:	d0ef      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	2380      	movs	r3, #128	@ 0x80
 8006740:	011b      	lsls	r3, r3, #4
 8006742:	4013      	ands	r3, r2
 8006744:	d01f      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	689a      	ldr	r2, [r3, #8]
 800674a:	23c0      	movs	r3, #192	@ 0xc0
 800674c:	029b      	lsls	r3, r3, #10
 800674e:	401a      	ands	r2, r3
 8006750:	23c0      	movs	r3, #192	@ 0xc0
 8006752:	029b      	lsls	r3, r3, #10
 8006754:	429a      	cmp	r2, r3
 8006756:	d10c      	bne.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8006758:	4b5a      	ldr	r3, [pc, #360]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a5e      	ldr	r2, [pc, #376]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800675e:	4013      	ands	r3, r2
 8006760:	0019      	movs	r1, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	689a      	ldr	r2, [r3, #8]
 8006766:	23c0      	movs	r3, #192	@ 0xc0
 8006768:	039b      	lsls	r3, r3, #14
 800676a:	401a      	ands	r2, r3
 800676c:	4b55      	ldr	r3, [pc, #340]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800676e:	430a      	orrs	r2, r1
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	4b54      	ldr	r3, [pc, #336]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006774:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	689a      	ldr	r2, [r3, #8]
 800677a:	23c0      	movs	r3, #192	@ 0xc0
 800677c:	029b      	lsls	r3, r3, #10
 800677e:	401a      	ands	r2, r3
 8006780:	4b50      	ldr	r3, [pc, #320]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006782:	430a      	orrs	r2, r1
 8006784:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2220      	movs	r2, #32
 800678c:	4013      	ands	r3, r2
 800678e:	d01f      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	23c0      	movs	r3, #192	@ 0xc0
 8006796:	029b      	lsls	r3, r3, #10
 8006798:	401a      	ands	r2, r3
 800679a:	23c0      	movs	r3, #192	@ 0xc0
 800679c:	029b      	lsls	r3, r3, #10
 800679e:	429a      	cmp	r2, r3
 80067a0:	d10c      	bne.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x208>
 80067a2:	4b48      	ldr	r3, [pc, #288]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a4c      	ldr	r2, [pc, #304]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80067a8:	4013      	ands	r3, r2
 80067aa:	0019      	movs	r1, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	23c0      	movs	r3, #192	@ 0xc0
 80067b2:	039b      	lsls	r3, r3, #14
 80067b4:	401a      	ands	r2, r3
 80067b6:	4b43      	ldr	r3, [pc, #268]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80067b8:	430a      	orrs	r2, r1
 80067ba:	601a      	str	r2, [r3, #0]
 80067bc:	4b41      	ldr	r3, [pc, #260]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80067be:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685a      	ldr	r2, [r3, #4]
 80067c4:	23c0      	movs	r3, #192	@ 0xc0
 80067c6:	029b      	lsls	r3, r3, #10
 80067c8:	401a      	ands	r2, r3
 80067ca:	4b3e      	ldr	r3, [pc, #248]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80067cc:	430a      	orrs	r2, r1
 80067ce:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80067d0:	2317      	movs	r3, #23
 80067d2:	18fb      	adds	r3, r7, r3
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d105      	bne.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067da:	4b3a      	ldr	r3, [pc, #232]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80067dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067de:	4b39      	ldr	r3, [pc, #228]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80067e0:	493e      	ldr	r1, [pc, #248]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80067e2:	400a      	ands	r2, r1
 80067e4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2201      	movs	r2, #1
 80067ec:	4013      	ands	r3, r2
 80067ee:	d009      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80067f0:	4b34      	ldr	r3, [pc, #208]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80067f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067f4:	2203      	movs	r2, #3
 80067f6:	4393      	bics	r3, r2
 80067f8:	0019      	movs	r1, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68da      	ldr	r2, [r3, #12]
 80067fe:	4b31      	ldr	r3, [pc, #196]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006800:	430a      	orrs	r2, r1
 8006802:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2202      	movs	r2, #2
 800680a:	4013      	ands	r3, r2
 800680c:	d009      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800680e:	4b2d      	ldr	r3, [pc, #180]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006812:	220c      	movs	r2, #12
 8006814:	4393      	bics	r3, r2
 8006816:	0019      	movs	r1, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	691a      	ldr	r2, [r3, #16]
 800681c:	4b29      	ldr	r3, [pc, #164]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800681e:	430a      	orrs	r2, r1
 8006820:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2204      	movs	r2, #4
 8006828:	4013      	ands	r3, r2
 800682a:	d009      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800682c:	4b25      	ldr	r3, [pc, #148]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800682e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006830:	4a2b      	ldr	r2, [pc, #172]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8006832:	4013      	ands	r3, r2
 8006834:	0019      	movs	r1, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	695a      	ldr	r2, [r3, #20]
 800683a:	4b22      	ldr	r3, [pc, #136]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800683c:	430a      	orrs	r2, r1
 800683e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2208      	movs	r2, #8
 8006846:	4013      	ands	r3, r2
 8006848:	d009      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800684a:	4b1e      	ldr	r3, [pc, #120]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800684c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800684e:	4a25      	ldr	r2, [pc, #148]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006850:	4013      	ands	r3, r2
 8006852:	0019      	movs	r1, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	699a      	ldr	r2, [r3, #24]
 8006858:	4b1a      	ldr	r3, [pc, #104]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800685a:	430a      	orrs	r2, r1
 800685c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	2380      	movs	r3, #128	@ 0x80
 8006864:	005b      	lsls	r3, r3, #1
 8006866:	4013      	ands	r3, r2
 8006868:	d009      	beq.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800686a:	4b16      	ldr	r3, [pc, #88]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800686c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800686e:	4a17      	ldr	r2, [pc, #92]	@ (80068cc <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8006870:	4013      	ands	r3, r2
 8006872:	0019      	movs	r1, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	69da      	ldr	r2, [r3, #28]
 8006878:	4b12      	ldr	r3, [pc, #72]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800687a:	430a      	orrs	r2, r1
 800687c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2240      	movs	r2, #64	@ 0x40
 8006884:	4013      	ands	r3, r2
 8006886:	d009      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006888:	4b0e      	ldr	r3, [pc, #56]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800688a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800688c:	4a16      	ldr	r2, [pc, #88]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800688e:	4013      	ands	r3, r2
 8006890:	0019      	movs	r1, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006896:	4b0b      	ldr	r3, [pc, #44]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006898:	430a      	orrs	r2, r1
 800689a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2280      	movs	r2, #128	@ 0x80
 80068a2:	4013      	ands	r3, r2
 80068a4:	d009      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80068a6:	4b07      	ldr	r3, [pc, #28]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80068a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068aa:	4a10      	ldr	r2, [pc, #64]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068ac:	4013      	ands	r3, r2
 80068ae:	0019      	movs	r1, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a1a      	ldr	r2, [r3, #32]
 80068b4:	4b03      	ldr	r3, [pc, #12]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80068b6:	430a      	orrs	r2, r1
 80068b8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	0018      	movs	r0, r3
 80068be:	46bd      	mov	sp, r7
 80068c0:	b006      	add	sp, #24
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	40021000 	.word	0x40021000
 80068c8:	40007000 	.word	0x40007000
 80068cc:	fffcffff 	.word	0xfffcffff
 80068d0:	fff7ffff 	.word	0xfff7ffff
 80068d4:	00001388 	.word	0x00001388
 80068d8:	ffcfffff 	.word	0xffcfffff
 80068dc:	efffffff 	.word	0xefffffff
 80068e0:	fffff3ff 	.word	0xfffff3ff
 80068e4:	ffffcfff 	.word	0xffffcfff
 80068e8:	fbffffff 	.word	0xfbffffff
 80068ec:	fff3ffff 	.word	0xfff3ffff

080068f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d101      	bne.n	8006902 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e083      	b.n	8006a0a <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006906:	2b00      	cmp	r3, #0
 8006908:	d109      	bne.n	800691e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685a      	ldr	r2, [r3, #4]
 800690e:	2382      	movs	r3, #130	@ 0x82
 8006910:	005b      	lsls	r3, r3, #1
 8006912:	429a      	cmp	r2, r3
 8006914:	d009      	beq.n	800692a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	61da      	str	r2, [r3, #28]
 800691c:	e005      	b.n	800692a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2251      	movs	r2, #81	@ 0x51
 8006934:	5c9b      	ldrb	r3, [r3, r2]
 8006936:	b2db      	uxtb	r3, r3
 8006938:	2b00      	cmp	r3, #0
 800693a:	d107      	bne.n	800694c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2250      	movs	r2, #80	@ 0x50
 8006940:	2100      	movs	r1, #0
 8006942:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	0018      	movs	r0, r3
 8006948:	f7fd fd46 	bl	80043d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2251      	movs	r2, #81	@ 0x51
 8006950:	2102      	movs	r1, #2
 8006952:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2140      	movs	r1, #64	@ 0x40
 8006960:	438a      	bics	r2, r1
 8006962:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685a      	ldr	r2, [r3, #4]
 8006968:	2382      	movs	r3, #130	@ 0x82
 800696a:	005b      	lsls	r3, r3, #1
 800696c:	401a      	ands	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6899      	ldr	r1, [r3, #8]
 8006972:	2384      	movs	r3, #132	@ 0x84
 8006974:	021b      	lsls	r3, r3, #8
 8006976:	400b      	ands	r3, r1
 8006978:	431a      	orrs	r2, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	68d9      	ldr	r1, [r3, #12]
 800697e:	2380      	movs	r3, #128	@ 0x80
 8006980:	011b      	lsls	r3, r3, #4
 8006982:	400b      	ands	r3, r1
 8006984:	431a      	orrs	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	2102      	movs	r1, #2
 800698c:	400b      	ands	r3, r1
 800698e:	431a      	orrs	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	2101      	movs	r1, #1
 8006996:	400b      	ands	r3, r1
 8006998:	431a      	orrs	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6999      	ldr	r1, [r3, #24]
 800699e:	2380      	movs	r3, #128	@ 0x80
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	400b      	ands	r3, r1
 80069a4:	431a      	orrs	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	69db      	ldr	r3, [r3, #28]
 80069aa:	2138      	movs	r1, #56	@ 0x38
 80069ac:	400b      	ands	r3, r1
 80069ae:	431a      	orrs	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a1b      	ldr	r3, [r3, #32]
 80069b4:	2180      	movs	r1, #128	@ 0x80
 80069b6:	400b      	ands	r3, r1
 80069b8:	431a      	orrs	r2, r3
 80069ba:	0011      	movs	r1, r2
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069c0:	2380      	movs	r3, #128	@ 0x80
 80069c2:	019b      	lsls	r3, r3, #6
 80069c4:	401a      	ands	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	430a      	orrs	r2, r1
 80069cc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	0c1b      	lsrs	r3, r3, #16
 80069d4:	2204      	movs	r2, #4
 80069d6:	4013      	ands	r3, r2
 80069d8:	0019      	movs	r1, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069de:	2210      	movs	r2, #16
 80069e0:	401a      	ands	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	430a      	orrs	r2, r1
 80069e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	69da      	ldr	r2, [r3, #28]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4907      	ldr	r1, [pc, #28]	@ (8006a14 <HAL_SPI_Init+0x124>)
 80069f6:	400a      	ands	r2, r1
 80069f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2251      	movs	r2, #81	@ 0x51
 8006a04:	2101      	movs	r1, #1
 8006a06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	0018      	movs	r0, r3
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	b002      	add	sp, #8
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	46c0      	nop			@ (mov r8, r8)
 8006a14:	fffff7ff 	.word	0xfffff7ff

08006a18 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b088      	sub	sp, #32
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	603b      	str	r3, [r7, #0]
 8006a24:	1dbb      	adds	r3, r7, #6
 8006a26:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a28:	231f      	movs	r3, #31
 8006a2a:	18fb      	adds	r3, r7, r3
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2250      	movs	r2, #80	@ 0x50
 8006a34:	5c9b      	ldrb	r3, [r3, r2]
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d101      	bne.n	8006a3e <HAL_SPI_Transmit+0x26>
 8006a3a:	2302      	movs	r3, #2
 8006a3c:	e145      	b.n	8006cca <HAL_SPI_Transmit+0x2b2>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2250      	movs	r2, #80	@ 0x50
 8006a42:	2101      	movs	r1, #1
 8006a44:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a46:	f7fd ff01 	bl	800484c <HAL_GetTick>
 8006a4a:	0003      	movs	r3, r0
 8006a4c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006a4e:	2316      	movs	r3, #22
 8006a50:	18fb      	adds	r3, r7, r3
 8006a52:	1dba      	adds	r2, r7, #6
 8006a54:	8812      	ldrh	r2, [r2, #0]
 8006a56:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2251      	movs	r2, #81	@ 0x51
 8006a5c:	5c9b      	ldrb	r3, [r3, r2]
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d004      	beq.n	8006a6e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006a64:	231f      	movs	r3, #31
 8006a66:	18fb      	adds	r3, r7, r3
 8006a68:	2202      	movs	r2, #2
 8006a6a:	701a      	strb	r2, [r3, #0]
    goto error;
 8006a6c:	e126      	b.n	8006cbc <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d003      	beq.n	8006a7c <HAL_SPI_Transmit+0x64>
 8006a74:	1dbb      	adds	r3, r7, #6
 8006a76:	881b      	ldrh	r3, [r3, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d104      	bne.n	8006a86 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006a7c:	231f      	movs	r3, #31
 8006a7e:	18fb      	adds	r3, r7, r3
 8006a80:	2201      	movs	r2, #1
 8006a82:	701a      	strb	r2, [r3, #0]
    goto error;
 8006a84:	e11a      	b.n	8006cbc <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2251      	movs	r2, #81	@ 0x51
 8006a8a:	2103      	movs	r1, #3
 8006a8c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	1dba      	adds	r2, r7, #6
 8006a9e:	8812      	ldrh	r2, [r2, #0]
 8006aa0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	1dba      	adds	r2, r7, #6
 8006aa6:	8812      	ldrh	r2, [r2, #0]
 8006aa8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	689a      	ldr	r2, [r3, #8]
 8006acc:	2380      	movs	r3, #128	@ 0x80
 8006ace:	021b      	lsls	r3, r3, #8
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d110      	bne.n	8006af6 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2140      	movs	r1, #64	@ 0x40
 8006ae0:	438a      	bics	r2, r1
 8006ae2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2180      	movs	r1, #128	@ 0x80
 8006af0:	01c9      	lsls	r1, r1, #7
 8006af2:	430a      	orrs	r2, r1
 8006af4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2240      	movs	r2, #64	@ 0x40
 8006afe:	4013      	ands	r3, r2
 8006b00:	2b40      	cmp	r3, #64	@ 0x40
 8006b02:	d007      	beq.n	8006b14 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2140      	movs	r1, #64	@ 0x40
 8006b10:	430a      	orrs	r2, r1
 8006b12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	68da      	ldr	r2, [r3, #12]
 8006b18:	2380      	movs	r3, #128	@ 0x80
 8006b1a:	011b      	lsls	r3, r3, #4
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d152      	bne.n	8006bc6 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d004      	beq.n	8006b32 <HAL_SPI_Transmit+0x11a>
 8006b28:	2316      	movs	r3, #22
 8006b2a:	18fb      	adds	r3, r7, r3
 8006b2c:	881b      	ldrh	r3, [r3, #0]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d143      	bne.n	8006bba <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b36:	881a      	ldrh	r2, [r3, #0]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b42:	1c9a      	adds	r2, r3, #2
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006b56:	e030      	b.n	8006bba <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	2202      	movs	r2, #2
 8006b60:	4013      	ands	r3, r2
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d112      	bne.n	8006b8c <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b6a:	881a      	ldrh	r2, [r3, #0]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b76:	1c9a      	adds	r2, r3, #2
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	3b01      	subs	r3, #1
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006b8a:	e016      	b.n	8006bba <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b8c:	f7fd fe5e 	bl	800484c <HAL_GetTick>
 8006b90:	0002      	movs	r2, r0
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d802      	bhi.n	8006ba2 <HAL_SPI_Transmit+0x18a>
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	d102      	bne.n	8006ba8 <HAL_SPI_Transmit+0x190>
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d108      	bne.n	8006bba <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8006ba8:	231f      	movs	r3, #31
 8006baa:	18fb      	adds	r3, r7, r3
 8006bac:	2203      	movs	r2, #3
 8006bae:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2251      	movs	r2, #81	@ 0x51
 8006bb4:	2101      	movs	r1, #1
 8006bb6:	5499      	strb	r1, [r3, r2]
          goto error;
 8006bb8:	e080      	b.n	8006cbc <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1c9      	bne.n	8006b58 <HAL_SPI_Transmit+0x140>
 8006bc4:	e053      	b.n	8006c6e <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d004      	beq.n	8006bd8 <HAL_SPI_Transmit+0x1c0>
 8006bce:	2316      	movs	r3, #22
 8006bd0:	18fb      	adds	r3, r7, r3
 8006bd2:	881b      	ldrh	r3, [r3, #0]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d145      	bne.n	8006c64 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	330c      	adds	r3, #12
 8006be2:	7812      	ldrb	r2, [r2, #0]
 8006be4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bea:	1c5a      	adds	r2, r3, #1
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006bfe:	e031      	b.n	8006c64 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	2202      	movs	r2, #2
 8006c08:	4013      	ands	r3, r2
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	d113      	bne.n	8006c36 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	330c      	adds	r3, #12
 8006c18:	7812      	ldrb	r2, [r2, #0]
 8006c1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c20:	1c5a      	adds	r2, r3, #1
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006c34:	e016      	b.n	8006c64 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c36:	f7fd fe09 	bl	800484c <HAL_GetTick>
 8006c3a:	0002      	movs	r2, r0
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	683a      	ldr	r2, [r7, #0]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d802      	bhi.n	8006c4c <HAL_SPI_Transmit+0x234>
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	d102      	bne.n	8006c52 <HAL_SPI_Transmit+0x23a>
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d108      	bne.n	8006c64 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 8006c52:	231f      	movs	r3, #31
 8006c54:	18fb      	adds	r3, r7, r3
 8006c56:	2203      	movs	r2, #3
 8006c58:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2251      	movs	r2, #81	@ 0x51
 8006c5e:	2101      	movs	r1, #1
 8006c60:	5499      	strb	r1, [r3, r2]
          goto error;
 8006c62:	e02b      	b.n	8006cbc <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1c8      	bne.n	8006c00 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c6e:	69ba      	ldr	r2, [r7, #24]
 8006c70:	6839      	ldr	r1, [r7, #0]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	0018      	movs	r0, r3
 8006c76:	f000 fa85 	bl	8007184 <SPI_EndRxTxTransaction>
 8006c7a:	1e03      	subs	r3, r0, #0
 8006c7c:	d002      	beq.n	8006c84 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2220      	movs	r2, #32
 8006c82:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10a      	bne.n	8006ca2 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	613b      	str	r3, [r7, #16]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	613b      	str	r3, [r7, #16]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	613b      	str	r3, [r7, #16]
 8006ca0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d004      	beq.n	8006cb4 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8006caa:	231f      	movs	r3, #31
 8006cac:	18fb      	adds	r3, r7, r3
 8006cae:	2201      	movs	r2, #1
 8006cb0:	701a      	strb	r2, [r3, #0]
 8006cb2:	e003      	b.n	8006cbc <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2251      	movs	r2, #81	@ 0x51
 8006cb8:	2101      	movs	r1, #1
 8006cba:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2250      	movs	r2, #80	@ 0x50
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006cc4:	231f      	movs	r3, #31
 8006cc6:	18fb      	adds	r3, r7, r3
 8006cc8:	781b      	ldrb	r3, [r3, #0]
}
 8006cca:	0018      	movs	r0, r3
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	b008      	add	sp, #32
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b08c      	sub	sp, #48	@ 0x30
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	60f8      	str	r0, [r7, #12]
 8006cda:	60b9      	str	r1, [r7, #8]
 8006cdc:	607a      	str	r2, [r7, #4]
 8006cde:	001a      	movs	r2, r3
 8006ce0:	1cbb      	adds	r3, r7, #2
 8006ce2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006ce8:	232b      	movs	r3, #43	@ 0x2b
 8006cea:	18fb      	adds	r3, r7, r3
 8006cec:	2200      	movs	r2, #0
 8006cee:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2250      	movs	r2, #80	@ 0x50
 8006cf4:	5c9b      	ldrb	r3, [r3, r2]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d101      	bne.n	8006cfe <HAL_SPI_TransmitReceive+0x2c>
 8006cfa:	2302      	movs	r3, #2
 8006cfc:	e1b0      	b.n	8007060 <HAL_SPI_TransmitReceive+0x38e>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2250      	movs	r2, #80	@ 0x50
 8006d02:	2101      	movs	r1, #1
 8006d04:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d06:	f7fd fda1 	bl	800484c <HAL_GetTick>
 8006d0a:	0003      	movs	r3, r0
 8006d0c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006d0e:	2023      	movs	r0, #35	@ 0x23
 8006d10:	183b      	adds	r3, r7, r0
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	2151      	movs	r1, #81	@ 0x51
 8006d16:	5c52      	ldrb	r2, [r2, r1]
 8006d18:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006d20:	231a      	movs	r3, #26
 8006d22:	18fb      	adds	r3, r7, r3
 8006d24:	1cba      	adds	r2, r7, #2
 8006d26:	8812      	ldrh	r2, [r2, #0]
 8006d28:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d2a:	183b      	adds	r3, r7, r0
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d011      	beq.n	8006d56 <HAL_SPI_TransmitReceive+0x84>
 8006d32:	69fa      	ldr	r2, [r7, #28]
 8006d34:	2382      	movs	r3, #130	@ 0x82
 8006d36:	005b      	lsls	r3, r3, #1
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d107      	bne.n	8006d4c <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d103      	bne.n	8006d4c <HAL_SPI_TransmitReceive+0x7a>
 8006d44:	183b      	adds	r3, r7, r0
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	2b04      	cmp	r3, #4
 8006d4a:	d004      	beq.n	8006d56 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8006d4c:	232b      	movs	r3, #43	@ 0x2b
 8006d4e:	18fb      	adds	r3, r7, r3
 8006d50:	2202      	movs	r2, #2
 8006d52:	701a      	strb	r2, [r3, #0]
    goto error;
 8006d54:	e17d      	b.n	8007052 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d006      	beq.n	8006d6a <HAL_SPI_TransmitReceive+0x98>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d003      	beq.n	8006d6a <HAL_SPI_TransmitReceive+0x98>
 8006d62:	1cbb      	adds	r3, r7, #2
 8006d64:	881b      	ldrh	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d104      	bne.n	8006d74 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006d6a:	232b      	movs	r3, #43	@ 0x2b
 8006d6c:	18fb      	adds	r3, r7, r3
 8006d6e:	2201      	movs	r2, #1
 8006d70:	701a      	strb	r2, [r3, #0]
    goto error;
 8006d72:	e16e      	b.n	8007052 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2251      	movs	r2, #81	@ 0x51
 8006d78:	5c9b      	ldrb	r3, [r3, r2]
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	2b04      	cmp	r3, #4
 8006d7e:	d003      	beq.n	8006d88 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2251      	movs	r2, #81	@ 0x51
 8006d84:	2105      	movs	r1, #5
 8006d86:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	1cba      	adds	r2, r7, #2
 8006d98:	8812      	ldrh	r2, [r2, #0]
 8006d9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	1cba      	adds	r2, r7, #2
 8006da0:	8812      	ldrh	r2, [r2, #0]
 8006da2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	68ba      	ldr	r2, [r7, #8]
 8006da8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	1cba      	adds	r2, r7, #2
 8006dae:	8812      	ldrh	r2, [r2, #0]
 8006db0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	1cba      	adds	r2, r7, #2
 8006db6:	8812      	ldrh	r2, [r2, #0]
 8006db8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2240      	movs	r2, #64	@ 0x40
 8006dce:	4013      	ands	r3, r2
 8006dd0:	2b40      	cmp	r3, #64	@ 0x40
 8006dd2:	d007      	beq.n	8006de4 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2140      	movs	r1, #64	@ 0x40
 8006de0:	430a      	orrs	r2, r1
 8006de2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	68da      	ldr	r2, [r3, #12]
 8006de8:	2380      	movs	r3, #128	@ 0x80
 8006dea:	011b      	lsls	r3, r3, #4
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d000      	beq.n	8006df2 <HAL_SPI_TransmitReceive+0x120>
 8006df0:	e07f      	b.n	8006ef2 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d005      	beq.n	8006e06 <HAL_SPI_TransmitReceive+0x134>
 8006dfa:	231a      	movs	r3, #26
 8006dfc:	18fb      	adds	r3, r7, r3
 8006dfe:	881b      	ldrh	r3, [r3, #0]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d000      	beq.n	8006e06 <HAL_SPI_TransmitReceive+0x134>
 8006e04:	e06a      	b.n	8006edc <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e0a:	881a      	ldrh	r2, [r3, #0]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e16:	1c9a      	adds	r2, r3, #2
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	3b01      	subs	r3, #1
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e2a:	e057      	b.n	8006edc <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	2202      	movs	r2, #2
 8006e34:	4013      	ands	r3, r2
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d11b      	bne.n	8006e72 <HAL_SPI_TransmitReceive+0x1a0>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d016      	beq.n	8006e72 <HAL_SPI_TransmitReceive+0x1a0>
 8006e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d113      	bne.n	8006e72 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e4e:	881a      	ldrh	r2, [r3, #0]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e5a:	1c9a      	adds	r2, r3, #2
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	3b01      	subs	r3, #1
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d119      	bne.n	8006eb4 <HAL_SPI_TransmitReceive+0x1e2>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d014      	beq.n	8006eb4 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68da      	ldr	r2, [r3, #12]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e94:	b292      	uxth	r2, r2
 8006e96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e9c:	1c9a      	adds	r2, r3, #2
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006eb4:	f7fd fcca 	bl	800484c <HAL_GetTick>
 8006eb8:	0002      	movs	r2, r0
 8006eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d80b      	bhi.n	8006edc <HAL_SPI_TransmitReceive+0x20a>
 8006ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	d008      	beq.n	8006edc <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8006eca:	232b      	movs	r3, #43	@ 0x2b
 8006ecc:	18fb      	adds	r3, r7, r3
 8006ece:	2203      	movs	r2, #3
 8006ed0:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2251      	movs	r2, #81	@ 0x51
 8006ed6:	2101      	movs	r1, #1
 8006ed8:	5499      	strb	r1, [r3, r2]
        goto error;
 8006eda:	e0ba      	b.n	8007052 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1a2      	bne.n	8006e2c <HAL_SPI_TransmitReceive+0x15a>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d19d      	bne.n	8006e2c <HAL_SPI_TransmitReceive+0x15a>
 8006ef0:	e083      	b.n	8006ffa <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d005      	beq.n	8006f06 <HAL_SPI_TransmitReceive+0x234>
 8006efa:	231a      	movs	r3, #26
 8006efc:	18fb      	adds	r3, r7, r3
 8006efe:	881b      	ldrh	r3, [r3, #0]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d000      	beq.n	8006f06 <HAL_SPI_TransmitReceive+0x234>
 8006f04:	e06f      	b.n	8006fe6 <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	330c      	adds	r3, #12
 8006f10:	7812      	ldrb	r2, [r2, #0]
 8006f12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f18:	1c5a      	adds	r2, r3, #1
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	3b01      	subs	r3, #1
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f2c:	e05b      	b.n	8006fe6 <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	2202      	movs	r2, #2
 8006f36:	4013      	ands	r3, r2
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d11c      	bne.n	8006f76 <HAL_SPI_TransmitReceive+0x2a4>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d017      	beq.n	8006f76 <HAL_SPI_TransmitReceive+0x2a4>
 8006f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d114      	bne.n	8006f76 <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	330c      	adds	r3, #12
 8006f56:	7812      	ldrb	r2, [r2, #0]
 8006f58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f5e:	1c5a      	adds	r2, r3, #1
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f72:	2300      	movs	r3, #0
 8006f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	4013      	ands	r3, r2
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d119      	bne.n	8006fb8 <HAL_SPI_TransmitReceive+0x2e6>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d014      	beq.n	8006fb8 <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68da      	ldr	r2, [r3, #12]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f98:	b2d2      	uxtb	r2, r2
 8006f9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa0:	1c5a      	adds	r2, r3, #1
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	3b01      	subs	r3, #1
 8006fae:	b29a      	uxth	r2, r3
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006fb8:	f7fd fc48 	bl	800484c <HAL_GetTick>
 8006fbc:	0002      	movs	r2, r0
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d802      	bhi.n	8006fce <HAL_SPI_TransmitReceive+0x2fc>
 8006fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fca:	3301      	adds	r3, #1
 8006fcc:	d102      	bne.n	8006fd4 <HAL_SPI_TransmitReceive+0x302>
 8006fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d108      	bne.n	8006fe6 <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 8006fd4:	232b      	movs	r3, #43	@ 0x2b
 8006fd6:	18fb      	adds	r3, r7, r3
 8006fd8:	2203      	movs	r2, #3
 8006fda:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2251      	movs	r2, #81	@ 0x51
 8006fe0:	2101      	movs	r1, #1
 8006fe2:	5499      	strb	r1, [r3, r2]
        goto error;
 8006fe4:	e035      	b.n	8007052 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d19e      	bne.n	8006f2e <HAL_SPI_TransmitReceive+0x25c>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d199      	bne.n	8006f2e <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ffc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	0018      	movs	r0, r3
 8007002:	f000 f8bf 	bl	8007184 <SPI_EndRxTxTransaction>
 8007006:	1e03      	subs	r3, r0, #0
 8007008:	d007      	beq.n	800701a <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 800700a:	232b      	movs	r3, #43	@ 0x2b
 800700c:	18fb      	adds	r3, r7, r3
 800700e:	2201      	movs	r2, #1
 8007010:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2220      	movs	r2, #32
 8007016:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8007018:	e01b      	b.n	8007052 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d10a      	bne.n	8007038 <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007022:	2300      	movs	r3, #0
 8007024:	617b      	str	r3, [r7, #20]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	617b      	str	r3, [r7, #20]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	617b      	str	r3, [r7, #20]
 8007036:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800703c:	2b00      	cmp	r3, #0
 800703e:	d004      	beq.n	800704a <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 8007040:	232b      	movs	r3, #43	@ 0x2b
 8007042:	18fb      	adds	r3, r7, r3
 8007044:	2201      	movs	r2, #1
 8007046:	701a      	strb	r2, [r3, #0]
 8007048:	e003      	b.n	8007052 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2251      	movs	r2, #81	@ 0x51
 800704e:	2101      	movs	r1, #1
 8007050:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2250      	movs	r2, #80	@ 0x50
 8007056:	2100      	movs	r1, #0
 8007058:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800705a:	232b      	movs	r3, #43	@ 0x2b
 800705c:	18fb      	adds	r3, r7, r3
 800705e:	781b      	ldrb	r3, [r3, #0]
}
 8007060:	0018      	movs	r0, r3
 8007062:	46bd      	mov	sp, r7
 8007064:	b00c      	add	sp, #48	@ 0x30
 8007066:	bd80      	pop	{r7, pc}

08007068 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b088      	sub	sp, #32
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	603b      	str	r3, [r7, #0]
 8007074:	1dfb      	adds	r3, r7, #7
 8007076:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007078:	f7fd fbe8 	bl	800484c <HAL_GetTick>
 800707c:	0002      	movs	r2, r0
 800707e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007080:	1a9b      	subs	r3, r3, r2
 8007082:	683a      	ldr	r2, [r7, #0]
 8007084:	18d3      	adds	r3, r2, r3
 8007086:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007088:	f7fd fbe0 	bl	800484c <HAL_GetTick>
 800708c:	0003      	movs	r3, r0
 800708e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007090:	4b3a      	ldr	r3, [pc, #232]	@ (800717c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	015b      	lsls	r3, r3, #5
 8007096:	0d1b      	lsrs	r3, r3, #20
 8007098:	69fa      	ldr	r2, [r7, #28]
 800709a:	4353      	muls	r3, r2
 800709c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800709e:	e058      	b.n	8007152 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	3301      	adds	r3, #1
 80070a4:	d055      	beq.n	8007152 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80070a6:	f7fd fbd1 	bl	800484c <HAL_GetTick>
 80070aa:	0002      	movs	r2, r0
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	69fa      	ldr	r2, [r7, #28]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d902      	bls.n	80070bc <SPI_WaitFlagStateUntilTimeout+0x54>
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d142      	bne.n	8007142 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	685a      	ldr	r2, [r3, #4]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	21e0      	movs	r1, #224	@ 0xe0
 80070c8:	438a      	bics	r2, r1
 80070ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	2382      	movs	r3, #130	@ 0x82
 80070d2:	005b      	lsls	r3, r3, #1
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d113      	bne.n	8007100 <SPI_WaitFlagStateUntilTimeout+0x98>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	689a      	ldr	r2, [r3, #8]
 80070dc:	2380      	movs	r3, #128	@ 0x80
 80070de:	021b      	lsls	r3, r3, #8
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d005      	beq.n	80070f0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	689a      	ldr	r2, [r3, #8]
 80070e8:	2380      	movs	r3, #128	@ 0x80
 80070ea:	00db      	lsls	r3, r3, #3
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d107      	bne.n	8007100 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2140      	movs	r1, #64	@ 0x40
 80070fc:	438a      	bics	r2, r1
 80070fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007104:	2380      	movs	r3, #128	@ 0x80
 8007106:	019b      	lsls	r3, r3, #6
 8007108:	429a      	cmp	r2, r3
 800710a:	d110      	bne.n	800712e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	491a      	ldr	r1, [pc, #104]	@ (8007180 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007118:	400a      	ands	r2, r1
 800711a:	601a      	str	r2, [r3, #0]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2180      	movs	r1, #128	@ 0x80
 8007128:	0189      	lsls	r1, r1, #6
 800712a:	430a      	orrs	r2, r1
 800712c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2251      	movs	r2, #81	@ 0x51
 8007132:	2101      	movs	r1, #1
 8007134:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2250      	movs	r2, #80	@ 0x50
 800713a:	2100      	movs	r1, #0
 800713c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e017      	b.n	8007172 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d101      	bne.n	800714c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007148:	2300      	movs	r3, #0
 800714a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	3b01      	subs	r3, #1
 8007150:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	4013      	ands	r3, r2
 800715c:	68ba      	ldr	r2, [r7, #8]
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	425a      	negs	r2, r3
 8007162:	4153      	adcs	r3, r2
 8007164:	b2db      	uxtb	r3, r3
 8007166:	001a      	movs	r2, r3
 8007168:	1dfb      	adds	r3, r7, #7
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	429a      	cmp	r2, r3
 800716e:	d197      	bne.n	80070a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	0018      	movs	r0, r3
 8007174:	46bd      	mov	sp, r7
 8007176:	b008      	add	sp, #32
 8007178:	bd80      	pop	{r7, pc}
 800717a:	46c0      	nop			@ (mov r8, r8)
 800717c:	20000000 	.word	0x20000000
 8007180:	ffffdfff 	.word	0xffffdfff

08007184 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b088      	sub	sp, #32
 8007188:	af02      	add	r7, sp, #8
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007190:	4b1d      	ldr	r3, [pc, #116]	@ (8007208 <SPI_EndRxTxTransaction+0x84>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	491d      	ldr	r1, [pc, #116]	@ (800720c <SPI_EndRxTxTransaction+0x88>)
 8007196:	0018      	movs	r0, r3
 8007198:	f7f8 ffd2 	bl	8000140 <__udivsi3>
 800719c:	0003      	movs	r3, r0
 800719e:	001a      	movs	r2, r3
 80071a0:	0013      	movs	r3, r2
 80071a2:	015b      	lsls	r3, r3, #5
 80071a4:	1a9b      	subs	r3, r3, r2
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	189b      	adds	r3, r3, r2
 80071aa:	00db      	lsls	r3, r3, #3
 80071ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	685a      	ldr	r2, [r3, #4]
 80071b2:	2382      	movs	r3, #130	@ 0x82
 80071b4:	005b      	lsls	r3, r3, #1
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d112      	bne.n	80071e0 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	9300      	str	r3, [sp, #0]
 80071c2:	0013      	movs	r3, r2
 80071c4:	2200      	movs	r2, #0
 80071c6:	2180      	movs	r1, #128	@ 0x80
 80071c8:	f7ff ff4e 	bl	8007068 <SPI_WaitFlagStateUntilTimeout>
 80071cc:	1e03      	subs	r3, r0, #0
 80071ce:	d016      	beq.n	80071fe <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071d4:	2220      	movs	r2, #32
 80071d6:	431a      	orrs	r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80071dc:	2303      	movs	r3, #3
 80071de:	e00f      	b.n	8007200 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00a      	beq.n	80071fc <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	3b01      	subs	r3, #1
 80071ea:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	2280      	movs	r2, #128	@ 0x80
 80071f4:	4013      	ands	r3, r2
 80071f6:	2b80      	cmp	r3, #128	@ 0x80
 80071f8:	d0f2      	beq.n	80071e0 <SPI_EndRxTxTransaction+0x5c>
 80071fa:	e000      	b.n	80071fe <SPI_EndRxTxTransaction+0x7a>
        break;
 80071fc:	46c0      	nop			@ (mov r8, r8)
  }

  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	0018      	movs	r0, r3
 8007202:	46bd      	mov	sp, r7
 8007204:	b006      	add	sp, #24
 8007206:	bd80      	pop	{r7, pc}
 8007208:	20000000 	.word	0x20000000
 800720c:	016e3600 	.word	0x016e3600

08007210 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d101      	bne.n	8007222 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e032      	b.n	8007288 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2239      	movs	r2, #57	@ 0x39
 8007226:	5c9b      	ldrb	r3, [r3, r2]
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b00      	cmp	r3, #0
 800722c:	d107      	bne.n	800723e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2238      	movs	r2, #56	@ 0x38
 8007232:	2100      	movs	r1, #0
 8007234:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	0018      	movs	r0, r3
 800723a:	f000 f829 	bl	8007290 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2239      	movs	r2, #57	@ 0x39
 8007242:	2102      	movs	r1, #2
 8007244:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	3304      	adds	r3, #4
 800724e:	0019      	movs	r1, r3
 8007250:	0010      	movs	r0, r2
 8007252:	f000 f97f 	bl	8007554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	223e      	movs	r2, #62	@ 0x3e
 800725a:	2101      	movs	r1, #1
 800725c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	223a      	movs	r2, #58	@ 0x3a
 8007262:	2101      	movs	r1, #1
 8007264:	5499      	strb	r1, [r3, r2]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	223b      	movs	r2, #59	@ 0x3b
 800726a:	2101      	movs	r1, #1
 800726c:	5499      	strb	r1, [r3, r2]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	223c      	movs	r2, #60	@ 0x3c
 8007272:	2101      	movs	r1, #1
 8007274:	5499      	strb	r1, [r3, r2]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	223d      	movs	r2, #61	@ 0x3d
 800727a:	2101      	movs	r1, #1
 800727c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2239      	movs	r2, #57	@ 0x39
 8007282:	2101      	movs	r1, #1
 8007284:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	0018      	movs	r0, r3
 800728a:	46bd      	mov	sp, r7
 800728c:	b002      	add	sp, #8
 800728e:	bd80      	pop	{r7, pc}

08007290 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007298:	46c0      	nop			@ (mov r8, r8)
 800729a:	46bd      	mov	sp, r7
 800729c:	b002      	add	sp, #8
 800729e:	bd80      	pop	{r7, pc}

080072a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2239      	movs	r2, #57	@ 0x39
 80072ac:	5c9b      	ldrb	r3, [r3, r2]
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d001      	beq.n	80072b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e03b      	b.n	8007330 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2239      	movs	r2, #57	@ 0x39
 80072bc:	2102      	movs	r1, #2
 80072be:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68da      	ldr	r2, [r3, #12]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2101      	movs	r1, #1
 80072cc:	430a      	orrs	r2, r1
 80072ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	2380      	movs	r3, #128	@ 0x80
 80072d6:	05db      	lsls	r3, r3, #23
 80072d8:	429a      	cmp	r2, r3
 80072da:	d00e      	beq.n	80072fa <HAL_TIM_Base_Start_IT+0x5a>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a15      	ldr	r2, [pc, #84]	@ (8007338 <HAL_TIM_Base_Start_IT+0x98>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d009      	beq.n	80072fa <HAL_TIM_Base_Start_IT+0x5a>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a14      	ldr	r2, [pc, #80]	@ (800733c <HAL_TIM_Base_Start_IT+0x9c>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d004      	beq.n	80072fa <HAL_TIM_Base_Start_IT+0x5a>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a12      	ldr	r2, [pc, #72]	@ (8007340 <HAL_TIM_Base_Start_IT+0xa0>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d111      	bne.n	800731e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	2207      	movs	r2, #7
 8007302:	4013      	ands	r3, r2
 8007304:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2b06      	cmp	r3, #6
 800730a:	d010      	beq.n	800732e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2101      	movs	r1, #1
 8007318:	430a      	orrs	r2, r1
 800731a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800731c:	e007      	b.n	800732e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2101      	movs	r1, #1
 800732a:	430a      	orrs	r2, r1
 800732c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	0018      	movs	r0, r3
 8007332:	46bd      	mov	sp, r7
 8007334:	b004      	add	sp, #16
 8007336:	bd80      	pop	{r7, pc}
 8007338:	40000400 	.word	0x40000400
 800733c:	40010800 	.word	0x40010800
 8007340:	40011400 	.word	0x40011400

08007344 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	2202      	movs	r2, #2
 8007354:	4013      	ands	r3, r2
 8007356:	2b02      	cmp	r3, #2
 8007358:	d124      	bne.n	80073a4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	2202      	movs	r2, #2
 8007362:	4013      	ands	r3, r2
 8007364:	2b02      	cmp	r3, #2
 8007366:	d11d      	bne.n	80073a4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2203      	movs	r2, #3
 800736e:	4252      	negs	r2, r2
 8007370:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	2203      	movs	r2, #3
 8007380:	4013      	ands	r3, r2
 8007382:	d004      	beq.n	800738e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	0018      	movs	r0, r3
 8007388:	f000 f8cc 	bl	8007524 <HAL_TIM_IC_CaptureCallback>
 800738c:	e007      	b.n	800739e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	0018      	movs	r0, r3
 8007392:	f000 f8bf 	bl	8007514 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	0018      	movs	r0, r3
 800739a:	f000 f8cb 	bl	8007534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	2204      	movs	r2, #4
 80073ac:	4013      	ands	r3, r2
 80073ae:	2b04      	cmp	r3, #4
 80073b0:	d125      	bne.n	80073fe <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	2204      	movs	r2, #4
 80073ba:	4013      	ands	r3, r2
 80073bc:	2b04      	cmp	r3, #4
 80073be:	d11e      	bne.n	80073fe <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2205      	movs	r2, #5
 80073c6:	4252      	negs	r2, r2
 80073c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2202      	movs	r2, #2
 80073ce:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	699a      	ldr	r2, [r3, #24]
 80073d6:	23c0      	movs	r3, #192	@ 0xc0
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	4013      	ands	r3, r2
 80073dc:	d004      	beq.n	80073e8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	0018      	movs	r0, r3
 80073e2:	f000 f89f 	bl	8007524 <HAL_TIM_IC_CaptureCallback>
 80073e6:	e007      	b.n	80073f8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	0018      	movs	r0, r3
 80073ec:	f000 f892 	bl	8007514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	0018      	movs	r0, r3
 80073f4:	f000 f89e 	bl	8007534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	2208      	movs	r2, #8
 8007406:	4013      	ands	r3, r2
 8007408:	2b08      	cmp	r3, #8
 800740a:	d124      	bne.n	8007456 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	2208      	movs	r2, #8
 8007414:	4013      	ands	r3, r2
 8007416:	2b08      	cmp	r3, #8
 8007418:	d11d      	bne.n	8007456 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2209      	movs	r2, #9
 8007420:	4252      	negs	r2, r2
 8007422:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2204      	movs	r2, #4
 8007428:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	69db      	ldr	r3, [r3, #28]
 8007430:	2203      	movs	r2, #3
 8007432:	4013      	ands	r3, r2
 8007434:	d004      	beq.n	8007440 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	0018      	movs	r0, r3
 800743a:	f000 f873 	bl	8007524 <HAL_TIM_IC_CaptureCallback>
 800743e:	e007      	b.n	8007450 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	0018      	movs	r0, r3
 8007444:	f000 f866 	bl	8007514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	0018      	movs	r0, r3
 800744c:	f000 f872 	bl	8007534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	2210      	movs	r2, #16
 800745e:	4013      	ands	r3, r2
 8007460:	2b10      	cmp	r3, #16
 8007462:	d125      	bne.n	80074b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	2210      	movs	r2, #16
 800746c:	4013      	ands	r3, r2
 800746e:	2b10      	cmp	r3, #16
 8007470:	d11e      	bne.n	80074b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2211      	movs	r2, #17
 8007478:	4252      	negs	r2, r2
 800747a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2208      	movs	r2, #8
 8007480:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	69da      	ldr	r2, [r3, #28]
 8007488:	23c0      	movs	r3, #192	@ 0xc0
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4013      	ands	r3, r2
 800748e:	d004      	beq.n	800749a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	0018      	movs	r0, r3
 8007494:	f000 f846 	bl	8007524 <HAL_TIM_IC_CaptureCallback>
 8007498:	e007      	b.n	80074aa <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	0018      	movs	r0, r3
 800749e:	f000 f839 	bl	8007514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	0018      	movs	r0, r3
 80074a6:	f000 f845 	bl	8007534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	2201      	movs	r2, #1
 80074b8:	4013      	ands	r3, r2
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d10f      	bne.n	80074de <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	2201      	movs	r2, #1
 80074c6:	4013      	ands	r3, r2
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d108      	bne.n	80074de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2202      	movs	r2, #2
 80074d2:	4252      	negs	r2, r2
 80074d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	0018      	movs	r0, r3
 80074da:	f7fc f9dd 	bl	8003898 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	2240      	movs	r2, #64	@ 0x40
 80074e6:	4013      	ands	r3, r2
 80074e8:	2b40      	cmp	r3, #64	@ 0x40
 80074ea:	d10f      	bne.n	800750c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	2240      	movs	r2, #64	@ 0x40
 80074f4:	4013      	ands	r3, r2
 80074f6:	2b40      	cmp	r3, #64	@ 0x40
 80074f8:	d108      	bne.n	800750c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2241      	movs	r2, #65	@ 0x41
 8007500:	4252      	negs	r2, r2
 8007502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	0018      	movs	r0, r3
 8007508:	f000 f81c 	bl	8007544 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800750c:	46c0      	nop			@ (mov r8, r8)
 800750e:	46bd      	mov	sp, r7
 8007510:	b002      	add	sp, #8
 8007512:	bd80      	pop	{r7, pc}

08007514 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800751c:	46c0      	nop			@ (mov r8, r8)
 800751e:	46bd      	mov	sp, r7
 8007520:	b002      	add	sp, #8
 8007522:	bd80      	pop	{r7, pc}

08007524 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800752c:	46c0      	nop			@ (mov r8, r8)
 800752e:	46bd      	mov	sp, r7
 8007530:	b002      	add	sp, #8
 8007532:	bd80      	pop	{r7, pc}

08007534 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800753c:	46c0      	nop			@ (mov r8, r8)
 800753e:	46bd      	mov	sp, r7
 8007540:	b002      	add	sp, #8
 8007542:	bd80      	pop	{r7, pc}

08007544 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800754c:	46c0      	nop			@ (mov r8, r8)
 800754e:	46bd      	mov	sp, r7
 8007550:	b002      	add	sp, #8
 8007552:	bd80      	pop	{r7, pc}

08007554 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	2380      	movs	r3, #128	@ 0x80
 8007568:	05db      	lsls	r3, r3, #23
 800756a:	429a      	cmp	r2, r3
 800756c:	d00b      	beq.n	8007586 <TIM_Base_SetConfig+0x32>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a23      	ldr	r2, [pc, #140]	@ (8007600 <TIM_Base_SetConfig+0xac>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d007      	beq.n	8007586 <TIM_Base_SetConfig+0x32>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a22      	ldr	r2, [pc, #136]	@ (8007604 <TIM_Base_SetConfig+0xb0>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d003      	beq.n	8007586 <TIM_Base_SetConfig+0x32>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a21      	ldr	r2, [pc, #132]	@ (8007608 <TIM_Base_SetConfig+0xb4>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d108      	bne.n	8007598 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2270      	movs	r2, #112	@ 0x70
 800758a:	4393      	bics	r3, r2
 800758c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	4313      	orrs	r3, r2
 8007596:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	2380      	movs	r3, #128	@ 0x80
 800759c:	05db      	lsls	r3, r3, #23
 800759e:	429a      	cmp	r2, r3
 80075a0:	d00b      	beq.n	80075ba <TIM_Base_SetConfig+0x66>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a16      	ldr	r2, [pc, #88]	@ (8007600 <TIM_Base_SetConfig+0xac>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d007      	beq.n	80075ba <TIM_Base_SetConfig+0x66>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a15      	ldr	r2, [pc, #84]	@ (8007604 <TIM_Base_SetConfig+0xb0>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d003      	beq.n	80075ba <TIM_Base_SetConfig+0x66>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a14      	ldr	r2, [pc, #80]	@ (8007608 <TIM_Base_SetConfig+0xb4>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d108      	bne.n	80075cc <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	4a13      	ldr	r2, [pc, #76]	@ (800760c <TIM_Base_SetConfig+0xb8>)
 80075be:	4013      	ands	r3, r2
 80075c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2280      	movs	r2, #128	@ 0x80
 80075d0:	4393      	bics	r3, r2
 80075d2:	001a      	movs	r2, r3
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	4313      	orrs	r3, r2
 80075da:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	689a      	ldr	r2, [r3, #8]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2201      	movs	r2, #1
 80075f6:	615a      	str	r2, [r3, #20]
}
 80075f8:	46c0      	nop			@ (mov r8, r8)
 80075fa:	46bd      	mov	sp, r7
 80075fc:	b004      	add	sp, #16
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	40000400 	.word	0x40000400
 8007604:	40010800 	.word	0x40010800
 8007608:	40011400 	.word	0x40011400
 800760c:	fffffcff 	.word	0xfffffcff

08007610 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d101      	bne.n	8007622 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e044      	b.n	80076ac <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007626:	2b00      	cmp	r3, #0
 8007628:	d107      	bne.n	800763a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2278      	movs	r2, #120	@ 0x78
 800762e:	2100      	movs	r1, #0
 8007630:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	0018      	movs	r0, r3
 8007636:	f7fc ff15 	bl	8004464 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2224      	movs	r2, #36	@ 0x24
 800763e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2101      	movs	r1, #1
 800764c:	438a      	bics	r2, r1
 800764e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	0018      	movs	r0, r3
 8007654:	f000 f8d0 	bl	80077f8 <UART_SetConfig>
 8007658:	0003      	movs	r3, r0
 800765a:	2b01      	cmp	r3, #1
 800765c:	d101      	bne.n	8007662 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e024      	b.n	80076ac <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007666:	2b00      	cmp	r3, #0
 8007668:	d003      	beq.n	8007672 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	0018      	movs	r0, r3
 800766e:	f000 fb61 	bl	8007d34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	685a      	ldr	r2, [r3, #4]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	490d      	ldr	r1, [pc, #52]	@ (80076b4 <HAL_UART_Init+0xa4>)
 800767e:	400a      	ands	r2, r1
 8007680:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	689a      	ldr	r2, [r3, #8]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	212a      	movs	r1, #42	@ 0x2a
 800768e:	438a      	bics	r2, r1
 8007690:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2101      	movs	r1, #1
 800769e:	430a      	orrs	r2, r1
 80076a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	0018      	movs	r0, r3
 80076a6:	f000 fbf9 	bl	8007e9c <UART_CheckIdleState>
 80076aa:	0003      	movs	r3, r0
}
 80076ac:	0018      	movs	r0, r3
 80076ae:	46bd      	mov	sp, r7
 80076b0:	b002      	add	sp, #8
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	ffffb7ff 	.word	0xffffb7ff

080076b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b08a      	sub	sp, #40	@ 0x28
 80076bc:	af02      	add	r7, sp, #8
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	603b      	str	r3, [r7, #0]
 80076c4:	1dbb      	adds	r3, r7, #6
 80076c6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80076cc:	2b20      	cmp	r3, #32
 80076ce:	d000      	beq.n	80076d2 <HAL_UART_Transmit+0x1a>
 80076d0:	e08c      	b.n	80077ec <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d003      	beq.n	80076e0 <HAL_UART_Transmit+0x28>
 80076d8:	1dbb      	adds	r3, r7, #6
 80076da:	881b      	ldrh	r3, [r3, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d101      	bne.n	80076e4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e084      	b.n	80077ee <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	689a      	ldr	r2, [r3, #8]
 80076e8:	2380      	movs	r3, #128	@ 0x80
 80076ea:	015b      	lsls	r3, r3, #5
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d109      	bne.n	8007704 <HAL_UART_Transmit+0x4c>
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	691b      	ldr	r3, [r3, #16]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d105      	bne.n	8007704 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	2201      	movs	r2, #1
 80076fc:	4013      	ands	r3, r2
 80076fe:	d001      	beq.n	8007704 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e074      	b.n	80077ee <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2284      	movs	r2, #132	@ 0x84
 8007708:	2100      	movs	r1, #0
 800770a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2221      	movs	r2, #33	@ 0x21
 8007710:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007712:	f7fd f89b 	bl	800484c <HAL_GetTick>
 8007716:	0003      	movs	r3, r0
 8007718:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	1dba      	adds	r2, r7, #6
 800771e:	2150      	movs	r1, #80	@ 0x50
 8007720:	8812      	ldrh	r2, [r2, #0]
 8007722:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	1dba      	adds	r2, r7, #6
 8007728:	2152      	movs	r1, #82	@ 0x52
 800772a:	8812      	ldrh	r2, [r2, #0]
 800772c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	689a      	ldr	r2, [r3, #8]
 8007732:	2380      	movs	r3, #128	@ 0x80
 8007734:	015b      	lsls	r3, r3, #5
 8007736:	429a      	cmp	r2, r3
 8007738:	d108      	bne.n	800774c <HAL_UART_Transmit+0x94>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d104      	bne.n	800774c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8007742:	2300      	movs	r3, #0
 8007744:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	61bb      	str	r3, [r7, #24]
 800774a:	e003      	b.n	8007754 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007750:	2300      	movs	r3, #0
 8007752:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007754:	e02f      	b.n	80077b6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	9300      	str	r3, [sp, #0]
 800775e:	0013      	movs	r3, r2
 8007760:	2200      	movs	r2, #0
 8007762:	2180      	movs	r1, #128	@ 0x80
 8007764:	f000 fc42 	bl	8007fec <UART_WaitOnFlagUntilTimeout>
 8007768:	1e03      	subs	r3, r0, #0
 800776a:	d004      	beq.n	8007776 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2220      	movs	r2, #32
 8007770:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e03b      	b.n	80077ee <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d10b      	bne.n	8007794 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	881b      	ldrh	r3, [r3, #0]
 8007780:	001a      	movs	r2, r3
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	05d2      	lsls	r2, r2, #23
 8007788:	0dd2      	lsrs	r2, r2, #23
 800778a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	3302      	adds	r3, #2
 8007790:	61bb      	str	r3, [r7, #24]
 8007792:	e007      	b.n	80077a4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	781a      	ldrb	r2, [r3, #0]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	3301      	adds	r3, #1
 80077a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2252      	movs	r2, #82	@ 0x52
 80077a8:	5a9b      	ldrh	r3, [r3, r2]
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	3b01      	subs	r3, #1
 80077ae:	b299      	uxth	r1, r3
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2252      	movs	r2, #82	@ 0x52
 80077b4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2252      	movs	r2, #82	@ 0x52
 80077ba:	5a9b      	ldrh	r3, [r3, r2]
 80077bc:	b29b      	uxth	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1c9      	bne.n	8007756 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077c2:	697a      	ldr	r2, [r7, #20]
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	9300      	str	r3, [sp, #0]
 80077ca:	0013      	movs	r3, r2
 80077cc:	2200      	movs	r2, #0
 80077ce:	2140      	movs	r1, #64	@ 0x40
 80077d0:	f000 fc0c 	bl	8007fec <UART_WaitOnFlagUntilTimeout>
 80077d4:	1e03      	subs	r3, r0, #0
 80077d6:	d004      	beq.n	80077e2 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2220      	movs	r2, #32
 80077dc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80077de:	2303      	movs	r3, #3
 80077e0:	e005      	b.n	80077ee <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2220      	movs	r2, #32
 80077e6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80077e8:	2300      	movs	r3, #0
 80077ea:	e000      	b.n	80077ee <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80077ec:	2302      	movs	r3, #2
  }
}
 80077ee:	0018      	movs	r0, r3
 80077f0:	46bd      	mov	sp, r7
 80077f2:	b008      	add	sp, #32
 80077f4:	bd80      	pop	{r7, pc}
	...

080077f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077f8:	b5b0      	push	{r4, r5, r7, lr}
 80077fa:	b08e      	sub	sp, #56	@ 0x38
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007800:	231a      	movs	r3, #26
 8007802:	2218      	movs	r2, #24
 8007804:	189b      	adds	r3, r3, r2
 8007806:	19db      	adds	r3, r3, r7
 8007808:	2200      	movs	r2, #0
 800780a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	689a      	ldr	r2, [r3, #8]
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	431a      	orrs	r2, r3
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	695b      	ldr	r3, [r3, #20]
 800781a:	431a      	orrs	r2, r3
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	69db      	ldr	r3, [r3, #28]
 8007820:	4313      	orrs	r3, r2
 8007822:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4ac3      	ldr	r2, [pc, #780]	@ (8007b38 <UART_SetConfig+0x340>)
 800782c:	4013      	ands	r3, r2
 800782e:	0019      	movs	r1, r3
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007836:	430a      	orrs	r2, r1
 8007838:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	4abe      	ldr	r2, [pc, #760]	@ (8007b3c <UART_SetConfig+0x344>)
 8007842:	4013      	ands	r3, r2
 8007844:	0019      	movs	r1, r3
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	68da      	ldr	r2, [r3, #12]
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	430a      	orrs	r2, r1
 8007850:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	699b      	ldr	r3, [r3, #24]
 8007856:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4ab8      	ldr	r2, [pc, #736]	@ (8007b40 <UART_SetConfig+0x348>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d004      	beq.n	800786c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	6a1b      	ldr	r3, [r3, #32]
 8007866:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007868:	4313      	orrs	r3, r2
 800786a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	4ab4      	ldr	r2, [pc, #720]	@ (8007b44 <UART_SetConfig+0x34c>)
 8007874:	4013      	ands	r3, r2
 8007876:	0019      	movs	r1, r3
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800787e:	430a      	orrs	r2, r1
 8007880:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4ab0      	ldr	r2, [pc, #704]	@ (8007b48 <UART_SetConfig+0x350>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d131      	bne.n	80078f0 <UART_SetConfig+0xf8>
 800788c:	4baf      	ldr	r3, [pc, #700]	@ (8007b4c <UART_SetConfig+0x354>)
 800788e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007890:	2203      	movs	r2, #3
 8007892:	4013      	ands	r3, r2
 8007894:	2b03      	cmp	r3, #3
 8007896:	d01d      	beq.n	80078d4 <UART_SetConfig+0xdc>
 8007898:	d823      	bhi.n	80078e2 <UART_SetConfig+0xea>
 800789a:	2b02      	cmp	r3, #2
 800789c:	d00c      	beq.n	80078b8 <UART_SetConfig+0xc0>
 800789e:	d820      	bhi.n	80078e2 <UART_SetConfig+0xea>
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d002      	beq.n	80078aa <UART_SetConfig+0xb2>
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d00e      	beq.n	80078c6 <UART_SetConfig+0xce>
 80078a8:	e01b      	b.n	80078e2 <UART_SetConfig+0xea>
 80078aa:	231b      	movs	r3, #27
 80078ac:	2218      	movs	r2, #24
 80078ae:	189b      	adds	r3, r3, r2
 80078b0:	19db      	adds	r3, r3, r7
 80078b2:	2201      	movs	r2, #1
 80078b4:	701a      	strb	r2, [r3, #0]
 80078b6:	e0b4      	b.n	8007a22 <UART_SetConfig+0x22a>
 80078b8:	231b      	movs	r3, #27
 80078ba:	2218      	movs	r2, #24
 80078bc:	189b      	adds	r3, r3, r2
 80078be:	19db      	adds	r3, r3, r7
 80078c0:	2202      	movs	r2, #2
 80078c2:	701a      	strb	r2, [r3, #0]
 80078c4:	e0ad      	b.n	8007a22 <UART_SetConfig+0x22a>
 80078c6:	231b      	movs	r3, #27
 80078c8:	2218      	movs	r2, #24
 80078ca:	189b      	adds	r3, r3, r2
 80078cc:	19db      	adds	r3, r3, r7
 80078ce:	2204      	movs	r2, #4
 80078d0:	701a      	strb	r2, [r3, #0]
 80078d2:	e0a6      	b.n	8007a22 <UART_SetConfig+0x22a>
 80078d4:	231b      	movs	r3, #27
 80078d6:	2218      	movs	r2, #24
 80078d8:	189b      	adds	r3, r3, r2
 80078da:	19db      	adds	r3, r3, r7
 80078dc:	2208      	movs	r2, #8
 80078de:	701a      	strb	r2, [r3, #0]
 80078e0:	e09f      	b.n	8007a22 <UART_SetConfig+0x22a>
 80078e2:	231b      	movs	r3, #27
 80078e4:	2218      	movs	r2, #24
 80078e6:	189b      	adds	r3, r3, r2
 80078e8:	19db      	adds	r3, r3, r7
 80078ea:	2210      	movs	r2, #16
 80078ec:	701a      	strb	r2, [r3, #0]
 80078ee:	e098      	b.n	8007a22 <UART_SetConfig+0x22a>
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a96      	ldr	r2, [pc, #600]	@ (8007b50 <UART_SetConfig+0x358>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d131      	bne.n	800795e <UART_SetConfig+0x166>
 80078fa:	4b94      	ldr	r3, [pc, #592]	@ (8007b4c <UART_SetConfig+0x354>)
 80078fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078fe:	220c      	movs	r2, #12
 8007900:	4013      	ands	r3, r2
 8007902:	2b0c      	cmp	r3, #12
 8007904:	d01d      	beq.n	8007942 <UART_SetConfig+0x14a>
 8007906:	d823      	bhi.n	8007950 <UART_SetConfig+0x158>
 8007908:	2b08      	cmp	r3, #8
 800790a:	d00c      	beq.n	8007926 <UART_SetConfig+0x12e>
 800790c:	d820      	bhi.n	8007950 <UART_SetConfig+0x158>
 800790e:	2b00      	cmp	r3, #0
 8007910:	d002      	beq.n	8007918 <UART_SetConfig+0x120>
 8007912:	2b04      	cmp	r3, #4
 8007914:	d00e      	beq.n	8007934 <UART_SetConfig+0x13c>
 8007916:	e01b      	b.n	8007950 <UART_SetConfig+0x158>
 8007918:	231b      	movs	r3, #27
 800791a:	2218      	movs	r2, #24
 800791c:	189b      	adds	r3, r3, r2
 800791e:	19db      	adds	r3, r3, r7
 8007920:	2200      	movs	r2, #0
 8007922:	701a      	strb	r2, [r3, #0]
 8007924:	e07d      	b.n	8007a22 <UART_SetConfig+0x22a>
 8007926:	231b      	movs	r3, #27
 8007928:	2218      	movs	r2, #24
 800792a:	189b      	adds	r3, r3, r2
 800792c:	19db      	adds	r3, r3, r7
 800792e:	2202      	movs	r2, #2
 8007930:	701a      	strb	r2, [r3, #0]
 8007932:	e076      	b.n	8007a22 <UART_SetConfig+0x22a>
 8007934:	231b      	movs	r3, #27
 8007936:	2218      	movs	r2, #24
 8007938:	189b      	adds	r3, r3, r2
 800793a:	19db      	adds	r3, r3, r7
 800793c:	2204      	movs	r2, #4
 800793e:	701a      	strb	r2, [r3, #0]
 8007940:	e06f      	b.n	8007a22 <UART_SetConfig+0x22a>
 8007942:	231b      	movs	r3, #27
 8007944:	2218      	movs	r2, #24
 8007946:	189b      	adds	r3, r3, r2
 8007948:	19db      	adds	r3, r3, r7
 800794a:	2208      	movs	r2, #8
 800794c:	701a      	strb	r2, [r3, #0]
 800794e:	e068      	b.n	8007a22 <UART_SetConfig+0x22a>
 8007950:	231b      	movs	r3, #27
 8007952:	2218      	movs	r2, #24
 8007954:	189b      	adds	r3, r3, r2
 8007956:	19db      	adds	r3, r3, r7
 8007958:	2210      	movs	r2, #16
 800795a:	701a      	strb	r2, [r3, #0]
 800795c:	e061      	b.n	8007a22 <UART_SetConfig+0x22a>
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a7c      	ldr	r2, [pc, #496]	@ (8007b54 <UART_SetConfig+0x35c>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d106      	bne.n	8007976 <UART_SetConfig+0x17e>
 8007968:	231b      	movs	r3, #27
 800796a:	2218      	movs	r2, #24
 800796c:	189b      	adds	r3, r3, r2
 800796e:	19db      	adds	r3, r3, r7
 8007970:	2200      	movs	r2, #0
 8007972:	701a      	strb	r2, [r3, #0]
 8007974:	e055      	b.n	8007a22 <UART_SetConfig+0x22a>
 8007976:	69fb      	ldr	r3, [r7, #28]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a77      	ldr	r2, [pc, #476]	@ (8007b58 <UART_SetConfig+0x360>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d106      	bne.n	800798e <UART_SetConfig+0x196>
 8007980:	231b      	movs	r3, #27
 8007982:	2218      	movs	r2, #24
 8007984:	189b      	adds	r3, r3, r2
 8007986:	19db      	adds	r3, r3, r7
 8007988:	2200      	movs	r2, #0
 800798a:	701a      	strb	r2, [r3, #0]
 800798c:	e049      	b.n	8007a22 <UART_SetConfig+0x22a>
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a6b      	ldr	r2, [pc, #428]	@ (8007b40 <UART_SetConfig+0x348>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d13e      	bne.n	8007a16 <UART_SetConfig+0x21e>
 8007998:	4b6c      	ldr	r3, [pc, #432]	@ (8007b4c <UART_SetConfig+0x354>)
 800799a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800799c:	23c0      	movs	r3, #192	@ 0xc0
 800799e:	011b      	lsls	r3, r3, #4
 80079a0:	4013      	ands	r3, r2
 80079a2:	22c0      	movs	r2, #192	@ 0xc0
 80079a4:	0112      	lsls	r2, r2, #4
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d027      	beq.n	80079fa <UART_SetConfig+0x202>
 80079aa:	22c0      	movs	r2, #192	@ 0xc0
 80079ac:	0112      	lsls	r2, r2, #4
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d82a      	bhi.n	8007a08 <UART_SetConfig+0x210>
 80079b2:	2280      	movs	r2, #128	@ 0x80
 80079b4:	0112      	lsls	r2, r2, #4
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d011      	beq.n	80079de <UART_SetConfig+0x1e6>
 80079ba:	2280      	movs	r2, #128	@ 0x80
 80079bc:	0112      	lsls	r2, r2, #4
 80079be:	4293      	cmp	r3, r2
 80079c0:	d822      	bhi.n	8007a08 <UART_SetConfig+0x210>
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d004      	beq.n	80079d0 <UART_SetConfig+0x1d8>
 80079c6:	2280      	movs	r2, #128	@ 0x80
 80079c8:	00d2      	lsls	r2, r2, #3
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d00e      	beq.n	80079ec <UART_SetConfig+0x1f4>
 80079ce:	e01b      	b.n	8007a08 <UART_SetConfig+0x210>
 80079d0:	231b      	movs	r3, #27
 80079d2:	2218      	movs	r2, #24
 80079d4:	189b      	adds	r3, r3, r2
 80079d6:	19db      	adds	r3, r3, r7
 80079d8:	2200      	movs	r2, #0
 80079da:	701a      	strb	r2, [r3, #0]
 80079dc:	e021      	b.n	8007a22 <UART_SetConfig+0x22a>
 80079de:	231b      	movs	r3, #27
 80079e0:	2218      	movs	r2, #24
 80079e2:	189b      	adds	r3, r3, r2
 80079e4:	19db      	adds	r3, r3, r7
 80079e6:	2202      	movs	r2, #2
 80079e8:	701a      	strb	r2, [r3, #0]
 80079ea:	e01a      	b.n	8007a22 <UART_SetConfig+0x22a>
 80079ec:	231b      	movs	r3, #27
 80079ee:	2218      	movs	r2, #24
 80079f0:	189b      	adds	r3, r3, r2
 80079f2:	19db      	adds	r3, r3, r7
 80079f4:	2204      	movs	r2, #4
 80079f6:	701a      	strb	r2, [r3, #0]
 80079f8:	e013      	b.n	8007a22 <UART_SetConfig+0x22a>
 80079fa:	231b      	movs	r3, #27
 80079fc:	2218      	movs	r2, #24
 80079fe:	189b      	adds	r3, r3, r2
 8007a00:	19db      	adds	r3, r3, r7
 8007a02:	2208      	movs	r2, #8
 8007a04:	701a      	strb	r2, [r3, #0]
 8007a06:	e00c      	b.n	8007a22 <UART_SetConfig+0x22a>
 8007a08:	231b      	movs	r3, #27
 8007a0a:	2218      	movs	r2, #24
 8007a0c:	189b      	adds	r3, r3, r2
 8007a0e:	19db      	adds	r3, r3, r7
 8007a10:	2210      	movs	r2, #16
 8007a12:	701a      	strb	r2, [r3, #0]
 8007a14:	e005      	b.n	8007a22 <UART_SetConfig+0x22a>
 8007a16:	231b      	movs	r3, #27
 8007a18:	2218      	movs	r2, #24
 8007a1a:	189b      	adds	r3, r3, r2
 8007a1c:	19db      	adds	r3, r3, r7
 8007a1e:	2210      	movs	r2, #16
 8007a20:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a46      	ldr	r2, [pc, #280]	@ (8007b40 <UART_SetConfig+0x348>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d000      	beq.n	8007a2e <UART_SetConfig+0x236>
 8007a2c:	e09a      	b.n	8007b64 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a2e:	231b      	movs	r3, #27
 8007a30:	2218      	movs	r2, #24
 8007a32:	189b      	adds	r3, r3, r2
 8007a34:	19db      	adds	r3, r3, r7
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	2b08      	cmp	r3, #8
 8007a3a:	d01d      	beq.n	8007a78 <UART_SetConfig+0x280>
 8007a3c:	dc20      	bgt.n	8007a80 <UART_SetConfig+0x288>
 8007a3e:	2b04      	cmp	r3, #4
 8007a40:	d015      	beq.n	8007a6e <UART_SetConfig+0x276>
 8007a42:	dc1d      	bgt.n	8007a80 <UART_SetConfig+0x288>
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d002      	beq.n	8007a4e <UART_SetConfig+0x256>
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d005      	beq.n	8007a58 <UART_SetConfig+0x260>
 8007a4c:	e018      	b.n	8007a80 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a4e:	f7fe fd53 	bl	80064f8 <HAL_RCC_GetPCLK1Freq>
 8007a52:	0003      	movs	r3, r0
 8007a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007a56:	e01c      	b.n	8007a92 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a58:	4b3c      	ldr	r3, [pc, #240]	@ (8007b4c <UART_SetConfig+0x354>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2210      	movs	r2, #16
 8007a5e:	4013      	ands	r3, r2
 8007a60:	d002      	beq.n	8007a68 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007a62:	4b3e      	ldr	r3, [pc, #248]	@ (8007b5c <UART_SetConfig+0x364>)
 8007a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a66:	e014      	b.n	8007a92 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8007a68:	4b3d      	ldr	r3, [pc, #244]	@ (8007b60 <UART_SetConfig+0x368>)
 8007a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007a6c:	e011      	b.n	8007a92 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a6e:	f7fe fc93 	bl	8006398 <HAL_RCC_GetSysClockFreq>
 8007a72:	0003      	movs	r3, r0
 8007a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007a76:	e00c      	b.n	8007a92 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a78:	2380      	movs	r3, #128	@ 0x80
 8007a7a:	021b      	lsls	r3, r3, #8
 8007a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007a7e:	e008      	b.n	8007a92 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8007a80:	2300      	movs	r3, #0
 8007a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8007a84:	231a      	movs	r3, #26
 8007a86:	2218      	movs	r2, #24
 8007a88:	189b      	adds	r3, r3, r2
 8007a8a:	19db      	adds	r3, r3, r7
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	701a      	strb	r2, [r3, #0]
        break;
 8007a90:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d100      	bne.n	8007a9a <UART_SetConfig+0x2a2>
 8007a98:	e133      	b.n	8007d02 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	685a      	ldr	r2, [r3, #4]
 8007a9e:	0013      	movs	r3, r2
 8007aa0:	005b      	lsls	r3, r3, #1
 8007aa2:	189b      	adds	r3, r3, r2
 8007aa4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d305      	bcc.n	8007ab6 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ab0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d906      	bls.n	8007ac4 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8007ab6:	231a      	movs	r3, #26
 8007ab8:	2218      	movs	r2, #24
 8007aba:	189b      	adds	r3, r3, r2
 8007abc:	19db      	adds	r3, r3, r7
 8007abe:	2201      	movs	r2, #1
 8007ac0:	701a      	strb	r2, [r3, #0]
 8007ac2:	e11e      	b.n	8007d02 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ac6:	613b      	str	r3, [r7, #16]
 8007ac8:	2300      	movs	r3, #0
 8007aca:	617b      	str	r3, [r7, #20]
 8007acc:	6939      	ldr	r1, [r7, #16]
 8007ace:	697a      	ldr	r2, [r7, #20]
 8007ad0:	000b      	movs	r3, r1
 8007ad2:	0e1b      	lsrs	r3, r3, #24
 8007ad4:	0010      	movs	r0, r2
 8007ad6:	0205      	lsls	r5, r0, #8
 8007ad8:	431d      	orrs	r5, r3
 8007ada:	000b      	movs	r3, r1
 8007adc:	021c      	lsls	r4, r3, #8
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	085b      	lsrs	r3, r3, #1
 8007ae4:	60bb      	str	r3, [r7, #8]
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	60fb      	str	r3, [r7, #12]
 8007aea:	68b8      	ldr	r0, [r7, #8]
 8007aec:	68f9      	ldr	r1, [r7, #12]
 8007aee:	1900      	adds	r0, r0, r4
 8007af0:	4169      	adcs	r1, r5
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	603b      	str	r3, [r7, #0]
 8007af8:	2300      	movs	r3, #0
 8007afa:	607b      	str	r3, [r7, #4]
 8007afc:	683a      	ldr	r2, [r7, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f7f8 fcd2 	bl	80004a8 <__aeabi_uldivmod>
 8007b04:	0002      	movs	r2, r0
 8007b06:	000b      	movs	r3, r1
 8007b08:	0013      	movs	r3, r2
 8007b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b0e:	23c0      	movs	r3, #192	@ 0xc0
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d309      	bcc.n	8007b2a <UART_SetConfig+0x332>
 8007b16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b18:	2380      	movs	r3, #128	@ 0x80
 8007b1a:	035b      	lsls	r3, r3, #13
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d204      	bcs.n	8007b2a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b26:	60da      	str	r2, [r3, #12]
 8007b28:	e0eb      	b.n	8007d02 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8007b2a:	231a      	movs	r3, #26
 8007b2c:	2218      	movs	r2, #24
 8007b2e:	189b      	adds	r3, r3, r2
 8007b30:	19db      	adds	r3, r3, r7
 8007b32:	2201      	movs	r2, #1
 8007b34:	701a      	strb	r2, [r3, #0]
 8007b36:	e0e4      	b.n	8007d02 <UART_SetConfig+0x50a>
 8007b38:	efff69f3 	.word	0xefff69f3
 8007b3c:	ffffcfff 	.word	0xffffcfff
 8007b40:	40004800 	.word	0x40004800
 8007b44:	fffff4ff 	.word	0xfffff4ff
 8007b48:	40013800 	.word	0x40013800
 8007b4c:	40021000 	.word	0x40021000
 8007b50:	40004400 	.word	0x40004400
 8007b54:	40004c00 	.word	0x40004c00
 8007b58:	40005000 	.word	0x40005000
 8007b5c:	003d0900 	.word	0x003d0900
 8007b60:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	69da      	ldr	r2, [r3, #28]
 8007b68:	2380      	movs	r3, #128	@ 0x80
 8007b6a:	021b      	lsls	r3, r3, #8
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d000      	beq.n	8007b72 <UART_SetConfig+0x37a>
 8007b70:	e070      	b.n	8007c54 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8007b72:	231b      	movs	r3, #27
 8007b74:	2218      	movs	r2, #24
 8007b76:	189b      	adds	r3, r3, r2
 8007b78:	19db      	adds	r3, r3, r7
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	2b08      	cmp	r3, #8
 8007b7e:	d822      	bhi.n	8007bc6 <UART_SetConfig+0x3ce>
 8007b80:	009a      	lsls	r2, r3, #2
 8007b82:	4b67      	ldr	r3, [pc, #412]	@ (8007d20 <UART_SetConfig+0x528>)
 8007b84:	18d3      	adds	r3, r2, r3
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b8a:	f7fe fcb5 	bl	80064f8 <HAL_RCC_GetPCLK1Freq>
 8007b8e:	0003      	movs	r3, r0
 8007b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007b92:	e021      	b.n	8007bd8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b94:	f7fe fcc6 	bl	8006524 <HAL_RCC_GetPCLK2Freq>
 8007b98:	0003      	movs	r3, r0
 8007b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007b9c:	e01c      	b.n	8007bd8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b9e:	4b61      	ldr	r3, [pc, #388]	@ (8007d24 <UART_SetConfig+0x52c>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2210      	movs	r2, #16
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	d002      	beq.n	8007bae <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007ba8:	4b5f      	ldr	r3, [pc, #380]	@ (8007d28 <UART_SetConfig+0x530>)
 8007baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007bac:	e014      	b.n	8007bd8 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8007bae:	4b5f      	ldr	r3, [pc, #380]	@ (8007d2c <UART_SetConfig+0x534>)
 8007bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007bb2:	e011      	b.n	8007bd8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bb4:	f7fe fbf0 	bl	8006398 <HAL_RCC_GetSysClockFreq>
 8007bb8:	0003      	movs	r3, r0
 8007bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007bbc:	e00c      	b.n	8007bd8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bbe:	2380      	movs	r3, #128	@ 0x80
 8007bc0:	021b      	lsls	r3, r3, #8
 8007bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007bc4:	e008      	b.n	8007bd8 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8007bca:	231a      	movs	r3, #26
 8007bcc:	2218      	movs	r2, #24
 8007bce:	189b      	adds	r3, r3, r2
 8007bd0:	19db      	adds	r3, r3, r7
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	701a      	strb	r2, [r3, #0]
        break;
 8007bd6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d100      	bne.n	8007be0 <UART_SetConfig+0x3e8>
 8007bde:	e090      	b.n	8007d02 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007be2:	005a      	lsls	r2, r3, #1
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	085b      	lsrs	r3, r3, #1
 8007bea:	18d2      	adds	r2, r2, r3
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	0019      	movs	r1, r3
 8007bf2:	0010      	movs	r0, r2
 8007bf4:	f7f8 faa4 	bl	8000140 <__udivsi3>
 8007bf8:	0003      	movs	r3, r0
 8007bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bfe:	2b0f      	cmp	r3, #15
 8007c00:	d921      	bls.n	8007c46 <UART_SetConfig+0x44e>
 8007c02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c04:	2380      	movs	r3, #128	@ 0x80
 8007c06:	025b      	lsls	r3, r3, #9
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d21c      	bcs.n	8007c46 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c0e:	b29a      	uxth	r2, r3
 8007c10:	200e      	movs	r0, #14
 8007c12:	2418      	movs	r4, #24
 8007c14:	1903      	adds	r3, r0, r4
 8007c16:	19db      	adds	r3, r3, r7
 8007c18:	210f      	movs	r1, #15
 8007c1a:	438a      	bics	r2, r1
 8007c1c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c20:	085b      	lsrs	r3, r3, #1
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	2207      	movs	r2, #7
 8007c26:	4013      	ands	r3, r2
 8007c28:	b299      	uxth	r1, r3
 8007c2a:	1903      	adds	r3, r0, r4
 8007c2c:	19db      	adds	r3, r3, r7
 8007c2e:	1902      	adds	r2, r0, r4
 8007c30:	19d2      	adds	r2, r2, r7
 8007c32:	8812      	ldrh	r2, [r2, #0]
 8007c34:	430a      	orrs	r2, r1
 8007c36:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	1902      	adds	r2, r0, r4
 8007c3e:	19d2      	adds	r2, r2, r7
 8007c40:	8812      	ldrh	r2, [r2, #0]
 8007c42:	60da      	str	r2, [r3, #12]
 8007c44:	e05d      	b.n	8007d02 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8007c46:	231a      	movs	r3, #26
 8007c48:	2218      	movs	r2, #24
 8007c4a:	189b      	adds	r3, r3, r2
 8007c4c:	19db      	adds	r3, r3, r7
 8007c4e:	2201      	movs	r2, #1
 8007c50:	701a      	strb	r2, [r3, #0]
 8007c52:	e056      	b.n	8007d02 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c54:	231b      	movs	r3, #27
 8007c56:	2218      	movs	r2, #24
 8007c58:	189b      	adds	r3, r3, r2
 8007c5a:	19db      	adds	r3, r3, r7
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	2b08      	cmp	r3, #8
 8007c60:	d822      	bhi.n	8007ca8 <UART_SetConfig+0x4b0>
 8007c62:	009a      	lsls	r2, r3, #2
 8007c64:	4b32      	ldr	r3, [pc, #200]	@ (8007d30 <UART_SetConfig+0x538>)
 8007c66:	18d3      	adds	r3, r2, r3
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c6c:	f7fe fc44 	bl	80064f8 <HAL_RCC_GetPCLK1Freq>
 8007c70:	0003      	movs	r3, r0
 8007c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007c74:	e021      	b.n	8007cba <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c76:	f7fe fc55 	bl	8006524 <HAL_RCC_GetPCLK2Freq>
 8007c7a:	0003      	movs	r3, r0
 8007c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007c7e:	e01c      	b.n	8007cba <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c80:	4b28      	ldr	r3, [pc, #160]	@ (8007d24 <UART_SetConfig+0x52c>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2210      	movs	r2, #16
 8007c86:	4013      	ands	r3, r2
 8007c88:	d002      	beq.n	8007c90 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007c8a:	4b27      	ldr	r3, [pc, #156]	@ (8007d28 <UART_SetConfig+0x530>)
 8007c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c8e:	e014      	b.n	8007cba <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8007c90:	4b26      	ldr	r3, [pc, #152]	@ (8007d2c <UART_SetConfig+0x534>)
 8007c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007c94:	e011      	b.n	8007cba <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c96:	f7fe fb7f 	bl	8006398 <HAL_RCC_GetSysClockFreq>
 8007c9a:	0003      	movs	r3, r0
 8007c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007c9e:	e00c      	b.n	8007cba <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ca0:	2380      	movs	r3, #128	@ 0x80
 8007ca2:	021b      	lsls	r3, r3, #8
 8007ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007ca6:	e008      	b.n	8007cba <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8007cac:	231a      	movs	r3, #26
 8007cae:	2218      	movs	r2, #24
 8007cb0:	189b      	adds	r3, r3, r2
 8007cb2:	19db      	adds	r3, r3, r7
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	701a      	strb	r2, [r3, #0]
        break;
 8007cb8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8007cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d020      	beq.n	8007d02 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	085a      	lsrs	r2, r3, #1
 8007cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cc8:	18d2      	adds	r2, r2, r3
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	0019      	movs	r1, r3
 8007cd0:	0010      	movs	r0, r2
 8007cd2:	f7f8 fa35 	bl	8000140 <__udivsi3>
 8007cd6:	0003      	movs	r3, r0
 8007cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cdc:	2b0f      	cmp	r3, #15
 8007cde:	d90a      	bls.n	8007cf6 <UART_SetConfig+0x4fe>
 8007ce0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ce2:	2380      	movs	r3, #128	@ 0x80
 8007ce4:	025b      	lsls	r3, r3, #9
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d205      	bcs.n	8007cf6 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	60da      	str	r2, [r3, #12]
 8007cf4:	e005      	b.n	8007d02 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8007cf6:	231a      	movs	r3, #26
 8007cf8:	2218      	movs	r2, #24
 8007cfa:	189b      	adds	r3, r3, r2
 8007cfc:	19db      	adds	r3, r3, r7
 8007cfe:	2201      	movs	r2, #1
 8007d00:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	2200      	movs	r2, #0
 8007d06:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007d0e:	231a      	movs	r3, #26
 8007d10:	2218      	movs	r2, #24
 8007d12:	189b      	adds	r3, r3, r2
 8007d14:	19db      	adds	r3, r3, r7
 8007d16:	781b      	ldrb	r3, [r3, #0]
}
 8007d18:	0018      	movs	r0, r3
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	b00e      	add	sp, #56	@ 0x38
 8007d1e:	bdb0      	pop	{r4, r5, r7, pc}
 8007d20:	0800dbd4 	.word	0x0800dbd4
 8007d24:	40021000 	.word	0x40021000
 8007d28:	003d0900 	.word	0x003d0900
 8007d2c:	00f42400 	.word	0x00f42400
 8007d30:	0800dbf8 	.word	0x0800dbf8

08007d34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d40:	2201      	movs	r2, #1
 8007d42:	4013      	ands	r3, r2
 8007d44:	d00b      	beq.n	8007d5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	4a4a      	ldr	r2, [pc, #296]	@ (8007e78 <UART_AdvFeatureConfig+0x144>)
 8007d4e:	4013      	ands	r3, r2
 8007d50:	0019      	movs	r1, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	430a      	orrs	r2, r1
 8007d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d62:	2202      	movs	r2, #2
 8007d64:	4013      	ands	r3, r2
 8007d66:	d00b      	beq.n	8007d80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	4a43      	ldr	r2, [pc, #268]	@ (8007e7c <UART_AdvFeatureConfig+0x148>)
 8007d70:	4013      	ands	r3, r2
 8007d72:	0019      	movs	r1, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	430a      	orrs	r2, r1
 8007d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d84:	2204      	movs	r2, #4
 8007d86:	4013      	ands	r3, r2
 8007d88:	d00b      	beq.n	8007da2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	4a3b      	ldr	r2, [pc, #236]	@ (8007e80 <UART_AdvFeatureConfig+0x14c>)
 8007d92:	4013      	ands	r3, r2
 8007d94:	0019      	movs	r1, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	430a      	orrs	r2, r1
 8007da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007da6:	2208      	movs	r2, #8
 8007da8:	4013      	ands	r3, r2
 8007daa:	d00b      	beq.n	8007dc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	4a34      	ldr	r2, [pc, #208]	@ (8007e84 <UART_AdvFeatureConfig+0x150>)
 8007db4:	4013      	ands	r3, r2
 8007db6:	0019      	movs	r1, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	430a      	orrs	r2, r1
 8007dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dc8:	2210      	movs	r2, #16
 8007dca:	4013      	ands	r3, r2
 8007dcc:	d00b      	beq.n	8007de6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	4a2c      	ldr	r2, [pc, #176]	@ (8007e88 <UART_AdvFeatureConfig+0x154>)
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	0019      	movs	r1, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	430a      	orrs	r2, r1
 8007de4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dea:	2220      	movs	r2, #32
 8007dec:	4013      	ands	r3, r2
 8007dee:	d00b      	beq.n	8007e08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	4a25      	ldr	r2, [pc, #148]	@ (8007e8c <UART_AdvFeatureConfig+0x158>)
 8007df8:	4013      	ands	r3, r2
 8007dfa:	0019      	movs	r1, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	430a      	orrs	r2, r1
 8007e06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e0c:	2240      	movs	r2, #64	@ 0x40
 8007e0e:	4013      	ands	r3, r2
 8007e10:	d01d      	beq.n	8007e4e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	4a1d      	ldr	r2, [pc, #116]	@ (8007e90 <UART_AdvFeatureConfig+0x15c>)
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	0019      	movs	r1, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	430a      	orrs	r2, r1
 8007e28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007e2e:	2380      	movs	r3, #128	@ 0x80
 8007e30:	035b      	lsls	r3, r3, #13
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d10b      	bne.n	8007e4e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	4a15      	ldr	r2, [pc, #84]	@ (8007e94 <UART_AdvFeatureConfig+0x160>)
 8007e3e:	4013      	ands	r3, r2
 8007e40:	0019      	movs	r1, r3
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	430a      	orrs	r2, r1
 8007e4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e52:	2280      	movs	r2, #128	@ 0x80
 8007e54:	4013      	ands	r3, r2
 8007e56:	d00b      	beq.n	8007e70 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	4a0e      	ldr	r2, [pc, #56]	@ (8007e98 <UART_AdvFeatureConfig+0x164>)
 8007e60:	4013      	ands	r3, r2
 8007e62:	0019      	movs	r1, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	430a      	orrs	r2, r1
 8007e6e:	605a      	str	r2, [r3, #4]
  }
}
 8007e70:	46c0      	nop			@ (mov r8, r8)
 8007e72:	46bd      	mov	sp, r7
 8007e74:	b002      	add	sp, #8
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	fffdffff 	.word	0xfffdffff
 8007e7c:	fffeffff 	.word	0xfffeffff
 8007e80:	fffbffff 	.word	0xfffbffff
 8007e84:	ffff7fff 	.word	0xffff7fff
 8007e88:	ffffefff 	.word	0xffffefff
 8007e8c:	ffffdfff 	.word	0xffffdfff
 8007e90:	ffefffff 	.word	0xffefffff
 8007e94:	ff9fffff 	.word	0xff9fffff
 8007e98:	fff7ffff 	.word	0xfff7ffff

08007e9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b092      	sub	sp, #72	@ 0x48
 8007ea0:	af02      	add	r7, sp, #8
 8007ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2284      	movs	r2, #132	@ 0x84
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007eac:	f7fc fcce 	bl	800484c <HAL_GetTick>
 8007eb0:	0003      	movs	r3, r0
 8007eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2208      	movs	r2, #8
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	2b08      	cmp	r3, #8
 8007ec0:	d12c      	bne.n	8007f1c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ec4:	2280      	movs	r2, #128	@ 0x80
 8007ec6:	0391      	lsls	r1, r2, #14
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	4a46      	ldr	r2, [pc, #280]	@ (8007fe4 <UART_CheckIdleState+0x148>)
 8007ecc:	9200      	str	r2, [sp, #0]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f000 f88c 	bl	8007fec <UART_WaitOnFlagUntilTimeout>
 8007ed4:	1e03      	subs	r3, r0, #0
 8007ed6:	d021      	beq.n	8007f1c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ed8:	f3ef 8310 	mrs	r3, PRIMASK
 8007edc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007ee0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ee8:	f383 8810 	msr	PRIMASK, r3
}
 8007eec:	46c0      	nop			@ (mov r8, r8)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2180      	movs	r1, #128	@ 0x80
 8007efa:	438a      	bics	r2, r1
 8007efc:	601a      	str	r2, [r3, #0]
 8007efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f04:	f383 8810 	msr	PRIMASK, r3
}
 8007f08:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2220      	movs	r2, #32
 8007f0e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2278      	movs	r2, #120	@ 0x78
 8007f14:	2100      	movs	r1, #0
 8007f16:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e05f      	b.n	8007fdc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2204      	movs	r2, #4
 8007f24:	4013      	ands	r3, r2
 8007f26:	2b04      	cmp	r3, #4
 8007f28:	d146      	bne.n	8007fb8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f2c:	2280      	movs	r2, #128	@ 0x80
 8007f2e:	03d1      	lsls	r1, r2, #15
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	4a2c      	ldr	r2, [pc, #176]	@ (8007fe4 <UART_CheckIdleState+0x148>)
 8007f34:	9200      	str	r2, [sp, #0]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f000 f858 	bl	8007fec <UART_WaitOnFlagUntilTimeout>
 8007f3c:	1e03      	subs	r3, r0, #0
 8007f3e:	d03b      	beq.n	8007fb8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f40:	f3ef 8310 	mrs	r3, PRIMASK
 8007f44:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f46:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f48:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	f383 8810 	msr	PRIMASK, r3
}
 8007f54:	46c0      	nop			@ (mov r8, r8)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4921      	ldr	r1, [pc, #132]	@ (8007fe8 <UART_CheckIdleState+0x14c>)
 8007f62:	400a      	ands	r2, r1
 8007f64:	601a      	str	r2, [r3, #0]
 8007f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	f383 8810 	msr	PRIMASK, r3
}
 8007f70:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f72:	f3ef 8310 	mrs	r3, PRIMASK
 8007f76:	61bb      	str	r3, [r7, #24]
  return(result);
 8007f78:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	f383 8810 	msr	PRIMASK, r3
}
 8007f86:	46c0      	nop			@ (mov r8, r8)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	689a      	ldr	r2, [r3, #8]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2101      	movs	r1, #1
 8007f94:	438a      	bics	r2, r1
 8007f96:	609a      	str	r2, [r3, #8]
 8007f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f9a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f9c:	6a3b      	ldr	r3, [r7, #32]
 8007f9e:	f383 8810 	msr	PRIMASK, r3
}
 8007fa2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2280      	movs	r2, #128	@ 0x80
 8007fa8:	2120      	movs	r1, #32
 8007faa:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2278      	movs	r2, #120	@ 0x78
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fb4:	2303      	movs	r3, #3
 8007fb6:	e011      	b.n	8007fdc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2220      	movs	r2, #32
 8007fbc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2280      	movs	r2, #128	@ 0x80
 8007fc2:	2120      	movs	r1, #32
 8007fc4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2278      	movs	r2, #120	@ 0x78
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	0018      	movs	r0, r3
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	b010      	add	sp, #64	@ 0x40
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	01ffffff 	.word	0x01ffffff
 8007fe8:	fffffedf 	.word	0xfffffedf

08007fec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	603b      	str	r3, [r7, #0]
 8007ff8:	1dfb      	adds	r3, r7, #7
 8007ffa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ffc:	e04b      	b.n	8008096 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	3301      	adds	r3, #1
 8008002:	d048      	beq.n	8008096 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008004:	f7fc fc22 	bl	800484c <HAL_GetTick>
 8008008:	0002      	movs	r2, r0
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	69ba      	ldr	r2, [r7, #24]
 8008010:	429a      	cmp	r2, r3
 8008012:	d302      	bcc.n	800801a <UART_WaitOnFlagUntilTimeout+0x2e>
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d101      	bne.n	800801e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800801a:	2303      	movs	r3, #3
 800801c:	e04b      	b.n	80080b6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2204      	movs	r2, #4
 8008026:	4013      	ands	r3, r2
 8008028:	d035      	beq.n	8008096 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	69db      	ldr	r3, [r3, #28]
 8008030:	2208      	movs	r2, #8
 8008032:	4013      	ands	r3, r2
 8008034:	2b08      	cmp	r3, #8
 8008036:	d111      	bne.n	800805c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2208      	movs	r2, #8
 800803e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	0018      	movs	r0, r3
 8008044:	f000 f83c 	bl	80080c0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2284      	movs	r2, #132	@ 0x84
 800804c:	2108      	movs	r1, #8
 800804e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2278      	movs	r2, #120	@ 0x78
 8008054:	2100      	movs	r1, #0
 8008056:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	e02c      	b.n	80080b6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	69da      	ldr	r2, [r3, #28]
 8008062:	2380      	movs	r3, #128	@ 0x80
 8008064:	011b      	lsls	r3, r3, #4
 8008066:	401a      	ands	r2, r3
 8008068:	2380      	movs	r3, #128	@ 0x80
 800806a:	011b      	lsls	r3, r3, #4
 800806c:	429a      	cmp	r2, r3
 800806e:	d112      	bne.n	8008096 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2280      	movs	r2, #128	@ 0x80
 8008076:	0112      	lsls	r2, r2, #4
 8008078:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	0018      	movs	r0, r3
 800807e:	f000 f81f 	bl	80080c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2284      	movs	r2, #132	@ 0x84
 8008086:	2120      	movs	r1, #32
 8008088:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2278      	movs	r2, #120	@ 0x78
 800808e:	2100      	movs	r1, #0
 8008090:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e00f      	b.n	80080b6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	69db      	ldr	r3, [r3, #28]
 800809c:	68ba      	ldr	r2, [r7, #8]
 800809e:	4013      	ands	r3, r2
 80080a0:	68ba      	ldr	r2, [r7, #8]
 80080a2:	1ad3      	subs	r3, r2, r3
 80080a4:	425a      	negs	r2, r3
 80080a6:	4153      	adcs	r3, r2
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	001a      	movs	r2, r3
 80080ac:	1dfb      	adds	r3, r7, #7
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d0a4      	beq.n	8007ffe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	0018      	movs	r0, r3
 80080b8:	46bd      	mov	sp, r7
 80080ba:	b004      	add	sp, #16
 80080bc:	bd80      	pop	{r7, pc}
	...

080080c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b08e      	sub	sp, #56	@ 0x38
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080c8:	f3ef 8310 	mrs	r3, PRIMASK
 80080cc:	617b      	str	r3, [r7, #20]
  return(result);
 80080ce:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80080d2:	2301      	movs	r3, #1
 80080d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	f383 8810 	msr	PRIMASK, r3
}
 80080dc:	46c0      	nop			@ (mov r8, r8)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4926      	ldr	r1, [pc, #152]	@ (8008184 <UART_EndRxTransfer+0xc4>)
 80080ea:	400a      	ands	r2, r1
 80080ec:	601a      	str	r2, [r3, #0]
 80080ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	f383 8810 	msr	PRIMASK, r3
}
 80080f8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080fa:	f3ef 8310 	mrs	r3, PRIMASK
 80080fe:	623b      	str	r3, [r7, #32]
  return(result);
 8008100:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008102:	633b      	str	r3, [r7, #48]	@ 0x30
 8008104:	2301      	movs	r3, #1
 8008106:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800810a:	f383 8810 	msr	PRIMASK, r3
}
 800810e:	46c0      	nop			@ (mov r8, r8)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	689a      	ldr	r2, [r3, #8]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2101      	movs	r1, #1
 800811c:	438a      	bics	r2, r1
 800811e:	609a      	str	r2, [r3, #8]
 8008120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008122:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008126:	f383 8810 	msr	PRIMASK, r3
}
 800812a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008130:	2b01      	cmp	r3, #1
 8008132:	d118      	bne.n	8008166 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008134:	f3ef 8310 	mrs	r3, PRIMASK
 8008138:	60bb      	str	r3, [r7, #8]
  return(result);
 800813a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800813c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800813e:	2301      	movs	r3, #1
 8008140:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f383 8810 	msr	PRIMASK, r3
}
 8008148:	46c0      	nop			@ (mov r8, r8)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2110      	movs	r1, #16
 8008156:	438a      	bics	r2, r1
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800815c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	f383 8810 	msr	PRIMASK, r3
}
 8008164:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2280      	movs	r2, #128	@ 0x80
 800816a:	2120      	movs	r1, #32
 800816c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800817a:	46c0      	nop			@ (mov r8, r8)
 800817c:	46bd      	mov	sp, r7
 800817e:	b00e      	add	sp, #56	@ 0x38
 8008180:	bd80      	pop	{r7, pc}
 8008182:	46c0      	nop			@ (mov r8, r8)
 8008184:	fffffedf 	.word	0xfffffedf

08008188 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800818c:	4a06      	ldr	r2, [pc, #24]	@ (80081a8 <MX_FATFS_Init+0x20>)
 800818e:	4b07      	ldr	r3, [pc, #28]	@ (80081ac <MX_FATFS_Init+0x24>)
 8008190:	0011      	movs	r1, r2
 8008192:	0018      	movs	r0, r3
 8008194:	f000 fe34 	bl	8008e00 <FATFS_LinkDriver>
 8008198:	0003      	movs	r3, r0
 800819a:	001a      	movs	r2, r3
 800819c:	4b04      	ldr	r3, [pc, #16]	@ (80081b0 <MX_FATFS_Init+0x28>)
 800819e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80081a0:	46c0      	nop			@ (mov r8, r8)
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	46c0      	nop			@ (mov r8, r8)
 80081a8:	200008c4 	.word	0x200008c4
 80081ac:	2000000c 	.word	0x2000000c
 80081b0:	200008c0 	.word	0x200008c0

080081b4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	0002      	movs	r2, r0
 80081bc:	1dfb      	adds	r3, r7, #7
 80081be:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 80081c0:	1dfb      	adds	r3, r7, #7
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	0018      	movs	r0, r3
 80081c6:	f000 fa19 	bl	80085fc <USER_SPI_initialize>
 80081ca:	0003      	movs	r3, r0
  /* USER CODE END INIT */
}
 80081cc:	0018      	movs	r0, r3
 80081ce:	46bd      	mov	sp, r7
 80081d0:	b002      	add	sp, #8
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	0002      	movs	r2, r0
 80081dc:	1dfb      	adds	r3, r7, #7
 80081de:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_status(pdrv); //ADD THIS LINE
 80081e0:	1dfb      	adds	r3, r7, #7
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	0018      	movs	r0, r3
 80081e6:	f000 fb21 	bl	800882c <USER_SPI_status>
 80081ea:	0003      	movs	r3, r0
  /* USER CODE END STATUS */
}
 80081ec:	0018      	movs	r0, r3
 80081ee:	46bd      	mov	sp, r7
 80081f0:	b002      	add	sp, #8
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80081f4:	b5b0      	push	{r4, r5, r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60b9      	str	r1, [r7, #8]
 80081fc:	607a      	str	r2, [r7, #4]
 80081fe:	603b      	str	r3, [r7, #0]
 8008200:	250f      	movs	r5, #15
 8008202:	197b      	adds	r3, r7, r5
 8008204:	1c02      	adds	r2, r0, #0
 8008206:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8008208:	683c      	ldr	r4, [r7, #0]
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	68b9      	ldr	r1, [r7, #8]
 800820e:	197b      	adds	r3, r7, r5
 8008210:	7818      	ldrb	r0, [r3, #0]
 8008212:	0023      	movs	r3, r4
 8008214:	f000 fb20 	bl	8008858 <USER_SPI_read>
 8008218:	0003      	movs	r3, r0
  /* USER CODE END READ */
}
 800821a:	0018      	movs	r0, r3
 800821c:	46bd      	mov	sp, r7
 800821e:	b004      	add	sp, #16
 8008220:	bdb0      	pop	{r4, r5, r7, pc}

08008222 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008222:	b5b0      	push	{r4, r5, r7, lr}
 8008224:	b084      	sub	sp, #16
 8008226:	af00      	add	r7, sp, #0
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	607a      	str	r2, [r7, #4]
 800822c:	603b      	str	r3, [r7, #0]
 800822e:	250f      	movs	r5, #15
 8008230:	197b      	adds	r3, r7, r5
 8008232:	1c02      	adds	r2, r0, #0
 8008234:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 8008236:	683c      	ldr	r4, [r7, #0]
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	68b9      	ldr	r1, [r7, #8]
 800823c:	197b      	adds	r3, r7, r5
 800823e:	7818      	ldrb	r0, [r3, #0]
 8008240:	0023      	movs	r3, r4
 8008242:	f000 fb75 	bl	8008930 <USER_SPI_write>
 8008246:	0003      	movs	r3, r0
  /* USER CODE END WRITE */
}
 8008248:	0018      	movs	r0, r3
 800824a:	46bd      	mov	sp, r7
 800824c:	b004      	add	sp, #16
 800824e:	bdb0      	pop	{r4, r5, r7, pc}

08008250 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	603a      	str	r2, [r7, #0]
 8008258:	1dfb      	adds	r3, r7, #7
 800825a:	1c02      	adds	r2, r0, #0
 800825c:	701a      	strb	r2, [r3, #0]
 800825e:	1dbb      	adds	r3, r7, #6
 8008260:	1c0a      	adds	r2, r1, #0
 8008262:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 8008264:	683a      	ldr	r2, [r7, #0]
 8008266:	1dbb      	adds	r3, r7, #6
 8008268:	7819      	ldrb	r1, [r3, #0]
 800826a:	1dfb      	adds	r3, r7, #7
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	0018      	movs	r0, r3
 8008270:	f000 fbde 	bl	8008a30 <USER_SPI_ioctl>
 8008274:	0003      	movs	r3, r0
  /* USER CODE END IOCTL */
}
 8008276:	0018      	movs	r0, r3
 8008278:	46bd      	mov	sp, r7
 800827a:	b002      	add	sp, #8
 800827c:	bd80      	pop	{r7, pc}
	...

08008280 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8008288:	f7fc fae0 	bl	800484c <HAL_GetTick>
 800828c:	0002      	movs	r2, r0
 800828e:	4b04      	ldr	r3, [pc, #16]	@ (80082a0 <SPI_Timer_On+0x20>)
 8008290:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 8008292:	4b04      	ldr	r3, [pc, #16]	@ (80082a4 <SPI_Timer_On+0x24>)
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	601a      	str	r2, [r3, #0]
}
 8008298:	46c0      	nop			@ (mov r8, r8)
 800829a:	46bd      	mov	sp, r7
 800829c:	b002      	add	sp, #8
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	200008cc 	.word	0x200008cc
 80082a4:	200008d0 	.word	0x200008d0

080082a8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80082a8:	b580      	push	{r7, lr}
 80082aa:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80082ac:	f7fc face 	bl	800484c <HAL_GetTick>
 80082b0:	0002      	movs	r2, r0
 80082b2:	4b06      	ldr	r3, [pc, #24]	@ (80082cc <SPI_Timer_Status+0x24>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	1ad2      	subs	r2, r2, r3
 80082b8:	4b05      	ldr	r3, [pc, #20]	@ (80082d0 <SPI_Timer_Status+0x28>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	429a      	cmp	r2, r3
 80082be:	419b      	sbcs	r3, r3
 80082c0:	425b      	negs	r3, r3
 80082c2:	b2db      	uxtb	r3, r3
}
 80082c4:	0018      	movs	r0, r3
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	46c0      	nop			@ (mov r8, r8)
 80082cc:	200008cc 	.word	0x200008cc
 80082d0:	200008d0 	.word	0x200008d0

080082d4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80082d4:	b590      	push	{r4, r7, lr}
 80082d6:	b087      	sub	sp, #28
 80082d8:	af02      	add	r7, sp, #8
 80082da:	0002      	movs	r2, r0
 80082dc:	1dfb      	adds	r3, r7, #7
 80082de:	701a      	strb	r2, [r3, #0]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80082e0:	240f      	movs	r4, #15
 80082e2:	193a      	adds	r2, r7, r4
 80082e4:	1df9      	adds	r1, r7, #7
 80082e6:	4806      	ldr	r0, [pc, #24]	@ (8008300 <xchg_spi+0x2c>)
 80082e8:	2332      	movs	r3, #50	@ 0x32
 80082ea:	9300      	str	r3, [sp, #0]
 80082ec:	2301      	movs	r3, #1
 80082ee:	f7fe fcf0 	bl	8006cd2 <HAL_SPI_TransmitReceive>
    return rxDat;
 80082f2:	193b      	adds	r3, r7, r4
 80082f4:	781b      	ldrb	r3, [r3, #0]
}
 80082f6:	0018      	movs	r0, r3
 80082f8:	46bd      	mov	sp, r7
 80082fa:	b005      	add	sp, #20
 80082fc:	bd90      	pop	{r4, r7, pc}
 80082fe:	46c0      	nop			@ (mov r8, r8)
 8008300:	200004b4 	.word	0x200004b4

08008304 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8008304:	b590      	push	{r4, r7, lr}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800830e:	2300      	movs	r3, #0
 8008310:	60fb      	str	r3, [r7, #12]
 8008312:	e00a      	b.n	800832a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	18d4      	adds	r4, r2, r3
 800831a:	20ff      	movs	r0, #255	@ 0xff
 800831c:	f7ff ffda 	bl	80082d4 <xchg_spi>
 8008320:	0003      	movs	r3, r0
 8008322:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	3301      	adds	r3, #1
 8008328:	60fb      	str	r3, [r7, #12]
 800832a:	68fa      	ldr	r2, [r7, #12]
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	429a      	cmp	r2, r3
 8008330:	d3f0      	bcc.n	8008314 <rcvr_spi_multi+0x10>
	}
}
 8008332:	46c0      	nop			@ (mov r8, r8)
 8008334:	46c0      	nop			@ (mov r8, r8)
 8008336:	46bd      	mov	sp, r7
 8008338:	b005      	add	sp, #20
 800833a:	bd90      	pop	{r4, r7, pc}

0800833c <xmit_spi_multi>:
static
void xmit_spi_multi (
		BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	b29a      	uxth	r2, r3
 800834a:	2301      	movs	r3, #1
 800834c:	425b      	negs	r3, r3
 800834e:	6879      	ldr	r1, [r7, #4]
 8008350:	4803      	ldr	r0, [pc, #12]	@ (8008360 <xmit_spi_multi+0x24>)
 8008352:	f7fe fb61 	bl	8006a18 <HAL_SPI_Transmit>
}
 8008356:	46c0      	nop			@ (mov r8, r8)
 8008358:	46bd      	mov	sp, r7
 800835a:	b002      	add	sp, #8
 800835c:	bd80      	pop	{r7, pc}
 800835e:	46c0      	nop			@ (mov r8, r8)
 8008360:	200004b4 	.word	0x200004b4

08008364 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8008364:	b5b0      	push	{r4, r5, r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800836c:	f7fc fa6e 	bl	800484c <HAL_GetTick>
 8008370:	0003      	movs	r3, r0
 8008372:	617b      	str	r3, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8008378:	250f      	movs	r5, #15
 800837a:	197c      	adds	r4, r7, r5
 800837c:	20ff      	movs	r0, #255	@ 0xff
 800837e:	f7ff ffa9 	bl	80082d4 <xchg_spi>
 8008382:	0003      	movs	r3, r0
 8008384:	7023      	strb	r3, [r4, #0]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8008386:	197b      	adds	r3, r7, r5
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	2bff      	cmp	r3, #255	@ 0xff
 800838c:	d007      	beq.n	800839e <wait_ready+0x3a>
 800838e:	f7fc fa5d 	bl	800484c <HAL_GetTick>
 8008392:	0002      	movs	r2, r0
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	693a      	ldr	r2, [r7, #16]
 800839a:	429a      	cmp	r2, r3
 800839c:	d8ec      	bhi.n	8008378 <wait_ready+0x14>

	return (d == 0xFF) ? 1 : 0;
 800839e:	230f      	movs	r3, #15
 80083a0:	18fb      	adds	r3, r7, r3
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	3bff      	subs	r3, #255	@ 0xff
 80083a6:	425a      	negs	r2, r3
 80083a8:	4153      	adcs	r3, r2
 80083aa:	b2db      	uxtb	r3, r3
}
 80083ac:	0018      	movs	r0, r3
 80083ae:	46bd      	mov	sp, r7
 80083b0:	b006      	add	sp, #24
 80083b2:	bdb0      	pop	{r4, r5, r7, pc}

080083b4 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80083b8:	4b05      	ldr	r3, [pc, #20]	@ (80083d0 <despiselect+0x1c>)
 80083ba:	2201      	movs	r2, #1
 80083bc:	2102      	movs	r1, #2
 80083be:	0018      	movs	r0, r3
 80083c0:	f7fc fc9e 	bl	8004d00 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80083c4:	20ff      	movs	r0, #255	@ 0xff
 80083c6:	f7ff ff85 	bl	80082d4 <xchg_spi>

}
 80083ca:	46c0      	nop			@ (mov r8, r8)
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	50000400 	.word	0x50000400

080083d4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80083d8:	4b0b      	ldr	r3, [pc, #44]	@ (8008408 <spiselect+0x34>)
 80083da:	2200      	movs	r2, #0
 80083dc:	2102      	movs	r1, #2
 80083de:	0018      	movs	r0, r3
 80083e0:	f7fc fc8e 	bl	8004d00 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80083e4:	20ff      	movs	r0, #255	@ 0xff
 80083e6:	f7ff ff75 	bl	80082d4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80083ea:	23fa      	movs	r3, #250	@ 0xfa
 80083ec:	005b      	lsls	r3, r3, #1
 80083ee:	0018      	movs	r0, r3
 80083f0:	f7ff ffb8 	bl	8008364 <wait_ready>
 80083f4:	1e03      	subs	r3, r0, #0
 80083f6:	d001      	beq.n	80083fc <spiselect+0x28>
 80083f8:	2301      	movs	r3, #1
 80083fa:	e002      	b.n	8008402 <spiselect+0x2e>

	despiselect();
 80083fc:	f7ff ffda 	bl	80083b4 <despiselect>
	return 0;	/* Timeout */
 8008400:	2300      	movs	r3, #0
}
 8008402:	0018      	movs	r0, r3
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}
 8008408:	50000400 	.word	0x50000400

0800840c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800840c:	b5b0      	push	{r4, r5, r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8008416:	20c8      	movs	r0, #200	@ 0xc8
 8008418:	f7ff ff32 	bl	8008280 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800841c:	250f      	movs	r5, #15
 800841e:	197c      	adds	r4, r7, r5
 8008420:	20ff      	movs	r0, #255	@ 0xff
 8008422:	f7ff ff57 	bl	80082d4 <xchg_spi>
 8008426:	0003      	movs	r3, r0
 8008428:	7023      	strb	r3, [r4, #0]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800842a:	197b      	adds	r3, r7, r5
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	2bff      	cmp	r3, #255	@ 0xff
 8008430:	d103      	bne.n	800843a <rcvr_datablock+0x2e>
 8008432:	f7ff ff39 	bl	80082a8 <SPI_Timer_Status>
 8008436:	1e03      	subs	r3, r0, #0
 8008438:	d1f0      	bne.n	800841c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800843a:	230f      	movs	r3, #15
 800843c:	18fb      	adds	r3, r7, r3
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	2bfe      	cmp	r3, #254	@ 0xfe
 8008442:	d001      	beq.n	8008448 <rcvr_datablock+0x3c>
 8008444:	2300      	movs	r3, #0
 8008446:	e00c      	b.n	8008462 <rcvr_datablock+0x56>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8008448:	683a      	ldr	r2, [r7, #0]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	0011      	movs	r1, r2
 800844e:	0018      	movs	r0, r3
 8008450:	f7ff ff58 	bl	8008304 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8008454:	20ff      	movs	r0, #255	@ 0xff
 8008456:	f7ff ff3d 	bl	80082d4 <xchg_spi>
 800845a:	20ff      	movs	r0, #255	@ 0xff
 800845c:	f7ff ff3a 	bl	80082d4 <xchg_spi>

	return 1;						/* Function succeeded */
 8008460:	2301      	movs	r3, #1
}
 8008462:	0018      	movs	r0, r3
 8008464:	46bd      	mov	sp, r7
 8008466:	b004      	add	sp, #16
 8008468:	bdb0      	pop	{r4, r5, r7, pc}

0800846a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800846a:	b5b0      	push	{r4, r5, r7, lr}
 800846c:	b084      	sub	sp, #16
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	000a      	movs	r2, r1
 8008474:	1cfb      	adds	r3, r7, #3
 8008476:	701a      	strb	r2, [r3, #0]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8008478:	23fa      	movs	r3, #250	@ 0xfa
 800847a:	005b      	lsls	r3, r3, #1
 800847c:	0018      	movs	r0, r3
 800847e:	f7ff ff71 	bl	8008364 <wait_ready>
 8008482:	1e03      	subs	r3, r0, #0
 8008484:	d101      	bne.n	800848a <xmit_datablock+0x20>
 8008486:	2300      	movs	r3, #0
 8008488:	e025      	b.n	80084d6 <xmit_datablock+0x6c>

	xchg_spi(token);					/* Send token */
 800848a:	1cfb      	adds	r3, r7, #3
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	0018      	movs	r0, r3
 8008490:	f7ff ff20 	bl	80082d4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8008494:	1cfb      	adds	r3, r7, #3
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	2bfd      	cmp	r3, #253	@ 0xfd
 800849a:	d01b      	beq.n	80084d4 <xmit_datablock+0x6a>
		xmit_spi_multi(buff, 512);		/* Data */
 800849c:	2380      	movs	r3, #128	@ 0x80
 800849e:	009a      	lsls	r2, r3, #2
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	0011      	movs	r1, r2
 80084a4:	0018      	movs	r0, r3
 80084a6:	f7ff ff49 	bl	800833c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80084aa:	20ff      	movs	r0, #255	@ 0xff
 80084ac:	f7ff ff12 	bl	80082d4 <xchg_spi>
 80084b0:	20ff      	movs	r0, #255	@ 0xff
 80084b2:	f7ff ff0f 	bl	80082d4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80084b6:	250f      	movs	r5, #15
 80084b8:	197c      	adds	r4, r7, r5
 80084ba:	20ff      	movs	r0, #255	@ 0xff
 80084bc:	f7ff ff0a 	bl	80082d4 <xchg_spi>
 80084c0:	0003      	movs	r3, r0
 80084c2:	7023      	strb	r3, [r4, #0]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80084c4:	197b      	adds	r3, r7, r5
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	221f      	movs	r2, #31
 80084ca:	4013      	ands	r3, r2
 80084cc:	2b05      	cmp	r3, #5
 80084ce:	d001      	beq.n	80084d4 <xmit_datablock+0x6a>
 80084d0:	2300      	movs	r3, #0
 80084d2:	e000      	b.n	80084d6 <xmit_datablock+0x6c>
	}
	return 1;
 80084d4:	2301      	movs	r3, #1
}
 80084d6:	0018      	movs	r0, r3
 80084d8:	46bd      	mov	sp, r7
 80084da:	b004      	add	sp, #16
 80084dc:	bdb0      	pop	{r4, r5, r7, pc}

080084de <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80084de:	b5b0      	push	{r4, r5, r7, lr}
 80084e0:	b084      	sub	sp, #16
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	0002      	movs	r2, r0
 80084e6:	6039      	str	r1, [r7, #0]
 80084e8:	1dfb      	adds	r3, r7, #7
 80084ea:	701a      	strb	r2, [r3, #0]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80084ec:	1dfb      	adds	r3, r7, #7
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	b25b      	sxtb	r3, r3
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	da15      	bge.n	8008522 <send_cmd+0x44>
		cmd &= 0x7F;
 80084f6:	1dfb      	adds	r3, r7, #7
 80084f8:	1dfa      	adds	r2, r7, #7
 80084fa:	7812      	ldrb	r2, [r2, #0]
 80084fc:	217f      	movs	r1, #127	@ 0x7f
 80084fe:	400a      	ands	r2, r1
 8008500:	701a      	strb	r2, [r3, #0]
		res = send_cmd(CMD55, 0);
 8008502:	250e      	movs	r5, #14
 8008504:	197c      	adds	r4, r7, r5
 8008506:	2100      	movs	r1, #0
 8008508:	2037      	movs	r0, #55	@ 0x37
 800850a:	f7ff ffe8 	bl	80084de <send_cmd>
 800850e:	0003      	movs	r3, r0
 8008510:	7023      	strb	r3, [r4, #0]
		if (res > 1) return res;
 8008512:	002a      	movs	r2, r5
 8008514:	18bb      	adds	r3, r7, r2
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	2b01      	cmp	r3, #1
 800851a:	d902      	bls.n	8008522 <send_cmd+0x44>
 800851c:	18bb      	adds	r3, r7, r2
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	e067      	b.n	80085f2 <send_cmd+0x114>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8008522:	1dfb      	adds	r3, r7, #7
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	2b0c      	cmp	r3, #12
 8008528:	d007      	beq.n	800853a <send_cmd+0x5c>
		despiselect();
 800852a:	f7ff ff43 	bl	80083b4 <despiselect>
		if (!spiselect()) return 0xFF;
 800852e:	f7ff ff51 	bl	80083d4 <spiselect>
 8008532:	1e03      	subs	r3, r0, #0
 8008534:	d101      	bne.n	800853a <send_cmd+0x5c>
 8008536:	23ff      	movs	r3, #255	@ 0xff
 8008538:	e05b      	b.n	80085f2 <send_cmd+0x114>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800853a:	1dfb      	adds	r3, r7, #7
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	2240      	movs	r2, #64	@ 0x40
 8008540:	4313      	orrs	r3, r2
 8008542:	b2db      	uxtb	r3, r3
 8008544:	0018      	movs	r0, r3
 8008546:	f7ff fec5 	bl	80082d4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	0e1b      	lsrs	r3, r3, #24
 800854e:	b2db      	uxtb	r3, r3
 8008550:	0018      	movs	r0, r3
 8008552:	f7ff febf 	bl	80082d4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	0c1b      	lsrs	r3, r3, #16
 800855a:	b2db      	uxtb	r3, r3
 800855c:	0018      	movs	r0, r3
 800855e:	f7ff feb9 	bl	80082d4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	0a1b      	lsrs	r3, r3, #8
 8008566:	b2db      	uxtb	r3, r3
 8008568:	0018      	movs	r0, r3
 800856a:	f7ff feb3 	bl	80082d4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	b2db      	uxtb	r3, r3
 8008572:	0018      	movs	r0, r3
 8008574:	f7ff feae 	bl	80082d4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8008578:	210f      	movs	r1, #15
 800857a:	187b      	adds	r3, r7, r1
 800857c:	2201      	movs	r2, #1
 800857e:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8008580:	1dfb      	adds	r3, r7, #7
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d102      	bne.n	800858e <send_cmd+0xb0>
 8008588:	187b      	adds	r3, r7, r1
 800858a:	2295      	movs	r2, #149	@ 0x95
 800858c:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800858e:	1dfb      	adds	r3, r7, #7
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	2b08      	cmp	r3, #8
 8008594:	d103      	bne.n	800859e <send_cmd+0xc0>
 8008596:	230f      	movs	r3, #15
 8008598:	18fb      	adds	r3, r7, r3
 800859a:	2287      	movs	r2, #135	@ 0x87
 800859c:	701a      	strb	r2, [r3, #0]
	xchg_spi(n);
 800859e:	230f      	movs	r3, #15
 80085a0:	18fb      	adds	r3, r7, r3
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	0018      	movs	r0, r3
 80085a6:	f7ff fe95 	bl	80082d4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80085aa:	1dfb      	adds	r3, r7, #7
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	2b0c      	cmp	r3, #12
 80085b0:	d102      	bne.n	80085b8 <send_cmd+0xda>
 80085b2:	20ff      	movs	r0, #255	@ 0xff
 80085b4:	f7ff fe8e 	bl	80082d4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80085b8:	230f      	movs	r3, #15
 80085ba:	18fb      	adds	r3, r7, r3
 80085bc:	220a      	movs	r2, #10
 80085be:	701a      	strb	r2, [r3, #0]
	do {
		res = xchg_spi(0xFF);
 80085c0:	250e      	movs	r5, #14
 80085c2:	197c      	adds	r4, r7, r5
 80085c4:	20ff      	movs	r0, #255	@ 0xff
 80085c6:	f7ff fe85 	bl	80082d4 <xchg_spi>
 80085ca:	0003      	movs	r3, r0
 80085cc:	7023      	strb	r3, [r4, #0]
	} while ((res & 0x80) && --n);
 80085ce:	197b      	adds	r3, r7, r5
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	b25b      	sxtb	r3, r3
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	da09      	bge.n	80085ec <send_cmd+0x10e>
 80085d8:	210f      	movs	r1, #15
 80085da:	187b      	adds	r3, r7, r1
 80085dc:	187a      	adds	r2, r7, r1
 80085de:	7812      	ldrb	r2, [r2, #0]
 80085e0:	3a01      	subs	r2, #1
 80085e2:	701a      	strb	r2, [r3, #0]
 80085e4:	187b      	adds	r3, r7, r1
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d1e9      	bne.n	80085c0 <send_cmd+0xe2>

	return res;							/* Return received response */
 80085ec:	230e      	movs	r3, #14
 80085ee:	18fb      	adds	r3, r7, r3
 80085f0:	781b      	ldrb	r3, [r3, #0]
}
 80085f2:	0018      	movs	r0, r3
 80085f4:	46bd      	mov	sp, r7
 80085f6:	b004      	add	sp, #16
 80085f8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080085fc <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80085fc:	b5b0      	push	{r4, r5, r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	0002      	movs	r2, r0
 8008604:	1dfb      	adds	r3, r7, #7
 8008606:	701a      	strb	r2, [r3, #0]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8008608:	1dfb      	adds	r3, r7, #7
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d001      	beq.n	8008614 <USER_SPI_initialize+0x18>
 8008610:	2301      	movs	r3, #1
 8008612:	e100      	b.n	8008816 <USER_SPI_initialize+0x21a>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8008614:	4b82      	ldr	r3, [pc, #520]	@ (8008820 <USER_SPI_initialize+0x224>)
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	b2db      	uxtb	r3, r3
 800861a:	001a      	movs	r2, r3
 800861c:	2302      	movs	r3, #2
 800861e:	4013      	ands	r3, r2
 8008620:	d003      	beq.n	800862a <USER_SPI_initialize+0x2e>
 8008622:	4b7f      	ldr	r3, [pc, #508]	@ (8008820 <USER_SPI_initialize+0x224>)
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	b2db      	uxtb	r3, r3
 8008628:	e0f5      	b.n	8008816 <USER_SPI_initialize+0x21a>

	FCLK_SLOW();
 800862a:	4b7e      	ldr	r3, [pc, #504]	@ (8008824 <USER_SPI_initialize+0x228>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2238      	movs	r2, #56	@ 0x38
 8008632:	4393      	bics	r3, r2
 8008634:	001a      	movs	r2, r3
 8008636:	4b7b      	ldr	r3, [pc, #492]	@ (8008824 <USER_SPI_initialize+0x228>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2130      	movs	r1, #48	@ 0x30
 800863c:	430a      	orrs	r2, r1
 800863e:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8008640:	230f      	movs	r3, #15
 8008642:	18fb      	adds	r3, r7, r3
 8008644:	220a      	movs	r2, #10
 8008646:	701a      	strb	r2, [r3, #0]
 8008648:	e008      	b.n	800865c <USER_SPI_initialize+0x60>
 800864a:	20ff      	movs	r0, #255	@ 0xff
 800864c:	f7ff fe42 	bl	80082d4 <xchg_spi>
 8008650:	210f      	movs	r1, #15
 8008652:	187b      	adds	r3, r7, r1
 8008654:	781a      	ldrb	r2, [r3, #0]
 8008656:	187b      	adds	r3, r7, r1
 8008658:	3a01      	subs	r2, #1
 800865a:	701a      	strb	r2, [r3, #0]
 800865c:	240f      	movs	r4, #15
 800865e:	193b      	adds	r3, r7, r4
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d1f1      	bne.n	800864a <USER_SPI_initialize+0x4e>

	ty = 0;
 8008666:	230d      	movs	r3, #13
 8008668:	18fb      	adds	r3, r7, r3
 800866a:	2200      	movs	r2, #0
 800866c:	701a      	strb	r2, [r3, #0]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800866e:	2100      	movs	r1, #0
 8008670:	2000      	movs	r0, #0
 8008672:	f7ff ff34 	bl	80084de <send_cmd>
 8008676:	0003      	movs	r3, r0
 8008678:	2b01      	cmp	r3, #1
 800867a:	d000      	beq.n	800867e <USER_SPI_initialize+0x82>
 800867c:	e0a6      	b.n	80087cc <USER_SPI_initialize+0x1d0>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800867e:	23fa      	movs	r3, #250	@ 0xfa
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	0018      	movs	r0, r3
 8008684:	f7ff fdfc 	bl	8008280 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8008688:	23d5      	movs	r3, #213	@ 0xd5
 800868a:	005b      	lsls	r3, r3, #1
 800868c:	0019      	movs	r1, r3
 800868e:	2008      	movs	r0, #8
 8008690:	f7ff ff25 	bl	80084de <send_cmd>
 8008694:	0003      	movs	r3, r0
 8008696:	2b01      	cmp	r3, #1
 8008698:	d162      	bne.n	8008760 <USER_SPI_initialize+0x164>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800869a:	193b      	adds	r3, r7, r4
 800869c:	2200      	movs	r2, #0
 800869e:	701a      	strb	r2, [r3, #0]
 80086a0:	e00f      	b.n	80086c2 <USER_SPI_initialize+0xc6>
 80086a2:	250f      	movs	r5, #15
 80086a4:	197b      	adds	r3, r7, r5
 80086a6:	781c      	ldrb	r4, [r3, #0]
 80086a8:	20ff      	movs	r0, #255	@ 0xff
 80086aa:	f7ff fe13 	bl	80082d4 <xchg_spi>
 80086ae:	0003      	movs	r3, r0
 80086b0:	001a      	movs	r2, r3
 80086b2:	2308      	movs	r3, #8
 80086b4:	18fb      	adds	r3, r7, r3
 80086b6:	551a      	strb	r2, [r3, r4]
 80086b8:	197b      	adds	r3, r7, r5
 80086ba:	781a      	ldrb	r2, [r3, #0]
 80086bc:	197b      	adds	r3, r7, r5
 80086be:	3201      	adds	r2, #1
 80086c0:	701a      	strb	r2, [r3, #0]
 80086c2:	230f      	movs	r3, #15
 80086c4:	18fb      	adds	r3, r7, r3
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	2b03      	cmp	r3, #3
 80086ca:	d9ea      	bls.n	80086a2 <USER_SPI_initialize+0xa6>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80086cc:	2208      	movs	r2, #8
 80086ce:	18bb      	adds	r3, r7, r2
 80086d0:	789b      	ldrb	r3, [r3, #2]
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d000      	beq.n	80086d8 <USER_SPI_initialize+0xdc>
 80086d6:	e079      	b.n	80087cc <USER_SPI_initialize+0x1d0>
 80086d8:	18bb      	adds	r3, r7, r2
 80086da:	78db      	ldrb	r3, [r3, #3]
 80086dc:	2baa      	cmp	r3, #170	@ 0xaa
 80086de:	d000      	beq.n	80086e2 <USER_SPI_initialize+0xe6>
 80086e0:	e074      	b.n	80087cc <USER_SPI_initialize+0x1d0>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80086e2:	46c0      	nop			@ (mov r8, r8)
 80086e4:	f7ff fde0 	bl	80082a8 <SPI_Timer_Status>
 80086e8:	1e03      	subs	r3, r0, #0
 80086ea:	d007      	beq.n	80086fc <USER_SPI_initialize+0x100>
 80086ec:	2380      	movs	r3, #128	@ 0x80
 80086ee:	05db      	lsls	r3, r3, #23
 80086f0:	0019      	movs	r1, r3
 80086f2:	20a9      	movs	r0, #169	@ 0xa9
 80086f4:	f7ff fef3 	bl	80084de <send_cmd>
 80086f8:	1e03      	subs	r3, r0, #0
 80086fa:	d1f3      	bne.n	80086e4 <USER_SPI_initialize+0xe8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80086fc:	f7ff fdd4 	bl	80082a8 <SPI_Timer_Status>
 8008700:	1e03      	subs	r3, r0, #0
 8008702:	d063      	beq.n	80087cc <USER_SPI_initialize+0x1d0>
 8008704:	2100      	movs	r1, #0
 8008706:	203a      	movs	r0, #58	@ 0x3a
 8008708:	f7ff fee9 	bl	80084de <send_cmd>
 800870c:	1e03      	subs	r3, r0, #0
 800870e:	d15d      	bne.n	80087cc <USER_SPI_initialize+0x1d0>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8008710:	230f      	movs	r3, #15
 8008712:	18fb      	adds	r3, r7, r3
 8008714:	2200      	movs	r2, #0
 8008716:	701a      	strb	r2, [r3, #0]
 8008718:	e00f      	b.n	800873a <USER_SPI_initialize+0x13e>
 800871a:	250f      	movs	r5, #15
 800871c:	197b      	adds	r3, r7, r5
 800871e:	781c      	ldrb	r4, [r3, #0]
 8008720:	20ff      	movs	r0, #255	@ 0xff
 8008722:	f7ff fdd7 	bl	80082d4 <xchg_spi>
 8008726:	0003      	movs	r3, r0
 8008728:	001a      	movs	r2, r3
 800872a:	2308      	movs	r3, #8
 800872c:	18fb      	adds	r3, r7, r3
 800872e:	551a      	strb	r2, [r3, r4]
 8008730:	197b      	adds	r3, r7, r5
 8008732:	781a      	ldrb	r2, [r3, #0]
 8008734:	197b      	adds	r3, r7, r5
 8008736:	3201      	adds	r2, #1
 8008738:	701a      	strb	r2, [r3, #0]
 800873a:	230f      	movs	r3, #15
 800873c:	18fb      	adds	r3, r7, r3
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	2b03      	cmp	r3, #3
 8008742:	d9ea      	bls.n	800871a <USER_SPI_initialize+0x11e>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8008744:	2308      	movs	r3, #8
 8008746:	18fb      	adds	r3, r7, r3
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	001a      	movs	r2, r3
 800874c:	2340      	movs	r3, #64	@ 0x40
 800874e:	4013      	ands	r3, r2
 8008750:	d001      	beq.n	8008756 <USER_SPI_initialize+0x15a>
 8008752:	220c      	movs	r2, #12
 8008754:	e000      	b.n	8008758 <USER_SPI_initialize+0x15c>
 8008756:	2204      	movs	r2, #4
 8008758:	230d      	movs	r3, #13
 800875a:	18fb      	adds	r3, r7, r3
 800875c:	701a      	strb	r2, [r3, #0]
 800875e:	e035      	b.n	80087cc <USER_SPI_initialize+0x1d0>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8008760:	2100      	movs	r1, #0
 8008762:	20a9      	movs	r0, #169	@ 0xa9
 8008764:	f7ff febb 	bl	80084de <send_cmd>
 8008768:	0003      	movs	r3, r0
 800876a:	2b01      	cmp	r3, #1
 800876c:	d808      	bhi.n	8008780 <USER_SPI_initialize+0x184>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800876e:	230d      	movs	r3, #13
 8008770:	18fb      	adds	r3, r7, r3
 8008772:	2202      	movs	r2, #2
 8008774:	701a      	strb	r2, [r3, #0]
 8008776:	230e      	movs	r3, #14
 8008778:	18fb      	adds	r3, r7, r3
 800877a:	22a9      	movs	r2, #169	@ 0xa9
 800877c:	701a      	strb	r2, [r3, #0]
 800877e:	e007      	b.n	8008790 <USER_SPI_initialize+0x194>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8008780:	230d      	movs	r3, #13
 8008782:	18fb      	adds	r3, r7, r3
 8008784:	2201      	movs	r2, #1
 8008786:	701a      	strb	r2, [r3, #0]
 8008788:	230e      	movs	r3, #14
 800878a:	18fb      	adds	r3, r7, r3
 800878c:	2201      	movs	r2, #1
 800878e:	701a      	strb	r2, [r3, #0]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8008790:	46c0      	nop			@ (mov r8, r8)
 8008792:	f7ff fd89 	bl	80082a8 <SPI_Timer_Status>
 8008796:	1e03      	subs	r3, r0, #0
 8008798:	d008      	beq.n	80087ac <USER_SPI_initialize+0x1b0>
 800879a:	230e      	movs	r3, #14
 800879c:	18fb      	adds	r3, r7, r3
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	2100      	movs	r1, #0
 80087a2:	0018      	movs	r0, r3
 80087a4:	f7ff fe9b 	bl	80084de <send_cmd>
 80087a8:	1e03      	subs	r3, r0, #0
 80087aa:	d1f2      	bne.n	8008792 <USER_SPI_initialize+0x196>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80087ac:	f7ff fd7c 	bl	80082a8 <SPI_Timer_Status>
 80087b0:	1e03      	subs	r3, r0, #0
 80087b2:	d007      	beq.n	80087c4 <USER_SPI_initialize+0x1c8>
 80087b4:	2380      	movs	r3, #128	@ 0x80
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	0019      	movs	r1, r3
 80087ba:	2010      	movs	r0, #16
 80087bc:	f7ff fe8f 	bl	80084de <send_cmd>
 80087c0:	1e03      	subs	r3, r0, #0
 80087c2:	d003      	beq.n	80087cc <USER_SPI_initialize+0x1d0>
				ty = 0;
 80087c4:	230d      	movs	r3, #13
 80087c6:	18fb      	adds	r3, r7, r3
 80087c8:	2200      	movs	r2, #0
 80087ca:	701a      	strb	r2, [r3, #0]
		}
	}
	CardType = ty;	/* Card type */
 80087cc:	4b16      	ldr	r3, [pc, #88]	@ (8008828 <USER_SPI_initialize+0x22c>)
 80087ce:	240d      	movs	r4, #13
 80087d0:	193a      	adds	r2, r7, r4
 80087d2:	7812      	ldrb	r2, [r2, #0]
 80087d4:	701a      	strb	r2, [r3, #0]
	despiselect();
 80087d6:	f7ff fded 	bl	80083b4 <despiselect>

	if (ty) {			/* OK */
 80087da:	193b      	adds	r3, r7, r4
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d013      	beq.n	800880a <USER_SPI_initialize+0x20e>
		FCLK_FAST();			/* Set fast clock */
 80087e2:	4b10      	ldr	r3, [pc, #64]	@ (8008824 <USER_SPI_initialize+0x228>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2238      	movs	r2, #56	@ 0x38
 80087ea:	4393      	bics	r3, r2
 80087ec:	001a      	movs	r2, r3
 80087ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008824 <USER_SPI_initialize+0x228>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2110      	movs	r1, #16
 80087f4:	430a      	orrs	r2, r1
 80087f6:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80087f8:	4b09      	ldr	r3, [pc, #36]	@ (8008820 <USER_SPI_initialize+0x224>)
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	2201      	movs	r2, #1
 8008800:	4393      	bics	r3, r2
 8008802:	b2da      	uxtb	r2, r3
 8008804:	4b06      	ldr	r3, [pc, #24]	@ (8008820 <USER_SPI_initialize+0x224>)
 8008806:	701a      	strb	r2, [r3, #0]
 8008808:	e002      	b.n	8008810 <USER_SPI_initialize+0x214>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800880a:	4b05      	ldr	r3, [pc, #20]	@ (8008820 <USER_SPI_initialize+0x224>)
 800880c:	2201      	movs	r2, #1
 800880e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8008810:	4b03      	ldr	r3, [pc, #12]	@ (8008820 <USER_SPI_initialize+0x224>)
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	b2db      	uxtb	r3, r3
}
 8008816:	0018      	movs	r0, r3
 8008818:	46bd      	mov	sp, r7
 800881a:	b004      	add	sp, #16
 800881c:	bdb0      	pop	{r4, r5, r7, pc}
 800881e:	46c0      	nop			@ (mov r8, r8)
 8008820:	20000020 	.word	0x20000020
 8008824:	200004b4 	.word	0x200004b4
 8008828:	200008c8 	.word	0x200008c8

0800882c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	0002      	movs	r2, r0
 8008834:	1dfb      	adds	r3, r7, #7
 8008836:	701a      	strb	r2, [r3, #0]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8008838:	1dfb      	adds	r3, r7, #7
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d001      	beq.n	8008844 <USER_SPI_status+0x18>
 8008840:	2301      	movs	r3, #1
 8008842:	e002      	b.n	800884a <USER_SPI_status+0x1e>

	return Stat;	/* Return disk status */
 8008844:	4b03      	ldr	r3, [pc, #12]	@ (8008854 <USER_SPI_status+0x28>)
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	b2db      	uxtb	r3, r3
}
 800884a:	0018      	movs	r0, r3
 800884c:	46bd      	mov	sp, r7
 800884e:	b002      	add	sp, #8
 8008850:	bd80      	pop	{r7, pc}
 8008852:	46c0      	nop			@ (mov r8, r8)
 8008854:	20000020 	.word	0x20000020

08008858 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	60b9      	str	r1, [r7, #8]
 8008860:	607a      	str	r2, [r7, #4]
 8008862:	603b      	str	r3, [r7, #0]
 8008864:	210f      	movs	r1, #15
 8008866:	187b      	adds	r3, r7, r1
 8008868:	1c02      	adds	r2, r0, #0
 800886a:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800886c:	187b      	adds	r3, r7, r1
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d102      	bne.n	800887a <USER_SPI_read+0x22>
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d101      	bne.n	800887e <USER_SPI_read+0x26>
 800887a:	2304      	movs	r3, #4
 800887c:	e04f      	b.n	800891e <USER_SPI_read+0xc6>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800887e:	4b2a      	ldr	r3, [pc, #168]	@ (8008928 <USER_SPI_read+0xd0>)
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	b2db      	uxtb	r3, r3
 8008884:	001a      	movs	r2, r3
 8008886:	2301      	movs	r3, #1
 8008888:	4013      	ands	r3, r2
 800888a:	d001      	beq.n	8008890 <USER_SPI_read+0x38>
 800888c:	2303      	movs	r3, #3
 800888e:	e046      	b.n	800891e <USER_SPI_read+0xc6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8008890:	4b26      	ldr	r3, [pc, #152]	@ (800892c <USER_SPI_read+0xd4>)
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	001a      	movs	r2, r3
 8008896:	2308      	movs	r3, #8
 8008898:	4013      	ands	r3, r2
 800889a:	d102      	bne.n	80088a2 <USER_SPI_read+0x4a>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	025b      	lsls	r3, r3, #9
 80088a0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d112      	bne.n	80088ce <USER_SPI_read+0x76>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	0019      	movs	r1, r3
 80088ac:	2011      	movs	r0, #17
 80088ae:	f7ff fe16 	bl	80084de <send_cmd>
 80088b2:	1e03      	subs	r3, r0, #0
 80088b4:	d12d      	bne.n	8008912 <USER_SPI_read+0xba>
			&& rcvr_datablock(buff, 512)) {
 80088b6:	2380      	movs	r3, #128	@ 0x80
 80088b8:	009a      	lsls	r2, r3, #2
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	0011      	movs	r1, r2
 80088be:	0018      	movs	r0, r3
 80088c0:	f7ff fda4 	bl	800840c <rcvr_datablock>
 80088c4:	1e03      	subs	r3, r0, #0
 80088c6:	d024      	beq.n	8008912 <USER_SPI_read+0xba>
			count = 0;
 80088c8:	2300      	movs	r3, #0
 80088ca:	603b      	str	r3, [r7, #0]
 80088cc:	e021      	b.n	8008912 <USER_SPI_read+0xba>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	0019      	movs	r1, r3
 80088d2:	2012      	movs	r0, #18
 80088d4:	f7ff fe03 	bl	80084de <send_cmd>
 80088d8:	1e03      	subs	r3, r0, #0
 80088da:	d11a      	bne.n	8008912 <USER_SPI_read+0xba>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80088dc:	2380      	movs	r3, #128	@ 0x80
 80088de:	009a      	lsls	r2, r3, #2
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	0011      	movs	r1, r2
 80088e4:	0018      	movs	r0, r3
 80088e6:	f7ff fd91 	bl	800840c <rcvr_datablock>
 80088ea:	1e03      	subs	r3, r0, #0
 80088ec:	d00c      	beq.n	8008908 <USER_SPI_read+0xb0>
				buff += 512;
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	2280      	movs	r2, #128	@ 0x80
 80088f2:	0092      	lsls	r2, r2, #2
 80088f4:	4694      	mov	ip, r2
 80088f6:	4463      	add	r3, ip
 80088f8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	3b01      	subs	r3, #1
 80088fe:	603b      	str	r3, [r7, #0]
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1ea      	bne.n	80088dc <USER_SPI_read+0x84>
 8008906:	e000      	b.n	800890a <USER_SPI_read+0xb2>
				if (!rcvr_datablock(buff, 512)) break;
 8008908:	46c0      	nop			@ (mov r8, r8)
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800890a:	2100      	movs	r1, #0
 800890c:	200c      	movs	r0, #12
 800890e:	f7ff fde6 	bl	80084de <send_cmd>
		}
	}
	despiselect();
 8008912:	f7ff fd4f 	bl	80083b4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	1e5a      	subs	r2, r3, #1
 800891a:	4193      	sbcs	r3, r2
 800891c:	b2db      	uxtb	r3, r3
}
 800891e:	0018      	movs	r0, r3
 8008920:	46bd      	mov	sp, r7
 8008922:	b004      	add	sp, #16
 8008924:	bd80      	pop	{r7, pc}
 8008926:	46c0      	nop			@ (mov r8, r8)
 8008928:	20000020 	.word	0x20000020
 800892c:	200008c8 	.word	0x200008c8

08008930 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	60b9      	str	r1, [r7, #8]
 8008938:	607a      	str	r2, [r7, #4]
 800893a:	603b      	str	r3, [r7, #0]
 800893c:	210f      	movs	r1, #15
 800893e:	187b      	adds	r3, r7, r1
 8008940:	1c02      	adds	r2, r0, #0
 8008942:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8008944:	187b      	adds	r3, r7, r1
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d102      	bne.n	8008952 <USER_SPI_write+0x22>
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d101      	bne.n	8008956 <USER_SPI_write+0x26>
 8008952:	2304      	movs	r3, #4
 8008954:	e063      	b.n	8008a1e <USER_SPI_write+0xee>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8008956:	4b34      	ldr	r3, [pc, #208]	@ (8008a28 <USER_SPI_write+0xf8>)
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	b2db      	uxtb	r3, r3
 800895c:	001a      	movs	r2, r3
 800895e:	2301      	movs	r3, #1
 8008960:	4013      	ands	r3, r2
 8008962:	d001      	beq.n	8008968 <USER_SPI_write+0x38>
 8008964:	2303      	movs	r3, #3
 8008966:	e05a      	b.n	8008a1e <USER_SPI_write+0xee>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8008968:	4b2f      	ldr	r3, [pc, #188]	@ (8008a28 <USER_SPI_write+0xf8>)
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	b2db      	uxtb	r3, r3
 800896e:	001a      	movs	r2, r3
 8008970:	2304      	movs	r3, #4
 8008972:	4013      	ands	r3, r2
 8008974:	d001      	beq.n	800897a <USER_SPI_write+0x4a>
 8008976:	2302      	movs	r3, #2
 8008978:	e051      	b.n	8008a1e <USER_SPI_write+0xee>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800897a:	4b2c      	ldr	r3, [pc, #176]	@ (8008a2c <USER_SPI_write+0xfc>)
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	001a      	movs	r2, r3
 8008980:	2308      	movs	r3, #8
 8008982:	4013      	ands	r3, r2
 8008984:	d102      	bne.n	800898c <USER_SPI_write+0x5c>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	025b      	lsls	r3, r3, #9
 800898a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	2b01      	cmp	r3, #1
 8008990:	d110      	bne.n	80089b4 <USER_SPI_write+0x84>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	0019      	movs	r1, r3
 8008996:	2018      	movs	r0, #24
 8008998:	f7ff fda1 	bl	80084de <send_cmd>
 800899c:	1e03      	subs	r3, r0, #0
 800899e:	d138      	bne.n	8008a12 <USER_SPI_write+0xe2>
			&& xmit_datablock(buff, 0xFE)) {
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	21fe      	movs	r1, #254	@ 0xfe
 80089a4:	0018      	movs	r0, r3
 80089a6:	f7ff fd60 	bl	800846a <xmit_datablock>
 80089aa:	1e03      	subs	r3, r0, #0
 80089ac:	d031      	beq.n	8008a12 <USER_SPI_write+0xe2>
			count = 0;
 80089ae:	2300      	movs	r3, #0
 80089b0:	603b      	str	r3, [r7, #0]
 80089b2:	e02e      	b.n	8008a12 <USER_SPI_write+0xe2>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80089b4:	4b1d      	ldr	r3, [pc, #116]	@ (8008a2c <USER_SPI_write+0xfc>)
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	001a      	movs	r2, r3
 80089ba:	2306      	movs	r3, #6
 80089bc:	4013      	ands	r3, r2
 80089be:	d004      	beq.n	80089ca <USER_SPI_write+0x9a>
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	0019      	movs	r1, r3
 80089c4:	2097      	movs	r0, #151	@ 0x97
 80089c6:	f7ff fd8a 	bl	80084de <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	0019      	movs	r1, r3
 80089ce:	2019      	movs	r0, #25
 80089d0:	f7ff fd85 	bl	80084de <send_cmd>
 80089d4:	1e03      	subs	r3, r0, #0
 80089d6:	d11c      	bne.n	8008a12 <USER_SPI_write+0xe2>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	21fc      	movs	r1, #252	@ 0xfc
 80089dc:	0018      	movs	r0, r3
 80089de:	f7ff fd44 	bl	800846a <xmit_datablock>
 80089e2:	1e03      	subs	r3, r0, #0
 80089e4:	d00c      	beq.n	8008a00 <USER_SPI_write+0xd0>
				buff += 512;
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	2280      	movs	r2, #128	@ 0x80
 80089ea:	0092      	lsls	r2, r2, #2
 80089ec:	4694      	mov	ip, r2
 80089ee:	4463      	add	r3, ip
 80089f0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	3b01      	subs	r3, #1
 80089f6:	603b      	str	r3, [r7, #0]
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d1ec      	bne.n	80089d8 <USER_SPI_write+0xa8>
 80089fe:	e000      	b.n	8008a02 <USER_SPI_write+0xd2>
				if (!xmit_datablock(buff, 0xFC)) break;
 8008a00:	46c0      	nop			@ (mov r8, r8)
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8008a02:	21fd      	movs	r1, #253	@ 0xfd
 8008a04:	2000      	movs	r0, #0
 8008a06:	f7ff fd30 	bl	800846a <xmit_datablock>
 8008a0a:	1e03      	subs	r3, r0, #0
 8008a0c:	d101      	bne.n	8008a12 <USER_SPI_write+0xe2>
 8008a0e:	2301      	movs	r3, #1
 8008a10:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8008a12:	f7ff fccf 	bl	80083b4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	1e5a      	subs	r2, r3, #1
 8008a1a:	4193      	sbcs	r3, r2
 8008a1c:	b2db      	uxtb	r3, r3
}
 8008a1e:	0018      	movs	r0, r3
 8008a20:	46bd      	mov	sp, r7
 8008a22:	b004      	add	sp, #16
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	46c0      	nop			@ (mov r8, r8)
 8008a28:	20000020 	.word	0x20000020
 8008a2c:	200008c8 	.word	0x200008c8

08008a30 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8008a30:	b590      	push	{r4, r7, lr}
 8008a32:	b08d      	sub	sp, #52	@ 0x34
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	603a      	str	r2, [r7, #0]
 8008a38:	1dfb      	adds	r3, r7, #7
 8008a3a:	1c02      	adds	r2, r0, #0
 8008a3c:	701a      	strb	r2, [r3, #0]
 8008a3e:	1dbb      	adds	r3, r7, #6
 8008a40:	1c0a      	adds	r2, r1, #0
 8008a42:	701a      	strb	r2, [r3, #0]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8008a44:	1dfb      	adds	r3, r7, #7
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d001      	beq.n	8008a50 <USER_SPI_ioctl+0x20>
 8008a4c:	2304      	movs	r3, #4
 8008a4e:	e178      	b.n	8008d42 <USER_SPI_ioctl+0x312>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8008a50:	4bbe      	ldr	r3, [pc, #760]	@ (8008d4c <USER_SPI_ioctl+0x31c>)
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	001a      	movs	r2, r3
 8008a58:	2301      	movs	r3, #1
 8008a5a:	4013      	ands	r3, r2
 8008a5c:	d001      	beq.n	8008a62 <USER_SPI_ioctl+0x32>
 8008a5e:	2303      	movs	r3, #3
 8008a60:	e16f      	b.n	8008d42 <USER_SPI_ioctl+0x312>

	res = RES_ERROR;
 8008a62:	232f      	movs	r3, #47	@ 0x2f
 8008a64:	18fb      	adds	r3, r7, r3
 8008a66:	2201      	movs	r2, #1
 8008a68:	701a      	strb	r2, [r3, #0]

	switch (cmd) {
 8008a6a:	1dbb      	adds	r3, r7, #6
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	2b04      	cmp	r3, #4
 8008a70:	d100      	bne.n	8008a74 <USER_SPI_ioctl+0x44>
 8008a72:	e100      	b.n	8008c76 <USER_SPI_ioctl+0x246>
 8008a74:	dd00      	ble.n	8008a78 <USER_SPI_ioctl+0x48>
 8008a76:	e14d      	b.n	8008d14 <USER_SPI_ioctl+0x2e4>
 8008a78:	2b03      	cmp	r3, #3
 8008a7a:	d100      	bne.n	8008a7e <USER_SPI_ioctl+0x4e>
 8008a7c:	e074      	b.n	8008b68 <USER_SPI_ioctl+0x138>
 8008a7e:	dd00      	ble.n	8008a82 <USER_SPI_ioctl+0x52>
 8008a80:	e148      	b.n	8008d14 <USER_SPI_ioctl+0x2e4>
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d002      	beq.n	8008a8c <USER_SPI_ioctl+0x5c>
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d00a      	beq.n	8008aa0 <USER_SPI_ioctl+0x70>
 8008a8a:	e143      	b.n	8008d14 <USER_SPI_ioctl+0x2e4>
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8008a8c:	f7ff fca2 	bl	80083d4 <spiselect>
 8008a90:	1e03      	subs	r3, r0, #0
 8008a92:	d100      	bne.n	8008a96 <USER_SPI_ioctl+0x66>
 8008a94:	e143      	b.n	8008d1e <USER_SPI_ioctl+0x2ee>
 8008a96:	232f      	movs	r3, #47	@ 0x2f
 8008a98:	18fb      	adds	r3, r7, r3
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	701a      	strb	r2, [r3, #0]
		break;
 8008a9e:	e13e      	b.n	8008d1e <USER_SPI_ioctl+0x2ee>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8008aa0:	2100      	movs	r1, #0
 8008aa2:	2009      	movs	r0, #9
 8008aa4:	f7ff fd1b 	bl	80084de <send_cmd>
 8008aa8:	1e03      	subs	r3, r0, #0
 8008aaa:	d000      	beq.n	8008aae <USER_SPI_ioctl+0x7e>
 8008aac:	e139      	b.n	8008d22 <USER_SPI_ioctl+0x2f2>
 8008aae:	240c      	movs	r4, #12
 8008ab0:	193b      	adds	r3, r7, r4
 8008ab2:	2110      	movs	r1, #16
 8008ab4:	0018      	movs	r0, r3
 8008ab6:	f7ff fca9 	bl	800840c <rcvr_datablock>
 8008aba:	1e03      	subs	r3, r0, #0
 8008abc:	d100      	bne.n	8008ac0 <USER_SPI_ioctl+0x90>
 8008abe:	e130      	b.n	8008d22 <USER_SPI_ioctl+0x2f2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8008ac0:	0020      	movs	r0, r4
 8008ac2:	183b      	adds	r3, r7, r0
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	099b      	lsrs	r3, r3, #6
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d115      	bne.n	8008afa <USER_SPI_ioctl+0xca>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8008ace:	183b      	adds	r3, r7, r0
 8008ad0:	7a5b      	ldrb	r3, [r3, #9]
 8008ad2:	001a      	movs	r2, r3
 8008ad4:	183b      	adds	r3, r7, r0
 8008ad6:	7a1b      	ldrb	r3, [r3, #8]
 8008ad8:	021b      	lsls	r3, r3, #8
 8008ada:	18d3      	adds	r3, r2, r3
 8008adc:	0019      	movs	r1, r3
 8008ade:	183b      	adds	r3, r7, r0
 8008ae0:	79db      	ldrb	r3, [r3, #7]
 8008ae2:	041a      	lsls	r2, r3, #16
 8008ae4:	23fc      	movs	r3, #252	@ 0xfc
 8008ae6:	039b      	lsls	r3, r3, #14
 8008ae8:	4013      	ands	r3, r2
 8008aea:	18cb      	adds	r3, r1, r3
 8008aec:	3301      	adds	r3, #1
 8008aee:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	029a      	lsls	r2, r3, #10
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	601a      	str	r2, [r3, #0]
 8008af8:	e031      	b.n	8008b5e <USER_SPI_ioctl+0x12e>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8008afa:	200c      	movs	r0, #12
 8008afc:	183b      	adds	r3, r7, r0
 8008afe:	795b      	ldrb	r3, [r3, #5]
 8008b00:	220f      	movs	r2, #15
 8008b02:	4013      	ands	r3, r2
 8008b04:	b2da      	uxtb	r2, r3
 8008b06:	183b      	adds	r3, r7, r0
 8008b08:	7a9b      	ldrb	r3, [r3, #10]
 8008b0a:	09db      	lsrs	r3, r3, #7
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	18d3      	adds	r3, r2, r3
 8008b10:	b2da      	uxtb	r2, r3
 8008b12:	183b      	adds	r3, r7, r0
 8008b14:	7a5b      	ldrb	r3, [r3, #9]
 8008b16:	005b      	lsls	r3, r3, #1
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	2106      	movs	r1, #6
 8008b1c:	400b      	ands	r3, r1
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	18d3      	adds	r3, r2, r3
 8008b22:	b2da      	uxtb	r2, r3
 8008b24:	242e      	movs	r4, #46	@ 0x2e
 8008b26:	193b      	adds	r3, r7, r4
 8008b28:	3202      	adds	r2, #2
 8008b2a:	701a      	strb	r2, [r3, #0]
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8008b2c:	183b      	adds	r3, r7, r0
 8008b2e:	7a1b      	ldrb	r3, [r3, #8]
 8008b30:	099b      	lsrs	r3, r3, #6
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	001a      	movs	r2, r3
 8008b36:	183b      	adds	r3, r7, r0
 8008b38:	79db      	ldrb	r3, [r3, #7]
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	18d2      	adds	r2, r2, r3
 8008b3e:	183b      	adds	r3, r7, r0
 8008b40:	799b      	ldrb	r3, [r3, #6]
 8008b42:	0299      	lsls	r1, r3, #10
 8008b44:	23c0      	movs	r3, #192	@ 0xc0
 8008b46:	011b      	lsls	r3, r3, #4
 8008b48:	400b      	ands	r3, r1
 8008b4a:	18d3      	adds	r3, r2, r3
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8008b50:	193b      	adds	r3, r7, r4
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	3b09      	subs	r3, #9
 8008b56:	69fa      	ldr	r2, [r7, #28]
 8008b58:	409a      	lsls	r2, r3
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8008b5e:	232f      	movs	r3, #47	@ 0x2f
 8008b60:	18fb      	adds	r3, r7, r3
 8008b62:	2200      	movs	r2, #0
 8008b64:	701a      	strb	r2, [r3, #0]
		}
		break;
 8008b66:	e0dc      	b.n	8008d22 <USER_SPI_ioctl+0x2f2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8008b68:	4b79      	ldr	r3, [pc, #484]	@ (8008d50 <USER_SPI_ioctl+0x320>)
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	001a      	movs	r2, r3
 8008b6e:	2304      	movs	r3, #4
 8008b70:	4013      	ands	r3, r2
 8008b72:	d035      	beq.n	8008be0 <USER_SPI_ioctl+0x1b0>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8008b74:	2100      	movs	r1, #0
 8008b76:	208d      	movs	r0, #141	@ 0x8d
 8008b78:	f7ff fcb1 	bl	80084de <send_cmd>
 8008b7c:	1e03      	subs	r3, r0, #0
 8008b7e:	d000      	beq.n	8008b82 <USER_SPI_ioctl+0x152>
 8008b80:	e0d1      	b.n	8008d26 <USER_SPI_ioctl+0x2f6>
				xchg_spi(0xFF);
 8008b82:	20ff      	movs	r0, #255	@ 0xff
 8008b84:	f7ff fba6 	bl	80082d4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8008b88:	230c      	movs	r3, #12
 8008b8a:	18fb      	adds	r3, r7, r3
 8008b8c:	2110      	movs	r1, #16
 8008b8e:	0018      	movs	r0, r3
 8008b90:	f7ff fc3c 	bl	800840c <rcvr_datablock>
 8008b94:	1e03      	subs	r3, r0, #0
 8008b96:	d100      	bne.n	8008b9a <USER_SPI_ioctl+0x16a>
 8008b98:	e0c5      	b.n	8008d26 <USER_SPI_ioctl+0x2f6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8008b9a:	232e      	movs	r3, #46	@ 0x2e
 8008b9c:	18fb      	adds	r3, r7, r3
 8008b9e:	2230      	movs	r2, #48	@ 0x30
 8008ba0:	701a      	strb	r2, [r3, #0]
 8008ba2:	e008      	b.n	8008bb6 <USER_SPI_ioctl+0x186>
 8008ba4:	20ff      	movs	r0, #255	@ 0xff
 8008ba6:	f7ff fb95 	bl	80082d4 <xchg_spi>
 8008baa:	212e      	movs	r1, #46	@ 0x2e
 8008bac:	187b      	adds	r3, r7, r1
 8008bae:	781a      	ldrb	r2, [r3, #0]
 8008bb0:	187b      	adds	r3, r7, r1
 8008bb2:	3a01      	subs	r2, #1
 8008bb4:	701a      	strb	r2, [r3, #0]
 8008bb6:	232e      	movs	r3, #46	@ 0x2e
 8008bb8:	18fb      	adds	r3, r7, r3
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d1f1      	bne.n	8008ba4 <USER_SPI_ioctl+0x174>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8008bc0:	230c      	movs	r3, #12
 8008bc2:	18fb      	adds	r3, r7, r3
 8008bc4:	7a9b      	ldrb	r3, [r3, #10]
 8008bc6:	091b      	lsrs	r3, r3, #4
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	001a      	movs	r2, r3
 8008bcc:	2310      	movs	r3, #16
 8008bce:	4093      	lsls	r3, r2
 8008bd0:	001a      	movs	r2, r3
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8008bd6:	232f      	movs	r3, #47	@ 0x2f
 8008bd8:	18fb      	adds	r3, r7, r3
 8008bda:	2200      	movs	r2, #0
 8008bdc:	701a      	strb	r2, [r3, #0]
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8008bde:	e0a2      	b.n	8008d26 <USER_SPI_ioctl+0x2f6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8008be0:	2100      	movs	r1, #0
 8008be2:	2009      	movs	r0, #9
 8008be4:	f7ff fc7b 	bl	80084de <send_cmd>
 8008be8:	1e03      	subs	r3, r0, #0
 8008bea:	d000      	beq.n	8008bee <USER_SPI_ioctl+0x1be>
 8008bec:	e09b      	b.n	8008d26 <USER_SPI_ioctl+0x2f6>
 8008bee:	240c      	movs	r4, #12
 8008bf0:	193b      	adds	r3, r7, r4
 8008bf2:	2110      	movs	r1, #16
 8008bf4:	0018      	movs	r0, r3
 8008bf6:	f7ff fc09 	bl	800840c <rcvr_datablock>
 8008bfa:	1e03      	subs	r3, r0, #0
 8008bfc:	d100      	bne.n	8008c00 <USER_SPI_ioctl+0x1d0>
 8008bfe:	e092      	b.n	8008d26 <USER_SPI_ioctl+0x2f6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8008c00:	4b53      	ldr	r3, [pc, #332]	@ (8008d50 <USER_SPI_ioctl+0x320>)
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	001a      	movs	r2, r3
 8008c06:	2302      	movs	r3, #2
 8008c08:	4013      	ands	r3, r2
 8008c0a:	d016      	beq.n	8008c3a <USER_SPI_ioctl+0x20a>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8008c0c:	0021      	movs	r1, r4
 8008c0e:	187b      	adds	r3, r7, r1
 8008c10:	7a9b      	ldrb	r3, [r3, #10]
 8008c12:	005b      	lsls	r3, r3, #1
 8008c14:	227e      	movs	r2, #126	@ 0x7e
 8008c16:	4013      	ands	r3, r2
 8008c18:	187a      	adds	r2, r7, r1
 8008c1a:	7ad2      	ldrb	r2, [r2, #11]
 8008c1c:	09d2      	lsrs	r2, r2, #7
 8008c1e:	b2d2      	uxtb	r2, r2
 8008c20:	189b      	adds	r3, r3, r2
 8008c22:	1c5a      	adds	r2, r3, #1
 8008c24:	187b      	adds	r3, r7, r1
 8008c26:	7b5b      	ldrb	r3, [r3, #13]
 8008c28:	099b      	lsrs	r3, r3, #6
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	409a      	lsls	r2, r3
 8008c30:	0013      	movs	r3, r2
 8008c32:	001a      	movs	r2, r3
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	601a      	str	r2, [r3, #0]
 8008c38:	e018      	b.n	8008c6c <USER_SPI_ioctl+0x23c>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8008c3a:	210c      	movs	r1, #12
 8008c3c:	187b      	adds	r3, r7, r1
 8008c3e:	7a9b      	ldrb	r3, [r3, #10]
 8008c40:	109b      	asrs	r3, r3, #2
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	001a      	movs	r2, r3
 8008c46:	231f      	movs	r3, #31
 8008c48:	4013      	ands	r3, r2
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	0008      	movs	r0, r1
 8008c4e:	187a      	adds	r2, r7, r1
 8008c50:	7ad2      	ldrb	r2, [r2, #11]
 8008c52:	00d2      	lsls	r2, r2, #3
 8008c54:	2118      	movs	r1, #24
 8008c56:	400a      	ands	r2, r1
 8008c58:	1839      	adds	r1, r7, r0
 8008c5a:	7ac9      	ldrb	r1, [r1, #11]
 8008c5c:	0949      	lsrs	r1, r1, #5
 8008c5e:	b2c9      	uxtb	r1, r1
 8008c60:	1852      	adds	r2, r2, r1
 8008c62:	3201      	adds	r2, #1
 8008c64:	4353      	muls	r3, r2
 8008c66:	001a      	movs	r2, r3
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8008c6c:	232f      	movs	r3, #47	@ 0x2f
 8008c6e:	18fb      	adds	r3, r7, r3
 8008c70:	2200      	movs	r2, #0
 8008c72:	701a      	strb	r2, [r3, #0]
		break;
 8008c74:	e057      	b.n	8008d26 <USER_SPI_ioctl+0x2f6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8008c76:	4b36      	ldr	r3, [pc, #216]	@ (8008d50 <USER_SPI_ioctl+0x320>)
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	001a      	movs	r2, r3
 8008c7c:	2306      	movs	r3, #6
 8008c7e:	4013      	ands	r3, r2
 8008c80:	d053      	beq.n	8008d2a <USER_SPI_ioctl+0x2fa>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8008c82:	240c      	movs	r4, #12
 8008c84:	193a      	adds	r2, r7, r4
 8008c86:	1dfb      	adds	r3, r7, #7
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	210b      	movs	r1, #11
 8008c8c:	0018      	movs	r0, r3
 8008c8e:	f7ff fecf 	bl	8008a30 <USER_SPI_ioctl>
 8008c92:	1e03      	subs	r3, r0, #0
 8008c94:	d14b      	bne.n	8008d2e <USER_SPI_ioctl+0x2fe>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8008c96:	193b      	adds	r3, r7, r4
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	099b      	lsrs	r3, r3, #6
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d105      	bne.n	8008cae <USER_SPI_ioctl+0x27e>
 8008ca2:	193b      	adds	r3, r7, r4
 8008ca4:	7a9b      	ldrb	r3, [r3, #10]
 8008ca6:	001a      	movs	r2, r3
 8008ca8:	2340      	movs	r3, #64	@ 0x40
 8008caa:	4013      	ands	r3, r2
 8008cac:	d041      	beq.n	8008d32 <USER_SPI_ioctl+0x302>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	623b      	str	r3, [r7, #32]
 8008cb2:	6a3b      	ldr	r3, [r7, #32]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008cb8:	6a3b      	ldr	r3, [r7, #32]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8008cbe:	4b24      	ldr	r3, [pc, #144]	@ (8008d50 <USER_SPI_ioctl+0x320>)
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	001a      	movs	r2, r3
 8008cc4:	2308      	movs	r3, #8
 8008cc6:	4013      	ands	r3, r2
 8008cc8:	d105      	bne.n	8008cd6 <USER_SPI_ioctl+0x2a6>
			st *= 512; ed *= 512;
 8008cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ccc:	025b      	lsls	r3, r3, #9
 8008cce:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd2:	025b      	lsls	r3, r3, #9
 8008cd4:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8008cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cd8:	0019      	movs	r1, r3
 8008cda:	2020      	movs	r0, #32
 8008cdc:	f7ff fbff 	bl	80084de <send_cmd>
 8008ce0:	1e03      	subs	r3, r0, #0
 8008ce2:	d128      	bne.n	8008d36 <USER_SPI_ioctl+0x306>
 8008ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce6:	0019      	movs	r1, r3
 8008ce8:	2021      	movs	r0, #33	@ 0x21
 8008cea:	f7ff fbf8 	bl	80084de <send_cmd>
 8008cee:	1e03      	subs	r3, r0, #0
 8008cf0:	d121      	bne.n	8008d36 <USER_SPI_ioctl+0x306>
 8008cf2:	2100      	movs	r1, #0
 8008cf4:	2026      	movs	r0, #38	@ 0x26
 8008cf6:	f7ff fbf2 	bl	80084de <send_cmd>
 8008cfa:	1e03      	subs	r3, r0, #0
 8008cfc:	d11b      	bne.n	8008d36 <USER_SPI_ioctl+0x306>
 8008cfe:	4b15      	ldr	r3, [pc, #84]	@ (8008d54 <USER_SPI_ioctl+0x324>)
 8008d00:	0018      	movs	r0, r3
 8008d02:	f7ff fb2f 	bl	8008364 <wait_ready>
 8008d06:	1e03      	subs	r3, r0, #0
 8008d08:	d015      	beq.n	8008d36 <USER_SPI_ioctl+0x306>
			res = RES_OK;	/* FatFs does not check result of this command */
 8008d0a:	232f      	movs	r3, #47	@ 0x2f
 8008d0c:	18fb      	adds	r3, r7, r3
 8008d0e:	2200      	movs	r2, #0
 8008d10:	701a      	strb	r2, [r3, #0]
		}
		break;
 8008d12:	e010      	b.n	8008d36 <USER_SPI_ioctl+0x306>

	default:
		res = RES_PARERR;
 8008d14:	232f      	movs	r3, #47	@ 0x2f
 8008d16:	18fb      	adds	r3, r7, r3
 8008d18:	2204      	movs	r2, #4
 8008d1a:	701a      	strb	r2, [r3, #0]
 8008d1c:	e00c      	b.n	8008d38 <USER_SPI_ioctl+0x308>
		break;
 8008d1e:	46c0      	nop			@ (mov r8, r8)
 8008d20:	e00a      	b.n	8008d38 <USER_SPI_ioctl+0x308>
		break;
 8008d22:	46c0      	nop			@ (mov r8, r8)
 8008d24:	e008      	b.n	8008d38 <USER_SPI_ioctl+0x308>
		break;
 8008d26:	46c0      	nop			@ (mov r8, r8)
 8008d28:	e006      	b.n	8008d38 <USER_SPI_ioctl+0x308>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8008d2a:	46c0      	nop			@ (mov r8, r8)
 8008d2c:	e004      	b.n	8008d38 <USER_SPI_ioctl+0x308>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8008d2e:	46c0      	nop			@ (mov r8, r8)
 8008d30:	e002      	b.n	8008d38 <USER_SPI_ioctl+0x308>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8008d32:	46c0      	nop			@ (mov r8, r8)
 8008d34:	e000      	b.n	8008d38 <USER_SPI_ioctl+0x308>
		break;
 8008d36:	46c0      	nop			@ (mov r8, r8)
	}

	despiselect();
 8008d38:	f7ff fb3c 	bl	80083b4 <despiselect>

	return res;
 8008d3c:	232f      	movs	r3, #47	@ 0x2f
 8008d3e:	18fb      	adds	r3, r7, r3
 8008d40:	781b      	ldrb	r3, [r3, #0]
}
 8008d42:	0018      	movs	r0, r3
 8008d44:	46bd      	mov	sp, r7
 8008d46:	b00d      	add	sp, #52	@ 0x34
 8008d48:	bd90      	pop	{r4, r7, pc}
 8008d4a:	46c0      	nop			@ (mov r8, r8)
 8008d4c:	20000020 	.word	0x20000020
 8008d50:	200008c8 	.word	0x200008c8
 8008d54:	00007530 	.word	0x00007530

08008d58 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008d58:	b590      	push	{r4, r7, lr}
 8008d5a:	b087      	sub	sp, #28
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	60b9      	str	r1, [r7, #8]
 8008d62:	1dfb      	adds	r3, r7, #7
 8008d64:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 8008d66:	2417      	movs	r4, #23
 8008d68:	193b      	adds	r3, r7, r4
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 8008d6e:	2016      	movs	r0, #22
 8008d70:	183b      	adds	r3, r7, r0
 8008d72:	2200      	movs	r2, #0
 8008d74:	701a      	strb	r2, [r3, #0]

  if(disk.nbr < _VOLUMES)
 8008d76:	4b21      	ldr	r3, [pc, #132]	@ (8008dfc <FATFS_LinkDriverEx+0xa4>)
 8008d78:	7a5b      	ldrb	r3, [r3, #9]
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d136      	bne.n	8008dee <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008d80:	4b1e      	ldr	r3, [pc, #120]	@ (8008dfc <FATFS_LinkDriverEx+0xa4>)
 8008d82:	7a5b      	ldrb	r3, [r3, #9]
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	001a      	movs	r2, r3
 8008d88:	4b1c      	ldr	r3, [pc, #112]	@ (8008dfc <FATFS_LinkDriverEx+0xa4>)
 8008d8a:	2100      	movs	r1, #0
 8008d8c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008d8e:	4b1b      	ldr	r3, [pc, #108]	@ (8008dfc <FATFS_LinkDriverEx+0xa4>)
 8008d90:	7a5b      	ldrb	r3, [r3, #9]
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	4a19      	ldr	r2, [pc, #100]	@ (8008dfc <FATFS_LinkDriverEx+0xa4>)
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	18d3      	adds	r3, r2, r3
 8008d9a:	3304      	adds	r3, #4
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;
 8008da0:	4b16      	ldr	r3, [pc, #88]	@ (8008dfc <FATFS_LinkDriverEx+0xa4>)
 8008da2:	7a5b      	ldrb	r3, [r3, #9]
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	001a      	movs	r2, r3
 8008da8:	4b14      	ldr	r3, [pc, #80]	@ (8008dfc <FATFS_LinkDriverEx+0xa4>)
 8008daa:	189b      	adds	r3, r3, r2
 8008dac:	1dfa      	adds	r2, r7, #7
 8008dae:	7812      	ldrb	r2, [r2, #0]
 8008db0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008db2:	4b12      	ldr	r3, [pc, #72]	@ (8008dfc <FATFS_LinkDriverEx+0xa4>)
 8008db4:	7a5b      	ldrb	r3, [r3, #9]
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	1c5a      	adds	r2, r3, #1
 8008dba:	b2d1      	uxtb	r1, r2
 8008dbc:	4a0f      	ldr	r2, [pc, #60]	@ (8008dfc <FATFS_LinkDriverEx+0xa4>)
 8008dbe:	7251      	strb	r1, [r2, #9]
 8008dc0:	183a      	adds	r2, r7, r0
 8008dc2:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 8008dc4:	183b      	adds	r3, r7, r0
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	3330      	adds	r3, #48	@ 0x30
 8008dca:	b2da      	uxtb	r2, r3
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	223a      	movs	r2, #58	@ 0x3a
 8008dd6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	3302      	adds	r3, #2
 8008ddc:	222f      	movs	r2, #47	@ 0x2f
 8008dde:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	3303      	adds	r3, #3
 8008de4:	2200      	movs	r2, #0
 8008de6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008de8:	193b      	adds	r3, r7, r4
 8008dea:	2200      	movs	r2, #0
 8008dec:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8008dee:	2317      	movs	r3, #23
 8008df0:	18fb      	adds	r3, r7, r3
 8008df2:	781b      	ldrb	r3, [r3, #0]
}
 8008df4:	0018      	movs	r0, r3
 8008df6:	46bd      	mov	sp, r7
 8008df8:	b007      	add	sp, #28
 8008dfa:	bd90      	pop	{r4, r7, pc}
 8008dfc:	200008d4 	.word	0x200008d4

08008e00 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008e0a:	6839      	ldr	r1, [r7, #0]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	0018      	movs	r0, r3
 8008e12:	f7ff ffa1 	bl	8008d58 <FATFS_LinkDriverEx>
 8008e16:	0003      	movs	r3, r0
}
 8008e18:	0018      	movs	r0, r3
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	b002      	add	sp, #8
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	0002      	movs	r2, r0
 8008e28:	1dbb      	adds	r3, r7, #6
 8008e2a:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008e30:	1dbb      	adds	r3, r7, #6
 8008e32:	2200      	movs	r2, #0
 8008e34:	5e9b      	ldrsh	r3, [r3, r2]
 8008e36:	2b84      	cmp	r3, #132	@ 0x84
 8008e38:	d006      	beq.n	8008e48 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8008e3a:	1dbb      	adds	r3, r7, #6
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	5e9a      	ldrsh	r2, [r3, r2]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	18d3      	adds	r3, r2, r3
 8008e44:	3303      	adds	r3, #3
 8008e46:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008e48:	68fb      	ldr	r3, [r7, #12]
}
 8008e4a:	0018      	movs	r0, r3
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	b004      	add	sp, #16
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008e56:	f000 fcf3 	bl	8009840 <vTaskStartScheduler>
  
  return osOK;
 8008e5a:	2300      	movs	r3, #0
}
 8008e5c:	0018      	movs	r0, r3
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008e62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e64:	b089      	sub	sp, #36	@ 0x24
 8008e66:	af04      	add	r7, sp, #16
 8008e68:	6078      	str	r0, [r7, #4]
 8008e6a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	695b      	ldr	r3, [r3, #20]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d020      	beq.n	8008eb6 <osThreadCreate+0x54>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	699b      	ldr	r3, [r3, #24]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d01c      	beq.n	8008eb6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	685c      	ldr	r4, [r3, #4]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	691e      	ldr	r6, [r3, #16]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2208      	movs	r2, #8
 8008e8c:	5e9b      	ldrsh	r3, [r3, r2]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e8e:	0018      	movs	r0, r3
 8008e90:	f7ff ffc6 	bl	8008e20 <makeFreeRtosPriority>
              thread_def->buffer, thread_def->controlblock);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	695a      	ldr	r2, [r3, #20]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e9c:	6839      	ldr	r1, [r7, #0]
 8008e9e:	9302      	str	r3, [sp, #8]
 8008ea0:	9201      	str	r2, [sp, #4]
 8008ea2:	9000      	str	r0, [sp, #0]
 8008ea4:	000b      	movs	r3, r1
 8008ea6:	0032      	movs	r2, r6
 8008ea8:	0029      	movs	r1, r5
 8008eaa:	0020      	movs	r0, r4
 8008eac:	f000 fb4f 	bl	800954e <xTaskCreateStatic>
 8008eb0:	0003      	movs	r3, r0
 8008eb2:	60fb      	str	r3, [r7, #12]
 8008eb4:	e01d      	b.n	8008ef2 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	685c      	ldr	r4, [r3, #4]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008ec2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2208      	movs	r2, #8
 8008ec8:	5e9b      	ldrsh	r3, [r3, r2]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008eca:	0018      	movs	r0, r3
 8008ecc:	f7ff ffa8 	bl	8008e20 <makeFreeRtosPriority>
 8008ed0:	0001      	movs	r1, r0
 8008ed2:	683a      	ldr	r2, [r7, #0]
 8008ed4:	230c      	movs	r3, #12
 8008ed6:	18fb      	adds	r3, r7, r3
 8008ed8:	9301      	str	r3, [sp, #4]
 8008eda:	9100      	str	r1, [sp, #0]
 8008edc:	0013      	movs	r3, r2
 8008ede:	0032      	movs	r2, r6
 8008ee0:	0029      	movs	r1, r5
 8008ee2:	0020      	movs	r0, r4
 8008ee4:	f000 fb7a 	bl	80095dc <xTaskCreate>
 8008ee8:	0003      	movs	r3, r0
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d001      	beq.n	8008ef2 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	e000      	b.n	8008ef4 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
}
 8008ef4:	0018      	movs	r0, r3
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	b005      	add	sp, #20
 8008efa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008efc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	3308      	adds	r3, #8
 8008f08:	001a      	movs	r2, r3
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2201      	movs	r2, #1
 8008f12:	4252      	negs	r2, r2
 8008f14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	3308      	adds	r3, #8
 8008f1a:	001a      	movs	r2, r3
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	3308      	adds	r3, #8
 8008f24:	001a      	movs	r2, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008f30:	46c0      	nop			@ (mov r8, r8)
 8008f32:	46bd      	mov	sp, r7
 8008f34:	b002      	add	sp, #8
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008f46:	46c0      	nop			@ (mov r8, r8)
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	b002      	add	sp, #8
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b084      	sub	sp, #16
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
 8008f56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	689a      	ldr	r2, [r3, #8]
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	683a      	ldr	r2, [r7, #0]
 8008f72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	683a      	ldr	r2, [r7, #0]
 8008f78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	1c5a      	adds	r2, r3, #1
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	601a      	str	r2, [r3, #0]
}
 8008f8a:	46c0      	nop			@ (mov r8, r8)
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	b004      	add	sp, #16
 8008f90:	bd80      	pop	{r7, pc}

08008f92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b084      	sub	sp, #16
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
 8008f9a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	d103      	bne.n	8008fb0 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	691b      	ldr	r3, [r3, #16]
 8008fac:	60fb      	str	r3, [r7, #12]
 8008fae:	e00c      	b.n	8008fca <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	3308      	adds	r3, #8
 8008fb4:	60fb      	str	r3, [r7, #12]
 8008fb6:	e002      	b.n	8008fbe <vListInsert+0x2c>
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	60fb      	str	r3, [r7, #12]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	68ba      	ldr	r2, [r7, #8]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d2f6      	bcs.n	8008fb8 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	685a      	ldr	r2, [r3, #4]
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	683a      	ldr	r2, [r7, #0]
 8008fd8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	68fa      	ldr	r2, [r7, #12]
 8008fde:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	683a      	ldr	r2, [r7, #0]
 8008fe4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	1c5a      	adds	r2, r3, #1
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	601a      	str	r2, [r3, #0]
}
 8008ff6:	46c0      	nop			@ (mov r8, r8)
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	b004      	add	sp, #16
 8008ffc:	bd80      	pop	{r7, pc}

08008ffe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008ffe:	b580      	push	{r7, lr}
 8009000:	b084      	sub	sp, #16
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	691b      	ldr	r3, [r3, #16]
 800900a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	6892      	ldr	r2, [r2, #8]
 8009014:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	6852      	ldr	r2, [r2, #4]
 800901e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	429a      	cmp	r2, r3
 8009028:	d103      	bne.n	8009032 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	689a      	ldr	r2, [r3, #8]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2200      	movs	r2, #0
 8009036:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	1e5a      	subs	r2, r3, #1
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
}
 8009046:	0018      	movs	r0, r3
 8009048:	46bd      	mov	sp, r7
 800904a:	b004      	add	sp, #16
 800904c:	bd80      	pop	{r7, pc}

0800904e <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800904e:	b580      	push	{r7, lr}
 8009050:	b084      	sub	sp, #16
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
 8009056:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d102      	bne.n	8009068 <xQueueGenericReset+0x1a>
 8009062:	b672      	cpsid	i
 8009064:	46c0      	nop			@ (mov r8, r8)
 8009066:	e7fd      	b.n	8009064 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8009068:	f001 f982 	bl	800a370 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009078:	434b      	muls	r3, r1
 800907a:	18d2      	adds	r2, r2, r3
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2200      	movs	r2, #0
 8009084:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009096:	1e59      	subs	r1, r3, #1
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800909c:	434b      	muls	r3, r1
 800909e:	18d2      	adds	r2, r2, r3
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2244      	movs	r2, #68	@ 0x44
 80090a8:	21ff      	movs	r1, #255	@ 0xff
 80090aa:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2245      	movs	r2, #69	@ 0x45
 80090b0:	21ff      	movs	r1, #255	@ 0xff
 80090b2:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d10d      	bne.n	80090d6 <xQueueGenericReset+0x88>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d013      	beq.n	80090ea <xQueueGenericReset+0x9c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	3310      	adds	r3, #16
 80090c6:	0018      	movs	r0, r3
 80090c8:	f000 fdc2 	bl	8009c50 <xTaskRemoveFromEventList>
 80090cc:	1e03      	subs	r3, r0, #0
 80090ce:	d00c      	beq.n	80090ea <xQueueGenericReset+0x9c>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80090d0:	f001 f93e 	bl	800a350 <vPortYield>
 80090d4:	e009      	b.n	80090ea <xQueueGenericReset+0x9c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	3310      	adds	r3, #16
 80090da:	0018      	movs	r0, r3
 80090dc:	f7ff ff0e 	bl	8008efc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	3324      	adds	r3, #36	@ 0x24
 80090e4:	0018      	movs	r0, r3
 80090e6:	f7ff ff09 	bl	8008efc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80090ea:	f001 f953 	bl	800a394 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80090ee:	2301      	movs	r3, #1
}
 80090f0:	0018      	movs	r0, r3
 80090f2:	46bd      	mov	sp, r7
 80090f4:	b004      	add	sp, #16
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80090f8:	b590      	push	{r4, r7, lr}
 80090fa:	b08b      	sub	sp, #44	@ 0x2c
 80090fc:	af02      	add	r7, sp, #8
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	1dfb      	adds	r3, r7, #7
 8009104:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d102      	bne.n	8009112 <xQueueGenericCreate+0x1a>
 800910c:	b672      	cpsid	i
 800910e:	46c0      	nop			@ (mov r8, r8)
 8009110:	e7fd      	b.n	800910e <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d102      	bne.n	800911e <xQueueGenericCreate+0x26>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009118:	2300      	movs	r3, #0
 800911a:	61fb      	str	r3, [r7, #28]
 800911c:	e003      	b.n	8009126 <xQueueGenericCreate+0x2e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	68ba      	ldr	r2, [r7, #8]
 8009122:	4353      	muls	r3, r2
 8009124:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	3348      	adds	r3, #72	@ 0x48
 800912a:	0018      	movs	r0, r3
 800912c:	f001 f9b8 	bl	800a4a0 <pvPortMalloc>
 8009130:	0003      	movs	r3, r0
 8009132:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8009134:	69bb      	ldr	r3, [r7, #24]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d012      	beq.n	8009160 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800913a:	69bb      	ldr	r3, [r7, #24]
 800913c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	3348      	adds	r3, #72	@ 0x48
 8009142:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	2246      	movs	r2, #70	@ 0x46
 8009148:	2100      	movs	r1, #0
 800914a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800914c:	1dfb      	adds	r3, r7, #7
 800914e:	781c      	ldrb	r4, [r3, #0]
 8009150:	697a      	ldr	r2, [r7, #20]
 8009152:	68b9      	ldr	r1, [r7, #8]
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	69bb      	ldr	r3, [r7, #24]
 8009158:	9300      	str	r3, [sp, #0]
 800915a:	0023      	movs	r3, r4
 800915c:	f000 f805 	bl	800916a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009160:	69bb      	ldr	r3, [r7, #24]
	}
 8009162:	0018      	movs	r0, r3
 8009164:	46bd      	mov	sp, r7
 8009166:	b009      	add	sp, #36	@ 0x24
 8009168:	bd90      	pop	{r4, r7, pc}

0800916a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b084      	sub	sp, #16
 800916e:	af00      	add	r7, sp, #0
 8009170:	60f8      	str	r0, [r7, #12]
 8009172:	60b9      	str	r1, [r7, #8]
 8009174:	607a      	str	r2, [r7, #4]
 8009176:	001a      	movs	r2, r3
 8009178:	1cfb      	adds	r3, r7, #3
 800917a:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d103      	bne.n	800918a <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	69ba      	ldr	r2, [r7, #24]
 8009186:	601a      	str	r2, [r3, #0]
 8009188:	e002      	b.n	8009190 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800918a:	69bb      	ldr	r3, [r7, #24]
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	68fa      	ldr	r2, [r7, #12]
 8009194:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	68ba      	ldr	r2, [r7, #8]
 800919a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800919c:	69bb      	ldr	r3, [r7, #24]
 800919e:	2101      	movs	r1, #1
 80091a0:	0018      	movs	r0, r3
 80091a2:	f7ff ff54 	bl	800904e <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80091a6:	46c0      	nop			@ (mov r8, r8)
 80091a8:	46bd      	mov	sp, r7
 80091aa:	b004      	add	sp, #16
 80091ac:	bd80      	pop	{r7, pc}

080091ae <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b088      	sub	sp, #32
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
 80091b6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80091bc:	69bb      	ldr	r3, [r7, #24]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d102      	bne.n	80091c8 <xQueueGiveFromISR+0x1a>
 80091c2:	b672      	cpsid	i
 80091c4:	46c0      	nop			@ (mov r8, r8)
 80091c6:	e7fd      	b.n	80091c4 <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d002      	beq.n	80091d6 <xQueueGiveFromISR+0x28>
 80091d0:	b672      	cpsid	i
 80091d2:	46c0      	nop			@ (mov r8, r8)
 80091d4:	e7fd      	b.n	80091d2 <xQueueGiveFromISR+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d103      	bne.n	80091e6 <xQueueGiveFromISR+0x38>
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d101      	bne.n	80091ea <xQueueGiveFromISR+0x3c>
 80091e6:	2301      	movs	r3, #1
 80091e8:	e000      	b.n	80091ec <xQueueGiveFromISR+0x3e>
 80091ea:	2300      	movs	r3, #0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d102      	bne.n	80091f6 <xQueueGiveFromISR+0x48>
 80091f0:	b672      	cpsid	i
 80091f2:	46c0      	nop			@ (mov r8, r8)
 80091f4:	e7fd      	b.n	80091f2 <xQueueGiveFromISR+0x44>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80091f6:	f001 f8e5 	bl	800a3c4 <ulSetInterruptMaskFromISR>
 80091fa:	0003      	movs	r3, r0
 80091fc:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009202:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009208:	693a      	ldr	r2, [r7, #16]
 800920a:	429a      	cmp	r2, r3
 800920c:	d22c      	bcs.n	8009268 <xQueueGiveFromISR+0xba>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800920e:	200f      	movs	r0, #15
 8009210:	183b      	adds	r3, r7, r0
 8009212:	69ba      	ldr	r2, [r7, #24]
 8009214:	2145      	movs	r1, #69	@ 0x45
 8009216:	5c52      	ldrb	r2, [r2, r1]
 8009218:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	1c5a      	adds	r2, r3, #1
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009222:	183b      	adds	r3, r7, r0
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	b25b      	sxtb	r3, r3
 8009228:	3301      	adds	r3, #1
 800922a:	d111      	bne.n	8009250 <xQueueGiveFromISR+0xa2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009230:	2b00      	cmp	r3, #0
 8009232:	d016      	beq.n	8009262 <xQueueGiveFromISR+0xb4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009234:	69bb      	ldr	r3, [r7, #24]
 8009236:	3324      	adds	r3, #36	@ 0x24
 8009238:	0018      	movs	r0, r3
 800923a:	f000 fd09 	bl	8009c50 <xTaskRemoveFromEventList>
 800923e:	1e03      	subs	r3, r0, #0
 8009240:	d00f      	beq.n	8009262 <xQueueGiveFromISR+0xb4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00c      	beq.n	8009262 <xQueueGiveFromISR+0xb4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	2201      	movs	r2, #1
 800924c:	601a      	str	r2, [r3, #0]
 800924e:	e008      	b.n	8009262 <xQueueGiveFromISR+0xb4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009250:	230f      	movs	r3, #15
 8009252:	18fb      	adds	r3, r7, r3
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	3301      	adds	r3, #1
 8009258:	b2db      	uxtb	r3, r3
 800925a:	b259      	sxtb	r1, r3
 800925c:	69bb      	ldr	r3, [r7, #24]
 800925e:	2245      	movs	r2, #69	@ 0x45
 8009260:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8009262:	2301      	movs	r3, #1
 8009264:	61fb      	str	r3, [r7, #28]
 8009266:	e001      	b.n	800926c <xQueueGiveFromISR+0xbe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009268:	2300      	movs	r3, #0
 800926a:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	0018      	movs	r0, r3
 8009270:	f001 f8ae 	bl	800a3d0 <vClearInterruptMaskFromISR>

	return xReturn;
 8009274:	69fb      	ldr	r3, [r7, #28]
}
 8009276:	0018      	movs	r0, r3
 8009278:	46bd      	mov	sp, r7
 800927a:	b008      	add	sp, #32
 800927c:	bd80      	pop	{r7, pc}

0800927e <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b08a      	sub	sp, #40	@ 0x28
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009288:	2300      	movs	r3, #0
 800928a:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009290:	2300      	movs	r3, #0
 8009292:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d102      	bne.n	80092a0 <xQueueSemaphoreTake+0x22>
 800929a:	b672      	cpsid	i
 800929c:	46c0      	nop			@ (mov r8, r8)
 800929e:	e7fd      	b.n	800929c <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d002      	beq.n	80092ae <xQueueSemaphoreTake+0x30>
 80092a8:	b672      	cpsid	i
 80092aa:	46c0      	nop			@ (mov r8, r8)
 80092ac:	e7fd      	b.n	80092aa <xQueueSemaphoreTake+0x2c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092ae:	f000 fe67 	bl	8009f80 <xTaskGetSchedulerState>
 80092b2:	1e03      	subs	r3, r0, #0
 80092b4:	d102      	bne.n	80092bc <xQueueSemaphoreTake+0x3e>
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d101      	bne.n	80092c0 <xQueueSemaphoreTake+0x42>
 80092bc:	2301      	movs	r3, #1
 80092be:	e000      	b.n	80092c2 <xQueueSemaphoreTake+0x44>
 80092c0:	2300      	movs	r3, #0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d102      	bne.n	80092cc <xQueueSemaphoreTake+0x4e>
 80092c6:	b672      	cpsid	i
 80092c8:	46c0      	nop			@ (mov r8, r8)
 80092ca:	e7fd      	b.n	80092c8 <xQueueSemaphoreTake+0x4a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80092cc:	f001 f850 	bl	800a370 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80092d0:	69fb      	ldr	r3, [r7, #28]
 80092d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092d4:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d01d      	beq.n	8009318 <xQueueSemaphoreTake+0x9a>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80092dc:	69bb      	ldr	r3, [r7, #24]
 80092de:	1e5a      	subs	r2, r3, #1
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80092e4:	69fb      	ldr	r3, [r7, #28]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d104      	bne.n	80092f6 <xQueueSemaphoreTake+0x78>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80092ec:	f000 ff3e 	bl	800a16c <pvTaskIncrementMutexHeldCount>
 80092f0:	0002      	movs	r2, r0
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d008      	beq.n	8009310 <xQueueSemaphoreTake+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	3310      	adds	r3, #16
 8009302:	0018      	movs	r0, r3
 8009304:	f000 fca4 	bl	8009c50 <xTaskRemoveFromEventList>
 8009308:	1e03      	subs	r3, r0, #0
 800930a:	d001      	beq.n	8009310 <xQueueSemaphoreTake+0x92>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800930c:	f001 f820 	bl	800a350 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009310:	f001 f840 	bl	800a394 <vPortExitCritical>
				return pdPASS;
 8009314:	2301      	movs	r3, #1
 8009316:	e08c      	b.n	8009432 <xQueueSemaphoreTake+0x1b4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d109      	bne.n	8009332 <xQueueSemaphoreTake+0xb4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800931e:	6a3b      	ldr	r3, [r7, #32]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d002      	beq.n	800932a <xQueueSemaphoreTake+0xac>
 8009324:	b672      	cpsid	i
 8009326:	46c0      	nop			@ (mov r8, r8)
 8009328:	e7fd      	b.n	8009326 <xQueueSemaphoreTake+0xa8>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800932a:	f001 f833 	bl	800a394 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800932e:	2300      	movs	r3, #0
 8009330:	e07f      	b.n	8009432 <xQueueSemaphoreTake+0x1b4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009334:	2b00      	cmp	r3, #0
 8009336:	d106      	bne.n	8009346 <xQueueSemaphoreTake+0xc8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009338:	230c      	movs	r3, #12
 800933a:	18fb      	adds	r3, r7, r3
 800933c:	0018      	movs	r0, r3
 800933e:	f000 fce5 	bl	8009d0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009342:	2301      	movs	r3, #1
 8009344:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009346:	f001 f825 	bl	800a394 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800934a:	f000 fac7 	bl	80098dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800934e:	f001 f80f 	bl	800a370 <vPortEnterCritical>
 8009352:	69fb      	ldr	r3, [r7, #28]
 8009354:	2244      	movs	r2, #68	@ 0x44
 8009356:	5c9b      	ldrb	r3, [r3, r2]
 8009358:	b25b      	sxtb	r3, r3
 800935a:	3301      	adds	r3, #1
 800935c:	d103      	bne.n	8009366 <xQueueSemaphoreTake+0xe8>
 800935e:	69fb      	ldr	r3, [r7, #28]
 8009360:	2244      	movs	r2, #68	@ 0x44
 8009362:	2100      	movs	r1, #0
 8009364:	5499      	strb	r1, [r3, r2]
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	2245      	movs	r2, #69	@ 0x45
 800936a:	5c9b      	ldrb	r3, [r3, r2]
 800936c:	b25b      	sxtb	r3, r3
 800936e:	3301      	adds	r3, #1
 8009370:	d103      	bne.n	800937a <xQueueSemaphoreTake+0xfc>
 8009372:	69fb      	ldr	r3, [r7, #28]
 8009374:	2245      	movs	r2, #69	@ 0x45
 8009376:	2100      	movs	r1, #0
 8009378:	5499      	strb	r1, [r3, r2]
 800937a:	f001 f80b 	bl	800a394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800937e:	003a      	movs	r2, r7
 8009380:	230c      	movs	r3, #12
 8009382:	18fb      	adds	r3, r7, r3
 8009384:	0011      	movs	r1, r2
 8009386:	0018      	movs	r0, r3
 8009388:	f000 fcd4 	bl	8009d34 <xTaskCheckForTimeOut>
 800938c:	1e03      	subs	r3, r0, #0
 800938e:	d12e      	bne.n	80093ee <xQueueSemaphoreTake+0x170>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	0018      	movs	r0, r3
 8009394:	f000 f8c5 	bl	8009522 <prvIsQueueEmpty>
 8009398:	1e03      	subs	r3, r0, #0
 800939a:	d021      	beq.n	80093e0 <xQueueSemaphoreTake+0x162>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800939c:	69fb      	ldr	r3, [r7, #28]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d10a      	bne.n	80093ba <xQueueSemaphoreTake+0x13c>
					{
						taskENTER_CRITICAL();
 80093a4:	f000 ffe4 	bl	800a370 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80093a8:	69fb      	ldr	r3, [r7, #28]
 80093aa:	689b      	ldr	r3, [r3, #8]
 80093ac:	0018      	movs	r0, r3
 80093ae:	f000 fe03 	bl	8009fb8 <xTaskPriorityInherit>
 80093b2:	0003      	movs	r3, r0
 80093b4:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 80093b6:	f000 ffed 	bl	800a394 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80093ba:	69fb      	ldr	r3, [r7, #28]
 80093bc:	3324      	adds	r3, #36	@ 0x24
 80093be:	683a      	ldr	r2, [r7, #0]
 80093c0:	0011      	movs	r1, r2
 80093c2:	0018      	movs	r0, r3
 80093c4:	f000 fc24 	bl	8009c10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	0018      	movs	r0, r3
 80093cc:	f000 f84b 	bl	8009466 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80093d0:	f000 fa90 	bl	80098f4 <xTaskResumeAll>
 80093d4:	1e03      	subs	r3, r0, #0
 80093d6:	d000      	beq.n	80093da <xQueueSemaphoreTake+0x15c>
 80093d8:	e778      	b.n	80092cc <xQueueSemaphoreTake+0x4e>
				{
					portYIELD_WITHIN_API();
 80093da:	f000 ffb9 	bl	800a350 <vPortYield>
 80093de:	e775      	b.n	80092cc <xQueueSemaphoreTake+0x4e>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80093e0:	69fb      	ldr	r3, [r7, #28]
 80093e2:	0018      	movs	r0, r3
 80093e4:	f000 f83f 	bl	8009466 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80093e8:	f000 fa84 	bl	80098f4 <xTaskResumeAll>
 80093ec:	e76e      	b.n	80092cc <xQueueSemaphoreTake+0x4e>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80093ee:	69fb      	ldr	r3, [r7, #28]
 80093f0:	0018      	movs	r0, r3
 80093f2:	f000 f838 	bl	8009466 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80093f6:	f000 fa7d 	bl	80098f4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	0018      	movs	r0, r3
 80093fe:	f000 f890 	bl	8009522 <prvIsQueueEmpty>
 8009402:	1e03      	subs	r3, r0, #0
 8009404:	d100      	bne.n	8009408 <xQueueSemaphoreTake+0x18a>
 8009406:	e761      	b.n	80092cc <xQueueSemaphoreTake+0x4e>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009408:	6a3b      	ldr	r3, [r7, #32]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d010      	beq.n	8009430 <xQueueSemaphoreTake+0x1b2>
					{
						taskENTER_CRITICAL();
 800940e:	f000 ffaf 	bl	800a370 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009412:	69fb      	ldr	r3, [r7, #28]
 8009414:	0018      	movs	r0, r3
 8009416:	f000 f810 	bl	800943a <prvGetDisinheritPriorityAfterTimeout>
 800941a:	0003      	movs	r3, r0
 800941c:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800941e:	69fb      	ldr	r3, [r7, #28]
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	697a      	ldr	r2, [r7, #20]
 8009424:	0011      	movs	r1, r2
 8009426:	0018      	movs	r0, r3
 8009428:	f000 fe2e 	bl	800a088 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800942c:	f000 ffb2 	bl	800a394 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009430:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009432:	0018      	movs	r0, r3
 8009434:	46bd      	mov	sp, r7
 8009436:	b00a      	add	sp, #40	@ 0x28
 8009438:	bd80      	pop	{r7, pc}

0800943a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800943a:	b580      	push	{r7, lr}
 800943c:	b084      	sub	sp, #16
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009446:	2b00      	cmp	r3, #0
 8009448:	d006      	beq.n	8009458 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2207      	movs	r2, #7
 8009452:	1ad3      	subs	r3, r2, r3
 8009454:	60fb      	str	r3, [r7, #12]
 8009456:	e001      	b.n	800945c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009458:	2300      	movs	r3, #0
 800945a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800945c:	68fb      	ldr	r3, [r7, #12]
	}
 800945e:	0018      	movs	r0, r3
 8009460:	46bd      	mov	sp, r7
 8009462:	b004      	add	sp, #16
 8009464:	bd80      	pop	{r7, pc}

08009466 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009466:	b580      	push	{r7, lr}
 8009468:	b084      	sub	sp, #16
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800946e:	f000 ff7f 	bl	800a370 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009472:	230f      	movs	r3, #15
 8009474:	18fb      	adds	r3, r7, r3
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	2145      	movs	r1, #69	@ 0x45
 800947a:	5c52      	ldrb	r2, [r2, r1]
 800947c:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800947e:	e013      	b.n	80094a8 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009484:	2b00      	cmp	r3, #0
 8009486:	d016      	beq.n	80094b6 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	3324      	adds	r3, #36	@ 0x24
 800948c:	0018      	movs	r0, r3
 800948e:	f000 fbdf 	bl	8009c50 <xTaskRemoveFromEventList>
 8009492:	1e03      	subs	r3, r0, #0
 8009494:	d001      	beq.n	800949a <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009496:	f000 fc9f 	bl	8009dd8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800949a:	210f      	movs	r1, #15
 800949c:	187b      	adds	r3, r7, r1
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	3b01      	subs	r3, #1
 80094a2:	b2da      	uxtb	r2, r3
 80094a4:	187b      	adds	r3, r7, r1
 80094a6:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80094a8:	230f      	movs	r3, #15
 80094aa:	18fb      	adds	r3, r7, r3
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	b25b      	sxtb	r3, r3
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	dce5      	bgt.n	8009480 <prvUnlockQueue+0x1a>
 80094b4:	e000      	b.n	80094b8 <prvUnlockQueue+0x52>
					break;
 80094b6:	46c0      	nop			@ (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2245      	movs	r2, #69	@ 0x45
 80094bc:	21ff      	movs	r1, #255	@ 0xff
 80094be:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80094c0:	f000 ff68 	bl	800a394 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80094c4:	f000 ff54 	bl	800a370 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80094c8:	230e      	movs	r3, #14
 80094ca:	18fb      	adds	r3, r7, r3
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	2144      	movs	r1, #68	@ 0x44
 80094d0:	5c52      	ldrb	r2, [r2, r1]
 80094d2:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80094d4:	e013      	b.n	80094fe <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	691b      	ldr	r3, [r3, #16]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d016      	beq.n	800950c <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	3310      	adds	r3, #16
 80094e2:	0018      	movs	r0, r3
 80094e4:	f000 fbb4 	bl	8009c50 <xTaskRemoveFromEventList>
 80094e8:	1e03      	subs	r3, r0, #0
 80094ea:	d001      	beq.n	80094f0 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 80094ec:	f000 fc74 	bl	8009dd8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80094f0:	210e      	movs	r1, #14
 80094f2:	187b      	adds	r3, r7, r1
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	3b01      	subs	r3, #1
 80094f8:	b2da      	uxtb	r2, r3
 80094fa:	187b      	adds	r3, r7, r1
 80094fc:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80094fe:	230e      	movs	r3, #14
 8009500:	18fb      	adds	r3, r7, r3
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	b25b      	sxtb	r3, r3
 8009506:	2b00      	cmp	r3, #0
 8009508:	dce5      	bgt.n	80094d6 <prvUnlockQueue+0x70>
 800950a:	e000      	b.n	800950e <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800950c:	46c0      	nop			@ (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2244      	movs	r2, #68	@ 0x44
 8009512:	21ff      	movs	r1, #255	@ 0xff
 8009514:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8009516:	f000 ff3d 	bl	800a394 <vPortExitCritical>
}
 800951a:	46c0      	nop			@ (mov r8, r8)
 800951c:	46bd      	mov	sp, r7
 800951e:	b004      	add	sp, #16
 8009520:	bd80      	pop	{r7, pc}

08009522 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009522:	b580      	push	{r7, lr}
 8009524:	b084      	sub	sp, #16
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800952a:	f000 ff21 	bl	800a370 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009532:	2b00      	cmp	r3, #0
 8009534:	d102      	bne.n	800953c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009536:	2301      	movs	r3, #1
 8009538:	60fb      	str	r3, [r7, #12]
 800953a:	e001      	b.n	8009540 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800953c:	2300      	movs	r3, #0
 800953e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009540:	f000 ff28 	bl	800a394 <vPortExitCritical>

	return xReturn;
 8009544:	68fb      	ldr	r3, [r7, #12]
}
 8009546:	0018      	movs	r0, r3
 8009548:	46bd      	mov	sp, r7
 800954a:	b004      	add	sp, #16
 800954c:	bd80      	pop	{r7, pc}

0800954e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800954e:	b590      	push	{r4, r7, lr}
 8009550:	b08d      	sub	sp, #52	@ 0x34
 8009552:	af04      	add	r7, sp, #16
 8009554:	60f8      	str	r0, [r7, #12]
 8009556:	60b9      	str	r1, [r7, #8]
 8009558:	607a      	str	r2, [r7, #4]
 800955a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800955c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800955e:	2b00      	cmp	r3, #0
 8009560:	d102      	bne.n	8009568 <xTaskCreateStatic+0x1a>
 8009562:	b672      	cpsid	i
 8009564:	46c0      	nop			@ (mov r8, r8)
 8009566:	e7fd      	b.n	8009564 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8009568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800956a:	2b00      	cmp	r3, #0
 800956c:	d102      	bne.n	8009574 <xTaskCreateStatic+0x26>
 800956e:	b672      	cpsid	i
 8009570:	46c0      	nop			@ (mov r8, r8)
 8009572:	e7fd      	b.n	8009570 <xTaskCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009574:	2354      	movs	r3, #84	@ 0x54
 8009576:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	2b54      	cmp	r3, #84	@ 0x54
 800957c:	d002      	beq.n	8009584 <xTaskCreateStatic+0x36>
 800957e:	b672      	cpsid	i
 8009580:	46c0      	nop			@ (mov r8, r8)
 8009582:	e7fd      	b.n	8009580 <xTaskCreateStatic+0x32>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009584:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009588:	2b00      	cmp	r3, #0
 800958a:	d020      	beq.n	80095ce <xTaskCreateStatic+0x80>
 800958c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800958e:	2b00      	cmp	r3, #0
 8009590:	d01d      	beq.n	80095ce <xTaskCreateStatic+0x80>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009594:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800959a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800959c:	69fb      	ldr	r3, [r7, #28]
 800959e:	2251      	movs	r2, #81	@ 0x51
 80095a0:	2102      	movs	r1, #2
 80095a2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80095a4:	683c      	ldr	r4, [r7, #0]
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	68b9      	ldr	r1, [r7, #8]
 80095aa:	68f8      	ldr	r0, [r7, #12]
 80095ac:	2300      	movs	r3, #0
 80095ae:	9303      	str	r3, [sp, #12]
 80095b0:	69fb      	ldr	r3, [r7, #28]
 80095b2:	9302      	str	r3, [sp, #8]
 80095b4:	2318      	movs	r3, #24
 80095b6:	18fb      	adds	r3, r7, r3
 80095b8:	9301      	str	r3, [sp, #4]
 80095ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095bc:	9300      	str	r3, [sp, #0]
 80095be:	0023      	movs	r3, r4
 80095c0:	f000 f858 	bl	8009674 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	0018      	movs	r0, r3
 80095c8:	f000 f8d6 	bl	8009778 <prvAddNewTaskToReadyList>
 80095cc:	e001      	b.n	80095d2 <xTaskCreateStatic+0x84>
		}
		else
		{
			xReturn = NULL;
 80095ce:	2300      	movs	r3, #0
 80095d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80095d2:	69bb      	ldr	r3, [r7, #24]
	}
 80095d4:	0018      	movs	r0, r3
 80095d6:	46bd      	mov	sp, r7
 80095d8:	b009      	add	sp, #36	@ 0x24
 80095da:	bd90      	pop	{r4, r7, pc}

080095dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80095dc:	b590      	push	{r4, r7, lr}
 80095de:	b08d      	sub	sp, #52	@ 0x34
 80095e0:	af04      	add	r7, sp, #16
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	603b      	str	r3, [r7, #0]
 80095e8:	1dbb      	adds	r3, r7, #6
 80095ea:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80095ec:	1dbb      	adds	r3, r7, #6
 80095ee:	881b      	ldrh	r3, [r3, #0]
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	0018      	movs	r0, r3
 80095f4:	f000 ff54 	bl	800a4a0 <pvPortMalloc>
 80095f8:	0003      	movs	r3, r0
 80095fa:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d010      	beq.n	8009624 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009602:	2054      	movs	r0, #84	@ 0x54
 8009604:	f000 ff4c 	bl	800a4a0 <pvPortMalloc>
 8009608:	0003      	movs	r3, r0
 800960a:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800960c:	69fb      	ldr	r3, [r7, #28]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d003      	beq.n	800961a <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009612:	69fb      	ldr	r3, [r7, #28]
 8009614:	697a      	ldr	r2, [r7, #20]
 8009616:	631a      	str	r2, [r3, #48]	@ 0x30
 8009618:	e006      	b.n	8009628 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	0018      	movs	r0, r3
 800961e:	f000 ffe7 	bl	800a5f0 <vPortFree>
 8009622:	e001      	b.n	8009628 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009624:	2300      	movs	r3, #0
 8009626:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009628:	69fb      	ldr	r3, [r7, #28]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d01a      	beq.n	8009664 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800962e:	69fb      	ldr	r3, [r7, #28]
 8009630:	2251      	movs	r2, #81	@ 0x51
 8009632:	2100      	movs	r1, #0
 8009634:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009636:	1dbb      	adds	r3, r7, #6
 8009638:	881a      	ldrh	r2, [r3, #0]
 800963a:	683c      	ldr	r4, [r7, #0]
 800963c:	68b9      	ldr	r1, [r7, #8]
 800963e:	68f8      	ldr	r0, [r7, #12]
 8009640:	2300      	movs	r3, #0
 8009642:	9303      	str	r3, [sp, #12]
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	9302      	str	r3, [sp, #8]
 8009648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800964a:	9301      	str	r3, [sp, #4]
 800964c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800964e:	9300      	str	r3, [sp, #0]
 8009650:	0023      	movs	r3, r4
 8009652:	f000 f80f 	bl	8009674 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009656:	69fb      	ldr	r3, [r7, #28]
 8009658:	0018      	movs	r0, r3
 800965a:	f000 f88d 	bl	8009778 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800965e:	2301      	movs	r3, #1
 8009660:	61bb      	str	r3, [r7, #24]
 8009662:	e002      	b.n	800966a <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009664:	2301      	movs	r3, #1
 8009666:	425b      	negs	r3, r3
 8009668:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800966a:	69bb      	ldr	r3, [r7, #24]
	}
 800966c:	0018      	movs	r0, r3
 800966e:	46bd      	mov	sp, r7
 8009670:	b009      	add	sp, #36	@ 0x24
 8009672:	bd90      	pop	{r4, r7, pc}

08009674 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b086      	sub	sp, #24
 8009678:	af00      	add	r7, sp, #0
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	607a      	str	r2, [r7, #4]
 8009680:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009684:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	493a      	ldr	r1, [pc, #232]	@ (8009774 <prvInitialiseNewTask+0x100>)
 800968a:	468c      	mov	ip, r1
 800968c:	4463      	add	r3, ip
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	18d3      	adds	r3, r2, r3
 8009692:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	2207      	movs	r2, #7
 8009698:	4393      	bics	r3, r2
 800969a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	2207      	movs	r2, #7
 80096a0:	4013      	ands	r3, r2
 80096a2:	d002      	beq.n	80096aa <prvInitialiseNewTask+0x36>
 80096a4:	b672      	cpsid	i
 80096a6:	46c0      	nop			@ (mov r8, r8)
 80096a8:	e7fd      	b.n	80096a6 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d020      	beq.n	80096f2 <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096b0:	2300      	movs	r3, #0
 80096b2:	617b      	str	r3, [r7, #20]
 80096b4:	e013      	b.n	80096de <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80096b6:	68ba      	ldr	r2, [r7, #8]
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	18d3      	adds	r3, r2, r3
 80096bc:	7818      	ldrb	r0, [r3, #0]
 80096be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80096c0:	2134      	movs	r1, #52	@ 0x34
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	18d3      	adds	r3, r2, r3
 80096c6:	185b      	adds	r3, r3, r1
 80096c8:	1c02      	adds	r2, r0, #0
 80096ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	18d3      	adds	r3, r2, r3
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d006      	beq.n	80096e6 <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	3301      	adds	r3, #1
 80096dc:	617b      	str	r3, [r7, #20]
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	2b0f      	cmp	r3, #15
 80096e2:	d9e8      	bls.n	80096b6 <prvInitialiseNewTask+0x42>
 80096e4:	e000      	b.n	80096e8 <prvInitialiseNewTask+0x74>
			{
				break;
 80096e6:	46c0      	nop			@ (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80096e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ea:	2243      	movs	r2, #67	@ 0x43
 80096ec:	2100      	movs	r1, #0
 80096ee:	5499      	strb	r1, [r3, r2]
 80096f0:	e003      	b.n	80096fa <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80096f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096f4:	2234      	movs	r2, #52	@ 0x34
 80096f6:	2100      	movs	r1, #0
 80096f8:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80096fa:	6a3b      	ldr	r3, [r7, #32]
 80096fc:	2b06      	cmp	r3, #6
 80096fe:	d901      	bls.n	8009704 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009700:	2306      	movs	r3, #6
 8009702:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009706:	6a3a      	ldr	r2, [r7, #32]
 8009708:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800970a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800970c:	6a3a      	ldr	r2, [r7, #32]
 800970e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009712:	2200      	movs	r2, #0
 8009714:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009718:	3304      	adds	r3, #4
 800971a:	0018      	movs	r0, r3
 800971c:	f7ff fc0c 	bl	8008f38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009722:	3318      	adds	r3, #24
 8009724:	0018      	movs	r0, r3
 8009726:	f7ff fc07 	bl	8008f38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800972a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800972c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800972e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009730:	6a3b      	ldr	r3, [r7, #32]
 8009732:	2207      	movs	r2, #7
 8009734:	1ad2      	subs	r2, r2, r3
 8009736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009738:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800973a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800973c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800973e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009742:	2200      	movs	r2, #0
 8009744:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009748:	2250      	movs	r2, #80	@ 0x50
 800974a:	2100      	movs	r1, #0
 800974c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800974e:	683a      	ldr	r2, [r7, #0]
 8009750:	68f9      	ldr	r1, [r7, #12]
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	0018      	movs	r0, r3
 8009756:	f000 fd6f 	bl	800a238 <pxPortInitialiseStack>
 800975a:	0002      	movs	r2, r0
 800975c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800975e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009762:	2b00      	cmp	r3, #0
 8009764:	d002      	beq.n	800976c <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009768:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800976a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800976c:	46c0      	nop			@ (mov r8, r8)
 800976e:	46bd      	mov	sp, r7
 8009770:	b006      	add	sp, #24
 8009772:	bd80      	pop	{r7, pc}
 8009774:	3fffffff 	.word	0x3fffffff

08009778 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009780:	f000 fdf6 	bl	800a370 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009784:	4b28      	ldr	r3, [pc, #160]	@ (8009828 <prvAddNewTaskToReadyList+0xb0>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	1c5a      	adds	r2, r3, #1
 800978a:	4b27      	ldr	r3, [pc, #156]	@ (8009828 <prvAddNewTaskToReadyList+0xb0>)
 800978c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800978e:	4b27      	ldr	r3, [pc, #156]	@ (800982c <prvAddNewTaskToReadyList+0xb4>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d109      	bne.n	80097aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009796:	4b25      	ldr	r3, [pc, #148]	@ (800982c <prvAddNewTaskToReadyList+0xb4>)
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800979c:	4b22      	ldr	r3, [pc, #136]	@ (8009828 <prvAddNewTaskToReadyList+0xb0>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d110      	bne.n	80097c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80097a4:	f000 fb32 	bl	8009e0c <prvInitialiseTaskLists>
 80097a8:	e00d      	b.n	80097c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80097aa:	4b21      	ldr	r3, [pc, #132]	@ (8009830 <prvAddNewTaskToReadyList+0xb8>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d109      	bne.n	80097c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80097b2:	4b1e      	ldr	r3, [pc, #120]	@ (800982c <prvAddNewTaskToReadyList+0xb4>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097bc:	429a      	cmp	r2, r3
 80097be:	d802      	bhi.n	80097c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80097c0:	4b1a      	ldr	r3, [pc, #104]	@ (800982c <prvAddNewTaskToReadyList+0xb4>)
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80097c6:	4b1b      	ldr	r3, [pc, #108]	@ (8009834 <prvAddNewTaskToReadyList+0xbc>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	1c5a      	adds	r2, r3, #1
 80097cc:	4b19      	ldr	r3, [pc, #100]	@ (8009834 <prvAddNewTaskToReadyList+0xbc>)
 80097ce:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097d4:	4b18      	ldr	r3, [pc, #96]	@ (8009838 <prvAddNewTaskToReadyList+0xc0>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	429a      	cmp	r2, r3
 80097da:	d903      	bls.n	80097e4 <prvAddNewTaskToReadyList+0x6c>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097e0:	4b15      	ldr	r3, [pc, #84]	@ (8009838 <prvAddNewTaskToReadyList+0xc0>)
 80097e2:	601a      	str	r2, [r3, #0]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097e8:	0013      	movs	r3, r2
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	189b      	adds	r3, r3, r2
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	4a12      	ldr	r2, [pc, #72]	@ (800983c <prvAddNewTaskToReadyList+0xc4>)
 80097f2:	189a      	adds	r2, r3, r2
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	3304      	adds	r3, #4
 80097f8:	0019      	movs	r1, r3
 80097fa:	0010      	movs	r0, r2
 80097fc:	f7ff fba7 	bl	8008f4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009800:	f000 fdc8 	bl	800a394 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009804:	4b0a      	ldr	r3, [pc, #40]	@ (8009830 <prvAddNewTaskToReadyList+0xb8>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d008      	beq.n	800981e <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800980c:	4b07      	ldr	r3, [pc, #28]	@ (800982c <prvAddNewTaskToReadyList+0xb4>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009816:	429a      	cmp	r2, r3
 8009818:	d201      	bcs.n	800981e <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800981a:	f000 fd99 	bl	800a350 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800981e:	46c0      	nop			@ (mov r8, r8)
 8009820:	46bd      	mov	sp, r7
 8009822:	b002      	add	sp, #8
 8009824:	bd80      	pop	{r7, pc}
 8009826:	46c0      	nop			@ (mov r8, r8)
 8009828:	200009e0 	.word	0x200009e0
 800982c:	200008e0 	.word	0x200008e0
 8009830:	200009ec 	.word	0x200009ec
 8009834:	200009fc 	.word	0x200009fc
 8009838:	200009e8 	.word	0x200009e8
 800983c:	200008e4 	.word	0x200008e4

08009840 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009840:	b590      	push	{r4, r7, lr}
 8009842:	b089      	sub	sp, #36	@ 0x24
 8009844:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009846:	2300      	movs	r3, #0
 8009848:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800984a:	2300      	movs	r3, #0
 800984c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800984e:	003a      	movs	r2, r7
 8009850:	1d39      	adds	r1, r7, #4
 8009852:	2308      	movs	r3, #8
 8009854:	18fb      	adds	r3, r7, r3
 8009856:	0018      	movs	r0, r3
 8009858:	f7f9 fce8 	bl	800322c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800985c:	683c      	ldr	r4, [r7, #0]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	68ba      	ldr	r2, [r7, #8]
 8009862:	4918      	ldr	r1, [pc, #96]	@ (80098c4 <vTaskStartScheduler+0x84>)
 8009864:	4818      	ldr	r0, [pc, #96]	@ (80098c8 <vTaskStartScheduler+0x88>)
 8009866:	9202      	str	r2, [sp, #8]
 8009868:	9301      	str	r3, [sp, #4]
 800986a:	2300      	movs	r3, #0
 800986c:	9300      	str	r3, [sp, #0]
 800986e:	2300      	movs	r3, #0
 8009870:	0022      	movs	r2, r4
 8009872:	f7ff fe6c 	bl	800954e <xTaskCreateStatic>
 8009876:	0002      	movs	r2, r0
 8009878:	4b14      	ldr	r3, [pc, #80]	@ (80098cc <vTaskStartScheduler+0x8c>)
 800987a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800987c:	4b13      	ldr	r3, [pc, #76]	@ (80098cc <vTaskStartScheduler+0x8c>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d002      	beq.n	800988a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009884:	2301      	movs	r3, #1
 8009886:	60fb      	str	r3, [r7, #12]
 8009888:	e001      	b.n	800988e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800988a:	2300      	movs	r3, #0
 800988c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2b01      	cmp	r3, #1
 8009892:	d10d      	bne.n	80098b0 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8009894:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009896:	4b0e      	ldr	r3, [pc, #56]	@ (80098d0 <vTaskStartScheduler+0x90>)
 8009898:	2201      	movs	r2, #1
 800989a:	4252      	negs	r2, r2
 800989c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800989e:	4b0d      	ldr	r3, [pc, #52]	@ (80098d4 <vTaskStartScheduler+0x94>)
 80098a0:	2201      	movs	r2, #1
 80098a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80098a4:	4b0c      	ldr	r3, [pc, #48]	@ (80098d8 <vTaskStartScheduler+0x98>)
 80098a6:	2200      	movs	r2, #0
 80098a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80098aa:	f000 fd2d 	bl	800a308 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80098ae:	e005      	b.n	80098bc <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	3301      	adds	r3, #1
 80098b4:	d102      	bne.n	80098bc <vTaskStartScheduler+0x7c>
 80098b6:	b672      	cpsid	i
 80098b8:	46c0      	nop			@ (mov r8, r8)
 80098ba:	e7fd      	b.n	80098b8 <vTaskStartScheduler+0x78>
}
 80098bc:	46c0      	nop			@ (mov r8, r8)
 80098be:	46bd      	mov	sp, r7
 80098c0:	b005      	add	sp, #20
 80098c2:	bd90      	pop	{r4, r7, pc}
 80098c4:	0800daec 	.word	0x0800daec
 80098c8:	08009ded 	.word	0x08009ded
 80098cc:	20000a04 	.word	0x20000a04
 80098d0:	20000a00 	.word	0x20000a00
 80098d4:	200009ec 	.word	0x200009ec
 80098d8:	200009e4 	.word	0x200009e4

080098dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80098e0:	4b03      	ldr	r3, [pc, #12]	@ (80098f0 <vTaskSuspendAll+0x14>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	1c5a      	adds	r2, r3, #1
 80098e6:	4b02      	ldr	r3, [pc, #8]	@ (80098f0 <vTaskSuspendAll+0x14>)
 80098e8:	601a      	str	r2, [r3, #0]
	portMEMORY_BARRIER();
}
 80098ea:	46c0      	nop			@ (mov r8, r8)
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	20000a08 	.word	0x20000a08

080098f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80098fa:	2300      	movs	r3, #0
 80098fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80098fe:	2300      	movs	r3, #0
 8009900:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009902:	4b3a      	ldr	r3, [pc, #232]	@ (80099ec <xTaskResumeAll+0xf8>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d102      	bne.n	8009910 <xTaskResumeAll+0x1c>
 800990a:	b672      	cpsid	i
 800990c:	46c0      	nop			@ (mov r8, r8)
 800990e:	e7fd      	b.n	800990c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009910:	f000 fd2e 	bl	800a370 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009914:	4b35      	ldr	r3, [pc, #212]	@ (80099ec <xTaskResumeAll+0xf8>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	1e5a      	subs	r2, r3, #1
 800991a:	4b34      	ldr	r3, [pc, #208]	@ (80099ec <xTaskResumeAll+0xf8>)
 800991c:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800991e:	4b33      	ldr	r3, [pc, #204]	@ (80099ec <xTaskResumeAll+0xf8>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d15b      	bne.n	80099de <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009926:	4b32      	ldr	r3, [pc, #200]	@ (80099f0 <xTaskResumeAll+0xfc>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d057      	beq.n	80099de <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800992e:	e02f      	b.n	8009990 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009930:	4b30      	ldr	r3, [pc, #192]	@ (80099f4 <xTaskResumeAll+0x100>)
 8009932:	68db      	ldr	r3, [r3, #12]
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	3318      	adds	r3, #24
 800993c:	0018      	movs	r0, r3
 800993e:	f7ff fb5e 	bl	8008ffe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	3304      	adds	r3, #4
 8009946:	0018      	movs	r0, r3
 8009948:	f7ff fb59 	bl	8008ffe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009950:	4b29      	ldr	r3, [pc, #164]	@ (80099f8 <xTaskResumeAll+0x104>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	429a      	cmp	r2, r3
 8009956:	d903      	bls.n	8009960 <xTaskResumeAll+0x6c>
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800995c:	4b26      	ldr	r3, [pc, #152]	@ (80099f8 <xTaskResumeAll+0x104>)
 800995e:	601a      	str	r2, [r3, #0]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009964:	0013      	movs	r3, r2
 8009966:	009b      	lsls	r3, r3, #2
 8009968:	189b      	adds	r3, r3, r2
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	4a23      	ldr	r2, [pc, #140]	@ (80099fc <xTaskResumeAll+0x108>)
 800996e:	189a      	adds	r2, r3, r2
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	3304      	adds	r3, #4
 8009974:	0019      	movs	r1, r3
 8009976:	0010      	movs	r0, r2
 8009978:	f7ff fae9 	bl	8008f4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009980:	4b1f      	ldr	r3, [pc, #124]	@ (8009a00 <xTaskResumeAll+0x10c>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009986:	429a      	cmp	r2, r3
 8009988:	d302      	bcc.n	8009990 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 800998a:	4b1e      	ldr	r3, [pc, #120]	@ (8009a04 <xTaskResumeAll+0x110>)
 800998c:	2201      	movs	r2, #1
 800998e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009990:	4b18      	ldr	r3, [pc, #96]	@ (80099f4 <xTaskResumeAll+0x100>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d1cb      	bne.n	8009930 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d001      	beq.n	80099a2 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800999e:	f000 fad1 	bl	8009f44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80099a2:	4b19      	ldr	r3, [pc, #100]	@ (8009a08 <xTaskResumeAll+0x114>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d00f      	beq.n	80099ce <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80099ae:	f000 f82d 	bl	8009a0c <xTaskIncrementTick>
 80099b2:	1e03      	subs	r3, r0, #0
 80099b4:	d002      	beq.n	80099bc <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 80099b6:	4b13      	ldr	r3, [pc, #76]	@ (8009a04 <xTaskResumeAll+0x110>)
 80099b8:	2201      	movs	r2, #1
 80099ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	3b01      	subs	r3, #1
 80099c0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d1f2      	bne.n	80099ae <xTaskResumeAll+0xba>

						uxPendedTicks = 0;
 80099c8:	4b0f      	ldr	r3, [pc, #60]	@ (8009a08 <xTaskResumeAll+0x114>)
 80099ca:	2200      	movs	r2, #0
 80099cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80099ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009a04 <xTaskResumeAll+0x110>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d003      	beq.n	80099de <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80099d6:	2301      	movs	r3, #1
 80099d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80099da:	f000 fcb9 	bl	800a350 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80099de:	f000 fcd9 	bl	800a394 <vPortExitCritical>

	return xAlreadyYielded;
 80099e2:	68bb      	ldr	r3, [r7, #8]
}
 80099e4:	0018      	movs	r0, r3
 80099e6:	46bd      	mov	sp, r7
 80099e8:	b004      	add	sp, #16
 80099ea:	bd80      	pop	{r7, pc}
 80099ec:	20000a08 	.word	0x20000a08
 80099f0:	200009e0 	.word	0x200009e0
 80099f4:	200009a0 	.word	0x200009a0
 80099f8:	200009e8 	.word	0x200009e8
 80099fc:	200008e4 	.word	0x200008e4
 8009a00:	200008e0 	.word	0x200008e0
 8009a04:	200009f4 	.word	0x200009f4
 8009a08:	200009f0 	.word	0x200009f0

08009a0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b086      	sub	sp, #24
 8009a10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009a12:	2300      	movs	r3, #0
 8009a14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a16:	4b4a      	ldr	r3, [pc, #296]	@ (8009b40 <xTaskIncrementTick+0x134>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d000      	beq.n	8009a20 <xTaskIncrementTick+0x14>
 8009a1e:	e07f      	b.n	8009b20 <xTaskIncrementTick+0x114>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009a20:	4b48      	ldr	r3, [pc, #288]	@ (8009b44 <xTaskIncrementTick+0x138>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	3301      	adds	r3, #1
 8009a26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009a28:	4b46      	ldr	r3, [pc, #280]	@ (8009b44 <xTaskIncrementTick+0x138>)
 8009a2a:	693a      	ldr	r2, [r7, #16]
 8009a2c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d118      	bne.n	8009a66 <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009a34:	4b44      	ldr	r3, [pc, #272]	@ (8009b48 <xTaskIncrementTick+0x13c>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d002      	beq.n	8009a44 <xTaskIncrementTick+0x38>
 8009a3e:	b672      	cpsid	i
 8009a40:	46c0      	nop			@ (mov r8, r8)
 8009a42:	e7fd      	b.n	8009a40 <xTaskIncrementTick+0x34>
 8009a44:	4b40      	ldr	r3, [pc, #256]	@ (8009b48 <xTaskIncrementTick+0x13c>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	60fb      	str	r3, [r7, #12]
 8009a4a:	4b40      	ldr	r3, [pc, #256]	@ (8009b4c <xTaskIncrementTick+0x140>)
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	4b3e      	ldr	r3, [pc, #248]	@ (8009b48 <xTaskIncrementTick+0x13c>)
 8009a50:	601a      	str	r2, [r3, #0]
 8009a52:	4b3e      	ldr	r3, [pc, #248]	@ (8009b4c <xTaskIncrementTick+0x140>)
 8009a54:	68fa      	ldr	r2, [r7, #12]
 8009a56:	601a      	str	r2, [r3, #0]
 8009a58:	4b3d      	ldr	r3, [pc, #244]	@ (8009b50 <xTaskIncrementTick+0x144>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	1c5a      	adds	r2, r3, #1
 8009a5e:	4b3c      	ldr	r3, [pc, #240]	@ (8009b50 <xTaskIncrementTick+0x144>)
 8009a60:	601a      	str	r2, [r3, #0]
 8009a62:	f000 fa6f 	bl	8009f44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009a66:	4b3b      	ldr	r3, [pc, #236]	@ (8009b54 <xTaskIncrementTick+0x148>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	693a      	ldr	r2, [r7, #16]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d349      	bcc.n	8009b04 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a70:	4b35      	ldr	r3, [pc, #212]	@ (8009b48 <xTaskIncrementTick+0x13c>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d104      	bne.n	8009a84 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a7a:	4b36      	ldr	r3, [pc, #216]	@ (8009b54 <xTaskIncrementTick+0x148>)
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	4252      	negs	r2, r2
 8009a80:	601a      	str	r2, [r3, #0]
					break;
 8009a82:	e03f      	b.n	8009b04 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a84:	4b30      	ldr	r3, [pc, #192]	@ (8009b48 <xTaskIncrementTick+0x13c>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	68db      	ldr	r3, [r3, #12]
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009a94:	693a      	ldr	r2, [r7, #16]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d203      	bcs.n	8009aa4 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009a9c:	4b2d      	ldr	r3, [pc, #180]	@ (8009b54 <xTaskIncrementTick+0x148>)
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009aa2:	e02f      	b.n	8009b04 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	3304      	adds	r3, #4
 8009aa8:	0018      	movs	r0, r3
 8009aaa:	f7ff faa8 	bl	8008ffe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d004      	beq.n	8009ac0 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	3318      	adds	r3, #24
 8009aba:	0018      	movs	r0, r3
 8009abc:	f7ff fa9f 	bl	8008ffe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ac4:	4b24      	ldr	r3, [pc, #144]	@ (8009b58 <xTaskIncrementTick+0x14c>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d903      	bls.n	8009ad4 <xTaskIncrementTick+0xc8>
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ad0:	4b21      	ldr	r3, [pc, #132]	@ (8009b58 <xTaskIncrementTick+0x14c>)
 8009ad2:	601a      	str	r2, [r3, #0]
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ad8:	0013      	movs	r3, r2
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	189b      	adds	r3, r3, r2
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	4a1e      	ldr	r2, [pc, #120]	@ (8009b5c <xTaskIncrementTick+0x150>)
 8009ae2:	189a      	adds	r2, r3, r2
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	3304      	adds	r3, #4
 8009ae8:	0019      	movs	r1, r3
 8009aea:	0010      	movs	r0, r2
 8009aec:	f7ff fa2f 	bl	8008f4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009af4:	4b1a      	ldr	r3, [pc, #104]	@ (8009b60 <xTaskIncrementTick+0x154>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d3b8      	bcc.n	8009a70 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8009afe:	2301      	movs	r3, #1
 8009b00:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b02:	e7b5      	b.n	8009a70 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009b04:	4b16      	ldr	r3, [pc, #88]	@ (8009b60 <xTaskIncrementTick+0x154>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b0a:	4914      	ldr	r1, [pc, #80]	@ (8009b5c <xTaskIncrementTick+0x150>)
 8009b0c:	0013      	movs	r3, r2
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	189b      	adds	r3, r3, r2
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	585b      	ldr	r3, [r3, r1]
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d907      	bls.n	8009b2a <xTaskIncrementTick+0x11e>
			{
				xSwitchRequired = pdTRUE;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	617b      	str	r3, [r7, #20]
 8009b1e:	e004      	b.n	8009b2a <xTaskIncrementTick+0x11e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009b20:	4b10      	ldr	r3, [pc, #64]	@ (8009b64 <xTaskIncrementTick+0x158>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	1c5a      	adds	r2, r3, #1
 8009b26:	4b0f      	ldr	r3, [pc, #60]	@ (8009b64 <xTaskIncrementTick+0x158>)
 8009b28:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8009b68 <xTaskIncrementTick+0x15c>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d001      	beq.n	8009b36 <xTaskIncrementTick+0x12a>
		{
			xSwitchRequired = pdTRUE;
 8009b32:	2301      	movs	r3, #1
 8009b34:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009b36:	697b      	ldr	r3, [r7, #20]
}
 8009b38:	0018      	movs	r0, r3
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	b006      	add	sp, #24
 8009b3e:	bd80      	pop	{r7, pc}
 8009b40:	20000a08 	.word	0x20000a08
 8009b44:	200009e4 	.word	0x200009e4
 8009b48:	20000998 	.word	0x20000998
 8009b4c:	2000099c 	.word	0x2000099c
 8009b50:	200009f8 	.word	0x200009f8
 8009b54:	20000a00 	.word	0x20000a00
 8009b58:	200009e8 	.word	0x200009e8
 8009b5c:	200008e4 	.word	0x200008e4
 8009b60:	200008e0 	.word	0x200008e0
 8009b64:	200009f0 	.word	0x200009f0
 8009b68:	200009f4 	.word	0x200009f4

08009b6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009b72:	4b22      	ldr	r3, [pc, #136]	@ (8009bfc <vTaskSwitchContext+0x90>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d003      	beq.n	8009b82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009b7a:	4b21      	ldr	r3, [pc, #132]	@ (8009c00 <vTaskSwitchContext+0x94>)
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009b80:	e038      	b.n	8009bf4 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 8009b82:	4b1f      	ldr	r3, [pc, #124]	@ (8009c00 <vTaskSwitchContext+0x94>)
 8009b84:	2200      	movs	r2, #0
 8009b86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b88:	4b1e      	ldr	r3, [pc, #120]	@ (8009c04 <vTaskSwitchContext+0x98>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	607b      	str	r3, [r7, #4]
 8009b8e:	e008      	b.n	8009ba2 <vTaskSwitchContext+0x36>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d102      	bne.n	8009b9c <vTaskSwitchContext+0x30>
 8009b96:	b672      	cpsid	i
 8009b98:	46c0      	nop			@ (mov r8, r8)
 8009b9a:	e7fd      	b.n	8009b98 <vTaskSwitchContext+0x2c>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	3b01      	subs	r3, #1
 8009ba0:	607b      	str	r3, [r7, #4]
 8009ba2:	4919      	ldr	r1, [pc, #100]	@ (8009c08 <vTaskSwitchContext+0x9c>)
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	0013      	movs	r3, r2
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	189b      	adds	r3, r3, r2
 8009bac:	009b      	lsls	r3, r3, #2
 8009bae:	585b      	ldr	r3, [r3, r1]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d0ed      	beq.n	8009b90 <vTaskSwitchContext+0x24>
 8009bb4:	687a      	ldr	r2, [r7, #4]
 8009bb6:	0013      	movs	r3, r2
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	189b      	adds	r3, r3, r2
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	4a12      	ldr	r2, [pc, #72]	@ (8009c08 <vTaskSwitchContext+0x9c>)
 8009bc0:	189b      	adds	r3, r3, r2
 8009bc2:	603b      	str	r3, [r7, #0]
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	685a      	ldr	r2, [r3, #4]
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	605a      	str	r2, [r3, #4]
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	685a      	ldr	r2, [r3, #4]
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	3308      	adds	r3, #8
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d104      	bne.n	8009be4 <vTaskSwitchContext+0x78>
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	685a      	ldr	r2, [r3, #4]
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	605a      	str	r2, [r3, #4]
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	68da      	ldr	r2, [r3, #12]
 8009bea:	4b08      	ldr	r3, [pc, #32]	@ (8009c0c <vTaskSwitchContext+0xa0>)
 8009bec:	601a      	str	r2, [r3, #0]
 8009bee:	4b05      	ldr	r3, [pc, #20]	@ (8009c04 <vTaskSwitchContext+0x98>)
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	601a      	str	r2, [r3, #0]
}
 8009bf4:	46c0      	nop			@ (mov r8, r8)
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	b002      	add	sp, #8
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	20000a08 	.word	0x20000a08
 8009c00:	200009f4 	.word	0x200009f4
 8009c04:	200009e8 	.word	0x200009e8
 8009c08:	200008e4 	.word	0x200008e4
 8009c0c:	200008e0 	.word	0x200008e0

08009c10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d102      	bne.n	8009c26 <vTaskPlaceOnEventList+0x16>
 8009c20:	b672      	cpsid	i
 8009c22:	46c0      	nop			@ (mov r8, r8)
 8009c24:	e7fd      	b.n	8009c22 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009c26:	4b09      	ldr	r3, [pc, #36]	@ (8009c4c <vTaskPlaceOnEventList+0x3c>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	3318      	adds	r3, #24
 8009c2c:	001a      	movs	r2, r3
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	0011      	movs	r1, r2
 8009c32:	0018      	movs	r0, r3
 8009c34:	f7ff f9ad 	bl	8008f92 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	2101      	movs	r1, #1
 8009c3c:	0018      	movs	r0, r3
 8009c3e:	f000 faa7 	bl	800a190 <prvAddCurrentTaskToDelayedList>
}
 8009c42:	46c0      	nop			@ (mov r8, r8)
 8009c44:	46bd      	mov	sp, r7
 8009c46:	b002      	add	sp, #8
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	46c0      	nop			@ (mov r8, r8)
 8009c4c:	200008e0 	.word	0x200008e0

08009c50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b084      	sub	sp, #16
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	68db      	ldr	r3, [r3, #12]
 8009c5e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d102      	bne.n	8009c6c <xTaskRemoveFromEventList+0x1c>
 8009c66:	b672      	cpsid	i
 8009c68:	46c0      	nop			@ (mov r8, r8)
 8009c6a:	e7fd      	b.n	8009c68 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	3318      	adds	r3, #24
 8009c70:	0018      	movs	r0, r3
 8009c72:	f7ff f9c4 	bl	8008ffe <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c76:	4b1f      	ldr	r3, [pc, #124]	@ (8009cf4 <xTaskRemoveFromEventList+0xa4>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d11d      	bne.n	8009cba <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	3304      	adds	r3, #4
 8009c82:	0018      	movs	r0, r3
 8009c84:	f7ff f9bb 	bl	8008ffe <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8009cf8 <xTaskRemoveFromEventList+0xa8>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d903      	bls.n	8009c9c <xTaskRemoveFromEventList+0x4c>
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c98:	4b17      	ldr	r3, [pc, #92]	@ (8009cf8 <xTaskRemoveFromEventList+0xa8>)
 8009c9a:	601a      	str	r2, [r3, #0]
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ca0:	0013      	movs	r3, r2
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	189b      	adds	r3, r3, r2
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	4a14      	ldr	r2, [pc, #80]	@ (8009cfc <xTaskRemoveFromEventList+0xac>)
 8009caa:	189a      	adds	r2, r3, r2
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	3304      	adds	r3, #4
 8009cb0:	0019      	movs	r1, r3
 8009cb2:	0010      	movs	r0, r2
 8009cb4:	f7ff f94b 	bl	8008f4e <vListInsertEnd>
 8009cb8:	e007      	b.n	8009cca <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	3318      	adds	r3, #24
 8009cbe:	001a      	movs	r2, r3
 8009cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8009d00 <xTaskRemoveFromEventList+0xb0>)
 8009cc2:	0011      	movs	r1, r2
 8009cc4:	0018      	movs	r0, r3
 8009cc6:	f7ff f942 	bl	8008f4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cce:	4b0d      	ldr	r3, [pc, #52]	@ (8009d04 <xTaskRemoveFromEventList+0xb4>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d905      	bls.n	8009ce4 <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8009d08 <xTaskRemoveFromEventList+0xb8>)
 8009cde:	2201      	movs	r2, #1
 8009ce0:	601a      	str	r2, [r3, #0]
 8009ce2:	e001      	b.n	8009ce8 <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
}
 8009cea:	0018      	movs	r0, r3
 8009cec:	46bd      	mov	sp, r7
 8009cee:	b004      	add	sp, #16
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	46c0      	nop			@ (mov r8, r8)
 8009cf4:	20000a08 	.word	0x20000a08
 8009cf8:	200009e8 	.word	0x200009e8
 8009cfc:	200008e4 	.word	0x200008e4
 8009d00:	200009a0 	.word	0x200009a0
 8009d04:	200008e0 	.word	0x200008e0
 8009d08:	200009f4 	.word	0x200009f4

08009d0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009d14:	4b05      	ldr	r3, [pc, #20]	@ (8009d2c <vTaskInternalSetTimeOutState+0x20>)
 8009d16:	681a      	ldr	r2, [r3, #0]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009d1c:	4b04      	ldr	r3, [pc, #16]	@ (8009d30 <vTaskInternalSetTimeOutState+0x24>)
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	605a      	str	r2, [r3, #4]
}
 8009d24:	46c0      	nop			@ (mov r8, r8)
 8009d26:	46bd      	mov	sp, r7
 8009d28:	b002      	add	sp, #8
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	200009f8 	.word	0x200009f8
 8009d30:	200009e4 	.word	0x200009e4

08009d34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b086      	sub	sp, #24
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d102      	bne.n	8009d4a <xTaskCheckForTimeOut+0x16>
 8009d44:	b672      	cpsid	i
 8009d46:	46c0      	nop			@ (mov r8, r8)
 8009d48:	e7fd      	b.n	8009d46 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d102      	bne.n	8009d56 <xTaskCheckForTimeOut+0x22>
 8009d50:	b672      	cpsid	i
 8009d52:	46c0      	nop			@ (mov r8, r8)
 8009d54:	e7fd      	b.n	8009d52 <xTaskCheckForTimeOut+0x1e>

	taskENTER_CRITICAL();
 8009d56:	f000 fb0b 	bl	800a370 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8009dd0 <xTaskCheckForTimeOut+0x9c>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	693a      	ldr	r2, [r7, #16]
 8009d66:	1ad3      	subs	r3, r2, r3
 8009d68:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	3301      	adds	r3, #1
 8009d70:	d102      	bne.n	8009d78 <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009d72:	2300      	movs	r3, #0
 8009d74:	617b      	str	r3, [r7, #20]
 8009d76:	e024      	b.n	8009dc2 <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	4b15      	ldr	r3, [pc, #84]	@ (8009dd4 <xTaskCheckForTimeOut+0xa0>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d007      	beq.n	8009d94 <xTaskCheckForTimeOut+0x60>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	693a      	ldr	r2, [r7, #16]
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d302      	bcc.n	8009d94 <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	617b      	str	r3, [r7, #20]
 8009d92:	e016      	b.n	8009dc2 <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d20c      	bcs.n	8009db8 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	1ad2      	subs	r2, r2, r3
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	0018      	movs	r0, r3
 8009dae:	f7ff ffad 	bl	8009d0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009db2:	2300      	movs	r3, #0
 8009db4:	617b      	str	r3, [r7, #20]
 8009db6:	e004      	b.n	8009dc2 <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8009dc2:	f000 fae7 	bl	800a394 <vPortExitCritical>

	return xReturn;
 8009dc6:	697b      	ldr	r3, [r7, #20]
}
 8009dc8:	0018      	movs	r0, r3
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	b006      	add	sp, #24
 8009dce:	bd80      	pop	{r7, pc}
 8009dd0:	200009e4 	.word	0x200009e4
 8009dd4:	200009f8 	.word	0x200009f8

08009dd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009ddc:	4b02      	ldr	r3, [pc, #8]	@ (8009de8 <vTaskMissedYield+0x10>)
 8009dde:	2201      	movs	r2, #1
 8009de0:	601a      	str	r2, [r3, #0]
}
 8009de2:	46c0      	nop			@ (mov r8, r8)
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	200009f4 	.word	0x200009f4

08009dec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009df4:	f000 f84e 	bl	8009e94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009df8:	4b03      	ldr	r3, [pc, #12]	@ (8009e08 <prvIdleTask+0x1c>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d9f9      	bls.n	8009df4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009e00:	f000 faa6 	bl	800a350 <vPortYield>
		prvCheckTasksWaitingTermination();
 8009e04:	e7f6      	b.n	8009df4 <prvIdleTask+0x8>
 8009e06:	46c0      	nop			@ (mov r8, r8)
 8009e08:	200008e4 	.word	0x200008e4

08009e0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b082      	sub	sp, #8
 8009e10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e12:	2300      	movs	r3, #0
 8009e14:	607b      	str	r3, [r7, #4]
 8009e16:	e00c      	b.n	8009e32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	0013      	movs	r3, r2
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	189b      	adds	r3, r3, r2
 8009e20:	009b      	lsls	r3, r3, #2
 8009e22:	4a14      	ldr	r2, [pc, #80]	@ (8009e74 <prvInitialiseTaskLists+0x68>)
 8009e24:	189b      	adds	r3, r3, r2
 8009e26:	0018      	movs	r0, r3
 8009e28:	f7ff f868 	bl	8008efc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	3301      	adds	r3, #1
 8009e30:	607b      	str	r3, [r7, #4]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2b06      	cmp	r3, #6
 8009e36:	d9ef      	bls.n	8009e18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009e38:	4b0f      	ldr	r3, [pc, #60]	@ (8009e78 <prvInitialiseTaskLists+0x6c>)
 8009e3a:	0018      	movs	r0, r3
 8009e3c:	f7ff f85e 	bl	8008efc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009e40:	4b0e      	ldr	r3, [pc, #56]	@ (8009e7c <prvInitialiseTaskLists+0x70>)
 8009e42:	0018      	movs	r0, r3
 8009e44:	f7ff f85a 	bl	8008efc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009e48:	4b0d      	ldr	r3, [pc, #52]	@ (8009e80 <prvInitialiseTaskLists+0x74>)
 8009e4a:	0018      	movs	r0, r3
 8009e4c:	f7ff f856 	bl	8008efc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009e50:	4b0c      	ldr	r3, [pc, #48]	@ (8009e84 <prvInitialiseTaskLists+0x78>)
 8009e52:	0018      	movs	r0, r3
 8009e54:	f7ff f852 	bl	8008efc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009e58:	4b0b      	ldr	r3, [pc, #44]	@ (8009e88 <prvInitialiseTaskLists+0x7c>)
 8009e5a:	0018      	movs	r0, r3
 8009e5c:	f7ff f84e 	bl	8008efc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009e60:	4b0a      	ldr	r3, [pc, #40]	@ (8009e8c <prvInitialiseTaskLists+0x80>)
 8009e62:	4a05      	ldr	r2, [pc, #20]	@ (8009e78 <prvInitialiseTaskLists+0x6c>)
 8009e64:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009e66:	4b0a      	ldr	r3, [pc, #40]	@ (8009e90 <prvInitialiseTaskLists+0x84>)
 8009e68:	4a04      	ldr	r2, [pc, #16]	@ (8009e7c <prvInitialiseTaskLists+0x70>)
 8009e6a:	601a      	str	r2, [r3, #0]
}
 8009e6c:	46c0      	nop			@ (mov r8, r8)
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	b002      	add	sp, #8
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	200008e4 	.word	0x200008e4
 8009e78:	20000970 	.word	0x20000970
 8009e7c:	20000984 	.word	0x20000984
 8009e80:	200009a0 	.word	0x200009a0
 8009e84:	200009b4 	.word	0x200009b4
 8009e88:	200009cc 	.word	0x200009cc
 8009e8c:	20000998 	.word	0x20000998
 8009e90:	2000099c 	.word	0x2000099c

08009e94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b082      	sub	sp, #8
 8009e98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e9a:	e01a      	b.n	8009ed2 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8009e9c:	f000 fa68 	bl	800a370 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ea0:	4b10      	ldr	r3, [pc, #64]	@ (8009ee4 <prvCheckTasksWaitingTermination+0x50>)
 8009ea2:	68db      	ldr	r3, [r3, #12]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	3304      	adds	r3, #4
 8009eac:	0018      	movs	r0, r3
 8009eae:	f7ff f8a6 	bl	8008ffe <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8009ee8 <prvCheckTasksWaitingTermination+0x54>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	1e5a      	subs	r2, r3, #1
 8009eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8009ee8 <prvCheckTasksWaitingTermination+0x54>)
 8009eba:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8009eec <prvCheckTasksWaitingTermination+0x58>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	1e5a      	subs	r2, r3, #1
 8009ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8009eec <prvCheckTasksWaitingTermination+0x58>)
 8009ec4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8009ec6:	f000 fa65 	bl	800a394 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	0018      	movs	r0, r3
 8009ece:	f000 f80f 	bl	8009ef0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ed2:	4b06      	ldr	r3, [pc, #24]	@ (8009eec <prvCheckTasksWaitingTermination+0x58>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d1e0      	bne.n	8009e9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009eda:	46c0      	nop			@ (mov r8, r8)
 8009edc:	46c0      	nop			@ (mov r8, r8)
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	b002      	add	sp, #8
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	200009b4 	.word	0x200009b4
 8009ee8:	200009e0 	.word	0x200009e0
 8009eec:	200009c8 	.word	0x200009c8

08009ef0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b082      	sub	sp, #8
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2251      	movs	r2, #81	@ 0x51
 8009efc:	5c9b      	ldrb	r3, [r3, r2]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d109      	bne.n	8009f16 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f06:	0018      	movs	r0, r3
 8009f08:	f000 fb72 	bl	800a5f0 <vPortFree>
				vPortFree( pxTCB );
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	0018      	movs	r0, r3
 8009f10:	f000 fb6e 	bl	800a5f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009f14:	e011      	b.n	8009f3a <prvDeleteTCB+0x4a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2251      	movs	r2, #81	@ 0x51
 8009f1a:	5c9b      	ldrb	r3, [r3, r2]
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d104      	bne.n	8009f2a <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	0018      	movs	r0, r3
 8009f24:	f000 fb64 	bl	800a5f0 <vPortFree>
	}
 8009f28:	e007      	b.n	8009f3a <prvDeleteTCB+0x4a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2251      	movs	r2, #81	@ 0x51
 8009f2e:	5c9b      	ldrb	r3, [r3, r2]
 8009f30:	2b02      	cmp	r3, #2
 8009f32:	d002      	beq.n	8009f3a <prvDeleteTCB+0x4a>
 8009f34:	b672      	cpsid	i
 8009f36:	46c0      	nop			@ (mov r8, r8)
 8009f38:	e7fd      	b.n	8009f36 <prvDeleteTCB+0x46>
	}
 8009f3a:	46c0      	nop			@ (mov r8, r8)
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	b002      	add	sp, #8
 8009f40:	bd80      	pop	{r7, pc}
	...

08009f44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8009f78 <prvResetNextTaskUnblockTime+0x34>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d104      	bne.n	8009f5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009f54:	4b09      	ldr	r3, [pc, #36]	@ (8009f7c <prvResetNextTaskUnblockTime+0x38>)
 8009f56:	2201      	movs	r2, #1
 8009f58:	4252      	negs	r2, r2
 8009f5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009f5c:	e008      	b.n	8009f70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f5e:	4b06      	ldr	r3, [pc, #24]	@ (8009f78 <prvResetNextTaskUnblockTime+0x34>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	68db      	ldr	r3, [r3, #12]
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	685a      	ldr	r2, [r3, #4]
 8009f6c:	4b03      	ldr	r3, [pc, #12]	@ (8009f7c <prvResetNextTaskUnblockTime+0x38>)
 8009f6e:	601a      	str	r2, [r3, #0]
}
 8009f70:	46c0      	nop			@ (mov r8, r8)
 8009f72:	46bd      	mov	sp, r7
 8009f74:	b002      	add	sp, #8
 8009f76:	bd80      	pop	{r7, pc}
 8009f78:	20000998 	.word	0x20000998
 8009f7c:	20000a00 	.word	0x20000a00

08009f80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009f86:	4b0a      	ldr	r3, [pc, #40]	@ (8009fb0 <xTaskGetSchedulerState+0x30>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d102      	bne.n	8009f94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	607b      	str	r3, [r7, #4]
 8009f92:	e008      	b.n	8009fa6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f94:	4b07      	ldr	r3, [pc, #28]	@ (8009fb4 <xTaskGetSchedulerState+0x34>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d102      	bne.n	8009fa2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009f9c:	2302      	movs	r3, #2
 8009f9e:	607b      	str	r3, [r7, #4]
 8009fa0:	e001      	b.n	8009fa6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009fa6:	687b      	ldr	r3, [r7, #4]
	}
 8009fa8:	0018      	movs	r0, r3
 8009faa:	46bd      	mov	sp, r7
 8009fac:	b002      	add	sp, #8
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	200009ec 	.word	0x200009ec
 8009fb4:	20000a08 	.word	0x20000a08

08009fb8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d051      	beq.n	800a072 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fd2:	4b2a      	ldr	r3, [pc, #168]	@ (800a07c <xTaskPriorityInherit+0xc4>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d241      	bcs.n	800a060 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	699b      	ldr	r3, [r3, #24]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	db06      	blt.n	8009ff2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fe4:	4b25      	ldr	r3, [pc, #148]	@ (800a07c <xTaskPriorityInherit+0xc4>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fea:	2207      	movs	r2, #7
 8009fec:	1ad2      	subs	r2, r2, r3
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	6959      	ldr	r1, [r3, #20]
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ffa:	0013      	movs	r3, r2
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	189b      	adds	r3, r3, r2
 800a000:	009b      	lsls	r3, r3, #2
 800a002:	4a1f      	ldr	r2, [pc, #124]	@ (800a080 <xTaskPriorityInherit+0xc8>)
 800a004:	189b      	adds	r3, r3, r2
 800a006:	4299      	cmp	r1, r3
 800a008:	d122      	bne.n	800a050 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	3304      	adds	r3, #4
 800a00e:	0018      	movs	r0, r3
 800a010:	f7fe fff5 	bl	8008ffe <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a014:	4b19      	ldr	r3, [pc, #100]	@ (800a07c <xTaskPriorityInherit+0xc4>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a022:	4b18      	ldr	r3, [pc, #96]	@ (800a084 <xTaskPriorityInherit+0xcc>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	429a      	cmp	r2, r3
 800a028:	d903      	bls.n	800a032 <xTaskPriorityInherit+0x7a>
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a02e:	4b15      	ldr	r3, [pc, #84]	@ (800a084 <xTaskPriorityInherit+0xcc>)
 800a030:	601a      	str	r2, [r3, #0]
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a036:	0013      	movs	r3, r2
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	189b      	adds	r3, r3, r2
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	4a10      	ldr	r2, [pc, #64]	@ (800a080 <xTaskPriorityInherit+0xc8>)
 800a040:	189a      	adds	r2, r3, r2
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	3304      	adds	r3, #4
 800a046:	0019      	movs	r1, r3
 800a048:	0010      	movs	r0, r2
 800a04a:	f7fe ff80 	bl	8008f4e <vListInsertEnd>
 800a04e:	e004      	b.n	800a05a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a050:	4b0a      	ldr	r3, [pc, #40]	@ (800a07c <xTaskPriorityInherit+0xc4>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a05a:	2301      	movs	r3, #1
 800a05c:	60fb      	str	r3, [r7, #12]
 800a05e:	e008      	b.n	800a072 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a064:	4b05      	ldr	r3, [pc, #20]	@ (800a07c <xTaskPriorityInherit+0xc4>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d201      	bcs.n	800a072 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a06e:	2301      	movs	r3, #1
 800a070:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a072:	68fb      	ldr	r3, [r7, #12]
	}
 800a074:	0018      	movs	r0, r3
 800a076:	46bd      	mov	sp, r7
 800a078:	b004      	add	sp, #16
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	200008e0 	.word	0x200008e0
 800a080:	200008e4 	.word	0x200008e4
 800a084:	200009e8 	.word	0x200009e8

0800a088 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b086      	sub	sp, #24
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a096:	2301      	movs	r3, #1
 800a098:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d05a      	beq.n	800a156 <vTaskPriorityDisinheritAfterTimeout+0xce>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d102      	bne.n	800a0ae <vTaskPriorityDisinheritAfterTimeout+0x26>
 800a0a8:	b672      	cpsid	i
 800a0aa:	46c0      	nop			@ (mov r8, r8)
 800a0ac:	e7fd      	b.n	800a0aa <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0b2:	683a      	ldr	r2, [r7, #0]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d902      	bls.n	800a0be <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	617b      	str	r3, [r7, #20]
 800a0bc:	e002      	b.n	800a0c4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0c2:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0c8:	697a      	ldr	r2, [r7, #20]
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d043      	beq.n	800a156 <vTaskPriorityDisinheritAfterTimeout+0xce>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a0d2:	68fa      	ldr	r2, [r7, #12]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d13e      	bne.n	800a156 <vTaskPriorityDisinheritAfterTimeout+0xce>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a0d8:	4b21      	ldr	r3, [pc, #132]	@ (800a160 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	693a      	ldr	r2, [r7, #16]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d102      	bne.n	800a0e8 <vTaskPriorityDisinheritAfterTimeout+0x60>
 800a0e2:	b672      	cpsid	i
 800a0e4:	46c0      	nop			@ (mov r8, r8)
 800a0e6:	e7fd      	b.n	800a0e4 <vTaskPriorityDisinheritAfterTimeout+0x5c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0ec:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	697a      	ldr	r2, [r7, #20]
 800a0f2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	699b      	ldr	r3, [r3, #24]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	db04      	blt.n	800a106 <vTaskPriorityDisinheritAfterTimeout+0x7e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	2207      	movs	r2, #7
 800a100:	1ad2      	subs	r2, r2, r3
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	6959      	ldr	r1, [r3, #20]
 800a10a:	68ba      	ldr	r2, [r7, #8]
 800a10c:	0013      	movs	r3, r2
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	189b      	adds	r3, r3, r2
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	4a13      	ldr	r2, [pc, #76]	@ (800a164 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800a116:	189b      	adds	r3, r3, r2
 800a118:	4299      	cmp	r1, r3
 800a11a:	d11c      	bne.n	800a156 <vTaskPriorityDisinheritAfterTimeout+0xce>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	3304      	adds	r3, #4
 800a120:	0018      	movs	r0, r3
 800a122:	f7fe ff6c 	bl	8008ffe <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a12a:	4b0f      	ldr	r3, [pc, #60]	@ (800a168 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d903      	bls.n	800a13a <vTaskPriorityDisinheritAfterTimeout+0xb2>
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a136:	4b0c      	ldr	r3, [pc, #48]	@ (800a168 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800a138:	601a      	str	r2, [r3, #0]
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a13e:	0013      	movs	r3, r2
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	189b      	adds	r3, r3, r2
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	4a07      	ldr	r2, [pc, #28]	@ (800a164 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800a148:	189a      	adds	r2, r3, r2
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	3304      	adds	r3, #4
 800a14e:	0019      	movs	r1, r3
 800a150:	0010      	movs	r0, r2
 800a152:	f7fe fefc 	bl	8008f4e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a156:	46c0      	nop			@ (mov r8, r8)
 800a158:	46bd      	mov	sp, r7
 800a15a:	b006      	add	sp, #24
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	46c0      	nop			@ (mov r8, r8)
 800a160:	200008e0 	.word	0x200008e0
 800a164:	200008e4 	.word	0x200008e4
 800a168:	200009e8 	.word	0x200009e8

0800a16c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a170:	4b06      	ldr	r3, [pc, #24]	@ (800a18c <pvTaskIncrementMutexHeldCount+0x20>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d004      	beq.n	800a182 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a178:	4b04      	ldr	r3, [pc, #16]	@ (800a18c <pvTaskIncrementMutexHeldCount+0x20>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a17e:	3201      	adds	r2, #1
 800a180:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800a182:	4b02      	ldr	r3, [pc, #8]	@ (800a18c <pvTaskIncrementMutexHeldCount+0x20>)
 800a184:	681b      	ldr	r3, [r3, #0]
	}
 800a186:	0018      	movs	r0, r3
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	200008e0 	.word	0x200008e0

0800a190 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a19a:	4b21      	ldr	r3, [pc, #132]	@ (800a220 <prvAddCurrentTaskToDelayedList+0x90>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1a0:	4b20      	ldr	r3, [pc, #128]	@ (800a224 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	3304      	adds	r3, #4
 800a1a6:	0018      	movs	r0, r3
 800a1a8:	f7fe ff29 	bl	8008ffe <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	d10b      	bne.n	800a1ca <prvAddCurrentTaskToDelayedList+0x3a>
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d008      	beq.n	800a1ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1b8:	4b1a      	ldr	r3, [pc, #104]	@ (800a224 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	1d1a      	adds	r2, r3, #4
 800a1be:	4b1a      	ldr	r3, [pc, #104]	@ (800a228 <prvAddCurrentTaskToDelayedList+0x98>)
 800a1c0:	0011      	movs	r1, r2
 800a1c2:	0018      	movs	r0, r3
 800a1c4:	f7fe fec3 	bl	8008f4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a1c8:	e026      	b.n	800a218 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a1ca:	68fa      	ldr	r2, [r7, #12]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	18d3      	adds	r3, r2, r3
 800a1d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a1d2:	4b14      	ldr	r3, [pc, #80]	@ (800a224 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	68ba      	ldr	r2, [r7, #8]
 800a1d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a1da:	68ba      	ldr	r2, [r7, #8]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d209      	bcs.n	800a1f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1e2:	4b12      	ldr	r3, [pc, #72]	@ (800a22c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	4b0f      	ldr	r3, [pc, #60]	@ (800a224 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	3304      	adds	r3, #4
 800a1ec:	0019      	movs	r1, r3
 800a1ee:	0010      	movs	r0, r2
 800a1f0:	f7fe fecf 	bl	8008f92 <vListInsert>
}
 800a1f4:	e010      	b.n	800a218 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1f6:	4b0e      	ldr	r3, [pc, #56]	@ (800a230 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a1f8:	681a      	ldr	r2, [r3, #0]
 800a1fa:	4b0a      	ldr	r3, [pc, #40]	@ (800a224 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	3304      	adds	r3, #4
 800a200:	0019      	movs	r1, r3
 800a202:	0010      	movs	r0, r2
 800a204:	f7fe fec5 	bl	8008f92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a208:	4b0a      	ldr	r3, [pc, #40]	@ (800a234 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	68ba      	ldr	r2, [r7, #8]
 800a20e:	429a      	cmp	r2, r3
 800a210:	d202      	bcs.n	800a218 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a212:	4b08      	ldr	r3, [pc, #32]	@ (800a234 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a214:	68ba      	ldr	r2, [r7, #8]
 800a216:	601a      	str	r2, [r3, #0]
}
 800a218:	46c0      	nop			@ (mov r8, r8)
 800a21a:	46bd      	mov	sp, r7
 800a21c:	b004      	add	sp, #16
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	200009e4 	.word	0x200009e4
 800a224:	200008e0 	.word	0x200008e0
 800a228:	200009cc 	.word	0x200009cc
 800a22c:	2000099c 	.word	0x2000099c
 800a230:	20000998 	.word	0x20000998
 800a234:	20000a00 	.word	0x20000a00

0800a238 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	3b04      	subs	r3, #4
 800a248:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2280      	movs	r2, #128	@ 0x80
 800a24e:	0452      	lsls	r2, r2, #17
 800a250:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	3b04      	subs	r3, #4
 800a256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800a258:	68ba      	ldr	r2, [r7, #8]
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	3b04      	subs	r3, #4
 800a262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a264:	4a08      	ldr	r2, [pc, #32]	@ (800a288 <pxPortInitialiseStack+0x50>)
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	3b14      	subs	r3, #20
 800a26e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	3b20      	subs	r3, #32
 800a27a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a27c:	68fb      	ldr	r3, [r7, #12]
}
 800a27e:	0018      	movs	r0, r3
 800a280:	46bd      	mov	sp, r7
 800a282:	b004      	add	sp, #16
 800a284:	bd80      	pop	{r7, pc}
 800a286:	46c0      	nop			@ (mov r8, r8)
 800a288:	0800a28d 	.word	0x0800a28d

0800a28c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b082      	sub	sp, #8
 800a290:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a292:	2300      	movs	r3, #0
 800a294:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a296:	4b08      	ldr	r3, [pc, #32]	@ (800a2b8 <prvTaskExitError+0x2c>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	3301      	adds	r3, #1
 800a29c:	d002      	beq.n	800a2a4 <prvTaskExitError+0x18>
 800a29e:	b672      	cpsid	i
 800a2a0:	46c0      	nop			@ (mov r8, r8)
 800a2a2:	e7fd      	b.n	800a2a0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800a2a4:	b672      	cpsid	i
	while( ulDummy == 0 )
 800a2a6:	46c0      	nop			@ (mov r8, r8)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d0fc      	beq.n	800a2a8 <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a2ae:	46c0      	nop			@ (mov r8, r8)
 800a2b0:	46c0      	nop			@ (mov r8, r8)
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	b002      	add	sp, #8
 800a2b6:	bd80      	pop	{r7, pc}
 800a2b8:	20000024 	.word	0x20000024

0800a2bc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800a2c0:	46c0      	nop			@ (mov r8, r8)
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
	...

0800a2d0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800a2d0:	4a0b      	ldr	r2, [pc, #44]	@ (800a300 <pxCurrentTCBConst2>)
 800a2d2:	6813      	ldr	r3, [r2, #0]
 800a2d4:	6818      	ldr	r0, [r3, #0]
 800a2d6:	3020      	adds	r0, #32
 800a2d8:	f380 8809 	msr	PSP, r0
 800a2dc:	2002      	movs	r0, #2
 800a2de:	f380 8814 	msr	CONTROL, r0
 800a2e2:	f3bf 8f6f 	isb	sy
 800a2e6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800a2e8:	46ae      	mov	lr, r5
 800a2ea:	bc08      	pop	{r3}
 800a2ec:	bc04      	pop	{r2}
 800a2ee:	b662      	cpsie	i
 800a2f0:	4718      	bx	r3
 800a2f2:	46c0      	nop			@ (mov r8, r8)
 800a2f4:	46c0      	nop			@ (mov r8, r8)
 800a2f6:	46c0      	nop			@ (mov r8, r8)
 800a2f8:	46c0      	nop			@ (mov r8, r8)
 800a2fa:	46c0      	nop			@ (mov r8, r8)
 800a2fc:	46c0      	nop			@ (mov r8, r8)
 800a2fe:	46c0      	nop			@ (mov r8, r8)

0800a300 <pxCurrentTCBConst2>:
 800a300:	200008e0 	.word	0x200008e0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 800a304:	46c0      	nop			@ (mov r8, r8)
 800a306:	46c0      	nop			@ (mov r8, r8)

0800a308 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800a30c:	4b0e      	ldr	r3, [pc, #56]	@ (800a348 <xPortStartScheduler+0x40>)
 800a30e:	681a      	ldr	r2, [r3, #0]
 800a310:	4b0d      	ldr	r3, [pc, #52]	@ (800a348 <xPortStartScheduler+0x40>)
 800a312:	21ff      	movs	r1, #255	@ 0xff
 800a314:	0409      	lsls	r1, r1, #16
 800a316:	430a      	orrs	r2, r1
 800a318:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800a31a:	4b0b      	ldr	r3, [pc, #44]	@ (800a348 <xPortStartScheduler+0x40>)
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	4b0a      	ldr	r3, [pc, #40]	@ (800a348 <xPortStartScheduler+0x40>)
 800a320:	21ff      	movs	r1, #255	@ 0xff
 800a322:	0609      	lsls	r1, r1, #24
 800a324:	430a      	orrs	r2, r1
 800a326:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 800a328:	f000 f898 	bl	800a45c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a32c:	4b07      	ldr	r3, [pc, #28]	@ (800a34c <xPortStartScheduler+0x44>)
 800a32e:	2200      	movs	r2, #0
 800a330:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 800a332:	f7ff ffcd 	bl	800a2d0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a336:	f7ff fc19 	bl	8009b6c <vTaskSwitchContext>
	prvTaskExitError();
 800a33a:	f7ff ffa7 	bl	800a28c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a33e:	2300      	movs	r3, #0
}
 800a340:	0018      	movs	r0, r3
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	46c0      	nop			@ (mov r8, r8)
 800a348:	e000ed20 	.word	0xe000ed20
 800a34c:	20000024 	.word	0x20000024

0800a350 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800a350:	b580      	push	{r7, lr}
 800a352:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800a354:	4b05      	ldr	r3, [pc, #20]	@ (800a36c <vPortYield+0x1c>)
 800a356:	2280      	movs	r2, #128	@ 0x80
 800a358:	0552      	lsls	r2, r2, #21
 800a35a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800a35c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800a360:	f3bf 8f6f 	isb	sy
}
 800a364:	46c0      	nop			@ (mov r8, r8)
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	46c0      	nop			@ (mov r8, r8)
 800a36c:	e000ed04 	.word	0xe000ed04

0800a370 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a370:	b580      	push	{r7, lr}
 800a372:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800a374:	b672      	cpsid	i
    uxCriticalNesting++;
 800a376:	4b06      	ldr	r3, [pc, #24]	@ (800a390 <vPortEnterCritical+0x20>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	1c5a      	adds	r2, r3, #1
 800a37c:	4b04      	ldr	r3, [pc, #16]	@ (800a390 <vPortEnterCritical+0x20>)
 800a37e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 800a380:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800a384:	f3bf 8f6f 	isb	sy
}
 800a388:	46c0      	nop			@ (mov r8, r8)
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	46c0      	nop			@ (mov r8, r8)
 800a390:	20000024 	.word	0x20000024

0800a394 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a394:	b580      	push	{r7, lr}
 800a396:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a398:	4b09      	ldr	r3, [pc, #36]	@ (800a3c0 <vPortExitCritical+0x2c>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d102      	bne.n	800a3a6 <vPortExitCritical+0x12>
 800a3a0:	b672      	cpsid	i
 800a3a2:	46c0      	nop			@ (mov r8, r8)
 800a3a4:	e7fd      	b.n	800a3a2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 800a3a6:	4b06      	ldr	r3, [pc, #24]	@ (800a3c0 <vPortExitCritical+0x2c>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	1e5a      	subs	r2, r3, #1
 800a3ac:	4b04      	ldr	r3, [pc, #16]	@ (800a3c0 <vPortExitCritical+0x2c>)
 800a3ae:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800a3b0:	4b03      	ldr	r3, [pc, #12]	@ (800a3c0 <vPortExitCritical+0x2c>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d100      	bne.n	800a3ba <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 800a3b8:	b662      	cpsie	i
    }
}
 800a3ba:	46c0      	nop			@ (mov r8, r8)
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}
 800a3c0:	20000024 	.word	0x20000024

0800a3c4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800a3c4:	f3ef 8010 	mrs	r0, PRIMASK
 800a3c8:	b672      	cpsid	i
 800a3ca:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800a3cc:	46c0      	nop			@ (mov r8, r8)
 800a3ce:	0018      	movs	r0, r3

0800a3d0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800a3d0:	f380 8810 	msr	PRIMASK, r0
 800a3d4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 800a3d6:	46c0      	nop			@ (mov r8, r8)
	...

0800a3e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a3e0:	f3ef 8009 	mrs	r0, PSP
 800a3e4:	4b0e      	ldr	r3, [pc, #56]	@ (800a420 <pxCurrentTCBConst>)
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	3820      	subs	r0, #32
 800a3ea:	6010      	str	r0, [r2, #0]
 800a3ec:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800a3ee:	4644      	mov	r4, r8
 800a3f0:	464d      	mov	r5, r9
 800a3f2:	4656      	mov	r6, sl
 800a3f4:	465f      	mov	r7, fp
 800a3f6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800a3f8:	b508      	push	{r3, lr}
 800a3fa:	b672      	cpsid	i
 800a3fc:	f7ff fbb6 	bl	8009b6c <vTaskSwitchContext>
 800a400:	b662      	cpsie	i
 800a402:	bc0c      	pop	{r2, r3}
 800a404:	6811      	ldr	r1, [r2, #0]
 800a406:	6808      	ldr	r0, [r1, #0]
 800a408:	3010      	adds	r0, #16
 800a40a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800a40c:	46a0      	mov	r8, r4
 800a40e:	46a9      	mov	r9, r5
 800a410:	46b2      	mov	sl, r6
 800a412:	46bb      	mov	fp, r7
 800a414:	f380 8809 	msr	PSP, r0
 800a418:	3820      	subs	r0, #32
 800a41a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800a41c:	4718      	bx	r3
 800a41e:	46c0      	nop			@ (mov r8, r8)

0800a420 <pxCurrentTCBConst>:
 800a420:	200008e0 	.word	0x200008e0
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 800a424:	46c0      	nop			@ (mov r8, r8)
 800a426:	46c0      	nop			@ (mov r8, r8)

0800a428 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b082      	sub	sp, #8
 800a42c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800a42e:	f7ff ffc9 	bl	800a3c4 <ulSetInterruptMaskFromISR>
 800a432:	0003      	movs	r3, r0
 800a434:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a436:	f7ff fae9 	bl	8009a0c <xTaskIncrementTick>
 800a43a:	1e03      	subs	r3, r0, #0
 800a43c:	d003      	beq.n	800a446 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800a43e:	4b06      	ldr	r3, [pc, #24]	@ (800a458 <SysTick_Handler+0x30>)
 800a440:	2280      	movs	r2, #128	@ 0x80
 800a442:	0552      	lsls	r2, r2, #21
 800a444:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	0018      	movs	r0, r3
 800a44a:	f7ff ffc1 	bl	800a3d0 <vClearInterruptMaskFromISR>
}
 800a44e:	46c0      	nop			@ (mov r8, r8)
 800a450:	46bd      	mov	sp, r7
 800a452:	b002      	add	sp, #8
 800a454:	bd80      	pop	{r7, pc}
 800a456:	46c0      	nop			@ (mov r8, r8)
 800a458:	e000ed04 	.word	0xe000ed04

0800a45c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 800a460:	4b0b      	ldr	r3, [pc, #44]	@ (800a490 <prvSetupTimerInterrupt+0x34>)
 800a462:	2200      	movs	r2, #0
 800a464:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 800a466:	4b0b      	ldr	r3, [pc, #44]	@ (800a494 <prvSetupTimerInterrupt+0x38>)
 800a468:	2200      	movs	r2, #0
 800a46a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a46c:	4b0a      	ldr	r3, [pc, #40]	@ (800a498 <prvSetupTimerInterrupt+0x3c>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	22fa      	movs	r2, #250	@ 0xfa
 800a472:	0091      	lsls	r1, r2, #2
 800a474:	0018      	movs	r0, r3
 800a476:	f7f5 fe63 	bl	8000140 <__udivsi3>
 800a47a:	0003      	movs	r3, r0
 800a47c:	001a      	movs	r2, r3
 800a47e:	4b07      	ldr	r3, [pc, #28]	@ (800a49c <prvSetupTimerInterrupt+0x40>)
 800a480:	3a01      	subs	r2, #1
 800a482:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800a484:	4b02      	ldr	r3, [pc, #8]	@ (800a490 <prvSetupTimerInterrupt+0x34>)
 800a486:	2207      	movs	r2, #7
 800a488:	601a      	str	r2, [r3, #0]
}
 800a48a:	46c0      	nop			@ (mov r8, r8)
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}
 800a490:	e000e010 	.word	0xe000e010
 800a494:	e000e018 	.word	0xe000e018
 800a498:	20000000 	.word	0x20000000
 800a49c:	e000e014 	.word	0xe000e014

0800a4a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b086      	sub	sp, #24
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800a4ac:	f7ff fa16 	bl	80098dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a4b0:	4b4a      	ldr	r3, [pc, #296]	@ (800a5dc <pvPortMalloc+0x13c>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d101      	bne.n	800a4bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a4b8:	f000 f8e4 	bl	800a684 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a4bc:	4b48      	ldr	r3, [pc, #288]	@ (800a5e0 <pvPortMalloc+0x140>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	4013      	ands	r3, r2
 800a4c4:	d000      	beq.n	800a4c8 <pvPortMalloc+0x28>
 800a4c6:	e07b      	b.n	800a5c0 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d013      	beq.n	800a4f6 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 800a4ce:	2208      	movs	r2, #8
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	189b      	adds	r3, r3, r2
 800a4d4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2207      	movs	r2, #7
 800a4da:	4013      	ands	r3, r2
 800a4dc:	d00b      	beq.n	800a4f6 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2207      	movs	r2, #7
 800a4e2:	4393      	bics	r3, r2
 800a4e4:	3308      	adds	r3, #8
 800a4e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2207      	movs	r2, #7
 800a4ec:	4013      	ands	r3, r2
 800a4ee:	d002      	beq.n	800a4f6 <pvPortMalloc+0x56>
 800a4f0:	b672      	cpsid	i
 800a4f2:	46c0      	nop			@ (mov r8, r8)
 800a4f4:	e7fd      	b.n	800a4f2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d061      	beq.n	800a5c0 <pvPortMalloc+0x120>
 800a4fc:	4b39      	ldr	r3, [pc, #228]	@ (800a5e4 <pvPortMalloc+0x144>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	687a      	ldr	r2, [r7, #4]
 800a502:	429a      	cmp	r2, r3
 800a504:	d85c      	bhi.n	800a5c0 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a506:	4b38      	ldr	r3, [pc, #224]	@ (800a5e8 <pvPortMalloc+0x148>)
 800a508:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800a50a:	4b37      	ldr	r3, [pc, #220]	@ (800a5e8 <pvPortMalloc+0x148>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a510:	e004      	b.n	800a51c <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	429a      	cmp	r2, r3
 800a524:	d903      	bls.n	800a52e <pvPortMalloc+0x8e>
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d1f1      	bne.n	800a512 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a52e:	4b2b      	ldr	r3, [pc, #172]	@ (800a5dc <pvPortMalloc+0x13c>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	697a      	ldr	r2, [r7, #20]
 800a534:	429a      	cmp	r2, r3
 800a536:	d043      	beq.n	800a5c0 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	2208      	movs	r2, #8
 800a53e:	189b      	adds	r3, r3, r2
 800a540:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	681a      	ldr	r2, [r3, #0]
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	685a      	ldr	r2, [r3, #4]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	1ad2      	subs	r2, r2, r3
 800a552:	2308      	movs	r3, #8
 800a554:	005b      	lsls	r3, r3, #1
 800a556:	429a      	cmp	r2, r3
 800a558:	d917      	bls.n	800a58a <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a55a:	697a      	ldr	r2, [r7, #20]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	18d3      	adds	r3, r2, r3
 800a560:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	2207      	movs	r2, #7
 800a566:	4013      	ands	r3, r2
 800a568:	d002      	beq.n	800a570 <pvPortMalloc+0xd0>
 800a56a:	b672      	cpsid	i
 800a56c:	46c0      	nop			@ (mov r8, r8)
 800a56e:	e7fd      	b.n	800a56c <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	685a      	ldr	r2, [r3, #4]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	1ad2      	subs	r2, r2, r3
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	0018      	movs	r0, r3
 800a586:	f000 f8dd 	bl	800a744 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a58a:	4b16      	ldr	r3, [pc, #88]	@ (800a5e4 <pvPortMalloc+0x144>)
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	1ad2      	subs	r2, r2, r3
 800a594:	4b13      	ldr	r3, [pc, #76]	@ (800a5e4 <pvPortMalloc+0x144>)
 800a596:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a598:	4b12      	ldr	r3, [pc, #72]	@ (800a5e4 <pvPortMalloc+0x144>)
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	4b13      	ldr	r3, [pc, #76]	@ (800a5ec <pvPortMalloc+0x14c>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d203      	bcs.n	800a5ac <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a5a4:	4b0f      	ldr	r3, [pc, #60]	@ (800a5e4 <pvPortMalloc+0x144>)
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	4b10      	ldr	r3, [pc, #64]	@ (800a5ec <pvPortMalloc+0x14c>)
 800a5aa:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	685a      	ldr	r2, [r3, #4]
 800a5b0:	4b0b      	ldr	r3, [pc, #44]	@ (800a5e0 <pvPortMalloc+0x140>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	431a      	orrs	r2, r3
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a5c0:	f7ff f998 	bl	80098f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2207      	movs	r2, #7
 800a5c8:	4013      	ands	r3, r2
 800a5ca:	d002      	beq.n	800a5d2 <pvPortMalloc+0x132>
 800a5cc:	b672      	cpsid	i
 800a5ce:	46c0      	nop			@ (mov r8, r8)
 800a5d0:	e7fd      	b.n	800a5ce <pvPortMalloc+0x12e>
	return pvReturn;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
}
 800a5d4:	0018      	movs	r0, r3
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	b006      	add	sp, #24
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	20001614 	.word	0x20001614
 800a5e0:	20001620 	.word	0x20001620
 800a5e4:	20001618 	.word	0x20001618
 800a5e8:	2000160c 	.word	0x2000160c
 800a5ec:	2000161c 	.word	0x2000161c

0800a5f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d037      	beq.n	800a672 <vPortFree+0x82>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a602:	2308      	movs	r3, #8
 800a604:	425b      	negs	r3, r3
 800a606:	68fa      	ldr	r2, [r7, #12]
 800a608:	18d3      	adds	r3, r2, r3
 800a60a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	685a      	ldr	r2, [r3, #4]
 800a614:	4b19      	ldr	r3, [pc, #100]	@ (800a67c <vPortFree+0x8c>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4013      	ands	r3, r2
 800a61a:	d102      	bne.n	800a622 <vPortFree+0x32>
 800a61c:	b672      	cpsid	i
 800a61e:	46c0      	nop			@ (mov r8, r8)
 800a620:	e7fd      	b.n	800a61e <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d002      	beq.n	800a630 <vPortFree+0x40>
 800a62a:	b672      	cpsid	i
 800a62c:	46c0      	nop			@ (mov r8, r8)
 800a62e:	e7fd      	b.n	800a62c <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	685a      	ldr	r2, [r3, #4]
 800a634:	4b11      	ldr	r3, [pc, #68]	@ (800a67c <vPortFree+0x8c>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4013      	ands	r3, r2
 800a63a:	d01a      	beq.n	800a672 <vPortFree+0x82>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d116      	bne.n	800a672 <vPortFree+0x82>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	685a      	ldr	r2, [r3, #4]
 800a648:	4b0c      	ldr	r3, [pc, #48]	@ (800a67c <vPortFree+0x8c>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	43db      	mvns	r3, r3
 800a64e:	401a      	ands	r2, r3
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a654:	f7ff f942 	bl	80098dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	685a      	ldr	r2, [r3, #4]
 800a65c:	4b08      	ldr	r3, [pc, #32]	@ (800a680 <vPortFree+0x90>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	18d2      	adds	r2, r2, r3
 800a662:	4b07      	ldr	r3, [pc, #28]	@ (800a680 <vPortFree+0x90>)
 800a664:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	0018      	movs	r0, r3
 800a66a:	f000 f86b 	bl	800a744 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a66e:	f7ff f941 	bl	80098f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a672:	46c0      	nop			@ (mov r8, r8)
 800a674:	46bd      	mov	sp, r7
 800a676:	b004      	add	sp, #16
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	46c0      	nop			@ (mov r8, r8)
 800a67c:	20001620 	.word	0x20001620
 800a680:	20001618 	.word	0x20001618

0800a684 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a68a:	23c0      	movs	r3, #192	@ 0xc0
 800a68c:	011b      	lsls	r3, r3, #4
 800a68e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a690:	4b26      	ldr	r3, [pc, #152]	@ (800a72c <prvHeapInit+0xa8>)
 800a692:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2207      	movs	r2, #7
 800a698:	4013      	ands	r3, r2
 800a69a:	d00c      	beq.n	800a6b6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	3307      	adds	r3, #7
 800a6a0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2207      	movs	r2, #7
 800a6a6:	4393      	bics	r3, r2
 800a6a8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a6aa:	68ba      	ldr	r2, [r7, #8]
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	1ad2      	subs	r2, r2, r3
 800a6b0:	4b1e      	ldr	r3, [pc, #120]	@ (800a72c <prvHeapInit+0xa8>)
 800a6b2:	18d3      	adds	r3, r2, r3
 800a6b4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a6ba:	4b1d      	ldr	r3, [pc, #116]	@ (800a730 <prvHeapInit+0xac>)
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a6c0:	4b1b      	ldr	r3, [pc, #108]	@ (800a730 <prvHeapInit+0xac>)
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	68ba      	ldr	r2, [r7, #8]
 800a6ca:	18d3      	adds	r3, r2, r3
 800a6cc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a6ce:	2208      	movs	r2, #8
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	1a9b      	subs	r3, r3, r2
 800a6d4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2207      	movs	r2, #7
 800a6da:	4393      	bics	r3, r2
 800a6dc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a6de:	68fa      	ldr	r2, [r7, #12]
 800a6e0:	4b14      	ldr	r3, [pc, #80]	@ (800a734 <prvHeapInit+0xb0>)
 800a6e2:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800a6e4:	4b13      	ldr	r3, [pc, #76]	@ (800a734 <prvHeapInit+0xb0>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a6ec:	4b11      	ldr	r3, [pc, #68]	@ (800a734 <prvHeapInit+0xb0>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	68fa      	ldr	r2, [r7, #12]
 800a6fc:	1ad2      	subs	r2, r2, r3
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a702:	4b0c      	ldr	r3, [pc, #48]	@ (800a734 <prvHeapInit+0xb0>)
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	685a      	ldr	r2, [r3, #4]
 800a70e:	4b0a      	ldr	r3, [pc, #40]	@ (800a738 <prvHeapInit+0xb4>)
 800a710:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	685a      	ldr	r2, [r3, #4]
 800a716:	4b09      	ldr	r3, [pc, #36]	@ (800a73c <prvHeapInit+0xb8>)
 800a718:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a71a:	4b09      	ldr	r3, [pc, #36]	@ (800a740 <prvHeapInit+0xbc>)
 800a71c:	2280      	movs	r2, #128	@ 0x80
 800a71e:	0612      	lsls	r2, r2, #24
 800a720:	601a      	str	r2, [r3, #0]
}
 800a722:	46c0      	nop			@ (mov r8, r8)
 800a724:	46bd      	mov	sp, r7
 800a726:	b004      	add	sp, #16
 800a728:	bd80      	pop	{r7, pc}
 800a72a:	46c0      	nop			@ (mov r8, r8)
 800a72c:	20000a0c 	.word	0x20000a0c
 800a730:	2000160c 	.word	0x2000160c
 800a734:	20001614 	.word	0x20001614
 800a738:	2000161c 	.word	0x2000161c
 800a73c:	20001618 	.word	0x20001618
 800a740:	20001620 	.word	0x20001620

0800a744 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a74c:	4b27      	ldr	r3, [pc, #156]	@ (800a7ec <prvInsertBlockIntoFreeList+0xa8>)
 800a74e:	60fb      	str	r3, [r7, #12]
 800a750:	e002      	b.n	800a758 <prvInsertBlockIntoFreeList+0x14>
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	60fb      	str	r3, [r7, #12]
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	429a      	cmp	r2, r3
 800a760:	d8f7      	bhi.n	800a752 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	68ba      	ldr	r2, [r7, #8]
 800a76c:	18d3      	adds	r3, r2, r3
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	429a      	cmp	r2, r3
 800a772:	d108      	bne.n	800a786 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	685a      	ldr	r2, [r3, #4]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	685b      	ldr	r3, [r3, #4]
 800a77c:	18d2      	adds	r2, r2, r3
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	68ba      	ldr	r2, [r7, #8]
 800a790:	18d2      	adds	r2, r2, r3
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	429a      	cmp	r2, r3
 800a798:	d118      	bne.n	800a7cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681a      	ldr	r2, [r3, #0]
 800a79e:	4b14      	ldr	r3, [pc, #80]	@ (800a7f0 <prvInsertBlockIntoFreeList+0xac>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d00d      	beq.n	800a7c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	685a      	ldr	r2, [r3, #4]
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	18d2      	adds	r2, r2, r3
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	601a      	str	r2, [r3, #0]
 800a7c0:	e008      	b.n	800a7d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a7c2:	4b0b      	ldr	r3, [pc, #44]	@ (800a7f0 <prvInsertBlockIntoFreeList+0xac>)
 800a7c4:	681a      	ldr	r2, [r3, #0]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	601a      	str	r2, [r3, #0]
 800a7ca:	e003      	b.n	800a7d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681a      	ldr	r2, [r3, #0]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a7d4:	68fa      	ldr	r2, [r7, #12]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d002      	beq.n	800a7e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a7e2:	46c0      	nop			@ (mov r8, r8)
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	b004      	add	sp, #16
 800a7e8:	bd80      	pop	{r7, pc}
 800a7ea:	46c0      	nop			@ (mov r8, r8)
 800a7ec:	2000160c 	.word	0x2000160c
 800a7f0:	20001614 	.word	0x20001614

0800a7f4 <__cvt>:
 800a7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7f6:	001f      	movs	r7, r3
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	0016      	movs	r6, r2
 800a7fc:	b08b      	sub	sp, #44	@ 0x2c
 800a7fe:	429f      	cmp	r7, r3
 800a800:	da04      	bge.n	800a80c <__cvt+0x18>
 800a802:	2180      	movs	r1, #128	@ 0x80
 800a804:	0609      	lsls	r1, r1, #24
 800a806:	187b      	adds	r3, r7, r1
 800a808:	001f      	movs	r7, r3
 800a80a:	232d      	movs	r3, #45	@ 0x2d
 800a80c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a80e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800a810:	7013      	strb	r3, [r2, #0]
 800a812:	2320      	movs	r3, #32
 800a814:	2203      	movs	r2, #3
 800a816:	439d      	bics	r5, r3
 800a818:	2d46      	cmp	r5, #70	@ 0x46
 800a81a:	d007      	beq.n	800a82c <__cvt+0x38>
 800a81c:	002b      	movs	r3, r5
 800a81e:	3b45      	subs	r3, #69	@ 0x45
 800a820:	4259      	negs	r1, r3
 800a822:	414b      	adcs	r3, r1
 800a824:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800a826:	3a01      	subs	r2, #1
 800a828:	18cb      	adds	r3, r1, r3
 800a82a:	9310      	str	r3, [sp, #64]	@ 0x40
 800a82c:	ab09      	add	r3, sp, #36	@ 0x24
 800a82e:	9304      	str	r3, [sp, #16]
 800a830:	ab08      	add	r3, sp, #32
 800a832:	9303      	str	r3, [sp, #12]
 800a834:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a836:	9200      	str	r2, [sp, #0]
 800a838:	9302      	str	r3, [sp, #8]
 800a83a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a83c:	0032      	movs	r2, r6
 800a83e:	9301      	str	r3, [sp, #4]
 800a840:	003b      	movs	r3, r7
 800a842:	f000 fef9 	bl	800b638 <_dtoa_r>
 800a846:	0004      	movs	r4, r0
 800a848:	2d47      	cmp	r5, #71	@ 0x47
 800a84a:	d11b      	bne.n	800a884 <__cvt+0x90>
 800a84c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a84e:	07db      	lsls	r3, r3, #31
 800a850:	d511      	bpl.n	800a876 <__cvt+0x82>
 800a852:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a854:	18c3      	adds	r3, r0, r3
 800a856:	9307      	str	r3, [sp, #28]
 800a858:	2200      	movs	r2, #0
 800a85a:	2300      	movs	r3, #0
 800a85c:	0030      	movs	r0, r6
 800a85e:	0039      	movs	r1, r7
 800a860:	f7f5 fdf4 	bl	800044c <__aeabi_dcmpeq>
 800a864:	2800      	cmp	r0, #0
 800a866:	d001      	beq.n	800a86c <__cvt+0x78>
 800a868:	9b07      	ldr	r3, [sp, #28]
 800a86a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a86c:	2230      	movs	r2, #48	@ 0x30
 800a86e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a870:	9907      	ldr	r1, [sp, #28]
 800a872:	428b      	cmp	r3, r1
 800a874:	d320      	bcc.n	800a8b8 <__cvt+0xc4>
 800a876:	0020      	movs	r0, r4
 800a878:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a87a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a87c:	1b1b      	subs	r3, r3, r4
 800a87e:	6013      	str	r3, [r2, #0]
 800a880:	b00b      	add	sp, #44	@ 0x2c
 800a882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a884:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a886:	18c3      	adds	r3, r0, r3
 800a888:	9307      	str	r3, [sp, #28]
 800a88a:	2d46      	cmp	r5, #70	@ 0x46
 800a88c:	d1e4      	bne.n	800a858 <__cvt+0x64>
 800a88e:	7803      	ldrb	r3, [r0, #0]
 800a890:	2b30      	cmp	r3, #48	@ 0x30
 800a892:	d10c      	bne.n	800a8ae <__cvt+0xba>
 800a894:	2200      	movs	r2, #0
 800a896:	2300      	movs	r3, #0
 800a898:	0030      	movs	r0, r6
 800a89a:	0039      	movs	r1, r7
 800a89c:	f7f5 fdd6 	bl	800044c <__aeabi_dcmpeq>
 800a8a0:	2800      	cmp	r0, #0
 800a8a2:	d104      	bne.n	800a8ae <__cvt+0xba>
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800a8a8:	1a9b      	subs	r3, r3, r2
 800a8aa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a8ac:	6013      	str	r3, [r2, #0]
 800a8ae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a8b0:	9a07      	ldr	r2, [sp, #28]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	18d3      	adds	r3, r2, r3
 800a8b6:	e7ce      	b.n	800a856 <__cvt+0x62>
 800a8b8:	1c59      	adds	r1, r3, #1
 800a8ba:	9109      	str	r1, [sp, #36]	@ 0x24
 800a8bc:	701a      	strb	r2, [r3, #0]
 800a8be:	e7d6      	b.n	800a86e <__cvt+0x7a>

0800a8c0 <__exponent>:
 800a8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8c2:	232b      	movs	r3, #43	@ 0x2b
 800a8c4:	0005      	movs	r5, r0
 800a8c6:	000c      	movs	r4, r1
 800a8c8:	b085      	sub	sp, #20
 800a8ca:	7002      	strb	r2, [r0, #0]
 800a8cc:	2900      	cmp	r1, #0
 800a8ce:	da01      	bge.n	800a8d4 <__exponent+0x14>
 800a8d0:	424c      	negs	r4, r1
 800a8d2:	3302      	adds	r3, #2
 800a8d4:	706b      	strb	r3, [r5, #1]
 800a8d6:	2c09      	cmp	r4, #9
 800a8d8:	dd2c      	ble.n	800a934 <__exponent+0x74>
 800a8da:	ab02      	add	r3, sp, #8
 800a8dc:	1dde      	adds	r6, r3, #7
 800a8de:	0020      	movs	r0, r4
 800a8e0:	210a      	movs	r1, #10
 800a8e2:	f7f5 fd9d 	bl	8000420 <__aeabi_idivmod>
 800a8e6:	0037      	movs	r7, r6
 800a8e8:	3130      	adds	r1, #48	@ 0x30
 800a8ea:	3e01      	subs	r6, #1
 800a8ec:	0020      	movs	r0, r4
 800a8ee:	7031      	strb	r1, [r6, #0]
 800a8f0:	210a      	movs	r1, #10
 800a8f2:	9401      	str	r4, [sp, #4]
 800a8f4:	f7f5 fcae 	bl	8000254 <__divsi3>
 800a8f8:	9b01      	ldr	r3, [sp, #4]
 800a8fa:	0004      	movs	r4, r0
 800a8fc:	2b63      	cmp	r3, #99	@ 0x63
 800a8fe:	dcee      	bgt.n	800a8de <__exponent+0x1e>
 800a900:	1eba      	subs	r2, r7, #2
 800a902:	1ca8      	adds	r0, r5, #2
 800a904:	0001      	movs	r1, r0
 800a906:	0013      	movs	r3, r2
 800a908:	3430      	adds	r4, #48	@ 0x30
 800a90a:	7014      	strb	r4, [r2, #0]
 800a90c:	ac02      	add	r4, sp, #8
 800a90e:	3407      	adds	r4, #7
 800a910:	429c      	cmp	r4, r3
 800a912:	d80a      	bhi.n	800a92a <__exponent+0x6a>
 800a914:	2300      	movs	r3, #0
 800a916:	42a2      	cmp	r2, r4
 800a918:	d803      	bhi.n	800a922 <__exponent+0x62>
 800a91a:	3309      	adds	r3, #9
 800a91c:	aa02      	add	r2, sp, #8
 800a91e:	189b      	adds	r3, r3, r2
 800a920:	1bdb      	subs	r3, r3, r7
 800a922:	18c0      	adds	r0, r0, r3
 800a924:	1b40      	subs	r0, r0, r5
 800a926:	b005      	add	sp, #20
 800a928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a92a:	781c      	ldrb	r4, [r3, #0]
 800a92c:	3301      	adds	r3, #1
 800a92e:	700c      	strb	r4, [r1, #0]
 800a930:	3101      	adds	r1, #1
 800a932:	e7eb      	b.n	800a90c <__exponent+0x4c>
 800a934:	2330      	movs	r3, #48	@ 0x30
 800a936:	18e4      	adds	r4, r4, r3
 800a938:	70ab      	strb	r3, [r5, #2]
 800a93a:	1d28      	adds	r0, r5, #4
 800a93c:	70ec      	strb	r4, [r5, #3]
 800a93e:	e7f1      	b.n	800a924 <__exponent+0x64>

0800a940 <_printf_float>:
 800a940:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a942:	b097      	sub	sp, #92	@ 0x5c
 800a944:	000d      	movs	r5, r1
 800a946:	920a      	str	r2, [sp, #40]	@ 0x28
 800a948:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800a94a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a94c:	9009      	str	r0, [sp, #36]	@ 0x24
 800a94e:	f000 fd8d 	bl	800b46c <_localeconv_r>
 800a952:	6803      	ldr	r3, [r0, #0]
 800a954:	0018      	movs	r0, r3
 800a956:	930d      	str	r3, [sp, #52]	@ 0x34
 800a958:	f7f5 fbd6 	bl	8000108 <strlen>
 800a95c:	2300      	movs	r3, #0
 800a95e:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a960:	9314      	str	r3, [sp, #80]	@ 0x50
 800a962:	7e2b      	ldrb	r3, [r5, #24]
 800a964:	2207      	movs	r2, #7
 800a966:	930c      	str	r3, [sp, #48]	@ 0x30
 800a968:	682b      	ldr	r3, [r5, #0]
 800a96a:	930e      	str	r3, [sp, #56]	@ 0x38
 800a96c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a96e:	6823      	ldr	r3, [r4, #0]
 800a970:	05c9      	lsls	r1, r1, #23
 800a972:	d545      	bpl.n	800aa00 <_printf_float+0xc0>
 800a974:	189b      	adds	r3, r3, r2
 800a976:	4393      	bics	r3, r2
 800a978:	001a      	movs	r2, r3
 800a97a:	3208      	adds	r2, #8
 800a97c:	6022      	str	r2, [r4, #0]
 800a97e:	2201      	movs	r2, #1
 800a980:	681e      	ldr	r6, [r3, #0]
 800a982:	685f      	ldr	r7, [r3, #4]
 800a984:	007b      	lsls	r3, r7, #1
 800a986:	085b      	lsrs	r3, r3, #1
 800a988:	9311      	str	r3, [sp, #68]	@ 0x44
 800a98a:	9610      	str	r6, [sp, #64]	@ 0x40
 800a98c:	64ae      	str	r6, [r5, #72]	@ 0x48
 800a98e:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800a990:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a992:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a994:	4ba7      	ldr	r3, [pc, #668]	@ (800ac34 <_printf_float+0x2f4>)
 800a996:	4252      	negs	r2, r2
 800a998:	f7f8 faa2 	bl	8002ee0 <__aeabi_dcmpun>
 800a99c:	2800      	cmp	r0, #0
 800a99e:	d131      	bne.n	800aa04 <_printf_float+0xc4>
 800a9a0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a9a2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	4ba3      	ldr	r3, [pc, #652]	@ (800ac34 <_printf_float+0x2f4>)
 800a9a8:	4252      	negs	r2, r2
 800a9aa:	f7f5 fd5f 	bl	800046c <__aeabi_dcmple>
 800a9ae:	2800      	cmp	r0, #0
 800a9b0:	d128      	bne.n	800aa04 <_printf_float+0xc4>
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	0030      	movs	r0, r6
 800a9b8:	0039      	movs	r1, r7
 800a9ba:	f7f5 fd4d 	bl	8000458 <__aeabi_dcmplt>
 800a9be:	2800      	cmp	r0, #0
 800a9c0:	d003      	beq.n	800a9ca <_printf_float+0x8a>
 800a9c2:	002b      	movs	r3, r5
 800a9c4:	222d      	movs	r2, #45	@ 0x2d
 800a9c6:	3343      	adds	r3, #67	@ 0x43
 800a9c8:	701a      	strb	r2, [r3, #0]
 800a9ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a9cc:	4f9a      	ldr	r7, [pc, #616]	@ (800ac38 <_printf_float+0x2f8>)
 800a9ce:	2b47      	cmp	r3, #71	@ 0x47
 800a9d0:	d900      	bls.n	800a9d4 <_printf_float+0x94>
 800a9d2:	4f9a      	ldr	r7, [pc, #616]	@ (800ac3c <_printf_float+0x2fc>)
 800a9d4:	2303      	movs	r3, #3
 800a9d6:	2400      	movs	r4, #0
 800a9d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a9da:	612b      	str	r3, [r5, #16]
 800a9dc:	3301      	adds	r3, #1
 800a9de:	439a      	bics	r2, r3
 800a9e0:	602a      	str	r2, [r5, #0]
 800a9e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9e4:	0029      	movs	r1, r5
 800a9e6:	9300      	str	r3, [sp, #0]
 800a9e8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a9ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9ec:	aa15      	add	r2, sp, #84	@ 0x54
 800a9ee:	f000 fa9b 	bl	800af28 <_printf_common>
 800a9f2:	3001      	adds	r0, #1
 800a9f4:	d000      	beq.n	800a9f8 <_printf_float+0xb8>
 800a9f6:	e09f      	b.n	800ab38 <_printf_float+0x1f8>
 800a9f8:	2001      	movs	r0, #1
 800a9fa:	4240      	negs	r0, r0
 800a9fc:	b017      	add	sp, #92	@ 0x5c
 800a9fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa00:	3307      	adds	r3, #7
 800aa02:	e7b8      	b.n	800a976 <_printf_float+0x36>
 800aa04:	0032      	movs	r2, r6
 800aa06:	003b      	movs	r3, r7
 800aa08:	0030      	movs	r0, r6
 800aa0a:	0039      	movs	r1, r7
 800aa0c:	f7f8 fa68 	bl	8002ee0 <__aeabi_dcmpun>
 800aa10:	2800      	cmp	r0, #0
 800aa12:	d00b      	beq.n	800aa2c <_printf_float+0xec>
 800aa14:	2f00      	cmp	r7, #0
 800aa16:	da03      	bge.n	800aa20 <_printf_float+0xe0>
 800aa18:	002b      	movs	r3, r5
 800aa1a:	222d      	movs	r2, #45	@ 0x2d
 800aa1c:	3343      	adds	r3, #67	@ 0x43
 800aa1e:	701a      	strb	r2, [r3, #0]
 800aa20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aa22:	4f87      	ldr	r7, [pc, #540]	@ (800ac40 <_printf_float+0x300>)
 800aa24:	2b47      	cmp	r3, #71	@ 0x47
 800aa26:	d9d5      	bls.n	800a9d4 <_printf_float+0x94>
 800aa28:	4f86      	ldr	r7, [pc, #536]	@ (800ac44 <_printf_float+0x304>)
 800aa2a:	e7d3      	b.n	800a9d4 <_printf_float+0x94>
 800aa2c:	2220      	movs	r2, #32
 800aa2e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800aa30:	686b      	ldr	r3, [r5, #4]
 800aa32:	4394      	bics	r4, r2
 800aa34:	1c5a      	adds	r2, r3, #1
 800aa36:	d146      	bne.n	800aac6 <_printf_float+0x186>
 800aa38:	3307      	adds	r3, #7
 800aa3a:	606b      	str	r3, [r5, #4]
 800aa3c:	2380      	movs	r3, #128	@ 0x80
 800aa3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa40:	00db      	lsls	r3, r3, #3
 800aa42:	4313      	orrs	r3, r2
 800aa44:	2200      	movs	r2, #0
 800aa46:	602b      	str	r3, [r5, #0]
 800aa48:	9206      	str	r2, [sp, #24]
 800aa4a:	aa14      	add	r2, sp, #80	@ 0x50
 800aa4c:	9205      	str	r2, [sp, #20]
 800aa4e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800aa50:	a90a      	add	r1, sp, #40	@ 0x28
 800aa52:	9204      	str	r2, [sp, #16]
 800aa54:	aa13      	add	r2, sp, #76	@ 0x4c
 800aa56:	9203      	str	r2, [sp, #12]
 800aa58:	2223      	movs	r2, #35	@ 0x23
 800aa5a:	1852      	adds	r2, r2, r1
 800aa5c:	9202      	str	r2, [sp, #8]
 800aa5e:	9301      	str	r3, [sp, #4]
 800aa60:	686b      	ldr	r3, [r5, #4]
 800aa62:	0032      	movs	r2, r6
 800aa64:	9300      	str	r3, [sp, #0]
 800aa66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa68:	003b      	movs	r3, r7
 800aa6a:	f7ff fec3 	bl	800a7f4 <__cvt>
 800aa6e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800aa70:	0007      	movs	r7, r0
 800aa72:	2c47      	cmp	r4, #71	@ 0x47
 800aa74:	d12d      	bne.n	800aad2 <_printf_float+0x192>
 800aa76:	1cd3      	adds	r3, r2, #3
 800aa78:	db02      	blt.n	800aa80 <_printf_float+0x140>
 800aa7a:	686b      	ldr	r3, [r5, #4]
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	dd48      	ble.n	800ab12 <_printf_float+0x1d2>
 800aa80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aa82:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800aa84:	3b02      	subs	r3, #2
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	930c      	str	r3, [sp, #48]	@ 0x30
 800aa8a:	0028      	movs	r0, r5
 800aa8c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800aa8e:	3901      	subs	r1, #1
 800aa90:	3050      	adds	r0, #80	@ 0x50
 800aa92:	9113      	str	r1, [sp, #76]	@ 0x4c
 800aa94:	f7ff ff14 	bl	800a8c0 <__exponent>
 800aa98:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800aa9a:	0004      	movs	r4, r0
 800aa9c:	1813      	adds	r3, r2, r0
 800aa9e:	612b      	str	r3, [r5, #16]
 800aaa0:	2a01      	cmp	r2, #1
 800aaa2:	dc02      	bgt.n	800aaaa <_printf_float+0x16a>
 800aaa4:	682a      	ldr	r2, [r5, #0]
 800aaa6:	07d2      	lsls	r2, r2, #31
 800aaa8:	d501      	bpl.n	800aaae <_printf_float+0x16e>
 800aaaa:	3301      	adds	r3, #1
 800aaac:	612b      	str	r3, [r5, #16]
 800aaae:	2323      	movs	r3, #35	@ 0x23
 800aab0:	aa0a      	add	r2, sp, #40	@ 0x28
 800aab2:	189b      	adds	r3, r3, r2
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d100      	bne.n	800aabc <_printf_float+0x17c>
 800aaba:	e792      	b.n	800a9e2 <_printf_float+0xa2>
 800aabc:	002b      	movs	r3, r5
 800aabe:	222d      	movs	r2, #45	@ 0x2d
 800aac0:	3343      	adds	r3, #67	@ 0x43
 800aac2:	701a      	strb	r2, [r3, #0]
 800aac4:	e78d      	b.n	800a9e2 <_printf_float+0xa2>
 800aac6:	2c47      	cmp	r4, #71	@ 0x47
 800aac8:	d1b8      	bne.n	800aa3c <_printf_float+0xfc>
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d1b6      	bne.n	800aa3c <_printf_float+0xfc>
 800aace:	3301      	adds	r3, #1
 800aad0:	e7b3      	b.n	800aa3a <_printf_float+0xfa>
 800aad2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aad4:	0011      	movs	r1, r2
 800aad6:	2b65      	cmp	r3, #101	@ 0x65
 800aad8:	d9d7      	bls.n	800aa8a <_printf_float+0x14a>
 800aada:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aadc:	2b66      	cmp	r3, #102	@ 0x66
 800aade:	d11a      	bne.n	800ab16 <_printf_float+0x1d6>
 800aae0:	686b      	ldr	r3, [r5, #4]
 800aae2:	2a00      	cmp	r2, #0
 800aae4:	dd09      	ble.n	800aafa <_printf_float+0x1ba>
 800aae6:	612a      	str	r2, [r5, #16]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d102      	bne.n	800aaf2 <_printf_float+0x1b2>
 800aaec:	6829      	ldr	r1, [r5, #0]
 800aaee:	07c9      	lsls	r1, r1, #31
 800aaf0:	d50b      	bpl.n	800ab0a <_printf_float+0x1ca>
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	189b      	adds	r3, r3, r2
 800aaf6:	612b      	str	r3, [r5, #16]
 800aaf8:	e007      	b.n	800ab0a <_printf_float+0x1ca>
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d103      	bne.n	800ab06 <_printf_float+0x1c6>
 800aafe:	2201      	movs	r2, #1
 800ab00:	6829      	ldr	r1, [r5, #0]
 800ab02:	4211      	tst	r1, r2
 800ab04:	d000      	beq.n	800ab08 <_printf_float+0x1c8>
 800ab06:	1c9a      	adds	r2, r3, #2
 800ab08:	612a      	str	r2, [r5, #16]
 800ab0a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ab0c:	2400      	movs	r4, #0
 800ab0e:	65ab      	str	r3, [r5, #88]	@ 0x58
 800ab10:	e7cd      	b.n	800aaae <_printf_float+0x16e>
 800ab12:	2367      	movs	r3, #103	@ 0x67
 800ab14:	930c      	str	r3, [sp, #48]	@ 0x30
 800ab16:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ab18:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ab1a:	4299      	cmp	r1, r3
 800ab1c:	db06      	blt.n	800ab2c <_printf_float+0x1ec>
 800ab1e:	682b      	ldr	r3, [r5, #0]
 800ab20:	6129      	str	r1, [r5, #16]
 800ab22:	07db      	lsls	r3, r3, #31
 800ab24:	d5f1      	bpl.n	800ab0a <_printf_float+0x1ca>
 800ab26:	3101      	adds	r1, #1
 800ab28:	6129      	str	r1, [r5, #16]
 800ab2a:	e7ee      	b.n	800ab0a <_printf_float+0x1ca>
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	2900      	cmp	r1, #0
 800ab30:	dce0      	bgt.n	800aaf4 <_printf_float+0x1b4>
 800ab32:	1892      	adds	r2, r2, r2
 800ab34:	1a52      	subs	r2, r2, r1
 800ab36:	e7dd      	b.n	800aaf4 <_printf_float+0x1b4>
 800ab38:	682a      	ldr	r2, [r5, #0]
 800ab3a:	0553      	lsls	r3, r2, #21
 800ab3c:	d408      	bmi.n	800ab50 <_printf_float+0x210>
 800ab3e:	692b      	ldr	r3, [r5, #16]
 800ab40:	003a      	movs	r2, r7
 800ab42:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ab44:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab46:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ab48:	47a0      	blx	r4
 800ab4a:	3001      	adds	r0, #1
 800ab4c:	d129      	bne.n	800aba2 <_printf_float+0x262>
 800ab4e:	e753      	b.n	800a9f8 <_printf_float+0xb8>
 800ab50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab52:	2b65      	cmp	r3, #101	@ 0x65
 800ab54:	d800      	bhi.n	800ab58 <_printf_float+0x218>
 800ab56:	e0da      	b.n	800ad0e <_printf_float+0x3ce>
 800ab58:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800ab5a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	2300      	movs	r3, #0
 800ab60:	f7f5 fc74 	bl	800044c <__aeabi_dcmpeq>
 800ab64:	2800      	cmp	r0, #0
 800ab66:	d033      	beq.n	800abd0 <_printf_float+0x290>
 800ab68:	2301      	movs	r3, #1
 800ab6a:	4a37      	ldr	r2, [pc, #220]	@ (800ac48 <_printf_float+0x308>)
 800ab6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ab6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab70:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ab72:	47a0      	blx	r4
 800ab74:	3001      	adds	r0, #1
 800ab76:	d100      	bne.n	800ab7a <_printf_float+0x23a>
 800ab78:	e73e      	b.n	800a9f8 <_printf_float+0xb8>
 800ab7a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800ab7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ab7e:	42b3      	cmp	r3, r6
 800ab80:	db02      	blt.n	800ab88 <_printf_float+0x248>
 800ab82:	682b      	ldr	r3, [r5, #0]
 800ab84:	07db      	lsls	r3, r3, #31
 800ab86:	d50c      	bpl.n	800aba2 <_printf_float+0x262>
 800ab88:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ab8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab8c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ab8e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ab90:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab92:	47a0      	blx	r4
 800ab94:	2400      	movs	r4, #0
 800ab96:	3001      	adds	r0, #1
 800ab98:	d100      	bne.n	800ab9c <_printf_float+0x25c>
 800ab9a:	e72d      	b.n	800a9f8 <_printf_float+0xb8>
 800ab9c:	1e73      	subs	r3, r6, #1
 800ab9e:	42a3      	cmp	r3, r4
 800aba0:	dc0a      	bgt.n	800abb8 <_printf_float+0x278>
 800aba2:	682b      	ldr	r3, [r5, #0]
 800aba4:	079b      	lsls	r3, r3, #30
 800aba6:	d500      	bpl.n	800abaa <_printf_float+0x26a>
 800aba8:	e105      	b.n	800adb6 <_printf_float+0x476>
 800abaa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800abac:	68e8      	ldr	r0, [r5, #12]
 800abae:	4298      	cmp	r0, r3
 800abb0:	db00      	blt.n	800abb4 <_printf_float+0x274>
 800abb2:	e723      	b.n	800a9fc <_printf_float+0xbc>
 800abb4:	0018      	movs	r0, r3
 800abb6:	e721      	b.n	800a9fc <_printf_float+0xbc>
 800abb8:	002a      	movs	r2, r5
 800abba:	2301      	movs	r3, #1
 800abbc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800abbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800abc0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800abc2:	321a      	adds	r2, #26
 800abc4:	47b8      	blx	r7
 800abc6:	3001      	adds	r0, #1
 800abc8:	d100      	bne.n	800abcc <_printf_float+0x28c>
 800abca:	e715      	b.n	800a9f8 <_printf_float+0xb8>
 800abcc:	3401      	adds	r4, #1
 800abce:	e7e5      	b.n	800ab9c <_printf_float+0x25c>
 800abd0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	dc3a      	bgt.n	800ac4c <_printf_float+0x30c>
 800abd6:	2301      	movs	r3, #1
 800abd8:	4a1b      	ldr	r2, [pc, #108]	@ (800ac48 <_printf_float+0x308>)
 800abda:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800abdc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800abde:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800abe0:	47a0      	blx	r4
 800abe2:	3001      	adds	r0, #1
 800abe4:	d100      	bne.n	800abe8 <_printf_float+0x2a8>
 800abe6:	e707      	b.n	800a9f8 <_printf_float+0xb8>
 800abe8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800abea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800abec:	4333      	orrs	r3, r6
 800abee:	d102      	bne.n	800abf6 <_printf_float+0x2b6>
 800abf0:	682b      	ldr	r3, [r5, #0]
 800abf2:	07db      	lsls	r3, r3, #31
 800abf4:	d5d5      	bpl.n	800aba2 <_printf_float+0x262>
 800abf6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abf8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800abfa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800abfc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800abfe:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ac00:	47a0      	blx	r4
 800ac02:	2300      	movs	r3, #0
 800ac04:	3001      	adds	r0, #1
 800ac06:	d100      	bne.n	800ac0a <_printf_float+0x2ca>
 800ac08:	e6f6      	b.n	800a9f8 <_printf_float+0xb8>
 800ac0a:	930c      	str	r3, [sp, #48]	@ 0x30
 800ac0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ac0e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ac10:	425b      	negs	r3, r3
 800ac12:	4293      	cmp	r3, r2
 800ac14:	dc01      	bgt.n	800ac1a <_printf_float+0x2da>
 800ac16:	0033      	movs	r3, r6
 800ac18:	e792      	b.n	800ab40 <_printf_float+0x200>
 800ac1a:	002a      	movs	r2, r5
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ac20:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac22:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ac24:	321a      	adds	r2, #26
 800ac26:	47a0      	blx	r4
 800ac28:	3001      	adds	r0, #1
 800ac2a:	d100      	bne.n	800ac2e <_printf_float+0x2ee>
 800ac2c:	e6e4      	b.n	800a9f8 <_printf_float+0xb8>
 800ac2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac30:	3301      	adds	r3, #1
 800ac32:	e7ea      	b.n	800ac0a <_printf_float+0x2ca>
 800ac34:	7fefffff 	.word	0x7fefffff
 800ac38:	0800dc1c 	.word	0x0800dc1c
 800ac3c:	0800dc20 	.word	0x0800dc20
 800ac40:	0800dc24 	.word	0x0800dc24
 800ac44:	0800dc28 	.word	0x0800dc28
 800ac48:	0800dc2c 	.word	0x0800dc2c
 800ac4c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ac4e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800ac50:	930c      	str	r3, [sp, #48]	@ 0x30
 800ac52:	429e      	cmp	r6, r3
 800ac54:	dd00      	ble.n	800ac58 <_printf_float+0x318>
 800ac56:	001e      	movs	r6, r3
 800ac58:	2e00      	cmp	r6, #0
 800ac5a:	dc31      	bgt.n	800acc0 <_printf_float+0x380>
 800ac5c:	43f3      	mvns	r3, r6
 800ac5e:	2400      	movs	r4, #0
 800ac60:	17db      	asrs	r3, r3, #31
 800ac62:	4033      	ands	r3, r6
 800ac64:	930e      	str	r3, [sp, #56]	@ 0x38
 800ac66:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800ac68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac6a:	1af3      	subs	r3, r6, r3
 800ac6c:	42a3      	cmp	r3, r4
 800ac6e:	dc30      	bgt.n	800acd2 <_printf_float+0x392>
 800ac70:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ac72:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ac74:	429a      	cmp	r2, r3
 800ac76:	dc38      	bgt.n	800acea <_printf_float+0x3aa>
 800ac78:	682b      	ldr	r3, [r5, #0]
 800ac7a:	07db      	lsls	r3, r3, #31
 800ac7c:	d435      	bmi.n	800acea <_printf_float+0x3aa>
 800ac7e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800ac80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac82:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ac84:	1b9b      	subs	r3, r3, r6
 800ac86:	1b14      	subs	r4, r2, r4
 800ac88:	429c      	cmp	r4, r3
 800ac8a:	dd00      	ble.n	800ac8e <_printf_float+0x34e>
 800ac8c:	001c      	movs	r4, r3
 800ac8e:	2c00      	cmp	r4, #0
 800ac90:	dc34      	bgt.n	800acfc <_printf_float+0x3bc>
 800ac92:	43e3      	mvns	r3, r4
 800ac94:	2600      	movs	r6, #0
 800ac96:	17db      	asrs	r3, r3, #31
 800ac98:	401c      	ands	r4, r3
 800ac9a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ac9c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ac9e:	1ad3      	subs	r3, r2, r3
 800aca0:	1b1b      	subs	r3, r3, r4
 800aca2:	42b3      	cmp	r3, r6
 800aca4:	dc00      	bgt.n	800aca8 <_printf_float+0x368>
 800aca6:	e77c      	b.n	800aba2 <_printf_float+0x262>
 800aca8:	002a      	movs	r2, r5
 800acaa:	2301      	movs	r3, #1
 800acac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800acae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800acb0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800acb2:	321a      	adds	r2, #26
 800acb4:	47b8      	blx	r7
 800acb6:	3001      	adds	r0, #1
 800acb8:	d100      	bne.n	800acbc <_printf_float+0x37c>
 800acba:	e69d      	b.n	800a9f8 <_printf_float+0xb8>
 800acbc:	3601      	adds	r6, #1
 800acbe:	e7ec      	b.n	800ac9a <_printf_float+0x35a>
 800acc0:	0033      	movs	r3, r6
 800acc2:	003a      	movs	r2, r7
 800acc4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800acc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800acc8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800acca:	47a0      	blx	r4
 800accc:	3001      	adds	r0, #1
 800acce:	d1c5      	bne.n	800ac5c <_printf_float+0x31c>
 800acd0:	e692      	b.n	800a9f8 <_printf_float+0xb8>
 800acd2:	002a      	movs	r2, r5
 800acd4:	2301      	movs	r3, #1
 800acd6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800acd8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800acda:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800acdc:	321a      	adds	r2, #26
 800acde:	47b0      	blx	r6
 800ace0:	3001      	adds	r0, #1
 800ace2:	d100      	bne.n	800ace6 <_printf_float+0x3a6>
 800ace4:	e688      	b.n	800a9f8 <_printf_float+0xb8>
 800ace6:	3401      	adds	r4, #1
 800ace8:	e7bd      	b.n	800ac66 <_printf_float+0x326>
 800acea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800acee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800acf0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800acf2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800acf4:	47a0      	blx	r4
 800acf6:	3001      	adds	r0, #1
 800acf8:	d1c1      	bne.n	800ac7e <_printf_float+0x33e>
 800acfa:	e67d      	b.n	800a9f8 <_printf_float+0xb8>
 800acfc:	19ba      	adds	r2, r7, r6
 800acfe:	0023      	movs	r3, r4
 800ad00:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ad02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad04:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ad06:	47b0      	blx	r6
 800ad08:	3001      	adds	r0, #1
 800ad0a:	d1c2      	bne.n	800ac92 <_printf_float+0x352>
 800ad0c:	e674      	b.n	800a9f8 <_printf_float+0xb8>
 800ad0e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ad10:	930c      	str	r3, [sp, #48]	@ 0x30
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	dc02      	bgt.n	800ad1c <_printf_float+0x3dc>
 800ad16:	2301      	movs	r3, #1
 800ad18:	421a      	tst	r2, r3
 800ad1a:	d039      	beq.n	800ad90 <_printf_float+0x450>
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	003a      	movs	r2, r7
 800ad20:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ad22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad24:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ad26:	47b0      	blx	r6
 800ad28:	3001      	adds	r0, #1
 800ad2a:	d100      	bne.n	800ad2e <_printf_float+0x3ee>
 800ad2c:	e664      	b.n	800a9f8 <_printf_float+0xb8>
 800ad2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad30:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ad32:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ad34:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad36:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ad38:	47b0      	blx	r6
 800ad3a:	3001      	adds	r0, #1
 800ad3c:	d100      	bne.n	800ad40 <_printf_float+0x400>
 800ad3e:	e65b      	b.n	800a9f8 <_printf_float+0xb8>
 800ad40:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800ad42:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800ad44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad46:	2200      	movs	r2, #0
 800ad48:	3b01      	subs	r3, #1
 800ad4a:	930c      	str	r3, [sp, #48]	@ 0x30
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	f7f5 fb7d 	bl	800044c <__aeabi_dcmpeq>
 800ad52:	2800      	cmp	r0, #0
 800ad54:	d11a      	bne.n	800ad8c <_printf_float+0x44c>
 800ad56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad58:	1c7a      	adds	r2, r7, #1
 800ad5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ad5c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad5e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ad60:	47b0      	blx	r6
 800ad62:	3001      	adds	r0, #1
 800ad64:	d10e      	bne.n	800ad84 <_printf_float+0x444>
 800ad66:	e647      	b.n	800a9f8 <_printf_float+0xb8>
 800ad68:	002a      	movs	r2, r5
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ad6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad70:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800ad72:	321a      	adds	r2, #26
 800ad74:	47b8      	blx	r7
 800ad76:	3001      	adds	r0, #1
 800ad78:	d100      	bne.n	800ad7c <_printf_float+0x43c>
 800ad7a:	e63d      	b.n	800a9f8 <_printf_float+0xb8>
 800ad7c:	3601      	adds	r6, #1
 800ad7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad80:	429e      	cmp	r6, r3
 800ad82:	dbf1      	blt.n	800ad68 <_printf_float+0x428>
 800ad84:	002a      	movs	r2, r5
 800ad86:	0023      	movs	r3, r4
 800ad88:	3250      	adds	r2, #80	@ 0x50
 800ad8a:	e6da      	b.n	800ab42 <_printf_float+0x202>
 800ad8c:	2600      	movs	r6, #0
 800ad8e:	e7f6      	b.n	800ad7e <_printf_float+0x43e>
 800ad90:	003a      	movs	r2, r7
 800ad92:	e7e2      	b.n	800ad5a <_printf_float+0x41a>
 800ad94:	002a      	movs	r2, r5
 800ad96:	2301      	movs	r3, #1
 800ad98:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ad9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad9c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ad9e:	3219      	adds	r2, #25
 800ada0:	47b0      	blx	r6
 800ada2:	3001      	adds	r0, #1
 800ada4:	d100      	bne.n	800ada8 <_printf_float+0x468>
 800ada6:	e627      	b.n	800a9f8 <_printf_float+0xb8>
 800ada8:	3401      	adds	r4, #1
 800adaa:	68eb      	ldr	r3, [r5, #12]
 800adac:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800adae:	1a9b      	subs	r3, r3, r2
 800adb0:	42a3      	cmp	r3, r4
 800adb2:	dcef      	bgt.n	800ad94 <_printf_float+0x454>
 800adb4:	e6f9      	b.n	800abaa <_printf_float+0x26a>
 800adb6:	2400      	movs	r4, #0
 800adb8:	e7f7      	b.n	800adaa <_printf_float+0x46a>
 800adba:	46c0      	nop			@ (mov r8, r8)

0800adbc <malloc>:
 800adbc:	b510      	push	{r4, lr}
 800adbe:	4b03      	ldr	r3, [pc, #12]	@ (800adcc <malloc+0x10>)
 800adc0:	0001      	movs	r1, r0
 800adc2:	6818      	ldr	r0, [r3, #0]
 800adc4:	f000 f830 	bl	800ae28 <_malloc_r>
 800adc8:	bd10      	pop	{r4, pc}
 800adca:	46c0      	nop			@ (mov r8, r8)
 800adcc:	20000034 	.word	0x20000034

0800add0 <free>:
 800add0:	b510      	push	{r4, lr}
 800add2:	4b03      	ldr	r3, [pc, #12]	@ (800ade0 <free+0x10>)
 800add4:	0001      	movs	r1, r0
 800add6:	6818      	ldr	r0, [r3, #0]
 800add8:	f001 fa22 	bl	800c220 <_free_r>
 800addc:	bd10      	pop	{r4, pc}
 800adde:	46c0      	nop			@ (mov r8, r8)
 800ade0:	20000034 	.word	0x20000034

0800ade4 <sbrk_aligned>:
 800ade4:	b570      	push	{r4, r5, r6, lr}
 800ade6:	4e0f      	ldr	r6, [pc, #60]	@ (800ae24 <sbrk_aligned+0x40>)
 800ade8:	000d      	movs	r5, r1
 800adea:	6831      	ldr	r1, [r6, #0]
 800adec:	0004      	movs	r4, r0
 800adee:	2900      	cmp	r1, #0
 800adf0:	d102      	bne.n	800adf8 <sbrk_aligned+0x14>
 800adf2:	f000 fb3f 	bl	800b474 <_sbrk_r>
 800adf6:	6030      	str	r0, [r6, #0]
 800adf8:	0029      	movs	r1, r5
 800adfa:	0020      	movs	r0, r4
 800adfc:	f000 fb3a 	bl	800b474 <_sbrk_r>
 800ae00:	1c43      	adds	r3, r0, #1
 800ae02:	d103      	bne.n	800ae0c <sbrk_aligned+0x28>
 800ae04:	2501      	movs	r5, #1
 800ae06:	426d      	negs	r5, r5
 800ae08:	0028      	movs	r0, r5
 800ae0a:	bd70      	pop	{r4, r5, r6, pc}
 800ae0c:	2303      	movs	r3, #3
 800ae0e:	1cc5      	adds	r5, r0, #3
 800ae10:	439d      	bics	r5, r3
 800ae12:	42a8      	cmp	r0, r5
 800ae14:	d0f8      	beq.n	800ae08 <sbrk_aligned+0x24>
 800ae16:	1a29      	subs	r1, r5, r0
 800ae18:	0020      	movs	r0, r4
 800ae1a:	f000 fb2b 	bl	800b474 <_sbrk_r>
 800ae1e:	3001      	adds	r0, #1
 800ae20:	d1f2      	bne.n	800ae08 <sbrk_aligned+0x24>
 800ae22:	e7ef      	b.n	800ae04 <sbrk_aligned+0x20>
 800ae24:	20001624 	.word	0x20001624

0800ae28 <_malloc_r>:
 800ae28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae2a:	2203      	movs	r2, #3
 800ae2c:	1ccb      	adds	r3, r1, #3
 800ae2e:	4393      	bics	r3, r2
 800ae30:	3308      	adds	r3, #8
 800ae32:	0005      	movs	r5, r0
 800ae34:	001f      	movs	r7, r3
 800ae36:	2b0c      	cmp	r3, #12
 800ae38:	d234      	bcs.n	800aea4 <_malloc_r+0x7c>
 800ae3a:	270c      	movs	r7, #12
 800ae3c:	42b9      	cmp	r1, r7
 800ae3e:	d833      	bhi.n	800aea8 <_malloc_r+0x80>
 800ae40:	0028      	movs	r0, r5
 800ae42:	f000 f9ef 	bl	800b224 <__malloc_lock>
 800ae46:	4e37      	ldr	r6, [pc, #220]	@ (800af24 <_malloc_r+0xfc>)
 800ae48:	6833      	ldr	r3, [r6, #0]
 800ae4a:	001c      	movs	r4, r3
 800ae4c:	2c00      	cmp	r4, #0
 800ae4e:	d12f      	bne.n	800aeb0 <_malloc_r+0x88>
 800ae50:	0039      	movs	r1, r7
 800ae52:	0028      	movs	r0, r5
 800ae54:	f7ff ffc6 	bl	800ade4 <sbrk_aligned>
 800ae58:	0004      	movs	r4, r0
 800ae5a:	1c43      	adds	r3, r0, #1
 800ae5c:	d15f      	bne.n	800af1e <_malloc_r+0xf6>
 800ae5e:	6834      	ldr	r4, [r6, #0]
 800ae60:	9400      	str	r4, [sp, #0]
 800ae62:	9b00      	ldr	r3, [sp, #0]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d14a      	bne.n	800aefe <_malloc_r+0xd6>
 800ae68:	2c00      	cmp	r4, #0
 800ae6a:	d052      	beq.n	800af12 <_malloc_r+0xea>
 800ae6c:	6823      	ldr	r3, [r4, #0]
 800ae6e:	0028      	movs	r0, r5
 800ae70:	18e3      	adds	r3, r4, r3
 800ae72:	9900      	ldr	r1, [sp, #0]
 800ae74:	9301      	str	r3, [sp, #4]
 800ae76:	f000 fafd 	bl	800b474 <_sbrk_r>
 800ae7a:	9b01      	ldr	r3, [sp, #4]
 800ae7c:	4283      	cmp	r3, r0
 800ae7e:	d148      	bne.n	800af12 <_malloc_r+0xea>
 800ae80:	6823      	ldr	r3, [r4, #0]
 800ae82:	0028      	movs	r0, r5
 800ae84:	1aff      	subs	r7, r7, r3
 800ae86:	0039      	movs	r1, r7
 800ae88:	f7ff ffac 	bl	800ade4 <sbrk_aligned>
 800ae8c:	3001      	adds	r0, #1
 800ae8e:	d040      	beq.n	800af12 <_malloc_r+0xea>
 800ae90:	6823      	ldr	r3, [r4, #0]
 800ae92:	19db      	adds	r3, r3, r7
 800ae94:	6023      	str	r3, [r4, #0]
 800ae96:	6833      	ldr	r3, [r6, #0]
 800ae98:	685a      	ldr	r2, [r3, #4]
 800ae9a:	2a00      	cmp	r2, #0
 800ae9c:	d133      	bne.n	800af06 <_malloc_r+0xde>
 800ae9e:	9b00      	ldr	r3, [sp, #0]
 800aea0:	6033      	str	r3, [r6, #0]
 800aea2:	e019      	b.n	800aed8 <_malloc_r+0xb0>
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	dac9      	bge.n	800ae3c <_malloc_r+0x14>
 800aea8:	230c      	movs	r3, #12
 800aeaa:	602b      	str	r3, [r5, #0]
 800aeac:	2000      	movs	r0, #0
 800aeae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aeb0:	6821      	ldr	r1, [r4, #0]
 800aeb2:	1bc9      	subs	r1, r1, r7
 800aeb4:	d420      	bmi.n	800aef8 <_malloc_r+0xd0>
 800aeb6:	290b      	cmp	r1, #11
 800aeb8:	d90a      	bls.n	800aed0 <_malloc_r+0xa8>
 800aeba:	19e2      	adds	r2, r4, r7
 800aebc:	6027      	str	r7, [r4, #0]
 800aebe:	42a3      	cmp	r3, r4
 800aec0:	d104      	bne.n	800aecc <_malloc_r+0xa4>
 800aec2:	6032      	str	r2, [r6, #0]
 800aec4:	6863      	ldr	r3, [r4, #4]
 800aec6:	6011      	str	r1, [r2, #0]
 800aec8:	6053      	str	r3, [r2, #4]
 800aeca:	e005      	b.n	800aed8 <_malloc_r+0xb0>
 800aecc:	605a      	str	r2, [r3, #4]
 800aece:	e7f9      	b.n	800aec4 <_malloc_r+0x9c>
 800aed0:	6862      	ldr	r2, [r4, #4]
 800aed2:	42a3      	cmp	r3, r4
 800aed4:	d10e      	bne.n	800aef4 <_malloc_r+0xcc>
 800aed6:	6032      	str	r2, [r6, #0]
 800aed8:	0028      	movs	r0, r5
 800aeda:	f000 f9ab 	bl	800b234 <__malloc_unlock>
 800aede:	0020      	movs	r0, r4
 800aee0:	2207      	movs	r2, #7
 800aee2:	300b      	adds	r0, #11
 800aee4:	1d23      	adds	r3, r4, #4
 800aee6:	4390      	bics	r0, r2
 800aee8:	1ac2      	subs	r2, r0, r3
 800aeea:	4298      	cmp	r0, r3
 800aeec:	d0df      	beq.n	800aeae <_malloc_r+0x86>
 800aeee:	1a1b      	subs	r3, r3, r0
 800aef0:	50a3      	str	r3, [r4, r2]
 800aef2:	e7dc      	b.n	800aeae <_malloc_r+0x86>
 800aef4:	605a      	str	r2, [r3, #4]
 800aef6:	e7ef      	b.n	800aed8 <_malloc_r+0xb0>
 800aef8:	0023      	movs	r3, r4
 800aefa:	6864      	ldr	r4, [r4, #4]
 800aefc:	e7a6      	b.n	800ae4c <_malloc_r+0x24>
 800aefe:	9c00      	ldr	r4, [sp, #0]
 800af00:	6863      	ldr	r3, [r4, #4]
 800af02:	9300      	str	r3, [sp, #0]
 800af04:	e7ad      	b.n	800ae62 <_malloc_r+0x3a>
 800af06:	001a      	movs	r2, r3
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	42a3      	cmp	r3, r4
 800af0c:	d1fb      	bne.n	800af06 <_malloc_r+0xde>
 800af0e:	2300      	movs	r3, #0
 800af10:	e7da      	b.n	800aec8 <_malloc_r+0xa0>
 800af12:	230c      	movs	r3, #12
 800af14:	0028      	movs	r0, r5
 800af16:	602b      	str	r3, [r5, #0]
 800af18:	f000 f98c 	bl	800b234 <__malloc_unlock>
 800af1c:	e7c6      	b.n	800aeac <_malloc_r+0x84>
 800af1e:	6007      	str	r7, [r0, #0]
 800af20:	e7da      	b.n	800aed8 <_malloc_r+0xb0>
 800af22:	46c0      	nop			@ (mov r8, r8)
 800af24:	20001628 	.word	0x20001628

0800af28 <_printf_common>:
 800af28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af2a:	0016      	movs	r6, r2
 800af2c:	9301      	str	r3, [sp, #4]
 800af2e:	688a      	ldr	r2, [r1, #8]
 800af30:	690b      	ldr	r3, [r1, #16]
 800af32:	000c      	movs	r4, r1
 800af34:	9000      	str	r0, [sp, #0]
 800af36:	4293      	cmp	r3, r2
 800af38:	da00      	bge.n	800af3c <_printf_common+0x14>
 800af3a:	0013      	movs	r3, r2
 800af3c:	0022      	movs	r2, r4
 800af3e:	6033      	str	r3, [r6, #0]
 800af40:	3243      	adds	r2, #67	@ 0x43
 800af42:	7812      	ldrb	r2, [r2, #0]
 800af44:	2a00      	cmp	r2, #0
 800af46:	d001      	beq.n	800af4c <_printf_common+0x24>
 800af48:	3301      	adds	r3, #1
 800af4a:	6033      	str	r3, [r6, #0]
 800af4c:	6823      	ldr	r3, [r4, #0]
 800af4e:	069b      	lsls	r3, r3, #26
 800af50:	d502      	bpl.n	800af58 <_printf_common+0x30>
 800af52:	6833      	ldr	r3, [r6, #0]
 800af54:	3302      	adds	r3, #2
 800af56:	6033      	str	r3, [r6, #0]
 800af58:	6822      	ldr	r2, [r4, #0]
 800af5a:	2306      	movs	r3, #6
 800af5c:	0015      	movs	r5, r2
 800af5e:	401d      	ands	r5, r3
 800af60:	421a      	tst	r2, r3
 800af62:	d027      	beq.n	800afb4 <_printf_common+0x8c>
 800af64:	0023      	movs	r3, r4
 800af66:	3343      	adds	r3, #67	@ 0x43
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	1e5a      	subs	r2, r3, #1
 800af6c:	4193      	sbcs	r3, r2
 800af6e:	6822      	ldr	r2, [r4, #0]
 800af70:	0692      	lsls	r2, r2, #26
 800af72:	d430      	bmi.n	800afd6 <_printf_common+0xae>
 800af74:	0022      	movs	r2, r4
 800af76:	9901      	ldr	r1, [sp, #4]
 800af78:	9800      	ldr	r0, [sp, #0]
 800af7a:	9d08      	ldr	r5, [sp, #32]
 800af7c:	3243      	adds	r2, #67	@ 0x43
 800af7e:	47a8      	blx	r5
 800af80:	3001      	adds	r0, #1
 800af82:	d025      	beq.n	800afd0 <_printf_common+0xa8>
 800af84:	2206      	movs	r2, #6
 800af86:	6823      	ldr	r3, [r4, #0]
 800af88:	2500      	movs	r5, #0
 800af8a:	4013      	ands	r3, r2
 800af8c:	2b04      	cmp	r3, #4
 800af8e:	d105      	bne.n	800af9c <_printf_common+0x74>
 800af90:	6833      	ldr	r3, [r6, #0]
 800af92:	68e5      	ldr	r5, [r4, #12]
 800af94:	1aed      	subs	r5, r5, r3
 800af96:	43eb      	mvns	r3, r5
 800af98:	17db      	asrs	r3, r3, #31
 800af9a:	401d      	ands	r5, r3
 800af9c:	68a3      	ldr	r3, [r4, #8]
 800af9e:	6922      	ldr	r2, [r4, #16]
 800afa0:	4293      	cmp	r3, r2
 800afa2:	dd01      	ble.n	800afa8 <_printf_common+0x80>
 800afa4:	1a9b      	subs	r3, r3, r2
 800afa6:	18ed      	adds	r5, r5, r3
 800afa8:	2600      	movs	r6, #0
 800afaa:	42b5      	cmp	r5, r6
 800afac:	d120      	bne.n	800aff0 <_printf_common+0xc8>
 800afae:	2000      	movs	r0, #0
 800afb0:	e010      	b.n	800afd4 <_printf_common+0xac>
 800afb2:	3501      	adds	r5, #1
 800afb4:	68e3      	ldr	r3, [r4, #12]
 800afb6:	6832      	ldr	r2, [r6, #0]
 800afb8:	1a9b      	subs	r3, r3, r2
 800afba:	42ab      	cmp	r3, r5
 800afbc:	ddd2      	ble.n	800af64 <_printf_common+0x3c>
 800afbe:	0022      	movs	r2, r4
 800afc0:	2301      	movs	r3, #1
 800afc2:	9901      	ldr	r1, [sp, #4]
 800afc4:	9800      	ldr	r0, [sp, #0]
 800afc6:	9f08      	ldr	r7, [sp, #32]
 800afc8:	3219      	adds	r2, #25
 800afca:	47b8      	blx	r7
 800afcc:	3001      	adds	r0, #1
 800afce:	d1f0      	bne.n	800afb2 <_printf_common+0x8a>
 800afd0:	2001      	movs	r0, #1
 800afd2:	4240      	negs	r0, r0
 800afd4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800afd6:	2030      	movs	r0, #48	@ 0x30
 800afd8:	18e1      	adds	r1, r4, r3
 800afda:	3143      	adds	r1, #67	@ 0x43
 800afdc:	7008      	strb	r0, [r1, #0]
 800afde:	0021      	movs	r1, r4
 800afe0:	1c5a      	adds	r2, r3, #1
 800afe2:	3145      	adds	r1, #69	@ 0x45
 800afe4:	7809      	ldrb	r1, [r1, #0]
 800afe6:	18a2      	adds	r2, r4, r2
 800afe8:	3243      	adds	r2, #67	@ 0x43
 800afea:	3302      	adds	r3, #2
 800afec:	7011      	strb	r1, [r2, #0]
 800afee:	e7c1      	b.n	800af74 <_printf_common+0x4c>
 800aff0:	0022      	movs	r2, r4
 800aff2:	2301      	movs	r3, #1
 800aff4:	9901      	ldr	r1, [sp, #4]
 800aff6:	9800      	ldr	r0, [sp, #0]
 800aff8:	9f08      	ldr	r7, [sp, #32]
 800affa:	321a      	adds	r2, #26
 800affc:	47b8      	blx	r7
 800affe:	3001      	adds	r0, #1
 800b000:	d0e6      	beq.n	800afd0 <_printf_common+0xa8>
 800b002:	3601      	adds	r6, #1
 800b004:	e7d1      	b.n	800afaa <_printf_common+0x82>
	...

0800b008 <_printf_i>:
 800b008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b00a:	b08b      	sub	sp, #44	@ 0x2c
 800b00c:	9206      	str	r2, [sp, #24]
 800b00e:	000a      	movs	r2, r1
 800b010:	3243      	adds	r2, #67	@ 0x43
 800b012:	9307      	str	r3, [sp, #28]
 800b014:	9005      	str	r0, [sp, #20]
 800b016:	9203      	str	r2, [sp, #12]
 800b018:	7e0a      	ldrb	r2, [r1, #24]
 800b01a:	000c      	movs	r4, r1
 800b01c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b01e:	2a78      	cmp	r2, #120	@ 0x78
 800b020:	d809      	bhi.n	800b036 <_printf_i+0x2e>
 800b022:	2a62      	cmp	r2, #98	@ 0x62
 800b024:	d80b      	bhi.n	800b03e <_printf_i+0x36>
 800b026:	2a00      	cmp	r2, #0
 800b028:	d100      	bne.n	800b02c <_printf_i+0x24>
 800b02a:	e0bc      	b.n	800b1a6 <_printf_i+0x19e>
 800b02c:	497b      	ldr	r1, [pc, #492]	@ (800b21c <_printf_i+0x214>)
 800b02e:	9104      	str	r1, [sp, #16]
 800b030:	2a58      	cmp	r2, #88	@ 0x58
 800b032:	d100      	bne.n	800b036 <_printf_i+0x2e>
 800b034:	e090      	b.n	800b158 <_printf_i+0x150>
 800b036:	0025      	movs	r5, r4
 800b038:	3542      	adds	r5, #66	@ 0x42
 800b03a:	702a      	strb	r2, [r5, #0]
 800b03c:	e022      	b.n	800b084 <_printf_i+0x7c>
 800b03e:	0010      	movs	r0, r2
 800b040:	3863      	subs	r0, #99	@ 0x63
 800b042:	2815      	cmp	r0, #21
 800b044:	d8f7      	bhi.n	800b036 <_printf_i+0x2e>
 800b046:	f7f5 f871 	bl	800012c <__gnu_thumb1_case_shi>
 800b04a:	0016      	.short	0x0016
 800b04c:	fff6001f 	.word	0xfff6001f
 800b050:	fff6fff6 	.word	0xfff6fff6
 800b054:	001ffff6 	.word	0x001ffff6
 800b058:	fff6fff6 	.word	0xfff6fff6
 800b05c:	fff6fff6 	.word	0xfff6fff6
 800b060:	003600a1 	.word	0x003600a1
 800b064:	fff60080 	.word	0xfff60080
 800b068:	00b2fff6 	.word	0x00b2fff6
 800b06c:	0036fff6 	.word	0x0036fff6
 800b070:	fff6fff6 	.word	0xfff6fff6
 800b074:	0084      	.short	0x0084
 800b076:	0025      	movs	r5, r4
 800b078:	681a      	ldr	r2, [r3, #0]
 800b07a:	3542      	adds	r5, #66	@ 0x42
 800b07c:	1d11      	adds	r1, r2, #4
 800b07e:	6019      	str	r1, [r3, #0]
 800b080:	6813      	ldr	r3, [r2, #0]
 800b082:	702b      	strb	r3, [r5, #0]
 800b084:	2301      	movs	r3, #1
 800b086:	e0a0      	b.n	800b1ca <_printf_i+0x1c2>
 800b088:	6818      	ldr	r0, [r3, #0]
 800b08a:	6809      	ldr	r1, [r1, #0]
 800b08c:	1d02      	adds	r2, r0, #4
 800b08e:	060d      	lsls	r5, r1, #24
 800b090:	d50b      	bpl.n	800b0aa <_printf_i+0xa2>
 800b092:	6806      	ldr	r6, [r0, #0]
 800b094:	601a      	str	r2, [r3, #0]
 800b096:	2e00      	cmp	r6, #0
 800b098:	da03      	bge.n	800b0a2 <_printf_i+0x9a>
 800b09a:	232d      	movs	r3, #45	@ 0x2d
 800b09c:	9a03      	ldr	r2, [sp, #12]
 800b09e:	4276      	negs	r6, r6
 800b0a0:	7013      	strb	r3, [r2, #0]
 800b0a2:	4b5e      	ldr	r3, [pc, #376]	@ (800b21c <_printf_i+0x214>)
 800b0a4:	270a      	movs	r7, #10
 800b0a6:	9304      	str	r3, [sp, #16]
 800b0a8:	e018      	b.n	800b0dc <_printf_i+0xd4>
 800b0aa:	6806      	ldr	r6, [r0, #0]
 800b0ac:	601a      	str	r2, [r3, #0]
 800b0ae:	0649      	lsls	r1, r1, #25
 800b0b0:	d5f1      	bpl.n	800b096 <_printf_i+0x8e>
 800b0b2:	b236      	sxth	r6, r6
 800b0b4:	e7ef      	b.n	800b096 <_printf_i+0x8e>
 800b0b6:	6808      	ldr	r0, [r1, #0]
 800b0b8:	6819      	ldr	r1, [r3, #0]
 800b0ba:	c940      	ldmia	r1!, {r6}
 800b0bc:	0605      	lsls	r5, r0, #24
 800b0be:	d402      	bmi.n	800b0c6 <_printf_i+0xbe>
 800b0c0:	0640      	lsls	r0, r0, #25
 800b0c2:	d500      	bpl.n	800b0c6 <_printf_i+0xbe>
 800b0c4:	b2b6      	uxth	r6, r6
 800b0c6:	6019      	str	r1, [r3, #0]
 800b0c8:	4b54      	ldr	r3, [pc, #336]	@ (800b21c <_printf_i+0x214>)
 800b0ca:	270a      	movs	r7, #10
 800b0cc:	9304      	str	r3, [sp, #16]
 800b0ce:	2a6f      	cmp	r2, #111	@ 0x6f
 800b0d0:	d100      	bne.n	800b0d4 <_printf_i+0xcc>
 800b0d2:	3f02      	subs	r7, #2
 800b0d4:	0023      	movs	r3, r4
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	3343      	adds	r3, #67	@ 0x43
 800b0da:	701a      	strb	r2, [r3, #0]
 800b0dc:	6863      	ldr	r3, [r4, #4]
 800b0de:	60a3      	str	r3, [r4, #8]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	db03      	blt.n	800b0ec <_printf_i+0xe4>
 800b0e4:	2104      	movs	r1, #4
 800b0e6:	6822      	ldr	r2, [r4, #0]
 800b0e8:	438a      	bics	r2, r1
 800b0ea:	6022      	str	r2, [r4, #0]
 800b0ec:	2e00      	cmp	r6, #0
 800b0ee:	d102      	bne.n	800b0f6 <_printf_i+0xee>
 800b0f0:	9d03      	ldr	r5, [sp, #12]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d00c      	beq.n	800b110 <_printf_i+0x108>
 800b0f6:	9d03      	ldr	r5, [sp, #12]
 800b0f8:	0030      	movs	r0, r6
 800b0fa:	0039      	movs	r1, r7
 800b0fc:	f7f5 f8a6 	bl	800024c <__aeabi_uidivmod>
 800b100:	9b04      	ldr	r3, [sp, #16]
 800b102:	3d01      	subs	r5, #1
 800b104:	5c5b      	ldrb	r3, [r3, r1]
 800b106:	702b      	strb	r3, [r5, #0]
 800b108:	0033      	movs	r3, r6
 800b10a:	0006      	movs	r6, r0
 800b10c:	429f      	cmp	r7, r3
 800b10e:	d9f3      	bls.n	800b0f8 <_printf_i+0xf0>
 800b110:	2f08      	cmp	r7, #8
 800b112:	d109      	bne.n	800b128 <_printf_i+0x120>
 800b114:	6823      	ldr	r3, [r4, #0]
 800b116:	07db      	lsls	r3, r3, #31
 800b118:	d506      	bpl.n	800b128 <_printf_i+0x120>
 800b11a:	6862      	ldr	r2, [r4, #4]
 800b11c:	6923      	ldr	r3, [r4, #16]
 800b11e:	429a      	cmp	r2, r3
 800b120:	dc02      	bgt.n	800b128 <_printf_i+0x120>
 800b122:	2330      	movs	r3, #48	@ 0x30
 800b124:	3d01      	subs	r5, #1
 800b126:	702b      	strb	r3, [r5, #0]
 800b128:	9b03      	ldr	r3, [sp, #12]
 800b12a:	1b5b      	subs	r3, r3, r5
 800b12c:	6123      	str	r3, [r4, #16]
 800b12e:	9b07      	ldr	r3, [sp, #28]
 800b130:	0021      	movs	r1, r4
 800b132:	9300      	str	r3, [sp, #0]
 800b134:	9805      	ldr	r0, [sp, #20]
 800b136:	9b06      	ldr	r3, [sp, #24]
 800b138:	aa09      	add	r2, sp, #36	@ 0x24
 800b13a:	f7ff fef5 	bl	800af28 <_printf_common>
 800b13e:	3001      	adds	r0, #1
 800b140:	d148      	bne.n	800b1d4 <_printf_i+0x1cc>
 800b142:	2001      	movs	r0, #1
 800b144:	4240      	negs	r0, r0
 800b146:	b00b      	add	sp, #44	@ 0x2c
 800b148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b14a:	2220      	movs	r2, #32
 800b14c:	6809      	ldr	r1, [r1, #0]
 800b14e:	430a      	orrs	r2, r1
 800b150:	6022      	str	r2, [r4, #0]
 800b152:	2278      	movs	r2, #120	@ 0x78
 800b154:	4932      	ldr	r1, [pc, #200]	@ (800b220 <_printf_i+0x218>)
 800b156:	9104      	str	r1, [sp, #16]
 800b158:	0021      	movs	r1, r4
 800b15a:	3145      	adds	r1, #69	@ 0x45
 800b15c:	700a      	strb	r2, [r1, #0]
 800b15e:	6819      	ldr	r1, [r3, #0]
 800b160:	6822      	ldr	r2, [r4, #0]
 800b162:	c940      	ldmia	r1!, {r6}
 800b164:	0610      	lsls	r0, r2, #24
 800b166:	d402      	bmi.n	800b16e <_printf_i+0x166>
 800b168:	0650      	lsls	r0, r2, #25
 800b16a:	d500      	bpl.n	800b16e <_printf_i+0x166>
 800b16c:	b2b6      	uxth	r6, r6
 800b16e:	6019      	str	r1, [r3, #0]
 800b170:	07d3      	lsls	r3, r2, #31
 800b172:	d502      	bpl.n	800b17a <_printf_i+0x172>
 800b174:	2320      	movs	r3, #32
 800b176:	4313      	orrs	r3, r2
 800b178:	6023      	str	r3, [r4, #0]
 800b17a:	2e00      	cmp	r6, #0
 800b17c:	d001      	beq.n	800b182 <_printf_i+0x17a>
 800b17e:	2710      	movs	r7, #16
 800b180:	e7a8      	b.n	800b0d4 <_printf_i+0xcc>
 800b182:	2220      	movs	r2, #32
 800b184:	6823      	ldr	r3, [r4, #0]
 800b186:	4393      	bics	r3, r2
 800b188:	6023      	str	r3, [r4, #0]
 800b18a:	e7f8      	b.n	800b17e <_printf_i+0x176>
 800b18c:	681a      	ldr	r2, [r3, #0]
 800b18e:	680d      	ldr	r5, [r1, #0]
 800b190:	1d10      	adds	r0, r2, #4
 800b192:	6949      	ldr	r1, [r1, #20]
 800b194:	6018      	str	r0, [r3, #0]
 800b196:	6813      	ldr	r3, [r2, #0]
 800b198:	062e      	lsls	r6, r5, #24
 800b19a:	d501      	bpl.n	800b1a0 <_printf_i+0x198>
 800b19c:	6019      	str	r1, [r3, #0]
 800b19e:	e002      	b.n	800b1a6 <_printf_i+0x19e>
 800b1a0:	066d      	lsls	r5, r5, #25
 800b1a2:	d5fb      	bpl.n	800b19c <_printf_i+0x194>
 800b1a4:	8019      	strh	r1, [r3, #0]
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	9d03      	ldr	r5, [sp, #12]
 800b1aa:	6123      	str	r3, [r4, #16]
 800b1ac:	e7bf      	b.n	800b12e <_printf_i+0x126>
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	1d11      	adds	r1, r2, #4
 800b1b2:	6019      	str	r1, [r3, #0]
 800b1b4:	6815      	ldr	r5, [r2, #0]
 800b1b6:	2100      	movs	r1, #0
 800b1b8:	0028      	movs	r0, r5
 800b1ba:	6862      	ldr	r2, [r4, #4]
 800b1bc:	f000 f999 	bl	800b4f2 <memchr>
 800b1c0:	2800      	cmp	r0, #0
 800b1c2:	d001      	beq.n	800b1c8 <_printf_i+0x1c0>
 800b1c4:	1b40      	subs	r0, r0, r5
 800b1c6:	6060      	str	r0, [r4, #4]
 800b1c8:	6863      	ldr	r3, [r4, #4]
 800b1ca:	6123      	str	r3, [r4, #16]
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	9a03      	ldr	r2, [sp, #12]
 800b1d0:	7013      	strb	r3, [r2, #0]
 800b1d2:	e7ac      	b.n	800b12e <_printf_i+0x126>
 800b1d4:	002a      	movs	r2, r5
 800b1d6:	6923      	ldr	r3, [r4, #16]
 800b1d8:	9906      	ldr	r1, [sp, #24]
 800b1da:	9805      	ldr	r0, [sp, #20]
 800b1dc:	9d07      	ldr	r5, [sp, #28]
 800b1de:	47a8      	blx	r5
 800b1e0:	3001      	adds	r0, #1
 800b1e2:	d0ae      	beq.n	800b142 <_printf_i+0x13a>
 800b1e4:	6823      	ldr	r3, [r4, #0]
 800b1e6:	079b      	lsls	r3, r3, #30
 800b1e8:	d415      	bmi.n	800b216 <_printf_i+0x20e>
 800b1ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1ec:	68e0      	ldr	r0, [r4, #12]
 800b1ee:	4298      	cmp	r0, r3
 800b1f0:	daa9      	bge.n	800b146 <_printf_i+0x13e>
 800b1f2:	0018      	movs	r0, r3
 800b1f4:	e7a7      	b.n	800b146 <_printf_i+0x13e>
 800b1f6:	0022      	movs	r2, r4
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	9906      	ldr	r1, [sp, #24]
 800b1fc:	9805      	ldr	r0, [sp, #20]
 800b1fe:	9e07      	ldr	r6, [sp, #28]
 800b200:	3219      	adds	r2, #25
 800b202:	47b0      	blx	r6
 800b204:	3001      	adds	r0, #1
 800b206:	d09c      	beq.n	800b142 <_printf_i+0x13a>
 800b208:	3501      	adds	r5, #1
 800b20a:	68e3      	ldr	r3, [r4, #12]
 800b20c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b20e:	1a9b      	subs	r3, r3, r2
 800b210:	42ab      	cmp	r3, r5
 800b212:	dcf0      	bgt.n	800b1f6 <_printf_i+0x1ee>
 800b214:	e7e9      	b.n	800b1ea <_printf_i+0x1e2>
 800b216:	2500      	movs	r5, #0
 800b218:	e7f7      	b.n	800b20a <_printf_i+0x202>
 800b21a:	46c0      	nop			@ (mov r8, r8)
 800b21c:	0800dc2e 	.word	0x0800dc2e
 800b220:	0800dc3f 	.word	0x0800dc3f

0800b224 <__malloc_lock>:
 800b224:	b510      	push	{r4, lr}
 800b226:	4802      	ldr	r0, [pc, #8]	@ (800b230 <__malloc_lock+0xc>)
 800b228:	f000 f961 	bl	800b4ee <__retarget_lock_acquire_recursive>
 800b22c:	bd10      	pop	{r4, pc}
 800b22e:	46c0      	nop			@ (mov r8, r8)
 800b230:	20001768 	.word	0x20001768

0800b234 <__malloc_unlock>:
 800b234:	b510      	push	{r4, lr}
 800b236:	4802      	ldr	r0, [pc, #8]	@ (800b240 <__malloc_unlock+0xc>)
 800b238:	f000 f95a 	bl	800b4f0 <__retarget_lock_release_recursive>
 800b23c:	bd10      	pop	{r4, pc}
 800b23e:	46c0      	nop			@ (mov r8, r8)
 800b240:	20001768 	.word	0x20001768

0800b244 <std>:
 800b244:	2300      	movs	r3, #0
 800b246:	b510      	push	{r4, lr}
 800b248:	0004      	movs	r4, r0
 800b24a:	6003      	str	r3, [r0, #0]
 800b24c:	6043      	str	r3, [r0, #4]
 800b24e:	6083      	str	r3, [r0, #8]
 800b250:	8181      	strh	r1, [r0, #12]
 800b252:	6643      	str	r3, [r0, #100]	@ 0x64
 800b254:	81c2      	strh	r2, [r0, #14]
 800b256:	6103      	str	r3, [r0, #16]
 800b258:	6143      	str	r3, [r0, #20]
 800b25a:	6183      	str	r3, [r0, #24]
 800b25c:	0019      	movs	r1, r3
 800b25e:	2208      	movs	r2, #8
 800b260:	305c      	adds	r0, #92	@ 0x5c
 800b262:	f000 f8fb 	bl	800b45c <memset>
 800b266:	4b0b      	ldr	r3, [pc, #44]	@ (800b294 <std+0x50>)
 800b268:	6224      	str	r4, [r4, #32]
 800b26a:	6263      	str	r3, [r4, #36]	@ 0x24
 800b26c:	4b0a      	ldr	r3, [pc, #40]	@ (800b298 <std+0x54>)
 800b26e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b270:	4b0a      	ldr	r3, [pc, #40]	@ (800b29c <std+0x58>)
 800b272:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b274:	4b0a      	ldr	r3, [pc, #40]	@ (800b2a0 <std+0x5c>)
 800b276:	6323      	str	r3, [r4, #48]	@ 0x30
 800b278:	4b0a      	ldr	r3, [pc, #40]	@ (800b2a4 <std+0x60>)
 800b27a:	429c      	cmp	r4, r3
 800b27c:	d005      	beq.n	800b28a <std+0x46>
 800b27e:	4b0a      	ldr	r3, [pc, #40]	@ (800b2a8 <std+0x64>)
 800b280:	429c      	cmp	r4, r3
 800b282:	d002      	beq.n	800b28a <std+0x46>
 800b284:	4b09      	ldr	r3, [pc, #36]	@ (800b2ac <std+0x68>)
 800b286:	429c      	cmp	r4, r3
 800b288:	d103      	bne.n	800b292 <std+0x4e>
 800b28a:	0020      	movs	r0, r4
 800b28c:	3058      	adds	r0, #88	@ 0x58
 800b28e:	f000 f92d 	bl	800b4ec <__retarget_lock_init_recursive>
 800b292:	bd10      	pop	{r4, pc}
 800b294:	0800d0a5 	.word	0x0800d0a5
 800b298:	0800d0cd 	.word	0x0800d0cd
 800b29c:	0800d105 	.word	0x0800d105
 800b2a0:	0800d131 	.word	0x0800d131
 800b2a4:	2000162c 	.word	0x2000162c
 800b2a8:	20001694 	.word	0x20001694
 800b2ac:	200016fc 	.word	0x200016fc

0800b2b0 <stdio_exit_handler>:
 800b2b0:	b510      	push	{r4, lr}
 800b2b2:	4a03      	ldr	r2, [pc, #12]	@ (800b2c0 <stdio_exit_handler+0x10>)
 800b2b4:	4903      	ldr	r1, [pc, #12]	@ (800b2c4 <stdio_exit_handler+0x14>)
 800b2b6:	4804      	ldr	r0, [pc, #16]	@ (800b2c8 <stdio_exit_handler+0x18>)
 800b2b8:	f000 f86c 	bl	800b394 <_fwalk_sglue>
 800b2bc:	bd10      	pop	{r4, pc}
 800b2be:	46c0      	nop			@ (mov r8, r8)
 800b2c0:	20000028 	.word	0x20000028
 800b2c4:	0800c905 	.word	0x0800c905
 800b2c8:	20000038 	.word	0x20000038

0800b2cc <cleanup_stdio>:
 800b2cc:	6841      	ldr	r1, [r0, #4]
 800b2ce:	4b0b      	ldr	r3, [pc, #44]	@ (800b2fc <cleanup_stdio+0x30>)
 800b2d0:	b510      	push	{r4, lr}
 800b2d2:	0004      	movs	r4, r0
 800b2d4:	4299      	cmp	r1, r3
 800b2d6:	d001      	beq.n	800b2dc <cleanup_stdio+0x10>
 800b2d8:	f001 fb14 	bl	800c904 <_fflush_r>
 800b2dc:	68a1      	ldr	r1, [r4, #8]
 800b2de:	4b08      	ldr	r3, [pc, #32]	@ (800b300 <cleanup_stdio+0x34>)
 800b2e0:	4299      	cmp	r1, r3
 800b2e2:	d002      	beq.n	800b2ea <cleanup_stdio+0x1e>
 800b2e4:	0020      	movs	r0, r4
 800b2e6:	f001 fb0d 	bl	800c904 <_fflush_r>
 800b2ea:	68e1      	ldr	r1, [r4, #12]
 800b2ec:	4b05      	ldr	r3, [pc, #20]	@ (800b304 <cleanup_stdio+0x38>)
 800b2ee:	4299      	cmp	r1, r3
 800b2f0:	d002      	beq.n	800b2f8 <cleanup_stdio+0x2c>
 800b2f2:	0020      	movs	r0, r4
 800b2f4:	f001 fb06 	bl	800c904 <_fflush_r>
 800b2f8:	bd10      	pop	{r4, pc}
 800b2fa:	46c0      	nop			@ (mov r8, r8)
 800b2fc:	2000162c 	.word	0x2000162c
 800b300:	20001694 	.word	0x20001694
 800b304:	200016fc 	.word	0x200016fc

0800b308 <global_stdio_init.part.0>:
 800b308:	b510      	push	{r4, lr}
 800b30a:	4b09      	ldr	r3, [pc, #36]	@ (800b330 <global_stdio_init.part.0+0x28>)
 800b30c:	4a09      	ldr	r2, [pc, #36]	@ (800b334 <global_stdio_init.part.0+0x2c>)
 800b30e:	2104      	movs	r1, #4
 800b310:	601a      	str	r2, [r3, #0]
 800b312:	4809      	ldr	r0, [pc, #36]	@ (800b338 <global_stdio_init.part.0+0x30>)
 800b314:	2200      	movs	r2, #0
 800b316:	f7ff ff95 	bl	800b244 <std>
 800b31a:	2201      	movs	r2, #1
 800b31c:	2109      	movs	r1, #9
 800b31e:	4807      	ldr	r0, [pc, #28]	@ (800b33c <global_stdio_init.part.0+0x34>)
 800b320:	f7ff ff90 	bl	800b244 <std>
 800b324:	2202      	movs	r2, #2
 800b326:	2112      	movs	r1, #18
 800b328:	4805      	ldr	r0, [pc, #20]	@ (800b340 <global_stdio_init.part.0+0x38>)
 800b32a:	f7ff ff8b 	bl	800b244 <std>
 800b32e:	bd10      	pop	{r4, pc}
 800b330:	20001764 	.word	0x20001764
 800b334:	0800b2b1 	.word	0x0800b2b1
 800b338:	2000162c 	.word	0x2000162c
 800b33c:	20001694 	.word	0x20001694
 800b340:	200016fc 	.word	0x200016fc

0800b344 <__sfp_lock_acquire>:
 800b344:	b510      	push	{r4, lr}
 800b346:	4802      	ldr	r0, [pc, #8]	@ (800b350 <__sfp_lock_acquire+0xc>)
 800b348:	f000 f8d1 	bl	800b4ee <__retarget_lock_acquire_recursive>
 800b34c:	bd10      	pop	{r4, pc}
 800b34e:	46c0      	nop			@ (mov r8, r8)
 800b350:	20001769 	.word	0x20001769

0800b354 <__sfp_lock_release>:
 800b354:	b510      	push	{r4, lr}
 800b356:	4802      	ldr	r0, [pc, #8]	@ (800b360 <__sfp_lock_release+0xc>)
 800b358:	f000 f8ca 	bl	800b4f0 <__retarget_lock_release_recursive>
 800b35c:	bd10      	pop	{r4, pc}
 800b35e:	46c0      	nop			@ (mov r8, r8)
 800b360:	20001769 	.word	0x20001769

0800b364 <__sinit>:
 800b364:	b510      	push	{r4, lr}
 800b366:	0004      	movs	r4, r0
 800b368:	f7ff ffec 	bl	800b344 <__sfp_lock_acquire>
 800b36c:	6a23      	ldr	r3, [r4, #32]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d002      	beq.n	800b378 <__sinit+0x14>
 800b372:	f7ff ffef 	bl	800b354 <__sfp_lock_release>
 800b376:	bd10      	pop	{r4, pc}
 800b378:	4b04      	ldr	r3, [pc, #16]	@ (800b38c <__sinit+0x28>)
 800b37a:	6223      	str	r3, [r4, #32]
 800b37c:	4b04      	ldr	r3, [pc, #16]	@ (800b390 <__sinit+0x2c>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d1f6      	bne.n	800b372 <__sinit+0xe>
 800b384:	f7ff ffc0 	bl	800b308 <global_stdio_init.part.0>
 800b388:	e7f3      	b.n	800b372 <__sinit+0xe>
 800b38a:	46c0      	nop			@ (mov r8, r8)
 800b38c:	0800b2cd 	.word	0x0800b2cd
 800b390:	20001764 	.word	0x20001764

0800b394 <_fwalk_sglue>:
 800b394:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b396:	0014      	movs	r4, r2
 800b398:	2600      	movs	r6, #0
 800b39a:	9000      	str	r0, [sp, #0]
 800b39c:	9101      	str	r1, [sp, #4]
 800b39e:	68a5      	ldr	r5, [r4, #8]
 800b3a0:	6867      	ldr	r7, [r4, #4]
 800b3a2:	3f01      	subs	r7, #1
 800b3a4:	d504      	bpl.n	800b3b0 <_fwalk_sglue+0x1c>
 800b3a6:	6824      	ldr	r4, [r4, #0]
 800b3a8:	2c00      	cmp	r4, #0
 800b3aa:	d1f8      	bne.n	800b39e <_fwalk_sglue+0xa>
 800b3ac:	0030      	movs	r0, r6
 800b3ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b3b0:	89ab      	ldrh	r3, [r5, #12]
 800b3b2:	2b01      	cmp	r3, #1
 800b3b4:	d908      	bls.n	800b3c8 <_fwalk_sglue+0x34>
 800b3b6:	220e      	movs	r2, #14
 800b3b8:	5eab      	ldrsh	r3, [r5, r2]
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	d004      	beq.n	800b3c8 <_fwalk_sglue+0x34>
 800b3be:	0029      	movs	r1, r5
 800b3c0:	9800      	ldr	r0, [sp, #0]
 800b3c2:	9b01      	ldr	r3, [sp, #4]
 800b3c4:	4798      	blx	r3
 800b3c6:	4306      	orrs	r6, r0
 800b3c8:	3568      	adds	r5, #104	@ 0x68
 800b3ca:	e7ea      	b.n	800b3a2 <_fwalk_sglue+0xe>

0800b3cc <_vsniprintf_r>:
 800b3cc:	b530      	push	{r4, r5, lr}
 800b3ce:	0014      	movs	r4, r2
 800b3d0:	0005      	movs	r5, r0
 800b3d2:	001a      	movs	r2, r3
 800b3d4:	b09b      	sub	sp, #108	@ 0x6c
 800b3d6:	2c00      	cmp	r4, #0
 800b3d8:	da05      	bge.n	800b3e6 <_vsniprintf_r+0x1a>
 800b3da:	238b      	movs	r3, #139	@ 0x8b
 800b3dc:	6003      	str	r3, [r0, #0]
 800b3de:	2001      	movs	r0, #1
 800b3e0:	4240      	negs	r0, r0
 800b3e2:	b01b      	add	sp, #108	@ 0x6c
 800b3e4:	bd30      	pop	{r4, r5, pc}
 800b3e6:	2382      	movs	r3, #130	@ 0x82
 800b3e8:	4668      	mov	r0, sp
 800b3ea:	009b      	lsls	r3, r3, #2
 800b3ec:	8183      	strh	r3, [r0, #12]
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	9100      	str	r1, [sp, #0]
 800b3f2:	9104      	str	r1, [sp, #16]
 800b3f4:	429c      	cmp	r4, r3
 800b3f6:	d000      	beq.n	800b3fa <_vsniprintf_r+0x2e>
 800b3f8:	1e63      	subs	r3, r4, #1
 800b3fa:	9302      	str	r3, [sp, #8]
 800b3fc:	9305      	str	r3, [sp, #20]
 800b3fe:	2301      	movs	r3, #1
 800b400:	4669      	mov	r1, sp
 800b402:	425b      	negs	r3, r3
 800b404:	81cb      	strh	r3, [r1, #14]
 800b406:	0028      	movs	r0, r5
 800b408:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b40a:	f000 ffb3 	bl	800c374 <_svfiprintf_r>
 800b40e:	1c43      	adds	r3, r0, #1
 800b410:	da01      	bge.n	800b416 <_vsniprintf_r+0x4a>
 800b412:	238b      	movs	r3, #139	@ 0x8b
 800b414:	602b      	str	r3, [r5, #0]
 800b416:	2c00      	cmp	r4, #0
 800b418:	d0e3      	beq.n	800b3e2 <_vsniprintf_r+0x16>
 800b41a:	2200      	movs	r2, #0
 800b41c:	9b00      	ldr	r3, [sp, #0]
 800b41e:	701a      	strb	r2, [r3, #0]
 800b420:	e7df      	b.n	800b3e2 <_vsniprintf_r+0x16>
	...

0800b424 <vsniprintf>:
 800b424:	b513      	push	{r0, r1, r4, lr}
 800b426:	4c04      	ldr	r4, [pc, #16]	@ (800b438 <vsniprintf+0x14>)
 800b428:	9300      	str	r3, [sp, #0]
 800b42a:	0013      	movs	r3, r2
 800b42c:	000a      	movs	r2, r1
 800b42e:	0001      	movs	r1, r0
 800b430:	6820      	ldr	r0, [r4, #0]
 800b432:	f7ff ffcb 	bl	800b3cc <_vsniprintf_r>
 800b436:	bd16      	pop	{r1, r2, r4, pc}
 800b438:	20000034 	.word	0x20000034

0800b43c <iprintf>:
 800b43c:	b40f      	push	{r0, r1, r2, r3}
 800b43e:	b507      	push	{r0, r1, r2, lr}
 800b440:	4905      	ldr	r1, [pc, #20]	@ (800b458 <iprintf+0x1c>)
 800b442:	ab04      	add	r3, sp, #16
 800b444:	6808      	ldr	r0, [r1, #0]
 800b446:	cb04      	ldmia	r3!, {r2}
 800b448:	6881      	ldr	r1, [r0, #8]
 800b44a:	9301      	str	r3, [sp, #4]
 800b44c:	f001 f8b8 	bl	800c5c0 <_vfiprintf_r>
 800b450:	b003      	add	sp, #12
 800b452:	bc08      	pop	{r3}
 800b454:	b004      	add	sp, #16
 800b456:	4718      	bx	r3
 800b458:	20000034 	.word	0x20000034

0800b45c <memset>:
 800b45c:	0003      	movs	r3, r0
 800b45e:	1882      	adds	r2, r0, r2
 800b460:	4293      	cmp	r3, r2
 800b462:	d100      	bne.n	800b466 <memset+0xa>
 800b464:	4770      	bx	lr
 800b466:	7019      	strb	r1, [r3, #0]
 800b468:	3301      	adds	r3, #1
 800b46a:	e7f9      	b.n	800b460 <memset+0x4>

0800b46c <_localeconv_r>:
 800b46c:	4800      	ldr	r0, [pc, #0]	@ (800b470 <_localeconv_r+0x4>)
 800b46e:	4770      	bx	lr
 800b470:	20000174 	.word	0x20000174

0800b474 <_sbrk_r>:
 800b474:	2300      	movs	r3, #0
 800b476:	b570      	push	{r4, r5, r6, lr}
 800b478:	4d06      	ldr	r5, [pc, #24]	@ (800b494 <_sbrk_r+0x20>)
 800b47a:	0004      	movs	r4, r0
 800b47c:	0008      	movs	r0, r1
 800b47e:	602b      	str	r3, [r5, #0]
 800b480:	f7f9 f94c 	bl	800471c <_sbrk>
 800b484:	1c43      	adds	r3, r0, #1
 800b486:	d103      	bne.n	800b490 <_sbrk_r+0x1c>
 800b488:	682b      	ldr	r3, [r5, #0]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d000      	beq.n	800b490 <_sbrk_r+0x1c>
 800b48e:	6023      	str	r3, [r4, #0]
 800b490:	bd70      	pop	{r4, r5, r6, pc}
 800b492:	46c0      	nop			@ (mov r8, r8)
 800b494:	2000176c 	.word	0x2000176c

0800b498 <__errno>:
 800b498:	4b01      	ldr	r3, [pc, #4]	@ (800b4a0 <__errno+0x8>)
 800b49a:	6818      	ldr	r0, [r3, #0]
 800b49c:	4770      	bx	lr
 800b49e:	46c0      	nop			@ (mov r8, r8)
 800b4a0:	20000034 	.word	0x20000034

0800b4a4 <__libc_init_array>:
 800b4a4:	b570      	push	{r4, r5, r6, lr}
 800b4a6:	2600      	movs	r6, #0
 800b4a8:	4c0c      	ldr	r4, [pc, #48]	@ (800b4dc <__libc_init_array+0x38>)
 800b4aa:	4d0d      	ldr	r5, [pc, #52]	@ (800b4e0 <__libc_init_array+0x3c>)
 800b4ac:	1b64      	subs	r4, r4, r5
 800b4ae:	10a4      	asrs	r4, r4, #2
 800b4b0:	42a6      	cmp	r6, r4
 800b4b2:	d109      	bne.n	800b4c8 <__libc_init_array+0x24>
 800b4b4:	2600      	movs	r6, #0
 800b4b6:	f002 faab 	bl	800da10 <_init>
 800b4ba:	4c0a      	ldr	r4, [pc, #40]	@ (800b4e4 <__libc_init_array+0x40>)
 800b4bc:	4d0a      	ldr	r5, [pc, #40]	@ (800b4e8 <__libc_init_array+0x44>)
 800b4be:	1b64      	subs	r4, r4, r5
 800b4c0:	10a4      	asrs	r4, r4, #2
 800b4c2:	42a6      	cmp	r6, r4
 800b4c4:	d105      	bne.n	800b4d2 <__libc_init_array+0x2e>
 800b4c6:	bd70      	pop	{r4, r5, r6, pc}
 800b4c8:	00b3      	lsls	r3, r6, #2
 800b4ca:	58eb      	ldr	r3, [r5, r3]
 800b4cc:	4798      	blx	r3
 800b4ce:	3601      	adds	r6, #1
 800b4d0:	e7ee      	b.n	800b4b0 <__libc_init_array+0xc>
 800b4d2:	00b3      	lsls	r3, r6, #2
 800b4d4:	58eb      	ldr	r3, [r5, r3]
 800b4d6:	4798      	blx	r3
 800b4d8:	3601      	adds	r6, #1
 800b4da:	e7f2      	b.n	800b4c2 <__libc_init_array+0x1e>
 800b4dc:	0800dfc8 	.word	0x0800dfc8
 800b4e0:	0800dfc8 	.word	0x0800dfc8
 800b4e4:	0800dfcc 	.word	0x0800dfcc
 800b4e8:	0800dfc8 	.word	0x0800dfc8

0800b4ec <__retarget_lock_init_recursive>:
 800b4ec:	4770      	bx	lr

0800b4ee <__retarget_lock_acquire_recursive>:
 800b4ee:	4770      	bx	lr

0800b4f0 <__retarget_lock_release_recursive>:
 800b4f0:	4770      	bx	lr

0800b4f2 <memchr>:
 800b4f2:	b2c9      	uxtb	r1, r1
 800b4f4:	1882      	adds	r2, r0, r2
 800b4f6:	4290      	cmp	r0, r2
 800b4f8:	d101      	bne.n	800b4fe <memchr+0xc>
 800b4fa:	2000      	movs	r0, #0
 800b4fc:	4770      	bx	lr
 800b4fe:	7803      	ldrb	r3, [r0, #0]
 800b500:	428b      	cmp	r3, r1
 800b502:	d0fb      	beq.n	800b4fc <memchr+0xa>
 800b504:	3001      	adds	r0, #1
 800b506:	e7f6      	b.n	800b4f6 <memchr+0x4>

0800b508 <memcpy>:
 800b508:	2300      	movs	r3, #0
 800b50a:	b510      	push	{r4, lr}
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d100      	bne.n	800b512 <memcpy+0xa>
 800b510:	bd10      	pop	{r4, pc}
 800b512:	5ccc      	ldrb	r4, [r1, r3]
 800b514:	54c4      	strb	r4, [r0, r3]
 800b516:	3301      	adds	r3, #1
 800b518:	e7f8      	b.n	800b50c <memcpy+0x4>

0800b51a <quorem>:
 800b51a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b51c:	6902      	ldr	r2, [r0, #16]
 800b51e:	690f      	ldr	r7, [r1, #16]
 800b520:	b087      	sub	sp, #28
 800b522:	0006      	movs	r6, r0
 800b524:	000b      	movs	r3, r1
 800b526:	2000      	movs	r0, #0
 800b528:	9102      	str	r1, [sp, #8]
 800b52a:	42ba      	cmp	r2, r7
 800b52c:	db6d      	blt.n	800b60a <quorem+0xf0>
 800b52e:	3f01      	subs	r7, #1
 800b530:	00bc      	lsls	r4, r7, #2
 800b532:	3314      	adds	r3, #20
 800b534:	9305      	str	r3, [sp, #20]
 800b536:	191b      	adds	r3, r3, r4
 800b538:	9303      	str	r3, [sp, #12]
 800b53a:	0033      	movs	r3, r6
 800b53c:	3314      	adds	r3, #20
 800b53e:	191c      	adds	r4, r3, r4
 800b540:	9301      	str	r3, [sp, #4]
 800b542:	6823      	ldr	r3, [r4, #0]
 800b544:	9304      	str	r3, [sp, #16]
 800b546:	9b03      	ldr	r3, [sp, #12]
 800b548:	9804      	ldr	r0, [sp, #16]
 800b54a:	681d      	ldr	r5, [r3, #0]
 800b54c:	3501      	adds	r5, #1
 800b54e:	0029      	movs	r1, r5
 800b550:	f7f4 fdf6 	bl	8000140 <__udivsi3>
 800b554:	9b04      	ldr	r3, [sp, #16]
 800b556:	9000      	str	r0, [sp, #0]
 800b558:	42ab      	cmp	r3, r5
 800b55a:	d32b      	bcc.n	800b5b4 <quorem+0x9a>
 800b55c:	9b05      	ldr	r3, [sp, #20]
 800b55e:	9d01      	ldr	r5, [sp, #4]
 800b560:	469c      	mov	ip, r3
 800b562:	2300      	movs	r3, #0
 800b564:	9305      	str	r3, [sp, #20]
 800b566:	9304      	str	r3, [sp, #16]
 800b568:	4662      	mov	r2, ip
 800b56a:	ca08      	ldmia	r2!, {r3}
 800b56c:	6828      	ldr	r0, [r5, #0]
 800b56e:	4694      	mov	ip, r2
 800b570:	9a00      	ldr	r2, [sp, #0]
 800b572:	b299      	uxth	r1, r3
 800b574:	4351      	muls	r1, r2
 800b576:	9a05      	ldr	r2, [sp, #20]
 800b578:	0c1b      	lsrs	r3, r3, #16
 800b57a:	1889      	adds	r1, r1, r2
 800b57c:	9a00      	ldr	r2, [sp, #0]
 800b57e:	4353      	muls	r3, r2
 800b580:	0c0a      	lsrs	r2, r1, #16
 800b582:	189b      	adds	r3, r3, r2
 800b584:	0c1a      	lsrs	r2, r3, #16
 800b586:	b289      	uxth	r1, r1
 800b588:	9205      	str	r2, [sp, #20]
 800b58a:	b282      	uxth	r2, r0
 800b58c:	1a52      	subs	r2, r2, r1
 800b58e:	9904      	ldr	r1, [sp, #16]
 800b590:	0c00      	lsrs	r0, r0, #16
 800b592:	1852      	adds	r2, r2, r1
 800b594:	b29b      	uxth	r3, r3
 800b596:	1411      	asrs	r1, r2, #16
 800b598:	1ac3      	subs	r3, r0, r3
 800b59a:	185b      	adds	r3, r3, r1
 800b59c:	1419      	asrs	r1, r3, #16
 800b59e:	b292      	uxth	r2, r2
 800b5a0:	041b      	lsls	r3, r3, #16
 800b5a2:	431a      	orrs	r2, r3
 800b5a4:	9b03      	ldr	r3, [sp, #12]
 800b5a6:	9104      	str	r1, [sp, #16]
 800b5a8:	c504      	stmia	r5!, {r2}
 800b5aa:	4563      	cmp	r3, ip
 800b5ac:	d2dc      	bcs.n	800b568 <quorem+0x4e>
 800b5ae:	6823      	ldr	r3, [r4, #0]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d030      	beq.n	800b616 <quorem+0xfc>
 800b5b4:	0030      	movs	r0, r6
 800b5b6:	9902      	ldr	r1, [sp, #8]
 800b5b8:	f001 fc5e 	bl	800ce78 <__mcmp>
 800b5bc:	2800      	cmp	r0, #0
 800b5be:	db23      	blt.n	800b608 <quorem+0xee>
 800b5c0:	0034      	movs	r4, r6
 800b5c2:	2500      	movs	r5, #0
 800b5c4:	9902      	ldr	r1, [sp, #8]
 800b5c6:	3414      	adds	r4, #20
 800b5c8:	3114      	adds	r1, #20
 800b5ca:	6823      	ldr	r3, [r4, #0]
 800b5cc:	c901      	ldmia	r1!, {r0}
 800b5ce:	9302      	str	r3, [sp, #8]
 800b5d0:	466b      	mov	r3, sp
 800b5d2:	891b      	ldrh	r3, [r3, #8]
 800b5d4:	b282      	uxth	r2, r0
 800b5d6:	1a9a      	subs	r2, r3, r2
 800b5d8:	9b02      	ldr	r3, [sp, #8]
 800b5da:	1952      	adds	r2, r2, r5
 800b5dc:	0c00      	lsrs	r0, r0, #16
 800b5de:	0c1b      	lsrs	r3, r3, #16
 800b5e0:	1a1b      	subs	r3, r3, r0
 800b5e2:	1410      	asrs	r0, r2, #16
 800b5e4:	181b      	adds	r3, r3, r0
 800b5e6:	141d      	asrs	r5, r3, #16
 800b5e8:	b292      	uxth	r2, r2
 800b5ea:	041b      	lsls	r3, r3, #16
 800b5ec:	431a      	orrs	r2, r3
 800b5ee:	9b03      	ldr	r3, [sp, #12]
 800b5f0:	c404      	stmia	r4!, {r2}
 800b5f2:	428b      	cmp	r3, r1
 800b5f4:	d2e9      	bcs.n	800b5ca <quorem+0xb0>
 800b5f6:	9a01      	ldr	r2, [sp, #4]
 800b5f8:	00bb      	lsls	r3, r7, #2
 800b5fa:	18d3      	adds	r3, r2, r3
 800b5fc:	681a      	ldr	r2, [r3, #0]
 800b5fe:	2a00      	cmp	r2, #0
 800b600:	d013      	beq.n	800b62a <quorem+0x110>
 800b602:	9b00      	ldr	r3, [sp, #0]
 800b604:	3301      	adds	r3, #1
 800b606:	9300      	str	r3, [sp, #0]
 800b608:	9800      	ldr	r0, [sp, #0]
 800b60a:	b007      	add	sp, #28
 800b60c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b60e:	6823      	ldr	r3, [r4, #0]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d104      	bne.n	800b61e <quorem+0x104>
 800b614:	3f01      	subs	r7, #1
 800b616:	9b01      	ldr	r3, [sp, #4]
 800b618:	3c04      	subs	r4, #4
 800b61a:	42a3      	cmp	r3, r4
 800b61c:	d3f7      	bcc.n	800b60e <quorem+0xf4>
 800b61e:	6137      	str	r7, [r6, #16]
 800b620:	e7c8      	b.n	800b5b4 <quorem+0x9a>
 800b622:	681a      	ldr	r2, [r3, #0]
 800b624:	2a00      	cmp	r2, #0
 800b626:	d104      	bne.n	800b632 <quorem+0x118>
 800b628:	3f01      	subs	r7, #1
 800b62a:	9a01      	ldr	r2, [sp, #4]
 800b62c:	3b04      	subs	r3, #4
 800b62e:	429a      	cmp	r2, r3
 800b630:	d3f7      	bcc.n	800b622 <quorem+0x108>
 800b632:	6137      	str	r7, [r6, #16]
 800b634:	e7e5      	b.n	800b602 <quorem+0xe8>
	...

0800b638 <_dtoa_r>:
 800b638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b63a:	0014      	movs	r4, r2
 800b63c:	001d      	movs	r5, r3
 800b63e:	69c6      	ldr	r6, [r0, #28]
 800b640:	b09d      	sub	sp, #116	@ 0x74
 800b642:	940a      	str	r4, [sp, #40]	@ 0x28
 800b644:	950b      	str	r5, [sp, #44]	@ 0x2c
 800b646:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800b648:	9003      	str	r0, [sp, #12]
 800b64a:	2e00      	cmp	r6, #0
 800b64c:	d10f      	bne.n	800b66e <_dtoa_r+0x36>
 800b64e:	2010      	movs	r0, #16
 800b650:	f7ff fbb4 	bl	800adbc <malloc>
 800b654:	9b03      	ldr	r3, [sp, #12]
 800b656:	1e02      	subs	r2, r0, #0
 800b658:	61d8      	str	r0, [r3, #28]
 800b65a:	d104      	bne.n	800b666 <_dtoa_r+0x2e>
 800b65c:	21ef      	movs	r1, #239	@ 0xef
 800b65e:	4bc7      	ldr	r3, [pc, #796]	@ (800b97c <_dtoa_r+0x344>)
 800b660:	48c7      	ldr	r0, [pc, #796]	@ (800b980 <_dtoa_r+0x348>)
 800b662:	f001 ff2b 	bl	800d4bc <__assert_func>
 800b666:	6046      	str	r6, [r0, #4]
 800b668:	6086      	str	r6, [r0, #8]
 800b66a:	6006      	str	r6, [r0, #0]
 800b66c:	60c6      	str	r6, [r0, #12]
 800b66e:	9b03      	ldr	r3, [sp, #12]
 800b670:	69db      	ldr	r3, [r3, #28]
 800b672:	6819      	ldr	r1, [r3, #0]
 800b674:	2900      	cmp	r1, #0
 800b676:	d00b      	beq.n	800b690 <_dtoa_r+0x58>
 800b678:	685a      	ldr	r2, [r3, #4]
 800b67a:	2301      	movs	r3, #1
 800b67c:	4093      	lsls	r3, r2
 800b67e:	604a      	str	r2, [r1, #4]
 800b680:	608b      	str	r3, [r1, #8]
 800b682:	9803      	ldr	r0, [sp, #12]
 800b684:	f001 f9ae 	bl	800c9e4 <_Bfree>
 800b688:	2200      	movs	r2, #0
 800b68a:	9b03      	ldr	r3, [sp, #12]
 800b68c:	69db      	ldr	r3, [r3, #28]
 800b68e:	601a      	str	r2, [r3, #0]
 800b690:	2d00      	cmp	r5, #0
 800b692:	da1e      	bge.n	800b6d2 <_dtoa_r+0x9a>
 800b694:	2301      	movs	r3, #1
 800b696:	603b      	str	r3, [r7, #0]
 800b698:	006b      	lsls	r3, r5, #1
 800b69a:	085b      	lsrs	r3, r3, #1
 800b69c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b69e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b6a0:	4bb8      	ldr	r3, [pc, #736]	@ (800b984 <_dtoa_r+0x34c>)
 800b6a2:	4ab8      	ldr	r2, [pc, #736]	@ (800b984 <_dtoa_r+0x34c>)
 800b6a4:	403b      	ands	r3, r7
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d116      	bne.n	800b6d8 <_dtoa_r+0xa0>
 800b6aa:	4bb7      	ldr	r3, [pc, #732]	@ (800b988 <_dtoa_r+0x350>)
 800b6ac:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b6ae:	6013      	str	r3, [r2, #0]
 800b6b0:	033b      	lsls	r3, r7, #12
 800b6b2:	0b1b      	lsrs	r3, r3, #12
 800b6b4:	4323      	orrs	r3, r4
 800b6b6:	d101      	bne.n	800b6bc <_dtoa_r+0x84>
 800b6b8:	f000 fd83 	bl	800c1c2 <_dtoa_r+0xb8a>
 800b6bc:	4bb3      	ldr	r3, [pc, #716]	@ (800b98c <_dtoa_r+0x354>)
 800b6be:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b6c0:	9308      	str	r3, [sp, #32]
 800b6c2:	2a00      	cmp	r2, #0
 800b6c4:	d002      	beq.n	800b6cc <_dtoa_r+0x94>
 800b6c6:	4bb2      	ldr	r3, [pc, #712]	@ (800b990 <_dtoa_r+0x358>)
 800b6c8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b6ca:	6013      	str	r3, [r2, #0]
 800b6cc:	9808      	ldr	r0, [sp, #32]
 800b6ce:	b01d      	add	sp, #116	@ 0x74
 800b6d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	603b      	str	r3, [r7, #0]
 800b6d6:	e7e2      	b.n	800b69e <_dtoa_r+0x66>
 800b6d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b6da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b6dc:	9212      	str	r2, [sp, #72]	@ 0x48
 800b6de:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b6e0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b6e2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	f7f4 feb0 	bl	800044c <__aeabi_dcmpeq>
 800b6ec:	1e06      	subs	r6, r0, #0
 800b6ee:	d00b      	beq.n	800b708 <_dtoa_r+0xd0>
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b6f4:	6013      	str	r3, [r2, #0]
 800b6f6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d002      	beq.n	800b702 <_dtoa_r+0xca>
 800b6fc:	4ba5      	ldr	r3, [pc, #660]	@ (800b994 <_dtoa_r+0x35c>)
 800b6fe:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b700:	6013      	str	r3, [r2, #0]
 800b702:	4ba5      	ldr	r3, [pc, #660]	@ (800b998 <_dtoa_r+0x360>)
 800b704:	9308      	str	r3, [sp, #32]
 800b706:	e7e1      	b.n	800b6cc <_dtoa_r+0x94>
 800b708:	ab1a      	add	r3, sp, #104	@ 0x68
 800b70a:	9301      	str	r3, [sp, #4]
 800b70c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b70e:	9300      	str	r3, [sp, #0]
 800b710:	9803      	ldr	r0, [sp, #12]
 800b712:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b714:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b716:	f001 fc65 	bl	800cfe4 <__d2b>
 800b71a:	007a      	lsls	r2, r7, #1
 800b71c:	9005      	str	r0, [sp, #20]
 800b71e:	0d52      	lsrs	r2, r2, #21
 800b720:	d100      	bne.n	800b724 <_dtoa_r+0xec>
 800b722:	e07b      	b.n	800b81c <_dtoa_r+0x1e4>
 800b724:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b726:	9618      	str	r6, [sp, #96]	@ 0x60
 800b728:	0319      	lsls	r1, r3, #12
 800b72a:	4b9c      	ldr	r3, [pc, #624]	@ (800b99c <_dtoa_r+0x364>)
 800b72c:	0b09      	lsrs	r1, r1, #12
 800b72e:	430b      	orrs	r3, r1
 800b730:	499b      	ldr	r1, [pc, #620]	@ (800b9a0 <_dtoa_r+0x368>)
 800b732:	1857      	adds	r7, r2, r1
 800b734:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b736:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b738:	0019      	movs	r1, r3
 800b73a:	2200      	movs	r2, #0
 800b73c:	4b99      	ldr	r3, [pc, #612]	@ (800b9a4 <_dtoa_r+0x36c>)
 800b73e:	f7f7 f833 	bl	80027a8 <__aeabi_dsub>
 800b742:	4a99      	ldr	r2, [pc, #612]	@ (800b9a8 <_dtoa_r+0x370>)
 800b744:	4b99      	ldr	r3, [pc, #612]	@ (800b9ac <_dtoa_r+0x374>)
 800b746:	f7f6 fd67 	bl	8002218 <__aeabi_dmul>
 800b74a:	4a99      	ldr	r2, [pc, #612]	@ (800b9b0 <_dtoa_r+0x378>)
 800b74c:	4b99      	ldr	r3, [pc, #612]	@ (800b9b4 <_dtoa_r+0x37c>)
 800b74e:	f7f5 fdbb 	bl	80012c8 <__aeabi_dadd>
 800b752:	0004      	movs	r4, r0
 800b754:	0038      	movs	r0, r7
 800b756:	000d      	movs	r5, r1
 800b758:	f7f7 fc20 	bl	8002f9c <__aeabi_i2d>
 800b75c:	4a96      	ldr	r2, [pc, #600]	@ (800b9b8 <_dtoa_r+0x380>)
 800b75e:	4b97      	ldr	r3, [pc, #604]	@ (800b9bc <_dtoa_r+0x384>)
 800b760:	f7f6 fd5a 	bl	8002218 <__aeabi_dmul>
 800b764:	0002      	movs	r2, r0
 800b766:	000b      	movs	r3, r1
 800b768:	0020      	movs	r0, r4
 800b76a:	0029      	movs	r1, r5
 800b76c:	f7f5 fdac 	bl	80012c8 <__aeabi_dadd>
 800b770:	0004      	movs	r4, r0
 800b772:	000d      	movs	r5, r1
 800b774:	f7f7 fbd6 	bl	8002f24 <__aeabi_d2iz>
 800b778:	2200      	movs	r2, #0
 800b77a:	9004      	str	r0, [sp, #16]
 800b77c:	2300      	movs	r3, #0
 800b77e:	0020      	movs	r0, r4
 800b780:	0029      	movs	r1, r5
 800b782:	f7f4 fe69 	bl	8000458 <__aeabi_dcmplt>
 800b786:	2800      	cmp	r0, #0
 800b788:	d00b      	beq.n	800b7a2 <_dtoa_r+0x16a>
 800b78a:	9804      	ldr	r0, [sp, #16]
 800b78c:	f7f7 fc06 	bl	8002f9c <__aeabi_i2d>
 800b790:	002b      	movs	r3, r5
 800b792:	0022      	movs	r2, r4
 800b794:	f7f4 fe5a 	bl	800044c <__aeabi_dcmpeq>
 800b798:	4243      	negs	r3, r0
 800b79a:	4158      	adcs	r0, r3
 800b79c:	9b04      	ldr	r3, [sp, #16]
 800b79e:	1a1b      	subs	r3, r3, r0
 800b7a0:	9304      	str	r3, [sp, #16]
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	9315      	str	r3, [sp, #84]	@ 0x54
 800b7a6:	9b04      	ldr	r3, [sp, #16]
 800b7a8:	2b16      	cmp	r3, #22
 800b7aa:	d810      	bhi.n	800b7ce <_dtoa_r+0x196>
 800b7ac:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b7ae:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b7b0:	9a04      	ldr	r2, [sp, #16]
 800b7b2:	4b83      	ldr	r3, [pc, #524]	@ (800b9c0 <_dtoa_r+0x388>)
 800b7b4:	00d2      	lsls	r2, r2, #3
 800b7b6:	189b      	adds	r3, r3, r2
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	685b      	ldr	r3, [r3, #4]
 800b7bc:	f7f4 fe4c 	bl	8000458 <__aeabi_dcmplt>
 800b7c0:	2800      	cmp	r0, #0
 800b7c2:	d047      	beq.n	800b854 <_dtoa_r+0x21c>
 800b7c4:	9b04      	ldr	r3, [sp, #16]
 800b7c6:	3b01      	subs	r3, #1
 800b7c8:	9304      	str	r3, [sp, #16]
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	9315      	str	r3, [sp, #84]	@ 0x54
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800b7d2:	9206      	str	r2, [sp, #24]
 800b7d4:	1bdb      	subs	r3, r3, r7
 800b7d6:	1e5a      	subs	r2, r3, #1
 800b7d8:	d53e      	bpl.n	800b858 <_dtoa_r+0x220>
 800b7da:	2201      	movs	r2, #1
 800b7dc:	1ad3      	subs	r3, r2, r3
 800b7de:	9306      	str	r3, [sp, #24]
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	930d      	str	r3, [sp, #52]	@ 0x34
 800b7e4:	9b04      	ldr	r3, [sp, #16]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	db38      	blt.n	800b85c <_dtoa_r+0x224>
 800b7ea:	9a04      	ldr	r2, [sp, #16]
 800b7ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b7ee:	4694      	mov	ip, r2
 800b7f0:	4463      	add	r3, ip
 800b7f2:	930d      	str	r3, [sp, #52]	@ 0x34
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	9214      	str	r2, [sp, #80]	@ 0x50
 800b7f8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b7fa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b7fc:	2401      	movs	r4, #1
 800b7fe:	2b09      	cmp	r3, #9
 800b800:	d867      	bhi.n	800b8d2 <_dtoa_r+0x29a>
 800b802:	2b05      	cmp	r3, #5
 800b804:	dd02      	ble.n	800b80c <_dtoa_r+0x1d4>
 800b806:	2400      	movs	r4, #0
 800b808:	3b04      	subs	r3, #4
 800b80a:	9322      	str	r3, [sp, #136]	@ 0x88
 800b80c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b80e:	1e98      	subs	r0, r3, #2
 800b810:	2803      	cmp	r0, #3
 800b812:	d867      	bhi.n	800b8e4 <_dtoa_r+0x2ac>
 800b814:	f7f4 fc80 	bl	8000118 <__gnu_thumb1_case_uqi>
 800b818:	5b383a2b 	.word	0x5b383a2b
 800b81c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800b81e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800b820:	18f6      	adds	r6, r6, r3
 800b822:	4b68      	ldr	r3, [pc, #416]	@ (800b9c4 <_dtoa_r+0x38c>)
 800b824:	18f2      	adds	r2, r6, r3
 800b826:	2a20      	cmp	r2, #32
 800b828:	dd0f      	ble.n	800b84a <_dtoa_r+0x212>
 800b82a:	2340      	movs	r3, #64	@ 0x40
 800b82c:	1a9b      	subs	r3, r3, r2
 800b82e:	409f      	lsls	r7, r3
 800b830:	4b65      	ldr	r3, [pc, #404]	@ (800b9c8 <_dtoa_r+0x390>)
 800b832:	0038      	movs	r0, r7
 800b834:	18f3      	adds	r3, r6, r3
 800b836:	40dc      	lsrs	r4, r3
 800b838:	4320      	orrs	r0, r4
 800b83a:	f7f7 fbdd 	bl	8002ff8 <__aeabi_ui2d>
 800b83e:	2201      	movs	r2, #1
 800b840:	4b62      	ldr	r3, [pc, #392]	@ (800b9cc <_dtoa_r+0x394>)
 800b842:	1e77      	subs	r7, r6, #1
 800b844:	18cb      	adds	r3, r1, r3
 800b846:	9218      	str	r2, [sp, #96]	@ 0x60
 800b848:	e776      	b.n	800b738 <_dtoa_r+0x100>
 800b84a:	2320      	movs	r3, #32
 800b84c:	0020      	movs	r0, r4
 800b84e:	1a9b      	subs	r3, r3, r2
 800b850:	4098      	lsls	r0, r3
 800b852:	e7f2      	b.n	800b83a <_dtoa_r+0x202>
 800b854:	9015      	str	r0, [sp, #84]	@ 0x54
 800b856:	e7ba      	b.n	800b7ce <_dtoa_r+0x196>
 800b858:	920d      	str	r2, [sp, #52]	@ 0x34
 800b85a:	e7c3      	b.n	800b7e4 <_dtoa_r+0x1ac>
 800b85c:	9b06      	ldr	r3, [sp, #24]
 800b85e:	9a04      	ldr	r2, [sp, #16]
 800b860:	1a9b      	subs	r3, r3, r2
 800b862:	9306      	str	r3, [sp, #24]
 800b864:	4253      	negs	r3, r2
 800b866:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b868:	2300      	movs	r3, #0
 800b86a:	9314      	str	r3, [sp, #80]	@ 0x50
 800b86c:	e7c5      	b.n	800b7fa <_dtoa_r+0x1c2>
 800b86e:	2300      	movs	r3, #0
 800b870:	9310      	str	r3, [sp, #64]	@ 0x40
 800b872:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b874:	930e      	str	r3, [sp, #56]	@ 0x38
 800b876:	9309      	str	r3, [sp, #36]	@ 0x24
 800b878:	2b00      	cmp	r3, #0
 800b87a:	dc13      	bgt.n	800b8a4 <_dtoa_r+0x26c>
 800b87c:	2301      	movs	r3, #1
 800b87e:	001a      	movs	r2, r3
 800b880:	930e      	str	r3, [sp, #56]	@ 0x38
 800b882:	9309      	str	r3, [sp, #36]	@ 0x24
 800b884:	9223      	str	r2, [sp, #140]	@ 0x8c
 800b886:	e00d      	b.n	800b8a4 <_dtoa_r+0x26c>
 800b888:	2301      	movs	r3, #1
 800b88a:	e7f1      	b.n	800b870 <_dtoa_r+0x238>
 800b88c:	2300      	movs	r3, #0
 800b88e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b890:	9310      	str	r3, [sp, #64]	@ 0x40
 800b892:	4694      	mov	ip, r2
 800b894:	9b04      	ldr	r3, [sp, #16]
 800b896:	4463      	add	r3, ip
 800b898:	930e      	str	r3, [sp, #56]	@ 0x38
 800b89a:	3301      	adds	r3, #1
 800b89c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	dc00      	bgt.n	800b8a4 <_dtoa_r+0x26c>
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	9a03      	ldr	r2, [sp, #12]
 800b8a6:	2100      	movs	r1, #0
 800b8a8:	69d0      	ldr	r0, [r2, #28]
 800b8aa:	2204      	movs	r2, #4
 800b8ac:	0015      	movs	r5, r2
 800b8ae:	3514      	adds	r5, #20
 800b8b0:	429d      	cmp	r5, r3
 800b8b2:	d91b      	bls.n	800b8ec <_dtoa_r+0x2b4>
 800b8b4:	6041      	str	r1, [r0, #4]
 800b8b6:	9803      	ldr	r0, [sp, #12]
 800b8b8:	f001 f850 	bl	800c95c <_Balloc>
 800b8bc:	9008      	str	r0, [sp, #32]
 800b8be:	2800      	cmp	r0, #0
 800b8c0:	d117      	bne.n	800b8f2 <_dtoa_r+0x2ba>
 800b8c2:	21b0      	movs	r1, #176	@ 0xb0
 800b8c4:	4b42      	ldr	r3, [pc, #264]	@ (800b9d0 <_dtoa_r+0x398>)
 800b8c6:	482e      	ldr	r0, [pc, #184]	@ (800b980 <_dtoa_r+0x348>)
 800b8c8:	9a08      	ldr	r2, [sp, #32]
 800b8ca:	31ff      	adds	r1, #255	@ 0xff
 800b8cc:	e6c9      	b.n	800b662 <_dtoa_r+0x2a>
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	e7dd      	b.n	800b88e <_dtoa_r+0x256>
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	9410      	str	r4, [sp, #64]	@ 0x40
 800b8d6:	9322      	str	r3, [sp, #136]	@ 0x88
 800b8d8:	3b01      	subs	r3, #1
 800b8da:	930e      	str	r3, [sp, #56]	@ 0x38
 800b8dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8de:	2200      	movs	r2, #0
 800b8e0:	3313      	adds	r3, #19
 800b8e2:	e7cf      	b.n	800b884 <_dtoa_r+0x24c>
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	9310      	str	r3, [sp, #64]	@ 0x40
 800b8e8:	3b02      	subs	r3, #2
 800b8ea:	e7f6      	b.n	800b8da <_dtoa_r+0x2a2>
 800b8ec:	3101      	adds	r1, #1
 800b8ee:	0052      	lsls	r2, r2, #1
 800b8f0:	e7dc      	b.n	800b8ac <_dtoa_r+0x274>
 800b8f2:	9b03      	ldr	r3, [sp, #12]
 800b8f4:	9a08      	ldr	r2, [sp, #32]
 800b8f6:	69db      	ldr	r3, [r3, #28]
 800b8f8:	601a      	str	r2, [r3, #0]
 800b8fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8fc:	2b0e      	cmp	r3, #14
 800b8fe:	d900      	bls.n	800b902 <_dtoa_r+0x2ca>
 800b900:	e0d9      	b.n	800bab6 <_dtoa_r+0x47e>
 800b902:	2c00      	cmp	r4, #0
 800b904:	d100      	bne.n	800b908 <_dtoa_r+0x2d0>
 800b906:	e0d6      	b.n	800bab6 <_dtoa_r+0x47e>
 800b908:	9b04      	ldr	r3, [sp, #16]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	dd64      	ble.n	800b9d8 <_dtoa_r+0x3a0>
 800b90e:	210f      	movs	r1, #15
 800b910:	9a04      	ldr	r2, [sp, #16]
 800b912:	4b2b      	ldr	r3, [pc, #172]	@ (800b9c0 <_dtoa_r+0x388>)
 800b914:	400a      	ands	r2, r1
 800b916:	00d2      	lsls	r2, r2, #3
 800b918:	189b      	adds	r3, r3, r2
 800b91a:	681e      	ldr	r6, [r3, #0]
 800b91c:	685f      	ldr	r7, [r3, #4]
 800b91e:	9b04      	ldr	r3, [sp, #16]
 800b920:	2402      	movs	r4, #2
 800b922:	111d      	asrs	r5, r3, #4
 800b924:	05db      	lsls	r3, r3, #23
 800b926:	d50a      	bpl.n	800b93e <_dtoa_r+0x306>
 800b928:	4b2a      	ldr	r3, [pc, #168]	@ (800b9d4 <_dtoa_r+0x39c>)
 800b92a:	400d      	ands	r5, r1
 800b92c:	6a1a      	ldr	r2, [r3, #32]
 800b92e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b930:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b932:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b934:	f7f6 f82c 	bl	8001990 <__aeabi_ddiv>
 800b938:	900a      	str	r0, [sp, #40]	@ 0x28
 800b93a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b93c:	3401      	adds	r4, #1
 800b93e:	4b25      	ldr	r3, [pc, #148]	@ (800b9d4 <_dtoa_r+0x39c>)
 800b940:	930c      	str	r3, [sp, #48]	@ 0x30
 800b942:	2d00      	cmp	r5, #0
 800b944:	d108      	bne.n	800b958 <_dtoa_r+0x320>
 800b946:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b948:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b94a:	0032      	movs	r2, r6
 800b94c:	003b      	movs	r3, r7
 800b94e:	f7f6 f81f 	bl	8001990 <__aeabi_ddiv>
 800b952:	900a      	str	r0, [sp, #40]	@ 0x28
 800b954:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b956:	e05a      	b.n	800ba0e <_dtoa_r+0x3d6>
 800b958:	2301      	movs	r3, #1
 800b95a:	421d      	tst	r5, r3
 800b95c:	d009      	beq.n	800b972 <_dtoa_r+0x33a>
 800b95e:	18e4      	adds	r4, r4, r3
 800b960:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b962:	0030      	movs	r0, r6
 800b964:	681a      	ldr	r2, [r3, #0]
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	0039      	movs	r1, r7
 800b96a:	f7f6 fc55 	bl	8002218 <__aeabi_dmul>
 800b96e:	0006      	movs	r6, r0
 800b970:	000f      	movs	r7, r1
 800b972:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b974:	106d      	asrs	r5, r5, #1
 800b976:	3308      	adds	r3, #8
 800b978:	e7e2      	b.n	800b940 <_dtoa_r+0x308>
 800b97a:	46c0      	nop			@ (mov r8, r8)
 800b97c:	0800dc5d 	.word	0x0800dc5d
 800b980:	0800dc74 	.word	0x0800dc74
 800b984:	7ff00000 	.word	0x7ff00000
 800b988:	0000270f 	.word	0x0000270f
 800b98c:	0800dc59 	.word	0x0800dc59
 800b990:	0800dc5c 	.word	0x0800dc5c
 800b994:	0800dc2d 	.word	0x0800dc2d
 800b998:	0800dc2c 	.word	0x0800dc2c
 800b99c:	3ff00000 	.word	0x3ff00000
 800b9a0:	fffffc01 	.word	0xfffffc01
 800b9a4:	3ff80000 	.word	0x3ff80000
 800b9a8:	636f4361 	.word	0x636f4361
 800b9ac:	3fd287a7 	.word	0x3fd287a7
 800b9b0:	8b60c8b3 	.word	0x8b60c8b3
 800b9b4:	3fc68a28 	.word	0x3fc68a28
 800b9b8:	509f79fb 	.word	0x509f79fb
 800b9bc:	3fd34413 	.word	0x3fd34413
 800b9c0:	0800dd80 	.word	0x0800dd80
 800b9c4:	00000432 	.word	0x00000432
 800b9c8:	00000412 	.word	0x00000412
 800b9cc:	fe100000 	.word	0xfe100000
 800b9d0:	0800dccc 	.word	0x0800dccc
 800b9d4:	0800dd58 	.word	0x0800dd58
 800b9d8:	9b04      	ldr	r3, [sp, #16]
 800b9da:	2402      	movs	r4, #2
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d016      	beq.n	800ba0e <_dtoa_r+0x3d6>
 800b9e0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b9e2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b9e4:	220f      	movs	r2, #15
 800b9e6:	425d      	negs	r5, r3
 800b9e8:	402a      	ands	r2, r5
 800b9ea:	4bd7      	ldr	r3, [pc, #860]	@ (800bd48 <_dtoa_r+0x710>)
 800b9ec:	00d2      	lsls	r2, r2, #3
 800b9ee:	189b      	adds	r3, r3, r2
 800b9f0:	681a      	ldr	r2, [r3, #0]
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	f7f6 fc10 	bl	8002218 <__aeabi_dmul>
 800b9f8:	2701      	movs	r7, #1
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	900a      	str	r0, [sp, #40]	@ 0x28
 800b9fe:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ba00:	4ed2      	ldr	r6, [pc, #840]	@ (800bd4c <_dtoa_r+0x714>)
 800ba02:	112d      	asrs	r5, r5, #4
 800ba04:	2d00      	cmp	r5, #0
 800ba06:	d000      	beq.n	800ba0a <_dtoa_r+0x3d2>
 800ba08:	e0ba      	b.n	800bb80 <_dtoa_r+0x548>
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d1a1      	bne.n	800b952 <_dtoa_r+0x31a>
 800ba0e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ba10:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800ba12:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d100      	bne.n	800ba1a <_dtoa_r+0x3e2>
 800ba18:	e0bd      	b.n	800bb96 <_dtoa_r+0x55e>
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	0030      	movs	r0, r6
 800ba1e:	0039      	movs	r1, r7
 800ba20:	4bcb      	ldr	r3, [pc, #812]	@ (800bd50 <_dtoa_r+0x718>)
 800ba22:	f7f4 fd19 	bl	8000458 <__aeabi_dcmplt>
 800ba26:	2800      	cmp	r0, #0
 800ba28:	d100      	bne.n	800ba2c <_dtoa_r+0x3f4>
 800ba2a:	e0b4      	b.n	800bb96 <_dtoa_r+0x55e>
 800ba2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d100      	bne.n	800ba34 <_dtoa_r+0x3fc>
 800ba32:	e0b0      	b.n	800bb96 <_dtoa_r+0x55e>
 800ba34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	dd39      	ble.n	800baae <_dtoa_r+0x476>
 800ba3a:	9b04      	ldr	r3, [sp, #16]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	3b01      	subs	r3, #1
 800ba40:	930c      	str	r3, [sp, #48]	@ 0x30
 800ba42:	0030      	movs	r0, r6
 800ba44:	4bc3      	ldr	r3, [pc, #780]	@ (800bd54 <_dtoa_r+0x71c>)
 800ba46:	0039      	movs	r1, r7
 800ba48:	f7f6 fbe6 	bl	8002218 <__aeabi_dmul>
 800ba4c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ba4e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ba50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba52:	3401      	adds	r4, #1
 800ba54:	0020      	movs	r0, r4
 800ba56:	9311      	str	r3, [sp, #68]	@ 0x44
 800ba58:	f7f7 faa0 	bl	8002f9c <__aeabi_i2d>
 800ba5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ba5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba60:	f7f6 fbda 	bl	8002218 <__aeabi_dmul>
 800ba64:	4bbc      	ldr	r3, [pc, #752]	@ (800bd58 <_dtoa_r+0x720>)
 800ba66:	2200      	movs	r2, #0
 800ba68:	f7f5 fc2e 	bl	80012c8 <__aeabi_dadd>
 800ba6c:	4bbb      	ldr	r3, [pc, #748]	@ (800bd5c <_dtoa_r+0x724>)
 800ba6e:	0006      	movs	r6, r0
 800ba70:	18cf      	adds	r7, r1, r3
 800ba72:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d000      	beq.n	800ba7a <_dtoa_r+0x442>
 800ba78:	e091      	b.n	800bb9e <_dtoa_r+0x566>
 800ba7a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ba7c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ba7e:	2200      	movs	r2, #0
 800ba80:	4bb7      	ldr	r3, [pc, #732]	@ (800bd60 <_dtoa_r+0x728>)
 800ba82:	f7f6 fe91 	bl	80027a8 <__aeabi_dsub>
 800ba86:	0032      	movs	r2, r6
 800ba88:	003b      	movs	r3, r7
 800ba8a:	0004      	movs	r4, r0
 800ba8c:	000d      	movs	r5, r1
 800ba8e:	f7f4 fcf7 	bl	8000480 <__aeabi_dcmpgt>
 800ba92:	2800      	cmp	r0, #0
 800ba94:	d000      	beq.n	800ba98 <_dtoa_r+0x460>
 800ba96:	e29d      	b.n	800bfd4 <_dtoa_r+0x99c>
 800ba98:	2180      	movs	r1, #128	@ 0x80
 800ba9a:	0609      	lsls	r1, r1, #24
 800ba9c:	187b      	adds	r3, r7, r1
 800ba9e:	0032      	movs	r2, r6
 800baa0:	0020      	movs	r0, r4
 800baa2:	0029      	movs	r1, r5
 800baa4:	f7f4 fcd8 	bl	8000458 <__aeabi_dcmplt>
 800baa8:	2800      	cmp	r0, #0
 800baaa:	d000      	beq.n	800baae <_dtoa_r+0x476>
 800baac:	e130      	b.n	800bd10 <_dtoa_r+0x6d8>
 800baae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bab0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800bab2:	930a      	str	r3, [sp, #40]	@ 0x28
 800bab4:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bab6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800bab8:	2b00      	cmp	r3, #0
 800baba:	da00      	bge.n	800babe <_dtoa_r+0x486>
 800babc:	e177      	b.n	800bdae <_dtoa_r+0x776>
 800babe:	9a04      	ldr	r2, [sp, #16]
 800bac0:	2a0e      	cmp	r2, #14
 800bac2:	dd00      	ble.n	800bac6 <_dtoa_r+0x48e>
 800bac4:	e173      	b.n	800bdae <_dtoa_r+0x776>
 800bac6:	4ba0      	ldr	r3, [pc, #640]	@ (800bd48 <_dtoa_r+0x710>)
 800bac8:	00d2      	lsls	r2, r2, #3
 800baca:	189b      	adds	r3, r3, r2
 800bacc:	685c      	ldr	r4, [r3, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	9306      	str	r3, [sp, #24]
 800bad2:	9407      	str	r4, [sp, #28]
 800bad4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	da03      	bge.n	800bae2 <_dtoa_r+0x4aa>
 800bada:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800badc:	2b00      	cmp	r3, #0
 800bade:	dc00      	bgt.n	800bae2 <_dtoa_r+0x4aa>
 800bae0:	e106      	b.n	800bcf0 <_dtoa_r+0x6b8>
 800bae2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800bae4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800bae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bae8:	9d08      	ldr	r5, [sp, #32]
 800baea:	3b01      	subs	r3, #1
 800baec:	195b      	adds	r3, r3, r5
 800baee:	930a      	str	r3, [sp, #40]	@ 0x28
 800baf0:	9a06      	ldr	r2, [sp, #24]
 800baf2:	9b07      	ldr	r3, [sp, #28]
 800baf4:	0030      	movs	r0, r6
 800baf6:	0039      	movs	r1, r7
 800baf8:	f7f5 ff4a 	bl	8001990 <__aeabi_ddiv>
 800bafc:	f7f7 fa12 	bl	8002f24 <__aeabi_d2iz>
 800bb00:	9009      	str	r0, [sp, #36]	@ 0x24
 800bb02:	f7f7 fa4b 	bl	8002f9c <__aeabi_i2d>
 800bb06:	9a06      	ldr	r2, [sp, #24]
 800bb08:	9b07      	ldr	r3, [sp, #28]
 800bb0a:	f7f6 fb85 	bl	8002218 <__aeabi_dmul>
 800bb0e:	0002      	movs	r2, r0
 800bb10:	000b      	movs	r3, r1
 800bb12:	0030      	movs	r0, r6
 800bb14:	0039      	movs	r1, r7
 800bb16:	f7f6 fe47 	bl	80027a8 <__aeabi_dsub>
 800bb1a:	002b      	movs	r3, r5
 800bb1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb1e:	3501      	adds	r5, #1
 800bb20:	3230      	adds	r2, #48	@ 0x30
 800bb22:	701a      	strb	r2, [r3, #0]
 800bb24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb26:	002c      	movs	r4, r5
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d000      	beq.n	800bb2e <_dtoa_r+0x4f6>
 800bb2c:	e131      	b.n	800bd92 <_dtoa_r+0x75a>
 800bb2e:	0002      	movs	r2, r0
 800bb30:	000b      	movs	r3, r1
 800bb32:	f7f5 fbc9 	bl	80012c8 <__aeabi_dadd>
 800bb36:	9a06      	ldr	r2, [sp, #24]
 800bb38:	9b07      	ldr	r3, [sp, #28]
 800bb3a:	0006      	movs	r6, r0
 800bb3c:	000f      	movs	r7, r1
 800bb3e:	f7f4 fc9f 	bl	8000480 <__aeabi_dcmpgt>
 800bb42:	2800      	cmp	r0, #0
 800bb44:	d000      	beq.n	800bb48 <_dtoa_r+0x510>
 800bb46:	e10f      	b.n	800bd68 <_dtoa_r+0x730>
 800bb48:	9a06      	ldr	r2, [sp, #24]
 800bb4a:	9b07      	ldr	r3, [sp, #28]
 800bb4c:	0030      	movs	r0, r6
 800bb4e:	0039      	movs	r1, r7
 800bb50:	f7f4 fc7c 	bl	800044c <__aeabi_dcmpeq>
 800bb54:	2800      	cmp	r0, #0
 800bb56:	d003      	beq.n	800bb60 <_dtoa_r+0x528>
 800bb58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb5a:	07dd      	lsls	r5, r3, #31
 800bb5c:	d500      	bpl.n	800bb60 <_dtoa_r+0x528>
 800bb5e:	e103      	b.n	800bd68 <_dtoa_r+0x730>
 800bb60:	9905      	ldr	r1, [sp, #20]
 800bb62:	9803      	ldr	r0, [sp, #12]
 800bb64:	f000 ff3e 	bl	800c9e4 <_Bfree>
 800bb68:	2300      	movs	r3, #0
 800bb6a:	7023      	strb	r3, [r4, #0]
 800bb6c:	9b04      	ldr	r3, [sp, #16]
 800bb6e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800bb70:	3301      	adds	r3, #1
 800bb72:	6013      	str	r3, [r2, #0]
 800bb74:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d100      	bne.n	800bb7c <_dtoa_r+0x544>
 800bb7a:	e5a7      	b.n	800b6cc <_dtoa_r+0x94>
 800bb7c:	601c      	str	r4, [r3, #0]
 800bb7e:	e5a5      	b.n	800b6cc <_dtoa_r+0x94>
 800bb80:	423d      	tst	r5, r7
 800bb82:	d005      	beq.n	800bb90 <_dtoa_r+0x558>
 800bb84:	6832      	ldr	r2, [r6, #0]
 800bb86:	6873      	ldr	r3, [r6, #4]
 800bb88:	f7f6 fb46 	bl	8002218 <__aeabi_dmul>
 800bb8c:	003b      	movs	r3, r7
 800bb8e:	3401      	adds	r4, #1
 800bb90:	106d      	asrs	r5, r5, #1
 800bb92:	3608      	adds	r6, #8
 800bb94:	e736      	b.n	800ba04 <_dtoa_r+0x3cc>
 800bb96:	9b04      	ldr	r3, [sp, #16]
 800bb98:	930c      	str	r3, [sp, #48]	@ 0x30
 800bb9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb9c:	e75a      	b.n	800ba54 <_dtoa_r+0x41c>
 800bb9e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bba0:	4b69      	ldr	r3, [pc, #420]	@ (800bd48 <_dtoa_r+0x710>)
 800bba2:	3a01      	subs	r2, #1
 800bba4:	00d2      	lsls	r2, r2, #3
 800bba6:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800bba8:	189b      	adds	r3, r3, r2
 800bbaa:	681a      	ldr	r2, [r3, #0]
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	2900      	cmp	r1, #0
 800bbb0:	d04c      	beq.n	800bc4c <_dtoa_r+0x614>
 800bbb2:	2000      	movs	r0, #0
 800bbb4:	496b      	ldr	r1, [pc, #428]	@ (800bd64 <_dtoa_r+0x72c>)
 800bbb6:	f7f5 feeb 	bl	8001990 <__aeabi_ddiv>
 800bbba:	0032      	movs	r2, r6
 800bbbc:	003b      	movs	r3, r7
 800bbbe:	f7f6 fdf3 	bl	80027a8 <__aeabi_dsub>
 800bbc2:	9a08      	ldr	r2, [sp, #32]
 800bbc4:	0006      	movs	r6, r0
 800bbc6:	4694      	mov	ip, r2
 800bbc8:	000f      	movs	r7, r1
 800bbca:	9b08      	ldr	r3, [sp, #32]
 800bbcc:	9316      	str	r3, [sp, #88]	@ 0x58
 800bbce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bbd0:	4463      	add	r3, ip
 800bbd2:	9311      	str	r3, [sp, #68]	@ 0x44
 800bbd4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bbd6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bbd8:	f7f7 f9a4 	bl	8002f24 <__aeabi_d2iz>
 800bbdc:	0005      	movs	r5, r0
 800bbde:	f7f7 f9dd 	bl	8002f9c <__aeabi_i2d>
 800bbe2:	0002      	movs	r2, r0
 800bbe4:	000b      	movs	r3, r1
 800bbe6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bbe8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bbea:	f7f6 fddd 	bl	80027a8 <__aeabi_dsub>
 800bbee:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bbf0:	3530      	adds	r5, #48	@ 0x30
 800bbf2:	1c5c      	adds	r4, r3, #1
 800bbf4:	701d      	strb	r5, [r3, #0]
 800bbf6:	0032      	movs	r2, r6
 800bbf8:	003b      	movs	r3, r7
 800bbfa:	900a      	str	r0, [sp, #40]	@ 0x28
 800bbfc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bbfe:	f7f4 fc2b 	bl	8000458 <__aeabi_dcmplt>
 800bc02:	2800      	cmp	r0, #0
 800bc04:	d16a      	bne.n	800bcdc <_dtoa_r+0x6a4>
 800bc06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bc08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc0a:	2000      	movs	r0, #0
 800bc0c:	4950      	ldr	r1, [pc, #320]	@ (800bd50 <_dtoa_r+0x718>)
 800bc0e:	f7f6 fdcb 	bl	80027a8 <__aeabi_dsub>
 800bc12:	0032      	movs	r2, r6
 800bc14:	003b      	movs	r3, r7
 800bc16:	f7f4 fc1f 	bl	8000458 <__aeabi_dcmplt>
 800bc1a:	2800      	cmp	r0, #0
 800bc1c:	d000      	beq.n	800bc20 <_dtoa_r+0x5e8>
 800bc1e:	e0a5      	b.n	800bd6c <_dtoa_r+0x734>
 800bc20:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bc22:	42a3      	cmp	r3, r4
 800bc24:	d100      	bne.n	800bc28 <_dtoa_r+0x5f0>
 800bc26:	e742      	b.n	800baae <_dtoa_r+0x476>
 800bc28:	2200      	movs	r2, #0
 800bc2a:	0030      	movs	r0, r6
 800bc2c:	0039      	movs	r1, r7
 800bc2e:	4b49      	ldr	r3, [pc, #292]	@ (800bd54 <_dtoa_r+0x71c>)
 800bc30:	f7f6 faf2 	bl	8002218 <__aeabi_dmul>
 800bc34:	2200      	movs	r2, #0
 800bc36:	0006      	movs	r6, r0
 800bc38:	000f      	movs	r7, r1
 800bc3a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bc3c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bc3e:	4b45      	ldr	r3, [pc, #276]	@ (800bd54 <_dtoa_r+0x71c>)
 800bc40:	f7f6 faea 	bl	8002218 <__aeabi_dmul>
 800bc44:	9416      	str	r4, [sp, #88]	@ 0x58
 800bc46:	900a      	str	r0, [sp, #40]	@ 0x28
 800bc48:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bc4a:	e7c3      	b.n	800bbd4 <_dtoa_r+0x59c>
 800bc4c:	0030      	movs	r0, r6
 800bc4e:	0039      	movs	r1, r7
 800bc50:	f7f6 fae2 	bl	8002218 <__aeabi_dmul>
 800bc54:	9d08      	ldr	r5, [sp, #32]
 800bc56:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bc58:	002b      	movs	r3, r5
 800bc5a:	4694      	mov	ip, r2
 800bc5c:	9016      	str	r0, [sp, #88]	@ 0x58
 800bc5e:	9117      	str	r1, [sp, #92]	@ 0x5c
 800bc60:	4463      	add	r3, ip
 800bc62:	9319      	str	r3, [sp, #100]	@ 0x64
 800bc64:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bc66:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bc68:	f7f7 f95c 	bl	8002f24 <__aeabi_d2iz>
 800bc6c:	0004      	movs	r4, r0
 800bc6e:	f7f7 f995 	bl	8002f9c <__aeabi_i2d>
 800bc72:	000b      	movs	r3, r1
 800bc74:	0002      	movs	r2, r0
 800bc76:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bc78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bc7a:	f7f6 fd95 	bl	80027a8 <__aeabi_dsub>
 800bc7e:	3430      	adds	r4, #48	@ 0x30
 800bc80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bc82:	702c      	strb	r4, [r5, #0]
 800bc84:	3501      	adds	r5, #1
 800bc86:	0006      	movs	r6, r0
 800bc88:	000f      	movs	r7, r1
 800bc8a:	42ab      	cmp	r3, r5
 800bc8c:	d129      	bne.n	800bce2 <_dtoa_r+0x6aa>
 800bc8e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800bc90:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800bc92:	9b08      	ldr	r3, [sp, #32]
 800bc94:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800bc96:	469c      	mov	ip, r3
 800bc98:	2200      	movs	r2, #0
 800bc9a:	4b32      	ldr	r3, [pc, #200]	@ (800bd64 <_dtoa_r+0x72c>)
 800bc9c:	4464      	add	r4, ip
 800bc9e:	f7f5 fb13 	bl	80012c8 <__aeabi_dadd>
 800bca2:	0002      	movs	r2, r0
 800bca4:	000b      	movs	r3, r1
 800bca6:	0030      	movs	r0, r6
 800bca8:	0039      	movs	r1, r7
 800bcaa:	f7f4 fbe9 	bl	8000480 <__aeabi_dcmpgt>
 800bcae:	2800      	cmp	r0, #0
 800bcb0:	d15c      	bne.n	800bd6c <_dtoa_r+0x734>
 800bcb2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bcb4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bcb6:	2000      	movs	r0, #0
 800bcb8:	492a      	ldr	r1, [pc, #168]	@ (800bd64 <_dtoa_r+0x72c>)
 800bcba:	f7f6 fd75 	bl	80027a8 <__aeabi_dsub>
 800bcbe:	0002      	movs	r2, r0
 800bcc0:	000b      	movs	r3, r1
 800bcc2:	0030      	movs	r0, r6
 800bcc4:	0039      	movs	r1, r7
 800bcc6:	f7f4 fbc7 	bl	8000458 <__aeabi_dcmplt>
 800bcca:	2800      	cmp	r0, #0
 800bccc:	d100      	bne.n	800bcd0 <_dtoa_r+0x698>
 800bcce:	e6ee      	b.n	800baae <_dtoa_r+0x476>
 800bcd0:	0023      	movs	r3, r4
 800bcd2:	3c01      	subs	r4, #1
 800bcd4:	7822      	ldrb	r2, [r4, #0]
 800bcd6:	2a30      	cmp	r2, #48	@ 0x30
 800bcd8:	d0fa      	beq.n	800bcd0 <_dtoa_r+0x698>
 800bcda:	001c      	movs	r4, r3
 800bcdc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bcde:	9304      	str	r3, [sp, #16]
 800bce0:	e73e      	b.n	800bb60 <_dtoa_r+0x528>
 800bce2:	2200      	movs	r2, #0
 800bce4:	4b1b      	ldr	r3, [pc, #108]	@ (800bd54 <_dtoa_r+0x71c>)
 800bce6:	f7f6 fa97 	bl	8002218 <__aeabi_dmul>
 800bcea:	900a      	str	r0, [sp, #40]	@ 0x28
 800bcec:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bcee:	e7b9      	b.n	800bc64 <_dtoa_r+0x62c>
 800bcf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d10c      	bne.n	800bd10 <_dtoa_r+0x6d8>
 800bcf6:	9806      	ldr	r0, [sp, #24]
 800bcf8:	9907      	ldr	r1, [sp, #28]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	4b18      	ldr	r3, [pc, #96]	@ (800bd60 <_dtoa_r+0x728>)
 800bcfe:	f7f6 fa8b 	bl	8002218 <__aeabi_dmul>
 800bd02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bd04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd06:	f7f4 fbc5 	bl	8000494 <__aeabi_dcmpge>
 800bd0a:	2800      	cmp	r0, #0
 800bd0c:	d100      	bne.n	800bd10 <_dtoa_r+0x6d8>
 800bd0e:	e164      	b.n	800bfda <_dtoa_r+0x9a2>
 800bd10:	2600      	movs	r6, #0
 800bd12:	0037      	movs	r7, r6
 800bd14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bd16:	9c08      	ldr	r4, [sp, #32]
 800bd18:	43db      	mvns	r3, r3
 800bd1a:	930c      	str	r3, [sp, #48]	@ 0x30
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	9304      	str	r3, [sp, #16]
 800bd20:	0031      	movs	r1, r6
 800bd22:	9803      	ldr	r0, [sp, #12]
 800bd24:	f000 fe5e 	bl	800c9e4 <_Bfree>
 800bd28:	2f00      	cmp	r7, #0
 800bd2a:	d0d7      	beq.n	800bcdc <_dtoa_r+0x6a4>
 800bd2c:	9b04      	ldr	r3, [sp, #16]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d005      	beq.n	800bd3e <_dtoa_r+0x706>
 800bd32:	42bb      	cmp	r3, r7
 800bd34:	d003      	beq.n	800bd3e <_dtoa_r+0x706>
 800bd36:	0019      	movs	r1, r3
 800bd38:	9803      	ldr	r0, [sp, #12]
 800bd3a:	f000 fe53 	bl	800c9e4 <_Bfree>
 800bd3e:	0039      	movs	r1, r7
 800bd40:	9803      	ldr	r0, [sp, #12]
 800bd42:	f000 fe4f 	bl	800c9e4 <_Bfree>
 800bd46:	e7c9      	b.n	800bcdc <_dtoa_r+0x6a4>
 800bd48:	0800dd80 	.word	0x0800dd80
 800bd4c:	0800dd58 	.word	0x0800dd58
 800bd50:	3ff00000 	.word	0x3ff00000
 800bd54:	40240000 	.word	0x40240000
 800bd58:	401c0000 	.word	0x401c0000
 800bd5c:	fcc00000 	.word	0xfcc00000
 800bd60:	40140000 	.word	0x40140000
 800bd64:	3fe00000 	.word	0x3fe00000
 800bd68:	9b04      	ldr	r3, [sp, #16]
 800bd6a:	930c      	str	r3, [sp, #48]	@ 0x30
 800bd6c:	0023      	movs	r3, r4
 800bd6e:	001c      	movs	r4, r3
 800bd70:	3b01      	subs	r3, #1
 800bd72:	781a      	ldrb	r2, [r3, #0]
 800bd74:	2a39      	cmp	r2, #57	@ 0x39
 800bd76:	d108      	bne.n	800bd8a <_dtoa_r+0x752>
 800bd78:	9a08      	ldr	r2, [sp, #32]
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d1f7      	bne.n	800bd6e <_dtoa_r+0x736>
 800bd7e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bd80:	9908      	ldr	r1, [sp, #32]
 800bd82:	3201      	adds	r2, #1
 800bd84:	920c      	str	r2, [sp, #48]	@ 0x30
 800bd86:	2230      	movs	r2, #48	@ 0x30
 800bd88:	700a      	strb	r2, [r1, #0]
 800bd8a:	781a      	ldrb	r2, [r3, #0]
 800bd8c:	3201      	adds	r2, #1
 800bd8e:	701a      	strb	r2, [r3, #0]
 800bd90:	e7a4      	b.n	800bcdc <_dtoa_r+0x6a4>
 800bd92:	2200      	movs	r2, #0
 800bd94:	4bc6      	ldr	r3, [pc, #792]	@ (800c0b0 <_dtoa_r+0xa78>)
 800bd96:	f7f6 fa3f 	bl	8002218 <__aeabi_dmul>
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	0006      	movs	r6, r0
 800bda0:	000f      	movs	r7, r1
 800bda2:	f7f4 fb53 	bl	800044c <__aeabi_dcmpeq>
 800bda6:	2800      	cmp	r0, #0
 800bda8:	d100      	bne.n	800bdac <_dtoa_r+0x774>
 800bdaa:	e6a1      	b.n	800baf0 <_dtoa_r+0x4b8>
 800bdac:	e6d8      	b.n	800bb60 <_dtoa_r+0x528>
 800bdae:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800bdb0:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800bdb2:	9c06      	ldr	r4, [sp, #24]
 800bdb4:	2f00      	cmp	r7, #0
 800bdb6:	d014      	beq.n	800bde2 <_dtoa_r+0x7aa>
 800bdb8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800bdba:	2a01      	cmp	r2, #1
 800bdbc:	dd00      	ble.n	800bdc0 <_dtoa_r+0x788>
 800bdbe:	e0c8      	b.n	800bf52 <_dtoa_r+0x91a>
 800bdc0:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800bdc2:	2a00      	cmp	r2, #0
 800bdc4:	d100      	bne.n	800bdc8 <_dtoa_r+0x790>
 800bdc6:	e0be      	b.n	800bf46 <_dtoa_r+0x90e>
 800bdc8:	4aba      	ldr	r2, [pc, #744]	@ (800c0b4 <_dtoa_r+0xa7c>)
 800bdca:	189b      	adds	r3, r3, r2
 800bdcc:	9a06      	ldr	r2, [sp, #24]
 800bdce:	2101      	movs	r1, #1
 800bdd0:	18d2      	adds	r2, r2, r3
 800bdd2:	9206      	str	r2, [sp, #24]
 800bdd4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bdd6:	9803      	ldr	r0, [sp, #12]
 800bdd8:	18d3      	adds	r3, r2, r3
 800bdda:	930d      	str	r3, [sp, #52]	@ 0x34
 800bddc:	f000 feba 	bl	800cb54 <__i2b>
 800bde0:	0007      	movs	r7, r0
 800bde2:	2c00      	cmp	r4, #0
 800bde4:	d00e      	beq.n	800be04 <_dtoa_r+0x7cc>
 800bde6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	dd0b      	ble.n	800be04 <_dtoa_r+0x7cc>
 800bdec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bdee:	0023      	movs	r3, r4
 800bdf0:	4294      	cmp	r4, r2
 800bdf2:	dd00      	ble.n	800bdf6 <_dtoa_r+0x7be>
 800bdf4:	0013      	movs	r3, r2
 800bdf6:	9a06      	ldr	r2, [sp, #24]
 800bdf8:	1ae4      	subs	r4, r4, r3
 800bdfa:	1ad2      	subs	r2, r2, r3
 800bdfc:	9206      	str	r2, [sp, #24]
 800bdfe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800be00:	1ad3      	subs	r3, r2, r3
 800be02:	930d      	str	r3, [sp, #52]	@ 0x34
 800be04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be06:	2b00      	cmp	r3, #0
 800be08:	d01f      	beq.n	800be4a <_dtoa_r+0x812>
 800be0a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d100      	bne.n	800be12 <_dtoa_r+0x7da>
 800be10:	e0b5      	b.n	800bf7e <_dtoa_r+0x946>
 800be12:	2d00      	cmp	r5, #0
 800be14:	d010      	beq.n	800be38 <_dtoa_r+0x800>
 800be16:	0039      	movs	r1, r7
 800be18:	002a      	movs	r2, r5
 800be1a:	9803      	ldr	r0, [sp, #12]
 800be1c:	f000 ff64 	bl	800cce8 <__pow5mult>
 800be20:	9a05      	ldr	r2, [sp, #20]
 800be22:	0001      	movs	r1, r0
 800be24:	0007      	movs	r7, r0
 800be26:	9803      	ldr	r0, [sp, #12]
 800be28:	f000 feac 	bl	800cb84 <__multiply>
 800be2c:	0006      	movs	r6, r0
 800be2e:	9905      	ldr	r1, [sp, #20]
 800be30:	9803      	ldr	r0, [sp, #12]
 800be32:	f000 fdd7 	bl	800c9e4 <_Bfree>
 800be36:	9605      	str	r6, [sp, #20]
 800be38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be3a:	1b5a      	subs	r2, r3, r5
 800be3c:	42ab      	cmp	r3, r5
 800be3e:	d004      	beq.n	800be4a <_dtoa_r+0x812>
 800be40:	9905      	ldr	r1, [sp, #20]
 800be42:	9803      	ldr	r0, [sp, #12]
 800be44:	f000 ff50 	bl	800cce8 <__pow5mult>
 800be48:	9005      	str	r0, [sp, #20]
 800be4a:	2101      	movs	r1, #1
 800be4c:	9803      	ldr	r0, [sp, #12]
 800be4e:	f000 fe81 	bl	800cb54 <__i2b>
 800be52:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800be54:	0006      	movs	r6, r0
 800be56:	2b00      	cmp	r3, #0
 800be58:	d100      	bne.n	800be5c <_dtoa_r+0x824>
 800be5a:	e1bc      	b.n	800c1d6 <_dtoa_r+0xb9e>
 800be5c:	001a      	movs	r2, r3
 800be5e:	0001      	movs	r1, r0
 800be60:	9803      	ldr	r0, [sp, #12]
 800be62:	f000 ff41 	bl	800cce8 <__pow5mult>
 800be66:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800be68:	0006      	movs	r6, r0
 800be6a:	2500      	movs	r5, #0
 800be6c:	2b01      	cmp	r3, #1
 800be6e:	dc16      	bgt.n	800be9e <_dtoa_r+0x866>
 800be70:	2500      	movs	r5, #0
 800be72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be74:	42ab      	cmp	r3, r5
 800be76:	d10e      	bne.n	800be96 <_dtoa_r+0x85e>
 800be78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be7a:	031b      	lsls	r3, r3, #12
 800be7c:	42ab      	cmp	r3, r5
 800be7e:	d10a      	bne.n	800be96 <_dtoa_r+0x85e>
 800be80:	4b8d      	ldr	r3, [pc, #564]	@ (800c0b8 <_dtoa_r+0xa80>)
 800be82:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800be84:	4213      	tst	r3, r2
 800be86:	d006      	beq.n	800be96 <_dtoa_r+0x85e>
 800be88:	9b06      	ldr	r3, [sp, #24]
 800be8a:	3501      	adds	r5, #1
 800be8c:	3301      	adds	r3, #1
 800be8e:	9306      	str	r3, [sp, #24]
 800be90:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800be92:	3301      	adds	r3, #1
 800be94:	930d      	str	r3, [sp, #52]	@ 0x34
 800be96:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800be98:	2001      	movs	r0, #1
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d008      	beq.n	800beb0 <_dtoa_r+0x878>
 800be9e:	6933      	ldr	r3, [r6, #16]
 800bea0:	3303      	adds	r3, #3
 800bea2:	009b      	lsls	r3, r3, #2
 800bea4:	18f3      	adds	r3, r6, r3
 800bea6:	6858      	ldr	r0, [r3, #4]
 800bea8:	f000 fe04 	bl	800cab4 <__hi0bits>
 800beac:	2320      	movs	r3, #32
 800beae:	1a18      	subs	r0, r3, r0
 800beb0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800beb2:	1818      	adds	r0, r3, r0
 800beb4:	0002      	movs	r2, r0
 800beb6:	231f      	movs	r3, #31
 800beb8:	401a      	ands	r2, r3
 800beba:	4218      	tst	r0, r3
 800bebc:	d065      	beq.n	800bf8a <_dtoa_r+0x952>
 800bebe:	3301      	adds	r3, #1
 800bec0:	1a9b      	subs	r3, r3, r2
 800bec2:	2b04      	cmp	r3, #4
 800bec4:	dd5d      	ble.n	800bf82 <_dtoa_r+0x94a>
 800bec6:	231c      	movs	r3, #28
 800bec8:	1a9b      	subs	r3, r3, r2
 800beca:	9a06      	ldr	r2, [sp, #24]
 800becc:	18e4      	adds	r4, r4, r3
 800bece:	18d2      	adds	r2, r2, r3
 800bed0:	9206      	str	r2, [sp, #24]
 800bed2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bed4:	18d3      	adds	r3, r2, r3
 800bed6:	930d      	str	r3, [sp, #52]	@ 0x34
 800bed8:	9b06      	ldr	r3, [sp, #24]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	dd05      	ble.n	800beea <_dtoa_r+0x8b2>
 800bede:	001a      	movs	r2, r3
 800bee0:	9905      	ldr	r1, [sp, #20]
 800bee2:	9803      	ldr	r0, [sp, #12]
 800bee4:	f000 ff5c 	bl	800cda0 <__lshift>
 800bee8:	9005      	str	r0, [sp, #20]
 800beea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800beec:	2b00      	cmp	r3, #0
 800beee:	dd05      	ble.n	800befc <_dtoa_r+0x8c4>
 800bef0:	0031      	movs	r1, r6
 800bef2:	001a      	movs	r2, r3
 800bef4:	9803      	ldr	r0, [sp, #12]
 800bef6:	f000 ff53 	bl	800cda0 <__lshift>
 800befa:	0006      	movs	r6, r0
 800befc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d045      	beq.n	800bf8e <_dtoa_r+0x956>
 800bf02:	0031      	movs	r1, r6
 800bf04:	9805      	ldr	r0, [sp, #20]
 800bf06:	f000 ffb7 	bl	800ce78 <__mcmp>
 800bf0a:	2800      	cmp	r0, #0
 800bf0c:	da3f      	bge.n	800bf8e <_dtoa_r+0x956>
 800bf0e:	9b04      	ldr	r3, [sp, #16]
 800bf10:	220a      	movs	r2, #10
 800bf12:	3b01      	subs	r3, #1
 800bf14:	930c      	str	r3, [sp, #48]	@ 0x30
 800bf16:	9905      	ldr	r1, [sp, #20]
 800bf18:	2300      	movs	r3, #0
 800bf1a:	9803      	ldr	r0, [sp, #12]
 800bf1c:	f000 fd86 	bl	800ca2c <__multadd>
 800bf20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bf22:	9005      	str	r0, [sp, #20]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d100      	bne.n	800bf2a <_dtoa_r+0x8f2>
 800bf28:	e15c      	b.n	800c1e4 <_dtoa_r+0xbac>
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	0039      	movs	r1, r7
 800bf2e:	220a      	movs	r2, #10
 800bf30:	9803      	ldr	r0, [sp, #12]
 800bf32:	f000 fd7b 	bl	800ca2c <__multadd>
 800bf36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf38:	0007      	movs	r7, r0
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	dc55      	bgt.n	800bfea <_dtoa_r+0x9b2>
 800bf3e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800bf40:	2b02      	cmp	r3, #2
 800bf42:	dc2d      	bgt.n	800bfa0 <_dtoa_r+0x968>
 800bf44:	e051      	b.n	800bfea <_dtoa_r+0x9b2>
 800bf46:	2336      	movs	r3, #54	@ 0x36
 800bf48:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bf4a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800bf4c:	9c06      	ldr	r4, [sp, #24]
 800bf4e:	1a9b      	subs	r3, r3, r2
 800bf50:	e73c      	b.n	800bdcc <_dtoa_r+0x794>
 800bf52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf54:	1e5d      	subs	r5, r3, #1
 800bf56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf58:	42ab      	cmp	r3, r5
 800bf5a:	db08      	blt.n	800bf6e <_dtoa_r+0x936>
 800bf5c:	1b5d      	subs	r5, r3, r5
 800bf5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf60:	9c06      	ldr	r4, [sp, #24]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	db00      	blt.n	800bf68 <_dtoa_r+0x930>
 800bf66:	e731      	b.n	800bdcc <_dtoa_r+0x794>
 800bf68:	1ae4      	subs	r4, r4, r3
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	e72e      	b.n	800bdcc <_dtoa_r+0x794>
 800bf6e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf70:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bf72:	1aeb      	subs	r3, r5, r3
 800bf74:	18d3      	adds	r3, r2, r3
 800bf76:	950f      	str	r5, [sp, #60]	@ 0x3c
 800bf78:	9314      	str	r3, [sp, #80]	@ 0x50
 800bf7a:	2500      	movs	r5, #0
 800bf7c:	e7ef      	b.n	800bf5e <_dtoa_r+0x926>
 800bf7e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bf80:	e75e      	b.n	800be40 <_dtoa_r+0x808>
 800bf82:	2b04      	cmp	r3, #4
 800bf84:	d0a8      	beq.n	800bed8 <_dtoa_r+0x8a0>
 800bf86:	331c      	adds	r3, #28
 800bf88:	e79f      	b.n	800beca <_dtoa_r+0x892>
 800bf8a:	0013      	movs	r3, r2
 800bf8c:	e7fb      	b.n	800bf86 <_dtoa_r+0x94e>
 800bf8e:	9b04      	ldr	r3, [sp, #16]
 800bf90:	930c      	str	r3, [sp, #48]	@ 0x30
 800bf92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf94:	930e      	str	r3, [sp, #56]	@ 0x38
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	dc23      	bgt.n	800bfe2 <_dtoa_r+0x9aa>
 800bf9a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800bf9c:	2b02      	cmp	r3, #2
 800bf9e:	dd20      	ble.n	800bfe2 <_dtoa_r+0x9aa>
 800bfa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d000      	beq.n	800bfa8 <_dtoa_r+0x970>
 800bfa6:	e6b5      	b.n	800bd14 <_dtoa_r+0x6dc>
 800bfa8:	0031      	movs	r1, r6
 800bfaa:	2205      	movs	r2, #5
 800bfac:	9803      	ldr	r0, [sp, #12]
 800bfae:	f000 fd3d 	bl	800ca2c <__multadd>
 800bfb2:	0006      	movs	r6, r0
 800bfb4:	0001      	movs	r1, r0
 800bfb6:	9805      	ldr	r0, [sp, #20]
 800bfb8:	f000 ff5e 	bl	800ce78 <__mcmp>
 800bfbc:	2800      	cmp	r0, #0
 800bfbe:	dc00      	bgt.n	800bfc2 <_dtoa_r+0x98a>
 800bfc0:	e6a8      	b.n	800bd14 <_dtoa_r+0x6dc>
 800bfc2:	9b08      	ldr	r3, [sp, #32]
 800bfc4:	9a08      	ldr	r2, [sp, #32]
 800bfc6:	1c5c      	adds	r4, r3, #1
 800bfc8:	2331      	movs	r3, #49	@ 0x31
 800bfca:	7013      	strb	r3, [r2, #0]
 800bfcc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bfce:	3301      	adds	r3, #1
 800bfd0:	930c      	str	r3, [sp, #48]	@ 0x30
 800bfd2:	e6a3      	b.n	800bd1c <_dtoa_r+0x6e4>
 800bfd4:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800bfd6:	0037      	movs	r7, r6
 800bfd8:	e7f3      	b.n	800bfc2 <_dtoa_r+0x98a>
 800bfda:	9b04      	ldr	r3, [sp, #16]
 800bfdc:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800bfde:	930c      	str	r3, [sp, #48]	@ 0x30
 800bfe0:	e7f9      	b.n	800bfd6 <_dtoa_r+0x99e>
 800bfe2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d100      	bne.n	800bfea <_dtoa_r+0x9b2>
 800bfe8:	e100      	b.n	800c1ec <_dtoa_r+0xbb4>
 800bfea:	2c00      	cmp	r4, #0
 800bfec:	dd05      	ble.n	800bffa <_dtoa_r+0x9c2>
 800bfee:	0039      	movs	r1, r7
 800bff0:	0022      	movs	r2, r4
 800bff2:	9803      	ldr	r0, [sp, #12]
 800bff4:	f000 fed4 	bl	800cda0 <__lshift>
 800bff8:	0007      	movs	r7, r0
 800bffa:	0038      	movs	r0, r7
 800bffc:	2d00      	cmp	r5, #0
 800bffe:	d018      	beq.n	800c032 <_dtoa_r+0x9fa>
 800c000:	6879      	ldr	r1, [r7, #4]
 800c002:	9803      	ldr	r0, [sp, #12]
 800c004:	f000 fcaa 	bl	800c95c <_Balloc>
 800c008:	1e04      	subs	r4, r0, #0
 800c00a:	d105      	bne.n	800c018 <_dtoa_r+0x9e0>
 800c00c:	0022      	movs	r2, r4
 800c00e:	4b2b      	ldr	r3, [pc, #172]	@ (800c0bc <_dtoa_r+0xa84>)
 800c010:	482b      	ldr	r0, [pc, #172]	@ (800c0c0 <_dtoa_r+0xa88>)
 800c012:	492c      	ldr	r1, [pc, #176]	@ (800c0c4 <_dtoa_r+0xa8c>)
 800c014:	f7ff fb25 	bl	800b662 <_dtoa_r+0x2a>
 800c018:	0039      	movs	r1, r7
 800c01a:	693a      	ldr	r2, [r7, #16]
 800c01c:	310c      	adds	r1, #12
 800c01e:	3202      	adds	r2, #2
 800c020:	0092      	lsls	r2, r2, #2
 800c022:	300c      	adds	r0, #12
 800c024:	f7ff fa70 	bl	800b508 <memcpy>
 800c028:	2201      	movs	r2, #1
 800c02a:	0021      	movs	r1, r4
 800c02c:	9803      	ldr	r0, [sp, #12]
 800c02e:	f000 feb7 	bl	800cda0 <__lshift>
 800c032:	9b08      	ldr	r3, [sp, #32]
 800c034:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c036:	9306      	str	r3, [sp, #24]
 800c038:	3b01      	subs	r3, #1
 800c03a:	189b      	adds	r3, r3, r2
 800c03c:	2201      	movs	r2, #1
 800c03e:	9704      	str	r7, [sp, #16]
 800c040:	0007      	movs	r7, r0
 800c042:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c044:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c046:	4013      	ands	r3, r2
 800c048:	930e      	str	r3, [sp, #56]	@ 0x38
 800c04a:	0031      	movs	r1, r6
 800c04c:	9805      	ldr	r0, [sp, #20]
 800c04e:	f7ff fa64 	bl	800b51a <quorem>
 800c052:	9904      	ldr	r1, [sp, #16]
 800c054:	0005      	movs	r5, r0
 800c056:	900a      	str	r0, [sp, #40]	@ 0x28
 800c058:	9805      	ldr	r0, [sp, #20]
 800c05a:	f000 ff0d 	bl	800ce78 <__mcmp>
 800c05e:	003a      	movs	r2, r7
 800c060:	900d      	str	r0, [sp, #52]	@ 0x34
 800c062:	0031      	movs	r1, r6
 800c064:	9803      	ldr	r0, [sp, #12]
 800c066:	f000 ff23 	bl	800ceb0 <__mdiff>
 800c06a:	2201      	movs	r2, #1
 800c06c:	68c3      	ldr	r3, [r0, #12]
 800c06e:	0004      	movs	r4, r0
 800c070:	3530      	adds	r5, #48	@ 0x30
 800c072:	9209      	str	r2, [sp, #36]	@ 0x24
 800c074:	2b00      	cmp	r3, #0
 800c076:	d104      	bne.n	800c082 <_dtoa_r+0xa4a>
 800c078:	0001      	movs	r1, r0
 800c07a:	9805      	ldr	r0, [sp, #20]
 800c07c:	f000 fefc 	bl	800ce78 <__mcmp>
 800c080:	9009      	str	r0, [sp, #36]	@ 0x24
 800c082:	0021      	movs	r1, r4
 800c084:	9803      	ldr	r0, [sp, #12]
 800c086:	f000 fcad 	bl	800c9e4 <_Bfree>
 800c08a:	9b06      	ldr	r3, [sp, #24]
 800c08c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c08e:	1c5c      	adds	r4, r3, #1
 800c090:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c092:	4313      	orrs	r3, r2
 800c094:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c096:	4313      	orrs	r3, r2
 800c098:	d116      	bne.n	800c0c8 <_dtoa_r+0xa90>
 800c09a:	2d39      	cmp	r5, #57	@ 0x39
 800c09c:	d02f      	beq.n	800c0fe <_dtoa_r+0xac6>
 800c09e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	dd01      	ble.n	800c0a8 <_dtoa_r+0xa70>
 800c0a4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800c0a6:	3531      	adds	r5, #49	@ 0x31
 800c0a8:	9b06      	ldr	r3, [sp, #24]
 800c0aa:	701d      	strb	r5, [r3, #0]
 800c0ac:	e638      	b.n	800bd20 <_dtoa_r+0x6e8>
 800c0ae:	46c0      	nop			@ (mov r8, r8)
 800c0b0:	40240000 	.word	0x40240000
 800c0b4:	00000433 	.word	0x00000433
 800c0b8:	7ff00000 	.word	0x7ff00000
 800c0bc:	0800dccc 	.word	0x0800dccc
 800c0c0:	0800dc74 	.word	0x0800dc74
 800c0c4:	000002ef 	.word	0x000002ef
 800c0c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	db04      	blt.n	800c0d8 <_dtoa_r+0xaa0>
 800c0ce:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c0d4:	4313      	orrs	r3, r2
 800c0d6:	d11e      	bne.n	800c116 <_dtoa_r+0xade>
 800c0d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	dde4      	ble.n	800c0a8 <_dtoa_r+0xa70>
 800c0de:	9905      	ldr	r1, [sp, #20]
 800c0e0:	2201      	movs	r2, #1
 800c0e2:	9803      	ldr	r0, [sp, #12]
 800c0e4:	f000 fe5c 	bl	800cda0 <__lshift>
 800c0e8:	0031      	movs	r1, r6
 800c0ea:	9005      	str	r0, [sp, #20]
 800c0ec:	f000 fec4 	bl	800ce78 <__mcmp>
 800c0f0:	2800      	cmp	r0, #0
 800c0f2:	dc02      	bgt.n	800c0fa <_dtoa_r+0xac2>
 800c0f4:	d1d8      	bne.n	800c0a8 <_dtoa_r+0xa70>
 800c0f6:	07eb      	lsls	r3, r5, #31
 800c0f8:	d5d6      	bpl.n	800c0a8 <_dtoa_r+0xa70>
 800c0fa:	2d39      	cmp	r5, #57	@ 0x39
 800c0fc:	d1d2      	bne.n	800c0a4 <_dtoa_r+0xa6c>
 800c0fe:	2339      	movs	r3, #57	@ 0x39
 800c100:	9a06      	ldr	r2, [sp, #24]
 800c102:	7013      	strb	r3, [r2, #0]
 800c104:	0023      	movs	r3, r4
 800c106:	001c      	movs	r4, r3
 800c108:	3b01      	subs	r3, #1
 800c10a:	781a      	ldrb	r2, [r3, #0]
 800c10c:	2a39      	cmp	r2, #57	@ 0x39
 800c10e:	d04f      	beq.n	800c1b0 <_dtoa_r+0xb78>
 800c110:	3201      	adds	r2, #1
 800c112:	701a      	strb	r2, [r3, #0]
 800c114:	e604      	b.n	800bd20 <_dtoa_r+0x6e8>
 800c116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c118:	2b00      	cmp	r3, #0
 800c11a:	dd03      	ble.n	800c124 <_dtoa_r+0xaec>
 800c11c:	2d39      	cmp	r5, #57	@ 0x39
 800c11e:	d0ee      	beq.n	800c0fe <_dtoa_r+0xac6>
 800c120:	3501      	adds	r5, #1
 800c122:	e7c1      	b.n	800c0a8 <_dtoa_r+0xa70>
 800c124:	9b06      	ldr	r3, [sp, #24]
 800c126:	9a06      	ldr	r2, [sp, #24]
 800c128:	701d      	strb	r5, [r3, #0]
 800c12a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c12c:	4293      	cmp	r3, r2
 800c12e:	d02a      	beq.n	800c186 <_dtoa_r+0xb4e>
 800c130:	2300      	movs	r3, #0
 800c132:	220a      	movs	r2, #10
 800c134:	9905      	ldr	r1, [sp, #20]
 800c136:	9803      	ldr	r0, [sp, #12]
 800c138:	f000 fc78 	bl	800ca2c <__multadd>
 800c13c:	9b04      	ldr	r3, [sp, #16]
 800c13e:	9005      	str	r0, [sp, #20]
 800c140:	42bb      	cmp	r3, r7
 800c142:	d109      	bne.n	800c158 <_dtoa_r+0xb20>
 800c144:	2300      	movs	r3, #0
 800c146:	220a      	movs	r2, #10
 800c148:	9904      	ldr	r1, [sp, #16]
 800c14a:	9803      	ldr	r0, [sp, #12]
 800c14c:	f000 fc6e 	bl	800ca2c <__multadd>
 800c150:	9004      	str	r0, [sp, #16]
 800c152:	0007      	movs	r7, r0
 800c154:	9406      	str	r4, [sp, #24]
 800c156:	e778      	b.n	800c04a <_dtoa_r+0xa12>
 800c158:	9904      	ldr	r1, [sp, #16]
 800c15a:	2300      	movs	r3, #0
 800c15c:	220a      	movs	r2, #10
 800c15e:	9803      	ldr	r0, [sp, #12]
 800c160:	f000 fc64 	bl	800ca2c <__multadd>
 800c164:	2300      	movs	r3, #0
 800c166:	9004      	str	r0, [sp, #16]
 800c168:	220a      	movs	r2, #10
 800c16a:	0039      	movs	r1, r7
 800c16c:	9803      	ldr	r0, [sp, #12]
 800c16e:	f000 fc5d 	bl	800ca2c <__multadd>
 800c172:	e7ee      	b.n	800c152 <_dtoa_r+0xb1a>
 800c174:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c176:	2401      	movs	r4, #1
 800c178:	2b00      	cmp	r3, #0
 800c17a:	dd00      	ble.n	800c17e <_dtoa_r+0xb46>
 800c17c:	001c      	movs	r4, r3
 800c17e:	9b08      	ldr	r3, [sp, #32]
 800c180:	191c      	adds	r4, r3, r4
 800c182:	2300      	movs	r3, #0
 800c184:	9304      	str	r3, [sp, #16]
 800c186:	9905      	ldr	r1, [sp, #20]
 800c188:	2201      	movs	r2, #1
 800c18a:	9803      	ldr	r0, [sp, #12]
 800c18c:	f000 fe08 	bl	800cda0 <__lshift>
 800c190:	0031      	movs	r1, r6
 800c192:	9005      	str	r0, [sp, #20]
 800c194:	f000 fe70 	bl	800ce78 <__mcmp>
 800c198:	2800      	cmp	r0, #0
 800c19a:	dcb3      	bgt.n	800c104 <_dtoa_r+0xacc>
 800c19c:	d101      	bne.n	800c1a2 <_dtoa_r+0xb6a>
 800c19e:	07ed      	lsls	r5, r5, #31
 800c1a0:	d4b0      	bmi.n	800c104 <_dtoa_r+0xacc>
 800c1a2:	0023      	movs	r3, r4
 800c1a4:	001c      	movs	r4, r3
 800c1a6:	3b01      	subs	r3, #1
 800c1a8:	781a      	ldrb	r2, [r3, #0]
 800c1aa:	2a30      	cmp	r2, #48	@ 0x30
 800c1ac:	d0fa      	beq.n	800c1a4 <_dtoa_r+0xb6c>
 800c1ae:	e5b7      	b.n	800bd20 <_dtoa_r+0x6e8>
 800c1b0:	9a08      	ldr	r2, [sp, #32]
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d1a7      	bne.n	800c106 <_dtoa_r+0xace>
 800c1b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c1b8:	3301      	adds	r3, #1
 800c1ba:	930c      	str	r3, [sp, #48]	@ 0x30
 800c1bc:	2331      	movs	r3, #49	@ 0x31
 800c1be:	7013      	strb	r3, [r2, #0]
 800c1c0:	e5ae      	b.n	800bd20 <_dtoa_r+0x6e8>
 800c1c2:	4b15      	ldr	r3, [pc, #84]	@ (800c218 <_dtoa_r+0xbe0>)
 800c1c4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800c1c6:	9308      	str	r3, [sp, #32]
 800c1c8:	4b14      	ldr	r3, [pc, #80]	@ (800c21c <_dtoa_r+0xbe4>)
 800c1ca:	2a00      	cmp	r2, #0
 800c1cc:	d001      	beq.n	800c1d2 <_dtoa_r+0xb9a>
 800c1ce:	f7ff fa7b 	bl	800b6c8 <_dtoa_r+0x90>
 800c1d2:	f7ff fa7b 	bl	800b6cc <_dtoa_r+0x94>
 800c1d6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c1d8:	2b01      	cmp	r3, #1
 800c1da:	dc00      	bgt.n	800c1de <_dtoa_r+0xba6>
 800c1dc:	e648      	b.n	800be70 <_dtoa_r+0x838>
 800c1de:	2001      	movs	r0, #1
 800c1e0:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800c1e2:	e665      	b.n	800beb0 <_dtoa_r+0x878>
 800c1e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	dc00      	bgt.n	800c1ec <_dtoa_r+0xbb4>
 800c1ea:	e6d6      	b.n	800bf9a <_dtoa_r+0x962>
 800c1ec:	2400      	movs	r4, #0
 800c1ee:	0031      	movs	r1, r6
 800c1f0:	9805      	ldr	r0, [sp, #20]
 800c1f2:	f7ff f992 	bl	800b51a <quorem>
 800c1f6:	9b08      	ldr	r3, [sp, #32]
 800c1f8:	3030      	adds	r0, #48	@ 0x30
 800c1fa:	5518      	strb	r0, [r3, r4]
 800c1fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1fe:	3401      	adds	r4, #1
 800c200:	0005      	movs	r5, r0
 800c202:	429c      	cmp	r4, r3
 800c204:	dab6      	bge.n	800c174 <_dtoa_r+0xb3c>
 800c206:	2300      	movs	r3, #0
 800c208:	220a      	movs	r2, #10
 800c20a:	9905      	ldr	r1, [sp, #20]
 800c20c:	9803      	ldr	r0, [sp, #12]
 800c20e:	f000 fc0d 	bl	800ca2c <__multadd>
 800c212:	9005      	str	r0, [sp, #20]
 800c214:	e7eb      	b.n	800c1ee <_dtoa_r+0xbb6>
 800c216:	46c0      	nop			@ (mov r8, r8)
 800c218:	0800dc50 	.word	0x0800dc50
 800c21c:	0800dc58 	.word	0x0800dc58

0800c220 <_free_r>:
 800c220:	b570      	push	{r4, r5, r6, lr}
 800c222:	0005      	movs	r5, r0
 800c224:	1e0c      	subs	r4, r1, #0
 800c226:	d010      	beq.n	800c24a <_free_r+0x2a>
 800c228:	3c04      	subs	r4, #4
 800c22a:	6823      	ldr	r3, [r4, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	da00      	bge.n	800c232 <_free_r+0x12>
 800c230:	18e4      	adds	r4, r4, r3
 800c232:	0028      	movs	r0, r5
 800c234:	f7fe fff6 	bl	800b224 <__malloc_lock>
 800c238:	4a1d      	ldr	r2, [pc, #116]	@ (800c2b0 <_free_r+0x90>)
 800c23a:	6813      	ldr	r3, [r2, #0]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d105      	bne.n	800c24c <_free_r+0x2c>
 800c240:	6063      	str	r3, [r4, #4]
 800c242:	6014      	str	r4, [r2, #0]
 800c244:	0028      	movs	r0, r5
 800c246:	f7fe fff5 	bl	800b234 <__malloc_unlock>
 800c24a:	bd70      	pop	{r4, r5, r6, pc}
 800c24c:	42a3      	cmp	r3, r4
 800c24e:	d908      	bls.n	800c262 <_free_r+0x42>
 800c250:	6820      	ldr	r0, [r4, #0]
 800c252:	1821      	adds	r1, r4, r0
 800c254:	428b      	cmp	r3, r1
 800c256:	d1f3      	bne.n	800c240 <_free_r+0x20>
 800c258:	6819      	ldr	r1, [r3, #0]
 800c25a:	685b      	ldr	r3, [r3, #4]
 800c25c:	1809      	adds	r1, r1, r0
 800c25e:	6021      	str	r1, [r4, #0]
 800c260:	e7ee      	b.n	800c240 <_free_r+0x20>
 800c262:	001a      	movs	r2, r3
 800c264:	685b      	ldr	r3, [r3, #4]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d001      	beq.n	800c26e <_free_r+0x4e>
 800c26a:	42a3      	cmp	r3, r4
 800c26c:	d9f9      	bls.n	800c262 <_free_r+0x42>
 800c26e:	6811      	ldr	r1, [r2, #0]
 800c270:	1850      	adds	r0, r2, r1
 800c272:	42a0      	cmp	r0, r4
 800c274:	d10b      	bne.n	800c28e <_free_r+0x6e>
 800c276:	6820      	ldr	r0, [r4, #0]
 800c278:	1809      	adds	r1, r1, r0
 800c27a:	1850      	adds	r0, r2, r1
 800c27c:	6011      	str	r1, [r2, #0]
 800c27e:	4283      	cmp	r3, r0
 800c280:	d1e0      	bne.n	800c244 <_free_r+0x24>
 800c282:	6818      	ldr	r0, [r3, #0]
 800c284:	685b      	ldr	r3, [r3, #4]
 800c286:	1841      	adds	r1, r0, r1
 800c288:	6011      	str	r1, [r2, #0]
 800c28a:	6053      	str	r3, [r2, #4]
 800c28c:	e7da      	b.n	800c244 <_free_r+0x24>
 800c28e:	42a0      	cmp	r0, r4
 800c290:	d902      	bls.n	800c298 <_free_r+0x78>
 800c292:	230c      	movs	r3, #12
 800c294:	602b      	str	r3, [r5, #0]
 800c296:	e7d5      	b.n	800c244 <_free_r+0x24>
 800c298:	6820      	ldr	r0, [r4, #0]
 800c29a:	1821      	adds	r1, r4, r0
 800c29c:	428b      	cmp	r3, r1
 800c29e:	d103      	bne.n	800c2a8 <_free_r+0x88>
 800c2a0:	6819      	ldr	r1, [r3, #0]
 800c2a2:	685b      	ldr	r3, [r3, #4]
 800c2a4:	1809      	adds	r1, r1, r0
 800c2a6:	6021      	str	r1, [r4, #0]
 800c2a8:	6063      	str	r3, [r4, #4]
 800c2aa:	6054      	str	r4, [r2, #4]
 800c2ac:	e7ca      	b.n	800c244 <_free_r+0x24>
 800c2ae:	46c0      	nop			@ (mov r8, r8)
 800c2b0:	20001628 	.word	0x20001628

0800c2b4 <__ssputs_r>:
 800c2b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2b6:	688e      	ldr	r6, [r1, #8]
 800c2b8:	b085      	sub	sp, #20
 800c2ba:	001f      	movs	r7, r3
 800c2bc:	000c      	movs	r4, r1
 800c2be:	680b      	ldr	r3, [r1, #0]
 800c2c0:	9002      	str	r0, [sp, #8]
 800c2c2:	9203      	str	r2, [sp, #12]
 800c2c4:	42be      	cmp	r6, r7
 800c2c6:	d830      	bhi.n	800c32a <__ssputs_r+0x76>
 800c2c8:	210c      	movs	r1, #12
 800c2ca:	5e62      	ldrsh	r2, [r4, r1]
 800c2cc:	2190      	movs	r1, #144	@ 0x90
 800c2ce:	00c9      	lsls	r1, r1, #3
 800c2d0:	420a      	tst	r2, r1
 800c2d2:	d028      	beq.n	800c326 <__ssputs_r+0x72>
 800c2d4:	2003      	movs	r0, #3
 800c2d6:	6921      	ldr	r1, [r4, #16]
 800c2d8:	1a5b      	subs	r3, r3, r1
 800c2da:	9301      	str	r3, [sp, #4]
 800c2dc:	6963      	ldr	r3, [r4, #20]
 800c2de:	4343      	muls	r3, r0
 800c2e0:	9801      	ldr	r0, [sp, #4]
 800c2e2:	0fdd      	lsrs	r5, r3, #31
 800c2e4:	18ed      	adds	r5, r5, r3
 800c2e6:	1c7b      	adds	r3, r7, #1
 800c2e8:	181b      	adds	r3, r3, r0
 800c2ea:	106d      	asrs	r5, r5, #1
 800c2ec:	42ab      	cmp	r3, r5
 800c2ee:	d900      	bls.n	800c2f2 <__ssputs_r+0x3e>
 800c2f0:	001d      	movs	r5, r3
 800c2f2:	0552      	lsls	r2, r2, #21
 800c2f4:	d528      	bpl.n	800c348 <__ssputs_r+0x94>
 800c2f6:	0029      	movs	r1, r5
 800c2f8:	9802      	ldr	r0, [sp, #8]
 800c2fa:	f7fe fd95 	bl	800ae28 <_malloc_r>
 800c2fe:	1e06      	subs	r6, r0, #0
 800c300:	d02c      	beq.n	800c35c <__ssputs_r+0xa8>
 800c302:	9a01      	ldr	r2, [sp, #4]
 800c304:	6921      	ldr	r1, [r4, #16]
 800c306:	f7ff f8ff 	bl	800b508 <memcpy>
 800c30a:	89a2      	ldrh	r2, [r4, #12]
 800c30c:	4b18      	ldr	r3, [pc, #96]	@ (800c370 <__ssputs_r+0xbc>)
 800c30e:	401a      	ands	r2, r3
 800c310:	2380      	movs	r3, #128	@ 0x80
 800c312:	4313      	orrs	r3, r2
 800c314:	81a3      	strh	r3, [r4, #12]
 800c316:	9b01      	ldr	r3, [sp, #4]
 800c318:	6126      	str	r6, [r4, #16]
 800c31a:	18f6      	adds	r6, r6, r3
 800c31c:	6026      	str	r6, [r4, #0]
 800c31e:	003e      	movs	r6, r7
 800c320:	6165      	str	r5, [r4, #20]
 800c322:	1aed      	subs	r5, r5, r3
 800c324:	60a5      	str	r5, [r4, #8]
 800c326:	42be      	cmp	r6, r7
 800c328:	d900      	bls.n	800c32c <__ssputs_r+0x78>
 800c32a:	003e      	movs	r6, r7
 800c32c:	0032      	movs	r2, r6
 800c32e:	9903      	ldr	r1, [sp, #12]
 800c330:	6820      	ldr	r0, [r4, #0]
 800c332:	f001 f83e 	bl	800d3b2 <memmove>
 800c336:	2000      	movs	r0, #0
 800c338:	68a3      	ldr	r3, [r4, #8]
 800c33a:	1b9b      	subs	r3, r3, r6
 800c33c:	60a3      	str	r3, [r4, #8]
 800c33e:	6823      	ldr	r3, [r4, #0]
 800c340:	199b      	adds	r3, r3, r6
 800c342:	6023      	str	r3, [r4, #0]
 800c344:	b005      	add	sp, #20
 800c346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c348:	002a      	movs	r2, r5
 800c34a:	9802      	ldr	r0, [sp, #8]
 800c34c:	f000 fef6 	bl	800d13c <_realloc_r>
 800c350:	1e06      	subs	r6, r0, #0
 800c352:	d1e0      	bne.n	800c316 <__ssputs_r+0x62>
 800c354:	6921      	ldr	r1, [r4, #16]
 800c356:	9802      	ldr	r0, [sp, #8]
 800c358:	f7ff ff62 	bl	800c220 <_free_r>
 800c35c:	230c      	movs	r3, #12
 800c35e:	2001      	movs	r0, #1
 800c360:	9a02      	ldr	r2, [sp, #8]
 800c362:	4240      	negs	r0, r0
 800c364:	6013      	str	r3, [r2, #0]
 800c366:	89a2      	ldrh	r2, [r4, #12]
 800c368:	3334      	adds	r3, #52	@ 0x34
 800c36a:	4313      	orrs	r3, r2
 800c36c:	81a3      	strh	r3, [r4, #12]
 800c36e:	e7e9      	b.n	800c344 <__ssputs_r+0x90>
 800c370:	fffffb7f 	.word	0xfffffb7f

0800c374 <_svfiprintf_r>:
 800c374:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c376:	b0a1      	sub	sp, #132	@ 0x84
 800c378:	9003      	str	r0, [sp, #12]
 800c37a:	001d      	movs	r5, r3
 800c37c:	898b      	ldrh	r3, [r1, #12]
 800c37e:	000f      	movs	r7, r1
 800c380:	0016      	movs	r6, r2
 800c382:	061b      	lsls	r3, r3, #24
 800c384:	d511      	bpl.n	800c3aa <_svfiprintf_r+0x36>
 800c386:	690b      	ldr	r3, [r1, #16]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d10e      	bne.n	800c3aa <_svfiprintf_r+0x36>
 800c38c:	2140      	movs	r1, #64	@ 0x40
 800c38e:	f7fe fd4b 	bl	800ae28 <_malloc_r>
 800c392:	6038      	str	r0, [r7, #0]
 800c394:	6138      	str	r0, [r7, #16]
 800c396:	2800      	cmp	r0, #0
 800c398:	d105      	bne.n	800c3a6 <_svfiprintf_r+0x32>
 800c39a:	230c      	movs	r3, #12
 800c39c:	9a03      	ldr	r2, [sp, #12]
 800c39e:	6013      	str	r3, [r2, #0]
 800c3a0:	2001      	movs	r0, #1
 800c3a2:	4240      	negs	r0, r0
 800c3a4:	e0cf      	b.n	800c546 <_svfiprintf_r+0x1d2>
 800c3a6:	2340      	movs	r3, #64	@ 0x40
 800c3a8:	617b      	str	r3, [r7, #20]
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	ac08      	add	r4, sp, #32
 800c3ae:	6163      	str	r3, [r4, #20]
 800c3b0:	3320      	adds	r3, #32
 800c3b2:	7663      	strb	r3, [r4, #25]
 800c3b4:	3310      	adds	r3, #16
 800c3b6:	76a3      	strb	r3, [r4, #26]
 800c3b8:	9507      	str	r5, [sp, #28]
 800c3ba:	0035      	movs	r5, r6
 800c3bc:	782b      	ldrb	r3, [r5, #0]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d001      	beq.n	800c3c6 <_svfiprintf_r+0x52>
 800c3c2:	2b25      	cmp	r3, #37	@ 0x25
 800c3c4:	d148      	bne.n	800c458 <_svfiprintf_r+0xe4>
 800c3c6:	1bab      	subs	r3, r5, r6
 800c3c8:	9305      	str	r3, [sp, #20]
 800c3ca:	42b5      	cmp	r5, r6
 800c3cc:	d00b      	beq.n	800c3e6 <_svfiprintf_r+0x72>
 800c3ce:	0032      	movs	r2, r6
 800c3d0:	0039      	movs	r1, r7
 800c3d2:	9803      	ldr	r0, [sp, #12]
 800c3d4:	f7ff ff6e 	bl	800c2b4 <__ssputs_r>
 800c3d8:	3001      	adds	r0, #1
 800c3da:	d100      	bne.n	800c3de <_svfiprintf_r+0x6a>
 800c3dc:	e0ae      	b.n	800c53c <_svfiprintf_r+0x1c8>
 800c3de:	6963      	ldr	r3, [r4, #20]
 800c3e0:	9a05      	ldr	r2, [sp, #20]
 800c3e2:	189b      	adds	r3, r3, r2
 800c3e4:	6163      	str	r3, [r4, #20]
 800c3e6:	782b      	ldrb	r3, [r5, #0]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d100      	bne.n	800c3ee <_svfiprintf_r+0x7a>
 800c3ec:	e0a6      	b.n	800c53c <_svfiprintf_r+0x1c8>
 800c3ee:	2201      	movs	r2, #1
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	4252      	negs	r2, r2
 800c3f4:	6062      	str	r2, [r4, #4]
 800c3f6:	a904      	add	r1, sp, #16
 800c3f8:	3254      	adds	r2, #84	@ 0x54
 800c3fa:	1852      	adds	r2, r2, r1
 800c3fc:	1c6e      	adds	r6, r5, #1
 800c3fe:	6023      	str	r3, [r4, #0]
 800c400:	60e3      	str	r3, [r4, #12]
 800c402:	60a3      	str	r3, [r4, #8]
 800c404:	7013      	strb	r3, [r2, #0]
 800c406:	65a3      	str	r3, [r4, #88]	@ 0x58
 800c408:	4b54      	ldr	r3, [pc, #336]	@ (800c55c <_svfiprintf_r+0x1e8>)
 800c40a:	2205      	movs	r2, #5
 800c40c:	0018      	movs	r0, r3
 800c40e:	7831      	ldrb	r1, [r6, #0]
 800c410:	9305      	str	r3, [sp, #20]
 800c412:	f7ff f86e 	bl	800b4f2 <memchr>
 800c416:	1c75      	adds	r5, r6, #1
 800c418:	2800      	cmp	r0, #0
 800c41a:	d11f      	bne.n	800c45c <_svfiprintf_r+0xe8>
 800c41c:	6822      	ldr	r2, [r4, #0]
 800c41e:	06d3      	lsls	r3, r2, #27
 800c420:	d504      	bpl.n	800c42c <_svfiprintf_r+0xb8>
 800c422:	2353      	movs	r3, #83	@ 0x53
 800c424:	a904      	add	r1, sp, #16
 800c426:	185b      	adds	r3, r3, r1
 800c428:	2120      	movs	r1, #32
 800c42a:	7019      	strb	r1, [r3, #0]
 800c42c:	0713      	lsls	r3, r2, #28
 800c42e:	d504      	bpl.n	800c43a <_svfiprintf_r+0xc6>
 800c430:	2353      	movs	r3, #83	@ 0x53
 800c432:	a904      	add	r1, sp, #16
 800c434:	185b      	adds	r3, r3, r1
 800c436:	212b      	movs	r1, #43	@ 0x2b
 800c438:	7019      	strb	r1, [r3, #0]
 800c43a:	7833      	ldrb	r3, [r6, #0]
 800c43c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c43e:	d016      	beq.n	800c46e <_svfiprintf_r+0xfa>
 800c440:	0035      	movs	r5, r6
 800c442:	2100      	movs	r1, #0
 800c444:	200a      	movs	r0, #10
 800c446:	68e3      	ldr	r3, [r4, #12]
 800c448:	782a      	ldrb	r2, [r5, #0]
 800c44a:	1c6e      	adds	r6, r5, #1
 800c44c:	3a30      	subs	r2, #48	@ 0x30
 800c44e:	2a09      	cmp	r2, #9
 800c450:	d950      	bls.n	800c4f4 <_svfiprintf_r+0x180>
 800c452:	2900      	cmp	r1, #0
 800c454:	d111      	bne.n	800c47a <_svfiprintf_r+0x106>
 800c456:	e017      	b.n	800c488 <_svfiprintf_r+0x114>
 800c458:	3501      	adds	r5, #1
 800c45a:	e7af      	b.n	800c3bc <_svfiprintf_r+0x48>
 800c45c:	9b05      	ldr	r3, [sp, #20]
 800c45e:	6822      	ldr	r2, [r4, #0]
 800c460:	1ac0      	subs	r0, r0, r3
 800c462:	2301      	movs	r3, #1
 800c464:	4083      	lsls	r3, r0
 800c466:	4313      	orrs	r3, r2
 800c468:	002e      	movs	r6, r5
 800c46a:	6023      	str	r3, [r4, #0]
 800c46c:	e7cc      	b.n	800c408 <_svfiprintf_r+0x94>
 800c46e:	9b07      	ldr	r3, [sp, #28]
 800c470:	1d19      	adds	r1, r3, #4
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	9107      	str	r1, [sp, #28]
 800c476:	2b00      	cmp	r3, #0
 800c478:	db01      	blt.n	800c47e <_svfiprintf_r+0x10a>
 800c47a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c47c:	e004      	b.n	800c488 <_svfiprintf_r+0x114>
 800c47e:	425b      	negs	r3, r3
 800c480:	60e3      	str	r3, [r4, #12]
 800c482:	2302      	movs	r3, #2
 800c484:	4313      	orrs	r3, r2
 800c486:	6023      	str	r3, [r4, #0]
 800c488:	782b      	ldrb	r3, [r5, #0]
 800c48a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c48c:	d10c      	bne.n	800c4a8 <_svfiprintf_r+0x134>
 800c48e:	786b      	ldrb	r3, [r5, #1]
 800c490:	2b2a      	cmp	r3, #42	@ 0x2a
 800c492:	d134      	bne.n	800c4fe <_svfiprintf_r+0x18a>
 800c494:	9b07      	ldr	r3, [sp, #28]
 800c496:	3502      	adds	r5, #2
 800c498:	1d1a      	adds	r2, r3, #4
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	9207      	str	r2, [sp, #28]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	da01      	bge.n	800c4a6 <_svfiprintf_r+0x132>
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	425b      	negs	r3, r3
 800c4a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4a8:	4e2d      	ldr	r6, [pc, #180]	@ (800c560 <_svfiprintf_r+0x1ec>)
 800c4aa:	2203      	movs	r2, #3
 800c4ac:	0030      	movs	r0, r6
 800c4ae:	7829      	ldrb	r1, [r5, #0]
 800c4b0:	f7ff f81f 	bl	800b4f2 <memchr>
 800c4b4:	2800      	cmp	r0, #0
 800c4b6:	d006      	beq.n	800c4c6 <_svfiprintf_r+0x152>
 800c4b8:	2340      	movs	r3, #64	@ 0x40
 800c4ba:	1b80      	subs	r0, r0, r6
 800c4bc:	4083      	lsls	r3, r0
 800c4be:	6822      	ldr	r2, [r4, #0]
 800c4c0:	3501      	adds	r5, #1
 800c4c2:	4313      	orrs	r3, r2
 800c4c4:	6023      	str	r3, [r4, #0]
 800c4c6:	7829      	ldrb	r1, [r5, #0]
 800c4c8:	2206      	movs	r2, #6
 800c4ca:	4826      	ldr	r0, [pc, #152]	@ (800c564 <_svfiprintf_r+0x1f0>)
 800c4cc:	1c6e      	adds	r6, r5, #1
 800c4ce:	7621      	strb	r1, [r4, #24]
 800c4d0:	f7ff f80f 	bl	800b4f2 <memchr>
 800c4d4:	2800      	cmp	r0, #0
 800c4d6:	d038      	beq.n	800c54a <_svfiprintf_r+0x1d6>
 800c4d8:	4b23      	ldr	r3, [pc, #140]	@ (800c568 <_svfiprintf_r+0x1f4>)
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d122      	bne.n	800c524 <_svfiprintf_r+0x1b0>
 800c4de:	2207      	movs	r2, #7
 800c4e0:	9b07      	ldr	r3, [sp, #28]
 800c4e2:	3307      	adds	r3, #7
 800c4e4:	4393      	bics	r3, r2
 800c4e6:	3308      	adds	r3, #8
 800c4e8:	9307      	str	r3, [sp, #28]
 800c4ea:	6963      	ldr	r3, [r4, #20]
 800c4ec:	9a04      	ldr	r2, [sp, #16]
 800c4ee:	189b      	adds	r3, r3, r2
 800c4f0:	6163      	str	r3, [r4, #20]
 800c4f2:	e762      	b.n	800c3ba <_svfiprintf_r+0x46>
 800c4f4:	4343      	muls	r3, r0
 800c4f6:	0035      	movs	r5, r6
 800c4f8:	2101      	movs	r1, #1
 800c4fa:	189b      	adds	r3, r3, r2
 800c4fc:	e7a4      	b.n	800c448 <_svfiprintf_r+0xd4>
 800c4fe:	2300      	movs	r3, #0
 800c500:	200a      	movs	r0, #10
 800c502:	0019      	movs	r1, r3
 800c504:	3501      	adds	r5, #1
 800c506:	6063      	str	r3, [r4, #4]
 800c508:	782a      	ldrb	r2, [r5, #0]
 800c50a:	1c6e      	adds	r6, r5, #1
 800c50c:	3a30      	subs	r2, #48	@ 0x30
 800c50e:	2a09      	cmp	r2, #9
 800c510:	d903      	bls.n	800c51a <_svfiprintf_r+0x1a6>
 800c512:	2b00      	cmp	r3, #0
 800c514:	d0c8      	beq.n	800c4a8 <_svfiprintf_r+0x134>
 800c516:	9109      	str	r1, [sp, #36]	@ 0x24
 800c518:	e7c6      	b.n	800c4a8 <_svfiprintf_r+0x134>
 800c51a:	4341      	muls	r1, r0
 800c51c:	0035      	movs	r5, r6
 800c51e:	2301      	movs	r3, #1
 800c520:	1889      	adds	r1, r1, r2
 800c522:	e7f1      	b.n	800c508 <_svfiprintf_r+0x194>
 800c524:	aa07      	add	r2, sp, #28
 800c526:	9200      	str	r2, [sp, #0]
 800c528:	0021      	movs	r1, r4
 800c52a:	003a      	movs	r2, r7
 800c52c:	4b0f      	ldr	r3, [pc, #60]	@ (800c56c <_svfiprintf_r+0x1f8>)
 800c52e:	9803      	ldr	r0, [sp, #12]
 800c530:	f7fe fa06 	bl	800a940 <_printf_float>
 800c534:	9004      	str	r0, [sp, #16]
 800c536:	9b04      	ldr	r3, [sp, #16]
 800c538:	3301      	adds	r3, #1
 800c53a:	d1d6      	bne.n	800c4ea <_svfiprintf_r+0x176>
 800c53c:	89bb      	ldrh	r3, [r7, #12]
 800c53e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800c540:	065b      	lsls	r3, r3, #25
 800c542:	d500      	bpl.n	800c546 <_svfiprintf_r+0x1d2>
 800c544:	e72c      	b.n	800c3a0 <_svfiprintf_r+0x2c>
 800c546:	b021      	add	sp, #132	@ 0x84
 800c548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c54a:	aa07      	add	r2, sp, #28
 800c54c:	9200      	str	r2, [sp, #0]
 800c54e:	0021      	movs	r1, r4
 800c550:	003a      	movs	r2, r7
 800c552:	4b06      	ldr	r3, [pc, #24]	@ (800c56c <_svfiprintf_r+0x1f8>)
 800c554:	9803      	ldr	r0, [sp, #12]
 800c556:	f7fe fd57 	bl	800b008 <_printf_i>
 800c55a:	e7eb      	b.n	800c534 <_svfiprintf_r+0x1c0>
 800c55c:	0800dcdd 	.word	0x0800dcdd
 800c560:	0800dce3 	.word	0x0800dce3
 800c564:	0800dce7 	.word	0x0800dce7
 800c568:	0800a941 	.word	0x0800a941
 800c56c:	0800c2b5 	.word	0x0800c2b5

0800c570 <__sfputc_r>:
 800c570:	6893      	ldr	r3, [r2, #8]
 800c572:	b510      	push	{r4, lr}
 800c574:	3b01      	subs	r3, #1
 800c576:	6093      	str	r3, [r2, #8]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	da04      	bge.n	800c586 <__sfputc_r+0x16>
 800c57c:	6994      	ldr	r4, [r2, #24]
 800c57e:	42a3      	cmp	r3, r4
 800c580:	db07      	blt.n	800c592 <__sfputc_r+0x22>
 800c582:	290a      	cmp	r1, #10
 800c584:	d005      	beq.n	800c592 <__sfputc_r+0x22>
 800c586:	6813      	ldr	r3, [r2, #0]
 800c588:	1c58      	adds	r0, r3, #1
 800c58a:	6010      	str	r0, [r2, #0]
 800c58c:	7019      	strb	r1, [r3, #0]
 800c58e:	0008      	movs	r0, r1
 800c590:	bd10      	pop	{r4, pc}
 800c592:	f000 fe02 	bl	800d19a <__swbuf_r>
 800c596:	0001      	movs	r1, r0
 800c598:	e7f9      	b.n	800c58e <__sfputc_r+0x1e>

0800c59a <__sfputs_r>:
 800c59a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c59c:	0006      	movs	r6, r0
 800c59e:	000f      	movs	r7, r1
 800c5a0:	0014      	movs	r4, r2
 800c5a2:	18d5      	adds	r5, r2, r3
 800c5a4:	42ac      	cmp	r4, r5
 800c5a6:	d101      	bne.n	800c5ac <__sfputs_r+0x12>
 800c5a8:	2000      	movs	r0, #0
 800c5aa:	e007      	b.n	800c5bc <__sfputs_r+0x22>
 800c5ac:	7821      	ldrb	r1, [r4, #0]
 800c5ae:	003a      	movs	r2, r7
 800c5b0:	0030      	movs	r0, r6
 800c5b2:	f7ff ffdd 	bl	800c570 <__sfputc_r>
 800c5b6:	3401      	adds	r4, #1
 800c5b8:	1c43      	adds	r3, r0, #1
 800c5ba:	d1f3      	bne.n	800c5a4 <__sfputs_r+0xa>
 800c5bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c5c0 <_vfiprintf_r>:
 800c5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5c2:	b0a1      	sub	sp, #132	@ 0x84
 800c5c4:	000f      	movs	r7, r1
 800c5c6:	0015      	movs	r5, r2
 800c5c8:	001e      	movs	r6, r3
 800c5ca:	9003      	str	r0, [sp, #12]
 800c5cc:	2800      	cmp	r0, #0
 800c5ce:	d004      	beq.n	800c5da <_vfiprintf_r+0x1a>
 800c5d0:	6a03      	ldr	r3, [r0, #32]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d101      	bne.n	800c5da <_vfiprintf_r+0x1a>
 800c5d6:	f7fe fec5 	bl	800b364 <__sinit>
 800c5da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c5dc:	07db      	lsls	r3, r3, #31
 800c5de:	d405      	bmi.n	800c5ec <_vfiprintf_r+0x2c>
 800c5e0:	89bb      	ldrh	r3, [r7, #12]
 800c5e2:	059b      	lsls	r3, r3, #22
 800c5e4:	d402      	bmi.n	800c5ec <_vfiprintf_r+0x2c>
 800c5e6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800c5e8:	f7fe ff81 	bl	800b4ee <__retarget_lock_acquire_recursive>
 800c5ec:	89bb      	ldrh	r3, [r7, #12]
 800c5ee:	071b      	lsls	r3, r3, #28
 800c5f0:	d502      	bpl.n	800c5f8 <_vfiprintf_r+0x38>
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d113      	bne.n	800c620 <_vfiprintf_r+0x60>
 800c5f8:	0039      	movs	r1, r7
 800c5fa:	9803      	ldr	r0, [sp, #12]
 800c5fc:	f000 fe10 	bl	800d220 <__swsetup_r>
 800c600:	2800      	cmp	r0, #0
 800c602:	d00d      	beq.n	800c620 <_vfiprintf_r+0x60>
 800c604:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c606:	07db      	lsls	r3, r3, #31
 800c608:	d503      	bpl.n	800c612 <_vfiprintf_r+0x52>
 800c60a:	2001      	movs	r0, #1
 800c60c:	4240      	negs	r0, r0
 800c60e:	b021      	add	sp, #132	@ 0x84
 800c610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c612:	89bb      	ldrh	r3, [r7, #12]
 800c614:	059b      	lsls	r3, r3, #22
 800c616:	d4f8      	bmi.n	800c60a <_vfiprintf_r+0x4a>
 800c618:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800c61a:	f7fe ff69 	bl	800b4f0 <__retarget_lock_release_recursive>
 800c61e:	e7f4      	b.n	800c60a <_vfiprintf_r+0x4a>
 800c620:	2300      	movs	r3, #0
 800c622:	ac08      	add	r4, sp, #32
 800c624:	6163      	str	r3, [r4, #20]
 800c626:	3320      	adds	r3, #32
 800c628:	7663      	strb	r3, [r4, #25]
 800c62a:	3310      	adds	r3, #16
 800c62c:	76a3      	strb	r3, [r4, #26]
 800c62e:	9607      	str	r6, [sp, #28]
 800c630:	002e      	movs	r6, r5
 800c632:	7833      	ldrb	r3, [r6, #0]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d001      	beq.n	800c63c <_vfiprintf_r+0x7c>
 800c638:	2b25      	cmp	r3, #37	@ 0x25
 800c63a:	d148      	bne.n	800c6ce <_vfiprintf_r+0x10e>
 800c63c:	1b73      	subs	r3, r6, r5
 800c63e:	9305      	str	r3, [sp, #20]
 800c640:	42ae      	cmp	r6, r5
 800c642:	d00b      	beq.n	800c65c <_vfiprintf_r+0x9c>
 800c644:	002a      	movs	r2, r5
 800c646:	0039      	movs	r1, r7
 800c648:	9803      	ldr	r0, [sp, #12]
 800c64a:	f7ff ffa6 	bl	800c59a <__sfputs_r>
 800c64e:	3001      	adds	r0, #1
 800c650:	d100      	bne.n	800c654 <_vfiprintf_r+0x94>
 800c652:	e0ae      	b.n	800c7b2 <_vfiprintf_r+0x1f2>
 800c654:	6963      	ldr	r3, [r4, #20]
 800c656:	9a05      	ldr	r2, [sp, #20]
 800c658:	189b      	adds	r3, r3, r2
 800c65a:	6163      	str	r3, [r4, #20]
 800c65c:	7833      	ldrb	r3, [r6, #0]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d100      	bne.n	800c664 <_vfiprintf_r+0xa4>
 800c662:	e0a6      	b.n	800c7b2 <_vfiprintf_r+0x1f2>
 800c664:	2201      	movs	r2, #1
 800c666:	2300      	movs	r3, #0
 800c668:	4252      	negs	r2, r2
 800c66a:	6062      	str	r2, [r4, #4]
 800c66c:	a904      	add	r1, sp, #16
 800c66e:	3254      	adds	r2, #84	@ 0x54
 800c670:	1852      	adds	r2, r2, r1
 800c672:	1c75      	adds	r5, r6, #1
 800c674:	6023      	str	r3, [r4, #0]
 800c676:	60e3      	str	r3, [r4, #12]
 800c678:	60a3      	str	r3, [r4, #8]
 800c67a:	7013      	strb	r3, [r2, #0]
 800c67c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800c67e:	4b59      	ldr	r3, [pc, #356]	@ (800c7e4 <_vfiprintf_r+0x224>)
 800c680:	2205      	movs	r2, #5
 800c682:	0018      	movs	r0, r3
 800c684:	7829      	ldrb	r1, [r5, #0]
 800c686:	9305      	str	r3, [sp, #20]
 800c688:	f7fe ff33 	bl	800b4f2 <memchr>
 800c68c:	1c6e      	adds	r6, r5, #1
 800c68e:	2800      	cmp	r0, #0
 800c690:	d11f      	bne.n	800c6d2 <_vfiprintf_r+0x112>
 800c692:	6822      	ldr	r2, [r4, #0]
 800c694:	06d3      	lsls	r3, r2, #27
 800c696:	d504      	bpl.n	800c6a2 <_vfiprintf_r+0xe2>
 800c698:	2353      	movs	r3, #83	@ 0x53
 800c69a:	a904      	add	r1, sp, #16
 800c69c:	185b      	adds	r3, r3, r1
 800c69e:	2120      	movs	r1, #32
 800c6a0:	7019      	strb	r1, [r3, #0]
 800c6a2:	0713      	lsls	r3, r2, #28
 800c6a4:	d504      	bpl.n	800c6b0 <_vfiprintf_r+0xf0>
 800c6a6:	2353      	movs	r3, #83	@ 0x53
 800c6a8:	a904      	add	r1, sp, #16
 800c6aa:	185b      	adds	r3, r3, r1
 800c6ac:	212b      	movs	r1, #43	@ 0x2b
 800c6ae:	7019      	strb	r1, [r3, #0]
 800c6b0:	782b      	ldrb	r3, [r5, #0]
 800c6b2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6b4:	d016      	beq.n	800c6e4 <_vfiprintf_r+0x124>
 800c6b6:	002e      	movs	r6, r5
 800c6b8:	2100      	movs	r1, #0
 800c6ba:	200a      	movs	r0, #10
 800c6bc:	68e3      	ldr	r3, [r4, #12]
 800c6be:	7832      	ldrb	r2, [r6, #0]
 800c6c0:	1c75      	adds	r5, r6, #1
 800c6c2:	3a30      	subs	r2, #48	@ 0x30
 800c6c4:	2a09      	cmp	r2, #9
 800c6c6:	d950      	bls.n	800c76a <_vfiprintf_r+0x1aa>
 800c6c8:	2900      	cmp	r1, #0
 800c6ca:	d111      	bne.n	800c6f0 <_vfiprintf_r+0x130>
 800c6cc:	e017      	b.n	800c6fe <_vfiprintf_r+0x13e>
 800c6ce:	3601      	adds	r6, #1
 800c6d0:	e7af      	b.n	800c632 <_vfiprintf_r+0x72>
 800c6d2:	9b05      	ldr	r3, [sp, #20]
 800c6d4:	6822      	ldr	r2, [r4, #0]
 800c6d6:	1ac0      	subs	r0, r0, r3
 800c6d8:	2301      	movs	r3, #1
 800c6da:	4083      	lsls	r3, r0
 800c6dc:	4313      	orrs	r3, r2
 800c6de:	0035      	movs	r5, r6
 800c6e0:	6023      	str	r3, [r4, #0]
 800c6e2:	e7cc      	b.n	800c67e <_vfiprintf_r+0xbe>
 800c6e4:	9b07      	ldr	r3, [sp, #28]
 800c6e6:	1d19      	adds	r1, r3, #4
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	9107      	str	r1, [sp, #28]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	db01      	blt.n	800c6f4 <_vfiprintf_r+0x134>
 800c6f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c6f2:	e004      	b.n	800c6fe <_vfiprintf_r+0x13e>
 800c6f4:	425b      	negs	r3, r3
 800c6f6:	60e3      	str	r3, [r4, #12]
 800c6f8:	2302      	movs	r3, #2
 800c6fa:	4313      	orrs	r3, r2
 800c6fc:	6023      	str	r3, [r4, #0]
 800c6fe:	7833      	ldrb	r3, [r6, #0]
 800c700:	2b2e      	cmp	r3, #46	@ 0x2e
 800c702:	d10c      	bne.n	800c71e <_vfiprintf_r+0x15e>
 800c704:	7873      	ldrb	r3, [r6, #1]
 800c706:	2b2a      	cmp	r3, #42	@ 0x2a
 800c708:	d134      	bne.n	800c774 <_vfiprintf_r+0x1b4>
 800c70a:	9b07      	ldr	r3, [sp, #28]
 800c70c:	3602      	adds	r6, #2
 800c70e:	1d1a      	adds	r2, r3, #4
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	9207      	str	r2, [sp, #28]
 800c714:	2b00      	cmp	r3, #0
 800c716:	da01      	bge.n	800c71c <_vfiprintf_r+0x15c>
 800c718:	2301      	movs	r3, #1
 800c71a:	425b      	negs	r3, r3
 800c71c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c71e:	4d32      	ldr	r5, [pc, #200]	@ (800c7e8 <_vfiprintf_r+0x228>)
 800c720:	2203      	movs	r2, #3
 800c722:	0028      	movs	r0, r5
 800c724:	7831      	ldrb	r1, [r6, #0]
 800c726:	f7fe fee4 	bl	800b4f2 <memchr>
 800c72a:	2800      	cmp	r0, #0
 800c72c:	d006      	beq.n	800c73c <_vfiprintf_r+0x17c>
 800c72e:	2340      	movs	r3, #64	@ 0x40
 800c730:	1b40      	subs	r0, r0, r5
 800c732:	4083      	lsls	r3, r0
 800c734:	6822      	ldr	r2, [r4, #0]
 800c736:	3601      	adds	r6, #1
 800c738:	4313      	orrs	r3, r2
 800c73a:	6023      	str	r3, [r4, #0]
 800c73c:	7831      	ldrb	r1, [r6, #0]
 800c73e:	2206      	movs	r2, #6
 800c740:	482a      	ldr	r0, [pc, #168]	@ (800c7ec <_vfiprintf_r+0x22c>)
 800c742:	1c75      	adds	r5, r6, #1
 800c744:	7621      	strb	r1, [r4, #24]
 800c746:	f7fe fed4 	bl	800b4f2 <memchr>
 800c74a:	2800      	cmp	r0, #0
 800c74c:	d040      	beq.n	800c7d0 <_vfiprintf_r+0x210>
 800c74e:	4b28      	ldr	r3, [pc, #160]	@ (800c7f0 <_vfiprintf_r+0x230>)
 800c750:	2b00      	cmp	r3, #0
 800c752:	d122      	bne.n	800c79a <_vfiprintf_r+0x1da>
 800c754:	2207      	movs	r2, #7
 800c756:	9b07      	ldr	r3, [sp, #28]
 800c758:	3307      	adds	r3, #7
 800c75a:	4393      	bics	r3, r2
 800c75c:	3308      	adds	r3, #8
 800c75e:	9307      	str	r3, [sp, #28]
 800c760:	6963      	ldr	r3, [r4, #20]
 800c762:	9a04      	ldr	r2, [sp, #16]
 800c764:	189b      	adds	r3, r3, r2
 800c766:	6163      	str	r3, [r4, #20]
 800c768:	e762      	b.n	800c630 <_vfiprintf_r+0x70>
 800c76a:	4343      	muls	r3, r0
 800c76c:	002e      	movs	r6, r5
 800c76e:	2101      	movs	r1, #1
 800c770:	189b      	adds	r3, r3, r2
 800c772:	e7a4      	b.n	800c6be <_vfiprintf_r+0xfe>
 800c774:	2300      	movs	r3, #0
 800c776:	200a      	movs	r0, #10
 800c778:	0019      	movs	r1, r3
 800c77a:	3601      	adds	r6, #1
 800c77c:	6063      	str	r3, [r4, #4]
 800c77e:	7832      	ldrb	r2, [r6, #0]
 800c780:	1c75      	adds	r5, r6, #1
 800c782:	3a30      	subs	r2, #48	@ 0x30
 800c784:	2a09      	cmp	r2, #9
 800c786:	d903      	bls.n	800c790 <_vfiprintf_r+0x1d0>
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d0c8      	beq.n	800c71e <_vfiprintf_r+0x15e>
 800c78c:	9109      	str	r1, [sp, #36]	@ 0x24
 800c78e:	e7c6      	b.n	800c71e <_vfiprintf_r+0x15e>
 800c790:	4341      	muls	r1, r0
 800c792:	002e      	movs	r6, r5
 800c794:	2301      	movs	r3, #1
 800c796:	1889      	adds	r1, r1, r2
 800c798:	e7f1      	b.n	800c77e <_vfiprintf_r+0x1be>
 800c79a:	aa07      	add	r2, sp, #28
 800c79c:	9200      	str	r2, [sp, #0]
 800c79e:	0021      	movs	r1, r4
 800c7a0:	003a      	movs	r2, r7
 800c7a2:	4b14      	ldr	r3, [pc, #80]	@ (800c7f4 <_vfiprintf_r+0x234>)
 800c7a4:	9803      	ldr	r0, [sp, #12]
 800c7a6:	f7fe f8cb 	bl	800a940 <_printf_float>
 800c7aa:	9004      	str	r0, [sp, #16]
 800c7ac:	9b04      	ldr	r3, [sp, #16]
 800c7ae:	3301      	adds	r3, #1
 800c7b0:	d1d6      	bne.n	800c760 <_vfiprintf_r+0x1a0>
 800c7b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c7b4:	07db      	lsls	r3, r3, #31
 800c7b6:	d405      	bmi.n	800c7c4 <_vfiprintf_r+0x204>
 800c7b8:	89bb      	ldrh	r3, [r7, #12]
 800c7ba:	059b      	lsls	r3, r3, #22
 800c7bc:	d402      	bmi.n	800c7c4 <_vfiprintf_r+0x204>
 800c7be:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800c7c0:	f7fe fe96 	bl	800b4f0 <__retarget_lock_release_recursive>
 800c7c4:	89bb      	ldrh	r3, [r7, #12]
 800c7c6:	065b      	lsls	r3, r3, #25
 800c7c8:	d500      	bpl.n	800c7cc <_vfiprintf_r+0x20c>
 800c7ca:	e71e      	b.n	800c60a <_vfiprintf_r+0x4a>
 800c7cc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800c7ce:	e71e      	b.n	800c60e <_vfiprintf_r+0x4e>
 800c7d0:	aa07      	add	r2, sp, #28
 800c7d2:	9200      	str	r2, [sp, #0]
 800c7d4:	0021      	movs	r1, r4
 800c7d6:	003a      	movs	r2, r7
 800c7d8:	4b06      	ldr	r3, [pc, #24]	@ (800c7f4 <_vfiprintf_r+0x234>)
 800c7da:	9803      	ldr	r0, [sp, #12]
 800c7dc:	f7fe fc14 	bl	800b008 <_printf_i>
 800c7e0:	e7e3      	b.n	800c7aa <_vfiprintf_r+0x1ea>
 800c7e2:	46c0      	nop			@ (mov r8, r8)
 800c7e4:	0800dcdd 	.word	0x0800dcdd
 800c7e8:	0800dce3 	.word	0x0800dce3
 800c7ec:	0800dce7 	.word	0x0800dce7
 800c7f0:	0800a941 	.word	0x0800a941
 800c7f4:	0800c59b 	.word	0x0800c59b

0800c7f8 <__sflush_r>:
 800c7f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c7fa:	220c      	movs	r2, #12
 800c7fc:	5e8b      	ldrsh	r3, [r1, r2]
 800c7fe:	0005      	movs	r5, r0
 800c800:	000c      	movs	r4, r1
 800c802:	071a      	lsls	r2, r3, #28
 800c804:	d456      	bmi.n	800c8b4 <__sflush_r+0xbc>
 800c806:	684a      	ldr	r2, [r1, #4]
 800c808:	2a00      	cmp	r2, #0
 800c80a:	dc02      	bgt.n	800c812 <__sflush_r+0x1a>
 800c80c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800c80e:	2a00      	cmp	r2, #0
 800c810:	dd4e      	ble.n	800c8b0 <__sflush_r+0xb8>
 800c812:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800c814:	2f00      	cmp	r7, #0
 800c816:	d04b      	beq.n	800c8b0 <__sflush_r+0xb8>
 800c818:	2200      	movs	r2, #0
 800c81a:	2080      	movs	r0, #128	@ 0x80
 800c81c:	682e      	ldr	r6, [r5, #0]
 800c81e:	602a      	str	r2, [r5, #0]
 800c820:	001a      	movs	r2, r3
 800c822:	0140      	lsls	r0, r0, #5
 800c824:	6a21      	ldr	r1, [r4, #32]
 800c826:	4002      	ands	r2, r0
 800c828:	4203      	tst	r3, r0
 800c82a:	d033      	beq.n	800c894 <__sflush_r+0x9c>
 800c82c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c82e:	89a3      	ldrh	r3, [r4, #12]
 800c830:	075b      	lsls	r3, r3, #29
 800c832:	d506      	bpl.n	800c842 <__sflush_r+0x4a>
 800c834:	6863      	ldr	r3, [r4, #4]
 800c836:	1ad2      	subs	r2, r2, r3
 800c838:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d001      	beq.n	800c842 <__sflush_r+0x4a>
 800c83e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c840:	1ad2      	subs	r2, r2, r3
 800c842:	2300      	movs	r3, #0
 800c844:	0028      	movs	r0, r5
 800c846:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800c848:	6a21      	ldr	r1, [r4, #32]
 800c84a:	47b8      	blx	r7
 800c84c:	89a2      	ldrh	r2, [r4, #12]
 800c84e:	1c43      	adds	r3, r0, #1
 800c850:	d106      	bne.n	800c860 <__sflush_r+0x68>
 800c852:	6829      	ldr	r1, [r5, #0]
 800c854:	291d      	cmp	r1, #29
 800c856:	d846      	bhi.n	800c8e6 <__sflush_r+0xee>
 800c858:	4b29      	ldr	r3, [pc, #164]	@ (800c900 <__sflush_r+0x108>)
 800c85a:	410b      	asrs	r3, r1
 800c85c:	07db      	lsls	r3, r3, #31
 800c85e:	d442      	bmi.n	800c8e6 <__sflush_r+0xee>
 800c860:	2300      	movs	r3, #0
 800c862:	6063      	str	r3, [r4, #4]
 800c864:	6923      	ldr	r3, [r4, #16]
 800c866:	6023      	str	r3, [r4, #0]
 800c868:	04d2      	lsls	r2, r2, #19
 800c86a:	d505      	bpl.n	800c878 <__sflush_r+0x80>
 800c86c:	1c43      	adds	r3, r0, #1
 800c86e:	d102      	bne.n	800c876 <__sflush_r+0x7e>
 800c870:	682b      	ldr	r3, [r5, #0]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d100      	bne.n	800c878 <__sflush_r+0x80>
 800c876:	6560      	str	r0, [r4, #84]	@ 0x54
 800c878:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c87a:	602e      	str	r6, [r5, #0]
 800c87c:	2900      	cmp	r1, #0
 800c87e:	d017      	beq.n	800c8b0 <__sflush_r+0xb8>
 800c880:	0023      	movs	r3, r4
 800c882:	3344      	adds	r3, #68	@ 0x44
 800c884:	4299      	cmp	r1, r3
 800c886:	d002      	beq.n	800c88e <__sflush_r+0x96>
 800c888:	0028      	movs	r0, r5
 800c88a:	f7ff fcc9 	bl	800c220 <_free_r>
 800c88e:	2300      	movs	r3, #0
 800c890:	6363      	str	r3, [r4, #52]	@ 0x34
 800c892:	e00d      	b.n	800c8b0 <__sflush_r+0xb8>
 800c894:	2301      	movs	r3, #1
 800c896:	0028      	movs	r0, r5
 800c898:	47b8      	blx	r7
 800c89a:	0002      	movs	r2, r0
 800c89c:	1c43      	adds	r3, r0, #1
 800c89e:	d1c6      	bne.n	800c82e <__sflush_r+0x36>
 800c8a0:	682b      	ldr	r3, [r5, #0]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d0c3      	beq.n	800c82e <__sflush_r+0x36>
 800c8a6:	2b1d      	cmp	r3, #29
 800c8a8:	d001      	beq.n	800c8ae <__sflush_r+0xb6>
 800c8aa:	2b16      	cmp	r3, #22
 800c8ac:	d11a      	bne.n	800c8e4 <__sflush_r+0xec>
 800c8ae:	602e      	str	r6, [r5, #0]
 800c8b0:	2000      	movs	r0, #0
 800c8b2:	e01e      	b.n	800c8f2 <__sflush_r+0xfa>
 800c8b4:	690e      	ldr	r6, [r1, #16]
 800c8b6:	2e00      	cmp	r6, #0
 800c8b8:	d0fa      	beq.n	800c8b0 <__sflush_r+0xb8>
 800c8ba:	680f      	ldr	r7, [r1, #0]
 800c8bc:	600e      	str	r6, [r1, #0]
 800c8be:	1bba      	subs	r2, r7, r6
 800c8c0:	9201      	str	r2, [sp, #4]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	079b      	lsls	r3, r3, #30
 800c8c6:	d100      	bne.n	800c8ca <__sflush_r+0xd2>
 800c8c8:	694a      	ldr	r2, [r1, #20]
 800c8ca:	60a2      	str	r2, [r4, #8]
 800c8cc:	9b01      	ldr	r3, [sp, #4]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	ddee      	ble.n	800c8b0 <__sflush_r+0xb8>
 800c8d2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c8d4:	0032      	movs	r2, r6
 800c8d6:	001f      	movs	r7, r3
 800c8d8:	0028      	movs	r0, r5
 800c8da:	9b01      	ldr	r3, [sp, #4]
 800c8dc:	6a21      	ldr	r1, [r4, #32]
 800c8de:	47b8      	blx	r7
 800c8e0:	2800      	cmp	r0, #0
 800c8e2:	dc07      	bgt.n	800c8f4 <__sflush_r+0xfc>
 800c8e4:	89a2      	ldrh	r2, [r4, #12]
 800c8e6:	2340      	movs	r3, #64	@ 0x40
 800c8e8:	2001      	movs	r0, #1
 800c8ea:	4313      	orrs	r3, r2
 800c8ec:	b21b      	sxth	r3, r3
 800c8ee:	81a3      	strh	r3, [r4, #12]
 800c8f0:	4240      	negs	r0, r0
 800c8f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c8f4:	9b01      	ldr	r3, [sp, #4]
 800c8f6:	1836      	adds	r6, r6, r0
 800c8f8:	1a1b      	subs	r3, r3, r0
 800c8fa:	9301      	str	r3, [sp, #4]
 800c8fc:	e7e6      	b.n	800c8cc <__sflush_r+0xd4>
 800c8fe:	46c0      	nop			@ (mov r8, r8)
 800c900:	dfbffffe 	.word	0xdfbffffe

0800c904 <_fflush_r>:
 800c904:	690b      	ldr	r3, [r1, #16]
 800c906:	b570      	push	{r4, r5, r6, lr}
 800c908:	0005      	movs	r5, r0
 800c90a:	000c      	movs	r4, r1
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d102      	bne.n	800c916 <_fflush_r+0x12>
 800c910:	2500      	movs	r5, #0
 800c912:	0028      	movs	r0, r5
 800c914:	bd70      	pop	{r4, r5, r6, pc}
 800c916:	2800      	cmp	r0, #0
 800c918:	d004      	beq.n	800c924 <_fflush_r+0x20>
 800c91a:	6a03      	ldr	r3, [r0, #32]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d101      	bne.n	800c924 <_fflush_r+0x20>
 800c920:	f7fe fd20 	bl	800b364 <__sinit>
 800c924:	220c      	movs	r2, #12
 800c926:	5ea3      	ldrsh	r3, [r4, r2]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d0f1      	beq.n	800c910 <_fflush_r+0xc>
 800c92c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c92e:	07d2      	lsls	r2, r2, #31
 800c930:	d404      	bmi.n	800c93c <_fflush_r+0x38>
 800c932:	059b      	lsls	r3, r3, #22
 800c934:	d402      	bmi.n	800c93c <_fflush_r+0x38>
 800c936:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c938:	f7fe fdd9 	bl	800b4ee <__retarget_lock_acquire_recursive>
 800c93c:	0028      	movs	r0, r5
 800c93e:	0021      	movs	r1, r4
 800c940:	f7ff ff5a 	bl	800c7f8 <__sflush_r>
 800c944:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c946:	0005      	movs	r5, r0
 800c948:	07db      	lsls	r3, r3, #31
 800c94a:	d4e2      	bmi.n	800c912 <_fflush_r+0xe>
 800c94c:	89a3      	ldrh	r3, [r4, #12]
 800c94e:	059b      	lsls	r3, r3, #22
 800c950:	d4df      	bmi.n	800c912 <_fflush_r+0xe>
 800c952:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c954:	f7fe fdcc 	bl	800b4f0 <__retarget_lock_release_recursive>
 800c958:	e7db      	b.n	800c912 <_fflush_r+0xe>
	...

0800c95c <_Balloc>:
 800c95c:	b570      	push	{r4, r5, r6, lr}
 800c95e:	69c5      	ldr	r5, [r0, #28]
 800c960:	0006      	movs	r6, r0
 800c962:	000c      	movs	r4, r1
 800c964:	2d00      	cmp	r5, #0
 800c966:	d10e      	bne.n	800c986 <_Balloc+0x2a>
 800c968:	2010      	movs	r0, #16
 800c96a:	f7fe fa27 	bl	800adbc <malloc>
 800c96e:	1e02      	subs	r2, r0, #0
 800c970:	61f0      	str	r0, [r6, #28]
 800c972:	d104      	bne.n	800c97e <_Balloc+0x22>
 800c974:	216b      	movs	r1, #107	@ 0x6b
 800c976:	4b19      	ldr	r3, [pc, #100]	@ (800c9dc <_Balloc+0x80>)
 800c978:	4819      	ldr	r0, [pc, #100]	@ (800c9e0 <_Balloc+0x84>)
 800c97a:	f000 fd9f 	bl	800d4bc <__assert_func>
 800c97e:	6045      	str	r5, [r0, #4]
 800c980:	6085      	str	r5, [r0, #8]
 800c982:	6005      	str	r5, [r0, #0]
 800c984:	60c5      	str	r5, [r0, #12]
 800c986:	69f5      	ldr	r5, [r6, #28]
 800c988:	68eb      	ldr	r3, [r5, #12]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d013      	beq.n	800c9b6 <_Balloc+0x5a>
 800c98e:	69f3      	ldr	r3, [r6, #28]
 800c990:	00a2      	lsls	r2, r4, #2
 800c992:	68db      	ldr	r3, [r3, #12]
 800c994:	189b      	adds	r3, r3, r2
 800c996:	6818      	ldr	r0, [r3, #0]
 800c998:	2800      	cmp	r0, #0
 800c99a:	d118      	bne.n	800c9ce <_Balloc+0x72>
 800c99c:	2101      	movs	r1, #1
 800c99e:	000d      	movs	r5, r1
 800c9a0:	40a5      	lsls	r5, r4
 800c9a2:	1d6a      	adds	r2, r5, #5
 800c9a4:	0030      	movs	r0, r6
 800c9a6:	0092      	lsls	r2, r2, #2
 800c9a8:	f000 fda6 	bl	800d4f8 <_calloc_r>
 800c9ac:	2800      	cmp	r0, #0
 800c9ae:	d00c      	beq.n	800c9ca <_Balloc+0x6e>
 800c9b0:	6044      	str	r4, [r0, #4]
 800c9b2:	6085      	str	r5, [r0, #8]
 800c9b4:	e00d      	b.n	800c9d2 <_Balloc+0x76>
 800c9b6:	2221      	movs	r2, #33	@ 0x21
 800c9b8:	2104      	movs	r1, #4
 800c9ba:	0030      	movs	r0, r6
 800c9bc:	f000 fd9c 	bl	800d4f8 <_calloc_r>
 800c9c0:	69f3      	ldr	r3, [r6, #28]
 800c9c2:	60e8      	str	r0, [r5, #12]
 800c9c4:	68db      	ldr	r3, [r3, #12]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d1e1      	bne.n	800c98e <_Balloc+0x32>
 800c9ca:	2000      	movs	r0, #0
 800c9cc:	bd70      	pop	{r4, r5, r6, pc}
 800c9ce:	6802      	ldr	r2, [r0, #0]
 800c9d0:	601a      	str	r2, [r3, #0]
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	6103      	str	r3, [r0, #16]
 800c9d6:	60c3      	str	r3, [r0, #12]
 800c9d8:	e7f8      	b.n	800c9cc <_Balloc+0x70>
 800c9da:	46c0      	nop			@ (mov r8, r8)
 800c9dc:	0800dc5d 	.word	0x0800dc5d
 800c9e0:	0800dcee 	.word	0x0800dcee

0800c9e4 <_Bfree>:
 800c9e4:	b570      	push	{r4, r5, r6, lr}
 800c9e6:	69c6      	ldr	r6, [r0, #28]
 800c9e8:	0005      	movs	r5, r0
 800c9ea:	000c      	movs	r4, r1
 800c9ec:	2e00      	cmp	r6, #0
 800c9ee:	d10e      	bne.n	800ca0e <_Bfree+0x2a>
 800c9f0:	2010      	movs	r0, #16
 800c9f2:	f7fe f9e3 	bl	800adbc <malloc>
 800c9f6:	1e02      	subs	r2, r0, #0
 800c9f8:	61e8      	str	r0, [r5, #28]
 800c9fa:	d104      	bne.n	800ca06 <_Bfree+0x22>
 800c9fc:	218f      	movs	r1, #143	@ 0x8f
 800c9fe:	4b09      	ldr	r3, [pc, #36]	@ (800ca24 <_Bfree+0x40>)
 800ca00:	4809      	ldr	r0, [pc, #36]	@ (800ca28 <_Bfree+0x44>)
 800ca02:	f000 fd5b 	bl	800d4bc <__assert_func>
 800ca06:	6046      	str	r6, [r0, #4]
 800ca08:	6086      	str	r6, [r0, #8]
 800ca0a:	6006      	str	r6, [r0, #0]
 800ca0c:	60c6      	str	r6, [r0, #12]
 800ca0e:	2c00      	cmp	r4, #0
 800ca10:	d007      	beq.n	800ca22 <_Bfree+0x3e>
 800ca12:	69eb      	ldr	r3, [r5, #28]
 800ca14:	6862      	ldr	r2, [r4, #4]
 800ca16:	68db      	ldr	r3, [r3, #12]
 800ca18:	0092      	lsls	r2, r2, #2
 800ca1a:	189b      	adds	r3, r3, r2
 800ca1c:	681a      	ldr	r2, [r3, #0]
 800ca1e:	6022      	str	r2, [r4, #0]
 800ca20:	601c      	str	r4, [r3, #0]
 800ca22:	bd70      	pop	{r4, r5, r6, pc}
 800ca24:	0800dc5d 	.word	0x0800dc5d
 800ca28:	0800dcee 	.word	0x0800dcee

0800ca2c <__multadd>:
 800ca2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca2e:	000f      	movs	r7, r1
 800ca30:	9001      	str	r0, [sp, #4]
 800ca32:	000c      	movs	r4, r1
 800ca34:	001e      	movs	r6, r3
 800ca36:	2000      	movs	r0, #0
 800ca38:	690d      	ldr	r5, [r1, #16]
 800ca3a:	3714      	adds	r7, #20
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	3001      	adds	r0, #1
 800ca40:	b299      	uxth	r1, r3
 800ca42:	4351      	muls	r1, r2
 800ca44:	0c1b      	lsrs	r3, r3, #16
 800ca46:	4353      	muls	r3, r2
 800ca48:	1989      	adds	r1, r1, r6
 800ca4a:	0c0e      	lsrs	r6, r1, #16
 800ca4c:	199b      	adds	r3, r3, r6
 800ca4e:	0c1e      	lsrs	r6, r3, #16
 800ca50:	b289      	uxth	r1, r1
 800ca52:	041b      	lsls	r3, r3, #16
 800ca54:	185b      	adds	r3, r3, r1
 800ca56:	c708      	stmia	r7!, {r3}
 800ca58:	4285      	cmp	r5, r0
 800ca5a:	dcef      	bgt.n	800ca3c <__multadd+0x10>
 800ca5c:	2e00      	cmp	r6, #0
 800ca5e:	d022      	beq.n	800caa6 <__multadd+0x7a>
 800ca60:	68a3      	ldr	r3, [r4, #8]
 800ca62:	42ab      	cmp	r3, r5
 800ca64:	dc19      	bgt.n	800ca9a <__multadd+0x6e>
 800ca66:	6861      	ldr	r1, [r4, #4]
 800ca68:	9801      	ldr	r0, [sp, #4]
 800ca6a:	3101      	adds	r1, #1
 800ca6c:	f7ff ff76 	bl	800c95c <_Balloc>
 800ca70:	1e07      	subs	r7, r0, #0
 800ca72:	d105      	bne.n	800ca80 <__multadd+0x54>
 800ca74:	003a      	movs	r2, r7
 800ca76:	21ba      	movs	r1, #186	@ 0xba
 800ca78:	4b0c      	ldr	r3, [pc, #48]	@ (800caac <__multadd+0x80>)
 800ca7a:	480d      	ldr	r0, [pc, #52]	@ (800cab0 <__multadd+0x84>)
 800ca7c:	f000 fd1e 	bl	800d4bc <__assert_func>
 800ca80:	0021      	movs	r1, r4
 800ca82:	6922      	ldr	r2, [r4, #16]
 800ca84:	310c      	adds	r1, #12
 800ca86:	3202      	adds	r2, #2
 800ca88:	0092      	lsls	r2, r2, #2
 800ca8a:	300c      	adds	r0, #12
 800ca8c:	f7fe fd3c 	bl	800b508 <memcpy>
 800ca90:	0021      	movs	r1, r4
 800ca92:	9801      	ldr	r0, [sp, #4]
 800ca94:	f7ff ffa6 	bl	800c9e4 <_Bfree>
 800ca98:	003c      	movs	r4, r7
 800ca9a:	1d2b      	adds	r3, r5, #4
 800ca9c:	009b      	lsls	r3, r3, #2
 800ca9e:	18e3      	adds	r3, r4, r3
 800caa0:	3501      	adds	r5, #1
 800caa2:	605e      	str	r6, [r3, #4]
 800caa4:	6125      	str	r5, [r4, #16]
 800caa6:	0020      	movs	r0, r4
 800caa8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800caaa:	46c0      	nop			@ (mov r8, r8)
 800caac:	0800dccc 	.word	0x0800dccc
 800cab0:	0800dcee 	.word	0x0800dcee

0800cab4 <__hi0bits>:
 800cab4:	2280      	movs	r2, #128	@ 0x80
 800cab6:	0003      	movs	r3, r0
 800cab8:	0252      	lsls	r2, r2, #9
 800caba:	2000      	movs	r0, #0
 800cabc:	4293      	cmp	r3, r2
 800cabe:	d201      	bcs.n	800cac4 <__hi0bits+0x10>
 800cac0:	041b      	lsls	r3, r3, #16
 800cac2:	3010      	adds	r0, #16
 800cac4:	2280      	movs	r2, #128	@ 0x80
 800cac6:	0452      	lsls	r2, r2, #17
 800cac8:	4293      	cmp	r3, r2
 800caca:	d201      	bcs.n	800cad0 <__hi0bits+0x1c>
 800cacc:	3008      	adds	r0, #8
 800cace:	021b      	lsls	r3, r3, #8
 800cad0:	2280      	movs	r2, #128	@ 0x80
 800cad2:	0552      	lsls	r2, r2, #21
 800cad4:	4293      	cmp	r3, r2
 800cad6:	d201      	bcs.n	800cadc <__hi0bits+0x28>
 800cad8:	3004      	adds	r0, #4
 800cada:	011b      	lsls	r3, r3, #4
 800cadc:	2280      	movs	r2, #128	@ 0x80
 800cade:	05d2      	lsls	r2, r2, #23
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d201      	bcs.n	800cae8 <__hi0bits+0x34>
 800cae4:	3002      	adds	r0, #2
 800cae6:	009b      	lsls	r3, r3, #2
 800cae8:	2b00      	cmp	r3, #0
 800caea:	db03      	blt.n	800caf4 <__hi0bits+0x40>
 800caec:	3001      	adds	r0, #1
 800caee:	4213      	tst	r3, r2
 800caf0:	d100      	bne.n	800caf4 <__hi0bits+0x40>
 800caf2:	2020      	movs	r0, #32
 800caf4:	4770      	bx	lr

0800caf6 <__lo0bits>:
 800caf6:	6803      	ldr	r3, [r0, #0]
 800caf8:	0001      	movs	r1, r0
 800cafa:	2207      	movs	r2, #7
 800cafc:	0018      	movs	r0, r3
 800cafe:	4010      	ands	r0, r2
 800cb00:	4213      	tst	r3, r2
 800cb02:	d00d      	beq.n	800cb20 <__lo0bits+0x2a>
 800cb04:	3a06      	subs	r2, #6
 800cb06:	2000      	movs	r0, #0
 800cb08:	4213      	tst	r3, r2
 800cb0a:	d105      	bne.n	800cb18 <__lo0bits+0x22>
 800cb0c:	3002      	adds	r0, #2
 800cb0e:	4203      	tst	r3, r0
 800cb10:	d003      	beq.n	800cb1a <__lo0bits+0x24>
 800cb12:	40d3      	lsrs	r3, r2
 800cb14:	0010      	movs	r0, r2
 800cb16:	600b      	str	r3, [r1, #0]
 800cb18:	4770      	bx	lr
 800cb1a:	089b      	lsrs	r3, r3, #2
 800cb1c:	600b      	str	r3, [r1, #0]
 800cb1e:	e7fb      	b.n	800cb18 <__lo0bits+0x22>
 800cb20:	b29a      	uxth	r2, r3
 800cb22:	2a00      	cmp	r2, #0
 800cb24:	d101      	bne.n	800cb2a <__lo0bits+0x34>
 800cb26:	2010      	movs	r0, #16
 800cb28:	0c1b      	lsrs	r3, r3, #16
 800cb2a:	b2da      	uxtb	r2, r3
 800cb2c:	2a00      	cmp	r2, #0
 800cb2e:	d101      	bne.n	800cb34 <__lo0bits+0x3e>
 800cb30:	3008      	adds	r0, #8
 800cb32:	0a1b      	lsrs	r3, r3, #8
 800cb34:	071a      	lsls	r2, r3, #28
 800cb36:	d101      	bne.n	800cb3c <__lo0bits+0x46>
 800cb38:	3004      	adds	r0, #4
 800cb3a:	091b      	lsrs	r3, r3, #4
 800cb3c:	079a      	lsls	r2, r3, #30
 800cb3e:	d101      	bne.n	800cb44 <__lo0bits+0x4e>
 800cb40:	3002      	adds	r0, #2
 800cb42:	089b      	lsrs	r3, r3, #2
 800cb44:	07da      	lsls	r2, r3, #31
 800cb46:	d4e9      	bmi.n	800cb1c <__lo0bits+0x26>
 800cb48:	3001      	adds	r0, #1
 800cb4a:	085b      	lsrs	r3, r3, #1
 800cb4c:	d1e6      	bne.n	800cb1c <__lo0bits+0x26>
 800cb4e:	2020      	movs	r0, #32
 800cb50:	e7e2      	b.n	800cb18 <__lo0bits+0x22>
	...

0800cb54 <__i2b>:
 800cb54:	b510      	push	{r4, lr}
 800cb56:	000c      	movs	r4, r1
 800cb58:	2101      	movs	r1, #1
 800cb5a:	f7ff feff 	bl	800c95c <_Balloc>
 800cb5e:	2800      	cmp	r0, #0
 800cb60:	d107      	bne.n	800cb72 <__i2b+0x1e>
 800cb62:	2146      	movs	r1, #70	@ 0x46
 800cb64:	4c05      	ldr	r4, [pc, #20]	@ (800cb7c <__i2b+0x28>)
 800cb66:	0002      	movs	r2, r0
 800cb68:	4b05      	ldr	r3, [pc, #20]	@ (800cb80 <__i2b+0x2c>)
 800cb6a:	0020      	movs	r0, r4
 800cb6c:	31ff      	adds	r1, #255	@ 0xff
 800cb6e:	f000 fca5 	bl	800d4bc <__assert_func>
 800cb72:	2301      	movs	r3, #1
 800cb74:	6144      	str	r4, [r0, #20]
 800cb76:	6103      	str	r3, [r0, #16]
 800cb78:	bd10      	pop	{r4, pc}
 800cb7a:	46c0      	nop			@ (mov r8, r8)
 800cb7c:	0800dcee 	.word	0x0800dcee
 800cb80:	0800dccc 	.word	0x0800dccc

0800cb84 <__multiply>:
 800cb84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb86:	0014      	movs	r4, r2
 800cb88:	690a      	ldr	r2, [r1, #16]
 800cb8a:	6923      	ldr	r3, [r4, #16]
 800cb8c:	000d      	movs	r5, r1
 800cb8e:	b08b      	sub	sp, #44	@ 0x2c
 800cb90:	429a      	cmp	r2, r3
 800cb92:	db02      	blt.n	800cb9a <__multiply+0x16>
 800cb94:	0023      	movs	r3, r4
 800cb96:	000c      	movs	r4, r1
 800cb98:	001d      	movs	r5, r3
 800cb9a:	6927      	ldr	r7, [r4, #16]
 800cb9c:	692e      	ldr	r6, [r5, #16]
 800cb9e:	6861      	ldr	r1, [r4, #4]
 800cba0:	19bb      	adds	r3, r7, r6
 800cba2:	9303      	str	r3, [sp, #12]
 800cba4:	68a3      	ldr	r3, [r4, #8]
 800cba6:	19ba      	adds	r2, r7, r6
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	da00      	bge.n	800cbae <__multiply+0x2a>
 800cbac:	3101      	adds	r1, #1
 800cbae:	f7ff fed5 	bl	800c95c <_Balloc>
 800cbb2:	9002      	str	r0, [sp, #8]
 800cbb4:	2800      	cmp	r0, #0
 800cbb6:	d106      	bne.n	800cbc6 <__multiply+0x42>
 800cbb8:	21b1      	movs	r1, #177	@ 0xb1
 800cbba:	4b49      	ldr	r3, [pc, #292]	@ (800cce0 <__multiply+0x15c>)
 800cbbc:	4849      	ldr	r0, [pc, #292]	@ (800cce4 <__multiply+0x160>)
 800cbbe:	9a02      	ldr	r2, [sp, #8]
 800cbc0:	0049      	lsls	r1, r1, #1
 800cbc2:	f000 fc7b 	bl	800d4bc <__assert_func>
 800cbc6:	9b02      	ldr	r3, [sp, #8]
 800cbc8:	2200      	movs	r2, #0
 800cbca:	3314      	adds	r3, #20
 800cbcc:	469c      	mov	ip, r3
 800cbce:	19bb      	adds	r3, r7, r6
 800cbd0:	009b      	lsls	r3, r3, #2
 800cbd2:	4463      	add	r3, ip
 800cbd4:	9304      	str	r3, [sp, #16]
 800cbd6:	4663      	mov	r3, ip
 800cbd8:	9904      	ldr	r1, [sp, #16]
 800cbda:	428b      	cmp	r3, r1
 800cbdc:	d32a      	bcc.n	800cc34 <__multiply+0xb0>
 800cbde:	0023      	movs	r3, r4
 800cbe0:	00bf      	lsls	r7, r7, #2
 800cbe2:	3314      	adds	r3, #20
 800cbe4:	3514      	adds	r5, #20
 800cbe6:	9308      	str	r3, [sp, #32]
 800cbe8:	00b6      	lsls	r6, r6, #2
 800cbea:	19db      	adds	r3, r3, r7
 800cbec:	9305      	str	r3, [sp, #20]
 800cbee:	19ab      	adds	r3, r5, r6
 800cbf0:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbf2:	2304      	movs	r3, #4
 800cbf4:	9306      	str	r3, [sp, #24]
 800cbf6:	0023      	movs	r3, r4
 800cbf8:	9a05      	ldr	r2, [sp, #20]
 800cbfa:	3315      	adds	r3, #21
 800cbfc:	9501      	str	r5, [sp, #4]
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d305      	bcc.n	800cc0e <__multiply+0x8a>
 800cc02:	1b13      	subs	r3, r2, r4
 800cc04:	3b15      	subs	r3, #21
 800cc06:	089b      	lsrs	r3, r3, #2
 800cc08:	3301      	adds	r3, #1
 800cc0a:	009b      	lsls	r3, r3, #2
 800cc0c:	9306      	str	r3, [sp, #24]
 800cc0e:	9b01      	ldr	r3, [sp, #4]
 800cc10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d310      	bcc.n	800cc38 <__multiply+0xb4>
 800cc16:	9b03      	ldr	r3, [sp, #12]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	dd05      	ble.n	800cc28 <__multiply+0xa4>
 800cc1c:	9b04      	ldr	r3, [sp, #16]
 800cc1e:	3b04      	subs	r3, #4
 800cc20:	9304      	str	r3, [sp, #16]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d056      	beq.n	800ccd6 <__multiply+0x152>
 800cc28:	9b02      	ldr	r3, [sp, #8]
 800cc2a:	9a03      	ldr	r2, [sp, #12]
 800cc2c:	0018      	movs	r0, r3
 800cc2e:	611a      	str	r2, [r3, #16]
 800cc30:	b00b      	add	sp, #44	@ 0x2c
 800cc32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc34:	c304      	stmia	r3!, {r2}
 800cc36:	e7cf      	b.n	800cbd8 <__multiply+0x54>
 800cc38:	9b01      	ldr	r3, [sp, #4]
 800cc3a:	6818      	ldr	r0, [r3, #0]
 800cc3c:	b280      	uxth	r0, r0
 800cc3e:	2800      	cmp	r0, #0
 800cc40:	d01e      	beq.n	800cc80 <__multiply+0xfc>
 800cc42:	4667      	mov	r7, ip
 800cc44:	2500      	movs	r5, #0
 800cc46:	9e08      	ldr	r6, [sp, #32]
 800cc48:	ce02      	ldmia	r6!, {r1}
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	9307      	str	r3, [sp, #28]
 800cc4e:	b28b      	uxth	r3, r1
 800cc50:	4343      	muls	r3, r0
 800cc52:	001a      	movs	r2, r3
 800cc54:	466b      	mov	r3, sp
 800cc56:	0c09      	lsrs	r1, r1, #16
 800cc58:	8b9b      	ldrh	r3, [r3, #28]
 800cc5a:	4341      	muls	r1, r0
 800cc5c:	18d3      	adds	r3, r2, r3
 800cc5e:	9a07      	ldr	r2, [sp, #28]
 800cc60:	195b      	adds	r3, r3, r5
 800cc62:	0c12      	lsrs	r2, r2, #16
 800cc64:	1889      	adds	r1, r1, r2
 800cc66:	0c1a      	lsrs	r2, r3, #16
 800cc68:	188a      	adds	r2, r1, r2
 800cc6a:	b29b      	uxth	r3, r3
 800cc6c:	0c15      	lsrs	r5, r2, #16
 800cc6e:	0412      	lsls	r2, r2, #16
 800cc70:	431a      	orrs	r2, r3
 800cc72:	9b05      	ldr	r3, [sp, #20]
 800cc74:	c704      	stmia	r7!, {r2}
 800cc76:	42b3      	cmp	r3, r6
 800cc78:	d8e6      	bhi.n	800cc48 <__multiply+0xc4>
 800cc7a:	4663      	mov	r3, ip
 800cc7c:	9a06      	ldr	r2, [sp, #24]
 800cc7e:	509d      	str	r5, [r3, r2]
 800cc80:	9b01      	ldr	r3, [sp, #4]
 800cc82:	6818      	ldr	r0, [r3, #0]
 800cc84:	0c00      	lsrs	r0, r0, #16
 800cc86:	d020      	beq.n	800ccca <__multiply+0x146>
 800cc88:	4663      	mov	r3, ip
 800cc8a:	0025      	movs	r5, r4
 800cc8c:	4661      	mov	r1, ip
 800cc8e:	2700      	movs	r7, #0
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	3514      	adds	r5, #20
 800cc94:	682a      	ldr	r2, [r5, #0]
 800cc96:	680e      	ldr	r6, [r1, #0]
 800cc98:	b292      	uxth	r2, r2
 800cc9a:	4342      	muls	r2, r0
 800cc9c:	0c36      	lsrs	r6, r6, #16
 800cc9e:	1992      	adds	r2, r2, r6
 800cca0:	19d2      	adds	r2, r2, r7
 800cca2:	0416      	lsls	r6, r2, #16
 800cca4:	b29b      	uxth	r3, r3
 800cca6:	431e      	orrs	r6, r3
 800cca8:	600e      	str	r6, [r1, #0]
 800ccaa:	cd40      	ldmia	r5!, {r6}
 800ccac:	684b      	ldr	r3, [r1, #4]
 800ccae:	0c36      	lsrs	r6, r6, #16
 800ccb0:	4346      	muls	r6, r0
 800ccb2:	b29b      	uxth	r3, r3
 800ccb4:	0c12      	lsrs	r2, r2, #16
 800ccb6:	18f3      	adds	r3, r6, r3
 800ccb8:	189b      	adds	r3, r3, r2
 800ccba:	9a05      	ldr	r2, [sp, #20]
 800ccbc:	0c1f      	lsrs	r7, r3, #16
 800ccbe:	3104      	adds	r1, #4
 800ccc0:	42aa      	cmp	r2, r5
 800ccc2:	d8e7      	bhi.n	800cc94 <__multiply+0x110>
 800ccc4:	4662      	mov	r2, ip
 800ccc6:	9906      	ldr	r1, [sp, #24]
 800ccc8:	5053      	str	r3, [r2, r1]
 800ccca:	9b01      	ldr	r3, [sp, #4]
 800cccc:	3304      	adds	r3, #4
 800ccce:	9301      	str	r3, [sp, #4]
 800ccd0:	2304      	movs	r3, #4
 800ccd2:	449c      	add	ip, r3
 800ccd4:	e79b      	b.n	800cc0e <__multiply+0x8a>
 800ccd6:	9b03      	ldr	r3, [sp, #12]
 800ccd8:	3b01      	subs	r3, #1
 800ccda:	9303      	str	r3, [sp, #12]
 800ccdc:	e79b      	b.n	800cc16 <__multiply+0x92>
 800ccde:	46c0      	nop			@ (mov r8, r8)
 800cce0:	0800dccc 	.word	0x0800dccc
 800cce4:	0800dcee 	.word	0x0800dcee

0800cce8 <__pow5mult>:
 800cce8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ccea:	2303      	movs	r3, #3
 800ccec:	0015      	movs	r5, r2
 800ccee:	0007      	movs	r7, r0
 800ccf0:	000e      	movs	r6, r1
 800ccf2:	401a      	ands	r2, r3
 800ccf4:	421d      	tst	r5, r3
 800ccf6:	d008      	beq.n	800cd0a <__pow5mult+0x22>
 800ccf8:	4925      	ldr	r1, [pc, #148]	@ (800cd90 <__pow5mult+0xa8>)
 800ccfa:	3a01      	subs	r2, #1
 800ccfc:	0092      	lsls	r2, r2, #2
 800ccfe:	5852      	ldr	r2, [r2, r1]
 800cd00:	2300      	movs	r3, #0
 800cd02:	0031      	movs	r1, r6
 800cd04:	f7ff fe92 	bl	800ca2c <__multadd>
 800cd08:	0006      	movs	r6, r0
 800cd0a:	10ad      	asrs	r5, r5, #2
 800cd0c:	d03d      	beq.n	800cd8a <__pow5mult+0xa2>
 800cd0e:	69fc      	ldr	r4, [r7, #28]
 800cd10:	2c00      	cmp	r4, #0
 800cd12:	d10f      	bne.n	800cd34 <__pow5mult+0x4c>
 800cd14:	2010      	movs	r0, #16
 800cd16:	f7fe f851 	bl	800adbc <malloc>
 800cd1a:	1e02      	subs	r2, r0, #0
 800cd1c:	61f8      	str	r0, [r7, #28]
 800cd1e:	d105      	bne.n	800cd2c <__pow5mult+0x44>
 800cd20:	21b4      	movs	r1, #180	@ 0xb4
 800cd22:	4b1c      	ldr	r3, [pc, #112]	@ (800cd94 <__pow5mult+0xac>)
 800cd24:	481c      	ldr	r0, [pc, #112]	@ (800cd98 <__pow5mult+0xb0>)
 800cd26:	31ff      	adds	r1, #255	@ 0xff
 800cd28:	f000 fbc8 	bl	800d4bc <__assert_func>
 800cd2c:	6044      	str	r4, [r0, #4]
 800cd2e:	6084      	str	r4, [r0, #8]
 800cd30:	6004      	str	r4, [r0, #0]
 800cd32:	60c4      	str	r4, [r0, #12]
 800cd34:	69fb      	ldr	r3, [r7, #28]
 800cd36:	689c      	ldr	r4, [r3, #8]
 800cd38:	9301      	str	r3, [sp, #4]
 800cd3a:	2c00      	cmp	r4, #0
 800cd3c:	d108      	bne.n	800cd50 <__pow5mult+0x68>
 800cd3e:	0038      	movs	r0, r7
 800cd40:	4916      	ldr	r1, [pc, #88]	@ (800cd9c <__pow5mult+0xb4>)
 800cd42:	f7ff ff07 	bl	800cb54 <__i2b>
 800cd46:	9b01      	ldr	r3, [sp, #4]
 800cd48:	0004      	movs	r4, r0
 800cd4a:	6098      	str	r0, [r3, #8]
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	6003      	str	r3, [r0, #0]
 800cd50:	2301      	movs	r3, #1
 800cd52:	421d      	tst	r5, r3
 800cd54:	d00a      	beq.n	800cd6c <__pow5mult+0x84>
 800cd56:	0031      	movs	r1, r6
 800cd58:	0022      	movs	r2, r4
 800cd5a:	0038      	movs	r0, r7
 800cd5c:	f7ff ff12 	bl	800cb84 <__multiply>
 800cd60:	0031      	movs	r1, r6
 800cd62:	9001      	str	r0, [sp, #4]
 800cd64:	0038      	movs	r0, r7
 800cd66:	f7ff fe3d 	bl	800c9e4 <_Bfree>
 800cd6a:	9e01      	ldr	r6, [sp, #4]
 800cd6c:	106d      	asrs	r5, r5, #1
 800cd6e:	d00c      	beq.n	800cd8a <__pow5mult+0xa2>
 800cd70:	6820      	ldr	r0, [r4, #0]
 800cd72:	2800      	cmp	r0, #0
 800cd74:	d107      	bne.n	800cd86 <__pow5mult+0x9e>
 800cd76:	0022      	movs	r2, r4
 800cd78:	0021      	movs	r1, r4
 800cd7a:	0038      	movs	r0, r7
 800cd7c:	f7ff ff02 	bl	800cb84 <__multiply>
 800cd80:	2300      	movs	r3, #0
 800cd82:	6020      	str	r0, [r4, #0]
 800cd84:	6003      	str	r3, [r0, #0]
 800cd86:	0004      	movs	r4, r0
 800cd88:	e7e2      	b.n	800cd50 <__pow5mult+0x68>
 800cd8a:	0030      	movs	r0, r6
 800cd8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cd8e:	46c0      	nop			@ (mov r8, r8)
 800cd90:	0800dd48 	.word	0x0800dd48
 800cd94:	0800dc5d 	.word	0x0800dc5d
 800cd98:	0800dcee 	.word	0x0800dcee
 800cd9c:	00000271 	.word	0x00000271

0800cda0 <__lshift>:
 800cda0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cda2:	000c      	movs	r4, r1
 800cda4:	0016      	movs	r6, r2
 800cda6:	6923      	ldr	r3, [r4, #16]
 800cda8:	1157      	asrs	r7, r2, #5
 800cdaa:	b085      	sub	sp, #20
 800cdac:	18fb      	adds	r3, r7, r3
 800cdae:	9301      	str	r3, [sp, #4]
 800cdb0:	3301      	adds	r3, #1
 800cdb2:	9300      	str	r3, [sp, #0]
 800cdb4:	6849      	ldr	r1, [r1, #4]
 800cdb6:	68a3      	ldr	r3, [r4, #8]
 800cdb8:	9002      	str	r0, [sp, #8]
 800cdba:	9a00      	ldr	r2, [sp, #0]
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	db10      	blt.n	800cde2 <__lshift+0x42>
 800cdc0:	9802      	ldr	r0, [sp, #8]
 800cdc2:	f7ff fdcb 	bl	800c95c <_Balloc>
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	0001      	movs	r1, r0
 800cdca:	0005      	movs	r5, r0
 800cdcc:	001a      	movs	r2, r3
 800cdce:	3114      	adds	r1, #20
 800cdd0:	4298      	cmp	r0, r3
 800cdd2:	d10c      	bne.n	800cdee <__lshift+0x4e>
 800cdd4:	21ef      	movs	r1, #239	@ 0xef
 800cdd6:	002a      	movs	r2, r5
 800cdd8:	4b25      	ldr	r3, [pc, #148]	@ (800ce70 <__lshift+0xd0>)
 800cdda:	4826      	ldr	r0, [pc, #152]	@ (800ce74 <__lshift+0xd4>)
 800cddc:	0049      	lsls	r1, r1, #1
 800cdde:	f000 fb6d 	bl	800d4bc <__assert_func>
 800cde2:	3101      	adds	r1, #1
 800cde4:	005b      	lsls	r3, r3, #1
 800cde6:	e7e8      	b.n	800cdba <__lshift+0x1a>
 800cde8:	0098      	lsls	r0, r3, #2
 800cdea:	500a      	str	r2, [r1, r0]
 800cdec:	3301      	adds	r3, #1
 800cdee:	42bb      	cmp	r3, r7
 800cdf0:	dbfa      	blt.n	800cde8 <__lshift+0x48>
 800cdf2:	43fb      	mvns	r3, r7
 800cdf4:	17db      	asrs	r3, r3, #31
 800cdf6:	401f      	ands	r7, r3
 800cdf8:	00bf      	lsls	r7, r7, #2
 800cdfa:	0023      	movs	r3, r4
 800cdfc:	201f      	movs	r0, #31
 800cdfe:	19c9      	adds	r1, r1, r7
 800ce00:	0037      	movs	r7, r6
 800ce02:	6922      	ldr	r2, [r4, #16]
 800ce04:	3314      	adds	r3, #20
 800ce06:	0092      	lsls	r2, r2, #2
 800ce08:	189a      	adds	r2, r3, r2
 800ce0a:	4007      	ands	r7, r0
 800ce0c:	4206      	tst	r6, r0
 800ce0e:	d029      	beq.n	800ce64 <__lshift+0xc4>
 800ce10:	3001      	adds	r0, #1
 800ce12:	1bc0      	subs	r0, r0, r7
 800ce14:	9003      	str	r0, [sp, #12]
 800ce16:	468c      	mov	ip, r1
 800ce18:	2000      	movs	r0, #0
 800ce1a:	681e      	ldr	r6, [r3, #0]
 800ce1c:	40be      	lsls	r6, r7
 800ce1e:	4306      	orrs	r6, r0
 800ce20:	4660      	mov	r0, ip
 800ce22:	c040      	stmia	r0!, {r6}
 800ce24:	4684      	mov	ip, r0
 800ce26:	9e03      	ldr	r6, [sp, #12]
 800ce28:	cb01      	ldmia	r3!, {r0}
 800ce2a:	40f0      	lsrs	r0, r6
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	d8f4      	bhi.n	800ce1a <__lshift+0x7a>
 800ce30:	0026      	movs	r6, r4
 800ce32:	3615      	adds	r6, #21
 800ce34:	2304      	movs	r3, #4
 800ce36:	42b2      	cmp	r2, r6
 800ce38:	d304      	bcc.n	800ce44 <__lshift+0xa4>
 800ce3a:	1b13      	subs	r3, r2, r4
 800ce3c:	3b15      	subs	r3, #21
 800ce3e:	089b      	lsrs	r3, r3, #2
 800ce40:	3301      	adds	r3, #1
 800ce42:	009b      	lsls	r3, r3, #2
 800ce44:	50c8      	str	r0, [r1, r3]
 800ce46:	2800      	cmp	r0, #0
 800ce48:	d002      	beq.n	800ce50 <__lshift+0xb0>
 800ce4a:	9b01      	ldr	r3, [sp, #4]
 800ce4c:	3302      	adds	r3, #2
 800ce4e:	9300      	str	r3, [sp, #0]
 800ce50:	9b00      	ldr	r3, [sp, #0]
 800ce52:	9802      	ldr	r0, [sp, #8]
 800ce54:	3b01      	subs	r3, #1
 800ce56:	0021      	movs	r1, r4
 800ce58:	612b      	str	r3, [r5, #16]
 800ce5a:	f7ff fdc3 	bl	800c9e4 <_Bfree>
 800ce5e:	0028      	movs	r0, r5
 800ce60:	b005      	add	sp, #20
 800ce62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce64:	cb01      	ldmia	r3!, {r0}
 800ce66:	c101      	stmia	r1!, {r0}
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	d8fb      	bhi.n	800ce64 <__lshift+0xc4>
 800ce6c:	e7f0      	b.n	800ce50 <__lshift+0xb0>
 800ce6e:	46c0      	nop			@ (mov r8, r8)
 800ce70:	0800dccc 	.word	0x0800dccc
 800ce74:	0800dcee 	.word	0x0800dcee

0800ce78 <__mcmp>:
 800ce78:	b530      	push	{r4, r5, lr}
 800ce7a:	690b      	ldr	r3, [r1, #16]
 800ce7c:	6904      	ldr	r4, [r0, #16]
 800ce7e:	0002      	movs	r2, r0
 800ce80:	1ae0      	subs	r0, r4, r3
 800ce82:	429c      	cmp	r4, r3
 800ce84:	d10f      	bne.n	800cea6 <__mcmp+0x2e>
 800ce86:	3214      	adds	r2, #20
 800ce88:	009b      	lsls	r3, r3, #2
 800ce8a:	3114      	adds	r1, #20
 800ce8c:	0014      	movs	r4, r2
 800ce8e:	18c9      	adds	r1, r1, r3
 800ce90:	18d2      	adds	r2, r2, r3
 800ce92:	3a04      	subs	r2, #4
 800ce94:	3904      	subs	r1, #4
 800ce96:	6815      	ldr	r5, [r2, #0]
 800ce98:	680b      	ldr	r3, [r1, #0]
 800ce9a:	429d      	cmp	r5, r3
 800ce9c:	d004      	beq.n	800cea8 <__mcmp+0x30>
 800ce9e:	2001      	movs	r0, #1
 800cea0:	429d      	cmp	r5, r3
 800cea2:	d200      	bcs.n	800cea6 <__mcmp+0x2e>
 800cea4:	3802      	subs	r0, #2
 800cea6:	bd30      	pop	{r4, r5, pc}
 800cea8:	4294      	cmp	r4, r2
 800ceaa:	d3f2      	bcc.n	800ce92 <__mcmp+0x1a>
 800ceac:	e7fb      	b.n	800cea6 <__mcmp+0x2e>
	...

0800ceb0 <__mdiff>:
 800ceb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ceb2:	000c      	movs	r4, r1
 800ceb4:	b087      	sub	sp, #28
 800ceb6:	9000      	str	r0, [sp, #0]
 800ceb8:	0011      	movs	r1, r2
 800ceba:	0020      	movs	r0, r4
 800cebc:	0017      	movs	r7, r2
 800cebe:	f7ff ffdb 	bl	800ce78 <__mcmp>
 800cec2:	1e05      	subs	r5, r0, #0
 800cec4:	d110      	bne.n	800cee8 <__mdiff+0x38>
 800cec6:	0001      	movs	r1, r0
 800cec8:	9800      	ldr	r0, [sp, #0]
 800ceca:	f7ff fd47 	bl	800c95c <_Balloc>
 800cece:	1e02      	subs	r2, r0, #0
 800ced0:	d104      	bne.n	800cedc <__mdiff+0x2c>
 800ced2:	4b40      	ldr	r3, [pc, #256]	@ (800cfd4 <__mdiff+0x124>)
 800ced4:	4840      	ldr	r0, [pc, #256]	@ (800cfd8 <__mdiff+0x128>)
 800ced6:	4941      	ldr	r1, [pc, #260]	@ (800cfdc <__mdiff+0x12c>)
 800ced8:	f000 faf0 	bl	800d4bc <__assert_func>
 800cedc:	2301      	movs	r3, #1
 800cede:	6145      	str	r5, [r0, #20]
 800cee0:	6103      	str	r3, [r0, #16]
 800cee2:	0010      	movs	r0, r2
 800cee4:	b007      	add	sp, #28
 800cee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cee8:	2600      	movs	r6, #0
 800ceea:	42b0      	cmp	r0, r6
 800ceec:	da03      	bge.n	800cef6 <__mdiff+0x46>
 800ceee:	0023      	movs	r3, r4
 800cef0:	003c      	movs	r4, r7
 800cef2:	001f      	movs	r7, r3
 800cef4:	3601      	adds	r6, #1
 800cef6:	6861      	ldr	r1, [r4, #4]
 800cef8:	9800      	ldr	r0, [sp, #0]
 800cefa:	f7ff fd2f 	bl	800c95c <_Balloc>
 800cefe:	1e02      	subs	r2, r0, #0
 800cf00:	d103      	bne.n	800cf0a <__mdiff+0x5a>
 800cf02:	4b34      	ldr	r3, [pc, #208]	@ (800cfd4 <__mdiff+0x124>)
 800cf04:	4834      	ldr	r0, [pc, #208]	@ (800cfd8 <__mdiff+0x128>)
 800cf06:	4936      	ldr	r1, [pc, #216]	@ (800cfe0 <__mdiff+0x130>)
 800cf08:	e7e6      	b.n	800ced8 <__mdiff+0x28>
 800cf0a:	6923      	ldr	r3, [r4, #16]
 800cf0c:	3414      	adds	r4, #20
 800cf0e:	9300      	str	r3, [sp, #0]
 800cf10:	009b      	lsls	r3, r3, #2
 800cf12:	18e3      	adds	r3, r4, r3
 800cf14:	0021      	movs	r1, r4
 800cf16:	9401      	str	r4, [sp, #4]
 800cf18:	003c      	movs	r4, r7
 800cf1a:	9302      	str	r3, [sp, #8]
 800cf1c:	693b      	ldr	r3, [r7, #16]
 800cf1e:	3414      	adds	r4, #20
 800cf20:	009b      	lsls	r3, r3, #2
 800cf22:	18e3      	adds	r3, r4, r3
 800cf24:	9303      	str	r3, [sp, #12]
 800cf26:	0003      	movs	r3, r0
 800cf28:	60c6      	str	r6, [r0, #12]
 800cf2a:	468c      	mov	ip, r1
 800cf2c:	2000      	movs	r0, #0
 800cf2e:	3314      	adds	r3, #20
 800cf30:	9304      	str	r3, [sp, #16]
 800cf32:	9305      	str	r3, [sp, #20]
 800cf34:	4663      	mov	r3, ip
 800cf36:	cb20      	ldmia	r3!, {r5}
 800cf38:	b2a9      	uxth	r1, r5
 800cf3a:	000e      	movs	r6, r1
 800cf3c:	469c      	mov	ip, r3
 800cf3e:	cc08      	ldmia	r4!, {r3}
 800cf40:	0c2d      	lsrs	r5, r5, #16
 800cf42:	b299      	uxth	r1, r3
 800cf44:	1a71      	subs	r1, r6, r1
 800cf46:	1809      	adds	r1, r1, r0
 800cf48:	0c1b      	lsrs	r3, r3, #16
 800cf4a:	1408      	asrs	r0, r1, #16
 800cf4c:	1aeb      	subs	r3, r5, r3
 800cf4e:	181b      	adds	r3, r3, r0
 800cf50:	1418      	asrs	r0, r3, #16
 800cf52:	b289      	uxth	r1, r1
 800cf54:	041b      	lsls	r3, r3, #16
 800cf56:	4319      	orrs	r1, r3
 800cf58:	9b05      	ldr	r3, [sp, #20]
 800cf5a:	c302      	stmia	r3!, {r1}
 800cf5c:	9305      	str	r3, [sp, #20]
 800cf5e:	9b03      	ldr	r3, [sp, #12]
 800cf60:	42a3      	cmp	r3, r4
 800cf62:	d8e7      	bhi.n	800cf34 <__mdiff+0x84>
 800cf64:	0039      	movs	r1, r7
 800cf66:	9c03      	ldr	r4, [sp, #12]
 800cf68:	3115      	adds	r1, #21
 800cf6a:	2304      	movs	r3, #4
 800cf6c:	428c      	cmp	r4, r1
 800cf6e:	d304      	bcc.n	800cf7a <__mdiff+0xca>
 800cf70:	1be3      	subs	r3, r4, r7
 800cf72:	3b15      	subs	r3, #21
 800cf74:	089b      	lsrs	r3, r3, #2
 800cf76:	3301      	adds	r3, #1
 800cf78:	009b      	lsls	r3, r3, #2
 800cf7a:	9901      	ldr	r1, [sp, #4]
 800cf7c:	18cd      	adds	r5, r1, r3
 800cf7e:	9904      	ldr	r1, [sp, #16]
 800cf80:	002e      	movs	r6, r5
 800cf82:	18cb      	adds	r3, r1, r3
 800cf84:	001f      	movs	r7, r3
 800cf86:	9902      	ldr	r1, [sp, #8]
 800cf88:	428e      	cmp	r6, r1
 800cf8a:	d311      	bcc.n	800cfb0 <__mdiff+0x100>
 800cf8c:	9c02      	ldr	r4, [sp, #8]
 800cf8e:	1ee9      	subs	r1, r5, #3
 800cf90:	2000      	movs	r0, #0
 800cf92:	428c      	cmp	r4, r1
 800cf94:	d304      	bcc.n	800cfa0 <__mdiff+0xf0>
 800cf96:	0021      	movs	r1, r4
 800cf98:	3103      	adds	r1, #3
 800cf9a:	1b49      	subs	r1, r1, r5
 800cf9c:	0889      	lsrs	r1, r1, #2
 800cf9e:	0088      	lsls	r0, r1, #2
 800cfa0:	181b      	adds	r3, r3, r0
 800cfa2:	3b04      	subs	r3, #4
 800cfa4:	6819      	ldr	r1, [r3, #0]
 800cfa6:	2900      	cmp	r1, #0
 800cfa8:	d010      	beq.n	800cfcc <__mdiff+0x11c>
 800cfaa:	9b00      	ldr	r3, [sp, #0]
 800cfac:	6113      	str	r3, [r2, #16]
 800cfae:	e798      	b.n	800cee2 <__mdiff+0x32>
 800cfb0:	4684      	mov	ip, r0
 800cfb2:	ce02      	ldmia	r6!, {r1}
 800cfb4:	b288      	uxth	r0, r1
 800cfb6:	4460      	add	r0, ip
 800cfb8:	1400      	asrs	r0, r0, #16
 800cfba:	0c0c      	lsrs	r4, r1, #16
 800cfbc:	1904      	adds	r4, r0, r4
 800cfbe:	4461      	add	r1, ip
 800cfc0:	1420      	asrs	r0, r4, #16
 800cfc2:	b289      	uxth	r1, r1
 800cfc4:	0424      	lsls	r4, r4, #16
 800cfc6:	4321      	orrs	r1, r4
 800cfc8:	c702      	stmia	r7!, {r1}
 800cfca:	e7dc      	b.n	800cf86 <__mdiff+0xd6>
 800cfcc:	9900      	ldr	r1, [sp, #0]
 800cfce:	3901      	subs	r1, #1
 800cfd0:	9100      	str	r1, [sp, #0]
 800cfd2:	e7e6      	b.n	800cfa2 <__mdiff+0xf2>
 800cfd4:	0800dccc 	.word	0x0800dccc
 800cfd8:	0800dcee 	.word	0x0800dcee
 800cfdc:	00000237 	.word	0x00000237
 800cfe0:	00000245 	.word	0x00000245

0800cfe4 <__d2b>:
 800cfe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cfe6:	2101      	movs	r1, #1
 800cfe8:	0016      	movs	r6, r2
 800cfea:	001f      	movs	r7, r3
 800cfec:	f7ff fcb6 	bl	800c95c <_Balloc>
 800cff0:	1e04      	subs	r4, r0, #0
 800cff2:	d105      	bne.n	800d000 <__d2b+0x1c>
 800cff4:	0022      	movs	r2, r4
 800cff6:	4b25      	ldr	r3, [pc, #148]	@ (800d08c <__d2b+0xa8>)
 800cff8:	4825      	ldr	r0, [pc, #148]	@ (800d090 <__d2b+0xac>)
 800cffa:	4926      	ldr	r1, [pc, #152]	@ (800d094 <__d2b+0xb0>)
 800cffc:	f000 fa5e 	bl	800d4bc <__assert_func>
 800d000:	033b      	lsls	r3, r7, #12
 800d002:	007d      	lsls	r5, r7, #1
 800d004:	0b1b      	lsrs	r3, r3, #12
 800d006:	0d6d      	lsrs	r5, r5, #21
 800d008:	d002      	beq.n	800d010 <__d2b+0x2c>
 800d00a:	2280      	movs	r2, #128	@ 0x80
 800d00c:	0352      	lsls	r2, r2, #13
 800d00e:	4313      	orrs	r3, r2
 800d010:	9301      	str	r3, [sp, #4]
 800d012:	2e00      	cmp	r6, #0
 800d014:	d025      	beq.n	800d062 <__d2b+0x7e>
 800d016:	4668      	mov	r0, sp
 800d018:	9600      	str	r6, [sp, #0]
 800d01a:	f7ff fd6c 	bl	800caf6 <__lo0bits>
 800d01e:	9b01      	ldr	r3, [sp, #4]
 800d020:	9900      	ldr	r1, [sp, #0]
 800d022:	2800      	cmp	r0, #0
 800d024:	d01b      	beq.n	800d05e <__d2b+0x7a>
 800d026:	2220      	movs	r2, #32
 800d028:	001e      	movs	r6, r3
 800d02a:	1a12      	subs	r2, r2, r0
 800d02c:	4096      	lsls	r6, r2
 800d02e:	0032      	movs	r2, r6
 800d030:	40c3      	lsrs	r3, r0
 800d032:	430a      	orrs	r2, r1
 800d034:	6162      	str	r2, [r4, #20]
 800d036:	9301      	str	r3, [sp, #4]
 800d038:	9e01      	ldr	r6, [sp, #4]
 800d03a:	61a6      	str	r6, [r4, #24]
 800d03c:	1e73      	subs	r3, r6, #1
 800d03e:	419e      	sbcs	r6, r3
 800d040:	3601      	adds	r6, #1
 800d042:	6126      	str	r6, [r4, #16]
 800d044:	2d00      	cmp	r5, #0
 800d046:	d014      	beq.n	800d072 <__d2b+0x8e>
 800d048:	2635      	movs	r6, #53	@ 0x35
 800d04a:	4b13      	ldr	r3, [pc, #76]	@ (800d098 <__d2b+0xb4>)
 800d04c:	18ed      	adds	r5, r5, r3
 800d04e:	9b08      	ldr	r3, [sp, #32]
 800d050:	182d      	adds	r5, r5, r0
 800d052:	601d      	str	r5, [r3, #0]
 800d054:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d056:	1a36      	subs	r6, r6, r0
 800d058:	601e      	str	r6, [r3, #0]
 800d05a:	0020      	movs	r0, r4
 800d05c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d05e:	6161      	str	r1, [r4, #20]
 800d060:	e7ea      	b.n	800d038 <__d2b+0x54>
 800d062:	a801      	add	r0, sp, #4
 800d064:	f7ff fd47 	bl	800caf6 <__lo0bits>
 800d068:	9b01      	ldr	r3, [sp, #4]
 800d06a:	2601      	movs	r6, #1
 800d06c:	6163      	str	r3, [r4, #20]
 800d06e:	3020      	adds	r0, #32
 800d070:	e7e7      	b.n	800d042 <__d2b+0x5e>
 800d072:	4b0a      	ldr	r3, [pc, #40]	@ (800d09c <__d2b+0xb8>)
 800d074:	18c0      	adds	r0, r0, r3
 800d076:	9b08      	ldr	r3, [sp, #32]
 800d078:	6018      	str	r0, [r3, #0]
 800d07a:	4b09      	ldr	r3, [pc, #36]	@ (800d0a0 <__d2b+0xbc>)
 800d07c:	18f3      	adds	r3, r6, r3
 800d07e:	009b      	lsls	r3, r3, #2
 800d080:	18e3      	adds	r3, r4, r3
 800d082:	6958      	ldr	r0, [r3, #20]
 800d084:	f7ff fd16 	bl	800cab4 <__hi0bits>
 800d088:	0176      	lsls	r6, r6, #5
 800d08a:	e7e3      	b.n	800d054 <__d2b+0x70>
 800d08c:	0800dccc 	.word	0x0800dccc
 800d090:	0800dcee 	.word	0x0800dcee
 800d094:	0000030f 	.word	0x0000030f
 800d098:	fffffbcd 	.word	0xfffffbcd
 800d09c:	fffffbce 	.word	0xfffffbce
 800d0a0:	3fffffff 	.word	0x3fffffff

0800d0a4 <__sread>:
 800d0a4:	b570      	push	{r4, r5, r6, lr}
 800d0a6:	000c      	movs	r4, r1
 800d0a8:	250e      	movs	r5, #14
 800d0aa:	5f49      	ldrsh	r1, [r1, r5]
 800d0ac:	f000 f9de 	bl	800d46c <_read_r>
 800d0b0:	2800      	cmp	r0, #0
 800d0b2:	db03      	blt.n	800d0bc <__sread+0x18>
 800d0b4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800d0b6:	181b      	adds	r3, r3, r0
 800d0b8:	6563      	str	r3, [r4, #84]	@ 0x54
 800d0ba:	bd70      	pop	{r4, r5, r6, pc}
 800d0bc:	89a3      	ldrh	r3, [r4, #12]
 800d0be:	4a02      	ldr	r2, [pc, #8]	@ (800d0c8 <__sread+0x24>)
 800d0c0:	4013      	ands	r3, r2
 800d0c2:	81a3      	strh	r3, [r4, #12]
 800d0c4:	e7f9      	b.n	800d0ba <__sread+0x16>
 800d0c6:	46c0      	nop			@ (mov r8, r8)
 800d0c8:	ffffefff 	.word	0xffffefff

0800d0cc <__swrite>:
 800d0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ce:	001f      	movs	r7, r3
 800d0d0:	898b      	ldrh	r3, [r1, #12]
 800d0d2:	0005      	movs	r5, r0
 800d0d4:	000c      	movs	r4, r1
 800d0d6:	0016      	movs	r6, r2
 800d0d8:	05db      	lsls	r3, r3, #23
 800d0da:	d505      	bpl.n	800d0e8 <__swrite+0x1c>
 800d0dc:	230e      	movs	r3, #14
 800d0de:	5ec9      	ldrsh	r1, [r1, r3]
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	2302      	movs	r3, #2
 800d0e4:	f000 f9ae 	bl	800d444 <_lseek_r>
 800d0e8:	89a3      	ldrh	r3, [r4, #12]
 800d0ea:	4a05      	ldr	r2, [pc, #20]	@ (800d100 <__swrite+0x34>)
 800d0ec:	0028      	movs	r0, r5
 800d0ee:	4013      	ands	r3, r2
 800d0f0:	81a3      	strh	r3, [r4, #12]
 800d0f2:	0032      	movs	r2, r6
 800d0f4:	230e      	movs	r3, #14
 800d0f6:	5ee1      	ldrsh	r1, [r4, r3]
 800d0f8:	003b      	movs	r3, r7
 800d0fa:	f000 f9cb 	bl	800d494 <_write_r>
 800d0fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d100:	ffffefff 	.word	0xffffefff

0800d104 <__sseek>:
 800d104:	b570      	push	{r4, r5, r6, lr}
 800d106:	000c      	movs	r4, r1
 800d108:	250e      	movs	r5, #14
 800d10a:	5f49      	ldrsh	r1, [r1, r5]
 800d10c:	f000 f99a 	bl	800d444 <_lseek_r>
 800d110:	89a3      	ldrh	r3, [r4, #12]
 800d112:	1c42      	adds	r2, r0, #1
 800d114:	d103      	bne.n	800d11e <__sseek+0x1a>
 800d116:	4a05      	ldr	r2, [pc, #20]	@ (800d12c <__sseek+0x28>)
 800d118:	4013      	ands	r3, r2
 800d11a:	81a3      	strh	r3, [r4, #12]
 800d11c:	bd70      	pop	{r4, r5, r6, pc}
 800d11e:	2280      	movs	r2, #128	@ 0x80
 800d120:	0152      	lsls	r2, r2, #5
 800d122:	4313      	orrs	r3, r2
 800d124:	81a3      	strh	r3, [r4, #12]
 800d126:	6560      	str	r0, [r4, #84]	@ 0x54
 800d128:	e7f8      	b.n	800d11c <__sseek+0x18>
 800d12a:	46c0      	nop			@ (mov r8, r8)
 800d12c:	ffffefff 	.word	0xffffefff

0800d130 <__sclose>:
 800d130:	b510      	push	{r4, lr}
 800d132:	230e      	movs	r3, #14
 800d134:	5ec9      	ldrsh	r1, [r1, r3]
 800d136:	f000 f94f 	bl	800d3d8 <_close_r>
 800d13a:	bd10      	pop	{r4, pc}

0800d13c <_realloc_r>:
 800d13c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d13e:	0006      	movs	r6, r0
 800d140:	000c      	movs	r4, r1
 800d142:	0015      	movs	r5, r2
 800d144:	2900      	cmp	r1, #0
 800d146:	d105      	bne.n	800d154 <_realloc_r+0x18>
 800d148:	0011      	movs	r1, r2
 800d14a:	f7fd fe6d 	bl	800ae28 <_malloc_r>
 800d14e:	0004      	movs	r4, r0
 800d150:	0020      	movs	r0, r4
 800d152:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d154:	2a00      	cmp	r2, #0
 800d156:	d103      	bne.n	800d160 <_realloc_r+0x24>
 800d158:	f7ff f862 	bl	800c220 <_free_r>
 800d15c:	2400      	movs	r4, #0
 800d15e:	e7f7      	b.n	800d150 <_realloc_r+0x14>
 800d160:	f000 fa09 	bl	800d576 <_malloc_usable_size_r>
 800d164:	0007      	movs	r7, r0
 800d166:	4285      	cmp	r5, r0
 800d168:	d802      	bhi.n	800d170 <_realloc_r+0x34>
 800d16a:	0843      	lsrs	r3, r0, #1
 800d16c:	42ab      	cmp	r3, r5
 800d16e:	d3ef      	bcc.n	800d150 <_realloc_r+0x14>
 800d170:	0029      	movs	r1, r5
 800d172:	0030      	movs	r0, r6
 800d174:	f7fd fe58 	bl	800ae28 <_malloc_r>
 800d178:	9001      	str	r0, [sp, #4]
 800d17a:	2800      	cmp	r0, #0
 800d17c:	d0ee      	beq.n	800d15c <_realloc_r+0x20>
 800d17e:	002a      	movs	r2, r5
 800d180:	42bd      	cmp	r5, r7
 800d182:	d900      	bls.n	800d186 <_realloc_r+0x4a>
 800d184:	003a      	movs	r2, r7
 800d186:	0021      	movs	r1, r4
 800d188:	9801      	ldr	r0, [sp, #4]
 800d18a:	f7fe f9bd 	bl	800b508 <memcpy>
 800d18e:	0021      	movs	r1, r4
 800d190:	0030      	movs	r0, r6
 800d192:	f7ff f845 	bl	800c220 <_free_r>
 800d196:	9c01      	ldr	r4, [sp, #4]
 800d198:	e7da      	b.n	800d150 <_realloc_r+0x14>

0800d19a <__swbuf_r>:
 800d19a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d19c:	0006      	movs	r6, r0
 800d19e:	000d      	movs	r5, r1
 800d1a0:	0014      	movs	r4, r2
 800d1a2:	2800      	cmp	r0, #0
 800d1a4:	d004      	beq.n	800d1b0 <__swbuf_r+0x16>
 800d1a6:	6a03      	ldr	r3, [r0, #32]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d101      	bne.n	800d1b0 <__swbuf_r+0x16>
 800d1ac:	f7fe f8da 	bl	800b364 <__sinit>
 800d1b0:	69a3      	ldr	r3, [r4, #24]
 800d1b2:	60a3      	str	r3, [r4, #8]
 800d1b4:	89a3      	ldrh	r3, [r4, #12]
 800d1b6:	071b      	lsls	r3, r3, #28
 800d1b8:	d502      	bpl.n	800d1c0 <__swbuf_r+0x26>
 800d1ba:	6923      	ldr	r3, [r4, #16]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d109      	bne.n	800d1d4 <__swbuf_r+0x3a>
 800d1c0:	0021      	movs	r1, r4
 800d1c2:	0030      	movs	r0, r6
 800d1c4:	f000 f82c 	bl	800d220 <__swsetup_r>
 800d1c8:	2800      	cmp	r0, #0
 800d1ca:	d003      	beq.n	800d1d4 <__swbuf_r+0x3a>
 800d1cc:	2501      	movs	r5, #1
 800d1ce:	426d      	negs	r5, r5
 800d1d0:	0028      	movs	r0, r5
 800d1d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1d4:	6923      	ldr	r3, [r4, #16]
 800d1d6:	6820      	ldr	r0, [r4, #0]
 800d1d8:	b2ef      	uxtb	r7, r5
 800d1da:	1ac0      	subs	r0, r0, r3
 800d1dc:	6963      	ldr	r3, [r4, #20]
 800d1de:	b2ed      	uxtb	r5, r5
 800d1e0:	4283      	cmp	r3, r0
 800d1e2:	dc05      	bgt.n	800d1f0 <__swbuf_r+0x56>
 800d1e4:	0021      	movs	r1, r4
 800d1e6:	0030      	movs	r0, r6
 800d1e8:	f7ff fb8c 	bl	800c904 <_fflush_r>
 800d1ec:	2800      	cmp	r0, #0
 800d1ee:	d1ed      	bne.n	800d1cc <__swbuf_r+0x32>
 800d1f0:	68a3      	ldr	r3, [r4, #8]
 800d1f2:	3001      	adds	r0, #1
 800d1f4:	3b01      	subs	r3, #1
 800d1f6:	60a3      	str	r3, [r4, #8]
 800d1f8:	6823      	ldr	r3, [r4, #0]
 800d1fa:	1c5a      	adds	r2, r3, #1
 800d1fc:	6022      	str	r2, [r4, #0]
 800d1fe:	701f      	strb	r7, [r3, #0]
 800d200:	6963      	ldr	r3, [r4, #20]
 800d202:	4283      	cmp	r3, r0
 800d204:	d004      	beq.n	800d210 <__swbuf_r+0x76>
 800d206:	89a3      	ldrh	r3, [r4, #12]
 800d208:	07db      	lsls	r3, r3, #31
 800d20a:	d5e1      	bpl.n	800d1d0 <__swbuf_r+0x36>
 800d20c:	2d0a      	cmp	r5, #10
 800d20e:	d1df      	bne.n	800d1d0 <__swbuf_r+0x36>
 800d210:	0021      	movs	r1, r4
 800d212:	0030      	movs	r0, r6
 800d214:	f7ff fb76 	bl	800c904 <_fflush_r>
 800d218:	2800      	cmp	r0, #0
 800d21a:	d0d9      	beq.n	800d1d0 <__swbuf_r+0x36>
 800d21c:	e7d6      	b.n	800d1cc <__swbuf_r+0x32>
	...

0800d220 <__swsetup_r>:
 800d220:	4b2d      	ldr	r3, [pc, #180]	@ (800d2d8 <__swsetup_r+0xb8>)
 800d222:	b570      	push	{r4, r5, r6, lr}
 800d224:	0005      	movs	r5, r0
 800d226:	6818      	ldr	r0, [r3, #0]
 800d228:	000c      	movs	r4, r1
 800d22a:	2800      	cmp	r0, #0
 800d22c:	d004      	beq.n	800d238 <__swsetup_r+0x18>
 800d22e:	6a03      	ldr	r3, [r0, #32]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d101      	bne.n	800d238 <__swsetup_r+0x18>
 800d234:	f7fe f896 	bl	800b364 <__sinit>
 800d238:	230c      	movs	r3, #12
 800d23a:	5ee2      	ldrsh	r2, [r4, r3]
 800d23c:	0713      	lsls	r3, r2, #28
 800d23e:	d423      	bmi.n	800d288 <__swsetup_r+0x68>
 800d240:	06d3      	lsls	r3, r2, #27
 800d242:	d407      	bmi.n	800d254 <__swsetup_r+0x34>
 800d244:	2309      	movs	r3, #9
 800d246:	602b      	str	r3, [r5, #0]
 800d248:	2340      	movs	r3, #64	@ 0x40
 800d24a:	2001      	movs	r0, #1
 800d24c:	4313      	orrs	r3, r2
 800d24e:	81a3      	strh	r3, [r4, #12]
 800d250:	4240      	negs	r0, r0
 800d252:	e03a      	b.n	800d2ca <__swsetup_r+0xaa>
 800d254:	0752      	lsls	r2, r2, #29
 800d256:	d513      	bpl.n	800d280 <__swsetup_r+0x60>
 800d258:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d25a:	2900      	cmp	r1, #0
 800d25c:	d008      	beq.n	800d270 <__swsetup_r+0x50>
 800d25e:	0023      	movs	r3, r4
 800d260:	3344      	adds	r3, #68	@ 0x44
 800d262:	4299      	cmp	r1, r3
 800d264:	d002      	beq.n	800d26c <__swsetup_r+0x4c>
 800d266:	0028      	movs	r0, r5
 800d268:	f7fe ffda 	bl	800c220 <_free_r>
 800d26c:	2300      	movs	r3, #0
 800d26e:	6363      	str	r3, [r4, #52]	@ 0x34
 800d270:	2224      	movs	r2, #36	@ 0x24
 800d272:	89a3      	ldrh	r3, [r4, #12]
 800d274:	4393      	bics	r3, r2
 800d276:	81a3      	strh	r3, [r4, #12]
 800d278:	2300      	movs	r3, #0
 800d27a:	6063      	str	r3, [r4, #4]
 800d27c:	6923      	ldr	r3, [r4, #16]
 800d27e:	6023      	str	r3, [r4, #0]
 800d280:	2308      	movs	r3, #8
 800d282:	89a2      	ldrh	r2, [r4, #12]
 800d284:	4313      	orrs	r3, r2
 800d286:	81a3      	strh	r3, [r4, #12]
 800d288:	6923      	ldr	r3, [r4, #16]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d10b      	bne.n	800d2a6 <__swsetup_r+0x86>
 800d28e:	21a0      	movs	r1, #160	@ 0xa0
 800d290:	2280      	movs	r2, #128	@ 0x80
 800d292:	89a3      	ldrh	r3, [r4, #12]
 800d294:	0089      	lsls	r1, r1, #2
 800d296:	0092      	lsls	r2, r2, #2
 800d298:	400b      	ands	r3, r1
 800d29a:	4293      	cmp	r3, r2
 800d29c:	d003      	beq.n	800d2a6 <__swsetup_r+0x86>
 800d29e:	0021      	movs	r1, r4
 800d2a0:	0028      	movs	r0, r5
 800d2a2:	f000 f845 	bl	800d330 <__smakebuf_r>
 800d2a6:	230c      	movs	r3, #12
 800d2a8:	5ee2      	ldrsh	r2, [r4, r3]
 800d2aa:	2101      	movs	r1, #1
 800d2ac:	0013      	movs	r3, r2
 800d2ae:	400b      	ands	r3, r1
 800d2b0:	420a      	tst	r2, r1
 800d2b2:	d00b      	beq.n	800d2cc <__swsetup_r+0xac>
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	60a3      	str	r3, [r4, #8]
 800d2b8:	6963      	ldr	r3, [r4, #20]
 800d2ba:	425b      	negs	r3, r3
 800d2bc:	61a3      	str	r3, [r4, #24]
 800d2be:	2000      	movs	r0, #0
 800d2c0:	6923      	ldr	r3, [r4, #16]
 800d2c2:	4283      	cmp	r3, r0
 800d2c4:	d101      	bne.n	800d2ca <__swsetup_r+0xaa>
 800d2c6:	0613      	lsls	r3, r2, #24
 800d2c8:	d4be      	bmi.n	800d248 <__swsetup_r+0x28>
 800d2ca:	bd70      	pop	{r4, r5, r6, pc}
 800d2cc:	0791      	lsls	r1, r2, #30
 800d2ce:	d400      	bmi.n	800d2d2 <__swsetup_r+0xb2>
 800d2d0:	6963      	ldr	r3, [r4, #20]
 800d2d2:	60a3      	str	r3, [r4, #8]
 800d2d4:	e7f3      	b.n	800d2be <__swsetup_r+0x9e>
 800d2d6:	46c0      	nop			@ (mov r8, r8)
 800d2d8:	20000034 	.word	0x20000034

0800d2dc <__swhatbuf_r>:
 800d2dc:	b570      	push	{r4, r5, r6, lr}
 800d2de:	000e      	movs	r6, r1
 800d2e0:	001d      	movs	r5, r3
 800d2e2:	230e      	movs	r3, #14
 800d2e4:	5ec9      	ldrsh	r1, [r1, r3]
 800d2e6:	0014      	movs	r4, r2
 800d2e8:	b096      	sub	sp, #88	@ 0x58
 800d2ea:	2900      	cmp	r1, #0
 800d2ec:	da0c      	bge.n	800d308 <__swhatbuf_r+0x2c>
 800d2ee:	89b2      	ldrh	r2, [r6, #12]
 800d2f0:	2380      	movs	r3, #128	@ 0x80
 800d2f2:	0011      	movs	r1, r2
 800d2f4:	4019      	ands	r1, r3
 800d2f6:	421a      	tst	r2, r3
 800d2f8:	d114      	bne.n	800d324 <__swhatbuf_r+0x48>
 800d2fa:	2380      	movs	r3, #128	@ 0x80
 800d2fc:	00db      	lsls	r3, r3, #3
 800d2fe:	2000      	movs	r0, #0
 800d300:	6029      	str	r1, [r5, #0]
 800d302:	6023      	str	r3, [r4, #0]
 800d304:	b016      	add	sp, #88	@ 0x58
 800d306:	bd70      	pop	{r4, r5, r6, pc}
 800d308:	466a      	mov	r2, sp
 800d30a:	f000 f877 	bl	800d3fc <_fstat_r>
 800d30e:	2800      	cmp	r0, #0
 800d310:	dbed      	blt.n	800d2ee <__swhatbuf_r+0x12>
 800d312:	23f0      	movs	r3, #240	@ 0xf0
 800d314:	9901      	ldr	r1, [sp, #4]
 800d316:	021b      	lsls	r3, r3, #8
 800d318:	4019      	ands	r1, r3
 800d31a:	4b04      	ldr	r3, [pc, #16]	@ (800d32c <__swhatbuf_r+0x50>)
 800d31c:	18c9      	adds	r1, r1, r3
 800d31e:	424b      	negs	r3, r1
 800d320:	4159      	adcs	r1, r3
 800d322:	e7ea      	b.n	800d2fa <__swhatbuf_r+0x1e>
 800d324:	2100      	movs	r1, #0
 800d326:	2340      	movs	r3, #64	@ 0x40
 800d328:	e7e9      	b.n	800d2fe <__swhatbuf_r+0x22>
 800d32a:	46c0      	nop			@ (mov r8, r8)
 800d32c:	ffffe000 	.word	0xffffe000

0800d330 <__smakebuf_r>:
 800d330:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d332:	2602      	movs	r6, #2
 800d334:	898b      	ldrh	r3, [r1, #12]
 800d336:	0005      	movs	r5, r0
 800d338:	000c      	movs	r4, r1
 800d33a:	b085      	sub	sp, #20
 800d33c:	4233      	tst	r3, r6
 800d33e:	d007      	beq.n	800d350 <__smakebuf_r+0x20>
 800d340:	0023      	movs	r3, r4
 800d342:	3347      	adds	r3, #71	@ 0x47
 800d344:	6023      	str	r3, [r4, #0]
 800d346:	6123      	str	r3, [r4, #16]
 800d348:	2301      	movs	r3, #1
 800d34a:	6163      	str	r3, [r4, #20]
 800d34c:	b005      	add	sp, #20
 800d34e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d350:	ab03      	add	r3, sp, #12
 800d352:	aa02      	add	r2, sp, #8
 800d354:	f7ff ffc2 	bl	800d2dc <__swhatbuf_r>
 800d358:	9f02      	ldr	r7, [sp, #8]
 800d35a:	9001      	str	r0, [sp, #4]
 800d35c:	0039      	movs	r1, r7
 800d35e:	0028      	movs	r0, r5
 800d360:	f7fd fd62 	bl	800ae28 <_malloc_r>
 800d364:	2800      	cmp	r0, #0
 800d366:	d108      	bne.n	800d37a <__smakebuf_r+0x4a>
 800d368:	220c      	movs	r2, #12
 800d36a:	5ea3      	ldrsh	r3, [r4, r2]
 800d36c:	059a      	lsls	r2, r3, #22
 800d36e:	d4ed      	bmi.n	800d34c <__smakebuf_r+0x1c>
 800d370:	2203      	movs	r2, #3
 800d372:	4393      	bics	r3, r2
 800d374:	431e      	orrs	r6, r3
 800d376:	81a6      	strh	r6, [r4, #12]
 800d378:	e7e2      	b.n	800d340 <__smakebuf_r+0x10>
 800d37a:	2380      	movs	r3, #128	@ 0x80
 800d37c:	89a2      	ldrh	r2, [r4, #12]
 800d37e:	6020      	str	r0, [r4, #0]
 800d380:	4313      	orrs	r3, r2
 800d382:	81a3      	strh	r3, [r4, #12]
 800d384:	9b03      	ldr	r3, [sp, #12]
 800d386:	6120      	str	r0, [r4, #16]
 800d388:	6167      	str	r7, [r4, #20]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d00c      	beq.n	800d3a8 <__smakebuf_r+0x78>
 800d38e:	0028      	movs	r0, r5
 800d390:	230e      	movs	r3, #14
 800d392:	5ee1      	ldrsh	r1, [r4, r3]
 800d394:	f000 f844 	bl	800d420 <_isatty_r>
 800d398:	2800      	cmp	r0, #0
 800d39a:	d005      	beq.n	800d3a8 <__smakebuf_r+0x78>
 800d39c:	2303      	movs	r3, #3
 800d39e:	89a2      	ldrh	r2, [r4, #12]
 800d3a0:	439a      	bics	r2, r3
 800d3a2:	3b02      	subs	r3, #2
 800d3a4:	4313      	orrs	r3, r2
 800d3a6:	81a3      	strh	r3, [r4, #12]
 800d3a8:	89a3      	ldrh	r3, [r4, #12]
 800d3aa:	9a01      	ldr	r2, [sp, #4]
 800d3ac:	4313      	orrs	r3, r2
 800d3ae:	81a3      	strh	r3, [r4, #12]
 800d3b0:	e7cc      	b.n	800d34c <__smakebuf_r+0x1c>

0800d3b2 <memmove>:
 800d3b2:	b510      	push	{r4, lr}
 800d3b4:	4288      	cmp	r0, r1
 800d3b6:	d806      	bhi.n	800d3c6 <memmove+0x14>
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d008      	beq.n	800d3d0 <memmove+0x1e>
 800d3be:	5ccc      	ldrb	r4, [r1, r3]
 800d3c0:	54c4      	strb	r4, [r0, r3]
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	e7f9      	b.n	800d3ba <memmove+0x8>
 800d3c6:	188b      	adds	r3, r1, r2
 800d3c8:	4298      	cmp	r0, r3
 800d3ca:	d2f5      	bcs.n	800d3b8 <memmove+0x6>
 800d3cc:	3a01      	subs	r2, #1
 800d3ce:	d200      	bcs.n	800d3d2 <memmove+0x20>
 800d3d0:	bd10      	pop	{r4, pc}
 800d3d2:	5c8b      	ldrb	r3, [r1, r2]
 800d3d4:	5483      	strb	r3, [r0, r2]
 800d3d6:	e7f9      	b.n	800d3cc <memmove+0x1a>

0800d3d8 <_close_r>:
 800d3d8:	2300      	movs	r3, #0
 800d3da:	b570      	push	{r4, r5, r6, lr}
 800d3dc:	4d06      	ldr	r5, [pc, #24]	@ (800d3f8 <_close_r+0x20>)
 800d3de:	0004      	movs	r4, r0
 800d3e0:	0008      	movs	r0, r1
 800d3e2:	602b      	str	r3, [r5, #0]
 800d3e4:	f7f7 f96e 	bl	80046c4 <_close>
 800d3e8:	1c43      	adds	r3, r0, #1
 800d3ea:	d103      	bne.n	800d3f4 <_close_r+0x1c>
 800d3ec:	682b      	ldr	r3, [r5, #0]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d000      	beq.n	800d3f4 <_close_r+0x1c>
 800d3f2:	6023      	str	r3, [r4, #0]
 800d3f4:	bd70      	pop	{r4, r5, r6, pc}
 800d3f6:	46c0      	nop			@ (mov r8, r8)
 800d3f8:	2000176c 	.word	0x2000176c

0800d3fc <_fstat_r>:
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	b570      	push	{r4, r5, r6, lr}
 800d400:	4d06      	ldr	r5, [pc, #24]	@ (800d41c <_fstat_r+0x20>)
 800d402:	0004      	movs	r4, r0
 800d404:	0008      	movs	r0, r1
 800d406:	0011      	movs	r1, r2
 800d408:	602b      	str	r3, [r5, #0]
 800d40a:	f7f7 f965 	bl	80046d8 <_fstat>
 800d40e:	1c43      	adds	r3, r0, #1
 800d410:	d103      	bne.n	800d41a <_fstat_r+0x1e>
 800d412:	682b      	ldr	r3, [r5, #0]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d000      	beq.n	800d41a <_fstat_r+0x1e>
 800d418:	6023      	str	r3, [r4, #0]
 800d41a:	bd70      	pop	{r4, r5, r6, pc}
 800d41c:	2000176c 	.word	0x2000176c

0800d420 <_isatty_r>:
 800d420:	2300      	movs	r3, #0
 800d422:	b570      	push	{r4, r5, r6, lr}
 800d424:	4d06      	ldr	r5, [pc, #24]	@ (800d440 <_isatty_r+0x20>)
 800d426:	0004      	movs	r4, r0
 800d428:	0008      	movs	r0, r1
 800d42a:	602b      	str	r3, [r5, #0]
 800d42c:	f7f7 f962 	bl	80046f4 <_isatty>
 800d430:	1c43      	adds	r3, r0, #1
 800d432:	d103      	bne.n	800d43c <_isatty_r+0x1c>
 800d434:	682b      	ldr	r3, [r5, #0]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d000      	beq.n	800d43c <_isatty_r+0x1c>
 800d43a:	6023      	str	r3, [r4, #0]
 800d43c:	bd70      	pop	{r4, r5, r6, pc}
 800d43e:	46c0      	nop			@ (mov r8, r8)
 800d440:	2000176c 	.word	0x2000176c

0800d444 <_lseek_r>:
 800d444:	b570      	push	{r4, r5, r6, lr}
 800d446:	0004      	movs	r4, r0
 800d448:	0008      	movs	r0, r1
 800d44a:	0011      	movs	r1, r2
 800d44c:	001a      	movs	r2, r3
 800d44e:	2300      	movs	r3, #0
 800d450:	4d05      	ldr	r5, [pc, #20]	@ (800d468 <_lseek_r+0x24>)
 800d452:	602b      	str	r3, [r5, #0]
 800d454:	f7f7 f957 	bl	8004706 <_lseek>
 800d458:	1c43      	adds	r3, r0, #1
 800d45a:	d103      	bne.n	800d464 <_lseek_r+0x20>
 800d45c:	682b      	ldr	r3, [r5, #0]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d000      	beq.n	800d464 <_lseek_r+0x20>
 800d462:	6023      	str	r3, [r4, #0]
 800d464:	bd70      	pop	{r4, r5, r6, pc}
 800d466:	46c0      	nop			@ (mov r8, r8)
 800d468:	2000176c 	.word	0x2000176c

0800d46c <_read_r>:
 800d46c:	b570      	push	{r4, r5, r6, lr}
 800d46e:	0004      	movs	r4, r0
 800d470:	0008      	movs	r0, r1
 800d472:	0011      	movs	r1, r2
 800d474:	001a      	movs	r2, r3
 800d476:	2300      	movs	r3, #0
 800d478:	4d05      	ldr	r5, [pc, #20]	@ (800d490 <_read_r+0x24>)
 800d47a:	602b      	str	r3, [r5, #0]
 800d47c:	f7f7 f8e9 	bl	8004652 <_read>
 800d480:	1c43      	adds	r3, r0, #1
 800d482:	d103      	bne.n	800d48c <_read_r+0x20>
 800d484:	682b      	ldr	r3, [r5, #0]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d000      	beq.n	800d48c <_read_r+0x20>
 800d48a:	6023      	str	r3, [r4, #0]
 800d48c:	bd70      	pop	{r4, r5, r6, pc}
 800d48e:	46c0      	nop			@ (mov r8, r8)
 800d490:	2000176c 	.word	0x2000176c

0800d494 <_write_r>:
 800d494:	b570      	push	{r4, r5, r6, lr}
 800d496:	0004      	movs	r4, r0
 800d498:	0008      	movs	r0, r1
 800d49a:	0011      	movs	r1, r2
 800d49c:	001a      	movs	r2, r3
 800d49e:	2300      	movs	r3, #0
 800d4a0:	4d05      	ldr	r5, [pc, #20]	@ (800d4b8 <_write_r+0x24>)
 800d4a2:	602b      	str	r3, [r5, #0]
 800d4a4:	f7f7 f8f2 	bl	800468c <_write>
 800d4a8:	1c43      	adds	r3, r0, #1
 800d4aa:	d103      	bne.n	800d4b4 <_write_r+0x20>
 800d4ac:	682b      	ldr	r3, [r5, #0]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d000      	beq.n	800d4b4 <_write_r+0x20>
 800d4b2:	6023      	str	r3, [r4, #0]
 800d4b4:	bd70      	pop	{r4, r5, r6, pc}
 800d4b6:	46c0      	nop			@ (mov r8, r8)
 800d4b8:	2000176c 	.word	0x2000176c

0800d4bc <__assert_func>:
 800d4bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d4be:	0014      	movs	r4, r2
 800d4c0:	001a      	movs	r2, r3
 800d4c2:	4b09      	ldr	r3, [pc, #36]	@ (800d4e8 <__assert_func+0x2c>)
 800d4c4:	0005      	movs	r5, r0
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	000e      	movs	r6, r1
 800d4ca:	68d8      	ldr	r0, [r3, #12]
 800d4cc:	4b07      	ldr	r3, [pc, #28]	@ (800d4ec <__assert_func+0x30>)
 800d4ce:	2c00      	cmp	r4, #0
 800d4d0:	d101      	bne.n	800d4d6 <__assert_func+0x1a>
 800d4d2:	4b07      	ldr	r3, [pc, #28]	@ (800d4f0 <__assert_func+0x34>)
 800d4d4:	001c      	movs	r4, r3
 800d4d6:	4907      	ldr	r1, [pc, #28]	@ (800d4f4 <__assert_func+0x38>)
 800d4d8:	9301      	str	r3, [sp, #4]
 800d4da:	9402      	str	r4, [sp, #8]
 800d4dc:	002b      	movs	r3, r5
 800d4de:	9600      	str	r6, [sp, #0]
 800d4e0:	f000 f852 	bl	800d588 <fiprintf>
 800d4e4:	f000 f86d 	bl	800d5c2 <abort>
 800d4e8:	20000034 	.word	0x20000034
 800d4ec:	0800df53 	.word	0x0800df53
 800d4f0:	0800df8e 	.word	0x0800df8e
 800d4f4:	0800df60 	.word	0x0800df60

0800d4f8 <_calloc_r>:
 800d4f8:	b570      	push	{r4, r5, r6, lr}
 800d4fa:	0c0b      	lsrs	r3, r1, #16
 800d4fc:	0c15      	lsrs	r5, r2, #16
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d11e      	bne.n	800d540 <_calloc_r+0x48>
 800d502:	2d00      	cmp	r5, #0
 800d504:	d10c      	bne.n	800d520 <_calloc_r+0x28>
 800d506:	b289      	uxth	r1, r1
 800d508:	b294      	uxth	r4, r2
 800d50a:	434c      	muls	r4, r1
 800d50c:	0021      	movs	r1, r4
 800d50e:	f7fd fc8b 	bl	800ae28 <_malloc_r>
 800d512:	1e05      	subs	r5, r0, #0
 800d514:	d01a      	beq.n	800d54c <_calloc_r+0x54>
 800d516:	0022      	movs	r2, r4
 800d518:	2100      	movs	r1, #0
 800d51a:	f7fd ff9f 	bl	800b45c <memset>
 800d51e:	e016      	b.n	800d54e <_calloc_r+0x56>
 800d520:	1c2b      	adds	r3, r5, #0
 800d522:	1c0c      	adds	r4, r1, #0
 800d524:	b289      	uxth	r1, r1
 800d526:	b292      	uxth	r2, r2
 800d528:	434a      	muls	r2, r1
 800d52a:	b29b      	uxth	r3, r3
 800d52c:	b2a1      	uxth	r1, r4
 800d52e:	4359      	muls	r1, r3
 800d530:	0c14      	lsrs	r4, r2, #16
 800d532:	190c      	adds	r4, r1, r4
 800d534:	0c23      	lsrs	r3, r4, #16
 800d536:	d107      	bne.n	800d548 <_calloc_r+0x50>
 800d538:	0424      	lsls	r4, r4, #16
 800d53a:	b292      	uxth	r2, r2
 800d53c:	4314      	orrs	r4, r2
 800d53e:	e7e5      	b.n	800d50c <_calloc_r+0x14>
 800d540:	2d00      	cmp	r5, #0
 800d542:	d101      	bne.n	800d548 <_calloc_r+0x50>
 800d544:	1c14      	adds	r4, r2, #0
 800d546:	e7ed      	b.n	800d524 <_calloc_r+0x2c>
 800d548:	230c      	movs	r3, #12
 800d54a:	6003      	str	r3, [r0, #0]
 800d54c:	2500      	movs	r5, #0
 800d54e:	0028      	movs	r0, r5
 800d550:	bd70      	pop	{r4, r5, r6, pc}

0800d552 <__ascii_mbtowc>:
 800d552:	b082      	sub	sp, #8
 800d554:	2900      	cmp	r1, #0
 800d556:	d100      	bne.n	800d55a <__ascii_mbtowc+0x8>
 800d558:	a901      	add	r1, sp, #4
 800d55a:	1e10      	subs	r0, r2, #0
 800d55c:	d006      	beq.n	800d56c <__ascii_mbtowc+0x1a>
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d006      	beq.n	800d570 <__ascii_mbtowc+0x1e>
 800d562:	7813      	ldrb	r3, [r2, #0]
 800d564:	600b      	str	r3, [r1, #0]
 800d566:	7810      	ldrb	r0, [r2, #0]
 800d568:	1e43      	subs	r3, r0, #1
 800d56a:	4198      	sbcs	r0, r3
 800d56c:	b002      	add	sp, #8
 800d56e:	4770      	bx	lr
 800d570:	2002      	movs	r0, #2
 800d572:	4240      	negs	r0, r0
 800d574:	e7fa      	b.n	800d56c <__ascii_mbtowc+0x1a>

0800d576 <_malloc_usable_size_r>:
 800d576:	1f0b      	subs	r3, r1, #4
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	1f18      	subs	r0, r3, #4
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	da01      	bge.n	800d584 <_malloc_usable_size_r+0xe>
 800d580:	580b      	ldr	r3, [r1, r0]
 800d582:	18c0      	adds	r0, r0, r3
 800d584:	4770      	bx	lr
	...

0800d588 <fiprintf>:
 800d588:	b40e      	push	{r1, r2, r3}
 800d58a:	b517      	push	{r0, r1, r2, r4, lr}
 800d58c:	4c05      	ldr	r4, [pc, #20]	@ (800d5a4 <fiprintf+0x1c>)
 800d58e:	ab05      	add	r3, sp, #20
 800d590:	cb04      	ldmia	r3!, {r2}
 800d592:	0001      	movs	r1, r0
 800d594:	6820      	ldr	r0, [r4, #0]
 800d596:	9301      	str	r3, [sp, #4]
 800d598:	f7ff f812 	bl	800c5c0 <_vfiprintf_r>
 800d59c:	bc1e      	pop	{r1, r2, r3, r4}
 800d59e:	bc08      	pop	{r3}
 800d5a0:	b003      	add	sp, #12
 800d5a2:	4718      	bx	r3
 800d5a4:	20000034 	.word	0x20000034

0800d5a8 <__ascii_wctomb>:
 800d5a8:	0003      	movs	r3, r0
 800d5aa:	1e08      	subs	r0, r1, #0
 800d5ac:	d005      	beq.n	800d5ba <__ascii_wctomb+0x12>
 800d5ae:	2aff      	cmp	r2, #255	@ 0xff
 800d5b0:	d904      	bls.n	800d5bc <__ascii_wctomb+0x14>
 800d5b2:	228a      	movs	r2, #138	@ 0x8a
 800d5b4:	2001      	movs	r0, #1
 800d5b6:	601a      	str	r2, [r3, #0]
 800d5b8:	4240      	negs	r0, r0
 800d5ba:	4770      	bx	lr
 800d5bc:	2001      	movs	r0, #1
 800d5be:	700a      	strb	r2, [r1, #0]
 800d5c0:	e7fb      	b.n	800d5ba <__ascii_wctomb+0x12>

0800d5c2 <abort>:
 800d5c2:	2006      	movs	r0, #6
 800d5c4:	b510      	push	{r4, lr}
 800d5c6:	f000 f82d 	bl	800d624 <raise>
 800d5ca:	2001      	movs	r0, #1
 800d5cc:	f7f7 f834 	bl	8004638 <_exit>

0800d5d0 <_raise_r>:
 800d5d0:	b570      	push	{r4, r5, r6, lr}
 800d5d2:	0004      	movs	r4, r0
 800d5d4:	000d      	movs	r5, r1
 800d5d6:	291f      	cmp	r1, #31
 800d5d8:	d904      	bls.n	800d5e4 <_raise_r+0x14>
 800d5da:	2316      	movs	r3, #22
 800d5dc:	6003      	str	r3, [r0, #0]
 800d5de:	2001      	movs	r0, #1
 800d5e0:	4240      	negs	r0, r0
 800d5e2:	bd70      	pop	{r4, r5, r6, pc}
 800d5e4:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d004      	beq.n	800d5f4 <_raise_r+0x24>
 800d5ea:	008a      	lsls	r2, r1, #2
 800d5ec:	189b      	adds	r3, r3, r2
 800d5ee:	681a      	ldr	r2, [r3, #0]
 800d5f0:	2a00      	cmp	r2, #0
 800d5f2:	d108      	bne.n	800d606 <_raise_r+0x36>
 800d5f4:	0020      	movs	r0, r4
 800d5f6:	f000 f831 	bl	800d65c <_getpid_r>
 800d5fa:	002a      	movs	r2, r5
 800d5fc:	0001      	movs	r1, r0
 800d5fe:	0020      	movs	r0, r4
 800d600:	f000 f81a 	bl	800d638 <_kill_r>
 800d604:	e7ed      	b.n	800d5e2 <_raise_r+0x12>
 800d606:	2a01      	cmp	r2, #1
 800d608:	d009      	beq.n	800d61e <_raise_r+0x4e>
 800d60a:	1c51      	adds	r1, r2, #1
 800d60c:	d103      	bne.n	800d616 <_raise_r+0x46>
 800d60e:	2316      	movs	r3, #22
 800d610:	6003      	str	r3, [r0, #0]
 800d612:	2001      	movs	r0, #1
 800d614:	e7e5      	b.n	800d5e2 <_raise_r+0x12>
 800d616:	2100      	movs	r1, #0
 800d618:	0028      	movs	r0, r5
 800d61a:	6019      	str	r1, [r3, #0]
 800d61c:	4790      	blx	r2
 800d61e:	2000      	movs	r0, #0
 800d620:	e7df      	b.n	800d5e2 <_raise_r+0x12>
	...

0800d624 <raise>:
 800d624:	b510      	push	{r4, lr}
 800d626:	4b03      	ldr	r3, [pc, #12]	@ (800d634 <raise+0x10>)
 800d628:	0001      	movs	r1, r0
 800d62a:	6818      	ldr	r0, [r3, #0]
 800d62c:	f7ff ffd0 	bl	800d5d0 <_raise_r>
 800d630:	bd10      	pop	{r4, pc}
 800d632:	46c0      	nop			@ (mov r8, r8)
 800d634:	20000034 	.word	0x20000034

0800d638 <_kill_r>:
 800d638:	2300      	movs	r3, #0
 800d63a:	b570      	push	{r4, r5, r6, lr}
 800d63c:	4d06      	ldr	r5, [pc, #24]	@ (800d658 <_kill_r+0x20>)
 800d63e:	0004      	movs	r4, r0
 800d640:	0008      	movs	r0, r1
 800d642:	0011      	movs	r1, r2
 800d644:	602b      	str	r3, [r5, #0]
 800d646:	f7f6 ffe7 	bl	8004618 <_kill>
 800d64a:	1c43      	adds	r3, r0, #1
 800d64c:	d103      	bne.n	800d656 <_kill_r+0x1e>
 800d64e:	682b      	ldr	r3, [r5, #0]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d000      	beq.n	800d656 <_kill_r+0x1e>
 800d654:	6023      	str	r3, [r4, #0]
 800d656:	bd70      	pop	{r4, r5, r6, pc}
 800d658:	2000176c 	.word	0x2000176c

0800d65c <_getpid_r>:
 800d65c:	b510      	push	{r4, lr}
 800d65e:	f7f6 ffd5 	bl	800460c <_getpid>
 800d662:	bd10      	pop	{r4, pc}

0800d664 <exp>:
 800d664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d666:	0004      	movs	r4, r0
 800d668:	000d      	movs	r5, r1
 800d66a:	f000 f83b 	bl	800d6e4 <__ieee754_exp>
 800d66e:	0006      	movs	r6, r0
 800d670:	000f      	movs	r7, r1
 800d672:	0020      	movs	r0, r4
 800d674:	0029      	movs	r1, r5
 800d676:	f000 f82d 	bl	800d6d4 <finite>
 800d67a:	2800      	cmp	r0, #0
 800d67c:	d00d      	beq.n	800d69a <exp+0x36>
 800d67e:	0020      	movs	r0, r4
 800d680:	0029      	movs	r1, r5
 800d682:	4a0f      	ldr	r2, [pc, #60]	@ (800d6c0 <exp+0x5c>)
 800d684:	4b0f      	ldr	r3, [pc, #60]	@ (800d6c4 <exp+0x60>)
 800d686:	f7f2 fefb 	bl	8000480 <__aeabi_dcmpgt>
 800d68a:	2800      	cmp	r0, #0
 800d68c:	d008      	beq.n	800d6a0 <exp+0x3c>
 800d68e:	f7fd ff03 	bl	800b498 <__errno>
 800d692:	2322      	movs	r3, #34	@ 0x22
 800d694:	2600      	movs	r6, #0
 800d696:	4f0c      	ldr	r7, [pc, #48]	@ (800d6c8 <exp+0x64>)
 800d698:	6003      	str	r3, [r0, #0]
 800d69a:	0030      	movs	r0, r6
 800d69c:	0039      	movs	r1, r7
 800d69e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6a0:	0020      	movs	r0, r4
 800d6a2:	0029      	movs	r1, r5
 800d6a4:	4a09      	ldr	r2, [pc, #36]	@ (800d6cc <exp+0x68>)
 800d6a6:	4b0a      	ldr	r3, [pc, #40]	@ (800d6d0 <exp+0x6c>)
 800d6a8:	f7f2 fed6 	bl	8000458 <__aeabi_dcmplt>
 800d6ac:	2800      	cmp	r0, #0
 800d6ae:	d0f4      	beq.n	800d69a <exp+0x36>
 800d6b0:	f7fd fef2 	bl	800b498 <__errno>
 800d6b4:	2322      	movs	r3, #34	@ 0x22
 800d6b6:	2600      	movs	r6, #0
 800d6b8:	2700      	movs	r7, #0
 800d6ba:	6003      	str	r3, [r0, #0]
 800d6bc:	e7ed      	b.n	800d69a <exp+0x36>
 800d6be:	46c0      	nop			@ (mov r8, r8)
 800d6c0:	fefa39ef 	.word	0xfefa39ef
 800d6c4:	40862e42 	.word	0x40862e42
 800d6c8:	7ff00000 	.word	0x7ff00000
 800d6cc:	d52d3051 	.word	0xd52d3051
 800d6d0:	c0874910 	.word	0xc0874910

0800d6d4 <finite>:
 800d6d4:	4b02      	ldr	r3, [pc, #8]	@ (800d6e0 <finite+0xc>)
 800d6d6:	0048      	lsls	r0, r1, #1
 800d6d8:	0840      	lsrs	r0, r0, #1
 800d6da:	18c0      	adds	r0, r0, r3
 800d6dc:	0fc0      	lsrs	r0, r0, #31
 800d6de:	4770      	bx	lr
 800d6e0:	80100000 	.word	0x80100000

0800d6e4 <__ieee754_exp>:
 800d6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6e6:	004b      	lsls	r3, r1, #1
 800d6e8:	000f      	movs	r7, r1
 800d6ea:	0fcc      	lsrs	r4, r1, #31
 800d6ec:	4991      	ldr	r1, [pc, #580]	@ (800d934 <__ieee754_exp+0x250>)
 800d6ee:	0006      	movs	r6, r0
 800d6f0:	b089      	sub	sp, #36	@ 0x24
 800d6f2:	085b      	lsrs	r3, r3, #1
 800d6f4:	428b      	cmp	r3, r1
 800d6f6:	d92e      	bls.n	800d756 <__ieee754_exp+0x72>
 800d6f8:	498f      	ldr	r1, [pc, #572]	@ (800d938 <__ieee754_exp+0x254>)
 800d6fa:	428b      	cmp	r3, r1
 800d6fc:	d911      	bls.n	800d722 <__ieee754_exp+0x3e>
 800d6fe:	033b      	lsls	r3, r7, #12
 800d700:	0b1b      	lsrs	r3, r3, #12
 800d702:	4303      	orrs	r3, r0
 800d704:	d006      	beq.n	800d714 <__ieee754_exp+0x30>
 800d706:	0002      	movs	r2, r0
 800d708:	003b      	movs	r3, r7
 800d70a:	0030      	movs	r0, r6
 800d70c:	0039      	movs	r1, r7
 800d70e:	f7f3 fddb 	bl	80012c8 <__aeabi_dadd>
 800d712:	e010      	b.n	800d736 <__ieee754_exp+0x52>
 800d714:	2c00      	cmp	r4, #0
 800d716:	d000      	beq.n	800d71a <__ieee754_exp+0x36>
 800d718:	e109      	b.n	800d92e <__ieee754_exp+0x24a>
 800d71a:	0030      	movs	r0, r6
 800d71c:	0039      	movs	r1, r7
 800d71e:	b009      	add	sp, #36	@ 0x24
 800d720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d722:	0039      	movs	r1, r7
 800d724:	4a85      	ldr	r2, [pc, #532]	@ (800d93c <__ieee754_exp+0x258>)
 800d726:	4b86      	ldr	r3, [pc, #536]	@ (800d940 <__ieee754_exp+0x25c>)
 800d728:	f7f2 feaa 	bl	8000480 <__aeabi_dcmpgt>
 800d72c:	1e05      	subs	r5, r0, #0
 800d72e:	d005      	beq.n	800d73c <__ieee754_exp+0x58>
 800d730:	2000      	movs	r0, #0
 800d732:	f000 f965 	bl	800da00 <__math_oflow>
 800d736:	0006      	movs	r6, r0
 800d738:	000f      	movs	r7, r1
 800d73a:	e7ee      	b.n	800d71a <__ieee754_exp+0x36>
 800d73c:	0030      	movs	r0, r6
 800d73e:	0039      	movs	r1, r7
 800d740:	4a80      	ldr	r2, [pc, #512]	@ (800d944 <__ieee754_exp+0x260>)
 800d742:	4b81      	ldr	r3, [pc, #516]	@ (800d948 <__ieee754_exp+0x264>)
 800d744:	f7f2 fe88 	bl	8000458 <__aeabi_dcmplt>
 800d748:	2800      	cmp	r0, #0
 800d74a:	d100      	bne.n	800d74e <__ieee754_exp+0x6a>
 800d74c:	e07d      	b.n	800d84a <__ieee754_exp+0x166>
 800d74e:	0028      	movs	r0, r5
 800d750:	f000 f94f 	bl	800d9f2 <__math_uflow>
 800d754:	e7ef      	b.n	800d736 <__ieee754_exp+0x52>
 800d756:	4a7d      	ldr	r2, [pc, #500]	@ (800d94c <__ieee754_exp+0x268>)
 800d758:	4293      	cmp	r3, r2
 800d75a:	d800      	bhi.n	800d75e <__ieee754_exp+0x7a>
 800d75c:	e09e      	b.n	800d89c <__ieee754_exp+0x1b8>
 800d75e:	4a7c      	ldr	r2, [pc, #496]	@ (800d950 <__ieee754_exp+0x26c>)
 800d760:	4293      	cmp	r3, r2
 800d762:	d872      	bhi.n	800d84a <__ieee754_exp+0x166>
 800d764:	4b7b      	ldr	r3, [pc, #492]	@ (800d954 <__ieee754_exp+0x270>)
 800d766:	00e5      	lsls	r5, r4, #3
 800d768:	195b      	adds	r3, r3, r5
 800d76a:	681a      	ldr	r2, [r3, #0]
 800d76c:	685b      	ldr	r3, [r3, #4]
 800d76e:	0039      	movs	r1, r7
 800d770:	f7f5 f81a 	bl	80027a8 <__aeabi_dsub>
 800d774:	4b78      	ldr	r3, [pc, #480]	@ (800d958 <__ieee754_exp+0x274>)
 800d776:	9002      	str	r0, [sp, #8]
 800d778:	9103      	str	r1, [sp, #12]
 800d77a:	195b      	adds	r3, r3, r5
 800d77c:	681a      	ldr	r2, [r3, #0]
 800d77e:	685b      	ldr	r3, [r3, #4]
 800d780:	9204      	str	r2, [sp, #16]
 800d782:	9305      	str	r3, [sp, #20]
 800d784:	2301      	movs	r3, #1
 800d786:	1b1b      	subs	r3, r3, r4
 800d788:	1b1b      	subs	r3, r3, r4
 800d78a:	9301      	str	r3, [sp, #4]
 800d78c:	9a04      	ldr	r2, [sp, #16]
 800d78e:	9b05      	ldr	r3, [sp, #20]
 800d790:	9802      	ldr	r0, [sp, #8]
 800d792:	9903      	ldr	r1, [sp, #12]
 800d794:	f7f5 f808 	bl	80027a8 <__aeabi_dsub>
 800d798:	0006      	movs	r6, r0
 800d79a:	000f      	movs	r7, r1
 800d79c:	0032      	movs	r2, r6
 800d79e:	003b      	movs	r3, r7
 800d7a0:	0030      	movs	r0, r6
 800d7a2:	0039      	movs	r1, r7
 800d7a4:	f7f4 fd38 	bl	8002218 <__aeabi_dmul>
 800d7a8:	0004      	movs	r4, r0
 800d7aa:	000d      	movs	r5, r1
 800d7ac:	4a6b      	ldr	r2, [pc, #428]	@ (800d95c <__ieee754_exp+0x278>)
 800d7ae:	4b6c      	ldr	r3, [pc, #432]	@ (800d960 <__ieee754_exp+0x27c>)
 800d7b0:	f7f4 fd32 	bl	8002218 <__aeabi_dmul>
 800d7b4:	4a6b      	ldr	r2, [pc, #428]	@ (800d964 <__ieee754_exp+0x280>)
 800d7b6:	4b6c      	ldr	r3, [pc, #432]	@ (800d968 <__ieee754_exp+0x284>)
 800d7b8:	f7f4 fff6 	bl	80027a8 <__aeabi_dsub>
 800d7bc:	0022      	movs	r2, r4
 800d7be:	002b      	movs	r3, r5
 800d7c0:	f7f4 fd2a 	bl	8002218 <__aeabi_dmul>
 800d7c4:	4a69      	ldr	r2, [pc, #420]	@ (800d96c <__ieee754_exp+0x288>)
 800d7c6:	4b6a      	ldr	r3, [pc, #424]	@ (800d970 <__ieee754_exp+0x28c>)
 800d7c8:	f7f3 fd7e 	bl	80012c8 <__aeabi_dadd>
 800d7cc:	0022      	movs	r2, r4
 800d7ce:	002b      	movs	r3, r5
 800d7d0:	f7f4 fd22 	bl	8002218 <__aeabi_dmul>
 800d7d4:	4a67      	ldr	r2, [pc, #412]	@ (800d974 <__ieee754_exp+0x290>)
 800d7d6:	4b68      	ldr	r3, [pc, #416]	@ (800d978 <__ieee754_exp+0x294>)
 800d7d8:	f7f4 ffe6 	bl	80027a8 <__aeabi_dsub>
 800d7dc:	0022      	movs	r2, r4
 800d7de:	002b      	movs	r3, r5
 800d7e0:	f7f4 fd1a 	bl	8002218 <__aeabi_dmul>
 800d7e4:	4a65      	ldr	r2, [pc, #404]	@ (800d97c <__ieee754_exp+0x298>)
 800d7e6:	4b66      	ldr	r3, [pc, #408]	@ (800d980 <__ieee754_exp+0x29c>)
 800d7e8:	f7f3 fd6e 	bl	80012c8 <__aeabi_dadd>
 800d7ec:	0022      	movs	r2, r4
 800d7ee:	002b      	movs	r3, r5
 800d7f0:	f7f4 fd12 	bl	8002218 <__aeabi_dmul>
 800d7f4:	0002      	movs	r2, r0
 800d7f6:	000b      	movs	r3, r1
 800d7f8:	0030      	movs	r0, r6
 800d7fa:	0039      	movs	r1, r7
 800d7fc:	f7f4 ffd4 	bl	80027a8 <__aeabi_dsub>
 800d800:	000b      	movs	r3, r1
 800d802:	0002      	movs	r2, r0
 800d804:	0004      	movs	r4, r0
 800d806:	000d      	movs	r5, r1
 800d808:	0030      	movs	r0, r6
 800d80a:	0039      	movs	r1, r7
 800d80c:	f7f4 fd04 	bl	8002218 <__aeabi_dmul>
 800d810:	9b01      	ldr	r3, [sp, #4]
 800d812:	9006      	str	r0, [sp, #24]
 800d814:	9107      	str	r1, [sp, #28]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d156      	bne.n	800d8c8 <__ieee754_exp+0x1e4>
 800d81a:	2380      	movs	r3, #128	@ 0x80
 800d81c:	2200      	movs	r2, #0
 800d81e:	0020      	movs	r0, r4
 800d820:	0029      	movs	r1, r5
 800d822:	05db      	lsls	r3, r3, #23
 800d824:	f7f4 ffc0 	bl	80027a8 <__aeabi_dsub>
 800d828:	0002      	movs	r2, r0
 800d82a:	000b      	movs	r3, r1
 800d82c:	9806      	ldr	r0, [sp, #24]
 800d82e:	9907      	ldr	r1, [sp, #28]
 800d830:	f7f4 f8ae 	bl	8001990 <__aeabi_ddiv>
 800d834:	0032      	movs	r2, r6
 800d836:	003b      	movs	r3, r7
 800d838:	f7f4 ffb6 	bl	80027a8 <__aeabi_dsub>
 800d83c:	0002      	movs	r2, r0
 800d83e:	000b      	movs	r3, r1
 800d840:	2000      	movs	r0, #0
 800d842:	4950      	ldr	r1, [pc, #320]	@ (800d984 <__ieee754_exp+0x2a0>)
 800d844:	f7f4 ffb0 	bl	80027a8 <__aeabi_dsub>
 800d848:	e775      	b.n	800d736 <__ieee754_exp+0x52>
 800d84a:	4b4f      	ldr	r3, [pc, #316]	@ (800d988 <__ieee754_exp+0x2a4>)
 800d84c:	00e4      	lsls	r4, r4, #3
 800d84e:	191c      	adds	r4, r3, r4
 800d850:	4a4e      	ldr	r2, [pc, #312]	@ (800d98c <__ieee754_exp+0x2a8>)
 800d852:	4b4f      	ldr	r3, [pc, #316]	@ (800d990 <__ieee754_exp+0x2ac>)
 800d854:	0030      	movs	r0, r6
 800d856:	0039      	movs	r1, r7
 800d858:	f7f4 fcde 	bl	8002218 <__aeabi_dmul>
 800d85c:	6822      	ldr	r2, [r4, #0]
 800d85e:	6863      	ldr	r3, [r4, #4]
 800d860:	f7f3 fd32 	bl	80012c8 <__aeabi_dadd>
 800d864:	f7f5 fb5e 	bl	8002f24 <__aeabi_d2iz>
 800d868:	9001      	str	r0, [sp, #4]
 800d86a:	f7f5 fb97 	bl	8002f9c <__aeabi_i2d>
 800d86e:	4a49      	ldr	r2, [pc, #292]	@ (800d994 <__ieee754_exp+0x2b0>)
 800d870:	4b49      	ldr	r3, [pc, #292]	@ (800d998 <__ieee754_exp+0x2b4>)
 800d872:	0004      	movs	r4, r0
 800d874:	000d      	movs	r5, r1
 800d876:	f7f4 fccf 	bl	8002218 <__aeabi_dmul>
 800d87a:	0002      	movs	r2, r0
 800d87c:	000b      	movs	r3, r1
 800d87e:	0030      	movs	r0, r6
 800d880:	0039      	movs	r1, r7
 800d882:	f7f4 ff91 	bl	80027a8 <__aeabi_dsub>
 800d886:	4a45      	ldr	r2, [pc, #276]	@ (800d99c <__ieee754_exp+0x2b8>)
 800d888:	9002      	str	r0, [sp, #8]
 800d88a:	9103      	str	r1, [sp, #12]
 800d88c:	4b44      	ldr	r3, [pc, #272]	@ (800d9a0 <__ieee754_exp+0x2bc>)
 800d88e:	0020      	movs	r0, r4
 800d890:	0029      	movs	r1, r5
 800d892:	f7f4 fcc1 	bl	8002218 <__aeabi_dmul>
 800d896:	9004      	str	r0, [sp, #16]
 800d898:	9105      	str	r1, [sp, #20]
 800d89a:	e777      	b.n	800d78c <__ieee754_exp+0xa8>
 800d89c:	4a41      	ldr	r2, [pc, #260]	@ (800d9a4 <__ieee754_exp+0x2c0>)
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	d80d      	bhi.n	800d8be <__ieee754_exp+0x1da>
 800d8a2:	4a41      	ldr	r2, [pc, #260]	@ (800d9a8 <__ieee754_exp+0x2c4>)
 800d8a4:	4b41      	ldr	r3, [pc, #260]	@ (800d9ac <__ieee754_exp+0x2c8>)
 800d8a6:	0039      	movs	r1, r7
 800d8a8:	f7f3 fd0e 	bl	80012c8 <__aeabi_dadd>
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	4b35      	ldr	r3, [pc, #212]	@ (800d984 <__ieee754_exp+0x2a0>)
 800d8b0:	f7f2 fde6 	bl	8000480 <__aeabi_dcmpgt>
 800d8b4:	2800      	cmp	r0, #0
 800d8b6:	d005      	beq.n	800d8c4 <__ieee754_exp+0x1e0>
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	4b32      	ldr	r3, [pc, #200]	@ (800d984 <__ieee754_exp+0x2a0>)
 800d8bc:	e725      	b.n	800d70a <__ieee754_exp+0x26>
 800d8be:	2300      	movs	r3, #0
 800d8c0:	9301      	str	r3, [sp, #4]
 800d8c2:	e76b      	b.n	800d79c <__ieee754_exp+0xb8>
 800d8c4:	9001      	str	r0, [sp, #4]
 800d8c6:	e769      	b.n	800d79c <__ieee754_exp+0xb8>
 800d8c8:	2180      	movs	r1, #128	@ 0x80
 800d8ca:	002b      	movs	r3, r5
 800d8cc:	0022      	movs	r2, r4
 800d8ce:	2000      	movs	r0, #0
 800d8d0:	05c9      	lsls	r1, r1, #23
 800d8d2:	f7f4 ff69 	bl	80027a8 <__aeabi_dsub>
 800d8d6:	0002      	movs	r2, r0
 800d8d8:	000b      	movs	r3, r1
 800d8da:	9806      	ldr	r0, [sp, #24]
 800d8dc:	9907      	ldr	r1, [sp, #28]
 800d8de:	f7f4 f857 	bl	8001990 <__aeabi_ddiv>
 800d8e2:	0002      	movs	r2, r0
 800d8e4:	000b      	movs	r3, r1
 800d8e6:	9804      	ldr	r0, [sp, #16]
 800d8e8:	9905      	ldr	r1, [sp, #20]
 800d8ea:	f7f4 ff5d 	bl	80027a8 <__aeabi_dsub>
 800d8ee:	9a02      	ldr	r2, [sp, #8]
 800d8f0:	9b03      	ldr	r3, [sp, #12]
 800d8f2:	f7f4 ff59 	bl	80027a8 <__aeabi_dsub>
 800d8f6:	0002      	movs	r2, r0
 800d8f8:	000b      	movs	r3, r1
 800d8fa:	2000      	movs	r0, #0
 800d8fc:	4921      	ldr	r1, [pc, #132]	@ (800d984 <__ieee754_exp+0x2a0>)
 800d8fe:	f7f4 ff53 	bl	80027a8 <__aeabi_dsub>
 800d902:	4b2b      	ldr	r3, [pc, #172]	@ (800d9b0 <__ieee754_exp+0x2cc>)
 800d904:	9a01      	ldr	r2, [sp, #4]
 800d906:	000d      	movs	r5, r1
 800d908:	429a      	cmp	r2, r3
 800d90a:	db03      	blt.n	800d914 <__ieee754_exp+0x230>
 800d90c:	0511      	lsls	r1, r2, #20
 800d90e:	0006      	movs	r6, r0
 800d910:	194f      	adds	r7, r1, r5
 800d912:	e702      	b.n	800d71a <__ieee754_exp+0x36>
 800d914:	22fa      	movs	r2, #250	@ 0xfa
 800d916:	0092      	lsls	r2, r2, #2
 800d918:	4694      	mov	ip, r2
 800d91a:	9b01      	ldr	r3, [sp, #4]
 800d91c:	2200      	movs	r2, #0
 800d91e:	4463      	add	r3, ip
 800d920:	051b      	lsls	r3, r3, #20
 800d922:	1859      	adds	r1, r3, r1
 800d924:	23b8      	movs	r3, #184	@ 0xb8
 800d926:	045b      	lsls	r3, r3, #17
 800d928:	f7f4 fc76 	bl	8002218 <__aeabi_dmul>
 800d92c:	e703      	b.n	800d736 <__ieee754_exp+0x52>
 800d92e:	2600      	movs	r6, #0
 800d930:	2700      	movs	r7, #0
 800d932:	e6f2      	b.n	800d71a <__ieee754_exp+0x36>
 800d934:	40862e41 	.word	0x40862e41
 800d938:	7fefffff 	.word	0x7fefffff
 800d93c:	fefa39ef 	.word	0xfefa39ef
 800d940:	40862e42 	.word	0x40862e42
 800d944:	d52d3051 	.word	0xd52d3051
 800d948:	c0874910 	.word	0xc0874910
 800d94c:	3fd62e42 	.word	0x3fd62e42
 800d950:	3ff0a2b1 	.word	0x3ff0a2b1
 800d954:	0800dfa0 	.word	0x0800dfa0
 800d958:	0800df90 	.word	0x0800df90
 800d95c:	72bea4d0 	.word	0x72bea4d0
 800d960:	3e663769 	.word	0x3e663769
 800d964:	c5d26bf1 	.word	0xc5d26bf1
 800d968:	3ebbbd41 	.word	0x3ebbbd41
 800d96c:	af25de2c 	.word	0xaf25de2c
 800d970:	3f11566a 	.word	0x3f11566a
 800d974:	16bebd93 	.word	0x16bebd93
 800d978:	3f66c16c 	.word	0x3f66c16c
 800d97c:	5555553e 	.word	0x5555553e
 800d980:	3fc55555 	.word	0x3fc55555
 800d984:	3ff00000 	.word	0x3ff00000
 800d988:	0800dfb0 	.word	0x0800dfb0
 800d98c:	652b82fe 	.word	0x652b82fe
 800d990:	3ff71547 	.word	0x3ff71547
 800d994:	fee00000 	.word	0xfee00000
 800d998:	3fe62e42 	.word	0x3fe62e42
 800d99c:	35793c76 	.word	0x35793c76
 800d9a0:	3dea39ef 	.word	0x3dea39ef
 800d9a4:	3defffff 	.word	0x3defffff
 800d9a8:	8800759c 	.word	0x8800759c
 800d9ac:	7e37e43c 	.word	0x7e37e43c
 800d9b0:	fffffc03 	.word	0xfffffc03

0800d9b4 <with_errno>:
 800d9b4:	b570      	push	{r4, r5, r6, lr}
 800d9b6:	000d      	movs	r5, r1
 800d9b8:	0016      	movs	r6, r2
 800d9ba:	0004      	movs	r4, r0
 800d9bc:	f7fd fd6c 	bl	800b498 <__errno>
 800d9c0:	0029      	movs	r1, r5
 800d9c2:	6006      	str	r6, [r0, #0]
 800d9c4:	0020      	movs	r0, r4
 800d9c6:	bd70      	pop	{r4, r5, r6, pc}

0800d9c8 <xflow>:
 800d9c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d9ca:	0014      	movs	r4, r2
 800d9cc:	001d      	movs	r5, r3
 800d9ce:	2800      	cmp	r0, #0
 800d9d0:	d002      	beq.n	800d9d8 <xflow+0x10>
 800d9d2:	2180      	movs	r1, #128	@ 0x80
 800d9d4:	0609      	lsls	r1, r1, #24
 800d9d6:	185b      	adds	r3, r3, r1
 800d9d8:	9200      	str	r2, [sp, #0]
 800d9da:	9301      	str	r3, [sp, #4]
 800d9dc:	9a00      	ldr	r2, [sp, #0]
 800d9de:	9b01      	ldr	r3, [sp, #4]
 800d9e0:	0020      	movs	r0, r4
 800d9e2:	0029      	movs	r1, r5
 800d9e4:	f7f4 fc18 	bl	8002218 <__aeabi_dmul>
 800d9e8:	2222      	movs	r2, #34	@ 0x22
 800d9ea:	f7ff ffe3 	bl	800d9b4 <with_errno>
 800d9ee:	b003      	add	sp, #12
 800d9f0:	bd30      	pop	{r4, r5, pc}

0800d9f2 <__math_uflow>:
 800d9f2:	2380      	movs	r3, #128	@ 0x80
 800d9f4:	b510      	push	{r4, lr}
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	055b      	lsls	r3, r3, #21
 800d9fa:	f7ff ffe5 	bl	800d9c8 <xflow>
 800d9fe:	bd10      	pop	{r4, pc}

0800da00 <__math_oflow>:
 800da00:	23e0      	movs	r3, #224	@ 0xe0
 800da02:	b510      	push	{r4, lr}
 800da04:	2200      	movs	r2, #0
 800da06:	05db      	lsls	r3, r3, #23
 800da08:	f7ff ffde 	bl	800d9c8 <xflow>
 800da0c:	bd10      	pop	{r4, pc}
	...

0800da10 <_init>:
 800da10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da12:	46c0      	nop			@ (mov r8, r8)
 800da14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da16:	bc08      	pop	{r3}
 800da18:	469e      	mov	lr, r3
 800da1a:	4770      	bx	lr

0800da1c <_fini>:
 800da1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da1e:	46c0      	nop			@ (mov r8, r8)
 800da20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da22:	bc08      	pop	{r3}
 800da24:	469e      	mov	lr, r3
 800da26:	4770      	bx	lr

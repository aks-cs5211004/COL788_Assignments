
SD_card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be64  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  0800bf28  0800bf28  0000cf28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c330  0800c330  0000e074  2**0
                  CONTENTS
  4 .ARM          00000008  0800c330  0800c330  0000d330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c338  0800c338  0000e074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c338  0800c338  0000d338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c33c  0800c33c  0000d33c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0800c340  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000600  20000074  0800c3b4  0000e074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000674  0800c3b4  0000e674  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000e074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e97  00000000  00000000  0000e09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033e5  00000000  00000000  00024f33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001528  00000000  00000000  00028318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000108d  00000000  00000000  00029840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00013ba8  00000000  00000000  0002a8cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00005ec3  00000000  00000000  0003e475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00044338  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005794  00000000  00000000  0004437c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000050  00000000  00000000  00049b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800bf0c 	.word	0x0800bf0c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	0800bf0c 	.word	0x0800bf0c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_cdrcmple>:
 8000244:	4684      	mov	ip, r0
 8000246:	0010      	movs	r0, r2
 8000248:	4662      	mov	r2, ip
 800024a:	468c      	mov	ip, r1
 800024c:	0019      	movs	r1, r3
 800024e:	4663      	mov	r3, ip
 8000250:	e000      	b.n	8000254 <__aeabi_cdcmpeq>
 8000252:	46c0      	nop			@ (mov r8, r8)

08000254 <__aeabi_cdcmpeq>:
 8000254:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000256:	f001 fcef 	bl	8001c38 <__ledf2>
 800025a:	2800      	cmp	r0, #0
 800025c:	d401      	bmi.n	8000262 <__aeabi_cdcmpeq+0xe>
 800025e:	2100      	movs	r1, #0
 8000260:	42c8      	cmn	r0, r1
 8000262:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000264 <__aeabi_dcmpeq>:
 8000264:	b510      	push	{r4, lr}
 8000266:	f001 fc2f 	bl	8001ac8 <__eqdf2>
 800026a:	4240      	negs	r0, r0
 800026c:	3001      	adds	r0, #1
 800026e:	bd10      	pop	{r4, pc}

08000270 <__aeabi_dcmplt>:
 8000270:	b510      	push	{r4, lr}
 8000272:	f001 fce1 	bl	8001c38 <__ledf2>
 8000276:	2800      	cmp	r0, #0
 8000278:	db01      	blt.n	800027e <__aeabi_dcmplt+0xe>
 800027a:	2000      	movs	r0, #0
 800027c:	bd10      	pop	{r4, pc}
 800027e:	2001      	movs	r0, #1
 8000280:	bd10      	pop	{r4, pc}
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__aeabi_dcmple>:
 8000284:	b510      	push	{r4, lr}
 8000286:	f001 fcd7 	bl	8001c38 <__ledf2>
 800028a:	2800      	cmp	r0, #0
 800028c:	dd01      	ble.n	8000292 <__aeabi_dcmple+0xe>
 800028e:	2000      	movs	r0, #0
 8000290:	bd10      	pop	{r4, pc}
 8000292:	2001      	movs	r0, #1
 8000294:	bd10      	pop	{r4, pc}
 8000296:	46c0      	nop			@ (mov r8, r8)

08000298 <__aeabi_dcmpgt>:
 8000298:	b510      	push	{r4, lr}
 800029a:	f001 fc59 	bl	8001b50 <__gedf2>
 800029e:	2800      	cmp	r0, #0
 80002a0:	dc01      	bgt.n	80002a6 <__aeabi_dcmpgt+0xe>
 80002a2:	2000      	movs	r0, #0
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	2001      	movs	r0, #1
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	46c0      	nop			@ (mov r8, r8)

080002ac <__aeabi_dcmpge>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	f001 fc4f 	bl	8001b50 <__gedf2>
 80002b2:	2800      	cmp	r0, #0
 80002b4:	da01      	bge.n	80002ba <__aeabi_dcmpge+0xe>
 80002b6:	2000      	movs	r0, #0
 80002b8:	bd10      	pop	{r4, pc}
 80002ba:	2001      	movs	r0, #1
 80002bc:	bd10      	pop	{r4, pc}
 80002be:	46c0      	nop			@ (mov r8, r8)

080002c0 <__aeabi_uldivmod>:
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d111      	bne.n	80002e8 <__aeabi_uldivmod+0x28>
 80002c4:	2a00      	cmp	r2, #0
 80002c6:	d10f      	bne.n	80002e8 <__aeabi_uldivmod+0x28>
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d100      	bne.n	80002ce <__aeabi_uldivmod+0xe>
 80002cc:	2800      	cmp	r0, #0
 80002ce:	d002      	beq.n	80002d6 <__aeabi_uldivmod+0x16>
 80002d0:	2100      	movs	r1, #0
 80002d2:	43c9      	mvns	r1, r1
 80002d4:	0008      	movs	r0, r1
 80002d6:	b407      	push	{r0, r1, r2}
 80002d8:	4802      	ldr	r0, [pc, #8]	@ (80002e4 <__aeabi_uldivmod+0x24>)
 80002da:	a102      	add	r1, pc, #8	@ (adr r1, 80002e4 <__aeabi_uldivmod+0x24>)
 80002dc:	1840      	adds	r0, r0, r1
 80002de:	9002      	str	r0, [sp, #8]
 80002e0:	bd03      	pop	{r0, r1, pc}
 80002e2:	46c0      	nop			@ (mov r8, r8)
 80002e4:	ffffff5d 	.word	0xffffff5d
 80002e8:	b403      	push	{r0, r1}
 80002ea:	4668      	mov	r0, sp
 80002ec:	b501      	push	{r0, lr}
 80002ee:	9802      	ldr	r0, [sp, #8]
 80002f0:	f000 f852 	bl	8000398 <__udivmoddi4>
 80002f4:	9b01      	ldr	r3, [sp, #4]
 80002f6:	469e      	mov	lr, r3
 80002f8:	b002      	add	sp, #8
 80002fa:	bc0c      	pop	{r2, r3}
 80002fc:	4770      	bx	lr
 80002fe:	46c0      	nop			@ (mov r8, r8)

08000300 <__aeabi_lmul>:
 8000300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000302:	46ce      	mov	lr, r9
 8000304:	4699      	mov	r9, r3
 8000306:	0c03      	lsrs	r3, r0, #16
 8000308:	469c      	mov	ip, r3
 800030a:	0413      	lsls	r3, r2, #16
 800030c:	4647      	mov	r7, r8
 800030e:	0c1b      	lsrs	r3, r3, #16
 8000310:	001d      	movs	r5, r3
 8000312:	000e      	movs	r6, r1
 8000314:	4661      	mov	r1, ip
 8000316:	0404      	lsls	r4, r0, #16
 8000318:	0c24      	lsrs	r4, r4, #16
 800031a:	b580      	push	{r7, lr}
 800031c:	0007      	movs	r7, r0
 800031e:	0c10      	lsrs	r0, r2, #16
 8000320:	434b      	muls	r3, r1
 8000322:	4365      	muls	r5, r4
 8000324:	4341      	muls	r1, r0
 8000326:	4360      	muls	r0, r4
 8000328:	0c2c      	lsrs	r4, r5, #16
 800032a:	18c0      	adds	r0, r0, r3
 800032c:	1824      	adds	r4, r4, r0
 800032e:	468c      	mov	ip, r1
 8000330:	42a3      	cmp	r3, r4
 8000332:	d903      	bls.n	800033c <__aeabi_lmul+0x3c>
 8000334:	2380      	movs	r3, #128	@ 0x80
 8000336:	025b      	lsls	r3, r3, #9
 8000338:	4698      	mov	r8, r3
 800033a:	44c4      	add	ip, r8
 800033c:	4649      	mov	r1, r9
 800033e:	4379      	muls	r1, r7
 8000340:	4356      	muls	r6, r2
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	042d      	lsls	r5, r5, #16
 8000346:	0c2d      	lsrs	r5, r5, #16
 8000348:	1989      	adds	r1, r1, r6
 800034a:	4463      	add	r3, ip
 800034c:	0424      	lsls	r4, r4, #16
 800034e:	1960      	adds	r0, r4, r5
 8000350:	18c9      	adds	r1, r1, r3
 8000352:	bcc0      	pop	{r6, r7}
 8000354:	46b9      	mov	r9, r7
 8000356:	46b0      	mov	r8, r6
 8000358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035a:	46c0      	nop			@ (mov r8, r8)

0800035c <__aeabi_d2uiz>:
 800035c:	b570      	push	{r4, r5, r6, lr}
 800035e:	2200      	movs	r2, #0
 8000360:	4b0c      	ldr	r3, [pc, #48]	@ (8000394 <__aeabi_d2uiz+0x38>)
 8000362:	0004      	movs	r4, r0
 8000364:	000d      	movs	r5, r1
 8000366:	f7ff ffa1 	bl	80002ac <__aeabi_dcmpge>
 800036a:	2800      	cmp	r0, #0
 800036c:	d104      	bne.n	8000378 <__aeabi_d2uiz+0x1c>
 800036e:	0020      	movs	r0, r4
 8000370:	0029      	movs	r1, r5
 8000372:	f002 fb37 	bl	80029e4 <__aeabi_d2iz>
 8000376:	bd70      	pop	{r4, r5, r6, pc}
 8000378:	4b06      	ldr	r3, [pc, #24]	@ (8000394 <__aeabi_d2uiz+0x38>)
 800037a:	2200      	movs	r2, #0
 800037c:	0020      	movs	r0, r4
 800037e:	0029      	movs	r1, r5
 8000380:	f001 ff94 	bl	80022ac <__aeabi_dsub>
 8000384:	f002 fb2e 	bl	80029e4 <__aeabi_d2iz>
 8000388:	2380      	movs	r3, #128	@ 0x80
 800038a:	061b      	lsls	r3, r3, #24
 800038c:	469c      	mov	ip, r3
 800038e:	4460      	add	r0, ip
 8000390:	e7f1      	b.n	8000376 <__aeabi_d2uiz+0x1a>
 8000392:	46c0      	nop			@ (mov r8, r8)
 8000394:	41e00000 	.word	0x41e00000

08000398 <__udivmoddi4>:
 8000398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800039a:	4657      	mov	r7, sl
 800039c:	464e      	mov	r6, r9
 800039e:	4645      	mov	r5, r8
 80003a0:	46de      	mov	lr, fp
 80003a2:	b5e0      	push	{r5, r6, r7, lr}
 80003a4:	0004      	movs	r4, r0
 80003a6:	000d      	movs	r5, r1
 80003a8:	4692      	mov	sl, r2
 80003aa:	4699      	mov	r9, r3
 80003ac:	b083      	sub	sp, #12
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d830      	bhi.n	8000414 <__udivmoddi4+0x7c>
 80003b2:	d02d      	beq.n	8000410 <__udivmoddi4+0x78>
 80003b4:	4649      	mov	r1, r9
 80003b6:	4650      	mov	r0, sl
 80003b8:	f002 fc68 	bl	8002c8c <__clzdi2>
 80003bc:	0029      	movs	r1, r5
 80003be:	0006      	movs	r6, r0
 80003c0:	0020      	movs	r0, r4
 80003c2:	f002 fc63 	bl	8002c8c <__clzdi2>
 80003c6:	1a33      	subs	r3, r6, r0
 80003c8:	4698      	mov	r8, r3
 80003ca:	3b20      	subs	r3, #32
 80003cc:	d434      	bmi.n	8000438 <__udivmoddi4+0xa0>
 80003ce:	469b      	mov	fp, r3
 80003d0:	4653      	mov	r3, sl
 80003d2:	465a      	mov	r2, fp
 80003d4:	4093      	lsls	r3, r2
 80003d6:	4642      	mov	r2, r8
 80003d8:	001f      	movs	r7, r3
 80003da:	4653      	mov	r3, sl
 80003dc:	4093      	lsls	r3, r2
 80003de:	001e      	movs	r6, r3
 80003e0:	42af      	cmp	r7, r5
 80003e2:	d83b      	bhi.n	800045c <__udivmoddi4+0xc4>
 80003e4:	42af      	cmp	r7, r5
 80003e6:	d100      	bne.n	80003ea <__udivmoddi4+0x52>
 80003e8:	e079      	b.n	80004de <__udivmoddi4+0x146>
 80003ea:	465b      	mov	r3, fp
 80003ec:	1ba4      	subs	r4, r4, r6
 80003ee:	41bd      	sbcs	r5, r7
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	da00      	bge.n	80003f6 <__udivmoddi4+0x5e>
 80003f4:	e076      	b.n	80004e4 <__udivmoddi4+0x14c>
 80003f6:	2200      	movs	r2, #0
 80003f8:	2300      	movs	r3, #0
 80003fa:	9200      	str	r2, [sp, #0]
 80003fc:	9301      	str	r3, [sp, #4]
 80003fe:	2301      	movs	r3, #1
 8000400:	465a      	mov	r2, fp
 8000402:	4093      	lsls	r3, r2
 8000404:	9301      	str	r3, [sp, #4]
 8000406:	2301      	movs	r3, #1
 8000408:	4642      	mov	r2, r8
 800040a:	4093      	lsls	r3, r2
 800040c:	9300      	str	r3, [sp, #0]
 800040e:	e029      	b.n	8000464 <__udivmoddi4+0xcc>
 8000410:	4282      	cmp	r2, r0
 8000412:	d9cf      	bls.n	80003b4 <__udivmoddi4+0x1c>
 8000414:	2200      	movs	r2, #0
 8000416:	2300      	movs	r3, #0
 8000418:	9200      	str	r2, [sp, #0]
 800041a:	9301      	str	r3, [sp, #4]
 800041c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <__udivmoddi4+0x8e>
 8000422:	601c      	str	r4, [r3, #0]
 8000424:	605d      	str	r5, [r3, #4]
 8000426:	9800      	ldr	r0, [sp, #0]
 8000428:	9901      	ldr	r1, [sp, #4]
 800042a:	b003      	add	sp, #12
 800042c:	bcf0      	pop	{r4, r5, r6, r7}
 800042e:	46bb      	mov	fp, r7
 8000430:	46b2      	mov	sl, r6
 8000432:	46a9      	mov	r9, r5
 8000434:	46a0      	mov	r8, r4
 8000436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000438:	4642      	mov	r2, r8
 800043a:	469b      	mov	fp, r3
 800043c:	2320      	movs	r3, #32
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	4652      	mov	r2, sl
 8000442:	40da      	lsrs	r2, r3
 8000444:	4641      	mov	r1, r8
 8000446:	0013      	movs	r3, r2
 8000448:	464a      	mov	r2, r9
 800044a:	408a      	lsls	r2, r1
 800044c:	0017      	movs	r7, r2
 800044e:	4642      	mov	r2, r8
 8000450:	431f      	orrs	r7, r3
 8000452:	4653      	mov	r3, sl
 8000454:	4093      	lsls	r3, r2
 8000456:	001e      	movs	r6, r3
 8000458:	42af      	cmp	r7, r5
 800045a:	d9c3      	bls.n	80003e4 <__udivmoddi4+0x4c>
 800045c:	2200      	movs	r2, #0
 800045e:	2300      	movs	r3, #0
 8000460:	9200      	str	r2, [sp, #0]
 8000462:	9301      	str	r3, [sp, #4]
 8000464:	4643      	mov	r3, r8
 8000466:	2b00      	cmp	r3, #0
 8000468:	d0d8      	beq.n	800041c <__udivmoddi4+0x84>
 800046a:	07fb      	lsls	r3, r7, #31
 800046c:	0872      	lsrs	r2, r6, #1
 800046e:	431a      	orrs	r2, r3
 8000470:	4646      	mov	r6, r8
 8000472:	087b      	lsrs	r3, r7, #1
 8000474:	e00e      	b.n	8000494 <__udivmoddi4+0xfc>
 8000476:	42ab      	cmp	r3, r5
 8000478:	d101      	bne.n	800047e <__udivmoddi4+0xe6>
 800047a:	42a2      	cmp	r2, r4
 800047c:	d80c      	bhi.n	8000498 <__udivmoddi4+0x100>
 800047e:	1aa4      	subs	r4, r4, r2
 8000480:	419d      	sbcs	r5, r3
 8000482:	2001      	movs	r0, #1
 8000484:	1924      	adds	r4, r4, r4
 8000486:	416d      	adcs	r5, r5
 8000488:	2100      	movs	r1, #0
 800048a:	3e01      	subs	r6, #1
 800048c:	1824      	adds	r4, r4, r0
 800048e:	414d      	adcs	r5, r1
 8000490:	2e00      	cmp	r6, #0
 8000492:	d006      	beq.n	80004a2 <__udivmoddi4+0x10a>
 8000494:	42ab      	cmp	r3, r5
 8000496:	d9ee      	bls.n	8000476 <__udivmoddi4+0xde>
 8000498:	3e01      	subs	r6, #1
 800049a:	1924      	adds	r4, r4, r4
 800049c:	416d      	adcs	r5, r5
 800049e:	2e00      	cmp	r6, #0
 80004a0:	d1f8      	bne.n	8000494 <__udivmoddi4+0xfc>
 80004a2:	9800      	ldr	r0, [sp, #0]
 80004a4:	9901      	ldr	r1, [sp, #4]
 80004a6:	465b      	mov	r3, fp
 80004a8:	1900      	adds	r0, r0, r4
 80004aa:	4169      	adcs	r1, r5
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	db24      	blt.n	80004fa <__udivmoddi4+0x162>
 80004b0:	002b      	movs	r3, r5
 80004b2:	465a      	mov	r2, fp
 80004b4:	4644      	mov	r4, r8
 80004b6:	40d3      	lsrs	r3, r2
 80004b8:	002a      	movs	r2, r5
 80004ba:	40e2      	lsrs	r2, r4
 80004bc:	001c      	movs	r4, r3
 80004be:	465b      	mov	r3, fp
 80004c0:	0015      	movs	r5, r2
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	db2a      	blt.n	800051c <__udivmoddi4+0x184>
 80004c6:	0026      	movs	r6, r4
 80004c8:	409e      	lsls	r6, r3
 80004ca:	0033      	movs	r3, r6
 80004cc:	0026      	movs	r6, r4
 80004ce:	4647      	mov	r7, r8
 80004d0:	40be      	lsls	r6, r7
 80004d2:	0032      	movs	r2, r6
 80004d4:	1a80      	subs	r0, r0, r2
 80004d6:	4199      	sbcs	r1, r3
 80004d8:	9000      	str	r0, [sp, #0]
 80004da:	9101      	str	r1, [sp, #4]
 80004dc:	e79e      	b.n	800041c <__udivmoddi4+0x84>
 80004de:	42a3      	cmp	r3, r4
 80004e0:	d8bc      	bhi.n	800045c <__udivmoddi4+0xc4>
 80004e2:	e782      	b.n	80003ea <__udivmoddi4+0x52>
 80004e4:	4642      	mov	r2, r8
 80004e6:	2320      	movs	r3, #32
 80004e8:	2100      	movs	r1, #0
 80004ea:	1a9b      	subs	r3, r3, r2
 80004ec:	2200      	movs	r2, #0
 80004ee:	9100      	str	r1, [sp, #0]
 80004f0:	9201      	str	r2, [sp, #4]
 80004f2:	2201      	movs	r2, #1
 80004f4:	40da      	lsrs	r2, r3
 80004f6:	9201      	str	r2, [sp, #4]
 80004f8:	e785      	b.n	8000406 <__udivmoddi4+0x6e>
 80004fa:	4642      	mov	r2, r8
 80004fc:	2320      	movs	r3, #32
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	002a      	movs	r2, r5
 8000502:	4646      	mov	r6, r8
 8000504:	409a      	lsls	r2, r3
 8000506:	0023      	movs	r3, r4
 8000508:	40f3      	lsrs	r3, r6
 800050a:	4644      	mov	r4, r8
 800050c:	4313      	orrs	r3, r2
 800050e:	002a      	movs	r2, r5
 8000510:	40e2      	lsrs	r2, r4
 8000512:	001c      	movs	r4, r3
 8000514:	465b      	mov	r3, fp
 8000516:	0015      	movs	r5, r2
 8000518:	2b00      	cmp	r3, #0
 800051a:	dad4      	bge.n	80004c6 <__udivmoddi4+0x12e>
 800051c:	4642      	mov	r2, r8
 800051e:	002f      	movs	r7, r5
 8000520:	2320      	movs	r3, #32
 8000522:	0026      	movs	r6, r4
 8000524:	4097      	lsls	r7, r2
 8000526:	1a9b      	subs	r3, r3, r2
 8000528:	40de      	lsrs	r6, r3
 800052a:	003b      	movs	r3, r7
 800052c:	4333      	orrs	r3, r6
 800052e:	e7cd      	b.n	80004cc <__udivmoddi4+0x134>

08000530 <__aeabi_fadd>:
 8000530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000532:	46ce      	mov	lr, r9
 8000534:	4647      	mov	r7, r8
 8000536:	0243      	lsls	r3, r0, #9
 8000538:	0a5a      	lsrs	r2, r3, #9
 800053a:	024e      	lsls	r6, r1, #9
 800053c:	0045      	lsls	r5, r0, #1
 800053e:	0fc4      	lsrs	r4, r0, #31
 8000540:	0048      	lsls	r0, r1, #1
 8000542:	4691      	mov	r9, r2
 8000544:	0e2d      	lsrs	r5, r5, #24
 8000546:	0a72      	lsrs	r2, r6, #9
 8000548:	0e00      	lsrs	r0, r0, #24
 800054a:	4694      	mov	ip, r2
 800054c:	b580      	push	{r7, lr}
 800054e:	099b      	lsrs	r3, r3, #6
 8000550:	0fc9      	lsrs	r1, r1, #31
 8000552:	09b6      	lsrs	r6, r6, #6
 8000554:	1a2a      	subs	r2, r5, r0
 8000556:	428c      	cmp	r4, r1
 8000558:	d021      	beq.n	800059e <__aeabi_fadd+0x6e>
 800055a:	2a00      	cmp	r2, #0
 800055c:	dd0d      	ble.n	800057a <__aeabi_fadd+0x4a>
 800055e:	2800      	cmp	r0, #0
 8000560:	d12d      	bne.n	80005be <__aeabi_fadd+0x8e>
 8000562:	2e00      	cmp	r6, #0
 8000564:	d100      	bne.n	8000568 <__aeabi_fadd+0x38>
 8000566:	e08d      	b.n	8000684 <__aeabi_fadd+0x154>
 8000568:	1e51      	subs	r1, r2, #1
 800056a:	2a01      	cmp	r2, #1
 800056c:	d100      	bne.n	8000570 <__aeabi_fadd+0x40>
 800056e:	e11d      	b.n	80007ac <__aeabi_fadd+0x27c>
 8000570:	2aff      	cmp	r2, #255	@ 0xff
 8000572:	d100      	bne.n	8000576 <__aeabi_fadd+0x46>
 8000574:	e0ab      	b.n	80006ce <__aeabi_fadd+0x19e>
 8000576:	000a      	movs	r2, r1
 8000578:	e027      	b.n	80005ca <__aeabi_fadd+0x9a>
 800057a:	2a00      	cmp	r2, #0
 800057c:	d04d      	beq.n	800061a <__aeabi_fadd+0xea>
 800057e:	1b42      	subs	r2, r0, r5
 8000580:	2d00      	cmp	r5, #0
 8000582:	d000      	beq.n	8000586 <__aeabi_fadd+0x56>
 8000584:	e0cc      	b.n	8000720 <__aeabi_fadd+0x1f0>
 8000586:	2b00      	cmp	r3, #0
 8000588:	d100      	bne.n	800058c <__aeabi_fadd+0x5c>
 800058a:	e079      	b.n	8000680 <__aeabi_fadd+0x150>
 800058c:	1e54      	subs	r4, r2, #1
 800058e:	2a01      	cmp	r2, #1
 8000590:	d100      	bne.n	8000594 <__aeabi_fadd+0x64>
 8000592:	e128      	b.n	80007e6 <__aeabi_fadd+0x2b6>
 8000594:	2aff      	cmp	r2, #255	@ 0xff
 8000596:	d100      	bne.n	800059a <__aeabi_fadd+0x6a>
 8000598:	e097      	b.n	80006ca <__aeabi_fadd+0x19a>
 800059a:	0022      	movs	r2, r4
 800059c:	e0c5      	b.n	800072a <__aeabi_fadd+0x1fa>
 800059e:	2a00      	cmp	r2, #0
 80005a0:	dc00      	bgt.n	80005a4 <__aeabi_fadd+0x74>
 80005a2:	e096      	b.n	80006d2 <__aeabi_fadd+0x1a2>
 80005a4:	2800      	cmp	r0, #0
 80005a6:	d04f      	beq.n	8000648 <__aeabi_fadd+0x118>
 80005a8:	2dff      	cmp	r5, #255	@ 0xff
 80005aa:	d100      	bne.n	80005ae <__aeabi_fadd+0x7e>
 80005ac:	e08f      	b.n	80006ce <__aeabi_fadd+0x19e>
 80005ae:	2180      	movs	r1, #128	@ 0x80
 80005b0:	04c9      	lsls	r1, r1, #19
 80005b2:	430e      	orrs	r6, r1
 80005b4:	2a1b      	cmp	r2, #27
 80005b6:	dd51      	ble.n	800065c <__aeabi_fadd+0x12c>
 80005b8:	002a      	movs	r2, r5
 80005ba:	3301      	adds	r3, #1
 80005bc:	e018      	b.n	80005f0 <__aeabi_fadd+0xc0>
 80005be:	2dff      	cmp	r5, #255	@ 0xff
 80005c0:	d100      	bne.n	80005c4 <__aeabi_fadd+0x94>
 80005c2:	e084      	b.n	80006ce <__aeabi_fadd+0x19e>
 80005c4:	2180      	movs	r1, #128	@ 0x80
 80005c6:	04c9      	lsls	r1, r1, #19
 80005c8:	430e      	orrs	r6, r1
 80005ca:	2101      	movs	r1, #1
 80005cc:	2a1b      	cmp	r2, #27
 80005ce:	dc08      	bgt.n	80005e2 <__aeabi_fadd+0xb2>
 80005d0:	0031      	movs	r1, r6
 80005d2:	2020      	movs	r0, #32
 80005d4:	40d1      	lsrs	r1, r2
 80005d6:	1a82      	subs	r2, r0, r2
 80005d8:	4096      	lsls	r6, r2
 80005da:	0032      	movs	r2, r6
 80005dc:	1e50      	subs	r0, r2, #1
 80005de:	4182      	sbcs	r2, r0
 80005e0:	4311      	orrs	r1, r2
 80005e2:	1a5b      	subs	r3, r3, r1
 80005e4:	015a      	lsls	r2, r3, #5
 80005e6:	d459      	bmi.n	800069c <__aeabi_fadd+0x16c>
 80005e8:	2107      	movs	r1, #7
 80005ea:	002a      	movs	r2, r5
 80005ec:	4019      	ands	r1, r3
 80005ee:	d049      	beq.n	8000684 <__aeabi_fadd+0x154>
 80005f0:	210f      	movs	r1, #15
 80005f2:	4019      	ands	r1, r3
 80005f4:	2904      	cmp	r1, #4
 80005f6:	d000      	beq.n	80005fa <__aeabi_fadd+0xca>
 80005f8:	3304      	adds	r3, #4
 80005fa:	0159      	lsls	r1, r3, #5
 80005fc:	d542      	bpl.n	8000684 <__aeabi_fadd+0x154>
 80005fe:	1c50      	adds	r0, r2, #1
 8000600:	2afe      	cmp	r2, #254	@ 0xfe
 8000602:	d03a      	beq.n	800067a <__aeabi_fadd+0x14a>
 8000604:	019b      	lsls	r3, r3, #6
 8000606:	b2c0      	uxtb	r0, r0
 8000608:	0a5b      	lsrs	r3, r3, #9
 800060a:	05c0      	lsls	r0, r0, #23
 800060c:	4318      	orrs	r0, r3
 800060e:	07e4      	lsls	r4, r4, #31
 8000610:	4320      	orrs	r0, r4
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800061a:	20fe      	movs	r0, #254	@ 0xfe
 800061c:	4680      	mov	r8, r0
 800061e:	1c6f      	adds	r7, r5, #1
 8000620:	0038      	movs	r0, r7
 8000622:	4647      	mov	r7, r8
 8000624:	4207      	tst	r7, r0
 8000626:	d000      	beq.n	800062a <__aeabi_fadd+0xfa>
 8000628:	e08e      	b.n	8000748 <__aeabi_fadd+0x218>
 800062a:	2d00      	cmp	r5, #0
 800062c:	d000      	beq.n	8000630 <__aeabi_fadd+0x100>
 800062e:	e0b4      	b.n	800079a <__aeabi_fadd+0x26a>
 8000630:	2b00      	cmp	r3, #0
 8000632:	d100      	bne.n	8000636 <__aeabi_fadd+0x106>
 8000634:	e0db      	b.n	80007ee <__aeabi_fadd+0x2be>
 8000636:	2e00      	cmp	r6, #0
 8000638:	d06c      	beq.n	8000714 <__aeabi_fadd+0x1e4>
 800063a:	1b98      	subs	r0, r3, r6
 800063c:	0145      	lsls	r5, r0, #5
 800063e:	d400      	bmi.n	8000642 <__aeabi_fadd+0x112>
 8000640:	e0f7      	b.n	8000832 <__aeabi_fadd+0x302>
 8000642:	000c      	movs	r4, r1
 8000644:	1af3      	subs	r3, r6, r3
 8000646:	e03d      	b.n	80006c4 <__aeabi_fadd+0x194>
 8000648:	2e00      	cmp	r6, #0
 800064a:	d01b      	beq.n	8000684 <__aeabi_fadd+0x154>
 800064c:	1e51      	subs	r1, r2, #1
 800064e:	2a01      	cmp	r2, #1
 8000650:	d100      	bne.n	8000654 <__aeabi_fadd+0x124>
 8000652:	e082      	b.n	800075a <__aeabi_fadd+0x22a>
 8000654:	2aff      	cmp	r2, #255	@ 0xff
 8000656:	d03a      	beq.n	80006ce <__aeabi_fadd+0x19e>
 8000658:	000a      	movs	r2, r1
 800065a:	e7ab      	b.n	80005b4 <__aeabi_fadd+0x84>
 800065c:	0031      	movs	r1, r6
 800065e:	2020      	movs	r0, #32
 8000660:	40d1      	lsrs	r1, r2
 8000662:	1a82      	subs	r2, r0, r2
 8000664:	4096      	lsls	r6, r2
 8000666:	0032      	movs	r2, r6
 8000668:	1e50      	subs	r0, r2, #1
 800066a:	4182      	sbcs	r2, r0
 800066c:	430a      	orrs	r2, r1
 800066e:	189b      	adds	r3, r3, r2
 8000670:	015a      	lsls	r2, r3, #5
 8000672:	d5b9      	bpl.n	80005e8 <__aeabi_fadd+0xb8>
 8000674:	1c6a      	adds	r2, r5, #1
 8000676:	2dfe      	cmp	r5, #254	@ 0xfe
 8000678:	d175      	bne.n	8000766 <__aeabi_fadd+0x236>
 800067a:	20ff      	movs	r0, #255	@ 0xff
 800067c:	2300      	movs	r3, #0
 800067e:	e7c4      	b.n	800060a <__aeabi_fadd+0xda>
 8000680:	000c      	movs	r4, r1
 8000682:	0033      	movs	r3, r6
 8000684:	08db      	lsrs	r3, r3, #3
 8000686:	2aff      	cmp	r2, #255	@ 0xff
 8000688:	d146      	bne.n	8000718 <__aeabi_fadd+0x1e8>
 800068a:	2b00      	cmp	r3, #0
 800068c:	d0f5      	beq.n	800067a <__aeabi_fadd+0x14a>
 800068e:	2280      	movs	r2, #128	@ 0x80
 8000690:	03d2      	lsls	r2, r2, #15
 8000692:	4313      	orrs	r3, r2
 8000694:	025b      	lsls	r3, r3, #9
 8000696:	20ff      	movs	r0, #255	@ 0xff
 8000698:	0a5b      	lsrs	r3, r3, #9
 800069a:	e7b6      	b.n	800060a <__aeabi_fadd+0xda>
 800069c:	019f      	lsls	r7, r3, #6
 800069e:	09bf      	lsrs	r7, r7, #6
 80006a0:	0038      	movs	r0, r7
 80006a2:	f002 fad5 	bl	8002c50 <__clzsi2>
 80006a6:	3805      	subs	r0, #5
 80006a8:	4087      	lsls	r7, r0
 80006aa:	4285      	cmp	r5, r0
 80006ac:	dc24      	bgt.n	80006f8 <__aeabi_fadd+0x1c8>
 80006ae:	003b      	movs	r3, r7
 80006b0:	2120      	movs	r1, #32
 80006b2:	1b42      	subs	r2, r0, r5
 80006b4:	3201      	adds	r2, #1
 80006b6:	40d3      	lsrs	r3, r2
 80006b8:	1a8a      	subs	r2, r1, r2
 80006ba:	4097      	lsls	r7, r2
 80006bc:	1e7a      	subs	r2, r7, #1
 80006be:	4197      	sbcs	r7, r2
 80006c0:	2200      	movs	r2, #0
 80006c2:	433b      	orrs	r3, r7
 80006c4:	0759      	lsls	r1, r3, #29
 80006c6:	d193      	bne.n	80005f0 <__aeabi_fadd+0xc0>
 80006c8:	e797      	b.n	80005fa <__aeabi_fadd+0xca>
 80006ca:	000c      	movs	r4, r1
 80006cc:	0033      	movs	r3, r6
 80006ce:	08db      	lsrs	r3, r3, #3
 80006d0:	e7db      	b.n	800068a <__aeabi_fadd+0x15a>
 80006d2:	2a00      	cmp	r2, #0
 80006d4:	d014      	beq.n	8000700 <__aeabi_fadd+0x1d0>
 80006d6:	1b42      	subs	r2, r0, r5
 80006d8:	2d00      	cmp	r5, #0
 80006da:	d14b      	bne.n	8000774 <__aeabi_fadd+0x244>
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d0d0      	beq.n	8000682 <__aeabi_fadd+0x152>
 80006e0:	1e51      	subs	r1, r2, #1
 80006e2:	2a01      	cmp	r2, #1
 80006e4:	d100      	bne.n	80006e8 <__aeabi_fadd+0x1b8>
 80006e6:	e09e      	b.n	8000826 <__aeabi_fadd+0x2f6>
 80006e8:	2aff      	cmp	r2, #255	@ 0xff
 80006ea:	d0ef      	beq.n	80006cc <__aeabi_fadd+0x19c>
 80006ec:	000a      	movs	r2, r1
 80006ee:	2a1b      	cmp	r2, #27
 80006f0:	dd5f      	ble.n	80007b2 <__aeabi_fadd+0x282>
 80006f2:	0002      	movs	r2, r0
 80006f4:	1c73      	adds	r3, r6, #1
 80006f6:	e77b      	b.n	80005f0 <__aeabi_fadd+0xc0>
 80006f8:	4b50      	ldr	r3, [pc, #320]	@ (800083c <__aeabi_fadd+0x30c>)
 80006fa:	1a2a      	subs	r2, r5, r0
 80006fc:	403b      	ands	r3, r7
 80006fe:	e7e1      	b.n	80006c4 <__aeabi_fadd+0x194>
 8000700:	21fe      	movs	r1, #254	@ 0xfe
 8000702:	1c6a      	adds	r2, r5, #1
 8000704:	4211      	tst	r1, r2
 8000706:	d13b      	bne.n	8000780 <__aeabi_fadd+0x250>
 8000708:	2d00      	cmp	r5, #0
 800070a:	d15d      	bne.n	80007c8 <__aeabi_fadd+0x298>
 800070c:	2b00      	cmp	r3, #0
 800070e:	d07f      	beq.n	8000810 <__aeabi_fadd+0x2e0>
 8000710:	2e00      	cmp	r6, #0
 8000712:	d17f      	bne.n	8000814 <__aeabi_fadd+0x2e4>
 8000714:	2200      	movs	r2, #0
 8000716:	08db      	lsrs	r3, r3, #3
 8000718:	025b      	lsls	r3, r3, #9
 800071a:	0a5b      	lsrs	r3, r3, #9
 800071c:	b2d0      	uxtb	r0, r2
 800071e:	e774      	b.n	800060a <__aeabi_fadd+0xda>
 8000720:	28ff      	cmp	r0, #255	@ 0xff
 8000722:	d0d2      	beq.n	80006ca <__aeabi_fadd+0x19a>
 8000724:	2480      	movs	r4, #128	@ 0x80
 8000726:	04e4      	lsls	r4, r4, #19
 8000728:	4323      	orrs	r3, r4
 800072a:	2401      	movs	r4, #1
 800072c:	2a1b      	cmp	r2, #27
 800072e:	dc07      	bgt.n	8000740 <__aeabi_fadd+0x210>
 8000730:	001c      	movs	r4, r3
 8000732:	2520      	movs	r5, #32
 8000734:	40d4      	lsrs	r4, r2
 8000736:	1aaa      	subs	r2, r5, r2
 8000738:	4093      	lsls	r3, r2
 800073a:	1e5a      	subs	r2, r3, #1
 800073c:	4193      	sbcs	r3, r2
 800073e:	431c      	orrs	r4, r3
 8000740:	1b33      	subs	r3, r6, r4
 8000742:	0005      	movs	r5, r0
 8000744:	000c      	movs	r4, r1
 8000746:	e74d      	b.n	80005e4 <__aeabi_fadd+0xb4>
 8000748:	1b9f      	subs	r7, r3, r6
 800074a:	017a      	lsls	r2, r7, #5
 800074c:	d422      	bmi.n	8000794 <__aeabi_fadd+0x264>
 800074e:	2f00      	cmp	r7, #0
 8000750:	d1a6      	bne.n	80006a0 <__aeabi_fadd+0x170>
 8000752:	2400      	movs	r4, #0
 8000754:	2000      	movs	r0, #0
 8000756:	2300      	movs	r3, #0
 8000758:	e757      	b.n	800060a <__aeabi_fadd+0xda>
 800075a:	199b      	adds	r3, r3, r6
 800075c:	2501      	movs	r5, #1
 800075e:	3201      	adds	r2, #1
 8000760:	0159      	lsls	r1, r3, #5
 8000762:	d400      	bmi.n	8000766 <__aeabi_fadd+0x236>
 8000764:	e740      	b.n	80005e8 <__aeabi_fadd+0xb8>
 8000766:	2101      	movs	r1, #1
 8000768:	4835      	ldr	r0, [pc, #212]	@ (8000840 <__aeabi_fadd+0x310>)
 800076a:	4019      	ands	r1, r3
 800076c:	085b      	lsrs	r3, r3, #1
 800076e:	4003      	ands	r3, r0
 8000770:	430b      	orrs	r3, r1
 8000772:	e7a7      	b.n	80006c4 <__aeabi_fadd+0x194>
 8000774:	28ff      	cmp	r0, #255	@ 0xff
 8000776:	d0a9      	beq.n	80006cc <__aeabi_fadd+0x19c>
 8000778:	2180      	movs	r1, #128	@ 0x80
 800077a:	04c9      	lsls	r1, r1, #19
 800077c:	430b      	orrs	r3, r1
 800077e:	e7b6      	b.n	80006ee <__aeabi_fadd+0x1be>
 8000780:	2aff      	cmp	r2, #255	@ 0xff
 8000782:	d100      	bne.n	8000786 <__aeabi_fadd+0x256>
 8000784:	e779      	b.n	800067a <__aeabi_fadd+0x14a>
 8000786:	199b      	adds	r3, r3, r6
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	0759      	lsls	r1, r3, #29
 800078c:	d000      	beq.n	8000790 <__aeabi_fadd+0x260>
 800078e:	e72f      	b.n	80005f0 <__aeabi_fadd+0xc0>
 8000790:	08db      	lsrs	r3, r3, #3
 8000792:	e7c1      	b.n	8000718 <__aeabi_fadd+0x1e8>
 8000794:	000c      	movs	r4, r1
 8000796:	1af7      	subs	r7, r6, r3
 8000798:	e782      	b.n	80006a0 <__aeabi_fadd+0x170>
 800079a:	2b00      	cmp	r3, #0
 800079c:	d12c      	bne.n	80007f8 <__aeabi_fadd+0x2c8>
 800079e:	2e00      	cmp	r6, #0
 80007a0:	d193      	bne.n	80006ca <__aeabi_fadd+0x19a>
 80007a2:	2380      	movs	r3, #128	@ 0x80
 80007a4:	2400      	movs	r4, #0
 80007a6:	20ff      	movs	r0, #255	@ 0xff
 80007a8:	03db      	lsls	r3, r3, #15
 80007aa:	e72e      	b.n	800060a <__aeabi_fadd+0xda>
 80007ac:	2501      	movs	r5, #1
 80007ae:	1b9b      	subs	r3, r3, r6
 80007b0:	e718      	b.n	80005e4 <__aeabi_fadd+0xb4>
 80007b2:	0019      	movs	r1, r3
 80007b4:	2520      	movs	r5, #32
 80007b6:	40d1      	lsrs	r1, r2
 80007b8:	1aaa      	subs	r2, r5, r2
 80007ba:	4093      	lsls	r3, r2
 80007bc:	1e5a      	subs	r2, r3, #1
 80007be:	4193      	sbcs	r3, r2
 80007c0:	430b      	orrs	r3, r1
 80007c2:	0005      	movs	r5, r0
 80007c4:	199b      	adds	r3, r3, r6
 80007c6:	e753      	b.n	8000670 <__aeabi_fadd+0x140>
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d100      	bne.n	80007ce <__aeabi_fadd+0x29e>
 80007cc:	e77e      	b.n	80006cc <__aeabi_fadd+0x19c>
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d100      	bne.n	80007d4 <__aeabi_fadd+0x2a4>
 80007d2:	e77c      	b.n	80006ce <__aeabi_fadd+0x19e>
 80007d4:	2280      	movs	r2, #128	@ 0x80
 80007d6:	03d2      	lsls	r2, r2, #15
 80007d8:	4591      	cmp	r9, r2
 80007da:	d302      	bcc.n	80007e2 <__aeabi_fadd+0x2b2>
 80007dc:	4594      	cmp	ip, r2
 80007de:	d200      	bcs.n	80007e2 <__aeabi_fadd+0x2b2>
 80007e0:	0033      	movs	r3, r6
 80007e2:	08db      	lsrs	r3, r3, #3
 80007e4:	e753      	b.n	800068e <__aeabi_fadd+0x15e>
 80007e6:	000c      	movs	r4, r1
 80007e8:	1af3      	subs	r3, r6, r3
 80007ea:	3501      	adds	r5, #1
 80007ec:	e6fa      	b.n	80005e4 <__aeabi_fadd+0xb4>
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d0af      	beq.n	8000752 <__aeabi_fadd+0x222>
 80007f2:	000c      	movs	r4, r1
 80007f4:	0033      	movs	r3, r6
 80007f6:	e78d      	b.n	8000714 <__aeabi_fadd+0x1e4>
 80007f8:	2e00      	cmp	r6, #0
 80007fa:	d100      	bne.n	80007fe <__aeabi_fadd+0x2ce>
 80007fc:	e767      	b.n	80006ce <__aeabi_fadd+0x19e>
 80007fe:	2280      	movs	r2, #128	@ 0x80
 8000800:	03d2      	lsls	r2, r2, #15
 8000802:	4591      	cmp	r9, r2
 8000804:	d3ed      	bcc.n	80007e2 <__aeabi_fadd+0x2b2>
 8000806:	4594      	cmp	ip, r2
 8000808:	d2eb      	bcs.n	80007e2 <__aeabi_fadd+0x2b2>
 800080a:	000c      	movs	r4, r1
 800080c:	0033      	movs	r3, r6
 800080e:	e7e8      	b.n	80007e2 <__aeabi_fadd+0x2b2>
 8000810:	0033      	movs	r3, r6
 8000812:	e77f      	b.n	8000714 <__aeabi_fadd+0x1e4>
 8000814:	199b      	adds	r3, r3, r6
 8000816:	2200      	movs	r2, #0
 8000818:	0159      	lsls	r1, r3, #5
 800081a:	d5b9      	bpl.n	8000790 <__aeabi_fadd+0x260>
 800081c:	4a07      	ldr	r2, [pc, #28]	@ (800083c <__aeabi_fadd+0x30c>)
 800081e:	4013      	ands	r3, r2
 8000820:	08db      	lsrs	r3, r3, #3
 8000822:	2201      	movs	r2, #1
 8000824:	e778      	b.n	8000718 <__aeabi_fadd+0x1e8>
 8000826:	199b      	adds	r3, r3, r6
 8000828:	3201      	adds	r2, #1
 800082a:	3501      	adds	r5, #1
 800082c:	0159      	lsls	r1, r3, #5
 800082e:	d49a      	bmi.n	8000766 <__aeabi_fadd+0x236>
 8000830:	e6da      	b.n	80005e8 <__aeabi_fadd+0xb8>
 8000832:	1e03      	subs	r3, r0, #0
 8000834:	d08d      	beq.n	8000752 <__aeabi_fadd+0x222>
 8000836:	08db      	lsrs	r3, r3, #3
 8000838:	e76e      	b.n	8000718 <__aeabi_fadd+0x1e8>
 800083a:	46c0      	nop			@ (mov r8, r8)
 800083c:	fbffffff 	.word	0xfbffffff
 8000840:	7dffffff 	.word	0x7dffffff

08000844 <__aeabi_fdiv>:
 8000844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000846:	464f      	mov	r7, r9
 8000848:	4646      	mov	r6, r8
 800084a:	46d6      	mov	lr, sl
 800084c:	0244      	lsls	r4, r0, #9
 800084e:	b5c0      	push	{r6, r7, lr}
 8000850:	0047      	lsls	r7, r0, #1
 8000852:	1c0e      	adds	r6, r1, #0
 8000854:	0a64      	lsrs	r4, r4, #9
 8000856:	0e3f      	lsrs	r7, r7, #24
 8000858:	0fc5      	lsrs	r5, r0, #31
 800085a:	2f00      	cmp	r7, #0
 800085c:	d03c      	beq.n	80008d8 <__aeabi_fdiv+0x94>
 800085e:	2fff      	cmp	r7, #255	@ 0xff
 8000860:	d042      	beq.n	80008e8 <__aeabi_fdiv+0xa4>
 8000862:	2300      	movs	r3, #0
 8000864:	2280      	movs	r2, #128	@ 0x80
 8000866:	4699      	mov	r9, r3
 8000868:	469a      	mov	sl, r3
 800086a:	00e4      	lsls	r4, r4, #3
 800086c:	04d2      	lsls	r2, r2, #19
 800086e:	4314      	orrs	r4, r2
 8000870:	3f7f      	subs	r7, #127	@ 0x7f
 8000872:	0273      	lsls	r3, r6, #9
 8000874:	0a5b      	lsrs	r3, r3, #9
 8000876:	4698      	mov	r8, r3
 8000878:	0073      	lsls	r3, r6, #1
 800087a:	0e1b      	lsrs	r3, r3, #24
 800087c:	0ff6      	lsrs	r6, r6, #31
 800087e:	2b00      	cmp	r3, #0
 8000880:	d01b      	beq.n	80008ba <__aeabi_fdiv+0x76>
 8000882:	2bff      	cmp	r3, #255	@ 0xff
 8000884:	d013      	beq.n	80008ae <__aeabi_fdiv+0x6a>
 8000886:	4642      	mov	r2, r8
 8000888:	2180      	movs	r1, #128	@ 0x80
 800088a:	00d2      	lsls	r2, r2, #3
 800088c:	04c9      	lsls	r1, r1, #19
 800088e:	4311      	orrs	r1, r2
 8000890:	4688      	mov	r8, r1
 8000892:	2000      	movs	r0, #0
 8000894:	3b7f      	subs	r3, #127	@ 0x7f
 8000896:	0029      	movs	r1, r5
 8000898:	1aff      	subs	r7, r7, r3
 800089a:	464b      	mov	r3, r9
 800089c:	4071      	eors	r1, r6
 800089e:	b2c9      	uxtb	r1, r1
 80008a0:	2b0f      	cmp	r3, #15
 80008a2:	d900      	bls.n	80008a6 <__aeabi_fdiv+0x62>
 80008a4:	e0b5      	b.n	8000a12 <__aeabi_fdiv+0x1ce>
 80008a6:	4a74      	ldr	r2, [pc, #464]	@ (8000a78 <__aeabi_fdiv+0x234>)
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	58d3      	ldr	r3, [r2, r3]
 80008ac:	469f      	mov	pc, r3
 80008ae:	4643      	mov	r3, r8
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d13f      	bne.n	8000934 <__aeabi_fdiv+0xf0>
 80008b4:	3fff      	subs	r7, #255	@ 0xff
 80008b6:	3302      	adds	r3, #2
 80008b8:	e003      	b.n	80008c2 <__aeabi_fdiv+0x7e>
 80008ba:	4643      	mov	r3, r8
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d12d      	bne.n	800091c <__aeabi_fdiv+0xd8>
 80008c0:	2301      	movs	r3, #1
 80008c2:	0029      	movs	r1, r5
 80008c4:	464a      	mov	r2, r9
 80008c6:	4071      	eors	r1, r6
 80008c8:	b2c9      	uxtb	r1, r1
 80008ca:	431a      	orrs	r2, r3
 80008cc:	2a0e      	cmp	r2, #14
 80008ce:	d838      	bhi.n	8000942 <__aeabi_fdiv+0xfe>
 80008d0:	486a      	ldr	r0, [pc, #424]	@ (8000a7c <__aeabi_fdiv+0x238>)
 80008d2:	0092      	lsls	r2, r2, #2
 80008d4:	5882      	ldr	r2, [r0, r2]
 80008d6:	4697      	mov	pc, r2
 80008d8:	2c00      	cmp	r4, #0
 80008da:	d113      	bne.n	8000904 <__aeabi_fdiv+0xc0>
 80008dc:	2304      	movs	r3, #4
 80008de:	4699      	mov	r9, r3
 80008e0:	3b03      	subs	r3, #3
 80008e2:	2700      	movs	r7, #0
 80008e4:	469a      	mov	sl, r3
 80008e6:	e7c4      	b.n	8000872 <__aeabi_fdiv+0x2e>
 80008e8:	2c00      	cmp	r4, #0
 80008ea:	d105      	bne.n	80008f8 <__aeabi_fdiv+0xb4>
 80008ec:	2308      	movs	r3, #8
 80008ee:	4699      	mov	r9, r3
 80008f0:	3b06      	subs	r3, #6
 80008f2:	27ff      	movs	r7, #255	@ 0xff
 80008f4:	469a      	mov	sl, r3
 80008f6:	e7bc      	b.n	8000872 <__aeabi_fdiv+0x2e>
 80008f8:	230c      	movs	r3, #12
 80008fa:	4699      	mov	r9, r3
 80008fc:	3b09      	subs	r3, #9
 80008fe:	27ff      	movs	r7, #255	@ 0xff
 8000900:	469a      	mov	sl, r3
 8000902:	e7b6      	b.n	8000872 <__aeabi_fdiv+0x2e>
 8000904:	0020      	movs	r0, r4
 8000906:	f002 f9a3 	bl	8002c50 <__clzsi2>
 800090a:	2776      	movs	r7, #118	@ 0x76
 800090c:	1f43      	subs	r3, r0, #5
 800090e:	409c      	lsls	r4, r3
 8000910:	2300      	movs	r3, #0
 8000912:	427f      	negs	r7, r7
 8000914:	4699      	mov	r9, r3
 8000916:	469a      	mov	sl, r3
 8000918:	1a3f      	subs	r7, r7, r0
 800091a:	e7aa      	b.n	8000872 <__aeabi_fdiv+0x2e>
 800091c:	4640      	mov	r0, r8
 800091e:	f002 f997 	bl	8002c50 <__clzsi2>
 8000922:	4642      	mov	r2, r8
 8000924:	1f43      	subs	r3, r0, #5
 8000926:	409a      	lsls	r2, r3
 8000928:	2376      	movs	r3, #118	@ 0x76
 800092a:	425b      	negs	r3, r3
 800092c:	1a1b      	subs	r3, r3, r0
 800092e:	4690      	mov	r8, r2
 8000930:	2000      	movs	r0, #0
 8000932:	e7b0      	b.n	8000896 <__aeabi_fdiv+0x52>
 8000934:	2303      	movs	r3, #3
 8000936:	464a      	mov	r2, r9
 8000938:	431a      	orrs	r2, r3
 800093a:	4691      	mov	r9, r2
 800093c:	2003      	movs	r0, #3
 800093e:	33fc      	adds	r3, #252	@ 0xfc
 8000940:	e7a9      	b.n	8000896 <__aeabi_fdiv+0x52>
 8000942:	000d      	movs	r5, r1
 8000944:	20ff      	movs	r0, #255	@ 0xff
 8000946:	2200      	movs	r2, #0
 8000948:	05c0      	lsls	r0, r0, #23
 800094a:	07ed      	lsls	r5, r5, #31
 800094c:	4310      	orrs	r0, r2
 800094e:	4328      	orrs	r0, r5
 8000950:	bce0      	pop	{r5, r6, r7}
 8000952:	46ba      	mov	sl, r7
 8000954:	46b1      	mov	r9, r6
 8000956:	46a8      	mov	r8, r5
 8000958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800095a:	000d      	movs	r5, r1
 800095c:	2000      	movs	r0, #0
 800095e:	2200      	movs	r2, #0
 8000960:	e7f2      	b.n	8000948 <__aeabi_fdiv+0x104>
 8000962:	4653      	mov	r3, sl
 8000964:	2b02      	cmp	r3, #2
 8000966:	d0ed      	beq.n	8000944 <__aeabi_fdiv+0x100>
 8000968:	2b03      	cmp	r3, #3
 800096a:	d033      	beq.n	80009d4 <__aeabi_fdiv+0x190>
 800096c:	46a0      	mov	r8, r4
 800096e:	2b01      	cmp	r3, #1
 8000970:	d105      	bne.n	800097e <__aeabi_fdiv+0x13a>
 8000972:	2000      	movs	r0, #0
 8000974:	2200      	movs	r2, #0
 8000976:	e7e7      	b.n	8000948 <__aeabi_fdiv+0x104>
 8000978:	0035      	movs	r5, r6
 800097a:	2803      	cmp	r0, #3
 800097c:	d07a      	beq.n	8000a74 <__aeabi_fdiv+0x230>
 800097e:	003b      	movs	r3, r7
 8000980:	337f      	adds	r3, #127	@ 0x7f
 8000982:	2b00      	cmp	r3, #0
 8000984:	dd2d      	ble.n	80009e2 <__aeabi_fdiv+0x19e>
 8000986:	4642      	mov	r2, r8
 8000988:	0752      	lsls	r2, r2, #29
 800098a:	d007      	beq.n	800099c <__aeabi_fdiv+0x158>
 800098c:	220f      	movs	r2, #15
 800098e:	4641      	mov	r1, r8
 8000990:	400a      	ands	r2, r1
 8000992:	2a04      	cmp	r2, #4
 8000994:	d002      	beq.n	800099c <__aeabi_fdiv+0x158>
 8000996:	2204      	movs	r2, #4
 8000998:	4694      	mov	ip, r2
 800099a:	44e0      	add	r8, ip
 800099c:	4642      	mov	r2, r8
 800099e:	0112      	lsls	r2, r2, #4
 80009a0:	d505      	bpl.n	80009ae <__aeabi_fdiv+0x16a>
 80009a2:	4642      	mov	r2, r8
 80009a4:	4b36      	ldr	r3, [pc, #216]	@ (8000a80 <__aeabi_fdiv+0x23c>)
 80009a6:	401a      	ands	r2, r3
 80009a8:	003b      	movs	r3, r7
 80009aa:	4690      	mov	r8, r2
 80009ac:	3380      	adds	r3, #128	@ 0x80
 80009ae:	2bfe      	cmp	r3, #254	@ 0xfe
 80009b0:	dcc8      	bgt.n	8000944 <__aeabi_fdiv+0x100>
 80009b2:	4642      	mov	r2, r8
 80009b4:	0192      	lsls	r2, r2, #6
 80009b6:	0a52      	lsrs	r2, r2, #9
 80009b8:	b2d8      	uxtb	r0, r3
 80009ba:	e7c5      	b.n	8000948 <__aeabi_fdiv+0x104>
 80009bc:	2280      	movs	r2, #128	@ 0x80
 80009be:	2500      	movs	r5, #0
 80009c0:	20ff      	movs	r0, #255	@ 0xff
 80009c2:	03d2      	lsls	r2, r2, #15
 80009c4:	e7c0      	b.n	8000948 <__aeabi_fdiv+0x104>
 80009c6:	2280      	movs	r2, #128	@ 0x80
 80009c8:	03d2      	lsls	r2, r2, #15
 80009ca:	4214      	tst	r4, r2
 80009cc:	d002      	beq.n	80009d4 <__aeabi_fdiv+0x190>
 80009ce:	4643      	mov	r3, r8
 80009d0:	4213      	tst	r3, r2
 80009d2:	d049      	beq.n	8000a68 <__aeabi_fdiv+0x224>
 80009d4:	2280      	movs	r2, #128	@ 0x80
 80009d6:	03d2      	lsls	r2, r2, #15
 80009d8:	4322      	orrs	r2, r4
 80009da:	0252      	lsls	r2, r2, #9
 80009dc:	20ff      	movs	r0, #255	@ 0xff
 80009de:	0a52      	lsrs	r2, r2, #9
 80009e0:	e7b2      	b.n	8000948 <__aeabi_fdiv+0x104>
 80009e2:	2201      	movs	r2, #1
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	2b1b      	cmp	r3, #27
 80009e8:	dcc3      	bgt.n	8000972 <__aeabi_fdiv+0x12e>
 80009ea:	4642      	mov	r2, r8
 80009ec:	40da      	lsrs	r2, r3
 80009ee:	4643      	mov	r3, r8
 80009f0:	379e      	adds	r7, #158	@ 0x9e
 80009f2:	40bb      	lsls	r3, r7
 80009f4:	1e59      	subs	r1, r3, #1
 80009f6:	418b      	sbcs	r3, r1
 80009f8:	431a      	orrs	r2, r3
 80009fa:	0753      	lsls	r3, r2, #29
 80009fc:	d004      	beq.n	8000a08 <__aeabi_fdiv+0x1c4>
 80009fe:	230f      	movs	r3, #15
 8000a00:	4013      	ands	r3, r2
 8000a02:	2b04      	cmp	r3, #4
 8000a04:	d000      	beq.n	8000a08 <__aeabi_fdiv+0x1c4>
 8000a06:	3204      	adds	r2, #4
 8000a08:	0153      	lsls	r3, r2, #5
 8000a0a:	d529      	bpl.n	8000a60 <__aeabi_fdiv+0x21c>
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	2200      	movs	r2, #0
 8000a10:	e79a      	b.n	8000948 <__aeabi_fdiv+0x104>
 8000a12:	4642      	mov	r2, r8
 8000a14:	0163      	lsls	r3, r4, #5
 8000a16:	0155      	lsls	r5, r2, #5
 8000a18:	42ab      	cmp	r3, r5
 8000a1a:	d215      	bcs.n	8000a48 <__aeabi_fdiv+0x204>
 8000a1c:	201b      	movs	r0, #27
 8000a1e:	2200      	movs	r2, #0
 8000a20:	3f01      	subs	r7, #1
 8000a22:	2601      	movs	r6, #1
 8000a24:	001c      	movs	r4, r3
 8000a26:	0052      	lsls	r2, r2, #1
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	2c00      	cmp	r4, #0
 8000a2c:	db01      	blt.n	8000a32 <__aeabi_fdiv+0x1ee>
 8000a2e:	429d      	cmp	r5, r3
 8000a30:	d801      	bhi.n	8000a36 <__aeabi_fdiv+0x1f2>
 8000a32:	1b5b      	subs	r3, r3, r5
 8000a34:	4332      	orrs	r2, r6
 8000a36:	3801      	subs	r0, #1
 8000a38:	2800      	cmp	r0, #0
 8000a3a:	d1f3      	bne.n	8000a24 <__aeabi_fdiv+0x1e0>
 8000a3c:	1e58      	subs	r0, r3, #1
 8000a3e:	4183      	sbcs	r3, r0
 8000a40:	4313      	orrs	r3, r2
 8000a42:	4698      	mov	r8, r3
 8000a44:	000d      	movs	r5, r1
 8000a46:	e79a      	b.n	800097e <__aeabi_fdiv+0x13a>
 8000a48:	201a      	movs	r0, #26
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	1b5b      	subs	r3, r3, r5
 8000a4e:	e7e8      	b.n	8000a22 <__aeabi_fdiv+0x1de>
 8000a50:	3b02      	subs	r3, #2
 8000a52:	425a      	negs	r2, r3
 8000a54:	4153      	adcs	r3, r2
 8000a56:	425b      	negs	r3, r3
 8000a58:	0035      	movs	r5, r6
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	b2d8      	uxtb	r0, r3
 8000a5e:	e773      	b.n	8000948 <__aeabi_fdiv+0x104>
 8000a60:	0192      	lsls	r2, r2, #6
 8000a62:	2000      	movs	r0, #0
 8000a64:	0a52      	lsrs	r2, r2, #9
 8000a66:	e76f      	b.n	8000948 <__aeabi_fdiv+0x104>
 8000a68:	431a      	orrs	r2, r3
 8000a6a:	0252      	lsls	r2, r2, #9
 8000a6c:	0035      	movs	r5, r6
 8000a6e:	20ff      	movs	r0, #255	@ 0xff
 8000a70:	0a52      	lsrs	r2, r2, #9
 8000a72:	e769      	b.n	8000948 <__aeabi_fdiv+0x104>
 8000a74:	4644      	mov	r4, r8
 8000a76:	e7ad      	b.n	80009d4 <__aeabi_fdiv+0x190>
 8000a78:	0800c124 	.word	0x0800c124
 8000a7c:	0800c164 	.word	0x0800c164
 8000a80:	f7ffffff 	.word	0xf7ffffff

08000a84 <__aeabi_fsub>:
 8000a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a86:	4647      	mov	r7, r8
 8000a88:	46ce      	mov	lr, r9
 8000a8a:	024e      	lsls	r6, r1, #9
 8000a8c:	0243      	lsls	r3, r0, #9
 8000a8e:	0045      	lsls	r5, r0, #1
 8000a90:	0a72      	lsrs	r2, r6, #9
 8000a92:	0fc4      	lsrs	r4, r0, #31
 8000a94:	0048      	lsls	r0, r1, #1
 8000a96:	b580      	push	{r7, lr}
 8000a98:	4694      	mov	ip, r2
 8000a9a:	0a5f      	lsrs	r7, r3, #9
 8000a9c:	0e2d      	lsrs	r5, r5, #24
 8000a9e:	099b      	lsrs	r3, r3, #6
 8000aa0:	0e00      	lsrs	r0, r0, #24
 8000aa2:	0fc9      	lsrs	r1, r1, #31
 8000aa4:	09b6      	lsrs	r6, r6, #6
 8000aa6:	28ff      	cmp	r0, #255	@ 0xff
 8000aa8:	d024      	beq.n	8000af4 <__aeabi_fsub+0x70>
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4051      	eors	r1, r2
 8000aae:	1a2a      	subs	r2, r5, r0
 8000ab0:	428c      	cmp	r4, r1
 8000ab2:	d00f      	beq.n	8000ad4 <__aeabi_fsub+0x50>
 8000ab4:	2a00      	cmp	r2, #0
 8000ab6:	dc00      	bgt.n	8000aba <__aeabi_fsub+0x36>
 8000ab8:	e16a      	b.n	8000d90 <__aeabi_fsub+0x30c>
 8000aba:	2800      	cmp	r0, #0
 8000abc:	d135      	bne.n	8000b2a <__aeabi_fsub+0xa6>
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	d100      	bne.n	8000ac4 <__aeabi_fsub+0x40>
 8000ac2:	e0a2      	b.n	8000c0a <__aeabi_fsub+0x186>
 8000ac4:	1e51      	subs	r1, r2, #1
 8000ac6:	2a01      	cmp	r2, #1
 8000ac8:	d100      	bne.n	8000acc <__aeabi_fsub+0x48>
 8000aca:	e124      	b.n	8000d16 <__aeabi_fsub+0x292>
 8000acc:	2aff      	cmp	r2, #255	@ 0xff
 8000ace:	d021      	beq.n	8000b14 <__aeabi_fsub+0x90>
 8000ad0:	000a      	movs	r2, r1
 8000ad2:	e02f      	b.n	8000b34 <__aeabi_fsub+0xb0>
 8000ad4:	2a00      	cmp	r2, #0
 8000ad6:	dc00      	bgt.n	8000ada <__aeabi_fsub+0x56>
 8000ad8:	e167      	b.n	8000daa <__aeabi_fsub+0x326>
 8000ada:	2800      	cmp	r0, #0
 8000adc:	d05e      	beq.n	8000b9c <__aeabi_fsub+0x118>
 8000ade:	2dff      	cmp	r5, #255	@ 0xff
 8000ae0:	d018      	beq.n	8000b14 <__aeabi_fsub+0x90>
 8000ae2:	2180      	movs	r1, #128	@ 0x80
 8000ae4:	04c9      	lsls	r1, r1, #19
 8000ae6:	430e      	orrs	r6, r1
 8000ae8:	2a1b      	cmp	r2, #27
 8000aea:	dc00      	bgt.n	8000aee <__aeabi_fsub+0x6a>
 8000aec:	e076      	b.n	8000bdc <__aeabi_fsub+0x158>
 8000aee:	002a      	movs	r2, r5
 8000af0:	3301      	adds	r3, #1
 8000af2:	e032      	b.n	8000b5a <__aeabi_fsub+0xd6>
 8000af4:	002a      	movs	r2, r5
 8000af6:	3aff      	subs	r2, #255	@ 0xff
 8000af8:	4691      	mov	r9, r2
 8000afa:	2e00      	cmp	r6, #0
 8000afc:	d042      	beq.n	8000b84 <__aeabi_fsub+0x100>
 8000afe:	428c      	cmp	r4, r1
 8000b00:	d055      	beq.n	8000bae <__aeabi_fsub+0x12a>
 8000b02:	464a      	mov	r2, r9
 8000b04:	2a00      	cmp	r2, #0
 8000b06:	d100      	bne.n	8000b0a <__aeabi_fsub+0x86>
 8000b08:	e09c      	b.n	8000c44 <__aeabi_fsub+0x1c0>
 8000b0a:	2d00      	cmp	r5, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_fsub+0x8c>
 8000b0e:	e077      	b.n	8000c00 <__aeabi_fsub+0x17c>
 8000b10:	000c      	movs	r4, r1
 8000b12:	0033      	movs	r3, r6
 8000b14:	08db      	lsrs	r3, r3, #3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d100      	bne.n	8000b1c <__aeabi_fsub+0x98>
 8000b1a:	e06e      	b.n	8000bfa <__aeabi_fsub+0x176>
 8000b1c:	2280      	movs	r2, #128	@ 0x80
 8000b1e:	03d2      	lsls	r2, r2, #15
 8000b20:	4313      	orrs	r3, r2
 8000b22:	025b      	lsls	r3, r3, #9
 8000b24:	20ff      	movs	r0, #255	@ 0xff
 8000b26:	0a5b      	lsrs	r3, r3, #9
 8000b28:	e024      	b.n	8000b74 <__aeabi_fsub+0xf0>
 8000b2a:	2dff      	cmp	r5, #255	@ 0xff
 8000b2c:	d0f2      	beq.n	8000b14 <__aeabi_fsub+0x90>
 8000b2e:	2180      	movs	r1, #128	@ 0x80
 8000b30:	04c9      	lsls	r1, r1, #19
 8000b32:	430e      	orrs	r6, r1
 8000b34:	2101      	movs	r1, #1
 8000b36:	2a1b      	cmp	r2, #27
 8000b38:	dc08      	bgt.n	8000b4c <__aeabi_fsub+0xc8>
 8000b3a:	0031      	movs	r1, r6
 8000b3c:	2020      	movs	r0, #32
 8000b3e:	40d1      	lsrs	r1, r2
 8000b40:	1a82      	subs	r2, r0, r2
 8000b42:	4096      	lsls	r6, r2
 8000b44:	0032      	movs	r2, r6
 8000b46:	1e50      	subs	r0, r2, #1
 8000b48:	4182      	sbcs	r2, r0
 8000b4a:	4311      	orrs	r1, r2
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	015a      	lsls	r2, r3, #5
 8000b50:	d460      	bmi.n	8000c14 <__aeabi_fsub+0x190>
 8000b52:	2107      	movs	r1, #7
 8000b54:	002a      	movs	r2, r5
 8000b56:	4019      	ands	r1, r3
 8000b58:	d057      	beq.n	8000c0a <__aeabi_fsub+0x186>
 8000b5a:	210f      	movs	r1, #15
 8000b5c:	4019      	ands	r1, r3
 8000b5e:	2904      	cmp	r1, #4
 8000b60:	d000      	beq.n	8000b64 <__aeabi_fsub+0xe0>
 8000b62:	3304      	adds	r3, #4
 8000b64:	0159      	lsls	r1, r3, #5
 8000b66:	d550      	bpl.n	8000c0a <__aeabi_fsub+0x186>
 8000b68:	1c50      	adds	r0, r2, #1
 8000b6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000b6c:	d045      	beq.n	8000bfa <__aeabi_fsub+0x176>
 8000b6e:	019b      	lsls	r3, r3, #6
 8000b70:	b2c0      	uxtb	r0, r0
 8000b72:	0a5b      	lsrs	r3, r3, #9
 8000b74:	05c0      	lsls	r0, r0, #23
 8000b76:	4318      	orrs	r0, r3
 8000b78:	07e4      	lsls	r4, r4, #31
 8000b7a:	4320      	orrs	r0, r4
 8000b7c:	bcc0      	pop	{r6, r7}
 8000b7e:	46b9      	mov	r9, r7
 8000b80:	46b0      	mov	r8, r6
 8000b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b84:	2201      	movs	r2, #1
 8000b86:	4051      	eors	r1, r2
 8000b88:	428c      	cmp	r4, r1
 8000b8a:	d1ba      	bne.n	8000b02 <__aeabi_fsub+0x7e>
 8000b8c:	464a      	mov	r2, r9
 8000b8e:	2a00      	cmp	r2, #0
 8000b90:	d010      	beq.n	8000bb4 <__aeabi_fsub+0x130>
 8000b92:	2d00      	cmp	r5, #0
 8000b94:	d100      	bne.n	8000b98 <__aeabi_fsub+0x114>
 8000b96:	e098      	b.n	8000cca <__aeabi_fsub+0x246>
 8000b98:	2300      	movs	r3, #0
 8000b9a:	e7bb      	b.n	8000b14 <__aeabi_fsub+0x90>
 8000b9c:	2e00      	cmp	r6, #0
 8000b9e:	d034      	beq.n	8000c0a <__aeabi_fsub+0x186>
 8000ba0:	1e51      	subs	r1, r2, #1
 8000ba2:	2a01      	cmp	r2, #1
 8000ba4:	d06e      	beq.n	8000c84 <__aeabi_fsub+0x200>
 8000ba6:	2aff      	cmp	r2, #255	@ 0xff
 8000ba8:	d0b4      	beq.n	8000b14 <__aeabi_fsub+0x90>
 8000baa:	000a      	movs	r2, r1
 8000bac:	e79c      	b.n	8000ae8 <__aeabi_fsub+0x64>
 8000bae:	2a00      	cmp	r2, #0
 8000bb0:	d000      	beq.n	8000bb4 <__aeabi_fsub+0x130>
 8000bb2:	e088      	b.n	8000cc6 <__aeabi_fsub+0x242>
 8000bb4:	20fe      	movs	r0, #254	@ 0xfe
 8000bb6:	1c6a      	adds	r2, r5, #1
 8000bb8:	4210      	tst	r0, r2
 8000bba:	d000      	beq.n	8000bbe <__aeabi_fsub+0x13a>
 8000bbc:	e092      	b.n	8000ce4 <__aeabi_fsub+0x260>
 8000bbe:	2d00      	cmp	r5, #0
 8000bc0:	d000      	beq.n	8000bc4 <__aeabi_fsub+0x140>
 8000bc2:	e0a4      	b.n	8000d0e <__aeabi_fsub+0x28a>
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d100      	bne.n	8000bca <__aeabi_fsub+0x146>
 8000bc8:	e0cb      	b.n	8000d62 <__aeabi_fsub+0x2de>
 8000bca:	2e00      	cmp	r6, #0
 8000bcc:	d000      	beq.n	8000bd0 <__aeabi_fsub+0x14c>
 8000bce:	e0ca      	b.n	8000d66 <__aeabi_fsub+0x2e2>
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	08db      	lsrs	r3, r3, #3
 8000bd4:	025b      	lsls	r3, r3, #9
 8000bd6:	0a5b      	lsrs	r3, r3, #9
 8000bd8:	b2d0      	uxtb	r0, r2
 8000bda:	e7cb      	b.n	8000b74 <__aeabi_fsub+0xf0>
 8000bdc:	0031      	movs	r1, r6
 8000bde:	2020      	movs	r0, #32
 8000be0:	40d1      	lsrs	r1, r2
 8000be2:	1a82      	subs	r2, r0, r2
 8000be4:	4096      	lsls	r6, r2
 8000be6:	0032      	movs	r2, r6
 8000be8:	1e50      	subs	r0, r2, #1
 8000bea:	4182      	sbcs	r2, r0
 8000bec:	430a      	orrs	r2, r1
 8000bee:	189b      	adds	r3, r3, r2
 8000bf0:	015a      	lsls	r2, r3, #5
 8000bf2:	d5ae      	bpl.n	8000b52 <__aeabi_fsub+0xce>
 8000bf4:	1c6a      	adds	r2, r5, #1
 8000bf6:	2dfe      	cmp	r5, #254	@ 0xfe
 8000bf8:	d14a      	bne.n	8000c90 <__aeabi_fsub+0x20c>
 8000bfa:	20ff      	movs	r0, #255	@ 0xff
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	e7b9      	b.n	8000b74 <__aeabi_fsub+0xf0>
 8000c00:	22ff      	movs	r2, #255	@ 0xff
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14b      	bne.n	8000c9e <__aeabi_fsub+0x21a>
 8000c06:	000c      	movs	r4, r1
 8000c08:	0033      	movs	r3, r6
 8000c0a:	08db      	lsrs	r3, r3, #3
 8000c0c:	2aff      	cmp	r2, #255	@ 0xff
 8000c0e:	d100      	bne.n	8000c12 <__aeabi_fsub+0x18e>
 8000c10:	e781      	b.n	8000b16 <__aeabi_fsub+0x92>
 8000c12:	e7df      	b.n	8000bd4 <__aeabi_fsub+0x150>
 8000c14:	019f      	lsls	r7, r3, #6
 8000c16:	09bf      	lsrs	r7, r7, #6
 8000c18:	0038      	movs	r0, r7
 8000c1a:	f002 f819 	bl	8002c50 <__clzsi2>
 8000c1e:	3805      	subs	r0, #5
 8000c20:	4087      	lsls	r7, r0
 8000c22:	4285      	cmp	r5, r0
 8000c24:	dc21      	bgt.n	8000c6a <__aeabi_fsub+0x1e6>
 8000c26:	003b      	movs	r3, r7
 8000c28:	2120      	movs	r1, #32
 8000c2a:	1b42      	subs	r2, r0, r5
 8000c2c:	3201      	adds	r2, #1
 8000c2e:	40d3      	lsrs	r3, r2
 8000c30:	1a8a      	subs	r2, r1, r2
 8000c32:	4097      	lsls	r7, r2
 8000c34:	1e7a      	subs	r2, r7, #1
 8000c36:	4197      	sbcs	r7, r2
 8000c38:	2200      	movs	r2, #0
 8000c3a:	433b      	orrs	r3, r7
 8000c3c:	0759      	lsls	r1, r3, #29
 8000c3e:	d000      	beq.n	8000c42 <__aeabi_fsub+0x1be>
 8000c40:	e78b      	b.n	8000b5a <__aeabi_fsub+0xd6>
 8000c42:	e78f      	b.n	8000b64 <__aeabi_fsub+0xe0>
 8000c44:	20fe      	movs	r0, #254	@ 0xfe
 8000c46:	1c6a      	adds	r2, r5, #1
 8000c48:	4210      	tst	r0, r2
 8000c4a:	d112      	bne.n	8000c72 <__aeabi_fsub+0x1ee>
 8000c4c:	2d00      	cmp	r5, #0
 8000c4e:	d152      	bne.n	8000cf6 <__aeabi_fsub+0x272>
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d07c      	beq.n	8000d4e <__aeabi_fsub+0x2ca>
 8000c54:	2e00      	cmp	r6, #0
 8000c56:	d0bb      	beq.n	8000bd0 <__aeabi_fsub+0x14c>
 8000c58:	1b9a      	subs	r2, r3, r6
 8000c5a:	0150      	lsls	r0, r2, #5
 8000c5c:	d400      	bmi.n	8000c60 <__aeabi_fsub+0x1dc>
 8000c5e:	e08b      	b.n	8000d78 <__aeabi_fsub+0x2f4>
 8000c60:	2401      	movs	r4, #1
 8000c62:	2200      	movs	r2, #0
 8000c64:	1af3      	subs	r3, r6, r3
 8000c66:	400c      	ands	r4, r1
 8000c68:	e7e8      	b.n	8000c3c <__aeabi_fsub+0x1b8>
 8000c6a:	4b56      	ldr	r3, [pc, #344]	@ (8000dc4 <__aeabi_fsub+0x340>)
 8000c6c:	1a2a      	subs	r2, r5, r0
 8000c6e:	403b      	ands	r3, r7
 8000c70:	e7e4      	b.n	8000c3c <__aeabi_fsub+0x1b8>
 8000c72:	1b9f      	subs	r7, r3, r6
 8000c74:	017a      	lsls	r2, r7, #5
 8000c76:	d446      	bmi.n	8000d06 <__aeabi_fsub+0x282>
 8000c78:	2f00      	cmp	r7, #0
 8000c7a:	d1cd      	bne.n	8000c18 <__aeabi_fsub+0x194>
 8000c7c:	2400      	movs	r4, #0
 8000c7e:	2000      	movs	r0, #0
 8000c80:	2300      	movs	r3, #0
 8000c82:	e777      	b.n	8000b74 <__aeabi_fsub+0xf0>
 8000c84:	199b      	adds	r3, r3, r6
 8000c86:	2501      	movs	r5, #1
 8000c88:	3201      	adds	r2, #1
 8000c8a:	0159      	lsls	r1, r3, #5
 8000c8c:	d400      	bmi.n	8000c90 <__aeabi_fsub+0x20c>
 8000c8e:	e760      	b.n	8000b52 <__aeabi_fsub+0xce>
 8000c90:	2101      	movs	r1, #1
 8000c92:	484d      	ldr	r0, [pc, #308]	@ (8000dc8 <__aeabi_fsub+0x344>)
 8000c94:	4019      	ands	r1, r3
 8000c96:	085b      	lsrs	r3, r3, #1
 8000c98:	4003      	ands	r3, r0
 8000c9a:	430b      	orrs	r3, r1
 8000c9c:	e7ce      	b.n	8000c3c <__aeabi_fsub+0x1b8>
 8000c9e:	1e57      	subs	r7, r2, #1
 8000ca0:	2a01      	cmp	r2, #1
 8000ca2:	d05a      	beq.n	8000d5a <__aeabi_fsub+0x2d6>
 8000ca4:	000c      	movs	r4, r1
 8000ca6:	2aff      	cmp	r2, #255	@ 0xff
 8000ca8:	d033      	beq.n	8000d12 <__aeabi_fsub+0x28e>
 8000caa:	2201      	movs	r2, #1
 8000cac:	2f1b      	cmp	r7, #27
 8000cae:	dc07      	bgt.n	8000cc0 <__aeabi_fsub+0x23c>
 8000cb0:	2120      	movs	r1, #32
 8000cb2:	1bc9      	subs	r1, r1, r7
 8000cb4:	001a      	movs	r2, r3
 8000cb6:	408b      	lsls	r3, r1
 8000cb8:	40fa      	lsrs	r2, r7
 8000cba:	1e59      	subs	r1, r3, #1
 8000cbc:	418b      	sbcs	r3, r1
 8000cbe:	431a      	orrs	r2, r3
 8000cc0:	0005      	movs	r5, r0
 8000cc2:	1ab3      	subs	r3, r6, r2
 8000cc4:	e743      	b.n	8000b4e <__aeabi_fsub+0xca>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d123      	bne.n	8000d12 <__aeabi_fsub+0x28e>
 8000cca:	22ff      	movs	r2, #255	@ 0xff
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d09b      	beq.n	8000c08 <__aeabi_fsub+0x184>
 8000cd0:	1e51      	subs	r1, r2, #1
 8000cd2:	2a01      	cmp	r2, #1
 8000cd4:	d0d6      	beq.n	8000c84 <__aeabi_fsub+0x200>
 8000cd6:	2aff      	cmp	r2, #255	@ 0xff
 8000cd8:	d01b      	beq.n	8000d12 <__aeabi_fsub+0x28e>
 8000cda:	291b      	cmp	r1, #27
 8000cdc:	dd2c      	ble.n	8000d38 <__aeabi_fsub+0x2b4>
 8000cde:	0002      	movs	r2, r0
 8000ce0:	1c73      	adds	r3, r6, #1
 8000ce2:	e73a      	b.n	8000b5a <__aeabi_fsub+0xd6>
 8000ce4:	2aff      	cmp	r2, #255	@ 0xff
 8000ce6:	d088      	beq.n	8000bfa <__aeabi_fsub+0x176>
 8000ce8:	199b      	adds	r3, r3, r6
 8000cea:	085b      	lsrs	r3, r3, #1
 8000cec:	0759      	lsls	r1, r3, #29
 8000cee:	d000      	beq.n	8000cf2 <__aeabi_fsub+0x26e>
 8000cf0:	e733      	b.n	8000b5a <__aeabi_fsub+0xd6>
 8000cf2:	08db      	lsrs	r3, r3, #3
 8000cf4:	e76e      	b.n	8000bd4 <__aeabi_fsub+0x150>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d110      	bne.n	8000d1c <__aeabi_fsub+0x298>
 8000cfa:	2e00      	cmp	r6, #0
 8000cfc:	d043      	beq.n	8000d86 <__aeabi_fsub+0x302>
 8000cfe:	2401      	movs	r4, #1
 8000d00:	0033      	movs	r3, r6
 8000d02:	400c      	ands	r4, r1
 8000d04:	e706      	b.n	8000b14 <__aeabi_fsub+0x90>
 8000d06:	2401      	movs	r4, #1
 8000d08:	1af7      	subs	r7, r6, r3
 8000d0a:	400c      	ands	r4, r1
 8000d0c:	e784      	b.n	8000c18 <__aeabi_fsub+0x194>
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d104      	bne.n	8000d1c <__aeabi_fsub+0x298>
 8000d12:	0033      	movs	r3, r6
 8000d14:	e6fe      	b.n	8000b14 <__aeabi_fsub+0x90>
 8000d16:	2501      	movs	r5, #1
 8000d18:	1b9b      	subs	r3, r3, r6
 8000d1a:	e718      	b.n	8000b4e <__aeabi_fsub+0xca>
 8000d1c:	2e00      	cmp	r6, #0
 8000d1e:	d100      	bne.n	8000d22 <__aeabi_fsub+0x29e>
 8000d20:	e6f8      	b.n	8000b14 <__aeabi_fsub+0x90>
 8000d22:	2280      	movs	r2, #128	@ 0x80
 8000d24:	03d2      	lsls	r2, r2, #15
 8000d26:	4297      	cmp	r7, r2
 8000d28:	d304      	bcc.n	8000d34 <__aeabi_fsub+0x2b0>
 8000d2a:	4594      	cmp	ip, r2
 8000d2c:	d202      	bcs.n	8000d34 <__aeabi_fsub+0x2b0>
 8000d2e:	2401      	movs	r4, #1
 8000d30:	0033      	movs	r3, r6
 8000d32:	400c      	ands	r4, r1
 8000d34:	08db      	lsrs	r3, r3, #3
 8000d36:	e6f1      	b.n	8000b1c <__aeabi_fsub+0x98>
 8000d38:	001a      	movs	r2, r3
 8000d3a:	2520      	movs	r5, #32
 8000d3c:	40ca      	lsrs	r2, r1
 8000d3e:	1a69      	subs	r1, r5, r1
 8000d40:	408b      	lsls	r3, r1
 8000d42:	1e59      	subs	r1, r3, #1
 8000d44:	418b      	sbcs	r3, r1
 8000d46:	4313      	orrs	r3, r2
 8000d48:	0005      	movs	r5, r0
 8000d4a:	199b      	adds	r3, r3, r6
 8000d4c:	e750      	b.n	8000bf0 <__aeabi_fsub+0x16c>
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d094      	beq.n	8000c7c <__aeabi_fsub+0x1f8>
 8000d52:	2401      	movs	r4, #1
 8000d54:	0033      	movs	r3, r6
 8000d56:	400c      	ands	r4, r1
 8000d58:	e73a      	b.n	8000bd0 <__aeabi_fsub+0x14c>
 8000d5a:	000c      	movs	r4, r1
 8000d5c:	2501      	movs	r5, #1
 8000d5e:	1af3      	subs	r3, r6, r3
 8000d60:	e6f5      	b.n	8000b4e <__aeabi_fsub+0xca>
 8000d62:	0033      	movs	r3, r6
 8000d64:	e734      	b.n	8000bd0 <__aeabi_fsub+0x14c>
 8000d66:	199b      	adds	r3, r3, r6
 8000d68:	2200      	movs	r2, #0
 8000d6a:	0159      	lsls	r1, r3, #5
 8000d6c:	d5c1      	bpl.n	8000cf2 <__aeabi_fsub+0x26e>
 8000d6e:	4a15      	ldr	r2, [pc, #84]	@ (8000dc4 <__aeabi_fsub+0x340>)
 8000d70:	4013      	ands	r3, r2
 8000d72:	08db      	lsrs	r3, r3, #3
 8000d74:	2201      	movs	r2, #1
 8000d76:	e72d      	b.n	8000bd4 <__aeabi_fsub+0x150>
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	d100      	bne.n	8000d7e <__aeabi_fsub+0x2fa>
 8000d7c:	e77e      	b.n	8000c7c <__aeabi_fsub+0x1f8>
 8000d7e:	0013      	movs	r3, r2
 8000d80:	2200      	movs	r2, #0
 8000d82:	08db      	lsrs	r3, r3, #3
 8000d84:	e726      	b.n	8000bd4 <__aeabi_fsub+0x150>
 8000d86:	2380      	movs	r3, #128	@ 0x80
 8000d88:	2400      	movs	r4, #0
 8000d8a:	20ff      	movs	r0, #255	@ 0xff
 8000d8c:	03db      	lsls	r3, r3, #15
 8000d8e:	e6f1      	b.n	8000b74 <__aeabi_fsub+0xf0>
 8000d90:	2a00      	cmp	r2, #0
 8000d92:	d100      	bne.n	8000d96 <__aeabi_fsub+0x312>
 8000d94:	e756      	b.n	8000c44 <__aeabi_fsub+0x1c0>
 8000d96:	1b47      	subs	r7, r0, r5
 8000d98:	003a      	movs	r2, r7
 8000d9a:	2d00      	cmp	r5, #0
 8000d9c:	d100      	bne.n	8000da0 <__aeabi_fsub+0x31c>
 8000d9e:	e730      	b.n	8000c02 <__aeabi_fsub+0x17e>
 8000da0:	2280      	movs	r2, #128	@ 0x80
 8000da2:	04d2      	lsls	r2, r2, #19
 8000da4:	000c      	movs	r4, r1
 8000da6:	4313      	orrs	r3, r2
 8000da8:	e77f      	b.n	8000caa <__aeabi_fsub+0x226>
 8000daa:	2a00      	cmp	r2, #0
 8000dac:	d100      	bne.n	8000db0 <__aeabi_fsub+0x32c>
 8000dae:	e701      	b.n	8000bb4 <__aeabi_fsub+0x130>
 8000db0:	1b41      	subs	r1, r0, r5
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d101      	bne.n	8000dba <__aeabi_fsub+0x336>
 8000db6:	000a      	movs	r2, r1
 8000db8:	e788      	b.n	8000ccc <__aeabi_fsub+0x248>
 8000dba:	2280      	movs	r2, #128	@ 0x80
 8000dbc:	04d2      	lsls	r2, r2, #19
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	e78b      	b.n	8000cda <__aeabi_fsub+0x256>
 8000dc2:	46c0      	nop			@ (mov r8, r8)
 8000dc4:	fbffffff 	.word	0xfbffffff
 8000dc8:	7dffffff 	.word	0x7dffffff

08000dcc <__aeabi_dadd>:
 8000dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dce:	4657      	mov	r7, sl
 8000dd0:	464e      	mov	r6, r9
 8000dd2:	4645      	mov	r5, r8
 8000dd4:	46de      	mov	lr, fp
 8000dd6:	b5e0      	push	{r5, r6, r7, lr}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	9000      	str	r0, [sp, #0]
 8000ddc:	9101      	str	r1, [sp, #4]
 8000dde:	030c      	lsls	r4, r1, #12
 8000de0:	004f      	lsls	r7, r1, #1
 8000de2:	0fce      	lsrs	r6, r1, #31
 8000de4:	0a61      	lsrs	r1, r4, #9
 8000de6:	9c00      	ldr	r4, [sp, #0]
 8000de8:	031d      	lsls	r5, r3, #12
 8000dea:	0f64      	lsrs	r4, r4, #29
 8000dec:	430c      	orrs	r4, r1
 8000dee:	9900      	ldr	r1, [sp, #0]
 8000df0:	9200      	str	r2, [sp, #0]
 8000df2:	9301      	str	r3, [sp, #4]
 8000df4:	00c8      	lsls	r0, r1, #3
 8000df6:	0059      	lsls	r1, r3, #1
 8000df8:	0d4b      	lsrs	r3, r1, #21
 8000dfa:	4699      	mov	r9, r3
 8000dfc:	9a00      	ldr	r2, [sp, #0]
 8000dfe:	9b01      	ldr	r3, [sp, #4]
 8000e00:	0a6d      	lsrs	r5, r5, #9
 8000e02:	0fd9      	lsrs	r1, r3, #31
 8000e04:	0f53      	lsrs	r3, r2, #29
 8000e06:	432b      	orrs	r3, r5
 8000e08:	469a      	mov	sl, r3
 8000e0a:	9b00      	ldr	r3, [sp, #0]
 8000e0c:	0d7f      	lsrs	r7, r7, #21
 8000e0e:	00da      	lsls	r2, r3, #3
 8000e10:	4694      	mov	ip, r2
 8000e12:	464a      	mov	r2, r9
 8000e14:	46b0      	mov	r8, r6
 8000e16:	1aba      	subs	r2, r7, r2
 8000e18:	428e      	cmp	r6, r1
 8000e1a:	d100      	bne.n	8000e1e <__aeabi_dadd+0x52>
 8000e1c:	e0b0      	b.n	8000f80 <__aeabi_dadd+0x1b4>
 8000e1e:	2a00      	cmp	r2, #0
 8000e20:	dc00      	bgt.n	8000e24 <__aeabi_dadd+0x58>
 8000e22:	e078      	b.n	8000f16 <__aeabi_dadd+0x14a>
 8000e24:	4649      	mov	r1, r9
 8000e26:	2900      	cmp	r1, #0
 8000e28:	d100      	bne.n	8000e2c <__aeabi_dadd+0x60>
 8000e2a:	e0e9      	b.n	8001000 <__aeabi_dadd+0x234>
 8000e2c:	49c9      	ldr	r1, [pc, #804]	@ (8001154 <__aeabi_dadd+0x388>)
 8000e2e:	428f      	cmp	r7, r1
 8000e30:	d100      	bne.n	8000e34 <__aeabi_dadd+0x68>
 8000e32:	e195      	b.n	8001160 <__aeabi_dadd+0x394>
 8000e34:	2501      	movs	r5, #1
 8000e36:	2a38      	cmp	r2, #56	@ 0x38
 8000e38:	dc16      	bgt.n	8000e68 <__aeabi_dadd+0x9c>
 8000e3a:	2180      	movs	r1, #128	@ 0x80
 8000e3c:	4653      	mov	r3, sl
 8000e3e:	0409      	lsls	r1, r1, #16
 8000e40:	430b      	orrs	r3, r1
 8000e42:	469a      	mov	sl, r3
 8000e44:	2a1f      	cmp	r2, #31
 8000e46:	dd00      	ble.n	8000e4a <__aeabi_dadd+0x7e>
 8000e48:	e1e7      	b.n	800121a <__aeabi_dadd+0x44e>
 8000e4a:	2120      	movs	r1, #32
 8000e4c:	4655      	mov	r5, sl
 8000e4e:	1a8b      	subs	r3, r1, r2
 8000e50:	4661      	mov	r1, ip
 8000e52:	409d      	lsls	r5, r3
 8000e54:	40d1      	lsrs	r1, r2
 8000e56:	430d      	orrs	r5, r1
 8000e58:	4661      	mov	r1, ip
 8000e5a:	4099      	lsls	r1, r3
 8000e5c:	1e4b      	subs	r3, r1, #1
 8000e5e:	4199      	sbcs	r1, r3
 8000e60:	4653      	mov	r3, sl
 8000e62:	40d3      	lsrs	r3, r2
 8000e64:	430d      	orrs	r5, r1
 8000e66:	1ae4      	subs	r4, r4, r3
 8000e68:	1b45      	subs	r5, r0, r5
 8000e6a:	42a8      	cmp	r0, r5
 8000e6c:	4180      	sbcs	r0, r0
 8000e6e:	4240      	negs	r0, r0
 8000e70:	1a24      	subs	r4, r4, r0
 8000e72:	0223      	lsls	r3, r4, #8
 8000e74:	d400      	bmi.n	8000e78 <__aeabi_dadd+0xac>
 8000e76:	e10f      	b.n	8001098 <__aeabi_dadd+0x2cc>
 8000e78:	0264      	lsls	r4, r4, #9
 8000e7a:	0a64      	lsrs	r4, r4, #9
 8000e7c:	2c00      	cmp	r4, #0
 8000e7e:	d100      	bne.n	8000e82 <__aeabi_dadd+0xb6>
 8000e80:	e139      	b.n	80010f6 <__aeabi_dadd+0x32a>
 8000e82:	0020      	movs	r0, r4
 8000e84:	f001 fee4 	bl	8002c50 <__clzsi2>
 8000e88:	0003      	movs	r3, r0
 8000e8a:	3b08      	subs	r3, #8
 8000e8c:	2120      	movs	r1, #32
 8000e8e:	0028      	movs	r0, r5
 8000e90:	1aca      	subs	r2, r1, r3
 8000e92:	40d0      	lsrs	r0, r2
 8000e94:	409c      	lsls	r4, r3
 8000e96:	0002      	movs	r2, r0
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	4322      	orrs	r2, r4
 8000e9c:	429f      	cmp	r7, r3
 8000e9e:	dd00      	ble.n	8000ea2 <__aeabi_dadd+0xd6>
 8000ea0:	e173      	b.n	800118a <__aeabi_dadd+0x3be>
 8000ea2:	1bd8      	subs	r0, r3, r7
 8000ea4:	3001      	adds	r0, #1
 8000ea6:	1a09      	subs	r1, r1, r0
 8000ea8:	002c      	movs	r4, r5
 8000eaa:	408d      	lsls	r5, r1
 8000eac:	40c4      	lsrs	r4, r0
 8000eae:	1e6b      	subs	r3, r5, #1
 8000eb0:	419d      	sbcs	r5, r3
 8000eb2:	0013      	movs	r3, r2
 8000eb4:	40c2      	lsrs	r2, r0
 8000eb6:	408b      	lsls	r3, r1
 8000eb8:	4325      	orrs	r5, r4
 8000eba:	2700      	movs	r7, #0
 8000ebc:	0014      	movs	r4, r2
 8000ebe:	431d      	orrs	r5, r3
 8000ec0:	076b      	lsls	r3, r5, #29
 8000ec2:	d009      	beq.n	8000ed8 <__aeabi_dadd+0x10c>
 8000ec4:	230f      	movs	r3, #15
 8000ec6:	402b      	ands	r3, r5
 8000ec8:	2b04      	cmp	r3, #4
 8000eca:	d005      	beq.n	8000ed8 <__aeabi_dadd+0x10c>
 8000ecc:	1d2b      	adds	r3, r5, #4
 8000ece:	42ab      	cmp	r3, r5
 8000ed0:	41ad      	sbcs	r5, r5
 8000ed2:	426d      	negs	r5, r5
 8000ed4:	1964      	adds	r4, r4, r5
 8000ed6:	001d      	movs	r5, r3
 8000ed8:	0223      	lsls	r3, r4, #8
 8000eda:	d400      	bmi.n	8000ede <__aeabi_dadd+0x112>
 8000edc:	e12d      	b.n	800113a <__aeabi_dadd+0x36e>
 8000ede:	4a9d      	ldr	r2, [pc, #628]	@ (8001154 <__aeabi_dadd+0x388>)
 8000ee0:	3701      	adds	r7, #1
 8000ee2:	4297      	cmp	r7, r2
 8000ee4:	d100      	bne.n	8000ee8 <__aeabi_dadd+0x11c>
 8000ee6:	e0d3      	b.n	8001090 <__aeabi_dadd+0x2c4>
 8000ee8:	4646      	mov	r6, r8
 8000eea:	499b      	ldr	r1, [pc, #620]	@ (8001158 <__aeabi_dadd+0x38c>)
 8000eec:	08ed      	lsrs	r5, r5, #3
 8000eee:	4021      	ands	r1, r4
 8000ef0:	074a      	lsls	r2, r1, #29
 8000ef2:	432a      	orrs	r2, r5
 8000ef4:	057c      	lsls	r4, r7, #21
 8000ef6:	024d      	lsls	r5, r1, #9
 8000ef8:	0b2d      	lsrs	r5, r5, #12
 8000efa:	0d64      	lsrs	r4, r4, #21
 8000efc:	0524      	lsls	r4, r4, #20
 8000efe:	432c      	orrs	r4, r5
 8000f00:	07f6      	lsls	r6, r6, #31
 8000f02:	4334      	orrs	r4, r6
 8000f04:	0010      	movs	r0, r2
 8000f06:	0021      	movs	r1, r4
 8000f08:	b003      	add	sp, #12
 8000f0a:	bcf0      	pop	{r4, r5, r6, r7}
 8000f0c:	46bb      	mov	fp, r7
 8000f0e:	46b2      	mov	sl, r6
 8000f10:	46a9      	mov	r9, r5
 8000f12:	46a0      	mov	r8, r4
 8000f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f16:	2a00      	cmp	r2, #0
 8000f18:	d100      	bne.n	8000f1c <__aeabi_dadd+0x150>
 8000f1a:	e084      	b.n	8001026 <__aeabi_dadd+0x25a>
 8000f1c:	464a      	mov	r2, r9
 8000f1e:	1bd2      	subs	r2, r2, r7
 8000f20:	2f00      	cmp	r7, #0
 8000f22:	d000      	beq.n	8000f26 <__aeabi_dadd+0x15a>
 8000f24:	e16d      	b.n	8001202 <__aeabi_dadd+0x436>
 8000f26:	0025      	movs	r5, r4
 8000f28:	4305      	orrs	r5, r0
 8000f2a:	d100      	bne.n	8000f2e <__aeabi_dadd+0x162>
 8000f2c:	e127      	b.n	800117e <__aeabi_dadd+0x3b2>
 8000f2e:	1e56      	subs	r6, r2, #1
 8000f30:	2a01      	cmp	r2, #1
 8000f32:	d100      	bne.n	8000f36 <__aeabi_dadd+0x16a>
 8000f34:	e23b      	b.n	80013ae <__aeabi_dadd+0x5e2>
 8000f36:	4d87      	ldr	r5, [pc, #540]	@ (8001154 <__aeabi_dadd+0x388>)
 8000f38:	42aa      	cmp	r2, r5
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_dadd+0x172>
 8000f3c:	e26a      	b.n	8001414 <__aeabi_dadd+0x648>
 8000f3e:	2501      	movs	r5, #1
 8000f40:	2e38      	cmp	r6, #56	@ 0x38
 8000f42:	dc12      	bgt.n	8000f6a <__aeabi_dadd+0x19e>
 8000f44:	0032      	movs	r2, r6
 8000f46:	2a1f      	cmp	r2, #31
 8000f48:	dd00      	ble.n	8000f4c <__aeabi_dadd+0x180>
 8000f4a:	e1f8      	b.n	800133e <__aeabi_dadd+0x572>
 8000f4c:	2620      	movs	r6, #32
 8000f4e:	0025      	movs	r5, r4
 8000f50:	1ab6      	subs	r6, r6, r2
 8000f52:	0007      	movs	r7, r0
 8000f54:	4653      	mov	r3, sl
 8000f56:	40b0      	lsls	r0, r6
 8000f58:	40d4      	lsrs	r4, r2
 8000f5a:	40b5      	lsls	r5, r6
 8000f5c:	40d7      	lsrs	r7, r2
 8000f5e:	1e46      	subs	r6, r0, #1
 8000f60:	41b0      	sbcs	r0, r6
 8000f62:	1b1b      	subs	r3, r3, r4
 8000f64:	469a      	mov	sl, r3
 8000f66:	433d      	orrs	r5, r7
 8000f68:	4305      	orrs	r5, r0
 8000f6a:	4662      	mov	r2, ip
 8000f6c:	1b55      	subs	r5, r2, r5
 8000f6e:	45ac      	cmp	ip, r5
 8000f70:	4192      	sbcs	r2, r2
 8000f72:	4653      	mov	r3, sl
 8000f74:	4252      	negs	r2, r2
 8000f76:	000e      	movs	r6, r1
 8000f78:	464f      	mov	r7, r9
 8000f7a:	4688      	mov	r8, r1
 8000f7c:	1a9c      	subs	r4, r3, r2
 8000f7e:	e778      	b.n	8000e72 <__aeabi_dadd+0xa6>
 8000f80:	2a00      	cmp	r2, #0
 8000f82:	dc00      	bgt.n	8000f86 <__aeabi_dadd+0x1ba>
 8000f84:	e08e      	b.n	80010a4 <__aeabi_dadd+0x2d8>
 8000f86:	4649      	mov	r1, r9
 8000f88:	2900      	cmp	r1, #0
 8000f8a:	d175      	bne.n	8001078 <__aeabi_dadd+0x2ac>
 8000f8c:	4661      	mov	r1, ip
 8000f8e:	4653      	mov	r3, sl
 8000f90:	4319      	orrs	r1, r3
 8000f92:	d100      	bne.n	8000f96 <__aeabi_dadd+0x1ca>
 8000f94:	e0f6      	b.n	8001184 <__aeabi_dadd+0x3b8>
 8000f96:	1e51      	subs	r1, r2, #1
 8000f98:	2a01      	cmp	r2, #1
 8000f9a:	d100      	bne.n	8000f9e <__aeabi_dadd+0x1d2>
 8000f9c:	e191      	b.n	80012c2 <__aeabi_dadd+0x4f6>
 8000f9e:	4d6d      	ldr	r5, [pc, #436]	@ (8001154 <__aeabi_dadd+0x388>)
 8000fa0:	42aa      	cmp	r2, r5
 8000fa2:	d100      	bne.n	8000fa6 <__aeabi_dadd+0x1da>
 8000fa4:	e0dc      	b.n	8001160 <__aeabi_dadd+0x394>
 8000fa6:	2501      	movs	r5, #1
 8000fa8:	2938      	cmp	r1, #56	@ 0x38
 8000faa:	dc14      	bgt.n	8000fd6 <__aeabi_dadd+0x20a>
 8000fac:	000a      	movs	r2, r1
 8000fae:	2a1f      	cmp	r2, #31
 8000fb0:	dd00      	ble.n	8000fb4 <__aeabi_dadd+0x1e8>
 8000fb2:	e1a2      	b.n	80012fa <__aeabi_dadd+0x52e>
 8000fb4:	2120      	movs	r1, #32
 8000fb6:	4653      	mov	r3, sl
 8000fb8:	1a89      	subs	r1, r1, r2
 8000fba:	408b      	lsls	r3, r1
 8000fbc:	001d      	movs	r5, r3
 8000fbe:	4663      	mov	r3, ip
 8000fc0:	40d3      	lsrs	r3, r2
 8000fc2:	431d      	orrs	r5, r3
 8000fc4:	4663      	mov	r3, ip
 8000fc6:	408b      	lsls	r3, r1
 8000fc8:	0019      	movs	r1, r3
 8000fca:	1e4b      	subs	r3, r1, #1
 8000fcc:	4199      	sbcs	r1, r3
 8000fce:	4653      	mov	r3, sl
 8000fd0:	40d3      	lsrs	r3, r2
 8000fd2:	430d      	orrs	r5, r1
 8000fd4:	18e4      	adds	r4, r4, r3
 8000fd6:	182d      	adds	r5, r5, r0
 8000fd8:	4285      	cmp	r5, r0
 8000fda:	4180      	sbcs	r0, r0
 8000fdc:	4240      	negs	r0, r0
 8000fde:	1824      	adds	r4, r4, r0
 8000fe0:	0223      	lsls	r3, r4, #8
 8000fe2:	d559      	bpl.n	8001098 <__aeabi_dadd+0x2cc>
 8000fe4:	4b5b      	ldr	r3, [pc, #364]	@ (8001154 <__aeabi_dadd+0x388>)
 8000fe6:	3701      	adds	r7, #1
 8000fe8:	429f      	cmp	r7, r3
 8000fea:	d051      	beq.n	8001090 <__aeabi_dadd+0x2c4>
 8000fec:	2101      	movs	r1, #1
 8000fee:	4b5a      	ldr	r3, [pc, #360]	@ (8001158 <__aeabi_dadd+0x38c>)
 8000ff0:	086a      	lsrs	r2, r5, #1
 8000ff2:	401c      	ands	r4, r3
 8000ff4:	4029      	ands	r1, r5
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	07e5      	lsls	r5, r4, #31
 8000ffa:	4315      	orrs	r5, r2
 8000ffc:	0864      	lsrs	r4, r4, #1
 8000ffe:	e75f      	b.n	8000ec0 <__aeabi_dadd+0xf4>
 8001000:	4661      	mov	r1, ip
 8001002:	4653      	mov	r3, sl
 8001004:	4319      	orrs	r1, r3
 8001006:	d100      	bne.n	800100a <__aeabi_dadd+0x23e>
 8001008:	e0bc      	b.n	8001184 <__aeabi_dadd+0x3b8>
 800100a:	1e51      	subs	r1, r2, #1
 800100c:	2a01      	cmp	r2, #1
 800100e:	d100      	bne.n	8001012 <__aeabi_dadd+0x246>
 8001010:	e164      	b.n	80012dc <__aeabi_dadd+0x510>
 8001012:	4d50      	ldr	r5, [pc, #320]	@ (8001154 <__aeabi_dadd+0x388>)
 8001014:	42aa      	cmp	r2, r5
 8001016:	d100      	bne.n	800101a <__aeabi_dadd+0x24e>
 8001018:	e16a      	b.n	80012f0 <__aeabi_dadd+0x524>
 800101a:	2501      	movs	r5, #1
 800101c:	2938      	cmp	r1, #56	@ 0x38
 800101e:	dd00      	ble.n	8001022 <__aeabi_dadd+0x256>
 8001020:	e722      	b.n	8000e68 <__aeabi_dadd+0x9c>
 8001022:	000a      	movs	r2, r1
 8001024:	e70e      	b.n	8000e44 <__aeabi_dadd+0x78>
 8001026:	4a4d      	ldr	r2, [pc, #308]	@ (800115c <__aeabi_dadd+0x390>)
 8001028:	1c7d      	adds	r5, r7, #1
 800102a:	4215      	tst	r5, r2
 800102c:	d000      	beq.n	8001030 <__aeabi_dadd+0x264>
 800102e:	e0d0      	b.n	80011d2 <__aeabi_dadd+0x406>
 8001030:	0025      	movs	r5, r4
 8001032:	4662      	mov	r2, ip
 8001034:	4653      	mov	r3, sl
 8001036:	4305      	orrs	r5, r0
 8001038:	431a      	orrs	r2, r3
 800103a:	2f00      	cmp	r7, #0
 800103c:	d000      	beq.n	8001040 <__aeabi_dadd+0x274>
 800103e:	e137      	b.n	80012b0 <__aeabi_dadd+0x4e4>
 8001040:	2d00      	cmp	r5, #0
 8001042:	d100      	bne.n	8001046 <__aeabi_dadd+0x27a>
 8001044:	e1a8      	b.n	8001398 <__aeabi_dadd+0x5cc>
 8001046:	2a00      	cmp	r2, #0
 8001048:	d100      	bne.n	800104c <__aeabi_dadd+0x280>
 800104a:	e16a      	b.n	8001322 <__aeabi_dadd+0x556>
 800104c:	4663      	mov	r3, ip
 800104e:	1ac5      	subs	r5, r0, r3
 8001050:	4653      	mov	r3, sl
 8001052:	1ae2      	subs	r2, r4, r3
 8001054:	42a8      	cmp	r0, r5
 8001056:	419b      	sbcs	r3, r3
 8001058:	425b      	negs	r3, r3
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	021a      	lsls	r2, r3, #8
 800105e:	d400      	bmi.n	8001062 <__aeabi_dadd+0x296>
 8001060:	e203      	b.n	800146a <__aeabi_dadd+0x69e>
 8001062:	4663      	mov	r3, ip
 8001064:	1a1d      	subs	r5, r3, r0
 8001066:	45ac      	cmp	ip, r5
 8001068:	4192      	sbcs	r2, r2
 800106a:	4653      	mov	r3, sl
 800106c:	4252      	negs	r2, r2
 800106e:	1b1c      	subs	r4, r3, r4
 8001070:	000e      	movs	r6, r1
 8001072:	4688      	mov	r8, r1
 8001074:	1aa4      	subs	r4, r4, r2
 8001076:	e723      	b.n	8000ec0 <__aeabi_dadd+0xf4>
 8001078:	4936      	ldr	r1, [pc, #216]	@ (8001154 <__aeabi_dadd+0x388>)
 800107a:	428f      	cmp	r7, r1
 800107c:	d070      	beq.n	8001160 <__aeabi_dadd+0x394>
 800107e:	2501      	movs	r5, #1
 8001080:	2a38      	cmp	r2, #56	@ 0x38
 8001082:	dca8      	bgt.n	8000fd6 <__aeabi_dadd+0x20a>
 8001084:	2180      	movs	r1, #128	@ 0x80
 8001086:	4653      	mov	r3, sl
 8001088:	0409      	lsls	r1, r1, #16
 800108a:	430b      	orrs	r3, r1
 800108c:	469a      	mov	sl, r3
 800108e:	e78e      	b.n	8000fae <__aeabi_dadd+0x1e2>
 8001090:	003c      	movs	r4, r7
 8001092:	2500      	movs	r5, #0
 8001094:	2200      	movs	r2, #0
 8001096:	e731      	b.n	8000efc <__aeabi_dadd+0x130>
 8001098:	2307      	movs	r3, #7
 800109a:	402b      	ands	r3, r5
 800109c:	2b00      	cmp	r3, #0
 800109e:	d000      	beq.n	80010a2 <__aeabi_dadd+0x2d6>
 80010a0:	e710      	b.n	8000ec4 <__aeabi_dadd+0xf8>
 80010a2:	e093      	b.n	80011cc <__aeabi_dadd+0x400>
 80010a4:	2a00      	cmp	r2, #0
 80010a6:	d074      	beq.n	8001192 <__aeabi_dadd+0x3c6>
 80010a8:	464a      	mov	r2, r9
 80010aa:	1bd2      	subs	r2, r2, r7
 80010ac:	2f00      	cmp	r7, #0
 80010ae:	d100      	bne.n	80010b2 <__aeabi_dadd+0x2e6>
 80010b0:	e0c7      	b.n	8001242 <__aeabi_dadd+0x476>
 80010b2:	4928      	ldr	r1, [pc, #160]	@ (8001154 <__aeabi_dadd+0x388>)
 80010b4:	4589      	cmp	r9, r1
 80010b6:	d100      	bne.n	80010ba <__aeabi_dadd+0x2ee>
 80010b8:	e185      	b.n	80013c6 <__aeabi_dadd+0x5fa>
 80010ba:	2501      	movs	r5, #1
 80010bc:	2a38      	cmp	r2, #56	@ 0x38
 80010be:	dc12      	bgt.n	80010e6 <__aeabi_dadd+0x31a>
 80010c0:	2180      	movs	r1, #128	@ 0x80
 80010c2:	0409      	lsls	r1, r1, #16
 80010c4:	430c      	orrs	r4, r1
 80010c6:	2a1f      	cmp	r2, #31
 80010c8:	dd00      	ble.n	80010cc <__aeabi_dadd+0x300>
 80010ca:	e1ab      	b.n	8001424 <__aeabi_dadd+0x658>
 80010cc:	2120      	movs	r1, #32
 80010ce:	0025      	movs	r5, r4
 80010d0:	1a89      	subs	r1, r1, r2
 80010d2:	0007      	movs	r7, r0
 80010d4:	4088      	lsls	r0, r1
 80010d6:	408d      	lsls	r5, r1
 80010d8:	40d7      	lsrs	r7, r2
 80010da:	1e41      	subs	r1, r0, #1
 80010dc:	4188      	sbcs	r0, r1
 80010de:	40d4      	lsrs	r4, r2
 80010e0:	433d      	orrs	r5, r7
 80010e2:	4305      	orrs	r5, r0
 80010e4:	44a2      	add	sl, r4
 80010e6:	4465      	add	r5, ip
 80010e8:	4565      	cmp	r5, ip
 80010ea:	4192      	sbcs	r2, r2
 80010ec:	4252      	negs	r2, r2
 80010ee:	4452      	add	r2, sl
 80010f0:	0014      	movs	r4, r2
 80010f2:	464f      	mov	r7, r9
 80010f4:	e774      	b.n	8000fe0 <__aeabi_dadd+0x214>
 80010f6:	0028      	movs	r0, r5
 80010f8:	f001 fdaa 	bl	8002c50 <__clzsi2>
 80010fc:	0003      	movs	r3, r0
 80010fe:	3318      	adds	r3, #24
 8001100:	2b1f      	cmp	r3, #31
 8001102:	dc00      	bgt.n	8001106 <__aeabi_dadd+0x33a>
 8001104:	e6c2      	b.n	8000e8c <__aeabi_dadd+0xc0>
 8001106:	002a      	movs	r2, r5
 8001108:	3808      	subs	r0, #8
 800110a:	4082      	lsls	r2, r0
 800110c:	429f      	cmp	r7, r3
 800110e:	dd00      	ble.n	8001112 <__aeabi_dadd+0x346>
 8001110:	e0a9      	b.n	8001266 <__aeabi_dadd+0x49a>
 8001112:	1bdb      	subs	r3, r3, r7
 8001114:	1c58      	adds	r0, r3, #1
 8001116:	281f      	cmp	r0, #31
 8001118:	dc00      	bgt.n	800111c <__aeabi_dadd+0x350>
 800111a:	e1ac      	b.n	8001476 <__aeabi_dadd+0x6aa>
 800111c:	0015      	movs	r5, r2
 800111e:	3b1f      	subs	r3, #31
 8001120:	40dd      	lsrs	r5, r3
 8001122:	2820      	cmp	r0, #32
 8001124:	d005      	beq.n	8001132 <__aeabi_dadd+0x366>
 8001126:	2340      	movs	r3, #64	@ 0x40
 8001128:	1a1b      	subs	r3, r3, r0
 800112a:	409a      	lsls	r2, r3
 800112c:	1e53      	subs	r3, r2, #1
 800112e:	419a      	sbcs	r2, r3
 8001130:	4315      	orrs	r5, r2
 8001132:	2307      	movs	r3, #7
 8001134:	2700      	movs	r7, #0
 8001136:	402b      	ands	r3, r5
 8001138:	e7b0      	b.n	800109c <__aeabi_dadd+0x2d0>
 800113a:	08ed      	lsrs	r5, r5, #3
 800113c:	4b05      	ldr	r3, [pc, #20]	@ (8001154 <__aeabi_dadd+0x388>)
 800113e:	0762      	lsls	r2, r4, #29
 8001140:	432a      	orrs	r2, r5
 8001142:	08e4      	lsrs	r4, r4, #3
 8001144:	429f      	cmp	r7, r3
 8001146:	d00f      	beq.n	8001168 <__aeabi_dadd+0x39c>
 8001148:	0324      	lsls	r4, r4, #12
 800114a:	0b25      	lsrs	r5, r4, #12
 800114c:	057c      	lsls	r4, r7, #21
 800114e:	0d64      	lsrs	r4, r4, #21
 8001150:	e6d4      	b.n	8000efc <__aeabi_dadd+0x130>
 8001152:	46c0      	nop			@ (mov r8, r8)
 8001154:	000007ff 	.word	0x000007ff
 8001158:	ff7fffff 	.word	0xff7fffff
 800115c:	000007fe 	.word	0x000007fe
 8001160:	08c0      	lsrs	r0, r0, #3
 8001162:	0762      	lsls	r2, r4, #29
 8001164:	4302      	orrs	r2, r0
 8001166:	08e4      	lsrs	r4, r4, #3
 8001168:	0013      	movs	r3, r2
 800116a:	4323      	orrs	r3, r4
 800116c:	d100      	bne.n	8001170 <__aeabi_dadd+0x3a4>
 800116e:	e186      	b.n	800147e <__aeabi_dadd+0x6b2>
 8001170:	2580      	movs	r5, #128	@ 0x80
 8001172:	032d      	lsls	r5, r5, #12
 8001174:	4325      	orrs	r5, r4
 8001176:	032d      	lsls	r5, r5, #12
 8001178:	4cc3      	ldr	r4, [pc, #780]	@ (8001488 <__aeabi_dadd+0x6bc>)
 800117a:	0b2d      	lsrs	r5, r5, #12
 800117c:	e6be      	b.n	8000efc <__aeabi_dadd+0x130>
 800117e:	4660      	mov	r0, ip
 8001180:	4654      	mov	r4, sl
 8001182:	000e      	movs	r6, r1
 8001184:	0017      	movs	r7, r2
 8001186:	08c5      	lsrs	r5, r0, #3
 8001188:	e7d8      	b.n	800113c <__aeabi_dadd+0x370>
 800118a:	4cc0      	ldr	r4, [pc, #768]	@ (800148c <__aeabi_dadd+0x6c0>)
 800118c:	1aff      	subs	r7, r7, r3
 800118e:	4014      	ands	r4, r2
 8001190:	e696      	b.n	8000ec0 <__aeabi_dadd+0xf4>
 8001192:	4abf      	ldr	r2, [pc, #764]	@ (8001490 <__aeabi_dadd+0x6c4>)
 8001194:	1c79      	adds	r1, r7, #1
 8001196:	4211      	tst	r1, r2
 8001198:	d16b      	bne.n	8001272 <__aeabi_dadd+0x4a6>
 800119a:	0022      	movs	r2, r4
 800119c:	4302      	orrs	r2, r0
 800119e:	2f00      	cmp	r7, #0
 80011a0:	d000      	beq.n	80011a4 <__aeabi_dadd+0x3d8>
 80011a2:	e0db      	b.n	800135c <__aeabi_dadd+0x590>
 80011a4:	2a00      	cmp	r2, #0
 80011a6:	d100      	bne.n	80011aa <__aeabi_dadd+0x3de>
 80011a8:	e12d      	b.n	8001406 <__aeabi_dadd+0x63a>
 80011aa:	4662      	mov	r2, ip
 80011ac:	4653      	mov	r3, sl
 80011ae:	431a      	orrs	r2, r3
 80011b0:	d100      	bne.n	80011b4 <__aeabi_dadd+0x3e8>
 80011b2:	e0b6      	b.n	8001322 <__aeabi_dadd+0x556>
 80011b4:	4663      	mov	r3, ip
 80011b6:	18c5      	adds	r5, r0, r3
 80011b8:	4285      	cmp	r5, r0
 80011ba:	4180      	sbcs	r0, r0
 80011bc:	4454      	add	r4, sl
 80011be:	4240      	negs	r0, r0
 80011c0:	1824      	adds	r4, r4, r0
 80011c2:	0223      	lsls	r3, r4, #8
 80011c4:	d502      	bpl.n	80011cc <__aeabi_dadd+0x400>
 80011c6:	000f      	movs	r7, r1
 80011c8:	4bb0      	ldr	r3, [pc, #704]	@ (800148c <__aeabi_dadd+0x6c0>)
 80011ca:	401c      	ands	r4, r3
 80011cc:	003a      	movs	r2, r7
 80011ce:	0028      	movs	r0, r5
 80011d0:	e7d8      	b.n	8001184 <__aeabi_dadd+0x3b8>
 80011d2:	4662      	mov	r2, ip
 80011d4:	1a85      	subs	r5, r0, r2
 80011d6:	42a8      	cmp	r0, r5
 80011d8:	4192      	sbcs	r2, r2
 80011da:	4653      	mov	r3, sl
 80011dc:	4252      	negs	r2, r2
 80011de:	4691      	mov	r9, r2
 80011e0:	1ae3      	subs	r3, r4, r3
 80011e2:	001a      	movs	r2, r3
 80011e4:	464b      	mov	r3, r9
 80011e6:	1ad2      	subs	r2, r2, r3
 80011e8:	0013      	movs	r3, r2
 80011ea:	4691      	mov	r9, r2
 80011ec:	021a      	lsls	r2, r3, #8
 80011ee:	d454      	bmi.n	800129a <__aeabi_dadd+0x4ce>
 80011f0:	464a      	mov	r2, r9
 80011f2:	464c      	mov	r4, r9
 80011f4:	432a      	orrs	r2, r5
 80011f6:	d000      	beq.n	80011fa <__aeabi_dadd+0x42e>
 80011f8:	e640      	b.n	8000e7c <__aeabi_dadd+0xb0>
 80011fa:	2600      	movs	r6, #0
 80011fc:	2400      	movs	r4, #0
 80011fe:	2500      	movs	r5, #0
 8001200:	e67c      	b.n	8000efc <__aeabi_dadd+0x130>
 8001202:	4da1      	ldr	r5, [pc, #644]	@ (8001488 <__aeabi_dadd+0x6bc>)
 8001204:	45a9      	cmp	r9, r5
 8001206:	d100      	bne.n	800120a <__aeabi_dadd+0x43e>
 8001208:	e090      	b.n	800132c <__aeabi_dadd+0x560>
 800120a:	2501      	movs	r5, #1
 800120c:	2a38      	cmp	r2, #56	@ 0x38
 800120e:	dd00      	ble.n	8001212 <__aeabi_dadd+0x446>
 8001210:	e6ab      	b.n	8000f6a <__aeabi_dadd+0x19e>
 8001212:	2580      	movs	r5, #128	@ 0x80
 8001214:	042d      	lsls	r5, r5, #16
 8001216:	432c      	orrs	r4, r5
 8001218:	e695      	b.n	8000f46 <__aeabi_dadd+0x17a>
 800121a:	0011      	movs	r1, r2
 800121c:	4655      	mov	r5, sl
 800121e:	3920      	subs	r1, #32
 8001220:	40cd      	lsrs	r5, r1
 8001222:	46a9      	mov	r9, r5
 8001224:	2a20      	cmp	r2, #32
 8001226:	d006      	beq.n	8001236 <__aeabi_dadd+0x46a>
 8001228:	2140      	movs	r1, #64	@ 0x40
 800122a:	4653      	mov	r3, sl
 800122c:	1a8a      	subs	r2, r1, r2
 800122e:	4093      	lsls	r3, r2
 8001230:	4662      	mov	r2, ip
 8001232:	431a      	orrs	r2, r3
 8001234:	4694      	mov	ip, r2
 8001236:	4665      	mov	r5, ip
 8001238:	1e6b      	subs	r3, r5, #1
 800123a:	419d      	sbcs	r5, r3
 800123c:	464b      	mov	r3, r9
 800123e:	431d      	orrs	r5, r3
 8001240:	e612      	b.n	8000e68 <__aeabi_dadd+0x9c>
 8001242:	0021      	movs	r1, r4
 8001244:	4301      	orrs	r1, r0
 8001246:	d100      	bne.n	800124a <__aeabi_dadd+0x47e>
 8001248:	e0c4      	b.n	80013d4 <__aeabi_dadd+0x608>
 800124a:	1e51      	subs	r1, r2, #1
 800124c:	2a01      	cmp	r2, #1
 800124e:	d100      	bne.n	8001252 <__aeabi_dadd+0x486>
 8001250:	e0fb      	b.n	800144a <__aeabi_dadd+0x67e>
 8001252:	4d8d      	ldr	r5, [pc, #564]	@ (8001488 <__aeabi_dadd+0x6bc>)
 8001254:	42aa      	cmp	r2, r5
 8001256:	d100      	bne.n	800125a <__aeabi_dadd+0x48e>
 8001258:	e0b5      	b.n	80013c6 <__aeabi_dadd+0x5fa>
 800125a:	2501      	movs	r5, #1
 800125c:	2938      	cmp	r1, #56	@ 0x38
 800125e:	dd00      	ble.n	8001262 <__aeabi_dadd+0x496>
 8001260:	e741      	b.n	80010e6 <__aeabi_dadd+0x31a>
 8001262:	000a      	movs	r2, r1
 8001264:	e72f      	b.n	80010c6 <__aeabi_dadd+0x2fa>
 8001266:	4c89      	ldr	r4, [pc, #548]	@ (800148c <__aeabi_dadd+0x6c0>)
 8001268:	1aff      	subs	r7, r7, r3
 800126a:	4014      	ands	r4, r2
 800126c:	0762      	lsls	r2, r4, #29
 800126e:	08e4      	lsrs	r4, r4, #3
 8001270:	e76a      	b.n	8001148 <__aeabi_dadd+0x37c>
 8001272:	4a85      	ldr	r2, [pc, #532]	@ (8001488 <__aeabi_dadd+0x6bc>)
 8001274:	4291      	cmp	r1, r2
 8001276:	d100      	bne.n	800127a <__aeabi_dadd+0x4ae>
 8001278:	e0e3      	b.n	8001442 <__aeabi_dadd+0x676>
 800127a:	4663      	mov	r3, ip
 800127c:	18c2      	adds	r2, r0, r3
 800127e:	4282      	cmp	r2, r0
 8001280:	4180      	sbcs	r0, r0
 8001282:	0023      	movs	r3, r4
 8001284:	4240      	negs	r0, r0
 8001286:	4453      	add	r3, sl
 8001288:	181b      	adds	r3, r3, r0
 800128a:	07dd      	lsls	r5, r3, #31
 800128c:	085c      	lsrs	r4, r3, #1
 800128e:	2307      	movs	r3, #7
 8001290:	0852      	lsrs	r2, r2, #1
 8001292:	4315      	orrs	r5, r2
 8001294:	000f      	movs	r7, r1
 8001296:	402b      	ands	r3, r5
 8001298:	e700      	b.n	800109c <__aeabi_dadd+0x2d0>
 800129a:	4663      	mov	r3, ip
 800129c:	1a1d      	subs	r5, r3, r0
 800129e:	45ac      	cmp	ip, r5
 80012a0:	4192      	sbcs	r2, r2
 80012a2:	4653      	mov	r3, sl
 80012a4:	4252      	negs	r2, r2
 80012a6:	1b1c      	subs	r4, r3, r4
 80012a8:	000e      	movs	r6, r1
 80012aa:	4688      	mov	r8, r1
 80012ac:	1aa4      	subs	r4, r4, r2
 80012ae:	e5e5      	b.n	8000e7c <__aeabi_dadd+0xb0>
 80012b0:	2d00      	cmp	r5, #0
 80012b2:	d000      	beq.n	80012b6 <__aeabi_dadd+0x4ea>
 80012b4:	e091      	b.n	80013da <__aeabi_dadd+0x60e>
 80012b6:	2a00      	cmp	r2, #0
 80012b8:	d138      	bne.n	800132c <__aeabi_dadd+0x560>
 80012ba:	2480      	movs	r4, #128	@ 0x80
 80012bc:	2600      	movs	r6, #0
 80012be:	0324      	lsls	r4, r4, #12
 80012c0:	e756      	b.n	8001170 <__aeabi_dadd+0x3a4>
 80012c2:	4663      	mov	r3, ip
 80012c4:	18c5      	adds	r5, r0, r3
 80012c6:	4285      	cmp	r5, r0
 80012c8:	4180      	sbcs	r0, r0
 80012ca:	4454      	add	r4, sl
 80012cc:	4240      	negs	r0, r0
 80012ce:	1824      	adds	r4, r4, r0
 80012d0:	2701      	movs	r7, #1
 80012d2:	0223      	lsls	r3, r4, #8
 80012d4:	d400      	bmi.n	80012d8 <__aeabi_dadd+0x50c>
 80012d6:	e6df      	b.n	8001098 <__aeabi_dadd+0x2cc>
 80012d8:	2702      	movs	r7, #2
 80012da:	e687      	b.n	8000fec <__aeabi_dadd+0x220>
 80012dc:	4663      	mov	r3, ip
 80012de:	1ac5      	subs	r5, r0, r3
 80012e0:	42a8      	cmp	r0, r5
 80012e2:	4180      	sbcs	r0, r0
 80012e4:	4653      	mov	r3, sl
 80012e6:	4240      	negs	r0, r0
 80012e8:	1ae4      	subs	r4, r4, r3
 80012ea:	2701      	movs	r7, #1
 80012ec:	1a24      	subs	r4, r4, r0
 80012ee:	e5c0      	b.n	8000e72 <__aeabi_dadd+0xa6>
 80012f0:	0762      	lsls	r2, r4, #29
 80012f2:	08c0      	lsrs	r0, r0, #3
 80012f4:	4302      	orrs	r2, r0
 80012f6:	08e4      	lsrs	r4, r4, #3
 80012f8:	e736      	b.n	8001168 <__aeabi_dadd+0x39c>
 80012fa:	0011      	movs	r1, r2
 80012fc:	4653      	mov	r3, sl
 80012fe:	3920      	subs	r1, #32
 8001300:	40cb      	lsrs	r3, r1
 8001302:	4699      	mov	r9, r3
 8001304:	2a20      	cmp	r2, #32
 8001306:	d006      	beq.n	8001316 <__aeabi_dadd+0x54a>
 8001308:	2140      	movs	r1, #64	@ 0x40
 800130a:	4653      	mov	r3, sl
 800130c:	1a8a      	subs	r2, r1, r2
 800130e:	4093      	lsls	r3, r2
 8001310:	4662      	mov	r2, ip
 8001312:	431a      	orrs	r2, r3
 8001314:	4694      	mov	ip, r2
 8001316:	4665      	mov	r5, ip
 8001318:	1e6b      	subs	r3, r5, #1
 800131a:	419d      	sbcs	r5, r3
 800131c:	464b      	mov	r3, r9
 800131e:	431d      	orrs	r5, r3
 8001320:	e659      	b.n	8000fd6 <__aeabi_dadd+0x20a>
 8001322:	0762      	lsls	r2, r4, #29
 8001324:	08c0      	lsrs	r0, r0, #3
 8001326:	4302      	orrs	r2, r0
 8001328:	08e4      	lsrs	r4, r4, #3
 800132a:	e70d      	b.n	8001148 <__aeabi_dadd+0x37c>
 800132c:	4653      	mov	r3, sl
 800132e:	075a      	lsls	r2, r3, #29
 8001330:	4663      	mov	r3, ip
 8001332:	08d8      	lsrs	r0, r3, #3
 8001334:	4653      	mov	r3, sl
 8001336:	000e      	movs	r6, r1
 8001338:	4302      	orrs	r2, r0
 800133a:	08dc      	lsrs	r4, r3, #3
 800133c:	e714      	b.n	8001168 <__aeabi_dadd+0x39c>
 800133e:	0015      	movs	r5, r2
 8001340:	0026      	movs	r6, r4
 8001342:	3d20      	subs	r5, #32
 8001344:	40ee      	lsrs	r6, r5
 8001346:	2a20      	cmp	r2, #32
 8001348:	d003      	beq.n	8001352 <__aeabi_dadd+0x586>
 800134a:	2540      	movs	r5, #64	@ 0x40
 800134c:	1aaa      	subs	r2, r5, r2
 800134e:	4094      	lsls	r4, r2
 8001350:	4320      	orrs	r0, r4
 8001352:	1e42      	subs	r2, r0, #1
 8001354:	4190      	sbcs	r0, r2
 8001356:	0005      	movs	r5, r0
 8001358:	4335      	orrs	r5, r6
 800135a:	e606      	b.n	8000f6a <__aeabi_dadd+0x19e>
 800135c:	2a00      	cmp	r2, #0
 800135e:	d07c      	beq.n	800145a <__aeabi_dadd+0x68e>
 8001360:	4662      	mov	r2, ip
 8001362:	4653      	mov	r3, sl
 8001364:	08c0      	lsrs	r0, r0, #3
 8001366:	431a      	orrs	r2, r3
 8001368:	d100      	bne.n	800136c <__aeabi_dadd+0x5a0>
 800136a:	e6fa      	b.n	8001162 <__aeabi_dadd+0x396>
 800136c:	0762      	lsls	r2, r4, #29
 800136e:	4310      	orrs	r0, r2
 8001370:	2280      	movs	r2, #128	@ 0x80
 8001372:	08e4      	lsrs	r4, r4, #3
 8001374:	0312      	lsls	r2, r2, #12
 8001376:	4214      	tst	r4, r2
 8001378:	d008      	beq.n	800138c <__aeabi_dadd+0x5c0>
 800137a:	08d9      	lsrs	r1, r3, #3
 800137c:	4211      	tst	r1, r2
 800137e:	d105      	bne.n	800138c <__aeabi_dadd+0x5c0>
 8001380:	4663      	mov	r3, ip
 8001382:	08d8      	lsrs	r0, r3, #3
 8001384:	4653      	mov	r3, sl
 8001386:	000c      	movs	r4, r1
 8001388:	075b      	lsls	r3, r3, #29
 800138a:	4318      	orrs	r0, r3
 800138c:	0f42      	lsrs	r2, r0, #29
 800138e:	00c0      	lsls	r0, r0, #3
 8001390:	08c0      	lsrs	r0, r0, #3
 8001392:	0752      	lsls	r2, r2, #29
 8001394:	4302      	orrs	r2, r0
 8001396:	e6e7      	b.n	8001168 <__aeabi_dadd+0x39c>
 8001398:	2a00      	cmp	r2, #0
 800139a:	d100      	bne.n	800139e <__aeabi_dadd+0x5d2>
 800139c:	e72d      	b.n	80011fa <__aeabi_dadd+0x42e>
 800139e:	4663      	mov	r3, ip
 80013a0:	08d8      	lsrs	r0, r3, #3
 80013a2:	4653      	mov	r3, sl
 80013a4:	075a      	lsls	r2, r3, #29
 80013a6:	000e      	movs	r6, r1
 80013a8:	4302      	orrs	r2, r0
 80013aa:	08dc      	lsrs	r4, r3, #3
 80013ac:	e6cc      	b.n	8001148 <__aeabi_dadd+0x37c>
 80013ae:	4663      	mov	r3, ip
 80013b0:	1a1d      	subs	r5, r3, r0
 80013b2:	45ac      	cmp	ip, r5
 80013b4:	4192      	sbcs	r2, r2
 80013b6:	4653      	mov	r3, sl
 80013b8:	4252      	negs	r2, r2
 80013ba:	1b1c      	subs	r4, r3, r4
 80013bc:	000e      	movs	r6, r1
 80013be:	4688      	mov	r8, r1
 80013c0:	1aa4      	subs	r4, r4, r2
 80013c2:	3701      	adds	r7, #1
 80013c4:	e555      	b.n	8000e72 <__aeabi_dadd+0xa6>
 80013c6:	4663      	mov	r3, ip
 80013c8:	08d9      	lsrs	r1, r3, #3
 80013ca:	4653      	mov	r3, sl
 80013cc:	075a      	lsls	r2, r3, #29
 80013ce:	430a      	orrs	r2, r1
 80013d0:	08dc      	lsrs	r4, r3, #3
 80013d2:	e6c9      	b.n	8001168 <__aeabi_dadd+0x39c>
 80013d4:	4660      	mov	r0, ip
 80013d6:	4654      	mov	r4, sl
 80013d8:	e6d4      	b.n	8001184 <__aeabi_dadd+0x3b8>
 80013da:	08c0      	lsrs	r0, r0, #3
 80013dc:	2a00      	cmp	r2, #0
 80013de:	d100      	bne.n	80013e2 <__aeabi_dadd+0x616>
 80013e0:	e6bf      	b.n	8001162 <__aeabi_dadd+0x396>
 80013e2:	0762      	lsls	r2, r4, #29
 80013e4:	4310      	orrs	r0, r2
 80013e6:	2280      	movs	r2, #128	@ 0x80
 80013e8:	08e4      	lsrs	r4, r4, #3
 80013ea:	0312      	lsls	r2, r2, #12
 80013ec:	4214      	tst	r4, r2
 80013ee:	d0cd      	beq.n	800138c <__aeabi_dadd+0x5c0>
 80013f0:	08dd      	lsrs	r5, r3, #3
 80013f2:	4215      	tst	r5, r2
 80013f4:	d1ca      	bne.n	800138c <__aeabi_dadd+0x5c0>
 80013f6:	4663      	mov	r3, ip
 80013f8:	08d8      	lsrs	r0, r3, #3
 80013fa:	4653      	mov	r3, sl
 80013fc:	075b      	lsls	r3, r3, #29
 80013fe:	000e      	movs	r6, r1
 8001400:	002c      	movs	r4, r5
 8001402:	4318      	orrs	r0, r3
 8001404:	e7c2      	b.n	800138c <__aeabi_dadd+0x5c0>
 8001406:	4663      	mov	r3, ip
 8001408:	08d9      	lsrs	r1, r3, #3
 800140a:	4653      	mov	r3, sl
 800140c:	075a      	lsls	r2, r3, #29
 800140e:	430a      	orrs	r2, r1
 8001410:	08dc      	lsrs	r4, r3, #3
 8001412:	e699      	b.n	8001148 <__aeabi_dadd+0x37c>
 8001414:	4663      	mov	r3, ip
 8001416:	08d8      	lsrs	r0, r3, #3
 8001418:	4653      	mov	r3, sl
 800141a:	075a      	lsls	r2, r3, #29
 800141c:	000e      	movs	r6, r1
 800141e:	4302      	orrs	r2, r0
 8001420:	08dc      	lsrs	r4, r3, #3
 8001422:	e6a1      	b.n	8001168 <__aeabi_dadd+0x39c>
 8001424:	0011      	movs	r1, r2
 8001426:	0027      	movs	r7, r4
 8001428:	3920      	subs	r1, #32
 800142a:	40cf      	lsrs	r7, r1
 800142c:	2a20      	cmp	r2, #32
 800142e:	d003      	beq.n	8001438 <__aeabi_dadd+0x66c>
 8001430:	2140      	movs	r1, #64	@ 0x40
 8001432:	1a8a      	subs	r2, r1, r2
 8001434:	4094      	lsls	r4, r2
 8001436:	4320      	orrs	r0, r4
 8001438:	1e42      	subs	r2, r0, #1
 800143a:	4190      	sbcs	r0, r2
 800143c:	0005      	movs	r5, r0
 800143e:	433d      	orrs	r5, r7
 8001440:	e651      	b.n	80010e6 <__aeabi_dadd+0x31a>
 8001442:	000c      	movs	r4, r1
 8001444:	2500      	movs	r5, #0
 8001446:	2200      	movs	r2, #0
 8001448:	e558      	b.n	8000efc <__aeabi_dadd+0x130>
 800144a:	4460      	add	r0, ip
 800144c:	4560      	cmp	r0, ip
 800144e:	4192      	sbcs	r2, r2
 8001450:	4454      	add	r4, sl
 8001452:	4252      	negs	r2, r2
 8001454:	0005      	movs	r5, r0
 8001456:	18a4      	adds	r4, r4, r2
 8001458:	e73a      	b.n	80012d0 <__aeabi_dadd+0x504>
 800145a:	4653      	mov	r3, sl
 800145c:	075a      	lsls	r2, r3, #29
 800145e:	4663      	mov	r3, ip
 8001460:	08d9      	lsrs	r1, r3, #3
 8001462:	4653      	mov	r3, sl
 8001464:	430a      	orrs	r2, r1
 8001466:	08dc      	lsrs	r4, r3, #3
 8001468:	e67e      	b.n	8001168 <__aeabi_dadd+0x39c>
 800146a:	001a      	movs	r2, r3
 800146c:	001c      	movs	r4, r3
 800146e:	432a      	orrs	r2, r5
 8001470:	d000      	beq.n	8001474 <__aeabi_dadd+0x6a8>
 8001472:	e6ab      	b.n	80011cc <__aeabi_dadd+0x400>
 8001474:	e6c1      	b.n	80011fa <__aeabi_dadd+0x42e>
 8001476:	2120      	movs	r1, #32
 8001478:	2500      	movs	r5, #0
 800147a:	1a09      	subs	r1, r1, r0
 800147c:	e519      	b.n	8000eb2 <__aeabi_dadd+0xe6>
 800147e:	2200      	movs	r2, #0
 8001480:	2500      	movs	r5, #0
 8001482:	4c01      	ldr	r4, [pc, #4]	@ (8001488 <__aeabi_dadd+0x6bc>)
 8001484:	e53a      	b.n	8000efc <__aeabi_dadd+0x130>
 8001486:	46c0      	nop			@ (mov r8, r8)
 8001488:	000007ff 	.word	0x000007ff
 800148c:	ff7fffff 	.word	0xff7fffff
 8001490:	000007fe 	.word	0x000007fe

08001494 <__aeabi_ddiv>:
 8001494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001496:	46de      	mov	lr, fp
 8001498:	4645      	mov	r5, r8
 800149a:	4657      	mov	r7, sl
 800149c:	464e      	mov	r6, r9
 800149e:	b5e0      	push	{r5, r6, r7, lr}
 80014a0:	b087      	sub	sp, #28
 80014a2:	9200      	str	r2, [sp, #0]
 80014a4:	9301      	str	r3, [sp, #4]
 80014a6:	030b      	lsls	r3, r1, #12
 80014a8:	0b1b      	lsrs	r3, r3, #12
 80014aa:	469b      	mov	fp, r3
 80014ac:	0fca      	lsrs	r2, r1, #31
 80014ae:	004b      	lsls	r3, r1, #1
 80014b0:	0004      	movs	r4, r0
 80014b2:	4680      	mov	r8, r0
 80014b4:	0d5b      	lsrs	r3, r3, #21
 80014b6:	9202      	str	r2, [sp, #8]
 80014b8:	d100      	bne.n	80014bc <__aeabi_ddiv+0x28>
 80014ba:	e16a      	b.n	8001792 <__aeabi_ddiv+0x2fe>
 80014bc:	4ad4      	ldr	r2, [pc, #848]	@ (8001810 <__aeabi_ddiv+0x37c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d100      	bne.n	80014c4 <__aeabi_ddiv+0x30>
 80014c2:	e18c      	b.n	80017de <__aeabi_ddiv+0x34a>
 80014c4:	4659      	mov	r1, fp
 80014c6:	0f42      	lsrs	r2, r0, #29
 80014c8:	00c9      	lsls	r1, r1, #3
 80014ca:	430a      	orrs	r2, r1
 80014cc:	2180      	movs	r1, #128	@ 0x80
 80014ce:	0409      	lsls	r1, r1, #16
 80014d0:	4311      	orrs	r1, r2
 80014d2:	00c2      	lsls	r2, r0, #3
 80014d4:	4690      	mov	r8, r2
 80014d6:	4acf      	ldr	r2, [pc, #828]	@ (8001814 <__aeabi_ddiv+0x380>)
 80014d8:	4689      	mov	r9, r1
 80014da:	4692      	mov	sl, r2
 80014dc:	449a      	add	sl, r3
 80014de:	2300      	movs	r3, #0
 80014e0:	2400      	movs	r4, #0
 80014e2:	9303      	str	r3, [sp, #12]
 80014e4:	9e00      	ldr	r6, [sp, #0]
 80014e6:	9f01      	ldr	r7, [sp, #4]
 80014e8:	033b      	lsls	r3, r7, #12
 80014ea:	0b1b      	lsrs	r3, r3, #12
 80014ec:	469b      	mov	fp, r3
 80014ee:	007b      	lsls	r3, r7, #1
 80014f0:	0030      	movs	r0, r6
 80014f2:	0d5b      	lsrs	r3, r3, #21
 80014f4:	0ffd      	lsrs	r5, r7, #31
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d100      	bne.n	80014fc <__aeabi_ddiv+0x68>
 80014fa:	e128      	b.n	800174e <__aeabi_ddiv+0x2ba>
 80014fc:	4ac4      	ldr	r2, [pc, #784]	@ (8001810 <__aeabi_ddiv+0x37c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d100      	bne.n	8001504 <__aeabi_ddiv+0x70>
 8001502:	e177      	b.n	80017f4 <__aeabi_ddiv+0x360>
 8001504:	4659      	mov	r1, fp
 8001506:	0f72      	lsrs	r2, r6, #29
 8001508:	00c9      	lsls	r1, r1, #3
 800150a:	430a      	orrs	r2, r1
 800150c:	2180      	movs	r1, #128	@ 0x80
 800150e:	0409      	lsls	r1, r1, #16
 8001510:	4311      	orrs	r1, r2
 8001512:	468b      	mov	fp, r1
 8001514:	49bf      	ldr	r1, [pc, #764]	@ (8001814 <__aeabi_ddiv+0x380>)
 8001516:	00f2      	lsls	r2, r6, #3
 8001518:	468c      	mov	ip, r1
 800151a:	4651      	mov	r1, sl
 800151c:	4463      	add	r3, ip
 800151e:	1acb      	subs	r3, r1, r3
 8001520:	469a      	mov	sl, r3
 8001522:	2300      	movs	r3, #0
 8001524:	9e02      	ldr	r6, [sp, #8]
 8001526:	406e      	eors	r6, r5
 8001528:	2c0f      	cmp	r4, #15
 800152a:	d827      	bhi.n	800157c <__aeabi_ddiv+0xe8>
 800152c:	49ba      	ldr	r1, [pc, #744]	@ (8001818 <__aeabi_ddiv+0x384>)
 800152e:	00a4      	lsls	r4, r4, #2
 8001530:	5909      	ldr	r1, [r1, r4]
 8001532:	468f      	mov	pc, r1
 8001534:	46cb      	mov	fp, r9
 8001536:	4642      	mov	r2, r8
 8001538:	9e02      	ldr	r6, [sp, #8]
 800153a:	9b03      	ldr	r3, [sp, #12]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d016      	beq.n	800156e <__aeabi_ddiv+0xda>
 8001540:	2b03      	cmp	r3, #3
 8001542:	d100      	bne.n	8001546 <__aeabi_ddiv+0xb2>
 8001544:	e2a6      	b.n	8001a94 <__aeabi_ddiv+0x600>
 8001546:	2b01      	cmp	r3, #1
 8001548:	d000      	beq.n	800154c <__aeabi_ddiv+0xb8>
 800154a:	e0df      	b.n	800170c <__aeabi_ddiv+0x278>
 800154c:	2200      	movs	r2, #0
 800154e:	2300      	movs	r3, #0
 8001550:	2400      	movs	r4, #0
 8001552:	4690      	mov	r8, r2
 8001554:	051b      	lsls	r3, r3, #20
 8001556:	4323      	orrs	r3, r4
 8001558:	07f6      	lsls	r6, r6, #31
 800155a:	4333      	orrs	r3, r6
 800155c:	4640      	mov	r0, r8
 800155e:	0019      	movs	r1, r3
 8001560:	b007      	add	sp, #28
 8001562:	bcf0      	pop	{r4, r5, r6, r7}
 8001564:	46bb      	mov	fp, r7
 8001566:	46b2      	mov	sl, r6
 8001568:	46a9      	mov	r9, r5
 800156a:	46a0      	mov	r8, r4
 800156c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800156e:	2200      	movs	r2, #0
 8001570:	2400      	movs	r4, #0
 8001572:	4690      	mov	r8, r2
 8001574:	4ba6      	ldr	r3, [pc, #664]	@ (8001810 <__aeabi_ddiv+0x37c>)
 8001576:	e7ed      	b.n	8001554 <__aeabi_ddiv+0xc0>
 8001578:	002e      	movs	r6, r5
 800157a:	e7df      	b.n	800153c <__aeabi_ddiv+0xa8>
 800157c:	45cb      	cmp	fp, r9
 800157e:	d200      	bcs.n	8001582 <__aeabi_ddiv+0xee>
 8001580:	e1d4      	b.n	800192c <__aeabi_ddiv+0x498>
 8001582:	d100      	bne.n	8001586 <__aeabi_ddiv+0xf2>
 8001584:	e1cf      	b.n	8001926 <__aeabi_ddiv+0x492>
 8001586:	2301      	movs	r3, #1
 8001588:	425b      	negs	r3, r3
 800158a:	469c      	mov	ip, r3
 800158c:	4644      	mov	r4, r8
 800158e:	4648      	mov	r0, r9
 8001590:	2700      	movs	r7, #0
 8001592:	44e2      	add	sl, ip
 8001594:	465b      	mov	r3, fp
 8001596:	0e15      	lsrs	r5, r2, #24
 8001598:	021b      	lsls	r3, r3, #8
 800159a:	431d      	orrs	r5, r3
 800159c:	0c19      	lsrs	r1, r3, #16
 800159e:	042b      	lsls	r3, r5, #16
 80015a0:	0212      	lsls	r2, r2, #8
 80015a2:	9500      	str	r5, [sp, #0]
 80015a4:	0c1d      	lsrs	r5, r3, #16
 80015a6:	4691      	mov	r9, r2
 80015a8:	9102      	str	r1, [sp, #8]
 80015aa:	9503      	str	r5, [sp, #12]
 80015ac:	f7fe fe44 	bl	8000238 <__aeabi_uidivmod>
 80015b0:	0002      	movs	r2, r0
 80015b2:	436a      	muls	r2, r5
 80015b4:	040b      	lsls	r3, r1, #16
 80015b6:	0c21      	lsrs	r1, r4, #16
 80015b8:	4680      	mov	r8, r0
 80015ba:	4319      	orrs	r1, r3
 80015bc:	428a      	cmp	r2, r1
 80015be:	d909      	bls.n	80015d4 <__aeabi_ddiv+0x140>
 80015c0:	9d00      	ldr	r5, [sp, #0]
 80015c2:	2301      	movs	r3, #1
 80015c4:	46ac      	mov	ip, r5
 80015c6:	425b      	negs	r3, r3
 80015c8:	4461      	add	r1, ip
 80015ca:	469c      	mov	ip, r3
 80015cc:	44e0      	add	r8, ip
 80015ce:	428d      	cmp	r5, r1
 80015d0:	d800      	bhi.n	80015d4 <__aeabi_ddiv+0x140>
 80015d2:	e1fb      	b.n	80019cc <__aeabi_ddiv+0x538>
 80015d4:	1a88      	subs	r0, r1, r2
 80015d6:	9902      	ldr	r1, [sp, #8]
 80015d8:	f7fe fe2e 	bl	8000238 <__aeabi_uidivmod>
 80015dc:	9a03      	ldr	r2, [sp, #12]
 80015de:	0424      	lsls	r4, r4, #16
 80015e0:	4342      	muls	r2, r0
 80015e2:	0409      	lsls	r1, r1, #16
 80015e4:	0c24      	lsrs	r4, r4, #16
 80015e6:	0003      	movs	r3, r0
 80015e8:	430c      	orrs	r4, r1
 80015ea:	42a2      	cmp	r2, r4
 80015ec:	d906      	bls.n	80015fc <__aeabi_ddiv+0x168>
 80015ee:	9900      	ldr	r1, [sp, #0]
 80015f0:	3b01      	subs	r3, #1
 80015f2:	468c      	mov	ip, r1
 80015f4:	4464      	add	r4, ip
 80015f6:	42a1      	cmp	r1, r4
 80015f8:	d800      	bhi.n	80015fc <__aeabi_ddiv+0x168>
 80015fa:	e1e1      	b.n	80019c0 <__aeabi_ddiv+0x52c>
 80015fc:	1aa0      	subs	r0, r4, r2
 80015fe:	4642      	mov	r2, r8
 8001600:	0412      	lsls	r2, r2, #16
 8001602:	431a      	orrs	r2, r3
 8001604:	4693      	mov	fp, r2
 8001606:	464b      	mov	r3, r9
 8001608:	4659      	mov	r1, fp
 800160a:	0c1b      	lsrs	r3, r3, #16
 800160c:	001d      	movs	r5, r3
 800160e:	9304      	str	r3, [sp, #16]
 8001610:	040b      	lsls	r3, r1, #16
 8001612:	4649      	mov	r1, r9
 8001614:	0409      	lsls	r1, r1, #16
 8001616:	0c09      	lsrs	r1, r1, #16
 8001618:	000c      	movs	r4, r1
 800161a:	0c1b      	lsrs	r3, r3, #16
 800161c:	435c      	muls	r4, r3
 800161e:	0c12      	lsrs	r2, r2, #16
 8001620:	436b      	muls	r3, r5
 8001622:	4688      	mov	r8, r1
 8001624:	4351      	muls	r1, r2
 8001626:	436a      	muls	r2, r5
 8001628:	0c25      	lsrs	r5, r4, #16
 800162a:	46ac      	mov	ip, r5
 800162c:	185b      	adds	r3, r3, r1
 800162e:	4463      	add	r3, ip
 8001630:	4299      	cmp	r1, r3
 8001632:	d903      	bls.n	800163c <__aeabi_ddiv+0x1a8>
 8001634:	2180      	movs	r1, #128	@ 0x80
 8001636:	0249      	lsls	r1, r1, #9
 8001638:	468c      	mov	ip, r1
 800163a:	4462      	add	r2, ip
 800163c:	0c19      	lsrs	r1, r3, #16
 800163e:	0424      	lsls	r4, r4, #16
 8001640:	041b      	lsls	r3, r3, #16
 8001642:	0c24      	lsrs	r4, r4, #16
 8001644:	188a      	adds	r2, r1, r2
 8001646:	191c      	adds	r4, r3, r4
 8001648:	4290      	cmp	r0, r2
 800164a:	d302      	bcc.n	8001652 <__aeabi_ddiv+0x1be>
 800164c:	d116      	bne.n	800167c <__aeabi_ddiv+0x1e8>
 800164e:	42a7      	cmp	r7, r4
 8001650:	d214      	bcs.n	800167c <__aeabi_ddiv+0x1e8>
 8001652:	465b      	mov	r3, fp
 8001654:	9d00      	ldr	r5, [sp, #0]
 8001656:	3b01      	subs	r3, #1
 8001658:	444f      	add	r7, r9
 800165a:	9305      	str	r3, [sp, #20]
 800165c:	454f      	cmp	r7, r9
 800165e:	419b      	sbcs	r3, r3
 8001660:	46ac      	mov	ip, r5
 8001662:	425b      	negs	r3, r3
 8001664:	4463      	add	r3, ip
 8001666:	18c0      	adds	r0, r0, r3
 8001668:	4285      	cmp	r5, r0
 800166a:	d300      	bcc.n	800166e <__aeabi_ddiv+0x1da>
 800166c:	e1a1      	b.n	80019b2 <__aeabi_ddiv+0x51e>
 800166e:	4282      	cmp	r2, r0
 8001670:	d900      	bls.n	8001674 <__aeabi_ddiv+0x1e0>
 8001672:	e1f6      	b.n	8001a62 <__aeabi_ddiv+0x5ce>
 8001674:	d100      	bne.n	8001678 <__aeabi_ddiv+0x1e4>
 8001676:	e1f1      	b.n	8001a5c <__aeabi_ddiv+0x5c8>
 8001678:	9b05      	ldr	r3, [sp, #20]
 800167a:	469b      	mov	fp, r3
 800167c:	1b3c      	subs	r4, r7, r4
 800167e:	42a7      	cmp	r7, r4
 8001680:	41bf      	sbcs	r7, r7
 8001682:	9d00      	ldr	r5, [sp, #0]
 8001684:	1a80      	subs	r0, r0, r2
 8001686:	427f      	negs	r7, r7
 8001688:	1bc0      	subs	r0, r0, r7
 800168a:	4285      	cmp	r5, r0
 800168c:	d100      	bne.n	8001690 <__aeabi_ddiv+0x1fc>
 800168e:	e1d0      	b.n	8001a32 <__aeabi_ddiv+0x59e>
 8001690:	9902      	ldr	r1, [sp, #8]
 8001692:	f7fe fdd1 	bl	8000238 <__aeabi_uidivmod>
 8001696:	9a03      	ldr	r2, [sp, #12]
 8001698:	040b      	lsls	r3, r1, #16
 800169a:	4342      	muls	r2, r0
 800169c:	0c21      	lsrs	r1, r4, #16
 800169e:	0007      	movs	r7, r0
 80016a0:	4319      	orrs	r1, r3
 80016a2:	428a      	cmp	r2, r1
 80016a4:	d900      	bls.n	80016a8 <__aeabi_ddiv+0x214>
 80016a6:	e178      	b.n	800199a <__aeabi_ddiv+0x506>
 80016a8:	1a88      	subs	r0, r1, r2
 80016aa:	9902      	ldr	r1, [sp, #8]
 80016ac:	f7fe fdc4 	bl	8000238 <__aeabi_uidivmod>
 80016b0:	9a03      	ldr	r2, [sp, #12]
 80016b2:	0424      	lsls	r4, r4, #16
 80016b4:	4342      	muls	r2, r0
 80016b6:	0409      	lsls	r1, r1, #16
 80016b8:	0c24      	lsrs	r4, r4, #16
 80016ba:	0003      	movs	r3, r0
 80016bc:	430c      	orrs	r4, r1
 80016be:	42a2      	cmp	r2, r4
 80016c0:	d900      	bls.n	80016c4 <__aeabi_ddiv+0x230>
 80016c2:	e15d      	b.n	8001980 <__aeabi_ddiv+0x4ec>
 80016c4:	4641      	mov	r1, r8
 80016c6:	1aa4      	subs	r4, r4, r2
 80016c8:	043a      	lsls	r2, r7, #16
 80016ca:	431a      	orrs	r2, r3
 80016cc:	9d04      	ldr	r5, [sp, #16]
 80016ce:	0413      	lsls	r3, r2, #16
 80016d0:	0c1b      	lsrs	r3, r3, #16
 80016d2:	4359      	muls	r1, r3
 80016d4:	4647      	mov	r7, r8
 80016d6:	436b      	muls	r3, r5
 80016d8:	469c      	mov	ip, r3
 80016da:	0c10      	lsrs	r0, r2, #16
 80016dc:	4347      	muls	r7, r0
 80016de:	0c0b      	lsrs	r3, r1, #16
 80016e0:	44bc      	add	ip, r7
 80016e2:	4463      	add	r3, ip
 80016e4:	4368      	muls	r0, r5
 80016e6:	429f      	cmp	r7, r3
 80016e8:	d903      	bls.n	80016f2 <__aeabi_ddiv+0x25e>
 80016ea:	2580      	movs	r5, #128	@ 0x80
 80016ec:	026d      	lsls	r5, r5, #9
 80016ee:	46ac      	mov	ip, r5
 80016f0:	4460      	add	r0, ip
 80016f2:	0c1f      	lsrs	r7, r3, #16
 80016f4:	0409      	lsls	r1, r1, #16
 80016f6:	041b      	lsls	r3, r3, #16
 80016f8:	0c09      	lsrs	r1, r1, #16
 80016fa:	183f      	adds	r7, r7, r0
 80016fc:	185b      	adds	r3, r3, r1
 80016fe:	42bc      	cmp	r4, r7
 8001700:	d200      	bcs.n	8001704 <__aeabi_ddiv+0x270>
 8001702:	e102      	b.n	800190a <__aeabi_ddiv+0x476>
 8001704:	d100      	bne.n	8001708 <__aeabi_ddiv+0x274>
 8001706:	e0fd      	b.n	8001904 <__aeabi_ddiv+0x470>
 8001708:	2301      	movs	r3, #1
 800170a:	431a      	orrs	r2, r3
 800170c:	4b43      	ldr	r3, [pc, #268]	@ (800181c <__aeabi_ddiv+0x388>)
 800170e:	4453      	add	r3, sl
 8001710:	2b00      	cmp	r3, #0
 8001712:	dc00      	bgt.n	8001716 <__aeabi_ddiv+0x282>
 8001714:	e0ae      	b.n	8001874 <__aeabi_ddiv+0x3e0>
 8001716:	0751      	lsls	r1, r2, #29
 8001718:	d000      	beq.n	800171c <__aeabi_ddiv+0x288>
 800171a:	e198      	b.n	8001a4e <__aeabi_ddiv+0x5ba>
 800171c:	4659      	mov	r1, fp
 800171e:	01c9      	lsls	r1, r1, #7
 8001720:	d506      	bpl.n	8001730 <__aeabi_ddiv+0x29c>
 8001722:	4659      	mov	r1, fp
 8001724:	4b3e      	ldr	r3, [pc, #248]	@ (8001820 <__aeabi_ddiv+0x38c>)
 8001726:	4019      	ands	r1, r3
 8001728:	2380      	movs	r3, #128	@ 0x80
 800172a:	468b      	mov	fp, r1
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	4453      	add	r3, sl
 8001730:	493c      	ldr	r1, [pc, #240]	@ (8001824 <__aeabi_ddiv+0x390>)
 8001732:	428b      	cmp	r3, r1
 8001734:	dd00      	ble.n	8001738 <__aeabi_ddiv+0x2a4>
 8001736:	e71a      	b.n	800156e <__aeabi_ddiv+0xda>
 8001738:	4659      	mov	r1, fp
 800173a:	08d2      	lsrs	r2, r2, #3
 800173c:	0749      	lsls	r1, r1, #29
 800173e:	4311      	orrs	r1, r2
 8001740:	465a      	mov	r2, fp
 8001742:	055b      	lsls	r3, r3, #21
 8001744:	0254      	lsls	r4, r2, #9
 8001746:	4688      	mov	r8, r1
 8001748:	0b24      	lsrs	r4, r4, #12
 800174a:	0d5b      	lsrs	r3, r3, #21
 800174c:	e702      	b.n	8001554 <__aeabi_ddiv+0xc0>
 800174e:	465a      	mov	r2, fp
 8001750:	9b00      	ldr	r3, [sp, #0]
 8001752:	431a      	orrs	r2, r3
 8001754:	d100      	bne.n	8001758 <__aeabi_ddiv+0x2c4>
 8001756:	e07e      	b.n	8001856 <__aeabi_ddiv+0x3c2>
 8001758:	465b      	mov	r3, fp
 800175a:	2b00      	cmp	r3, #0
 800175c:	d100      	bne.n	8001760 <__aeabi_ddiv+0x2cc>
 800175e:	e100      	b.n	8001962 <__aeabi_ddiv+0x4ce>
 8001760:	4658      	mov	r0, fp
 8001762:	f001 fa75 	bl	8002c50 <__clzsi2>
 8001766:	0002      	movs	r2, r0
 8001768:	0003      	movs	r3, r0
 800176a:	3a0b      	subs	r2, #11
 800176c:	271d      	movs	r7, #29
 800176e:	9e00      	ldr	r6, [sp, #0]
 8001770:	1aba      	subs	r2, r7, r2
 8001772:	0019      	movs	r1, r3
 8001774:	4658      	mov	r0, fp
 8001776:	40d6      	lsrs	r6, r2
 8001778:	3908      	subs	r1, #8
 800177a:	4088      	lsls	r0, r1
 800177c:	0032      	movs	r2, r6
 800177e:	4302      	orrs	r2, r0
 8001780:	4693      	mov	fp, r2
 8001782:	9a00      	ldr	r2, [sp, #0]
 8001784:	408a      	lsls	r2, r1
 8001786:	4928      	ldr	r1, [pc, #160]	@ (8001828 <__aeabi_ddiv+0x394>)
 8001788:	4453      	add	r3, sl
 800178a:	468a      	mov	sl, r1
 800178c:	449a      	add	sl, r3
 800178e:	2300      	movs	r3, #0
 8001790:	e6c8      	b.n	8001524 <__aeabi_ddiv+0x90>
 8001792:	465b      	mov	r3, fp
 8001794:	4303      	orrs	r3, r0
 8001796:	4699      	mov	r9, r3
 8001798:	d056      	beq.n	8001848 <__aeabi_ddiv+0x3b4>
 800179a:	465b      	mov	r3, fp
 800179c:	2b00      	cmp	r3, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_ddiv+0x30e>
 80017a0:	e0cd      	b.n	800193e <__aeabi_ddiv+0x4aa>
 80017a2:	4658      	mov	r0, fp
 80017a4:	f001 fa54 	bl	8002c50 <__clzsi2>
 80017a8:	230b      	movs	r3, #11
 80017aa:	425b      	negs	r3, r3
 80017ac:	469c      	mov	ip, r3
 80017ae:	0002      	movs	r2, r0
 80017b0:	4484      	add	ip, r0
 80017b2:	4666      	mov	r6, ip
 80017b4:	231d      	movs	r3, #29
 80017b6:	1b9b      	subs	r3, r3, r6
 80017b8:	0026      	movs	r6, r4
 80017ba:	0011      	movs	r1, r2
 80017bc:	4658      	mov	r0, fp
 80017be:	40de      	lsrs	r6, r3
 80017c0:	3908      	subs	r1, #8
 80017c2:	4088      	lsls	r0, r1
 80017c4:	0033      	movs	r3, r6
 80017c6:	4303      	orrs	r3, r0
 80017c8:	4699      	mov	r9, r3
 80017ca:	0023      	movs	r3, r4
 80017cc:	408b      	lsls	r3, r1
 80017ce:	4698      	mov	r8, r3
 80017d0:	4b16      	ldr	r3, [pc, #88]	@ (800182c <__aeabi_ddiv+0x398>)
 80017d2:	2400      	movs	r4, #0
 80017d4:	1a9b      	subs	r3, r3, r2
 80017d6:	469a      	mov	sl, r3
 80017d8:	2300      	movs	r3, #0
 80017da:	9303      	str	r3, [sp, #12]
 80017dc:	e682      	b.n	80014e4 <__aeabi_ddiv+0x50>
 80017de:	465a      	mov	r2, fp
 80017e0:	4302      	orrs	r2, r0
 80017e2:	4691      	mov	r9, r2
 80017e4:	d12a      	bne.n	800183c <__aeabi_ddiv+0x3a8>
 80017e6:	2200      	movs	r2, #0
 80017e8:	469a      	mov	sl, r3
 80017ea:	2302      	movs	r3, #2
 80017ec:	4690      	mov	r8, r2
 80017ee:	2408      	movs	r4, #8
 80017f0:	9303      	str	r3, [sp, #12]
 80017f2:	e677      	b.n	80014e4 <__aeabi_ddiv+0x50>
 80017f4:	465a      	mov	r2, fp
 80017f6:	9b00      	ldr	r3, [sp, #0]
 80017f8:	431a      	orrs	r2, r3
 80017fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001830 <__aeabi_ddiv+0x39c>)
 80017fc:	469c      	mov	ip, r3
 80017fe:	44e2      	add	sl, ip
 8001800:	2a00      	cmp	r2, #0
 8001802:	d117      	bne.n	8001834 <__aeabi_ddiv+0x3a0>
 8001804:	2302      	movs	r3, #2
 8001806:	431c      	orrs	r4, r3
 8001808:	2300      	movs	r3, #0
 800180a:	469b      	mov	fp, r3
 800180c:	3302      	adds	r3, #2
 800180e:	e689      	b.n	8001524 <__aeabi_ddiv+0x90>
 8001810:	000007ff 	.word	0x000007ff
 8001814:	fffffc01 	.word	0xfffffc01
 8001818:	0800c1a0 	.word	0x0800c1a0
 800181c:	000003ff 	.word	0x000003ff
 8001820:	feffffff 	.word	0xfeffffff
 8001824:	000007fe 	.word	0x000007fe
 8001828:	000003f3 	.word	0x000003f3
 800182c:	fffffc0d 	.word	0xfffffc0d
 8001830:	fffff801 	.word	0xfffff801
 8001834:	2303      	movs	r3, #3
 8001836:	0032      	movs	r2, r6
 8001838:	431c      	orrs	r4, r3
 800183a:	e673      	b.n	8001524 <__aeabi_ddiv+0x90>
 800183c:	469a      	mov	sl, r3
 800183e:	2303      	movs	r3, #3
 8001840:	46d9      	mov	r9, fp
 8001842:	240c      	movs	r4, #12
 8001844:	9303      	str	r3, [sp, #12]
 8001846:	e64d      	b.n	80014e4 <__aeabi_ddiv+0x50>
 8001848:	2300      	movs	r3, #0
 800184a:	4698      	mov	r8, r3
 800184c:	469a      	mov	sl, r3
 800184e:	3301      	adds	r3, #1
 8001850:	2404      	movs	r4, #4
 8001852:	9303      	str	r3, [sp, #12]
 8001854:	e646      	b.n	80014e4 <__aeabi_ddiv+0x50>
 8001856:	2301      	movs	r3, #1
 8001858:	431c      	orrs	r4, r3
 800185a:	2300      	movs	r3, #0
 800185c:	469b      	mov	fp, r3
 800185e:	3301      	adds	r3, #1
 8001860:	e660      	b.n	8001524 <__aeabi_ddiv+0x90>
 8001862:	2300      	movs	r3, #0
 8001864:	2480      	movs	r4, #128	@ 0x80
 8001866:	4698      	mov	r8, r3
 8001868:	2600      	movs	r6, #0
 800186a:	4b92      	ldr	r3, [pc, #584]	@ (8001ab4 <__aeabi_ddiv+0x620>)
 800186c:	0324      	lsls	r4, r4, #12
 800186e:	e671      	b.n	8001554 <__aeabi_ddiv+0xc0>
 8001870:	2201      	movs	r2, #1
 8001872:	4252      	negs	r2, r2
 8001874:	2101      	movs	r1, #1
 8001876:	1ac9      	subs	r1, r1, r3
 8001878:	2938      	cmp	r1, #56	@ 0x38
 800187a:	dd00      	ble.n	800187e <__aeabi_ddiv+0x3ea>
 800187c:	e666      	b.n	800154c <__aeabi_ddiv+0xb8>
 800187e:	291f      	cmp	r1, #31
 8001880:	dc00      	bgt.n	8001884 <__aeabi_ddiv+0x3f0>
 8001882:	e0ab      	b.n	80019dc <__aeabi_ddiv+0x548>
 8001884:	201f      	movs	r0, #31
 8001886:	4240      	negs	r0, r0
 8001888:	1ac3      	subs	r3, r0, r3
 800188a:	4658      	mov	r0, fp
 800188c:	40d8      	lsrs	r0, r3
 800188e:	0003      	movs	r3, r0
 8001890:	2920      	cmp	r1, #32
 8001892:	d004      	beq.n	800189e <__aeabi_ddiv+0x40a>
 8001894:	4658      	mov	r0, fp
 8001896:	4988      	ldr	r1, [pc, #544]	@ (8001ab8 <__aeabi_ddiv+0x624>)
 8001898:	4451      	add	r1, sl
 800189a:	4088      	lsls	r0, r1
 800189c:	4302      	orrs	r2, r0
 800189e:	1e51      	subs	r1, r2, #1
 80018a0:	418a      	sbcs	r2, r1
 80018a2:	431a      	orrs	r2, r3
 80018a4:	2307      	movs	r3, #7
 80018a6:	0019      	movs	r1, r3
 80018a8:	2400      	movs	r4, #0
 80018aa:	4011      	ands	r1, r2
 80018ac:	4213      	tst	r3, r2
 80018ae:	d00c      	beq.n	80018ca <__aeabi_ddiv+0x436>
 80018b0:	230f      	movs	r3, #15
 80018b2:	4013      	ands	r3, r2
 80018b4:	2b04      	cmp	r3, #4
 80018b6:	d100      	bne.n	80018ba <__aeabi_ddiv+0x426>
 80018b8:	e0f9      	b.n	8001aae <__aeabi_ddiv+0x61a>
 80018ba:	1d11      	adds	r1, r2, #4
 80018bc:	4291      	cmp	r1, r2
 80018be:	419b      	sbcs	r3, r3
 80018c0:	000a      	movs	r2, r1
 80018c2:	425b      	negs	r3, r3
 80018c4:	0759      	lsls	r1, r3, #29
 80018c6:	025b      	lsls	r3, r3, #9
 80018c8:	0b1c      	lsrs	r4, r3, #12
 80018ca:	08d2      	lsrs	r2, r2, #3
 80018cc:	430a      	orrs	r2, r1
 80018ce:	4690      	mov	r8, r2
 80018d0:	2300      	movs	r3, #0
 80018d2:	e63f      	b.n	8001554 <__aeabi_ddiv+0xc0>
 80018d4:	2480      	movs	r4, #128	@ 0x80
 80018d6:	464b      	mov	r3, r9
 80018d8:	0324      	lsls	r4, r4, #12
 80018da:	4223      	tst	r3, r4
 80018dc:	d009      	beq.n	80018f2 <__aeabi_ddiv+0x45e>
 80018de:	465b      	mov	r3, fp
 80018e0:	4223      	tst	r3, r4
 80018e2:	d106      	bne.n	80018f2 <__aeabi_ddiv+0x45e>
 80018e4:	431c      	orrs	r4, r3
 80018e6:	0324      	lsls	r4, r4, #12
 80018e8:	002e      	movs	r6, r5
 80018ea:	4690      	mov	r8, r2
 80018ec:	4b71      	ldr	r3, [pc, #452]	@ (8001ab4 <__aeabi_ddiv+0x620>)
 80018ee:	0b24      	lsrs	r4, r4, #12
 80018f0:	e630      	b.n	8001554 <__aeabi_ddiv+0xc0>
 80018f2:	2480      	movs	r4, #128	@ 0x80
 80018f4:	464b      	mov	r3, r9
 80018f6:	0324      	lsls	r4, r4, #12
 80018f8:	431c      	orrs	r4, r3
 80018fa:	0324      	lsls	r4, r4, #12
 80018fc:	9e02      	ldr	r6, [sp, #8]
 80018fe:	4b6d      	ldr	r3, [pc, #436]	@ (8001ab4 <__aeabi_ddiv+0x620>)
 8001900:	0b24      	lsrs	r4, r4, #12
 8001902:	e627      	b.n	8001554 <__aeabi_ddiv+0xc0>
 8001904:	2b00      	cmp	r3, #0
 8001906:	d100      	bne.n	800190a <__aeabi_ddiv+0x476>
 8001908:	e700      	b.n	800170c <__aeabi_ddiv+0x278>
 800190a:	9800      	ldr	r0, [sp, #0]
 800190c:	1e51      	subs	r1, r2, #1
 800190e:	4684      	mov	ip, r0
 8001910:	4464      	add	r4, ip
 8001912:	4284      	cmp	r4, r0
 8001914:	d200      	bcs.n	8001918 <__aeabi_ddiv+0x484>
 8001916:	e084      	b.n	8001a22 <__aeabi_ddiv+0x58e>
 8001918:	42bc      	cmp	r4, r7
 800191a:	d200      	bcs.n	800191e <__aeabi_ddiv+0x48a>
 800191c:	e0ae      	b.n	8001a7c <__aeabi_ddiv+0x5e8>
 800191e:	d100      	bne.n	8001922 <__aeabi_ddiv+0x48e>
 8001920:	e0c1      	b.n	8001aa6 <__aeabi_ddiv+0x612>
 8001922:	000a      	movs	r2, r1
 8001924:	e6f0      	b.n	8001708 <__aeabi_ddiv+0x274>
 8001926:	4542      	cmp	r2, r8
 8001928:	d900      	bls.n	800192c <__aeabi_ddiv+0x498>
 800192a:	e62c      	b.n	8001586 <__aeabi_ddiv+0xf2>
 800192c:	464b      	mov	r3, r9
 800192e:	07dc      	lsls	r4, r3, #31
 8001930:	0858      	lsrs	r0, r3, #1
 8001932:	4643      	mov	r3, r8
 8001934:	085b      	lsrs	r3, r3, #1
 8001936:	431c      	orrs	r4, r3
 8001938:	4643      	mov	r3, r8
 800193a:	07df      	lsls	r7, r3, #31
 800193c:	e62a      	b.n	8001594 <__aeabi_ddiv+0x100>
 800193e:	f001 f987 	bl	8002c50 <__clzsi2>
 8001942:	2315      	movs	r3, #21
 8001944:	469c      	mov	ip, r3
 8001946:	4484      	add	ip, r0
 8001948:	0002      	movs	r2, r0
 800194a:	4663      	mov	r3, ip
 800194c:	3220      	adds	r2, #32
 800194e:	2b1c      	cmp	r3, #28
 8001950:	dc00      	bgt.n	8001954 <__aeabi_ddiv+0x4c0>
 8001952:	e72e      	b.n	80017b2 <__aeabi_ddiv+0x31e>
 8001954:	0023      	movs	r3, r4
 8001956:	3808      	subs	r0, #8
 8001958:	4083      	lsls	r3, r0
 800195a:	4699      	mov	r9, r3
 800195c:	2300      	movs	r3, #0
 800195e:	4698      	mov	r8, r3
 8001960:	e736      	b.n	80017d0 <__aeabi_ddiv+0x33c>
 8001962:	f001 f975 	bl	8002c50 <__clzsi2>
 8001966:	0002      	movs	r2, r0
 8001968:	0003      	movs	r3, r0
 800196a:	3215      	adds	r2, #21
 800196c:	3320      	adds	r3, #32
 800196e:	2a1c      	cmp	r2, #28
 8001970:	dc00      	bgt.n	8001974 <__aeabi_ddiv+0x4e0>
 8001972:	e6fb      	b.n	800176c <__aeabi_ddiv+0x2d8>
 8001974:	9900      	ldr	r1, [sp, #0]
 8001976:	3808      	subs	r0, #8
 8001978:	4081      	lsls	r1, r0
 800197a:	2200      	movs	r2, #0
 800197c:	468b      	mov	fp, r1
 800197e:	e702      	b.n	8001786 <__aeabi_ddiv+0x2f2>
 8001980:	9900      	ldr	r1, [sp, #0]
 8001982:	3b01      	subs	r3, #1
 8001984:	468c      	mov	ip, r1
 8001986:	4464      	add	r4, ip
 8001988:	42a1      	cmp	r1, r4
 800198a:	d900      	bls.n	800198e <__aeabi_ddiv+0x4fa>
 800198c:	e69a      	b.n	80016c4 <__aeabi_ddiv+0x230>
 800198e:	42a2      	cmp	r2, r4
 8001990:	d800      	bhi.n	8001994 <__aeabi_ddiv+0x500>
 8001992:	e697      	b.n	80016c4 <__aeabi_ddiv+0x230>
 8001994:	1e83      	subs	r3, r0, #2
 8001996:	4464      	add	r4, ip
 8001998:	e694      	b.n	80016c4 <__aeabi_ddiv+0x230>
 800199a:	46ac      	mov	ip, r5
 800199c:	4461      	add	r1, ip
 800199e:	3f01      	subs	r7, #1
 80019a0:	428d      	cmp	r5, r1
 80019a2:	d900      	bls.n	80019a6 <__aeabi_ddiv+0x512>
 80019a4:	e680      	b.n	80016a8 <__aeabi_ddiv+0x214>
 80019a6:	428a      	cmp	r2, r1
 80019a8:	d800      	bhi.n	80019ac <__aeabi_ddiv+0x518>
 80019aa:	e67d      	b.n	80016a8 <__aeabi_ddiv+0x214>
 80019ac:	1e87      	subs	r7, r0, #2
 80019ae:	4461      	add	r1, ip
 80019b0:	e67a      	b.n	80016a8 <__aeabi_ddiv+0x214>
 80019b2:	4285      	cmp	r5, r0
 80019b4:	d000      	beq.n	80019b8 <__aeabi_ddiv+0x524>
 80019b6:	e65f      	b.n	8001678 <__aeabi_ddiv+0x1e4>
 80019b8:	45b9      	cmp	r9, r7
 80019ba:	d900      	bls.n	80019be <__aeabi_ddiv+0x52a>
 80019bc:	e65c      	b.n	8001678 <__aeabi_ddiv+0x1e4>
 80019be:	e656      	b.n	800166e <__aeabi_ddiv+0x1da>
 80019c0:	42a2      	cmp	r2, r4
 80019c2:	d800      	bhi.n	80019c6 <__aeabi_ddiv+0x532>
 80019c4:	e61a      	b.n	80015fc <__aeabi_ddiv+0x168>
 80019c6:	1e83      	subs	r3, r0, #2
 80019c8:	4464      	add	r4, ip
 80019ca:	e617      	b.n	80015fc <__aeabi_ddiv+0x168>
 80019cc:	428a      	cmp	r2, r1
 80019ce:	d800      	bhi.n	80019d2 <__aeabi_ddiv+0x53e>
 80019d0:	e600      	b.n	80015d4 <__aeabi_ddiv+0x140>
 80019d2:	46ac      	mov	ip, r5
 80019d4:	1e83      	subs	r3, r0, #2
 80019d6:	4698      	mov	r8, r3
 80019d8:	4461      	add	r1, ip
 80019da:	e5fb      	b.n	80015d4 <__aeabi_ddiv+0x140>
 80019dc:	4837      	ldr	r0, [pc, #220]	@ (8001abc <__aeabi_ddiv+0x628>)
 80019de:	0014      	movs	r4, r2
 80019e0:	4450      	add	r0, sl
 80019e2:	4082      	lsls	r2, r0
 80019e4:	465b      	mov	r3, fp
 80019e6:	0017      	movs	r7, r2
 80019e8:	4083      	lsls	r3, r0
 80019ea:	40cc      	lsrs	r4, r1
 80019ec:	1e7a      	subs	r2, r7, #1
 80019ee:	4197      	sbcs	r7, r2
 80019f0:	4323      	orrs	r3, r4
 80019f2:	433b      	orrs	r3, r7
 80019f4:	001a      	movs	r2, r3
 80019f6:	465b      	mov	r3, fp
 80019f8:	40cb      	lsrs	r3, r1
 80019fa:	0751      	lsls	r1, r2, #29
 80019fc:	d009      	beq.n	8001a12 <__aeabi_ddiv+0x57e>
 80019fe:	210f      	movs	r1, #15
 8001a00:	4011      	ands	r1, r2
 8001a02:	2904      	cmp	r1, #4
 8001a04:	d005      	beq.n	8001a12 <__aeabi_ddiv+0x57e>
 8001a06:	1d11      	adds	r1, r2, #4
 8001a08:	4291      	cmp	r1, r2
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	189b      	adds	r3, r3, r2
 8001a10:	000a      	movs	r2, r1
 8001a12:	0219      	lsls	r1, r3, #8
 8001a14:	d400      	bmi.n	8001a18 <__aeabi_ddiv+0x584>
 8001a16:	e755      	b.n	80018c4 <__aeabi_ddiv+0x430>
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	2400      	movs	r4, #0
 8001a1e:	4690      	mov	r8, r2
 8001a20:	e598      	b.n	8001554 <__aeabi_ddiv+0xc0>
 8001a22:	000a      	movs	r2, r1
 8001a24:	42bc      	cmp	r4, r7
 8001a26:	d000      	beq.n	8001a2a <__aeabi_ddiv+0x596>
 8001a28:	e66e      	b.n	8001708 <__aeabi_ddiv+0x274>
 8001a2a:	454b      	cmp	r3, r9
 8001a2c:	d000      	beq.n	8001a30 <__aeabi_ddiv+0x59c>
 8001a2e:	e66b      	b.n	8001708 <__aeabi_ddiv+0x274>
 8001a30:	e66c      	b.n	800170c <__aeabi_ddiv+0x278>
 8001a32:	4b23      	ldr	r3, [pc, #140]	@ (8001ac0 <__aeabi_ddiv+0x62c>)
 8001a34:	4a23      	ldr	r2, [pc, #140]	@ (8001ac4 <__aeabi_ddiv+0x630>)
 8001a36:	4453      	add	r3, sl
 8001a38:	4592      	cmp	sl, r2
 8001a3a:	da00      	bge.n	8001a3e <__aeabi_ddiv+0x5aa>
 8001a3c:	e718      	b.n	8001870 <__aeabi_ddiv+0x3dc>
 8001a3e:	2101      	movs	r1, #1
 8001a40:	4249      	negs	r1, r1
 8001a42:	1d0a      	adds	r2, r1, #4
 8001a44:	428a      	cmp	r2, r1
 8001a46:	4189      	sbcs	r1, r1
 8001a48:	4249      	negs	r1, r1
 8001a4a:	448b      	add	fp, r1
 8001a4c:	e666      	b.n	800171c <__aeabi_ddiv+0x288>
 8001a4e:	210f      	movs	r1, #15
 8001a50:	4011      	ands	r1, r2
 8001a52:	2904      	cmp	r1, #4
 8001a54:	d100      	bne.n	8001a58 <__aeabi_ddiv+0x5c4>
 8001a56:	e661      	b.n	800171c <__aeabi_ddiv+0x288>
 8001a58:	0011      	movs	r1, r2
 8001a5a:	e7f2      	b.n	8001a42 <__aeabi_ddiv+0x5ae>
 8001a5c:	42bc      	cmp	r4, r7
 8001a5e:	d800      	bhi.n	8001a62 <__aeabi_ddiv+0x5ce>
 8001a60:	e60a      	b.n	8001678 <__aeabi_ddiv+0x1e4>
 8001a62:	2302      	movs	r3, #2
 8001a64:	425b      	negs	r3, r3
 8001a66:	469c      	mov	ip, r3
 8001a68:	9900      	ldr	r1, [sp, #0]
 8001a6a:	444f      	add	r7, r9
 8001a6c:	454f      	cmp	r7, r9
 8001a6e:	419b      	sbcs	r3, r3
 8001a70:	44e3      	add	fp, ip
 8001a72:	468c      	mov	ip, r1
 8001a74:	425b      	negs	r3, r3
 8001a76:	4463      	add	r3, ip
 8001a78:	18c0      	adds	r0, r0, r3
 8001a7a:	e5ff      	b.n	800167c <__aeabi_ddiv+0x1e8>
 8001a7c:	4649      	mov	r1, r9
 8001a7e:	9d00      	ldr	r5, [sp, #0]
 8001a80:	0048      	lsls	r0, r1, #1
 8001a82:	4548      	cmp	r0, r9
 8001a84:	4189      	sbcs	r1, r1
 8001a86:	46ac      	mov	ip, r5
 8001a88:	4249      	negs	r1, r1
 8001a8a:	4461      	add	r1, ip
 8001a8c:	4681      	mov	r9, r0
 8001a8e:	3a02      	subs	r2, #2
 8001a90:	1864      	adds	r4, r4, r1
 8001a92:	e7c7      	b.n	8001a24 <__aeabi_ddiv+0x590>
 8001a94:	2480      	movs	r4, #128	@ 0x80
 8001a96:	465b      	mov	r3, fp
 8001a98:	0324      	lsls	r4, r4, #12
 8001a9a:	431c      	orrs	r4, r3
 8001a9c:	0324      	lsls	r4, r4, #12
 8001a9e:	4690      	mov	r8, r2
 8001aa0:	4b04      	ldr	r3, [pc, #16]	@ (8001ab4 <__aeabi_ddiv+0x620>)
 8001aa2:	0b24      	lsrs	r4, r4, #12
 8001aa4:	e556      	b.n	8001554 <__aeabi_ddiv+0xc0>
 8001aa6:	4599      	cmp	r9, r3
 8001aa8:	d3e8      	bcc.n	8001a7c <__aeabi_ddiv+0x5e8>
 8001aaa:	000a      	movs	r2, r1
 8001aac:	e7bd      	b.n	8001a2a <__aeabi_ddiv+0x596>
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e708      	b.n	80018c4 <__aeabi_ddiv+0x430>
 8001ab2:	46c0      	nop			@ (mov r8, r8)
 8001ab4:	000007ff 	.word	0x000007ff
 8001ab8:	0000043e 	.word	0x0000043e
 8001abc:	0000041e 	.word	0x0000041e
 8001ac0:	000003ff 	.word	0x000003ff
 8001ac4:	fffffc02 	.word	0xfffffc02

08001ac8 <__eqdf2>:
 8001ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aca:	4657      	mov	r7, sl
 8001acc:	46de      	mov	lr, fp
 8001ace:	464e      	mov	r6, r9
 8001ad0:	4645      	mov	r5, r8
 8001ad2:	b5e0      	push	{r5, r6, r7, lr}
 8001ad4:	000d      	movs	r5, r1
 8001ad6:	0004      	movs	r4, r0
 8001ad8:	0fe8      	lsrs	r0, r5, #31
 8001ada:	4683      	mov	fp, r0
 8001adc:	0309      	lsls	r1, r1, #12
 8001ade:	0fd8      	lsrs	r0, r3, #31
 8001ae0:	0b09      	lsrs	r1, r1, #12
 8001ae2:	4682      	mov	sl, r0
 8001ae4:	4819      	ldr	r0, [pc, #100]	@ (8001b4c <__eqdf2+0x84>)
 8001ae6:	468c      	mov	ip, r1
 8001ae8:	031f      	lsls	r7, r3, #12
 8001aea:	0069      	lsls	r1, r5, #1
 8001aec:	005e      	lsls	r6, r3, #1
 8001aee:	0d49      	lsrs	r1, r1, #21
 8001af0:	0b3f      	lsrs	r7, r7, #12
 8001af2:	0d76      	lsrs	r6, r6, #21
 8001af4:	4281      	cmp	r1, r0
 8001af6:	d018      	beq.n	8001b2a <__eqdf2+0x62>
 8001af8:	4286      	cmp	r6, r0
 8001afa:	d00f      	beq.n	8001b1c <__eqdf2+0x54>
 8001afc:	2001      	movs	r0, #1
 8001afe:	42b1      	cmp	r1, r6
 8001b00:	d10d      	bne.n	8001b1e <__eqdf2+0x56>
 8001b02:	45bc      	cmp	ip, r7
 8001b04:	d10b      	bne.n	8001b1e <__eqdf2+0x56>
 8001b06:	4294      	cmp	r4, r2
 8001b08:	d109      	bne.n	8001b1e <__eqdf2+0x56>
 8001b0a:	45d3      	cmp	fp, sl
 8001b0c:	d01c      	beq.n	8001b48 <__eqdf2+0x80>
 8001b0e:	2900      	cmp	r1, #0
 8001b10:	d105      	bne.n	8001b1e <__eqdf2+0x56>
 8001b12:	4660      	mov	r0, ip
 8001b14:	4320      	orrs	r0, r4
 8001b16:	1e43      	subs	r3, r0, #1
 8001b18:	4198      	sbcs	r0, r3
 8001b1a:	e000      	b.n	8001b1e <__eqdf2+0x56>
 8001b1c:	2001      	movs	r0, #1
 8001b1e:	bcf0      	pop	{r4, r5, r6, r7}
 8001b20:	46bb      	mov	fp, r7
 8001b22:	46b2      	mov	sl, r6
 8001b24:	46a9      	mov	r9, r5
 8001b26:	46a0      	mov	r8, r4
 8001b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b2a:	2001      	movs	r0, #1
 8001b2c:	428e      	cmp	r6, r1
 8001b2e:	d1f6      	bne.n	8001b1e <__eqdf2+0x56>
 8001b30:	4661      	mov	r1, ip
 8001b32:	4339      	orrs	r1, r7
 8001b34:	000f      	movs	r7, r1
 8001b36:	4317      	orrs	r7, r2
 8001b38:	4327      	orrs	r7, r4
 8001b3a:	d1f0      	bne.n	8001b1e <__eqdf2+0x56>
 8001b3c:	465b      	mov	r3, fp
 8001b3e:	4652      	mov	r2, sl
 8001b40:	1a98      	subs	r0, r3, r2
 8001b42:	1e43      	subs	r3, r0, #1
 8001b44:	4198      	sbcs	r0, r3
 8001b46:	e7ea      	b.n	8001b1e <__eqdf2+0x56>
 8001b48:	2000      	movs	r0, #0
 8001b4a:	e7e8      	b.n	8001b1e <__eqdf2+0x56>
 8001b4c:	000007ff 	.word	0x000007ff

08001b50 <__gedf2>:
 8001b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b52:	4657      	mov	r7, sl
 8001b54:	464e      	mov	r6, r9
 8001b56:	4645      	mov	r5, r8
 8001b58:	46de      	mov	lr, fp
 8001b5a:	b5e0      	push	{r5, r6, r7, lr}
 8001b5c:	000d      	movs	r5, r1
 8001b5e:	030f      	lsls	r7, r1, #12
 8001b60:	0b39      	lsrs	r1, r7, #12
 8001b62:	b083      	sub	sp, #12
 8001b64:	0004      	movs	r4, r0
 8001b66:	4680      	mov	r8, r0
 8001b68:	9101      	str	r1, [sp, #4]
 8001b6a:	0058      	lsls	r0, r3, #1
 8001b6c:	0fe9      	lsrs	r1, r5, #31
 8001b6e:	4f31      	ldr	r7, [pc, #196]	@ (8001c34 <__gedf2+0xe4>)
 8001b70:	0d40      	lsrs	r0, r0, #21
 8001b72:	468c      	mov	ip, r1
 8001b74:	006e      	lsls	r6, r5, #1
 8001b76:	0319      	lsls	r1, r3, #12
 8001b78:	4682      	mov	sl, r0
 8001b7a:	4691      	mov	r9, r2
 8001b7c:	0d76      	lsrs	r6, r6, #21
 8001b7e:	0b09      	lsrs	r1, r1, #12
 8001b80:	0fd8      	lsrs	r0, r3, #31
 8001b82:	42be      	cmp	r6, r7
 8001b84:	d01f      	beq.n	8001bc6 <__gedf2+0x76>
 8001b86:	45ba      	cmp	sl, r7
 8001b88:	d00f      	beq.n	8001baa <__gedf2+0x5a>
 8001b8a:	2e00      	cmp	r6, #0
 8001b8c:	d12f      	bne.n	8001bee <__gedf2+0x9e>
 8001b8e:	4655      	mov	r5, sl
 8001b90:	9e01      	ldr	r6, [sp, #4]
 8001b92:	4334      	orrs	r4, r6
 8001b94:	2d00      	cmp	r5, #0
 8001b96:	d127      	bne.n	8001be8 <__gedf2+0x98>
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	d03a      	beq.n	8001c12 <__gedf2+0xc2>
 8001b9c:	2c00      	cmp	r4, #0
 8001b9e:	d145      	bne.n	8001c2c <__gedf2+0xdc>
 8001ba0:	2800      	cmp	r0, #0
 8001ba2:	d11a      	bne.n	8001bda <__gedf2+0x8a>
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	4240      	negs	r0, r0
 8001ba8:	e017      	b.n	8001bda <__gedf2+0x8a>
 8001baa:	4311      	orrs	r1, r2
 8001bac:	d13b      	bne.n	8001c26 <__gedf2+0xd6>
 8001bae:	2e00      	cmp	r6, #0
 8001bb0:	d102      	bne.n	8001bb8 <__gedf2+0x68>
 8001bb2:	9f01      	ldr	r7, [sp, #4]
 8001bb4:	4327      	orrs	r7, r4
 8001bb6:	d0f3      	beq.n	8001ba0 <__gedf2+0x50>
 8001bb8:	4584      	cmp	ip, r0
 8001bba:	d109      	bne.n	8001bd0 <__gedf2+0x80>
 8001bbc:	4663      	mov	r3, ip
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <__gedf2+0x54>
 8001bc2:	4660      	mov	r0, ip
 8001bc4:	e009      	b.n	8001bda <__gedf2+0x8a>
 8001bc6:	9f01      	ldr	r7, [sp, #4]
 8001bc8:	4327      	orrs	r7, r4
 8001bca:	d12c      	bne.n	8001c26 <__gedf2+0xd6>
 8001bcc:	45b2      	cmp	sl, r6
 8001bce:	d024      	beq.n	8001c1a <__gedf2+0xca>
 8001bd0:	4663      	mov	r3, ip
 8001bd2:	2002      	movs	r0, #2
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	4018      	ands	r0, r3
 8001bd8:	3801      	subs	r0, #1
 8001bda:	b003      	add	sp, #12
 8001bdc:	bcf0      	pop	{r4, r5, r6, r7}
 8001bde:	46bb      	mov	fp, r7
 8001be0:	46b2      	mov	sl, r6
 8001be2:	46a9      	mov	r9, r5
 8001be4:	46a0      	mov	r8, r4
 8001be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001be8:	2c00      	cmp	r4, #0
 8001bea:	d0d9      	beq.n	8001ba0 <__gedf2+0x50>
 8001bec:	e7e4      	b.n	8001bb8 <__gedf2+0x68>
 8001bee:	4654      	mov	r4, sl
 8001bf0:	2c00      	cmp	r4, #0
 8001bf2:	d0ed      	beq.n	8001bd0 <__gedf2+0x80>
 8001bf4:	4584      	cmp	ip, r0
 8001bf6:	d1eb      	bne.n	8001bd0 <__gedf2+0x80>
 8001bf8:	4556      	cmp	r6, sl
 8001bfa:	dce9      	bgt.n	8001bd0 <__gedf2+0x80>
 8001bfc:	dbde      	blt.n	8001bbc <__gedf2+0x6c>
 8001bfe:	9b01      	ldr	r3, [sp, #4]
 8001c00:	428b      	cmp	r3, r1
 8001c02:	d8e5      	bhi.n	8001bd0 <__gedf2+0x80>
 8001c04:	d1da      	bne.n	8001bbc <__gedf2+0x6c>
 8001c06:	45c8      	cmp	r8, r9
 8001c08:	d8e2      	bhi.n	8001bd0 <__gedf2+0x80>
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	45c8      	cmp	r8, r9
 8001c0e:	d2e4      	bcs.n	8001bda <__gedf2+0x8a>
 8001c10:	e7d4      	b.n	8001bbc <__gedf2+0x6c>
 8001c12:	2000      	movs	r0, #0
 8001c14:	2c00      	cmp	r4, #0
 8001c16:	d0e0      	beq.n	8001bda <__gedf2+0x8a>
 8001c18:	e7da      	b.n	8001bd0 <__gedf2+0x80>
 8001c1a:	4311      	orrs	r1, r2
 8001c1c:	d103      	bne.n	8001c26 <__gedf2+0xd6>
 8001c1e:	4584      	cmp	ip, r0
 8001c20:	d1d6      	bne.n	8001bd0 <__gedf2+0x80>
 8001c22:	2000      	movs	r0, #0
 8001c24:	e7d9      	b.n	8001bda <__gedf2+0x8a>
 8001c26:	2002      	movs	r0, #2
 8001c28:	4240      	negs	r0, r0
 8001c2a:	e7d6      	b.n	8001bda <__gedf2+0x8a>
 8001c2c:	4584      	cmp	ip, r0
 8001c2e:	d0e6      	beq.n	8001bfe <__gedf2+0xae>
 8001c30:	e7ce      	b.n	8001bd0 <__gedf2+0x80>
 8001c32:	46c0      	nop			@ (mov r8, r8)
 8001c34:	000007ff 	.word	0x000007ff

08001c38 <__ledf2>:
 8001c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c3a:	4657      	mov	r7, sl
 8001c3c:	464e      	mov	r6, r9
 8001c3e:	4645      	mov	r5, r8
 8001c40:	46de      	mov	lr, fp
 8001c42:	b5e0      	push	{r5, r6, r7, lr}
 8001c44:	000d      	movs	r5, r1
 8001c46:	030f      	lsls	r7, r1, #12
 8001c48:	0004      	movs	r4, r0
 8001c4a:	4680      	mov	r8, r0
 8001c4c:	0fe8      	lsrs	r0, r5, #31
 8001c4e:	0b39      	lsrs	r1, r7, #12
 8001c50:	4684      	mov	ip, r0
 8001c52:	b083      	sub	sp, #12
 8001c54:	0058      	lsls	r0, r3, #1
 8001c56:	4f30      	ldr	r7, [pc, #192]	@ (8001d18 <__ledf2+0xe0>)
 8001c58:	0d40      	lsrs	r0, r0, #21
 8001c5a:	9101      	str	r1, [sp, #4]
 8001c5c:	031e      	lsls	r6, r3, #12
 8001c5e:	0069      	lsls	r1, r5, #1
 8001c60:	4682      	mov	sl, r0
 8001c62:	4691      	mov	r9, r2
 8001c64:	0d49      	lsrs	r1, r1, #21
 8001c66:	0b36      	lsrs	r6, r6, #12
 8001c68:	0fd8      	lsrs	r0, r3, #31
 8001c6a:	42b9      	cmp	r1, r7
 8001c6c:	d020      	beq.n	8001cb0 <__ledf2+0x78>
 8001c6e:	45ba      	cmp	sl, r7
 8001c70:	d00f      	beq.n	8001c92 <__ledf2+0x5a>
 8001c72:	2900      	cmp	r1, #0
 8001c74:	d12b      	bne.n	8001cce <__ledf2+0x96>
 8001c76:	9901      	ldr	r1, [sp, #4]
 8001c78:	430c      	orrs	r4, r1
 8001c7a:	4651      	mov	r1, sl
 8001c7c:	2900      	cmp	r1, #0
 8001c7e:	d137      	bne.n	8001cf0 <__ledf2+0xb8>
 8001c80:	4332      	orrs	r2, r6
 8001c82:	d038      	beq.n	8001cf6 <__ledf2+0xbe>
 8001c84:	2c00      	cmp	r4, #0
 8001c86:	d144      	bne.n	8001d12 <__ledf2+0xda>
 8001c88:	2800      	cmp	r0, #0
 8001c8a:	d119      	bne.n	8001cc0 <__ledf2+0x88>
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	4240      	negs	r0, r0
 8001c90:	e016      	b.n	8001cc0 <__ledf2+0x88>
 8001c92:	4316      	orrs	r6, r2
 8001c94:	d113      	bne.n	8001cbe <__ledf2+0x86>
 8001c96:	2900      	cmp	r1, #0
 8001c98:	d102      	bne.n	8001ca0 <__ledf2+0x68>
 8001c9a:	9f01      	ldr	r7, [sp, #4]
 8001c9c:	4327      	orrs	r7, r4
 8001c9e:	d0f3      	beq.n	8001c88 <__ledf2+0x50>
 8001ca0:	4584      	cmp	ip, r0
 8001ca2:	d020      	beq.n	8001ce6 <__ledf2+0xae>
 8001ca4:	4663      	mov	r3, ip
 8001ca6:	2002      	movs	r0, #2
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	4018      	ands	r0, r3
 8001cac:	3801      	subs	r0, #1
 8001cae:	e007      	b.n	8001cc0 <__ledf2+0x88>
 8001cb0:	9f01      	ldr	r7, [sp, #4]
 8001cb2:	4327      	orrs	r7, r4
 8001cb4:	d103      	bne.n	8001cbe <__ledf2+0x86>
 8001cb6:	458a      	cmp	sl, r1
 8001cb8:	d1f4      	bne.n	8001ca4 <__ledf2+0x6c>
 8001cba:	4316      	orrs	r6, r2
 8001cbc:	d01f      	beq.n	8001cfe <__ledf2+0xc6>
 8001cbe:	2002      	movs	r0, #2
 8001cc0:	b003      	add	sp, #12
 8001cc2:	bcf0      	pop	{r4, r5, r6, r7}
 8001cc4:	46bb      	mov	fp, r7
 8001cc6:	46b2      	mov	sl, r6
 8001cc8:	46a9      	mov	r9, r5
 8001cca:	46a0      	mov	r8, r4
 8001ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cce:	4654      	mov	r4, sl
 8001cd0:	2c00      	cmp	r4, #0
 8001cd2:	d0e7      	beq.n	8001ca4 <__ledf2+0x6c>
 8001cd4:	4584      	cmp	ip, r0
 8001cd6:	d1e5      	bne.n	8001ca4 <__ledf2+0x6c>
 8001cd8:	4551      	cmp	r1, sl
 8001cda:	dce3      	bgt.n	8001ca4 <__ledf2+0x6c>
 8001cdc:	db03      	blt.n	8001ce6 <__ledf2+0xae>
 8001cde:	9b01      	ldr	r3, [sp, #4]
 8001ce0:	42b3      	cmp	r3, r6
 8001ce2:	d8df      	bhi.n	8001ca4 <__ledf2+0x6c>
 8001ce4:	d00f      	beq.n	8001d06 <__ledf2+0xce>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0cf      	beq.n	8001c8c <__ledf2+0x54>
 8001cec:	4660      	mov	r0, ip
 8001cee:	e7e7      	b.n	8001cc0 <__ledf2+0x88>
 8001cf0:	2c00      	cmp	r4, #0
 8001cf2:	d0c9      	beq.n	8001c88 <__ledf2+0x50>
 8001cf4:	e7d4      	b.n	8001ca0 <__ledf2+0x68>
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	2c00      	cmp	r4, #0
 8001cfa:	d0e1      	beq.n	8001cc0 <__ledf2+0x88>
 8001cfc:	e7d2      	b.n	8001ca4 <__ledf2+0x6c>
 8001cfe:	4584      	cmp	ip, r0
 8001d00:	d1d0      	bne.n	8001ca4 <__ledf2+0x6c>
 8001d02:	2000      	movs	r0, #0
 8001d04:	e7dc      	b.n	8001cc0 <__ledf2+0x88>
 8001d06:	45c8      	cmp	r8, r9
 8001d08:	d8cc      	bhi.n	8001ca4 <__ledf2+0x6c>
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	45c8      	cmp	r8, r9
 8001d0e:	d2d7      	bcs.n	8001cc0 <__ledf2+0x88>
 8001d10:	e7e9      	b.n	8001ce6 <__ledf2+0xae>
 8001d12:	4584      	cmp	ip, r0
 8001d14:	d0e3      	beq.n	8001cde <__ledf2+0xa6>
 8001d16:	e7c5      	b.n	8001ca4 <__ledf2+0x6c>
 8001d18:	000007ff 	.word	0x000007ff

08001d1c <__aeabi_dmul>:
 8001d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d1e:	4657      	mov	r7, sl
 8001d20:	46de      	mov	lr, fp
 8001d22:	464e      	mov	r6, r9
 8001d24:	4645      	mov	r5, r8
 8001d26:	b5e0      	push	{r5, r6, r7, lr}
 8001d28:	001f      	movs	r7, r3
 8001d2a:	030b      	lsls	r3, r1, #12
 8001d2c:	0b1b      	lsrs	r3, r3, #12
 8001d2e:	0016      	movs	r6, r2
 8001d30:	469a      	mov	sl, r3
 8001d32:	0fca      	lsrs	r2, r1, #31
 8001d34:	004b      	lsls	r3, r1, #1
 8001d36:	0004      	movs	r4, r0
 8001d38:	4693      	mov	fp, r2
 8001d3a:	b087      	sub	sp, #28
 8001d3c:	0d5b      	lsrs	r3, r3, #21
 8001d3e:	d100      	bne.n	8001d42 <__aeabi_dmul+0x26>
 8001d40:	e0d5      	b.n	8001eee <__aeabi_dmul+0x1d2>
 8001d42:	4abb      	ldr	r2, [pc, #748]	@ (8002030 <__aeabi_dmul+0x314>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d100      	bne.n	8001d4a <__aeabi_dmul+0x2e>
 8001d48:	e0f8      	b.n	8001f3c <__aeabi_dmul+0x220>
 8001d4a:	4651      	mov	r1, sl
 8001d4c:	0f42      	lsrs	r2, r0, #29
 8001d4e:	00c9      	lsls	r1, r1, #3
 8001d50:	430a      	orrs	r2, r1
 8001d52:	2180      	movs	r1, #128	@ 0x80
 8001d54:	0409      	lsls	r1, r1, #16
 8001d56:	4311      	orrs	r1, r2
 8001d58:	00c2      	lsls	r2, r0, #3
 8001d5a:	4691      	mov	r9, r2
 8001d5c:	4ab5      	ldr	r2, [pc, #724]	@ (8002034 <__aeabi_dmul+0x318>)
 8001d5e:	468a      	mov	sl, r1
 8001d60:	189d      	adds	r5, r3, r2
 8001d62:	2300      	movs	r3, #0
 8001d64:	4698      	mov	r8, r3
 8001d66:	9302      	str	r3, [sp, #8]
 8001d68:	033c      	lsls	r4, r7, #12
 8001d6a:	007b      	lsls	r3, r7, #1
 8001d6c:	0ffa      	lsrs	r2, r7, #31
 8001d6e:	0030      	movs	r0, r6
 8001d70:	0b24      	lsrs	r4, r4, #12
 8001d72:	0d5b      	lsrs	r3, r3, #21
 8001d74:	9200      	str	r2, [sp, #0]
 8001d76:	d100      	bne.n	8001d7a <__aeabi_dmul+0x5e>
 8001d78:	e096      	b.n	8001ea8 <__aeabi_dmul+0x18c>
 8001d7a:	4aad      	ldr	r2, [pc, #692]	@ (8002030 <__aeabi_dmul+0x314>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d031      	beq.n	8001de4 <__aeabi_dmul+0xc8>
 8001d80:	0f72      	lsrs	r2, r6, #29
 8001d82:	00e4      	lsls	r4, r4, #3
 8001d84:	4322      	orrs	r2, r4
 8001d86:	2480      	movs	r4, #128	@ 0x80
 8001d88:	0424      	lsls	r4, r4, #16
 8001d8a:	4314      	orrs	r4, r2
 8001d8c:	4aa9      	ldr	r2, [pc, #676]	@ (8002034 <__aeabi_dmul+0x318>)
 8001d8e:	00f0      	lsls	r0, r6, #3
 8001d90:	4694      	mov	ip, r2
 8001d92:	4463      	add	r3, ip
 8001d94:	195b      	adds	r3, r3, r5
 8001d96:	1c5a      	adds	r2, r3, #1
 8001d98:	9201      	str	r2, [sp, #4]
 8001d9a:	4642      	mov	r2, r8
 8001d9c:	2600      	movs	r6, #0
 8001d9e:	2a0a      	cmp	r2, #10
 8001da0:	dc42      	bgt.n	8001e28 <__aeabi_dmul+0x10c>
 8001da2:	465a      	mov	r2, fp
 8001da4:	9900      	ldr	r1, [sp, #0]
 8001da6:	404a      	eors	r2, r1
 8001da8:	4693      	mov	fp, r2
 8001daa:	4642      	mov	r2, r8
 8001dac:	2a02      	cmp	r2, #2
 8001dae:	dc32      	bgt.n	8001e16 <__aeabi_dmul+0xfa>
 8001db0:	3a01      	subs	r2, #1
 8001db2:	2a01      	cmp	r2, #1
 8001db4:	d900      	bls.n	8001db8 <__aeabi_dmul+0x9c>
 8001db6:	e149      	b.n	800204c <__aeabi_dmul+0x330>
 8001db8:	2e02      	cmp	r6, #2
 8001dba:	d100      	bne.n	8001dbe <__aeabi_dmul+0xa2>
 8001dbc:	e0ca      	b.n	8001f54 <__aeabi_dmul+0x238>
 8001dbe:	2e01      	cmp	r6, #1
 8001dc0:	d13d      	bne.n	8001e3e <__aeabi_dmul+0x122>
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	2400      	movs	r4, #0
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	0010      	movs	r0, r2
 8001dca:	465a      	mov	r2, fp
 8001dcc:	051b      	lsls	r3, r3, #20
 8001dce:	4323      	orrs	r3, r4
 8001dd0:	07d2      	lsls	r2, r2, #31
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	0019      	movs	r1, r3
 8001dd6:	b007      	add	sp, #28
 8001dd8:	bcf0      	pop	{r4, r5, r6, r7}
 8001dda:	46bb      	mov	fp, r7
 8001ddc:	46b2      	mov	sl, r6
 8001dde:	46a9      	mov	r9, r5
 8001de0:	46a0      	mov	r8, r4
 8001de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001de4:	4b92      	ldr	r3, [pc, #584]	@ (8002030 <__aeabi_dmul+0x314>)
 8001de6:	4326      	orrs	r6, r4
 8001de8:	18eb      	adds	r3, r5, r3
 8001dea:	2e00      	cmp	r6, #0
 8001dec:	d100      	bne.n	8001df0 <__aeabi_dmul+0xd4>
 8001dee:	e0bb      	b.n	8001f68 <__aeabi_dmul+0x24c>
 8001df0:	2203      	movs	r2, #3
 8001df2:	4641      	mov	r1, r8
 8001df4:	4311      	orrs	r1, r2
 8001df6:	465a      	mov	r2, fp
 8001df8:	4688      	mov	r8, r1
 8001dfa:	9900      	ldr	r1, [sp, #0]
 8001dfc:	404a      	eors	r2, r1
 8001dfe:	2180      	movs	r1, #128	@ 0x80
 8001e00:	0109      	lsls	r1, r1, #4
 8001e02:	468c      	mov	ip, r1
 8001e04:	0029      	movs	r1, r5
 8001e06:	4461      	add	r1, ip
 8001e08:	9101      	str	r1, [sp, #4]
 8001e0a:	4641      	mov	r1, r8
 8001e0c:	290a      	cmp	r1, #10
 8001e0e:	dd00      	ble.n	8001e12 <__aeabi_dmul+0xf6>
 8001e10:	e233      	b.n	800227a <__aeabi_dmul+0x55e>
 8001e12:	4693      	mov	fp, r2
 8001e14:	2603      	movs	r6, #3
 8001e16:	4642      	mov	r2, r8
 8001e18:	2701      	movs	r7, #1
 8001e1a:	4097      	lsls	r7, r2
 8001e1c:	21a6      	movs	r1, #166	@ 0xa6
 8001e1e:	003a      	movs	r2, r7
 8001e20:	00c9      	lsls	r1, r1, #3
 8001e22:	400a      	ands	r2, r1
 8001e24:	420f      	tst	r7, r1
 8001e26:	d031      	beq.n	8001e8c <__aeabi_dmul+0x170>
 8001e28:	9e02      	ldr	r6, [sp, #8]
 8001e2a:	2e02      	cmp	r6, #2
 8001e2c:	d100      	bne.n	8001e30 <__aeabi_dmul+0x114>
 8001e2e:	e235      	b.n	800229c <__aeabi_dmul+0x580>
 8001e30:	2e03      	cmp	r6, #3
 8001e32:	d100      	bne.n	8001e36 <__aeabi_dmul+0x11a>
 8001e34:	e1d2      	b.n	80021dc <__aeabi_dmul+0x4c0>
 8001e36:	4654      	mov	r4, sl
 8001e38:	4648      	mov	r0, r9
 8001e3a:	2e01      	cmp	r6, #1
 8001e3c:	d0c1      	beq.n	8001dc2 <__aeabi_dmul+0xa6>
 8001e3e:	9a01      	ldr	r2, [sp, #4]
 8001e40:	4b7d      	ldr	r3, [pc, #500]	@ (8002038 <__aeabi_dmul+0x31c>)
 8001e42:	4694      	mov	ip, r2
 8001e44:	4463      	add	r3, ip
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	dc00      	bgt.n	8001e4c <__aeabi_dmul+0x130>
 8001e4a:	e0c0      	b.n	8001fce <__aeabi_dmul+0x2b2>
 8001e4c:	0742      	lsls	r2, r0, #29
 8001e4e:	d009      	beq.n	8001e64 <__aeabi_dmul+0x148>
 8001e50:	220f      	movs	r2, #15
 8001e52:	4002      	ands	r2, r0
 8001e54:	2a04      	cmp	r2, #4
 8001e56:	d005      	beq.n	8001e64 <__aeabi_dmul+0x148>
 8001e58:	1d02      	adds	r2, r0, #4
 8001e5a:	4282      	cmp	r2, r0
 8001e5c:	4180      	sbcs	r0, r0
 8001e5e:	4240      	negs	r0, r0
 8001e60:	1824      	adds	r4, r4, r0
 8001e62:	0010      	movs	r0, r2
 8001e64:	01e2      	lsls	r2, r4, #7
 8001e66:	d506      	bpl.n	8001e76 <__aeabi_dmul+0x15a>
 8001e68:	4b74      	ldr	r3, [pc, #464]	@ (800203c <__aeabi_dmul+0x320>)
 8001e6a:	9a01      	ldr	r2, [sp, #4]
 8001e6c:	401c      	ands	r4, r3
 8001e6e:	2380      	movs	r3, #128	@ 0x80
 8001e70:	4694      	mov	ip, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4463      	add	r3, ip
 8001e76:	4a72      	ldr	r2, [pc, #456]	@ (8002040 <__aeabi_dmul+0x324>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	dc6b      	bgt.n	8001f54 <__aeabi_dmul+0x238>
 8001e7c:	0762      	lsls	r2, r4, #29
 8001e7e:	08c0      	lsrs	r0, r0, #3
 8001e80:	0264      	lsls	r4, r4, #9
 8001e82:	055b      	lsls	r3, r3, #21
 8001e84:	4302      	orrs	r2, r0
 8001e86:	0b24      	lsrs	r4, r4, #12
 8001e88:	0d5b      	lsrs	r3, r3, #21
 8001e8a:	e79d      	b.n	8001dc8 <__aeabi_dmul+0xac>
 8001e8c:	2190      	movs	r1, #144	@ 0x90
 8001e8e:	0089      	lsls	r1, r1, #2
 8001e90:	420f      	tst	r7, r1
 8001e92:	d163      	bne.n	8001f5c <__aeabi_dmul+0x240>
 8001e94:	2288      	movs	r2, #136	@ 0x88
 8001e96:	423a      	tst	r2, r7
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dmul+0x180>
 8001e9a:	e0d7      	b.n	800204c <__aeabi_dmul+0x330>
 8001e9c:	9b00      	ldr	r3, [sp, #0]
 8001e9e:	46a2      	mov	sl, r4
 8001ea0:	469b      	mov	fp, r3
 8001ea2:	4681      	mov	r9, r0
 8001ea4:	9602      	str	r6, [sp, #8]
 8001ea6:	e7bf      	b.n	8001e28 <__aeabi_dmul+0x10c>
 8001ea8:	0023      	movs	r3, r4
 8001eaa:	4333      	orrs	r3, r6
 8001eac:	d100      	bne.n	8001eb0 <__aeabi_dmul+0x194>
 8001eae:	e07f      	b.n	8001fb0 <__aeabi_dmul+0x294>
 8001eb0:	2c00      	cmp	r4, #0
 8001eb2:	d100      	bne.n	8001eb6 <__aeabi_dmul+0x19a>
 8001eb4:	e1ad      	b.n	8002212 <__aeabi_dmul+0x4f6>
 8001eb6:	0020      	movs	r0, r4
 8001eb8:	f000 feca 	bl	8002c50 <__clzsi2>
 8001ebc:	0002      	movs	r2, r0
 8001ebe:	0003      	movs	r3, r0
 8001ec0:	3a0b      	subs	r2, #11
 8001ec2:	201d      	movs	r0, #29
 8001ec4:	0019      	movs	r1, r3
 8001ec6:	1a82      	subs	r2, r0, r2
 8001ec8:	0030      	movs	r0, r6
 8001eca:	3908      	subs	r1, #8
 8001ecc:	40d0      	lsrs	r0, r2
 8001ece:	408c      	lsls	r4, r1
 8001ed0:	4304      	orrs	r4, r0
 8001ed2:	0030      	movs	r0, r6
 8001ed4:	4088      	lsls	r0, r1
 8001ed6:	4a5b      	ldr	r2, [pc, #364]	@ (8002044 <__aeabi_dmul+0x328>)
 8001ed8:	1aeb      	subs	r3, r5, r3
 8001eda:	4694      	mov	ip, r2
 8001edc:	4463      	add	r3, ip
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	9201      	str	r2, [sp, #4]
 8001ee2:	4642      	mov	r2, r8
 8001ee4:	2600      	movs	r6, #0
 8001ee6:	2a0a      	cmp	r2, #10
 8001ee8:	dc00      	bgt.n	8001eec <__aeabi_dmul+0x1d0>
 8001eea:	e75a      	b.n	8001da2 <__aeabi_dmul+0x86>
 8001eec:	e79c      	b.n	8001e28 <__aeabi_dmul+0x10c>
 8001eee:	4653      	mov	r3, sl
 8001ef0:	4303      	orrs	r3, r0
 8001ef2:	4699      	mov	r9, r3
 8001ef4:	d054      	beq.n	8001fa0 <__aeabi_dmul+0x284>
 8001ef6:	4653      	mov	r3, sl
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d100      	bne.n	8001efe <__aeabi_dmul+0x1e2>
 8001efc:	e177      	b.n	80021ee <__aeabi_dmul+0x4d2>
 8001efe:	4650      	mov	r0, sl
 8001f00:	f000 fea6 	bl	8002c50 <__clzsi2>
 8001f04:	230b      	movs	r3, #11
 8001f06:	425b      	negs	r3, r3
 8001f08:	469c      	mov	ip, r3
 8001f0a:	0002      	movs	r2, r0
 8001f0c:	4484      	add	ip, r0
 8001f0e:	0011      	movs	r1, r2
 8001f10:	4650      	mov	r0, sl
 8001f12:	3908      	subs	r1, #8
 8001f14:	4088      	lsls	r0, r1
 8001f16:	231d      	movs	r3, #29
 8001f18:	4680      	mov	r8, r0
 8001f1a:	4660      	mov	r0, ip
 8001f1c:	1a1b      	subs	r3, r3, r0
 8001f1e:	0020      	movs	r0, r4
 8001f20:	40d8      	lsrs	r0, r3
 8001f22:	0003      	movs	r3, r0
 8001f24:	4640      	mov	r0, r8
 8001f26:	4303      	orrs	r3, r0
 8001f28:	469a      	mov	sl, r3
 8001f2a:	0023      	movs	r3, r4
 8001f2c:	408b      	lsls	r3, r1
 8001f2e:	4699      	mov	r9, r3
 8001f30:	2300      	movs	r3, #0
 8001f32:	4d44      	ldr	r5, [pc, #272]	@ (8002044 <__aeabi_dmul+0x328>)
 8001f34:	4698      	mov	r8, r3
 8001f36:	1aad      	subs	r5, r5, r2
 8001f38:	9302      	str	r3, [sp, #8]
 8001f3a:	e715      	b.n	8001d68 <__aeabi_dmul+0x4c>
 8001f3c:	4652      	mov	r2, sl
 8001f3e:	4302      	orrs	r2, r0
 8001f40:	4691      	mov	r9, r2
 8001f42:	d126      	bne.n	8001f92 <__aeabi_dmul+0x276>
 8001f44:	2200      	movs	r2, #0
 8001f46:	001d      	movs	r5, r3
 8001f48:	2302      	movs	r3, #2
 8001f4a:	4692      	mov	sl, r2
 8001f4c:	3208      	adds	r2, #8
 8001f4e:	4690      	mov	r8, r2
 8001f50:	9302      	str	r3, [sp, #8]
 8001f52:	e709      	b.n	8001d68 <__aeabi_dmul+0x4c>
 8001f54:	2400      	movs	r4, #0
 8001f56:	2200      	movs	r2, #0
 8001f58:	4b35      	ldr	r3, [pc, #212]	@ (8002030 <__aeabi_dmul+0x314>)
 8001f5a:	e735      	b.n	8001dc8 <__aeabi_dmul+0xac>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	2480      	movs	r4, #128	@ 0x80
 8001f60:	469b      	mov	fp, r3
 8001f62:	0324      	lsls	r4, r4, #12
 8001f64:	4b32      	ldr	r3, [pc, #200]	@ (8002030 <__aeabi_dmul+0x314>)
 8001f66:	e72f      	b.n	8001dc8 <__aeabi_dmul+0xac>
 8001f68:	2202      	movs	r2, #2
 8001f6a:	4641      	mov	r1, r8
 8001f6c:	4311      	orrs	r1, r2
 8001f6e:	2280      	movs	r2, #128	@ 0x80
 8001f70:	0112      	lsls	r2, r2, #4
 8001f72:	4694      	mov	ip, r2
 8001f74:	002a      	movs	r2, r5
 8001f76:	4462      	add	r2, ip
 8001f78:	4688      	mov	r8, r1
 8001f7a:	9201      	str	r2, [sp, #4]
 8001f7c:	290a      	cmp	r1, #10
 8001f7e:	dd00      	ble.n	8001f82 <__aeabi_dmul+0x266>
 8001f80:	e752      	b.n	8001e28 <__aeabi_dmul+0x10c>
 8001f82:	465a      	mov	r2, fp
 8001f84:	2000      	movs	r0, #0
 8001f86:	9900      	ldr	r1, [sp, #0]
 8001f88:	0004      	movs	r4, r0
 8001f8a:	404a      	eors	r2, r1
 8001f8c:	4693      	mov	fp, r2
 8001f8e:	2602      	movs	r6, #2
 8001f90:	e70b      	b.n	8001daa <__aeabi_dmul+0x8e>
 8001f92:	220c      	movs	r2, #12
 8001f94:	001d      	movs	r5, r3
 8001f96:	2303      	movs	r3, #3
 8001f98:	4681      	mov	r9, r0
 8001f9a:	4690      	mov	r8, r2
 8001f9c:	9302      	str	r3, [sp, #8]
 8001f9e:	e6e3      	b.n	8001d68 <__aeabi_dmul+0x4c>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	469a      	mov	sl, r3
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	4698      	mov	r8, r3
 8001fa8:	3b03      	subs	r3, #3
 8001faa:	2500      	movs	r5, #0
 8001fac:	9302      	str	r3, [sp, #8]
 8001fae:	e6db      	b.n	8001d68 <__aeabi_dmul+0x4c>
 8001fb0:	4642      	mov	r2, r8
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	002b      	movs	r3, r5
 8001fb8:	4690      	mov	r8, r2
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	9201      	str	r2, [sp, #4]
 8001fbe:	4642      	mov	r2, r8
 8001fc0:	2400      	movs	r4, #0
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	2601      	movs	r6, #1
 8001fc6:	2a0a      	cmp	r2, #10
 8001fc8:	dc00      	bgt.n	8001fcc <__aeabi_dmul+0x2b0>
 8001fca:	e6ea      	b.n	8001da2 <__aeabi_dmul+0x86>
 8001fcc:	e72c      	b.n	8001e28 <__aeabi_dmul+0x10c>
 8001fce:	2201      	movs	r2, #1
 8001fd0:	1ad2      	subs	r2, r2, r3
 8001fd2:	2a38      	cmp	r2, #56	@ 0x38
 8001fd4:	dd00      	ble.n	8001fd8 <__aeabi_dmul+0x2bc>
 8001fd6:	e6f4      	b.n	8001dc2 <__aeabi_dmul+0xa6>
 8001fd8:	2a1f      	cmp	r2, #31
 8001fda:	dc00      	bgt.n	8001fde <__aeabi_dmul+0x2c2>
 8001fdc:	e12a      	b.n	8002234 <__aeabi_dmul+0x518>
 8001fde:	211f      	movs	r1, #31
 8001fe0:	4249      	negs	r1, r1
 8001fe2:	1acb      	subs	r3, r1, r3
 8001fe4:	0021      	movs	r1, r4
 8001fe6:	40d9      	lsrs	r1, r3
 8001fe8:	000b      	movs	r3, r1
 8001fea:	2a20      	cmp	r2, #32
 8001fec:	d005      	beq.n	8001ffa <__aeabi_dmul+0x2de>
 8001fee:	4a16      	ldr	r2, [pc, #88]	@ (8002048 <__aeabi_dmul+0x32c>)
 8001ff0:	9d01      	ldr	r5, [sp, #4]
 8001ff2:	4694      	mov	ip, r2
 8001ff4:	4465      	add	r5, ip
 8001ff6:	40ac      	lsls	r4, r5
 8001ff8:	4320      	orrs	r0, r4
 8001ffa:	1e42      	subs	r2, r0, #1
 8001ffc:	4190      	sbcs	r0, r2
 8001ffe:	4318      	orrs	r0, r3
 8002000:	2307      	movs	r3, #7
 8002002:	0019      	movs	r1, r3
 8002004:	2400      	movs	r4, #0
 8002006:	4001      	ands	r1, r0
 8002008:	4203      	tst	r3, r0
 800200a:	d00c      	beq.n	8002026 <__aeabi_dmul+0x30a>
 800200c:	230f      	movs	r3, #15
 800200e:	4003      	ands	r3, r0
 8002010:	2b04      	cmp	r3, #4
 8002012:	d100      	bne.n	8002016 <__aeabi_dmul+0x2fa>
 8002014:	e140      	b.n	8002298 <__aeabi_dmul+0x57c>
 8002016:	1d03      	adds	r3, r0, #4
 8002018:	4283      	cmp	r3, r0
 800201a:	41a4      	sbcs	r4, r4
 800201c:	0018      	movs	r0, r3
 800201e:	4264      	negs	r4, r4
 8002020:	0761      	lsls	r1, r4, #29
 8002022:	0264      	lsls	r4, r4, #9
 8002024:	0b24      	lsrs	r4, r4, #12
 8002026:	08c2      	lsrs	r2, r0, #3
 8002028:	2300      	movs	r3, #0
 800202a:	430a      	orrs	r2, r1
 800202c:	e6cc      	b.n	8001dc8 <__aeabi_dmul+0xac>
 800202e:	46c0      	nop			@ (mov r8, r8)
 8002030:	000007ff 	.word	0x000007ff
 8002034:	fffffc01 	.word	0xfffffc01
 8002038:	000003ff 	.word	0x000003ff
 800203c:	feffffff 	.word	0xfeffffff
 8002040:	000007fe 	.word	0x000007fe
 8002044:	fffffc0d 	.word	0xfffffc0d
 8002048:	0000043e 	.word	0x0000043e
 800204c:	4649      	mov	r1, r9
 800204e:	464a      	mov	r2, r9
 8002050:	0409      	lsls	r1, r1, #16
 8002052:	0c09      	lsrs	r1, r1, #16
 8002054:	000d      	movs	r5, r1
 8002056:	0c16      	lsrs	r6, r2, #16
 8002058:	0c02      	lsrs	r2, r0, #16
 800205a:	0400      	lsls	r0, r0, #16
 800205c:	0c00      	lsrs	r0, r0, #16
 800205e:	4345      	muls	r5, r0
 8002060:	46ac      	mov	ip, r5
 8002062:	0005      	movs	r5, r0
 8002064:	4375      	muls	r5, r6
 8002066:	46a8      	mov	r8, r5
 8002068:	0015      	movs	r5, r2
 800206a:	000f      	movs	r7, r1
 800206c:	4375      	muls	r5, r6
 800206e:	9200      	str	r2, [sp, #0]
 8002070:	9502      	str	r5, [sp, #8]
 8002072:	002a      	movs	r2, r5
 8002074:	9d00      	ldr	r5, [sp, #0]
 8002076:	436f      	muls	r7, r5
 8002078:	4665      	mov	r5, ip
 800207a:	0c2d      	lsrs	r5, r5, #16
 800207c:	46a9      	mov	r9, r5
 800207e:	4447      	add	r7, r8
 8002080:	444f      	add	r7, r9
 8002082:	45b8      	cmp	r8, r7
 8002084:	d905      	bls.n	8002092 <__aeabi_dmul+0x376>
 8002086:	0015      	movs	r5, r2
 8002088:	2280      	movs	r2, #128	@ 0x80
 800208a:	0252      	lsls	r2, r2, #9
 800208c:	4690      	mov	r8, r2
 800208e:	4445      	add	r5, r8
 8002090:	9502      	str	r5, [sp, #8]
 8002092:	0c3d      	lsrs	r5, r7, #16
 8002094:	9503      	str	r5, [sp, #12]
 8002096:	4665      	mov	r5, ip
 8002098:	042d      	lsls	r5, r5, #16
 800209a:	043f      	lsls	r7, r7, #16
 800209c:	0c2d      	lsrs	r5, r5, #16
 800209e:	46ac      	mov	ip, r5
 80020a0:	003d      	movs	r5, r7
 80020a2:	4465      	add	r5, ip
 80020a4:	9504      	str	r5, [sp, #16]
 80020a6:	0c25      	lsrs	r5, r4, #16
 80020a8:	0424      	lsls	r4, r4, #16
 80020aa:	0c24      	lsrs	r4, r4, #16
 80020ac:	46ac      	mov	ip, r5
 80020ae:	0025      	movs	r5, r4
 80020b0:	4375      	muls	r5, r6
 80020b2:	46a8      	mov	r8, r5
 80020b4:	4665      	mov	r5, ip
 80020b6:	000f      	movs	r7, r1
 80020b8:	4369      	muls	r1, r5
 80020ba:	4441      	add	r1, r8
 80020bc:	4689      	mov	r9, r1
 80020be:	4367      	muls	r7, r4
 80020c0:	0c39      	lsrs	r1, r7, #16
 80020c2:	4449      	add	r1, r9
 80020c4:	436e      	muls	r6, r5
 80020c6:	4588      	cmp	r8, r1
 80020c8:	d903      	bls.n	80020d2 <__aeabi_dmul+0x3b6>
 80020ca:	2280      	movs	r2, #128	@ 0x80
 80020cc:	0252      	lsls	r2, r2, #9
 80020ce:	4690      	mov	r8, r2
 80020d0:	4446      	add	r6, r8
 80020d2:	0c0d      	lsrs	r5, r1, #16
 80020d4:	46a8      	mov	r8, r5
 80020d6:	0035      	movs	r5, r6
 80020d8:	4445      	add	r5, r8
 80020da:	9505      	str	r5, [sp, #20]
 80020dc:	9d03      	ldr	r5, [sp, #12]
 80020de:	043f      	lsls	r7, r7, #16
 80020e0:	46a8      	mov	r8, r5
 80020e2:	0c3f      	lsrs	r7, r7, #16
 80020e4:	0409      	lsls	r1, r1, #16
 80020e6:	19c9      	adds	r1, r1, r7
 80020e8:	4488      	add	r8, r1
 80020ea:	4645      	mov	r5, r8
 80020ec:	9503      	str	r5, [sp, #12]
 80020ee:	4655      	mov	r5, sl
 80020f0:	042e      	lsls	r6, r5, #16
 80020f2:	0c36      	lsrs	r6, r6, #16
 80020f4:	0c2f      	lsrs	r7, r5, #16
 80020f6:	0035      	movs	r5, r6
 80020f8:	4345      	muls	r5, r0
 80020fa:	4378      	muls	r0, r7
 80020fc:	4681      	mov	r9, r0
 80020fe:	0038      	movs	r0, r7
 8002100:	46a8      	mov	r8, r5
 8002102:	0c2d      	lsrs	r5, r5, #16
 8002104:	46aa      	mov	sl, r5
 8002106:	9a00      	ldr	r2, [sp, #0]
 8002108:	4350      	muls	r0, r2
 800210a:	4372      	muls	r2, r6
 800210c:	444a      	add	r2, r9
 800210e:	4452      	add	r2, sl
 8002110:	4591      	cmp	r9, r2
 8002112:	d903      	bls.n	800211c <__aeabi_dmul+0x400>
 8002114:	2580      	movs	r5, #128	@ 0x80
 8002116:	026d      	lsls	r5, r5, #9
 8002118:	46a9      	mov	r9, r5
 800211a:	4448      	add	r0, r9
 800211c:	0c15      	lsrs	r5, r2, #16
 800211e:	46a9      	mov	r9, r5
 8002120:	4645      	mov	r5, r8
 8002122:	042d      	lsls	r5, r5, #16
 8002124:	0c2d      	lsrs	r5, r5, #16
 8002126:	46a8      	mov	r8, r5
 8002128:	4665      	mov	r5, ip
 800212a:	437d      	muls	r5, r7
 800212c:	0412      	lsls	r2, r2, #16
 800212e:	4448      	add	r0, r9
 8002130:	4490      	add	r8, r2
 8002132:	46a9      	mov	r9, r5
 8002134:	0032      	movs	r2, r6
 8002136:	4665      	mov	r5, ip
 8002138:	4362      	muls	r2, r4
 800213a:	436e      	muls	r6, r5
 800213c:	437c      	muls	r4, r7
 800213e:	0c17      	lsrs	r7, r2, #16
 8002140:	1936      	adds	r6, r6, r4
 8002142:	19bf      	adds	r7, r7, r6
 8002144:	42bc      	cmp	r4, r7
 8002146:	d903      	bls.n	8002150 <__aeabi_dmul+0x434>
 8002148:	2480      	movs	r4, #128	@ 0x80
 800214a:	0264      	lsls	r4, r4, #9
 800214c:	46a4      	mov	ip, r4
 800214e:	44e1      	add	r9, ip
 8002150:	9c02      	ldr	r4, [sp, #8]
 8002152:	9e03      	ldr	r6, [sp, #12]
 8002154:	46a4      	mov	ip, r4
 8002156:	9d05      	ldr	r5, [sp, #20]
 8002158:	4466      	add	r6, ip
 800215a:	428e      	cmp	r6, r1
 800215c:	4189      	sbcs	r1, r1
 800215e:	46ac      	mov	ip, r5
 8002160:	0412      	lsls	r2, r2, #16
 8002162:	043c      	lsls	r4, r7, #16
 8002164:	0c12      	lsrs	r2, r2, #16
 8002166:	18a2      	adds	r2, r4, r2
 8002168:	4462      	add	r2, ip
 800216a:	4249      	negs	r1, r1
 800216c:	1854      	adds	r4, r2, r1
 800216e:	4446      	add	r6, r8
 8002170:	46a4      	mov	ip, r4
 8002172:	4546      	cmp	r6, r8
 8002174:	41a4      	sbcs	r4, r4
 8002176:	4682      	mov	sl, r0
 8002178:	4264      	negs	r4, r4
 800217a:	46a0      	mov	r8, r4
 800217c:	42aa      	cmp	r2, r5
 800217e:	4192      	sbcs	r2, r2
 8002180:	458c      	cmp	ip, r1
 8002182:	4189      	sbcs	r1, r1
 8002184:	44e2      	add	sl, ip
 8002186:	44d0      	add	r8, sl
 8002188:	4249      	negs	r1, r1
 800218a:	4252      	negs	r2, r2
 800218c:	430a      	orrs	r2, r1
 800218e:	45a0      	cmp	r8, r4
 8002190:	41a4      	sbcs	r4, r4
 8002192:	4582      	cmp	sl, r0
 8002194:	4189      	sbcs	r1, r1
 8002196:	4264      	negs	r4, r4
 8002198:	4249      	negs	r1, r1
 800219a:	430c      	orrs	r4, r1
 800219c:	4641      	mov	r1, r8
 800219e:	0c3f      	lsrs	r7, r7, #16
 80021a0:	19d2      	adds	r2, r2, r7
 80021a2:	1912      	adds	r2, r2, r4
 80021a4:	0dcc      	lsrs	r4, r1, #23
 80021a6:	9904      	ldr	r1, [sp, #16]
 80021a8:	0270      	lsls	r0, r6, #9
 80021aa:	4308      	orrs	r0, r1
 80021ac:	1e41      	subs	r1, r0, #1
 80021ae:	4188      	sbcs	r0, r1
 80021b0:	4641      	mov	r1, r8
 80021b2:	444a      	add	r2, r9
 80021b4:	0df6      	lsrs	r6, r6, #23
 80021b6:	0252      	lsls	r2, r2, #9
 80021b8:	4330      	orrs	r0, r6
 80021ba:	0249      	lsls	r1, r1, #9
 80021bc:	4314      	orrs	r4, r2
 80021be:	4308      	orrs	r0, r1
 80021c0:	01d2      	lsls	r2, r2, #7
 80021c2:	d535      	bpl.n	8002230 <__aeabi_dmul+0x514>
 80021c4:	2201      	movs	r2, #1
 80021c6:	0843      	lsrs	r3, r0, #1
 80021c8:	4002      	ands	r2, r0
 80021ca:	4313      	orrs	r3, r2
 80021cc:	07e0      	lsls	r0, r4, #31
 80021ce:	4318      	orrs	r0, r3
 80021d0:	0864      	lsrs	r4, r4, #1
 80021d2:	e634      	b.n	8001e3e <__aeabi_dmul+0x122>
 80021d4:	9b00      	ldr	r3, [sp, #0]
 80021d6:	46a2      	mov	sl, r4
 80021d8:	469b      	mov	fp, r3
 80021da:	4681      	mov	r9, r0
 80021dc:	2480      	movs	r4, #128	@ 0x80
 80021de:	4653      	mov	r3, sl
 80021e0:	0324      	lsls	r4, r4, #12
 80021e2:	431c      	orrs	r4, r3
 80021e4:	0324      	lsls	r4, r4, #12
 80021e6:	464a      	mov	r2, r9
 80021e8:	4b2e      	ldr	r3, [pc, #184]	@ (80022a4 <__aeabi_dmul+0x588>)
 80021ea:	0b24      	lsrs	r4, r4, #12
 80021ec:	e5ec      	b.n	8001dc8 <__aeabi_dmul+0xac>
 80021ee:	f000 fd2f 	bl	8002c50 <__clzsi2>
 80021f2:	2315      	movs	r3, #21
 80021f4:	469c      	mov	ip, r3
 80021f6:	4484      	add	ip, r0
 80021f8:	0002      	movs	r2, r0
 80021fa:	4663      	mov	r3, ip
 80021fc:	3220      	adds	r2, #32
 80021fe:	2b1c      	cmp	r3, #28
 8002200:	dc00      	bgt.n	8002204 <__aeabi_dmul+0x4e8>
 8002202:	e684      	b.n	8001f0e <__aeabi_dmul+0x1f2>
 8002204:	2300      	movs	r3, #0
 8002206:	4699      	mov	r9, r3
 8002208:	0023      	movs	r3, r4
 800220a:	3808      	subs	r0, #8
 800220c:	4083      	lsls	r3, r0
 800220e:	469a      	mov	sl, r3
 8002210:	e68e      	b.n	8001f30 <__aeabi_dmul+0x214>
 8002212:	f000 fd1d 	bl	8002c50 <__clzsi2>
 8002216:	0002      	movs	r2, r0
 8002218:	0003      	movs	r3, r0
 800221a:	3215      	adds	r2, #21
 800221c:	3320      	adds	r3, #32
 800221e:	2a1c      	cmp	r2, #28
 8002220:	dc00      	bgt.n	8002224 <__aeabi_dmul+0x508>
 8002222:	e64e      	b.n	8001ec2 <__aeabi_dmul+0x1a6>
 8002224:	0002      	movs	r2, r0
 8002226:	0034      	movs	r4, r6
 8002228:	3a08      	subs	r2, #8
 800222a:	2000      	movs	r0, #0
 800222c:	4094      	lsls	r4, r2
 800222e:	e652      	b.n	8001ed6 <__aeabi_dmul+0x1ba>
 8002230:	9301      	str	r3, [sp, #4]
 8002232:	e604      	b.n	8001e3e <__aeabi_dmul+0x122>
 8002234:	4b1c      	ldr	r3, [pc, #112]	@ (80022a8 <__aeabi_dmul+0x58c>)
 8002236:	0021      	movs	r1, r4
 8002238:	469c      	mov	ip, r3
 800223a:	0003      	movs	r3, r0
 800223c:	9d01      	ldr	r5, [sp, #4]
 800223e:	40d3      	lsrs	r3, r2
 8002240:	4465      	add	r5, ip
 8002242:	40a9      	lsls	r1, r5
 8002244:	4319      	orrs	r1, r3
 8002246:	0003      	movs	r3, r0
 8002248:	40ab      	lsls	r3, r5
 800224a:	1e58      	subs	r0, r3, #1
 800224c:	4183      	sbcs	r3, r0
 800224e:	4319      	orrs	r1, r3
 8002250:	0008      	movs	r0, r1
 8002252:	40d4      	lsrs	r4, r2
 8002254:	074b      	lsls	r3, r1, #29
 8002256:	d009      	beq.n	800226c <__aeabi_dmul+0x550>
 8002258:	230f      	movs	r3, #15
 800225a:	400b      	ands	r3, r1
 800225c:	2b04      	cmp	r3, #4
 800225e:	d005      	beq.n	800226c <__aeabi_dmul+0x550>
 8002260:	1d0b      	adds	r3, r1, #4
 8002262:	428b      	cmp	r3, r1
 8002264:	4180      	sbcs	r0, r0
 8002266:	4240      	negs	r0, r0
 8002268:	1824      	adds	r4, r4, r0
 800226a:	0018      	movs	r0, r3
 800226c:	0223      	lsls	r3, r4, #8
 800226e:	d400      	bmi.n	8002272 <__aeabi_dmul+0x556>
 8002270:	e6d6      	b.n	8002020 <__aeabi_dmul+0x304>
 8002272:	2301      	movs	r3, #1
 8002274:	2400      	movs	r4, #0
 8002276:	2200      	movs	r2, #0
 8002278:	e5a6      	b.n	8001dc8 <__aeabi_dmul+0xac>
 800227a:	290f      	cmp	r1, #15
 800227c:	d1aa      	bne.n	80021d4 <__aeabi_dmul+0x4b8>
 800227e:	2380      	movs	r3, #128	@ 0x80
 8002280:	4652      	mov	r2, sl
 8002282:	031b      	lsls	r3, r3, #12
 8002284:	421a      	tst	r2, r3
 8002286:	d0a9      	beq.n	80021dc <__aeabi_dmul+0x4c0>
 8002288:	421c      	tst	r4, r3
 800228a:	d1a7      	bne.n	80021dc <__aeabi_dmul+0x4c0>
 800228c:	431c      	orrs	r4, r3
 800228e:	9b00      	ldr	r3, [sp, #0]
 8002290:	0002      	movs	r2, r0
 8002292:	469b      	mov	fp, r3
 8002294:	4b03      	ldr	r3, [pc, #12]	@ (80022a4 <__aeabi_dmul+0x588>)
 8002296:	e597      	b.n	8001dc8 <__aeabi_dmul+0xac>
 8002298:	2400      	movs	r4, #0
 800229a:	e6c1      	b.n	8002020 <__aeabi_dmul+0x304>
 800229c:	2400      	movs	r4, #0
 800229e:	4b01      	ldr	r3, [pc, #4]	@ (80022a4 <__aeabi_dmul+0x588>)
 80022a0:	0022      	movs	r2, r4
 80022a2:	e591      	b.n	8001dc8 <__aeabi_dmul+0xac>
 80022a4:	000007ff 	.word	0x000007ff
 80022a8:	0000041e 	.word	0x0000041e

080022ac <__aeabi_dsub>:
 80022ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ae:	464e      	mov	r6, r9
 80022b0:	4645      	mov	r5, r8
 80022b2:	46de      	mov	lr, fp
 80022b4:	4657      	mov	r7, sl
 80022b6:	b5e0      	push	{r5, r6, r7, lr}
 80022b8:	b085      	sub	sp, #20
 80022ba:	9000      	str	r0, [sp, #0]
 80022bc:	9101      	str	r1, [sp, #4]
 80022be:	030c      	lsls	r4, r1, #12
 80022c0:	004f      	lsls	r7, r1, #1
 80022c2:	0fce      	lsrs	r6, r1, #31
 80022c4:	0a61      	lsrs	r1, r4, #9
 80022c6:	9c00      	ldr	r4, [sp, #0]
 80022c8:	46b0      	mov	r8, r6
 80022ca:	0f64      	lsrs	r4, r4, #29
 80022cc:	430c      	orrs	r4, r1
 80022ce:	9900      	ldr	r1, [sp, #0]
 80022d0:	0d7f      	lsrs	r7, r7, #21
 80022d2:	00c8      	lsls	r0, r1, #3
 80022d4:	0011      	movs	r1, r2
 80022d6:	001a      	movs	r2, r3
 80022d8:	031b      	lsls	r3, r3, #12
 80022da:	469c      	mov	ip, r3
 80022dc:	9100      	str	r1, [sp, #0]
 80022de:	9201      	str	r2, [sp, #4]
 80022e0:	0051      	lsls	r1, r2, #1
 80022e2:	0d4b      	lsrs	r3, r1, #21
 80022e4:	4699      	mov	r9, r3
 80022e6:	9b01      	ldr	r3, [sp, #4]
 80022e8:	9d00      	ldr	r5, [sp, #0]
 80022ea:	0fd9      	lsrs	r1, r3, #31
 80022ec:	4663      	mov	r3, ip
 80022ee:	0f6a      	lsrs	r2, r5, #29
 80022f0:	0a5b      	lsrs	r3, r3, #9
 80022f2:	4313      	orrs	r3, r2
 80022f4:	00ea      	lsls	r2, r5, #3
 80022f6:	4694      	mov	ip, r2
 80022f8:	4693      	mov	fp, r2
 80022fa:	4ac1      	ldr	r2, [pc, #772]	@ (8002600 <__aeabi_dsub+0x354>)
 80022fc:	9003      	str	r0, [sp, #12]
 80022fe:	9302      	str	r3, [sp, #8]
 8002300:	4591      	cmp	r9, r2
 8002302:	d100      	bne.n	8002306 <__aeabi_dsub+0x5a>
 8002304:	e0cd      	b.n	80024a2 <__aeabi_dsub+0x1f6>
 8002306:	2501      	movs	r5, #1
 8002308:	4069      	eors	r1, r5
 800230a:	464d      	mov	r5, r9
 800230c:	1b7d      	subs	r5, r7, r5
 800230e:	46aa      	mov	sl, r5
 8002310:	428e      	cmp	r6, r1
 8002312:	d100      	bne.n	8002316 <__aeabi_dsub+0x6a>
 8002314:	e080      	b.n	8002418 <__aeabi_dsub+0x16c>
 8002316:	2d00      	cmp	r5, #0
 8002318:	dc00      	bgt.n	800231c <__aeabi_dsub+0x70>
 800231a:	e335      	b.n	8002988 <__aeabi_dsub+0x6dc>
 800231c:	4649      	mov	r1, r9
 800231e:	2900      	cmp	r1, #0
 8002320:	d100      	bne.n	8002324 <__aeabi_dsub+0x78>
 8002322:	e0df      	b.n	80024e4 <__aeabi_dsub+0x238>
 8002324:	4297      	cmp	r7, r2
 8002326:	d100      	bne.n	800232a <__aeabi_dsub+0x7e>
 8002328:	e194      	b.n	8002654 <__aeabi_dsub+0x3a8>
 800232a:	4652      	mov	r2, sl
 800232c:	2501      	movs	r5, #1
 800232e:	2a38      	cmp	r2, #56	@ 0x38
 8002330:	dc19      	bgt.n	8002366 <__aeabi_dsub+0xba>
 8002332:	2280      	movs	r2, #128	@ 0x80
 8002334:	9b02      	ldr	r3, [sp, #8]
 8002336:	0412      	lsls	r2, r2, #16
 8002338:	4313      	orrs	r3, r2
 800233a:	9302      	str	r3, [sp, #8]
 800233c:	4652      	mov	r2, sl
 800233e:	2a1f      	cmp	r2, #31
 8002340:	dd00      	ble.n	8002344 <__aeabi_dsub+0x98>
 8002342:	e1e3      	b.n	800270c <__aeabi_dsub+0x460>
 8002344:	4653      	mov	r3, sl
 8002346:	2220      	movs	r2, #32
 8002348:	4661      	mov	r1, ip
 800234a:	9d02      	ldr	r5, [sp, #8]
 800234c:	1ad2      	subs	r2, r2, r3
 800234e:	4095      	lsls	r5, r2
 8002350:	40d9      	lsrs	r1, r3
 8002352:	430d      	orrs	r5, r1
 8002354:	4661      	mov	r1, ip
 8002356:	4091      	lsls	r1, r2
 8002358:	000a      	movs	r2, r1
 800235a:	1e51      	subs	r1, r2, #1
 800235c:	418a      	sbcs	r2, r1
 800235e:	4315      	orrs	r5, r2
 8002360:	9a02      	ldr	r2, [sp, #8]
 8002362:	40da      	lsrs	r2, r3
 8002364:	1aa4      	subs	r4, r4, r2
 8002366:	1b45      	subs	r5, r0, r5
 8002368:	42a8      	cmp	r0, r5
 800236a:	4180      	sbcs	r0, r0
 800236c:	4240      	negs	r0, r0
 800236e:	1a24      	subs	r4, r4, r0
 8002370:	0223      	lsls	r3, r4, #8
 8002372:	d400      	bmi.n	8002376 <__aeabi_dsub+0xca>
 8002374:	e13d      	b.n	80025f2 <__aeabi_dsub+0x346>
 8002376:	0264      	lsls	r4, r4, #9
 8002378:	0a64      	lsrs	r4, r4, #9
 800237a:	2c00      	cmp	r4, #0
 800237c:	d100      	bne.n	8002380 <__aeabi_dsub+0xd4>
 800237e:	e147      	b.n	8002610 <__aeabi_dsub+0x364>
 8002380:	0020      	movs	r0, r4
 8002382:	f000 fc65 	bl	8002c50 <__clzsi2>
 8002386:	0003      	movs	r3, r0
 8002388:	3b08      	subs	r3, #8
 800238a:	2120      	movs	r1, #32
 800238c:	0028      	movs	r0, r5
 800238e:	1aca      	subs	r2, r1, r3
 8002390:	40d0      	lsrs	r0, r2
 8002392:	409c      	lsls	r4, r3
 8002394:	0002      	movs	r2, r0
 8002396:	409d      	lsls	r5, r3
 8002398:	4322      	orrs	r2, r4
 800239a:	429f      	cmp	r7, r3
 800239c:	dd00      	ble.n	80023a0 <__aeabi_dsub+0xf4>
 800239e:	e177      	b.n	8002690 <__aeabi_dsub+0x3e4>
 80023a0:	1bd8      	subs	r0, r3, r7
 80023a2:	3001      	adds	r0, #1
 80023a4:	1a09      	subs	r1, r1, r0
 80023a6:	002c      	movs	r4, r5
 80023a8:	408d      	lsls	r5, r1
 80023aa:	40c4      	lsrs	r4, r0
 80023ac:	1e6b      	subs	r3, r5, #1
 80023ae:	419d      	sbcs	r5, r3
 80023b0:	0013      	movs	r3, r2
 80023b2:	40c2      	lsrs	r2, r0
 80023b4:	408b      	lsls	r3, r1
 80023b6:	4325      	orrs	r5, r4
 80023b8:	2700      	movs	r7, #0
 80023ba:	0014      	movs	r4, r2
 80023bc:	431d      	orrs	r5, r3
 80023be:	076b      	lsls	r3, r5, #29
 80023c0:	d009      	beq.n	80023d6 <__aeabi_dsub+0x12a>
 80023c2:	230f      	movs	r3, #15
 80023c4:	402b      	ands	r3, r5
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d005      	beq.n	80023d6 <__aeabi_dsub+0x12a>
 80023ca:	1d2b      	adds	r3, r5, #4
 80023cc:	42ab      	cmp	r3, r5
 80023ce:	41ad      	sbcs	r5, r5
 80023d0:	426d      	negs	r5, r5
 80023d2:	1964      	adds	r4, r4, r5
 80023d4:	001d      	movs	r5, r3
 80023d6:	0223      	lsls	r3, r4, #8
 80023d8:	d400      	bmi.n	80023dc <__aeabi_dsub+0x130>
 80023da:	e140      	b.n	800265e <__aeabi_dsub+0x3b2>
 80023dc:	4a88      	ldr	r2, [pc, #544]	@ (8002600 <__aeabi_dsub+0x354>)
 80023de:	3701      	adds	r7, #1
 80023e0:	4297      	cmp	r7, r2
 80023e2:	d100      	bne.n	80023e6 <__aeabi_dsub+0x13a>
 80023e4:	e101      	b.n	80025ea <__aeabi_dsub+0x33e>
 80023e6:	2601      	movs	r6, #1
 80023e8:	4643      	mov	r3, r8
 80023ea:	4986      	ldr	r1, [pc, #536]	@ (8002604 <__aeabi_dsub+0x358>)
 80023ec:	08ed      	lsrs	r5, r5, #3
 80023ee:	4021      	ands	r1, r4
 80023f0:	074a      	lsls	r2, r1, #29
 80023f2:	432a      	orrs	r2, r5
 80023f4:	057c      	lsls	r4, r7, #21
 80023f6:	024d      	lsls	r5, r1, #9
 80023f8:	0b2d      	lsrs	r5, r5, #12
 80023fa:	0d64      	lsrs	r4, r4, #21
 80023fc:	401e      	ands	r6, r3
 80023fe:	0524      	lsls	r4, r4, #20
 8002400:	432c      	orrs	r4, r5
 8002402:	07f6      	lsls	r6, r6, #31
 8002404:	4334      	orrs	r4, r6
 8002406:	0010      	movs	r0, r2
 8002408:	0021      	movs	r1, r4
 800240a:	b005      	add	sp, #20
 800240c:	bcf0      	pop	{r4, r5, r6, r7}
 800240e:	46bb      	mov	fp, r7
 8002410:	46b2      	mov	sl, r6
 8002412:	46a9      	mov	r9, r5
 8002414:	46a0      	mov	r8, r4
 8002416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002418:	2d00      	cmp	r5, #0
 800241a:	dc00      	bgt.n	800241e <__aeabi_dsub+0x172>
 800241c:	e2d0      	b.n	80029c0 <__aeabi_dsub+0x714>
 800241e:	4649      	mov	r1, r9
 8002420:	2900      	cmp	r1, #0
 8002422:	d000      	beq.n	8002426 <__aeabi_dsub+0x17a>
 8002424:	e0d4      	b.n	80025d0 <__aeabi_dsub+0x324>
 8002426:	4661      	mov	r1, ip
 8002428:	9b02      	ldr	r3, [sp, #8]
 800242a:	4319      	orrs	r1, r3
 800242c:	d100      	bne.n	8002430 <__aeabi_dsub+0x184>
 800242e:	e12b      	b.n	8002688 <__aeabi_dsub+0x3dc>
 8002430:	1e69      	subs	r1, r5, #1
 8002432:	2d01      	cmp	r5, #1
 8002434:	d100      	bne.n	8002438 <__aeabi_dsub+0x18c>
 8002436:	e1d9      	b.n	80027ec <__aeabi_dsub+0x540>
 8002438:	4295      	cmp	r5, r2
 800243a:	d100      	bne.n	800243e <__aeabi_dsub+0x192>
 800243c:	e10a      	b.n	8002654 <__aeabi_dsub+0x3a8>
 800243e:	2501      	movs	r5, #1
 8002440:	2938      	cmp	r1, #56	@ 0x38
 8002442:	dc17      	bgt.n	8002474 <__aeabi_dsub+0x1c8>
 8002444:	468a      	mov	sl, r1
 8002446:	4653      	mov	r3, sl
 8002448:	2b1f      	cmp	r3, #31
 800244a:	dd00      	ble.n	800244e <__aeabi_dsub+0x1a2>
 800244c:	e1e7      	b.n	800281e <__aeabi_dsub+0x572>
 800244e:	2220      	movs	r2, #32
 8002450:	1ad2      	subs	r2, r2, r3
 8002452:	9b02      	ldr	r3, [sp, #8]
 8002454:	4661      	mov	r1, ip
 8002456:	4093      	lsls	r3, r2
 8002458:	001d      	movs	r5, r3
 800245a:	4653      	mov	r3, sl
 800245c:	40d9      	lsrs	r1, r3
 800245e:	4663      	mov	r3, ip
 8002460:	4093      	lsls	r3, r2
 8002462:	001a      	movs	r2, r3
 8002464:	430d      	orrs	r5, r1
 8002466:	1e51      	subs	r1, r2, #1
 8002468:	418a      	sbcs	r2, r1
 800246a:	4653      	mov	r3, sl
 800246c:	4315      	orrs	r5, r2
 800246e:	9a02      	ldr	r2, [sp, #8]
 8002470:	40da      	lsrs	r2, r3
 8002472:	18a4      	adds	r4, r4, r2
 8002474:	182d      	adds	r5, r5, r0
 8002476:	4285      	cmp	r5, r0
 8002478:	4180      	sbcs	r0, r0
 800247a:	4240      	negs	r0, r0
 800247c:	1824      	adds	r4, r4, r0
 800247e:	0223      	lsls	r3, r4, #8
 8002480:	d400      	bmi.n	8002484 <__aeabi_dsub+0x1d8>
 8002482:	e0b6      	b.n	80025f2 <__aeabi_dsub+0x346>
 8002484:	4b5e      	ldr	r3, [pc, #376]	@ (8002600 <__aeabi_dsub+0x354>)
 8002486:	3701      	adds	r7, #1
 8002488:	429f      	cmp	r7, r3
 800248a:	d100      	bne.n	800248e <__aeabi_dsub+0x1e2>
 800248c:	e0ad      	b.n	80025ea <__aeabi_dsub+0x33e>
 800248e:	2101      	movs	r1, #1
 8002490:	4b5c      	ldr	r3, [pc, #368]	@ (8002604 <__aeabi_dsub+0x358>)
 8002492:	086a      	lsrs	r2, r5, #1
 8002494:	401c      	ands	r4, r3
 8002496:	4029      	ands	r1, r5
 8002498:	430a      	orrs	r2, r1
 800249a:	07e5      	lsls	r5, r4, #31
 800249c:	4315      	orrs	r5, r2
 800249e:	0864      	lsrs	r4, r4, #1
 80024a0:	e78d      	b.n	80023be <__aeabi_dsub+0x112>
 80024a2:	4a59      	ldr	r2, [pc, #356]	@ (8002608 <__aeabi_dsub+0x35c>)
 80024a4:	9b02      	ldr	r3, [sp, #8]
 80024a6:	4692      	mov	sl, r2
 80024a8:	4662      	mov	r2, ip
 80024aa:	44ba      	add	sl, r7
 80024ac:	431a      	orrs	r2, r3
 80024ae:	d02c      	beq.n	800250a <__aeabi_dsub+0x25e>
 80024b0:	428e      	cmp	r6, r1
 80024b2:	d02e      	beq.n	8002512 <__aeabi_dsub+0x266>
 80024b4:	4652      	mov	r2, sl
 80024b6:	2a00      	cmp	r2, #0
 80024b8:	d060      	beq.n	800257c <__aeabi_dsub+0x2d0>
 80024ba:	2f00      	cmp	r7, #0
 80024bc:	d100      	bne.n	80024c0 <__aeabi_dsub+0x214>
 80024be:	e0db      	b.n	8002678 <__aeabi_dsub+0x3cc>
 80024c0:	4663      	mov	r3, ip
 80024c2:	000e      	movs	r6, r1
 80024c4:	9c02      	ldr	r4, [sp, #8]
 80024c6:	08d8      	lsrs	r0, r3, #3
 80024c8:	0762      	lsls	r2, r4, #29
 80024ca:	4302      	orrs	r2, r0
 80024cc:	08e4      	lsrs	r4, r4, #3
 80024ce:	0013      	movs	r3, r2
 80024d0:	4323      	orrs	r3, r4
 80024d2:	d100      	bne.n	80024d6 <__aeabi_dsub+0x22a>
 80024d4:	e254      	b.n	8002980 <__aeabi_dsub+0x6d4>
 80024d6:	2580      	movs	r5, #128	@ 0x80
 80024d8:	032d      	lsls	r5, r5, #12
 80024da:	4325      	orrs	r5, r4
 80024dc:	032d      	lsls	r5, r5, #12
 80024de:	4c48      	ldr	r4, [pc, #288]	@ (8002600 <__aeabi_dsub+0x354>)
 80024e0:	0b2d      	lsrs	r5, r5, #12
 80024e2:	e78c      	b.n	80023fe <__aeabi_dsub+0x152>
 80024e4:	4661      	mov	r1, ip
 80024e6:	9b02      	ldr	r3, [sp, #8]
 80024e8:	4319      	orrs	r1, r3
 80024ea:	d100      	bne.n	80024ee <__aeabi_dsub+0x242>
 80024ec:	e0cc      	b.n	8002688 <__aeabi_dsub+0x3dc>
 80024ee:	0029      	movs	r1, r5
 80024f0:	3901      	subs	r1, #1
 80024f2:	2d01      	cmp	r5, #1
 80024f4:	d100      	bne.n	80024f8 <__aeabi_dsub+0x24c>
 80024f6:	e188      	b.n	800280a <__aeabi_dsub+0x55e>
 80024f8:	4295      	cmp	r5, r2
 80024fa:	d100      	bne.n	80024fe <__aeabi_dsub+0x252>
 80024fc:	e0aa      	b.n	8002654 <__aeabi_dsub+0x3a8>
 80024fe:	2501      	movs	r5, #1
 8002500:	2938      	cmp	r1, #56	@ 0x38
 8002502:	dd00      	ble.n	8002506 <__aeabi_dsub+0x25a>
 8002504:	e72f      	b.n	8002366 <__aeabi_dsub+0xba>
 8002506:	468a      	mov	sl, r1
 8002508:	e718      	b.n	800233c <__aeabi_dsub+0x90>
 800250a:	2201      	movs	r2, #1
 800250c:	4051      	eors	r1, r2
 800250e:	428e      	cmp	r6, r1
 8002510:	d1d0      	bne.n	80024b4 <__aeabi_dsub+0x208>
 8002512:	4653      	mov	r3, sl
 8002514:	2b00      	cmp	r3, #0
 8002516:	d100      	bne.n	800251a <__aeabi_dsub+0x26e>
 8002518:	e0be      	b.n	8002698 <__aeabi_dsub+0x3ec>
 800251a:	2f00      	cmp	r7, #0
 800251c:	d000      	beq.n	8002520 <__aeabi_dsub+0x274>
 800251e:	e138      	b.n	8002792 <__aeabi_dsub+0x4e6>
 8002520:	46ca      	mov	sl, r9
 8002522:	0022      	movs	r2, r4
 8002524:	4302      	orrs	r2, r0
 8002526:	d100      	bne.n	800252a <__aeabi_dsub+0x27e>
 8002528:	e1e2      	b.n	80028f0 <__aeabi_dsub+0x644>
 800252a:	4653      	mov	r3, sl
 800252c:	1e59      	subs	r1, r3, #1
 800252e:	2b01      	cmp	r3, #1
 8002530:	d100      	bne.n	8002534 <__aeabi_dsub+0x288>
 8002532:	e20d      	b.n	8002950 <__aeabi_dsub+0x6a4>
 8002534:	4a32      	ldr	r2, [pc, #200]	@ (8002600 <__aeabi_dsub+0x354>)
 8002536:	4592      	cmp	sl, r2
 8002538:	d100      	bne.n	800253c <__aeabi_dsub+0x290>
 800253a:	e1d2      	b.n	80028e2 <__aeabi_dsub+0x636>
 800253c:	2701      	movs	r7, #1
 800253e:	2938      	cmp	r1, #56	@ 0x38
 8002540:	dc13      	bgt.n	800256a <__aeabi_dsub+0x2be>
 8002542:	291f      	cmp	r1, #31
 8002544:	dd00      	ble.n	8002548 <__aeabi_dsub+0x29c>
 8002546:	e1ee      	b.n	8002926 <__aeabi_dsub+0x67a>
 8002548:	2220      	movs	r2, #32
 800254a:	9b02      	ldr	r3, [sp, #8]
 800254c:	1a52      	subs	r2, r2, r1
 800254e:	0025      	movs	r5, r4
 8002550:	0007      	movs	r7, r0
 8002552:	469a      	mov	sl, r3
 8002554:	40cc      	lsrs	r4, r1
 8002556:	4090      	lsls	r0, r2
 8002558:	4095      	lsls	r5, r2
 800255a:	40cf      	lsrs	r7, r1
 800255c:	44a2      	add	sl, r4
 800255e:	1e42      	subs	r2, r0, #1
 8002560:	4190      	sbcs	r0, r2
 8002562:	4653      	mov	r3, sl
 8002564:	432f      	orrs	r7, r5
 8002566:	4307      	orrs	r7, r0
 8002568:	9302      	str	r3, [sp, #8]
 800256a:	003d      	movs	r5, r7
 800256c:	4465      	add	r5, ip
 800256e:	4565      	cmp	r5, ip
 8002570:	4192      	sbcs	r2, r2
 8002572:	9b02      	ldr	r3, [sp, #8]
 8002574:	4252      	negs	r2, r2
 8002576:	464f      	mov	r7, r9
 8002578:	18d4      	adds	r4, r2, r3
 800257a:	e780      	b.n	800247e <__aeabi_dsub+0x1d2>
 800257c:	4a23      	ldr	r2, [pc, #140]	@ (800260c <__aeabi_dsub+0x360>)
 800257e:	1c7d      	adds	r5, r7, #1
 8002580:	4215      	tst	r5, r2
 8002582:	d000      	beq.n	8002586 <__aeabi_dsub+0x2da>
 8002584:	e0aa      	b.n	80026dc <__aeabi_dsub+0x430>
 8002586:	4662      	mov	r2, ip
 8002588:	0025      	movs	r5, r4
 800258a:	9b02      	ldr	r3, [sp, #8]
 800258c:	4305      	orrs	r5, r0
 800258e:	431a      	orrs	r2, r3
 8002590:	2f00      	cmp	r7, #0
 8002592:	d000      	beq.n	8002596 <__aeabi_dsub+0x2ea>
 8002594:	e0f5      	b.n	8002782 <__aeabi_dsub+0x4d6>
 8002596:	2d00      	cmp	r5, #0
 8002598:	d100      	bne.n	800259c <__aeabi_dsub+0x2f0>
 800259a:	e16b      	b.n	8002874 <__aeabi_dsub+0x5c8>
 800259c:	2a00      	cmp	r2, #0
 800259e:	d100      	bne.n	80025a2 <__aeabi_dsub+0x2f6>
 80025a0:	e152      	b.n	8002848 <__aeabi_dsub+0x59c>
 80025a2:	4663      	mov	r3, ip
 80025a4:	1ac5      	subs	r5, r0, r3
 80025a6:	9b02      	ldr	r3, [sp, #8]
 80025a8:	1ae2      	subs	r2, r4, r3
 80025aa:	42a8      	cmp	r0, r5
 80025ac:	419b      	sbcs	r3, r3
 80025ae:	425b      	negs	r3, r3
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	021a      	lsls	r2, r3, #8
 80025b4:	d400      	bmi.n	80025b8 <__aeabi_dsub+0x30c>
 80025b6:	e1d5      	b.n	8002964 <__aeabi_dsub+0x6b8>
 80025b8:	4663      	mov	r3, ip
 80025ba:	1a1d      	subs	r5, r3, r0
 80025bc:	45ac      	cmp	ip, r5
 80025be:	4192      	sbcs	r2, r2
 80025c0:	2601      	movs	r6, #1
 80025c2:	9b02      	ldr	r3, [sp, #8]
 80025c4:	4252      	negs	r2, r2
 80025c6:	1b1c      	subs	r4, r3, r4
 80025c8:	4688      	mov	r8, r1
 80025ca:	1aa4      	subs	r4, r4, r2
 80025cc:	400e      	ands	r6, r1
 80025ce:	e6f6      	b.n	80023be <__aeabi_dsub+0x112>
 80025d0:	4297      	cmp	r7, r2
 80025d2:	d03f      	beq.n	8002654 <__aeabi_dsub+0x3a8>
 80025d4:	4652      	mov	r2, sl
 80025d6:	2501      	movs	r5, #1
 80025d8:	2a38      	cmp	r2, #56	@ 0x38
 80025da:	dd00      	ble.n	80025de <__aeabi_dsub+0x332>
 80025dc:	e74a      	b.n	8002474 <__aeabi_dsub+0x1c8>
 80025de:	2280      	movs	r2, #128	@ 0x80
 80025e0:	9b02      	ldr	r3, [sp, #8]
 80025e2:	0412      	lsls	r2, r2, #16
 80025e4:	4313      	orrs	r3, r2
 80025e6:	9302      	str	r3, [sp, #8]
 80025e8:	e72d      	b.n	8002446 <__aeabi_dsub+0x19a>
 80025ea:	003c      	movs	r4, r7
 80025ec:	2500      	movs	r5, #0
 80025ee:	2200      	movs	r2, #0
 80025f0:	e705      	b.n	80023fe <__aeabi_dsub+0x152>
 80025f2:	2307      	movs	r3, #7
 80025f4:	402b      	ands	r3, r5
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d000      	beq.n	80025fc <__aeabi_dsub+0x350>
 80025fa:	e6e2      	b.n	80023c2 <__aeabi_dsub+0x116>
 80025fc:	e06b      	b.n	80026d6 <__aeabi_dsub+0x42a>
 80025fe:	46c0      	nop			@ (mov r8, r8)
 8002600:	000007ff 	.word	0x000007ff
 8002604:	ff7fffff 	.word	0xff7fffff
 8002608:	fffff801 	.word	0xfffff801
 800260c:	000007fe 	.word	0x000007fe
 8002610:	0028      	movs	r0, r5
 8002612:	f000 fb1d 	bl	8002c50 <__clzsi2>
 8002616:	0003      	movs	r3, r0
 8002618:	3318      	adds	r3, #24
 800261a:	2b1f      	cmp	r3, #31
 800261c:	dc00      	bgt.n	8002620 <__aeabi_dsub+0x374>
 800261e:	e6b4      	b.n	800238a <__aeabi_dsub+0xde>
 8002620:	002a      	movs	r2, r5
 8002622:	3808      	subs	r0, #8
 8002624:	4082      	lsls	r2, r0
 8002626:	429f      	cmp	r7, r3
 8002628:	dd00      	ble.n	800262c <__aeabi_dsub+0x380>
 800262a:	e0b9      	b.n	80027a0 <__aeabi_dsub+0x4f4>
 800262c:	1bdb      	subs	r3, r3, r7
 800262e:	1c58      	adds	r0, r3, #1
 8002630:	281f      	cmp	r0, #31
 8002632:	dc00      	bgt.n	8002636 <__aeabi_dsub+0x38a>
 8002634:	e1a0      	b.n	8002978 <__aeabi_dsub+0x6cc>
 8002636:	0015      	movs	r5, r2
 8002638:	3b1f      	subs	r3, #31
 800263a:	40dd      	lsrs	r5, r3
 800263c:	2820      	cmp	r0, #32
 800263e:	d005      	beq.n	800264c <__aeabi_dsub+0x3a0>
 8002640:	2340      	movs	r3, #64	@ 0x40
 8002642:	1a1b      	subs	r3, r3, r0
 8002644:	409a      	lsls	r2, r3
 8002646:	1e53      	subs	r3, r2, #1
 8002648:	419a      	sbcs	r2, r3
 800264a:	4315      	orrs	r5, r2
 800264c:	2307      	movs	r3, #7
 800264e:	2700      	movs	r7, #0
 8002650:	402b      	ands	r3, r5
 8002652:	e7d0      	b.n	80025f6 <__aeabi_dsub+0x34a>
 8002654:	08c0      	lsrs	r0, r0, #3
 8002656:	0762      	lsls	r2, r4, #29
 8002658:	4302      	orrs	r2, r0
 800265a:	08e4      	lsrs	r4, r4, #3
 800265c:	e737      	b.n	80024ce <__aeabi_dsub+0x222>
 800265e:	08ea      	lsrs	r2, r5, #3
 8002660:	0763      	lsls	r3, r4, #29
 8002662:	431a      	orrs	r2, r3
 8002664:	4bd3      	ldr	r3, [pc, #844]	@ (80029b4 <__aeabi_dsub+0x708>)
 8002666:	08e4      	lsrs	r4, r4, #3
 8002668:	429f      	cmp	r7, r3
 800266a:	d100      	bne.n	800266e <__aeabi_dsub+0x3c2>
 800266c:	e72f      	b.n	80024ce <__aeabi_dsub+0x222>
 800266e:	0324      	lsls	r4, r4, #12
 8002670:	0b25      	lsrs	r5, r4, #12
 8002672:	057c      	lsls	r4, r7, #21
 8002674:	0d64      	lsrs	r4, r4, #21
 8002676:	e6c2      	b.n	80023fe <__aeabi_dsub+0x152>
 8002678:	46ca      	mov	sl, r9
 800267a:	0022      	movs	r2, r4
 800267c:	4302      	orrs	r2, r0
 800267e:	d158      	bne.n	8002732 <__aeabi_dsub+0x486>
 8002680:	4663      	mov	r3, ip
 8002682:	000e      	movs	r6, r1
 8002684:	9c02      	ldr	r4, [sp, #8]
 8002686:	9303      	str	r3, [sp, #12]
 8002688:	9b03      	ldr	r3, [sp, #12]
 800268a:	4657      	mov	r7, sl
 800268c:	08da      	lsrs	r2, r3, #3
 800268e:	e7e7      	b.n	8002660 <__aeabi_dsub+0x3b4>
 8002690:	4cc9      	ldr	r4, [pc, #804]	@ (80029b8 <__aeabi_dsub+0x70c>)
 8002692:	1aff      	subs	r7, r7, r3
 8002694:	4014      	ands	r4, r2
 8002696:	e692      	b.n	80023be <__aeabi_dsub+0x112>
 8002698:	4dc8      	ldr	r5, [pc, #800]	@ (80029bc <__aeabi_dsub+0x710>)
 800269a:	1c7a      	adds	r2, r7, #1
 800269c:	422a      	tst	r2, r5
 800269e:	d000      	beq.n	80026a2 <__aeabi_dsub+0x3f6>
 80026a0:	e084      	b.n	80027ac <__aeabi_dsub+0x500>
 80026a2:	0022      	movs	r2, r4
 80026a4:	4302      	orrs	r2, r0
 80026a6:	2f00      	cmp	r7, #0
 80026a8:	d000      	beq.n	80026ac <__aeabi_dsub+0x400>
 80026aa:	e0ef      	b.n	800288c <__aeabi_dsub+0x5e0>
 80026ac:	2a00      	cmp	r2, #0
 80026ae:	d100      	bne.n	80026b2 <__aeabi_dsub+0x406>
 80026b0:	e0e5      	b.n	800287e <__aeabi_dsub+0x5d2>
 80026b2:	4662      	mov	r2, ip
 80026b4:	9902      	ldr	r1, [sp, #8]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	d100      	bne.n	80026bc <__aeabi_dsub+0x410>
 80026ba:	e0c5      	b.n	8002848 <__aeabi_dsub+0x59c>
 80026bc:	4663      	mov	r3, ip
 80026be:	18c5      	adds	r5, r0, r3
 80026c0:	468c      	mov	ip, r1
 80026c2:	4285      	cmp	r5, r0
 80026c4:	4180      	sbcs	r0, r0
 80026c6:	4464      	add	r4, ip
 80026c8:	4240      	negs	r0, r0
 80026ca:	1824      	adds	r4, r4, r0
 80026cc:	0223      	lsls	r3, r4, #8
 80026ce:	d502      	bpl.n	80026d6 <__aeabi_dsub+0x42a>
 80026d0:	4bb9      	ldr	r3, [pc, #740]	@ (80029b8 <__aeabi_dsub+0x70c>)
 80026d2:	3701      	adds	r7, #1
 80026d4:	401c      	ands	r4, r3
 80026d6:	46ba      	mov	sl, r7
 80026d8:	9503      	str	r5, [sp, #12]
 80026da:	e7d5      	b.n	8002688 <__aeabi_dsub+0x3dc>
 80026dc:	4662      	mov	r2, ip
 80026de:	1a85      	subs	r5, r0, r2
 80026e0:	42a8      	cmp	r0, r5
 80026e2:	4192      	sbcs	r2, r2
 80026e4:	4252      	negs	r2, r2
 80026e6:	4691      	mov	r9, r2
 80026e8:	9b02      	ldr	r3, [sp, #8]
 80026ea:	1ae3      	subs	r3, r4, r3
 80026ec:	001a      	movs	r2, r3
 80026ee:	464b      	mov	r3, r9
 80026f0:	1ad2      	subs	r2, r2, r3
 80026f2:	0013      	movs	r3, r2
 80026f4:	4691      	mov	r9, r2
 80026f6:	021a      	lsls	r2, r3, #8
 80026f8:	d46c      	bmi.n	80027d4 <__aeabi_dsub+0x528>
 80026fa:	464a      	mov	r2, r9
 80026fc:	464c      	mov	r4, r9
 80026fe:	432a      	orrs	r2, r5
 8002700:	d000      	beq.n	8002704 <__aeabi_dsub+0x458>
 8002702:	e63a      	b.n	800237a <__aeabi_dsub+0xce>
 8002704:	2600      	movs	r6, #0
 8002706:	2400      	movs	r4, #0
 8002708:	2500      	movs	r5, #0
 800270a:	e678      	b.n	80023fe <__aeabi_dsub+0x152>
 800270c:	9902      	ldr	r1, [sp, #8]
 800270e:	4653      	mov	r3, sl
 8002710:	000d      	movs	r5, r1
 8002712:	3a20      	subs	r2, #32
 8002714:	40d5      	lsrs	r5, r2
 8002716:	2b20      	cmp	r3, #32
 8002718:	d006      	beq.n	8002728 <__aeabi_dsub+0x47c>
 800271a:	2240      	movs	r2, #64	@ 0x40
 800271c:	1ad2      	subs	r2, r2, r3
 800271e:	000b      	movs	r3, r1
 8002720:	4093      	lsls	r3, r2
 8002722:	4662      	mov	r2, ip
 8002724:	431a      	orrs	r2, r3
 8002726:	4693      	mov	fp, r2
 8002728:	465b      	mov	r3, fp
 800272a:	1e5a      	subs	r2, r3, #1
 800272c:	4193      	sbcs	r3, r2
 800272e:	431d      	orrs	r5, r3
 8002730:	e619      	b.n	8002366 <__aeabi_dsub+0xba>
 8002732:	4653      	mov	r3, sl
 8002734:	1e5a      	subs	r2, r3, #1
 8002736:	2b01      	cmp	r3, #1
 8002738:	d100      	bne.n	800273c <__aeabi_dsub+0x490>
 800273a:	e0c6      	b.n	80028ca <__aeabi_dsub+0x61e>
 800273c:	4e9d      	ldr	r6, [pc, #628]	@ (80029b4 <__aeabi_dsub+0x708>)
 800273e:	45b2      	cmp	sl, r6
 8002740:	d100      	bne.n	8002744 <__aeabi_dsub+0x498>
 8002742:	e6bd      	b.n	80024c0 <__aeabi_dsub+0x214>
 8002744:	4688      	mov	r8, r1
 8002746:	000e      	movs	r6, r1
 8002748:	2501      	movs	r5, #1
 800274a:	2a38      	cmp	r2, #56	@ 0x38
 800274c:	dc10      	bgt.n	8002770 <__aeabi_dsub+0x4c4>
 800274e:	2a1f      	cmp	r2, #31
 8002750:	dc7f      	bgt.n	8002852 <__aeabi_dsub+0x5a6>
 8002752:	2120      	movs	r1, #32
 8002754:	0025      	movs	r5, r4
 8002756:	1a89      	subs	r1, r1, r2
 8002758:	0007      	movs	r7, r0
 800275a:	4088      	lsls	r0, r1
 800275c:	408d      	lsls	r5, r1
 800275e:	40d7      	lsrs	r7, r2
 8002760:	40d4      	lsrs	r4, r2
 8002762:	1e41      	subs	r1, r0, #1
 8002764:	4188      	sbcs	r0, r1
 8002766:	9b02      	ldr	r3, [sp, #8]
 8002768:	433d      	orrs	r5, r7
 800276a:	1b1b      	subs	r3, r3, r4
 800276c:	4305      	orrs	r5, r0
 800276e:	9302      	str	r3, [sp, #8]
 8002770:	4662      	mov	r2, ip
 8002772:	1b55      	subs	r5, r2, r5
 8002774:	45ac      	cmp	ip, r5
 8002776:	4192      	sbcs	r2, r2
 8002778:	9b02      	ldr	r3, [sp, #8]
 800277a:	4252      	negs	r2, r2
 800277c:	464f      	mov	r7, r9
 800277e:	1a9c      	subs	r4, r3, r2
 8002780:	e5f6      	b.n	8002370 <__aeabi_dsub+0xc4>
 8002782:	2d00      	cmp	r5, #0
 8002784:	d000      	beq.n	8002788 <__aeabi_dsub+0x4dc>
 8002786:	e0b7      	b.n	80028f8 <__aeabi_dsub+0x64c>
 8002788:	2a00      	cmp	r2, #0
 800278a:	d100      	bne.n	800278e <__aeabi_dsub+0x4e2>
 800278c:	e0f0      	b.n	8002970 <__aeabi_dsub+0x6c4>
 800278e:	2601      	movs	r6, #1
 8002790:	400e      	ands	r6, r1
 8002792:	4663      	mov	r3, ip
 8002794:	9802      	ldr	r0, [sp, #8]
 8002796:	08d9      	lsrs	r1, r3, #3
 8002798:	0742      	lsls	r2, r0, #29
 800279a:	430a      	orrs	r2, r1
 800279c:	08c4      	lsrs	r4, r0, #3
 800279e:	e696      	b.n	80024ce <__aeabi_dsub+0x222>
 80027a0:	4c85      	ldr	r4, [pc, #532]	@ (80029b8 <__aeabi_dsub+0x70c>)
 80027a2:	1aff      	subs	r7, r7, r3
 80027a4:	4014      	ands	r4, r2
 80027a6:	0762      	lsls	r2, r4, #29
 80027a8:	08e4      	lsrs	r4, r4, #3
 80027aa:	e760      	b.n	800266e <__aeabi_dsub+0x3c2>
 80027ac:	4981      	ldr	r1, [pc, #516]	@ (80029b4 <__aeabi_dsub+0x708>)
 80027ae:	428a      	cmp	r2, r1
 80027b0:	d100      	bne.n	80027b4 <__aeabi_dsub+0x508>
 80027b2:	e0c9      	b.n	8002948 <__aeabi_dsub+0x69c>
 80027b4:	4663      	mov	r3, ip
 80027b6:	18c1      	adds	r1, r0, r3
 80027b8:	4281      	cmp	r1, r0
 80027ba:	4180      	sbcs	r0, r0
 80027bc:	9b02      	ldr	r3, [sp, #8]
 80027be:	4240      	negs	r0, r0
 80027c0:	18e3      	adds	r3, r4, r3
 80027c2:	181b      	adds	r3, r3, r0
 80027c4:	07dd      	lsls	r5, r3, #31
 80027c6:	085c      	lsrs	r4, r3, #1
 80027c8:	2307      	movs	r3, #7
 80027ca:	0849      	lsrs	r1, r1, #1
 80027cc:	430d      	orrs	r5, r1
 80027ce:	0017      	movs	r7, r2
 80027d0:	402b      	ands	r3, r5
 80027d2:	e710      	b.n	80025f6 <__aeabi_dsub+0x34a>
 80027d4:	4663      	mov	r3, ip
 80027d6:	1a1d      	subs	r5, r3, r0
 80027d8:	45ac      	cmp	ip, r5
 80027da:	4192      	sbcs	r2, r2
 80027dc:	2601      	movs	r6, #1
 80027de:	9b02      	ldr	r3, [sp, #8]
 80027e0:	4252      	negs	r2, r2
 80027e2:	1b1c      	subs	r4, r3, r4
 80027e4:	4688      	mov	r8, r1
 80027e6:	1aa4      	subs	r4, r4, r2
 80027e8:	400e      	ands	r6, r1
 80027ea:	e5c6      	b.n	800237a <__aeabi_dsub+0xce>
 80027ec:	4663      	mov	r3, ip
 80027ee:	18c5      	adds	r5, r0, r3
 80027f0:	9b02      	ldr	r3, [sp, #8]
 80027f2:	4285      	cmp	r5, r0
 80027f4:	4180      	sbcs	r0, r0
 80027f6:	469c      	mov	ip, r3
 80027f8:	4240      	negs	r0, r0
 80027fa:	4464      	add	r4, ip
 80027fc:	1824      	adds	r4, r4, r0
 80027fe:	2701      	movs	r7, #1
 8002800:	0223      	lsls	r3, r4, #8
 8002802:	d400      	bmi.n	8002806 <__aeabi_dsub+0x55a>
 8002804:	e6f5      	b.n	80025f2 <__aeabi_dsub+0x346>
 8002806:	2702      	movs	r7, #2
 8002808:	e641      	b.n	800248e <__aeabi_dsub+0x1e2>
 800280a:	4663      	mov	r3, ip
 800280c:	1ac5      	subs	r5, r0, r3
 800280e:	42a8      	cmp	r0, r5
 8002810:	4180      	sbcs	r0, r0
 8002812:	9b02      	ldr	r3, [sp, #8]
 8002814:	4240      	negs	r0, r0
 8002816:	1ae4      	subs	r4, r4, r3
 8002818:	2701      	movs	r7, #1
 800281a:	1a24      	subs	r4, r4, r0
 800281c:	e5a8      	b.n	8002370 <__aeabi_dsub+0xc4>
 800281e:	9d02      	ldr	r5, [sp, #8]
 8002820:	4652      	mov	r2, sl
 8002822:	002b      	movs	r3, r5
 8002824:	3a20      	subs	r2, #32
 8002826:	40d3      	lsrs	r3, r2
 8002828:	0019      	movs	r1, r3
 800282a:	4653      	mov	r3, sl
 800282c:	2b20      	cmp	r3, #32
 800282e:	d006      	beq.n	800283e <__aeabi_dsub+0x592>
 8002830:	2240      	movs	r2, #64	@ 0x40
 8002832:	1ad2      	subs	r2, r2, r3
 8002834:	002b      	movs	r3, r5
 8002836:	4093      	lsls	r3, r2
 8002838:	4662      	mov	r2, ip
 800283a:	431a      	orrs	r2, r3
 800283c:	4693      	mov	fp, r2
 800283e:	465d      	mov	r5, fp
 8002840:	1e6b      	subs	r3, r5, #1
 8002842:	419d      	sbcs	r5, r3
 8002844:	430d      	orrs	r5, r1
 8002846:	e615      	b.n	8002474 <__aeabi_dsub+0x1c8>
 8002848:	0762      	lsls	r2, r4, #29
 800284a:	08c0      	lsrs	r0, r0, #3
 800284c:	4302      	orrs	r2, r0
 800284e:	08e4      	lsrs	r4, r4, #3
 8002850:	e70d      	b.n	800266e <__aeabi_dsub+0x3c2>
 8002852:	0011      	movs	r1, r2
 8002854:	0027      	movs	r7, r4
 8002856:	3920      	subs	r1, #32
 8002858:	40cf      	lsrs	r7, r1
 800285a:	2a20      	cmp	r2, #32
 800285c:	d005      	beq.n	800286a <__aeabi_dsub+0x5be>
 800285e:	2140      	movs	r1, #64	@ 0x40
 8002860:	1a8a      	subs	r2, r1, r2
 8002862:	4094      	lsls	r4, r2
 8002864:	0025      	movs	r5, r4
 8002866:	4305      	orrs	r5, r0
 8002868:	9503      	str	r5, [sp, #12]
 800286a:	9d03      	ldr	r5, [sp, #12]
 800286c:	1e6a      	subs	r2, r5, #1
 800286e:	4195      	sbcs	r5, r2
 8002870:	433d      	orrs	r5, r7
 8002872:	e77d      	b.n	8002770 <__aeabi_dsub+0x4c4>
 8002874:	2a00      	cmp	r2, #0
 8002876:	d100      	bne.n	800287a <__aeabi_dsub+0x5ce>
 8002878:	e744      	b.n	8002704 <__aeabi_dsub+0x458>
 800287a:	2601      	movs	r6, #1
 800287c:	400e      	ands	r6, r1
 800287e:	4663      	mov	r3, ip
 8002880:	08d9      	lsrs	r1, r3, #3
 8002882:	9b02      	ldr	r3, [sp, #8]
 8002884:	075a      	lsls	r2, r3, #29
 8002886:	430a      	orrs	r2, r1
 8002888:	08dc      	lsrs	r4, r3, #3
 800288a:	e6f0      	b.n	800266e <__aeabi_dsub+0x3c2>
 800288c:	2a00      	cmp	r2, #0
 800288e:	d028      	beq.n	80028e2 <__aeabi_dsub+0x636>
 8002890:	4662      	mov	r2, ip
 8002892:	9f02      	ldr	r7, [sp, #8]
 8002894:	08c0      	lsrs	r0, r0, #3
 8002896:	433a      	orrs	r2, r7
 8002898:	d100      	bne.n	800289c <__aeabi_dsub+0x5f0>
 800289a:	e6dc      	b.n	8002656 <__aeabi_dsub+0x3aa>
 800289c:	0762      	lsls	r2, r4, #29
 800289e:	4310      	orrs	r0, r2
 80028a0:	2280      	movs	r2, #128	@ 0x80
 80028a2:	08e4      	lsrs	r4, r4, #3
 80028a4:	0312      	lsls	r2, r2, #12
 80028a6:	4214      	tst	r4, r2
 80028a8:	d009      	beq.n	80028be <__aeabi_dsub+0x612>
 80028aa:	08fd      	lsrs	r5, r7, #3
 80028ac:	4215      	tst	r5, r2
 80028ae:	d106      	bne.n	80028be <__aeabi_dsub+0x612>
 80028b0:	4663      	mov	r3, ip
 80028b2:	2601      	movs	r6, #1
 80028b4:	002c      	movs	r4, r5
 80028b6:	08d8      	lsrs	r0, r3, #3
 80028b8:	077b      	lsls	r3, r7, #29
 80028ba:	4318      	orrs	r0, r3
 80028bc:	400e      	ands	r6, r1
 80028be:	0f42      	lsrs	r2, r0, #29
 80028c0:	00c0      	lsls	r0, r0, #3
 80028c2:	08c0      	lsrs	r0, r0, #3
 80028c4:	0752      	lsls	r2, r2, #29
 80028c6:	4302      	orrs	r2, r0
 80028c8:	e601      	b.n	80024ce <__aeabi_dsub+0x222>
 80028ca:	4663      	mov	r3, ip
 80028cc:	1a1d      	subs	r5, r3, r0
 80028ce:	45ac      	cmp	ip, r5
 80028d0:	4192      	sbcs	r2, r2
 80028d2:	9b02      	ldr	r3, [sp, #8]
 80028d4:	4252      	negs	r2, r2
 80028d6:	1b1c      	subs	r4, r3, r4
 80028d8:	000e      	movs	r6, r1
 80028da:	4688      	mov	r8, r1
 80028dc:	2701      	movs	r7, #1
 80028de:	1aa4      	subs	r4, r4, r2
 80028e0:	e546      	b.n	8002370 <__aeabi_dsub+0xc4>
 80028e2:	4663      	mov	r3, ip
 80028e4:	08d9      	lsrs	r1, r3, #3
 80028e6:	9b02      	ldr	r3, [sp, #8]
 80028e8:	075a      	lsls	r2, r3, #29
 80028ea:	430a      	orrs	r2, r1
 80028ec:	08dc      	lsrs	r4, r3, #3
 80028ee:	e5ee      	b.n	80024ce <__aeabi_dsub+0x222>
 80028f0:	4663      	mov	r3, ip
 80028f2:	9c02      	ldr	r4, [sp, #8]
 80028f4:	9303      	str	r3, [sp, #12]
 80028f6:	e6c7      	b.n	8002688 <__aeabi_dsub+0x3dc>
 80028f8:	08c0      	lsrs	r0, r0, #3
 80028fa:	2a00      	cmp	r2, #0
 80028fc:	d100      	bne.n	8002900 <__aeabi_dsub+0x654>
 80028fe:	e6aa      	b.n	8002656 <__aeabi_dsub+0x3aa>
 8002900:	0762      	lsls	r2, r4, #29
 8002902:	4310      	orrs	r0, r2
 8002904:	2280      	movs	r2, #128	@ 0x80
 8002906:	08e4      	lsrs	r4, r4, #3
 8002908:	0312      	lsls	r2, r2, #12
 800290a:	4214      	tst	r4, r2
 800290c:	d0d7      	beq.n	80028be <__aeabi_dsub+0x612>
 800290e:	9f02      	ldr	r7, [sp, #8]
 8002910:	08fd      	lsrs	r5, r7, #3
 8002912:	4215      	tst	r5, r2
 8002914:	d1d3      	bne.n	80028be <__aeabi_dsub+0x612>
 8002916:	4663      	mov	r3, ip
 8002918:	2601      	movs	r6, #1
 800291a:	08d8      	lsrs	r0, r3, #3
 800291c:	077b      	lsls	r3, r7, #29
 800291e:	002c      	movs	r4, r5
 8002920:	4318      	orrs	r0, r3
 8002922:	400e      	ands	r6, r1
 8002924:	e7cb      	b.n	80028be <__aeabi_dsub+0x612>
 8002926:	000a      	movs	r2, r1
 8002928:	0027      	movs	r7, r4
 800292a:	3a20      	subs	r2, #32
 800292c:	40d7      	lsrs	r7, r2
 800292e:	2920      	cmp	r1, #32
 8002930:	d005      	beq.n	800293e <__aeabi_dsub+0x692>
 8002932:	2240      	movs	r2, #64	@ 0x40
 8002934:	1a52      	subs	r2, r2, r1
 8002936:	4094      	lsls	r4, r2
 8002938:	0025      	movs	r5, r4
 800293a:	4305      	orrs	r5, r0
 800293c:	9503      	str	r5, [sp, #12]
 800293e:	9d03      	ldr	r5, [sp, #12]
 8002940:	1e6a      	subs	r2, r5, #1
 8002942:	4195      	sbcs	r5, r2
 8002944:	432f      	orrs	r7, r5
 8002946:	e610      	b.n	800256a <__aeabi_dsub+0x2be>
 8002948:	0014      	movs	r4, r2
 800294a:	2500      	movs	r5, #0
 800294c:	2200      	movs	r2, #0
 800294e:	e556      	b.n	80023fe <__aeabi_dsub+0x152>
 8002950:	9b02      	ldr	r3, [sp, #8]
 8002952:	4460      	add	r0, ip
 8002954:	4699      	mov	r9, r3
 8002956:	4560      	cmp	r0, ip
 8002958:	4192      	sbcs	r2, r2
 800295a:	444c      	add	r4, r9
 800295c:	4252      	negs	r2, r2
 800295e:	0005      	movs	r5, r0
 8002960:	18a4      	adds	r4, r4, r2
 8002962:	e74c      	b.n	80027fe <__aeabi_dsub+0x552>
 8002964:	001a      	movs	r2, r3
 8002966:	001c      	movs	r4, r3
 8002968:	432a      	orrs	r2, r5
 800296a:	d000      	beq.n	800296e <__aeabi_dsub+0x6c2>
 800296c:	e6b3      	b.n	80026d6 <__aeabi_dsub+0x42a>
 800296e:	e6c9      	b.n	8002704 <__aeabi_dsub+0x458>
 8002970:	2480      	movs	r4, #128	@ 0x80
 8002972:	2600      	movs	r6, #0
 8002974:	0324      	lsls	r4, r4, #12
 8002976:	e5ae      	b.n	80024d6 <__aeabi_dsub+0x22a>
 8002978:	2120      	movs	r1, #32
 800297a:	2500      	movs	r5, #0
 800297c:	1a09      	subs	r1, r1, r0
 800297e:	e517      	b.n	80023b0 <__aeabi_dsub+0x104>
 8002980:	2200      	movs	r2, #0
 8002982:	2500      	movs	r5, #0
 8002984:	4c0b      	ldr	r4, [pc, #44]	@ (80029b4 <__aeabi_dsub+0x708>)
 8002986:	e53a      	b.n	80023fe <__aeabi_dsub+0x152>
 8002988:	2d00      	cmp	r5, #0
 800298a:	d100      	bne.n	800298e <__aeabi_dsub+0x6e2>
 800298c:	e5f6      	b.n	800257c <__aeabi_dsub+0x2d0>
 800298e:	464b      	mov	r3, r9
 8002990:	1bda      	subs	r2, r3, r7
 8002992:	4692      	mov	sl, r2
 8002994:	2f00      	cmp	r7, #0
 8002996:	d100      	bne.n	800299a <__aeabi_dsub+0x6ee>
 8002998:	e66f      	b.n	800267a <__aeabi_dsub+0x3ce>
 800299a:	2a38      	cmp	r2, #56	@ 0x38
 800299c:	dc05      	bgt.n	80029aa <__aeabi_dsub+0x6fe>
 800299e:	2680      	movs	r6, #128	@ 0x80
 80029a0:	0436      	lsls	r6, r6, #16
 80029a2:	4334      	orrs	r4, r6
 80029a4:	4688      	mov	r8, r1
 80029a6:	000e      	movs	r6, r1
 80029a8:	e6d1      	b.n	800274e <__aeabi_dsub+0x4a2>
 80029aa:	4688      	mov	r8, r1
 80029ac:	000e      	movs	r6, r1
 80029ae:	2501      	movs	r5, #1
 80029b0:	e6de      	b.n	8002770 <__aeabi_dsub+0x4c4>
 80029b2:	46c0      	nop			@ (mov r8, r8)
 80029b4:	000007ff 	.word	0x000007ff
 80029b8:	ff7fffff 	.word	0xff7fffff
 80029bc:	000007fe 	.word	0x000007fe
 80029c0:	2d00      	cmp	r5, #0
 80029c2:	d100      	bne.n	80029c6 <__aeabi_dsub+0x71a>
 80029c4:	e668      	b.n	8002698 <__aeabi_dsub+0x3ec>
 80029c6:	464b      	mov	r3, r9
 80029c8:	1bd9      	subs	r1, r3, r7
 80029ca:	2f00      	cmp	r7, #0
 80029cc:	d101      	bne.n	80029d2 <__aeabi_dsub+0x726>
 80029ce:	468a      	mov	sl, r1
 80029d0:	e5a7      	b.n	8002522 <__aeabi_dsub+0x276>
 80029d2:	2701      	movs	r7, #1
 80029d4:	2938      	cmp	r1, #56	@ 0x38
 80029d6:	dd00      	ble.n	80029da <__aeabi_dsub+0x72e>
 80029d8:	e5c7      	b.n	800256a <__aeabi_dsub+0x2be>
 80029da:	2280      	movs	r2, #128	@ 0x80
 80029dc:	0412      	lsls	r2, r2, #16
 80029de:	4314      	orrs	r4, r2
 80029e0:	e5af      	b.n	8002542 <__aeabi_dsub+0x296>
 80029e2:	46c0      	nop			@ (mov r8, r8)

080029e4 <__aeabi_d2iz>:
 80029e4:	000b      	movs	r3, r1
 80029e6:	0002      	movs	r2, r0
 80029e8:	b570      	push	{r4, r5, r6, lr}
 80029ea:	4d16      	ldr	r5, [pc, #88]	@ (8002a44 <__aeabi_d2iz+0x60>)
 80029ec:	030c      	lsls	r4, r1, #12
 80029ee:	b082      	sub	sp, #8
 80029f0:	0049      	lsls	r1, r1, #1
 80029f2:	2000      	movs	r0, #0
 80029f4:	9200      	str	r2, [sp, #0]
 80029f6:	9301      	str	r3, [sp, #4]
 80029f8:	0b24      	lsrs	r4, r4, #12
 80029fa:	0d49      	lsrs	r1, r1, #21
 80029fc:	0fde      	lsrs	r6, r3, #31
 80029fe:	42a9      	cmp	r1, r5
 8002a00:	dd04      	ble.n	8002a0c <__aeabi_d2iz+0x28>
 8002a02:	4811      	ldr	r0, [pc, #68]	@ (8002a48 <__aeabi_d2iz+0x64>)
 8002a04:	4281      	cmp	r1, r0
 8002a06:	dd03      	ble.n	8002a10 <__aeabi_d2iz+0x2c>
 8002a08:	4b10      	ldr	r3, [pc, #64]	@ (8002a4c <__aeabi_d2iz+0x68>)
 8002a0a:	18f0      	adds	r0, r6, r3
 8002a0c:	b002      	add	sp, #8
 8002a0e:	bd70      	pop	{r4, r5, r6, pc}
 8002a10:	2080      	movs	r0, #128	@ 0x80
 8002a12:	0340      	lsls	r0, r0, #13
 8002a14:	4320      	orrs	r0, r4
 8002a16:	4c0e      	ldr	r4, [pc, #56]	@ (8002a50 <__aeabi_d2iz+0x6c>)
 8002a18:	1a64      	subs	r4, r4, r1
 8002a1a:	2c1f      	cmp	r4, #31
 8002a1c:	dd08      	ble.n	8002a30 <__aeabi_d2iz+0x4c>
 8002a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a54 <__aeabi_d2iz+0x70>)
 8002a20:	1a5b      	subs	r3, r3, r1
 8002a22:	40d8      	lsrs	r0, r3
 8002a24:	0003      	movs	r3, r0
 8002a26:	4258      	negs	r0, r3
 8002a28:	2e00      	cmp	r6, #0
 8002a2a:	d1ef      	bne.n	8002a0c <__aeabi_d2iz+0x28>
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	e7ed      	b.n	8002a0c <__aeabi_d2iz+0x28>
 8002a30:	4b09      	ldr	r3, [pc, #36]	@ (8002a58 <__aeabi_d2iz+0x74>)
 8002a32:	9a00      	ldr	r2, [sp, #0]
 8002a34:	469c      	mov	ip, r3
 8002a36:	0003      	movs	r3, r0
 8002a38:	4461      	add	r1, ip
 8002a3a:	408b      	lsls	r3, r1
 8002a3c:	40e2      	lsrs	r2, r4
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	e7f1      	b.n	8002a26 <__aeabi_d2iz+0x42>
 8002a42:	46c0      	nop			@ (mov r8, r8)
 8002a44:	000003fe 	.word	0x000003fe
 8002a48:	0000041d 	.word	0x0000041d
 8002a4c:	7fffffff 	.word	0x7fffffff
 8002a50:	00000433 	.word	0x00000433
 8002a54:	00000413 	.word	0x00000413
 8002a58:	fffffbed 	.word	0xfffffbed

08002a5c <__aeabi_i2d>:
 8002a5c:	b570      	push	{r4, r5, r6, lr}
 8002a5e:	2800      	cmp	r0, #0
 8002a60:	d016      	beq.n	8002a90 <__aeabi_i2d+0x34>
 8002a62:	17c3      	asrs	r3, r0, #31
 8002a64:	18c5      	adds	r5, r0, r3
 8002a66:	405d      	eors	r5, r3
 8002a68:	0fc4      	lsrs	r4, r0, #31
 8002a6a:	0028      	movs	r0, r5
 8002a6c:	f000 f8f0 	bl	8002c50 <__clzsi2>
 8002a70:	4b10      	ldr	r3, [pc, #64]	@ (8002ab4 <__aeabi_i2d+0x58>)
 8002a72:	1a1b      	subs	r3, r3, r0
 8002a74:	055b      	lsls	r3, r3, #21
 8002a76:	0d5b      	lsrs	r3, r3, #21
 8002a78:	280a      	cmp	r0, #10
 8002a7a:	dc14      	bgt.n	8002aa6 <__aeabi_i2d+0x4a>
 8002a7c:	0002      	movs	r2, r0
 8002a7e:	002e      	movs	r6, r5
 8002a80:	3215      	adds	r2, #21
 8002a82:	4096      	lsls	r6, r2
 8002a84:	220b      	movs	r2, #11
 8002a86:	1a12      	subs	r2, r2, r0
 8002a88:	40d5      	lsrs	r5, r2
 8002a8a:	032d      	lsls	r5, r5, #12
 8002a8c:	0b2d      	lsrs	r5, r5, #12
 8002a8e:	e003      	b.n	8002a98 <__aeabi_i2d+0x3c>
 8002a90:	2400      	movs	r4, #0
 8002a92:	2300      	movs	r3, #0
 8002a94:	2500      	movs	r5, #0
 8002a96:	2600      	movs	r6, #0
 8002a98:	051b      	lsls	r3, r3, #20
 8002a9a:	432b      	orrs	r3, r5
 8002a9c:	07e4      	lsls	r4, r4, #31
 8002a9e:	4323      	orrs	r3, r4
 8002aa0:	0030      	movs	r0, r6
 8002aa2:	0019      	movs	r1, r3
 8002aa4:	bd70      	pop	{r4, r5, r6, pc}
 8002aa6:	380b      	subs	r0, #11
 8002aa8:	4085      	lsls	r5, r0
 8002aaa:	032d      	lsls	r5, r5, #12
 8002aac:	2600      	movs	r6, #0
 8002aae:	0b2d      	lsrs	r5, r5, #12
 8002ab0:	e7f2      	b.n	8002a98 <__aeabi_i2d+0x3c>
 8002ab2:	46c0      	nop			@ (mov r8, r8)
 8002ab4:	0000041e 	.word	0x0000041e

08002ab8 <__aeabi_f2d>:
 8002ab8:	b570      	push	{r4, r5, r6, lr}
 8002aba:	0242      	lsls	r2, r0, #9
 8002abc:	0043      	lsls	r3, r0, #1
 8002abe:	0fc4      	lsrs	r4, r0, #31
 8002ac0:	20fe      	movs	r0, #254	@ 0xfe
 8002ac2:	0e1b      	lsrs	r3, r3, #24
 8002ac4:	1c59      	adds	r1, r3, #1
 8002ac6:	0a55      	lsrs	r5, r2, #9
 8002ac8:	4208      	tst	r0, r1
 8002aca:	d00c      	beq.n	8002ae6 <__aeabi_f2d+0x2e>
 8002acc:	21e0      	movs	r1, #224	@ 0xe0
 8002ace:	0089      	lsls	r1, r1, #2
 8002ad0:	468c      	mov	ip, r1
 8002ad2:	076d      	lsls	r5, r5, #29
 8002ad4:	0b12      	lsrs	r2, r2, #12
 8002ad6:	4463      	add	r3, ip
 8002ad8:	051b      	lsls	r3, r3, #20
 8002ada:	4313      	orrs	r3, r2
 8002adc:	07e4      	lsls	r4, r4, #31
 8002ade:	4323      	orrs	r3, r4
 8002ae0:	0028      	movs	r0, r5
 8002ae2:	0019      	movs	r1, r3
 8002ae4:	bd70      	pop	{r4, r5, r6, pc}
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d114      	bne.n	8002b14 <__aeabi_f2d+0x5c>
 8002aea:	2d00      	cmp	r5, #0
 8002aec:	d01b      	beq.n	8002b26 <__aeabi_f2d+0x6e>
 8002aee:	0028      	movs	r0, r5
 8002af0:	f000 f8ae 	bl	8002c50 <__clzsi2>
 8002af4:	280a      	cmp	r0, #10
 8002af6:	dc1c      	bgt.n	8002b32 <__aeabi_f2d+0x7a>
 8002af8:	230b      	movs	r3, #11
 8002afa:	002a      	movs	r2, r5
 8002afc:	1a1b      	subs	r3, r3, r0
 8002afe:	40da      	lsrs	r2, r3
 8002b00:	0003      	movs	r3, r0
 8002b02:	3315      	adds	r3, #21
 8002b04:	409d      	lsls	r5, r3
 8002b06:	4b0e      	ldr	r3, [pc, #56]	@ (8002b40 <__aeabi_f2d+0x88>)
 8002b08:	0312      	lsls	r2, r2, #12
 8002b0a:	1a1b      	subs	r3, r3, r0
 8002b0c:	055b      	lsls	r3, r3, #21
 8002b0e:	0b12      	lsrs	r2, r2, #12
 8002b10:	0d5b      	lsrs	r3, r3, #21
 8002b12:	e7e1      	b.n	8002ad8 <__aeabi_f2d+0x20>
 8002b14:	2d00      	cmp	r5, #0
 8002b16:	d009      	beq.n	8002b2c <__aeabi_f2d+0x74>
 8002b18:	0b13      	lsrs	r3, r2, #12
 8002b1a:	2280      	movs	r2, #128	@ 0x80
 8002b1c:	0312      	lsls	r2, r2, #12
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	076d      	lsls	r5, r5, #29
 8002b22:	4b08      	ldr	r3, [pc, #32]	@ (8002b44 <__aeabi_f2d+0x8c>)
 8002b24:	e7d8      	b.n	8002ad8 <__aeabi_f2d+0x20>
 8002b26:	2300      	movs	r3, #0
 8002b28:	2200      	movs	r2, #0
 8002b2a:	e7d5      	b.n	8002ad8 <__aeabi_f2d+0x20>
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	4b05      	ldr	r3, [pc, #20]	@ (8002b44 <__aeabi_f2d+0x8c>)
 8002b30:	e7d2      	b.n	8002ad8 <__aeabi_f2d+0x20>
 8002b32:	0003      	movs	r3, r0
 8002b34:	002a      	movs	r2, r5
 8002b36:	3b0b      	subs	r3, #11
 8002b38:	409a      	lsls	r2, r3
 8002b3a:	2500      	movs	r5, #0
 8002b3c:	e7e3      	b.n	8002b06 <__aeabi_f2d+0x4e>
 8002b3e:	46c0      	nop			@ (mov r8, r8)
 8002b40:	00000389 	.word	0x00000389
 8002b44:	000007ff 	.word	0x000007ff

08002b48 <__aeabi_d2f>:
 8002b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b4a:	004b      	lsls	r3, r1, #1
 8002b4c:	030f      	lsls	r7, r1, #12
 8002b4e:	0d5b      	lsrs	r3, r3, #21
 8002b50:	4c3b      	ldr	r4, [pc, #236]	@ (8002c40 <__aeabi_d2f+0xf8>)
 8002b52:	0f45      	lsrs	r5, r0, #29
 8002b54:	b083      	sub	sp, #12
 8002b56:	0a7f      	lsrs	r7, r7, #9
 8002b58:	1c5e      	adds	r6, r3, #1
 8002b5a:	432f      	orrs	r7, r5
 8002b5c:	9000      	str	r0, [sp, #0]
 8002b5e:	9101      	str	r1, [sp, #4]
 8002b60:	0fca      	lsrs	r2, r1, #31
 8002b62:	00c5      	lsls	r5, r0, #3
 8002b64:	4226      	tst	r6, r4
 8002b66:	d00b      	beq.n	8002b80 <__aeabi_d2f+0x38>
 8002b68:	4936      	ldr	r1, [pc, #216]	@ (8002c44 <__aeabi_d2f+0xfc>)
 8002b6a:	185c      	adds	r4, r3, r1
 8002b6c:	2cfe      	cmp	r4, #254	@ 0xfe
 8002b6e:	dd13      	ble.n	8002b98 <__aeabi_d2f+0x50>
 8002b70:	20ff      	movs	r0, #255	@ 0xff
 8002b72:	2300      	movs	r3, #0
 8002b74:	05c0      	lsls	r0, r0, #23
 8002b76:	4318      	orrs	r0, r3
 8002b78:	07d2      	lsls	r2, r2, #31
 8002b7a:	4310      	orrs	r0, r2
 8002b7c:	b003      	add	sp, #12
 8002b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d102      	bne.n	8002b8a <__aeabi_d2f+0x42>
 8002b84:	2000      	movs	r0, #0
 8002b86:	2300      	movs	r3, #0
 8002b88:	e7f4      	b.n	8002b74 <__aeabi_d2f+0x2c>
 8002b8a:	433d      	orrs	r5, r7
 8002b8c:	d0f0      	beq.n	8002b70 <__aeabi_d2f+0x28>
 8002b8e:	2380      	movs	r3, #128	@ 0x80
 8002b90:	03db      	lsls	r3, r3, #15
 8002b92:	20ff      	movs	r0, #255	@ 0xff
 8002b94:	433b      	orrs	r3, r7
 8002b96:	e7ed      	b.n	8002b74 <__aeabi_d2f+0x2c>
 8002b98:	2c00      	cmp	r4, #0
 8002b9a:	dd14      	ble.n	8002bc6 <__aeabi_d2f+0x7e>
 8002b9c:	9b00      	ldr	r3, [sp, #0]
 8002b9e:	00ff      	lsls	r7, r7, #3
 8002ba0:	019b      	lsls	r3, r3, #6
 8002ba2:	1e58      	subs	r0, r3, #1
 8002ba4:	4183      	sbcs	r3, r0
 8002ba6:	0f69      	lsrs	r1, r5, #29
 8002ba8:	433b      	orrs	r3, r7
 8002baa:	430b      	orrs	r3, r1
 8002bac:	0759      	lsls	r1, r3, #29
 8002bae:	d041      	beq.n	8002c34 <__aeabi_d2f+0xec>
 8002bb0:	210f      	movs	r1, #15
 8002bb2:	4019      	ands	r1, r3
 8002bb4:	2904      	cmp	r1, #4
 8002bb6:	d028      	beq.n	8002c0a <__aeabi_d2f+0xc2>
 8002bb8:	3304      	adds	r3, #4
 8002bba:	0159      	lsls	r1, r3, #5
 8002bbc:	d525      	bpl.n	8002c0a <__aeabi_d2f+0xc2>
 8002bbe:	3401      	adds	r4, #1
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	b2e0      	uxtb	r0, r4
 8002bc4:	e7d6      	b.n	8002b74 <__aeabi_d2f+0x2c>
 8002bc6:	0021      	movs	r1, r4
 8002bc8:	3117      	adds	r1, #23
 8002bca:	dbdb      	blt.n	8002b84 <__aeabi_d2f+0x3c>
 8002bcc:	2180      	movs	r1, #128	@ 0x80
 8002bce:	201e      	movs	r0, #30
 8002bd0:	0409      	lsls	r1, r1, #16
 8002bd2:	4339      	orrs	r1, r7
 8002bd4:	1b00      	subs	r0, r0, r4
 8002bd6:	281f      	cmp	r0, #31
 8002bd8:	dd1b      	ble.n	8002c12 <__aeabi_d2f+0xca>
 8002bda:	2602      	movs	r6, #2
 8002bdc:	4276      	negs	r6, r6
 8002bde:	1b34      	subs	r4, r6, r4
 8002be0:	000e      	movs	r6, r1
 8002be2:	40e6      	lsrs	r6, r4
 8002be4:	0034      	movs	r4, r6
 8002be6:	2820      	cmp	r0, #32
 8002be8:	d004      	beq.n	8002bf4 <__aeabi_d2f+0xac>
 8002bea:	4817      	ldr	r0, [pc, #92]	@ (8002c48 <__aeabi_d2f+0x100>)
 8002bec:	4684      	mov	ip, r0
 8002bee:	4463      	add	r3, ip
 8002bf0:	4099      	lsls	r1, r3
 8002bf2:	430d      	orrs	r5, r1
 8002bf4:	002b      	movs	r3, r5
 8002bf6:	1e59      	subs	r1, r3, #1
 8002bf8:	418b      	sbcs	r3, r1
 8002bfa:	4323      	orrs	r3, r4
 8002bfc:	0759      	lsls	r1, r3, #29
 8002bfe:	d015      	beq.n	8002c2c <__aeabi_d2f+0xe4>
 8002c00:	210f      	movs	r1, #15
 8002c02:	2400      	movs	r4, #0
 8002c04:	4019      	ands	r1, r3
 8002c06:	2904      	cmp	r1, #4
 8002c08:	d117      	bne.n	8002c3a <__aeabi_d2f+0xf2>
 8002c0a:	019b      	lsls	r3, r3, #6
 8002c0c:	0a5b      	lsrs	r3, r3, #9
 8002c0e:	b2e0      	uxtb	r0, r4
 8002c10:	e7b0      	b.n	8002b74 <__aeabi_d2f+0x2c>
 8002c12:	4c0e      	ldr	r4, [pc, #56]	@ (8002c4c <__aeabi_d2f+0x104>)
 8002c14:	191c      	adds	r4, r3, r4
 8002c16:	002b      	movs	r3, r5
 8002c18:	40a5      	lsls	r5, r4
 8002c1a:	40c3      	lsrs	r3, r0
 8002c1c:	40a1      	lsls	r1, r4
 8002c1e:	1e68      	subs	r0, r5, #1
 8002c20:	4185      	sbcs	r5, r0
 8002c22:	4329      	orrs	r1, r5
 8002c24:	430b      	orrs	r3, r1
 8002c26:	2400      	movs	r4, #0
 8002c28:	0759      	lsls	r1, r3, #29
 8002c2a:	d1c1      	bne.n	8002bb0 <__aeabi_d2f+0x68>
 8002c2c:	019b      	lsls	r3, r3, #6
 8002c2e:	2000      	movs	r0, #0
 8002c30:	0a5b      	lsrs	r3, r3, #9
 8002c32:	e79f      	b.n	8002b74 <__aeabi_d2f+0x2c>
 8002c34:	08db      	lsrs	r3, r3, #3
 8002c36:	b2e0      	uxtb	r0, r4
 8002c38:	e79c      	b.n	8002b74 <__aeabi_d2f+0x2c>
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	e7e5      	b.n	8002c0a <__aeabi_d2f+0xc2>
 8002c3e:	46c0      	nop			@ (mov r8, r8)
 8002c40:	000007fe 	.word	0x000007fe
 8002c44:	fffffc80 	.word	0xfffffc80
 8002c48:	fffffca2 	.word	0xfffffca2
 8002c4c:	fffffc82 	.word	0xfffffc82

08002c50 <__clzsi2>:
 8002c50:	211c      	movs	r1, #28
 8002c52:	2301      	movs	r3, #1
 8002c54:	041b      	lsls	r3, r3, #16
 8002c56:	4298      	cmp	r0, r3
 8002c58:	d301      	bcc.n	8002c5e <__clzsi2+0xe>
 8002c5a:	0c00      	lsrs	r0, r0, #16
 8002c5c:	3910      	subs	r1, #16
 8002c5e:	0a1b      	lsrs	r3, r3, #8
 8002c60:	4298      	cmp	r0, r3
 8002c62:	d301      	bcc.n	8002c68 <__clzsi2+0x18>
 8002c64:	0a00      	lsrs	r0, r0, #8
 8002c66:	3908      	subs	r1, #8
 8002c68:	091b      	lsrs	r3, r3, #4
 8002c6a:	4298      	cmp	r0, r3
 8002c6c:	d301      	bcc.n	8002c72 <__clzsi2+0x22>
 8002c6e:	0900      	lsrs	r0, r0, #4
 8002c70:	3904      	subs	r1, #4
 8002c72:	a202      	add	r2, pc, #8	@ (adr r2, 8002c7c <__clzsi2+0x2c>)
 8002c74:	5c10      	ldrb	r0, [r2, r0]
 8002c76:	1840      	adds	r0, r0, r1
 8002c78:	4770      	bx	lr
 8002c7a:	46c0      	nop			@ (mov r8, r8)
 8002c7c:	02020304 	.word	0x02020304
 8002c80:	01010101 	.word	0x01010101
	...

08002c8c <__clzdi2>:
 8002c8c:	b510      	push	{r4, lr}
 8002c8e:	2900      	cmp	r1, #0
 8002c90:	d103      	bne.n	8002c9a <__clzdi2+0xe>
 8002c92:	f7ff ffdd 	bl	8002c50 <__clzsi2>
 8002c96:	3020      	adds	r0, #32
 8002c98:	e002      	b.n	8002ca0 <__clzdi2+0x14>
 8002c9a:	0008      	movs	r0, r1
 8002c9c:	f7ff ffd8 	bl	8002c50 <__clzsi2>
 8002ca0:	bd10      	pop	{r4, pc}
 8002ca2:	46c0      	nop			@ (mov r8, r8)

08002ca4 <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 8002ca4:	b40f      	push	{r0, r1, r2, r3}
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8002cac:	2314      	movs	r3, #20
 8002cae:	18fb      	adds	r3, r7, r3
 8002cb0:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	2180      	movs	r1, #128	@ 0x80
 8002cb8:	0049      	lsls	r1, r1, #1
 8002cba:	480c      	ldr	r0, [pc, #48]	@ (8002cec <myprintf+0x48>)
 8002cbc:	f008 fb78 	bl	800b3b0 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8002cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8002cec <myprintf+0x48>)
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	f7fd fa20 	bl	8000108 <strlen>
 8002cc8:	0003      	movs	r3, r0
 8002cca:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	425b      	negs	r3, r3
 8002cd4:	4905      	ldr	r1, [pc, #20]	@ (8002cec <myprintf+0x48>)
 8002cd6:	4806      	ldr	r0, [pc, #24]	@ (8002cf0 <myprintf+0x4c>)
 8002cd8:	f004 f9aa 	bl	8007030 <HAL_UART_Transmit>

}
 8002cdc:	46c0      	nop			@ (mov r8, r8)
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	b002      	add	sp, #8
 8002ce2:	bc80      	pop	{r7}
 8002ce4:	bc08      	pop	{r3}
 8002ce6:	b004      	add	sp, #16
 8002ce8:	4718      	bx	r3
 8002cea:	46c0      	nop			@ (mov r8, r8)
 8002cec:	200002cc 	.word	0x200002cc
 8002cf0:	2000013c 	.word	0x2000013c

08002cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cf6:	4cbf      	ldr	r4, [pc, #764]	@ (8002ff4 <main+0x300>)
 8002cf8:	44a5      	add	sp, r4
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cfc:	f001 fa30 	bl	8004160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d00:	f000 f9ae 	bl	8003060 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d04:	f000 fac2 	bl	800328c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002d08:	f000 fa90 	bl	800322c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8002d0c:	f000 fa56 	bl	80031bc <MX_SPI2_Init>
  MX_FATFS_Init();
 8002d10:	f004 fef6 	bl	8007b00 <MX_FATFS_Init>
  MX_I2C1_Init();
 8002d14:	f000 fa12 	bl	800313c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  FATFS FatFs; 	//Fatfs handle
  FIL fil; 		//File handle
  FRESULT fres; //Result after operations

  HAL_Delay(1000);
 8002d18:	23fa      	movs	r3, #250	@ 0xfa
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f001 fa5b 	bl	80041d8 <HAL_Delay>

	//Open the file system
  	f_mount(NULL, "", 0);
 8002d22:	4bb5      	ldr	r3, [pc, #724]	@ (8002ff8 <main+0x304>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	0019      	movs	r1, r3
 8002d28:	2000      	movs	r0, #0
 8002d2a:	f007 fb11 	bl	800a350 <f_mount>
  	HAL_Delay(10000);
 8002d2e:	4bb3      	ldr	r3, [pc, #716]	@ (8002ffc <main+0x308>)
 8002d30:	0018      	movs	r0, r3
 8002d32:	f001 fa51 	bl	80041d8 <HAL_Delay>
	fres = f_mount(&FatFs, "", 1); //1=mount now
 8002d36:	4db2      	ldr	r5, [pc, #712]	@ (8003000 <main+0x30c>)
 8002d38:	197c      	adds	r4, r7, r5
 8002d3a:	49af      	ldr	r1, [pc, #700]	@ (8002ff8 <main+0x304>)
 8002d3c:	23b3      	movs	r3, #179	@ 0xb3
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	18fb      	adds	r3, r7, r3
 8002d42:	2201      	movs	r2, #1
 8002d44:	0018      	movs	r0, r3
 8002d46:	f007 fb03 	bl	800a350 <f_mount>
 8002d4a:	0003      	movs	r3, r0
 8002d4c:	7023      	strb	r3, [r4, #0]
	if (fres != FR_OK) {
 8002d4e:	197b      	adds	r3, r7, r5
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d008      	beq.n	8002d68 <main+0x74>
	myprintf("f_mount error (%i)\r\n", fres);
 8002d56:	197b      	adds	r3, r7, r5
 8002d58:	781a      	ldrb	r2, [r3, #0]
 8002d5a:	4baa      	ldr	r3, [pc, #680]	@ (8003004 <main+0x310>)
 8002d5c:	0011      	movs	r1, r2
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f7ff ffa0 	bl	8002ca4 <myprintf>
	while(1);
 8002d64:	46c0      	nop			@ (mov r8, r8)
 8002d66:	e7fd      	b.n	8002d64 <main+0x70>
    //Let's get some statistics from the SD card
    DWORD free_clusters, free_sectors, total_sectors;

    FATFS* getFreeFs;

    fres = f_getfree("", &free_clusters, &getFreeFs);
 8002d68:	4da5      	ldr	r5, [pc, #660]	@ (8003000 <main+0x30c>)
 8002d6a:	197c      	adds	r4, r7, r5
 8002d6c:	2394      	movs	r3, #148	@ 0x94
 8002d6e:	18fa      	adds	r2, r7, r3
 8002d70:	2398      	movs	r3, #152	@ 0x98
 8002d72:	18f9      	adds	r1, r7, r3
 8002d74:	4ba0      	ldr	r3, [pc, #640]	@ (8002ff8 <main+0x304>)
 8002d76:	0018      	movs	r0, r3
 8002d78:	f008 f8a2 	bl	800aec0 <f_getfree>
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	7023      	strb	r3, [r4, #0]
    if (fres != FR_OK) {
 8002d80:	197b      	adds	r3, r7, r5
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d008      	beq.n	8002d9a <main+0xa6>
  	myprintf("f_getfree error (%i)\r\n", fres);
 8002d88:	197b      	adds	r3, r7, r5
 8002d8a:	781a      	ldrb	r2, [r3, #0]
 8002d8c:	4b9e      	ldr	r3, [pc, #632]	@ (8003008 <main+0x314>)
 8002d8e:	0011      	movs	r1, r2
 8002d90:	0018      	movs	r0, r3
 8002d92:	f7ff ff87 	bl	8002ca4 <myprintf>
  	while(1);
 8002d96:	46c0      	nop			@ (mov r8, r8)
 8002d98:	e7fd      	b.n	8002d96 <main+0xa2>
    }

    //Formula comes from ChaN's documentation
    total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8002d9a:	2194      	movs	r1, #148	@ 0x94
 8002d9c:	187b      	adds	r3, r7, r1
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	3b02      	subs	r3, #2
 8002da4:	187a      	adds	r2, r7, r1
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	8952      	ldrh	r2, [r2, #10]
 8002daa:	4353      	muls	r3, r2
 8002dac:	20a2      	movs	r0, #162	@ 0xa2
 8002dae:	00c0      	lsls	r0, r0, #3
 8002db0:	183a      	adds	r2, r7, r0
 8002db2:	6013      	str	r3, [r2, #0]
    free_sectors = free_clusters * getFreeFs->csize;
 8002db4:	187b      	adds	r3, r7, r1
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	895b      	ldrh	r3, [r3, #10]
 8002dba:	001a      	movs	r2, r3
 8002dbc:	2398      	movs	r3, #152	@ 0x98
 8002dbe:	18fb      	adds	r3, r7, r3
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4353      	muls	r3, r2
 8002dc4:	4a91      	ldr	r2, [pc, #580]	@ (800300c <main+0x318>)
 8002dc6:	18b9      	adds	r1, r7, r2
 8002dc8:	600b      	str	r3, [r1, #0]

    myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 8002dca:	183b      	adds	r3, r7, r0
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	0859      	lsrs	r1, r3, #1
 8002dd0:	18bb      	adds	r3, r7, r2
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	085a      	lsrs	r2, r3, #1
 8002dd6:	4b8e      	ldr	r3, [pc, #568]	@ (8003010 <main+0x31c>)
 8002dd8:	0018      	movs	r0, r3
 8002dda:	f7ff ff63 	bl	8002ca4 <myprintf>

    //Now let's try to open file "test.txt"
    fres = f_open(&fil, "test.txt", FA_READ);
 8002dde:	4d88      	ldr	r5, [pc, #544]	@ (8003000 <main+0x30c>)
 8002de0:	197c      	adds	r4, r7, r5
 8002de2:	498c      	ldr	r1, [pc, #560]	@ (8003014 <main+0x320>)
 8002de4:	239c      	movs	r3, #156	@ 0x9c
 8002de6:	18fb      	adds	r3, r7, r3
 8002de8:	2201      	movs	r2, #1
 8002dea:	0018      	movs	r0, r3
 8002dec:	f007 fafc 	bl	800a3e8 <f_open>
 8002df0:	0003      	movs	r3, r0
 8002df2:	7023      	strb	r3, [r4, #0]
    if (fres != FR_OK) {
 8002df4:	197b      	adds	r3, r7, r5
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <main+0x114>
  	myprintf("f_open error (%i)\r\n");
 8002dfc:	4b86      	ldr	r3, [pc, #536]	@ (8003018 <main+0x324>)
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f7ff ff50 	bl	8002ca4 <myprintf>
  	while(1);
 8002e04:	46c0      	nop			@ (mov r8, r8)
 8002e06:	e7fd      	b.n	8002e04 <main+0x110>
    }
    myprintf("I was able to open 'hello.txt' for reading!\r\n");
 8002e08:	4b84      	ldr	r3, [pc, #528]	@ (800301c <main+0x328>)
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f7ff ff4a 	bl	8002ca4 <myprintf>
    //Read 30 bytes from "test.txt" on the SD card
    BYTE readBuf[30];

    //We can either use f_read OR f_gets to get data out of files
    //f_gets is a wrapper on f_read that does some string formatting for us
    TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 8002e10:	239c      	movs	r3, #156	@ 0x9c
 8002e12:	18fa      	adds	r2, r7, r3
 8002e14:	2474      	movs	r4, #116	@ 0x74
 8002e16:	193b      	adds	r3, r7, r4
 8002e18:	211e      	movs	r1, #30
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	f008 f90d 	bl	800b03a <f_gets>
 8002e20:	0003      	movs	r3, r0
 8002e22:	22a1      	movs	r2, #161	@ 0xa1
 8002e24:	00d2      	lsls	r2, r2, #3
 8002e26:	18b9      	adds	r1, r7, r2
 8002e28:	600b      	str	r3, [r1, #0]
    if(rres != 0) {
 8002e2a:	18bb      	adds	r3, r7, r2
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d006      	beq.n	8002e40 <main+0x14c>
  	myprintf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 8002e32:	193a      	adds	r2, r7, r4
 8002e34:	4b7a      	ldr	r3, [pc, #488]	@ (8003020 <main+0x32c>)
 8002e36:	0011      	movs	r1, r2
 8002e38:	0018      	movs	r0, r3
 8002e3a:	f7ff ff33 	bl	8002ca4 <myprintf>
 8002e3e:	e007      	b.n	8002e50 <main+0x15c>
    } else {
  	myprintf("f_gets error (%i)\r\n", fres);
 8002e40:	4b6f      	ldr	r3, [pc, #444]	@ (8003000 <main+0x30c>)
 8002e42:	18fb      	adds	r3, r7, r3
 8002e44:	781a      	ldrb	r2, [r3, #0]
 8002e46:	4b77      	ldr	r3, [pc, #476]	@ (8003024 <main+0x330>)
 8002e48:	0011      	movs	r1, r2
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f7ff ff2a 	bl	8002ca4 <myprintf>
    }

    //Be a tidy kiwi - don't forget to close your file!
    f_close(&fil);
 8002e50:	259c      	movs	r5, #156	@ 0x9c
 8002e52:	197b      	adds	r3, r7, r5
 8002e54:	0018      	movs	r0, r3
 8002e56:	f007 ffff 	bl	800ae58 <f_close>

    //Now let's try and write a file "write.txt"
    fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8002e5a:	4e69      	ldr	r6, [pc, #420]	@ (8003000 <main+0x30c>)
 8002e5c:	19bc      	adds	r4, r7, r6
 8002e5e:	4972      	ldr	r1, [pc, #456]	@ (8003028 <main+0x334>)
 8002e60:	197b      	adds	r3, r7, r5
 8002e62:	221a      	movs	r2, #26
 8002e64:	0018      	movs	r0, r3
 8002e66:	f007 fabf 	bl	800a3e8 <f_open>
 8002e6a:	0003      	movs	r3, r0
 8002e6c:	7023      	strb	r3, [r4, #0]
    if(fres == FR_OK) {
 8002e6e:	19bb      	adds	r3, r7, r6
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d104      	bne.n	8002e80 <main+0x18c>
  	myprintf("I was able to open 'write.txt' for writing\r\n");
 8002e76:	4b6d      	ldr	r3, [pc, #436]	@ (800302c <main+0x338>)
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f7ff ff13 	bl	8002ca4 <myprintf>
 8002e7e:	e007      	b.n	8002e90 <main+0x19c>
    } else {
  	myprintf("f_open error (%i)\r\n", fres);
 8002e80:	4b5f      	ldr	r3, [pc, #380]	@ (8003000 <main+0x30c>)
 8002e82:	18fb      	adds	r3, r7, r3
 8002e84:	781a      	ldrb	r2, [r3, #0]
 8002e86:	4b64      	ldr	r3, [pc, #400]	@ (8003018 <main+0x324>)
 8002e88:	0011      	movs	r1, r2
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	f7ff ff0a 	bl	8002ca4 <myprintf>
    }

    //Copy in a string
    strncpy((char*)readBuf, "a new file is made!", 19);
 8002e90:	2574      	movs	r5, #116	@ 0x74
 8002e92:	197b      	adds	r3, r7, r5
 8002e94:	4a66      	ldr	r2, [pc, #408]	@ (8003030 <main+0x33c>)
 8002e96:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002e98:	c313      	stmia	r3!, {r0, r1, r4}
 8002e9a:	6811      	ldr	r1, [r2, #0]
 8002e9c:	6019      	str	r1, [r3, #0]
 8002e9e:	8891      	ldrh	r1, [r2, #4]
 8002ea0:	8099      	strh	r1, [r3, #4]
 8002ea2:	7992      	ldrb	r2, [r2, #6]
 8002ea4:	719a      	strb	r2, [r3, #6]
    UINT bytesWrote;
    fres = f_write(&fil, readBuf, 19, &bytesWrote);
 8002ea6:	4e56      	ldr	r6, [pc, #344]	@ (8003000 <main+0x30c>)
 8002ea8:	19bc      	adds	r4, r7, r6
 8002eaa:	2370      	movs	r3, #112	@ 0x70
 8002eac:	18fb      	adds	r3, r7, r3
 8002eae:	1979      	adds	r1, r7, r5
 8002eb0:	229c      	movs	r2, #156	@ 0x9c
 8002eb2:	18b8      	adds	r0, r7, r2
 8002eb4:	2213      	movs	r2, #19
 8002eb6:	f007 fdcc 	bl	800aa52 <f_write>
 8002eba:	0003      	movs	r3, r0
 8002ebc:	7023      	strb	r3, [r4, #0]
    if(fres == FR_OK) {
 8002ebe:	19bb      	adds	r3, r7, r6
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d106      	bne.n	8002ed4 <main+0x1e0>
  	myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8002ec6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002ec8:	4b5a      	ldr	r3, [pc, #360]	@ (8003034 <main+0x340>)
 8002eca:	0011      	movs	r1, r2
 8002ecc:	0018      	movs	r0, r3
 8002ece:	f7ff fee9 	bl	8002ca4 <myprintf>
 8002ed2:	e003      	b.n	8002edc <main+0x1e8>
    } else {
  	myprintf("f_write error (%i)\r\n");
 8002ed4:	4b58      	ldr	r3, [pc, #352]	@ (8003038 <main+0x344>)
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f7ff fee4 	bl	8002ca4 <myprintf>
    }

    //Be a tidy kiwi - don't forget to close your file!
    f_close(&fil);
 8002edc:	239c      	movs	r3, #156	@ 0x9c
 8002ede:	18fb      	adds	r3, r7, r3
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	f007 ffb9 	bl	800ae58 <f_close>




    // Initiation Sensor
    	max30102_init(&max30102, &hi2c1);
 8002ee6:	4a55      	ldr	r2, [pc, #340]	@ (800303c <main+0x348>)
 8002ee8:	4b55      	ldr	r3, [pc, #340]	@ (8003040 <main+0x34c>)
 8002eea:	0011      	movs	r1, r2
 8002eec:	0018      	movs	r0, r3
 8002eee:	f000 fa92 	bl	8003416 <max30102_init>
    	max30102_reset(&max30102);
 8002ef2:	4b53      	ldr	r3, [pc, #332]	@ (8003040 <main+0x34c>)
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f000 fb1c 	bl	8003532 <max30102_reset>
    	max30102_clear_fifo(&max30102);
 8002efa:	4b51      	ldr	r3, [pc, #324]	@ (8003040 <main+0x34c>)
 8002efc:	0018      	movs	r0, r3
 8002efe:	f000 fcd0 	bl	80038a2 <max30102_clear_fifo>
    	max30102_set_fifo_config(&max30102, max30102_smp_ave_8, 1, 7);
 8002f02:	484f      	ldr	r0, [pc, #316]	@ (8003040 <main+0x34c>)
 8002f04:	2307      	movs	r3, #7
 8002f06:	2201      	movs	r2, #1
 8002f08:	2103      	movs	r1, #3
 8002f0a:	f000 fc83 	bl	8003814 <max30102_set_fifo_config>

    	// Sensor settings
    	max30102_set_led_pulse_width(&max30102, max30102_pw_16_bit);
 8002f0e:	4b4c      	ldr	r3, [pc, #304]	@ (8003040 <main+0x34c>)
 8002f10:	2101      	movs	r1, #1
 8002f12:	0018      	movs	r0, r3
 8002f14:	f000 fbe3 	bl	80036de <max30102_set_led_pulse_width>
    	max30102_set_adc_resolution(&max30102, max30102_adc_2048);
 8002f18:	4b49      	ldr	r3, [pc, #292]	@ (8003040 <main+0x34c>)
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	f000 fc05 	bl	800372c <max30102_set_adc_resolution>
    	max30102_set_sampling_rate(&max30102, max30102_sr_800);
 8002f22:	4b47      	ldr	r3, [pc, #284]	@ (8003040 <main+0x34c>)
 8002f24:	2104      	movs	r1, #4
 8002f26:	0018      	movs	r0, r3
 8002f28:	f000 fbb1 	bl	800368e <max30102_set_sampling_rate>
    	max30102_set_led_current_1(&max30102, 6.2);
 8002f2c:	4a45      	ldr	r2, [pc, #276]	@ (8003044 <main+0x350>)
 8002f2e:	4b44      	ldr	r3, [pc, #272]	@ (8003040 <main+0x34c>)
 8002f30:	1c11      	adds	r1, r2, #0
 8002f32:	0018      	movs	r0, r3
 8002f34:	f000 fc22 	bl	800377c <max30102_set_led_current_1>
    	max30102_set_led_current_2(&max30102, 6.2);
 8002f38:	4a42      	ldr	r2, [pc, #264]	@ (8003044 <main+0x350>)
 8002f3a:	4b41      	ldr	r3, [pc, #260]	@ (8003040 <main+0x34c>)
 8002f3c:	1c11      	adds	r1, r2, #0
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f000 fc42 	bl	80037c8 <max30102_set_led_current_2>

    	// Enter SpO2 mode
    	max30102_set_mode(&max30102, max30102_spo2);
 8002f44:	4b3e      	ldr	r3, [pc, #248]	@ (8003040 <main+0x34c>)
 8002f46:	2103      	movs	r1, #3
 8002f48:	0018      	movs	r0, r3
 8002f4a:	f000 fb75 	bl	8003638 <max30102_set_mode>
    	max30102_set_a_full(&max30102, 1);
 8002f4e:	4b3c      	ldr	r3, [pc, #240]	@ (8003040 <main+0x34c>)
 8002f50:	2101      	movs	r1, #1
 8002f52:	0018      	movs	r0, r3
 8002f54:	f000 faff 	bl	8003556 <max30102_set_a_full>

    	// Initiate 1 temperature measurement
    	max30102_set_die_temp_en(&max30102, 1);
 8002f58:	4b39      	ldr	r3, [pc, #228]	@ (8003040 <main+0x34c>)
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f000 fb45 	bl	80035ec <max30102_set_die_temp_en>
    	max30102_set_die_temp_rdy(&max30102, 1);
 8002f62:	4b37      	ldr	r3, [pc, #220]	@ (8003040 <main+0x34c>)
 8002f64:	2101      	movs	r1, #1
 8002f66:	0018      	movs	r0, r3
 8002f68:	f000 fb25 	bl	80035b6 <max30102_set_die_temp_rdy>

    	uint8_t en_reg[2] = {0};
 8002f6c:	4b36      	ldr	r3, [pc, #216]	@ (8003048 <main+0x354>)
 8002f6e:	22a3      	movs	r2, #163	@ 0xa3
 8002f70:	00d2      	lsls	r2, r2, #3
 8002f72:	189b      	adds	r3, r3, r2
 8002f74:	19db      	adds	r3, r3, r7
 8002f76:	2200      	movs	r2, #0
 8002f78:	801a      	strh	r2, [r3, #0]
    	max30102_read(&max30102, 0x00, en_reg, 1);
 8002f7a:	236c      	movs	r3, #108	@ 0x6c
 8002f7c:	18fa      	adds	r2, r7, r3
 8002f7e:	4830      	ldr	r0, [pc, #192]	@ (8003040 <main+0x34c>)
 8002f80:	2301      	movs	r3, #1
 8002f82:	2100      	movs	r1, #0
 8002f84:	f000 faa7 	bl	80034d6 <max30102_read>
    	initialize_filters_1();
 8002f88:	f000 fe7a 	bl	8003c80 <initialize_filters_1>
    	initialize_filters_2();
 8002f8c:	f000 fea2 	bl	8003cd4 <initialize_filters_2>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Max30102Samples samples = max30102_read_fifo(&max30102);
 8002f90:	4b2e      	ldr	r3, [pc, #184]	@ (800304c <main+0x358>)
 8002f92:	24a3      	movs	r4, #163	@ 0xa3
 8002f94:	00e4      	lsls	r4, r4, #3
 8002f96:	191b      	adds	r3, r3, r4
 8002f98:	19db      	adds	r3, r3, r7
 8002f9a:	4a29      	ldr	r2, [pc, #164]	@ (8003040 <main+0x34c>)
 8002f9c:	0011      	movs	r1, r2
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	f000 fc9e 	bl	80038e0 <max30102_read_fifo>
	  uint32_t latest_red_value = samples.red_sample;
 8002fa4:	4b29      	ldr	r3, [pc, #164]	@ (800304c <main+0x358>)
 8002fa6:	0022      	movs	r2, r4
 8002fa8:	189b      	adds	r3, r3, r2
 8002faa:	19db      	adds	r3, r3, r7
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	4928      	ldr	r1, [pc, #160]	@ (8003050 <main+0x35c>)
 8002fb0:	1878      	adds	r0, r7, r1
 8002fb2:	6003      	str	r3, [r0, #0]
	  uint32_t latest_ir_value = samples.ir_sample;
 8002fb4:	4b25      	ldr	r3, [pc, #148]	@ (800304c <main+0x358>)
 8002fb6:	189b      	adds	r3, r3, r2
 8002fb8:	19db      	adds	r3, r3, r7
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	22a0      	movs	r2, #160	@ 0xa0
 8002fbe:	00d2      	lsls	r2, r2, #3
 8002fc0:	18b8      	adds	r0, r7, r2
 8002fc2:	6003      	str	r3, [r0, #0]
	  char buffer1[100];
	  int len = sprintf(buffer1, "IR Sample: %d, Red Sample: %d\r\n", latest_red_value, latest_ir_value);
 8002fc4:	18bb      	adds	r3, r7, r2
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	187a      	adds	r2, r7, r1
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	4921      	ldr	r1, [pc, #132]	@ (8003054 <main+0x360>)
 8002fce:	0038      	movs	r0, r7
 8002fd0:	f008 f9a2 	bl	800b318 <siprintf>
 8002fd4:	0003      	movs	r3, r0
 8002fd6:	4a20      	ldr	r2, [pc, #128]	@ (8003058 <main+0x364>)
 8002fd8:	18b9      	adds	r1, r7, r2
 8002fda:	600b      	str	r3, [r1, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t *)buffer1, len, HAL_MAX_DELAY);
 8002fdc:	18bb      	adds	r3, r7, r2
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	425b      	negs	r3, r3
 8002fe6:	0039      	movs	r1, r7
 8002fe8:	481c      	ldr	r0, [pc, #112]	@ (800305c <main+0x368>)
 8002fea:	f004 f821 	bl	8007030 <HAL_UART_Transmit>
  {
 8002fee:	46c0      	nop			@ (mov r8, r8)
 8002ff0:	e7ce      	b.n	8002f90 <main+0x29c>
 8002ff2:	46c0      	nop			@ (mov r8, r8)
 8002ff4:	fffffae4 	.word	0xfffffae4
 8002ff8:	0800bf28 	.word	0x0800bf28
 8002ffc:	00002710 	.word	0x00002710
 8003000:	00000517 	.word	0x00000517
 8003004:	0800bf2c 	.word	0x0800bf2c
 8003008:	0800bf44 	.word	0x0800bf44
 800300c:	0000050c 	.word	0x0000050c
 8003010:	0800bf5c 	.word	0x0800bf5c
 8003014:	0800bfa4 	.word	0x0800bfa4
 8003018:	0800bfb0 	.word	0x0800bfb0
 800301c:	0800bfc4 	.word	0x0800bfc4
 8003020:	0800bff4 	.word	0x0800bff4
 8003024:	0800c020 	.word	0x0800c020
 8003028:	0800c034 	.word	0x0800c034
 800302c:	0800c040 	.word	0x0800c040
 8003030:	0800c070 	.word	0x0800c070
 8003034:	0800c084 	.word	0x0800c084
 8003038:	0800c0a8 	.word	0x0800c0a8
 800303c:	20000090 	.word	0x20000090
 8003040:	200001c4 	.word	0x200001c4
 8003044:	40c66666 	.word	0x40c66666
 8003048:	fffffb54 	.word	0xfffffb54
 800304c:	fffffb4c 	.word	0xfffffb4c
 8003050:	00000504 	.word	0x00000504
 8003054:	0800c0c0 	.word	0x0800c0c0
 8003058:	000004fc 	.word	0x000004fc
 800305c:	2000013c 	.word	0x2000013c

08003060 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003060:	b590      	push	{r4, r7, lr}
 8003062:	b09f      	sub	sp, #124	@ 0x7c
 8003064:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003066:	2440      	movs	r4, #64	@ 0x40
 8003068:	193b      	adds	r3, r7, r4
 800306a:	0018      	movs	r0, r3
 800306c:	2338      	movs	r3, #56	@ 0x38
 800306e:	001a      	movs	r2, r3
 8003070:	2100      	movs	r1, #0
 8003072:	f008 f9a9 	bl	800b3c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003076:	232c      	movs	r3, #44	@ 0x2c
 8003078:	18fb      	adds	r3, r7, r3
 800307a:	0018      	movs	r0, r3
 800307c:	2314      	movs	r3, #20
 800307e:	001a      	movs	r2, r3
 8003080:	2100      	movs	r1, #0
 8003082:	f008 f9a1 	bl	800b3c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003086:	1d3b      	adds	r3, r7, #4
 8003088:	0018      	movs	r0, r3
 800308a:	2328      	movs	r3, #40	@ 0x28
 800308c:	001a      	movs	r2, r3
 800308e:	2100      	movs	r1, #0
 8003090:	f008 f99a 	bl	800b3c8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003094:	4b27      	ldr	r3, [pc, #156]	@ (8003134 <SystemClock_Config+0xd4>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a27      	ldr	r2, [pc, #156]	@ (8003138 <SystemClock_Config+0xd8>)
 800309a:	401a      	ands	r2, r3
 800309c:	4b25      	ldr	r3, [pc, #148]	@ (8003134 <SystemClock_Config+0xd4>)
 800309e:	2180      	movs	r1, #128	@ 0x80
 80030a0:	0109      	lsls	r1, r1, #4
 80030a2:	430a      	orrs	r2, r1
 80030a4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80030a6:	0021      	movs	r1, r4
 80030a8:	187b      	adds	r3, r7, r1
 80030aa:	2210      	movs	r2, #16
 80030ac:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80030ae:	187b      	adds	r3, r7, r1
 80030b0:	2201      	movs	r2, #1
 80030b2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80030b4:	187b      	adds	r3, r7, r1
 80030b6:	2200      	movs	r2, #0
 80030b8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80030ba:	187b      	adds	r3, r7, r1
 80030bc:	22a0      	movs	r2, #160	@ 0xa0
 80030be:	0212      	lsls	r2, r2, #8
 80030c0:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80030c2:	187b      	adds	r3, r7, r1
 80030c4:	2200      	movs	r2, #0
 80030c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030c8:	187b      	adds	r3, r7, r1
 80030ca:	0018      	movs	r0, r3
 80030cc:	f002 f904 	bl	80052d8 <HAL_RCC_OscConfig>
 80030d0:	1e03      	subs	r3, r0, #0
 80030d2:	d001      	beq.n	80030d8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80030d4:	f000 f990 	bl	80033f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030d8:	212c      	movs	r1, #44	@ 0x2c
 80030da:	187b      	adds	r3, r7, r1
 80030dc:	220f      	movs	r2, #15
 80030de:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80030e0:	187b      	adds	r3, r7, r1
 80030e2:	2200      	movs	r2, #0
 80030e4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030e6:	187b      	adds	r3, r7, r1
 80030e8:	2200      	movs	r2, #0
 80030ea:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80030ec:	187b      	adds	r3, r7, r1
 80030ee:	2200      	movs	r2, #0
 80030f0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030f2:	187b      	adds	r3, r7, r1
 80030f4:	2200      	movs	r2, #0
 80030f6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80030f8:	187b      	adds	r3, r7, r1
 80030fa:	2100      	movs	r1, #0
 80030fc:	0018      	movs	r0, r3
 80030fe:	f002 fcbf 	bl	8005a80 <HAL_RCC_ClockConfig>
 8003102:	1e03      	subs	r3, r0, #0
 8003104:	d001      	beq.n	800310a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8003106:	f000 f977 	bl	80033f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800310a:	1d3b      	adds	r3, r7, #4
 800310c:	220a      	movs	r2, #10
 800310e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003110:	1d3b      	adds	r3, r7, #4
 8003112:	2200      	movs	r2, #0
 8003114:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003116:	1d3b      	adds	r3, r7, #4
 8003118:	2200      	movs	r2, #0
 800311a:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800311c:	1d3b      	adds	r3, r7, #4
 800311e:	0018      	movs	r0, r3
 8003120:	f002 ff04 	bl	8005f2c <HAL_RCCEx_PeriphCLKConfig>
 8003124:	1e03      	subs	r3, r0, #0
 8003126:	d001      	beq.n	800312c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8003128:	f000 f966 	bl	80033f8 <Error_Handler>
  }
}
 800312c:	46c0      	nop			@ (mov r8, r8)
 800312e:	46bd      	mov	sp, r7
 8003130:	b01f      	add	sp, #124	@ 0x7c
 8003132:	bd90      	pop	{r4, r7, pc}
 8003134:	40007000 	.word	0x40007000
 8003138:	ffffe7ff 	.word	0xffffe7ff

0800313c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003140:	4b1c      	ldr	r3, [pc, #112]	@ (80031b4 <MX_I2C1_Init+0x78>)
 8003142:	4a1d      	ldr	r2, [pc, #116]	@ (80031b8 <MX_I2C1_Init+0x7c>)
 8003144:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 8003146:	4b1b      	ldr	r3, [pc, #108]	@ (80031b4 <MX_I2C1_Init+0x78>)
 8003148:	22c1      	movs	r2, #193	@ 0xc1
 800314a:	00d2      	lsls	r2, r2, #3
 800314c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800314e:	4b19      	ldr	r3, [pc, #100]	@ (80031b4 <MX_I2C1_Init+0x78>)
 8003150:	2200      	movs	r2, #0
 8003152:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003154:	4b17      	ldr	r3, [pc, #92]	@ (80031b4 <MX_I2C1_Init+0x78>)
 8003156:	2201      	movs	r2, #1
 8003158:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800315a:	4b16      	ldr	r3, [pc, #88]	@ (80031b4 <MX_I2C1_Init+0x78>)
 800315c:	2200      	movs	r2, #0
 800315e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003160:	4b14      	ldr	r3, [pc, #80]	@ (80031b4 <MX_I2C1_Init+0x78>)
 8003162:	2200      	movs	r2, #0
 8003164:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003166:	4b13      	ldr	r3, [pc, #76]	@ (80031b4 <MX_I2C1_Init+0x78>)
 8003168:	2200      	movs	r2, #0
 800316a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800316c:	4b11      	ldr	r3, [pc, #68]	@ (80031b4 <MX_I2C1_Init+0x78>)
 800316e:	2200      	movs	r2, #0
 8003170:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003172:	4b10      	ldr	r3, [pc, #64]	@ (80031b4 <MX_I2C1_Init+0x78>)
 8003174:	2200      	movs	r2, #0
 8003176:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003178:	4b0e      	ldr	r3, [pc, #56]	@ (80031b4 <MX_I2C1_Init+0x78>)
 800317a:	0018      	movs	r0, r3
 800317c:	f001 fac0 	bl	8004700 <HAL_I2C_Init>
 8003180:	1e03      	subs	r3, r0, #0
 8003182:	d001      	beq.n	8003188 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003184:	f000 f938 	bl	80033f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003188:	4b0a      	ldr	r3, [pc, #40]	@ (80031b4 <MX_I2C1_Init+0x78>)
 800318a:	2100      	movs	r1, #0
 800318c:	0018      	movs	r0, r3
 800318e:	f002 f80b 	bl	80051a8 <HAL_I2CEx_ConfigAnalogFilter>
 8003192:	1e03      	subs	r3, r0, #0
 8003194:	d001      	beq.n	800319a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8003196:	f000 f92f 	bl	80033f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800319a:	4b06      	ldr	r3, [pc, #24]	@ (80031b4 <MX_I2C1_Init+0x78>)
 800319c:	2100      	movs	r1, #0
 800319e:	0018      	movs	r0, r3
 80031a0:	f002 f84e 	bl	8005240 <HAL_I2CEx_ConfigDigitalFilter>
 80031a4:	1e03      	subs	r3, r0, #0
 80031a6:	d001      	beq.n	80031ac <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80031a8:	f000 f926 	bl	80033f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80031ac:	46c0      	nop			@ (mov r8, r8)
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	46c0      	nop			@ (mov r8, r8)
 80031b4:	20000090 	.word	0x20000090
 80031b8:	40005400 	.word	0x40005400

080031bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80031c0:	4b18      	ldr	r3, [pc, #96]	@ (8003224 <MX_SPI2_Init+0x68>)
 80031c2:	4a19      	ldr	r2, [pc, #100]	@ (8003228 <MX_SPI2_Init+0x6c>)
 80031c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80031c6:	4b17      	ldr	r3, [pc, #92]	@ (8003224 <MX_SPI2_Init+0x68>)
 80031c8:	2282      	movs	r2, #130	@ 0x82
 80031ca:	0052      	lsls	r2, r2, #1
 80031cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80031ce:	4b15      	ldr	r3, [pc, #84]	@ (8003224 <MX_SPI2_Init+0x68>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80031d4:	4b13      	ldr	r3, [pc, #76]	@ (8003224 <MX_SPI2_Init+0x68>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031da:	4b12      	ldr	r3, [pc, #72]	@ (8003224 <MX_SPI2_Init+0x68>)
 80031dc:	2200      	movs	r2, #0
 80031de:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031e0:	4b10      	ldr	r3, [pc, #64]	@ (8003224 <MX_SPI2_Init+0x68>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80031e6:	4b0f      	ldr	r3, [pc, #60]	@ (8003224 <MX_SPI2_Init+0x68>)
 80031e8:	2280      	movs	r2, #128	@ 0x80
 80031ea:	0092      	lsls	r2, r2, #2
 80031ec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80031ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003224 <MX_SPI2_Init+0x68>)
 80031f0:	2230      	movs	r2, #48	@ 0x30
 80031f2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003224 <MX_SPI2_Init+0x68>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80031fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003224 <MX_SPI2_Init+0x68>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003200:	4b08      	ldr	r3, [pc, #32]	@ (8003224 <MX_SPI2_Init+0x68>)
 8003202:	2200      	movs	r2, #0
 8003204:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003206:	4b07      	ldr	r3, [pc, #28]	@ (8003224 <MX_SPI2_Init+0x68>)
 8003208:	2207      	movs	r2, #7
 800320a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800320c:	4b05      	ldr	r3, [pc, #20]	@ (8003224 <MX_SPI2_Init+0x68>)
 800320e:	0018      	movs	r0, r3
 8003210:	f003 f82a 	bl	8006268 <HAL_SPI_Init>
 8003214:	1e03      	subs	r3, r0, #0
 8003216:	d001      	beq.n	800321c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003218:	f000 f8ee 	bl	80033f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800321c:	46c0      	nop			@ (mov r8, r8)
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	46c0      	nop			@ (mov r8, r8)
 8003224:	200000e4 	.word	0x200000e4
 8003228:	40003800 	.word	0x40003800

0800322c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003230:	4b14      	ldr	r3, [pc, #80]	@ (8003284 <MX_USART2_UART_Init+0x58>)
 8003232:	4a15      	ldr	r2, [pc, #84]	@ (8003288 <MX_USART2_UART_Init+0x5c>)
 8003234:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003236:	4b13      	ldr	r3, [pc, #76]	@ (8003284 <MX_USART2_UART_Init+0x58>)
 8003238:	22e1      	movs	r2, #225	@ 0xe1
 800323a:	0252      	lsls	r2, r2, #9
 800323c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800323e:	4b11      	ldr	r3, [pc, #68]	@ (8003284 <MX_USART2_UART_Init+0x58>)
 8003240:	2200      	movs	r2, #0
 8003242:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003244:	4b0f      	ldr	r3, [pc, #60]	@ (8003284 <MX_USART2_UART_Init+0x58>)
 8003246:	2200      	movs	r2, #0
 8003248:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800324a:	4b0e      	ldr	r3, [pc, #56]	@ (8003284 <MX_USART2_UART_Init+0x58>)
 800324c:	2200      	movs	r2, #0
 800324e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003250:	4b0c      	ldr	r3, [pc, #48]	@ (8003284 <MX_USART2_UART_Init+0x58>)
 8003252:	220c      	movs	r2, #12
 8003254:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003256:	4b0b      	ldr	r3, [pc, #44]	@ (8003284 <MX_USART2_UART_Init+0x58>)
 8003258:	2200      	movs	r2, #0
 800325a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800325c:	4b09      	ldr	r3, [pc, #36]	@ (8003284 <MX_USART2_UART_Init+0x58>)
 800325e:	2200      	movs	r2, #0
 8003260:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003262:	4b08      	ldr	r3, [pc, #32]	@ (8003284 <MX_USART2_UART_Init+0x58>)
 8003264:	2200      	movs	r2, #0
 8003266:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003268:	4b06      	ldr	r3, [pc, #24]	@ (8003284 <MX_USART2_UART_Init+0x58>)
 800326a:	2200      	movs	r2, #0
 800326c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800326e:	4b05      	ldr	r3, [pc, #20]	@ (8003284 <MX_USART2_UART_Init+0x58>)
 8003270:	0018      	movs	r0, r3
 8003272:	f003 fe89 	bl	8006f88 <HAL_UART_Init>
 8003276:	1e03      	subs	r3, r0, #0
 8003278:	d001      	beq.n	800327e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800327a:	f000 f8bd 	bl	80033f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800327e:	46c0      	nop			@ (mov r8, r8)
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	2000013c 	.word	0x2000013c
 8003288:	40004400 	.word	0x40004400

0800328c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800328c:	b590      	push	{r4, r7, lr}
 800328e:	b08b      	sub	sp, #44	@ 0x2c
 8003290:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003292:	2414      	movs	r4, #20
 8003294:	193b      	adds	r3, r7, r4
 8003296:	0018      	movs	r0, r3
 8003298:	2314      	movs	r3, #20
 800329a:	001a      	movs	r2, r3
 800329c:	2100      	movs	r1, #0
 800329e:	f008 f893 	bl	800b3c8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032a2:	4b49      	ldr	r3, [pc, #292]	@ (80033c8 <MX_GPIO_Init+0x13c>)
 80032a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032a6:	4b48      	ldr	r3, [pc, #288]	@ (80033c8 <MX_GPIO_Init+0x13c>)
 80032a8:	2104      	movs	r1, #4
 80032aa:	430a      	orrs	r2, r1
 80032ac:	62da      	str	r2, [r3, #44]	@ 0x2c
 80032ae:	4b46      	ldr	r3, [pc, #280]	@ (80033c8 <MX_GPIO_Init+0x13c>)
 80032b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b2:	2204      	movs	r2, #4
 80032b4:	4013      	ands	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]
 80032b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032ba:	4b43      	ldr	r3, [pc, #268]	@ (80033c8 <MX_GPIO_Init+0x13c>)
 80032bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032be:	4b42      	ldr	r3, [pc, #264]	@ (80033c8 <MX_GPIO_Init+0x13c>)
 80032c0:	2180      	movs	r1, #128	@ 0x80
 80032c2:	430a      	orrs	r2, r1
 80032c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80032c6:	4b40      	ldr	r3, [pc, #256]	@ (80033c8 <MX_GPIO_Init+0x13c>)
 80032c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ca:	2280      	movs	r2, #128	@ 0x80
 80032cc:	4013      	ands	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032d2:	4b3d      	ldr	r3, [pc, #244]	@ (80033c8 <MX_GPIO_Init+0x13c>)
 80032d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032d6:	4b3c      	ldr	r3, [pc, #240]	@ (80033c8 <MX_GPIO_Init+0x13c>)
 80032d8:	2101      	movs	r1, #1
 80032da:	430a      	orrs	r2, r1
 80032dc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80032de:	4b3a      	ldr	r3, [pc, #232]	@ (80033c8 <MX_GPIO_Init+0x13c>)
 80032e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e2:	2201      	movs	r2, #1
 80032e4:	4013      	ands	r3, r2
 80032e6:	60bb      	str	r3, [r7, #8]
 80032e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ea:	4b37      	ldr	r3, [pc, #220]	@ (80033c8 <MX_GPIO_Init+0x13c>)
 80032ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032ee:	4b36      	ldr	r3, [pc, #216]	@ (80033c8 <MX_GPIO_Init+0x13c>)
 80032f0:	2102      	movs	r1, #2
 80032f2:	430a      	orrs	r2, r1
 80032f4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80032f6:	4b34      	ldr	r3, [pc, #208]	@ (80033c8 <MX_GPIO_Init+0x13c>)
 80032f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fa:	2202      	movs	r2, #2
 80032fc:	4013      	ands	r3, r2
 80032fe:	607b      	str	r3, [r7, #4]
 8003300:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003302:	23a0      	movs	r3, #160	@ 0xa0
 8003304:	05db      	lsls	r3, r3, #23
 8003306:	2200      	movs	r2, #0
 8003308:	2120      	movs	r1, #32
 800330a:	0018      	movs	r0, r3
 800330c:	f001 f9b4 	bl	8004678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8003310:	4b2e      	ldr	r3, [pc, #184]	@ (80033cc <MX_GPIO_Init+0x140>)
 8003312:	2200      	movs	r2, #0
 8003314:	2102      	movs	r1, #2
 8003316:	0018      	movs	r0, r3
 8003318:	f001 f9ae 	bl	8004678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800331c:	193b      	adds	r3, r7, r4
 800331e:	2280      	movs	r2, #128	@ 0x80
 8003320:	0192      	lsls	r2, r2, #6
 8003322:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003324:	193b      	adds	r3, r7, r4
 8003326:	2284      	movs	r2, #132	@ 0x84
 8003328:	0392      	lsls	r2, r2, #14
 800332a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332c:	193b      	adds	r3, r7, r4
 800332e:	2200      	movs	r2, #0
 8003330:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003332:	193b      	adds	r3, r7, r4
 8003334:	4a26      	ldr	r2, [pc, #152]	@ (80033d0 <MX_GPIO_Init+0x144>)
 8003336:	0019      	movs	r1, r3
 8003338:	0010      	movs	r0, r2
 800333a:	f001 f81f 	bl	800437c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800333e:	0021      	movs	r1, r4
 8003340:	187b      	adds	r3, r7, r1
 8003342:	2201      	movs	r2, #1
 8003344:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003346:	187b      	adds	r3, r7, r1
 8003348:	2288      	movs	r2, #136	@ 0x88
 800334a:	0352      	lsls	r2, r2, #13
 800334c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334e:	000c      	movs	r4, r1
 8003350:	193b      	adds	r3, r7, r4
 8003352:	2200      	movs	r2, #0
 8003354:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003356:	193b      	adds	r3, r7, r4
 8003358:	4a1d      	ldr	r2, [pc, #116]	@ (80033d0 <MX_GPIO_Init+0x144>)
 800335a:	0019      	movs	r1, r3
 800335c:	0010      	movs	r0, r2
 800335e:	f001 f80d 	bl	800437c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003362:	193b      	adds	r3, r7, r4
 8003364:	2220      	movs	r2, #32
 8003366:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003368:	193b      	adds	r3, r7, r4
 800336a:	2201      	movs	r2, #1
 800336c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336e:	193b      	adds	r3, r7, r4
 8003370:	2200      	movs	r2, #0
 8003372:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003374:	193b      	adds	r3, r7, r4
 8003376:	2200      	movs	r2, #0
 8003378:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800337a:	193a      	adds	r2, r7, r4
 800337c:	23a0      	movs	r3, #160	@ 0xa0
 800337e:	05db      	lsls	r3, r3, #23
 8003380:	0011      	movs	r1, r2
 8003382:	0018      	movs	r0, r3
 8003384:	f000 fffa 	bl	800437c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8003388:	0021      	movs	r1, r4
 800338a:	187b      	adds	r3, r7, r1
 800338c:	2202      	movs	r2, #2
 800338e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003390:	187b      	adds	r3, r7, r1
 8003392:	2201      	movs	r2, #1
 8003394:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003396:	187b      	adds	r3, r7, r1
 8003398:	2200      	movs	r2, #0
 800339a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339c:	187b      	adds	r3, r7, r1
 800339e:	2200      	movs	r2, #0
 80033a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80033a2:	187b      	adds	r3, r7, r1
 80033a4:	4a09      	ldr	r2, [pc, #36]	@ (80033cc <MX_GPIO_Init+0x140>)
 80033a6:	0019      	movs	r1, r3
 80033a8:	0010      	movs	r0, r2
 80033aa:	f000 ffe7 	bl	800437c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80033ae:	2200      	movs	r2, #0
 80033b0:	2100      	movs	r1, #0
 80033b2:	2005      	movs	r0, #5
 80033b4:	f000 ffbc 	bl	8004330 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80033b8:	2005      	movs	r0, #5
 80033ba:	f000 ffce 	bl	800435a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80033be:	46c0      	nop			@ (mov r8, r8)
 80033c0:	46bd      	mov	sp, r7
 80033c2:	b00b      	add	sp, #44	@ 0x2c
 80033c4:	bd90      	pop	{r4, r7, pc}
 80033c6:	46c0      	nop			@ (mov r8, r8)
 80033c8:	40021000 	.word	0x40021000
 80033cc:	50000400 	.word	0x50000400
 80033d0:	50000800 	.word	0x50000800

080033d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a04      	ldr	r2, [pc, #16]	@ (80033f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d101      	bne.n	80033ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80033e6:	f000 fedb 	bl	80041a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80033ea:	46c0      	nop			@ (mov r8, r8)
 80033ec:	46bd      	mov	sp, r7
 80033ee:	b002      	add	sp, #8
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	46c0      	nop			@ (mov r8, r8)
 80033f4:	40001000 	.word	0x40001000

080033f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033fc:	b672      	cpsid	i
}
 80033fe:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003400:	46c0      	nop			@ (mov r8, r8)
 8003402:	e7fd      	b.n	8003400 <Error_Handler+0x8>

08003404 <max30102_plot>:
 * @note Override this in your main.c if you do not use printf() for printing.
 * @param ir_sample
 * @param red_sample
 */
__weak void max30102_plot(uint32_t ir_sample, uint32_t red_sample)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
    UNUSED(ir_sample);
    UNUSED(red_sample);
}
 800340e:	46c0      	nop			@ (mov r8, r8)
 8003410:	46bd      	mov	sp, r7
 8003412:	b002      	add	sp, #8
 8003414:	bd80      	pop	{r7, pc}

08003416 <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
 800341e:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	601a      	str	r2, [r3, #0]
    obj->_interrupt_flag = 0;
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	2382      	movs	r3, #130	@ 0x82
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	2100      	movs	r1, #0
 800342e:	54d1      	strb	r1, [r2, r3]
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3304      	adds	r3, #4
 8003434:	2280      	movs	r2, #128	@ 0x80
 8003436:	2100      	movs	r1, #0
 8003438:	0018      	movs	r0, r3
 800343a:	f007 ffc5 	bl	800b3c8 <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3384      	adds	r3, #132	@ 0x84
 8003442:	2280      	movs	r2, #128	@ 0x80
 8003444:	2100      	movs	r1, #0
 8003446:	0018      	movs	r0, r3
 8003448:	f007 ffbe 	bl	800b3c8 <memset>
}
 800344c:	46c0      	nop			@ (mov r8, r8)
 800344e:	46bd      	mov	sp, r7
 8003450:	b002      	add	sp, #8
 8003452:	bd80      	pop	{r7, pc}

08003454 <max30102_write>:
 * @param reg Register address to write to.
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */
void max30102_write(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8003454:	b5b0      	push	{r4, r5, r7, lr}
 8003456:	b088      	sub	sp, #32
 8003458:	af02      	add	r7, sp, #8
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	0008      	movs	r0, r1
 800345e:	607a      	str	r2, [r7, #4]
 8003460:	0019      	movs	r1, r3
 8003462:	250b      	movs	r5, #11
 8003464:	197b      	adds	r3, r7, r5
 8003466:	1c02      	adds	r2, r0, #0
 8003468:	701a      	strb	r2, [r3, #0]
 800346a:	2408      	movs	r4, #8
 800346c:	193b      	adds	r3, r7, r4
 800346e:	1c0a      	adds	r2, r1, #0
 8003470:	801a      	strh	r2, [r3, #0]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8003472:	193b      	adds	r3, r7, r4
 8003474:	881b      	ldrh	r3, [r3, #0]
 8003476:	3301      	adds	r3, #1
 8003478:	0018      	movs	r0, r3
 800347a:	f007 fe87 	bl	800b18c <malloc>
 800347e:	0003      	movs	r3, r0
 8003480:	617b      	str	r3, [r7, #20]
    *payload = reg;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	197a      	adds	r2, r7, r5
 8003486:	7812      	ldrb	r2, [r2, #0]
 8003488:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00b      	beq.n	80034a8 <max30102_write+0x54>
 8003490:	193b      	adds	r3, r7, r4
 8003492:	881b      	ldrh	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d007      	beq.n	80034a8 <max30102_write+0x54>
        memcpy(payload + 1, buf, buflen);
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	1c58      	adds	r0, r3, #1
 800349c:	193b      	adds	r3, r7, r4
 800349e:	881a      	ldrh	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	0019      	movs	r1, r3
 80034a4:	f007 ffd6 	bl	800b454 <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6818      	ldr	r0, [r3, #0]
 80034ac:	2308      	movs	r3, #8
 80034ae:	18fb      	adds	r3, r7, r3
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	3301      	adds	r3, #1
 80034b4:	b299      	uxth	r1, r3
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	23fa      	movs	r3, #250	@ 0xfa
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	000b      	movs	r3, r1
 80034c0:	21ae      	movs	r1, #174	@ 0xae
 80034c2:	f001 f9b3 	bl	800482c <HAL_I2C_Master_Transmit>
    free(payload);
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	0018      	movs	r0, r3
 80034ca:	f007 fe69 	bl	800b1a0 <free>
}
 80034ce:	46c0      	nop			@ (mov r8, r8)
 80034d0:	46bd      	mov	sp, r7
 80034d2:	b006      	add	sp, #24
 80034d4:	bdb0      	pop	{r4, r5, r7, pc}

080034d6 <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 80034d6:	b5b0      	push	{r4, r5, r7, lr}
 80034d8:	b088      	sub	sp, #32
 80034da:	af02      	add	r7, sp, #8
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	0008      	movs	r0, r1
 80034e0:	607a      	str	r2, [r7, #4]
 80034e2:	0019      	movs	r1, r3
 80034e4:	240b      	movs	r4, #11
 80034e6:	193b      	adds	r3, r7, r4
 80034e8:	1c02      	adds	r2, r0, #0
 80034ea:	701a      	strb	r2, [r3, #0]
 80034ec:	2508      	movs	r5, #8
 80034ee:	197b      	adds	r3, r7, r5
 80034f0:	1c0a      	adds	r2, r1, #0
 80034f2:	801a      	strh	r2, [r3, #0]
    uint8_t reg_addr = reg;
 80034f4:	2117      	movs	r1, #23
 80034f6:	187b      	adds	r3, r7, r1
 80034f8:	193a      	adds	r2, r7, r4
 80034fa:	7812      	ldrb	r2, [r2, #0]
 80034fc:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6818      	ldr	r0, [r3, #0]
 8003502:	187a      	adds	r2, r7, r1
 8003504:	23fa      	movs	r3, #250	@ 0xfa
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	2301      	movs	r3, #1
 800350c:	21ae      	movs	r1, #174	@ 0xae
 800350e:	f001 f98d 	bl	800482c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	197b      	adds	r3, r7, r5
 8003518:	8819      	ldrh	r1, [r3, #0]
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	23fa      	movs	r3, #250	@ 0xfa
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	000b      	movs	r3, r1
 8003524:	21ae      	movs	r1, #174	@ 0xae
 8003526:	f001 fa89 	bl	8004a3c <HAL_I2C_Master_Receive>
}
 800352a:	46c0      	nop			@ (mov r8, r8)
 800352c:	46bd      	mov	sp, r7
 800352e:	b006      	add	sp, #24
 8003530:	bdb0      	pop	{r4, r5, r7, pc}

08003532 <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102_t *obj)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b084      	sub	sp, #16
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 800353a:	210f      	movs	r1, #15
 800353c:	187b      	adds	r3, r7, r1
 800353e:	2240      	movs	r2, #64	@ 0x40
 8003540:	701a      	strb	r2, [r3, #0]
    max30102_write(obj, MAX30102_MODE_CONFIG, &val, 1);
 8003542:	187a      	adds	r2, r7, r1
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	2301      	movs	r3, #1
 8003548:	2109      	movs	r1, #9
 800354a:	f7ff ff83 	bl	8003454 <max30102_write>
}
 800354e:	46c0      	nop			@ (mov r8, r8)
 8003550:	46bd      	mov	sp, r7
 8003552:	b004      	add	sp, #16
 8003554:	bd80      	pop	{r7, pc}

08003556 <max30102_set_a_full>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_a_full(max30102_t *obj, uint8_t enable)
{
 8003556:	b590      	push	{r4, r7, lr}
 8003558:	b085      	sub	sp, #20
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
 800355e:	000a      	movs	r2, r1
 8003560:	1cfb      	adds	r3, r7, #3
 8003562:	701a      	strb	r2, [r3, #0]
    uint8_t reg = 0;
 8003564:	210f      	movs	r1, #15
 8003566:	187b      	adds	r3, r7, r1
 8003568:	2200      	movs	r2, #0
 800356a:	701a      	strb	r2, [r3, #0]
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 800356c:	000c      	movs	r4, r1
 800356e:	187a      	adds	r2, r7, r1
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	2301      	movs	r3, #1
 8003574:	2102      	movs	r1, #2
 8003576:	f7ff ffae 	bl	80034d6 <max30102_read>
    reg &= ~(0x01 << MAX30102_INTERRUPT_A_FULL);
 800357a:	0021      	movs	r1, r4
 800357c:	187b      	adds	r3, r7, r1
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	227f      	movs	r2, #127	@ 0x7f
 8003582:	4013      	ands	r3, r2
 8003584:	b2da      	uxtb	r2, r3
 8003586:	187b      	adds	r3, r7, r1
 8003588:	701a      	strb	r2, [r3, #0]
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_A_FULL);
 800358a:	1cfb      	adds	r3, r7, #3
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	01db      	lsls	r3, r3, #7
 8003590:	b25a      	sxtb	r2, r3
 8003592:	187b      	adds	r3, r7, r1
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	b25b      	sxtb	r3, r3
 8003598:	4313      	orrs	r3, r2
 800359a:	b25b      	sxtb	r3, r3
 800359c:	b2da      	uxtb	r2, r3
 800359e:	187b      	adds	r3, r7, r1
 80035a0:	701a      	strb	r2, [r3, #0]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 80035a2:	187a      	adds	r2, r7, r1
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	2301      	movs	r3, #1
 80035a8:	2102      	movs	r1, #2
 80035aa:	f7ff ff53 	bl	8003454 <max30102_write>
}
 80035ae:	46c0      	nop			@ (mov r8, r8)
 80035b0:	46bd      	mov	sp, r7
 80035b2:	b005      	add	sp, #20
 80035b4:	bd90      	pop	{r4, r7, pc}

080035b6 <max30102_set_die_temp_rdy>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_rdy(max30102_t *obj, uint8_t enable)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b084      	sub	sp, #16
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
 80035be:	000a      	movs	r2, r1
 80035c0:	1cfb      	adds	r3, r7, #3
 80035c2:	701a      	strb	r2, [r3, #0]
    uint8_t reg = (enable & 0x01) << MAX30102_INTERRUPT_DIE_TEMP_RDY;
 80035c4:	1cfb      	adds	r3, r7, #3
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2202      	movs	r2, #2
 80035ce:	4013      	ands	r3, r2
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	210f      	movs	r1, #15
 80035d4:	187b      	adds	r3, r7, r1
 80035d6:	701a      	strb	r2, [r3, #0]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_2, &reg, 1);
 80035d8:	187a      	adds	r2, r7, r1
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	2301      	movs	r3, #1
 80035de:	2103      	movs	r1, #3
 80035e0:	f7ff ff38 	bl	8003454 <max30102_write>
}
 80035e4:	46c0      	nop			@ (mov r8, r8)
 80035e6:	46bd      	mov	sp, r7
 80035e8:	b004      	add	sp, #16
 80035ea:	bd80      	pop	{r7, pc}

080035ec <max30102_set_die_temp_en>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_en(max30102_t *obj, uint8_t enable)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	000a      	movs	r2, r1
 80035f6:	1cfb      	adds	r3, r7, #3
 80035f8:	701a      	strb	r2, [r3, #0]
    uint8_t reg = (enable & 0x01);
 80035fa:	1cfb      	adds	r3, r7, #3
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2201      	movs	r2, #1
 8003600:	4013      	ands	r3, r2
 8003602:	b2da      	uxtb	r2, r3
 8003604:	210f      	movs	r1, #15
 8003606:	187b      	adds	r3, r7, r1
 8003608:	701a      	strb	r2, [r3, #0]
    max30102_write(obj, MAX30102_DIE_TEMP_CONFIG, &reg, 1);
 800360a:	187a      	adds	r2, r7, r1
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	2301      	movs	r3, #1
 8003610:	2121      	movs	r1, #33	@ 0x21
 8003612:	f7ff ff1f 	bl	8003454 <max30102_write>
}
 8003616:	46c0      	nop			@ (mov r8, r8)
 8003618:	46bd      	mov	sp, r7
 800361a:	b004      	add	sp, #16
 800361c:	bd80      	pop	{r7, pc}

0800361e <max30102_on_interrupt>:
 * @brief Set interrupt flag on interrupt. To be called in the corresponding external interrupt handler.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_on_interrupt(max30102_t *obj)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b082      	sub	sp, #8
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
    obj->_interrupt_flag = 1;
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	2382      	movs	r3, #130	@ 0x82
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	2101      	movs	r1, #1
 800362e:	54d1      	strb	r1, [r2, r3]
}
 8003630:	46c0      	nop			@ (mov r8, r8)
 8003632:	46bd      	mov	sp, r7
 8003634:	b002      	add	sp, #8
 8003636:	bd80      	pop	{r7, pc}

08003638 <max30102_set_mode>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param mode Measurement mode enum (max30102_mode_t).
 */
void max30102_set_mode(max30102_t *obj, max30102_mode_t mode)
{
 8003638:	b590      	push	{r4, r7, lr}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	000a      	movs	r2, r1
 8003642:	1cfb      	adds	r3, r7, #3
 8003644:	701a      	strb	r2, [r3, #0]
    uint8_t config;
    max30102_read(obj, MAX30102_MODE_CONFIG, &config, 1);
 8003646:	240f      	movs	r4, #15
 8003648:	193a      	adds	r2, r7, r4
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	2301      	movs	r3, #1
 800364e:	2109      	movs	r1, #9
 8003650:	f7ff ff41 	bl	80034d6 <max30102_read>
    config = (config & 0xf8) | mode;
 8003654:	0021      	movs	r1, r4
 8003656:	187b      	adds	r3, r7, r1
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	b25b      	sxtb	r3, r3
 800365c:	2207      	movs	r2, #7
 800365e:	4393      	bics	r3, r2
 8003660:	b25a      	sxtb	r2, r3
 8003662:	1cfb      	adds	r3, r7, #3
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	b25b      	sxtb	r3, r3
 8003668:	4313      	orrs	r3, r2
 800366a:	b25b      	sxtb	r3, r3
 800366c:	b2da      	uxtb	r2, r3
 800366e:	187b      	adds	r3, r7, r1
 8003670:	701a      	strb	r2, [r3, #0]
    max30102_write(obj, MAX30102_MODE_CONFIG, &config, 1);
 8003672:	187a      	adds	r2, r7, r1
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	2301      	movs	r3, #1
 8003678:	2109      	movs	r1, #9
 800367a:	f7ff feeb 	bl	8003454 <max30102_write>
    max30102_clear_fifo(obj);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	0018      	movs	r0, r3
 8003682:	f000 f90e 	bl	80038a2 <max30102_clear_fifo>
}
 8003686:	46c0      	nop			@ (mov r8, r8)
 8003688:	46bd      	mov	sp, r7
 800368a:	b005      	add	sp, #20
 800368c:	bd90      	pop	{r4, r7, pc}

0800368e <max30102_set_sampling_rate>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param sr Sampling rate enum (max30102_spo2_st_t).
 */
void max30102_set_sampling_rate(max30102_t *obj, max30102_sr_t sr)
{
 800368e:	b590      	push	{r4, r7, lr}
 8003690:	b085      	sub	sp, #20
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
 8003696:	000a      	movs	r2, r1
 8003698:	1cfb      	adds	r3, r7, #3
 800369a:	701a      	strb	r2, [r3, #0]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800369c:	240f      	movs	r4, #15
 800369e:	193a      	adds	r2, r7, r4
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	2301      	movs	r3, #1
 80036a4:	210a      	movs	r1, #10
 80036a6:	f7ff ff16 	bl	80034d6 <max30102_read>
    config = (config & 0x63) | (sr << MAX30102_SPO2_SR);
 80036aa:	0021      	movs	r1, r4
 80036ac:	187b      	adds	r3, r7, r1
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	b25b      	sxtb	r3, r3
 80036b2:	2263      	movs	r2, #99	@ 0x63
 80036b4:	4013      	ands	r3, r2
 80036b6:	b25a      	sxtb	r2, r3
 80036b8:	1cfb      	adds	r3, r7, #3
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	b25b      	sxtb	r3, r3
 80036c0:	4313      	orrs	r3, r2
 80036c2:	b25b      	sxtb	r3, r3
 80036c4:	b2da      	uxtb	r2, r3
 80036c6:	187b      	adds	r3, r7, r1
 80036c8:	701a      	strb	r2, [r3, #0]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80036ca:	187a      	adds	r2, r7, r1
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	2301      	movs	r3, #1
 80036d0:	210a      	movs	r1, #10
 80036d2:	f7ff febf 	bl	8003454 <max30102_write>
}
 80036d6:	46c0      	nop			@ (mov r8, r8)
 80036d8:	46bd      	mov	sp, r7
 80036da:	b005      	add	sp, #20
 80036dc:	bd90      	pop	{r4, r7, pc}

080036de <max30102_set_led_pulse_width>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param pw Pulse width enum (max30102_led_pw_t).
 */
void max30102_set_led_pulse_width(max30102_t *obj, max30102_led_pw_t pw)
{
 80036de:	b590      	push	{r4, r7, lr}
 80036e0:	b085      	sub	sp, #20
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
 80036e6:	000a      	movs	r2, r1
 80036e8:	1cfb      	adds	r3, r7, #3
 80036ea:	701a      	strb	r2, [r3, #0]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80036ec:	240f      	movs	r4, #15
 80036ee:	193a      	adds	r2, r7, r4
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	2301      	movs	r3, #1
 80036f4:	210a      	movs	r1, #10
 80036f6:	f7ff feee 	bl	80034d6 <max30102_read>
    config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 80036fa:	0021      	movs	r1, r4
 80036fc:	187b      	adds	r3, r7, r1
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	b25b      	sxtb	r3, r3
 8003702:	227c      	movs	r2, #124	@ 0x7c
 8003704:	4013      	ands	r3, r2
 8003706:	b25a      	sxtb	r2, r3
 8003708:	1cfb      	adds	r3, r7, #3
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	b25b      	sxtb	r3, r3
 800370e:	4313      	orrs	r3, r2
 8003710:	b25b      	sxtb	r3, r3
 8003712:	b2da      	uxtb	r2, r3
 8003714:	187b      	adds	r3, r7, r1
 8003716:	701a      	strb	r2, [r3, #0]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8003718:	187a      	adds	r2, r7, r1
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	2301      	movs	r3, #1
 800371e:	210a      	movs	r1, #10
 8003720:	f7ff fe98 	bl	8003454 <max30102_write>
}
 8003724:	46c0      	nop			@ (mov r8, r8)
 8003726:	46bd      	mov	sp, r7
 8003728:	b005      	add	sp, #20
 800372a:	bd90      	pop	{r4, r7, pc}

0800372c <max30102_set_adc_resolution>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param adc ADC resolution enum (max30102_adc_t).
 */
void max30102_set_adc_resolution(max30102_t *obj, max30102_adc_t adc)
{
 800372c:	b590      	push	{r4, r7, lr}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	000a      	movs	r2, r1
 8003736:	1cfb      	adds	r3, r7, #3
 8003738:	701a      	strb	r2, [r3, #0]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800373a:	240f      	movs	r4, #15
 800373c:	193a      	adds	r2, r7, r4
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	2301      	movs	r3, #1
 8003742:	210a      	movs	r1, #10
 8003744:	f7ff fec7 	bl	80034d6 <max30102_read>
    config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 8003748:	0021      	movs	r1, r4
 800374a:	187b      	adds	r3, r7, r1
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	b25b      	sxtb	r3, r3
 8003750:	221f      	movs	r2, #31
 8003752:	4013      	ands	r3, r2
 8003754:	b25a      	sxtb	r2, r3
 8003756:	1cfb      	adds	r3, r7, #3
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	015b      	lsls	r3, r3, #5
 800375c:	b25b      	sxtb	r3, r3
 800375e:	4313      	orrs	r3, r2
 8003760:	b25b      	sxtb	r3, r3
 8003762:	b2da      	uxtb	r2, r3
 8003764:	187b      	adds	r3, r7, r1
 8003766:	701a      	strb	r2, [r3, #0]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8003768:	187a      	adds	r2, r7, r1
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	2301      	movs	r3, #1
 800376e:	210a      	movs	r1, #10
 8003770:	f7ff fe70 	bl	8003454 <max30102_write>
}
 8003774:	46c0      	nop			@ (mov r8, r8)
 8003776:	46bd      	mov	sp, r7
 8003778:	b005      	add	sp, #20
 800377a:	bd90      	pop	{r4, r7, pc}

0800377c <max30102_set_led_current_1>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_1(max30102_t *obj, float ma)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
    uint8_t pa = ma / 0.2;
 8003786:	6838      	ldr	r0, [r7, #0]
 8003788:	f7ff f996 	bl	8002ab8 <__aeabi_f2d>
 800378c:	4a0c      	ldr	r2, [pc, #48]	@ (80037c0 <max30102_set_led_current_1+0x44>)
 800378e:	4b0d      	ldr	r3, [pc, #52]	@ (80037c4 <max30102_set_led_current_1+0x48>)
 8003790:	f7fd fe80 	bl	8001494 <__aeabi_ddiv>
 8003794:	0002      	movs	r2, r0
 8003796:	000b      	movs	r3, r1
 8003798:	0010      	movs	r0, r2
 800379a:	0019      	movs	r1, r3
 800379c:	f7fc fdde 	bl	800035c <__aeabi_d2uiz>
 80037a0:	0003      	movs	r3, r0
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	210f      	movs	r1, #15
 80037a6:	187b      	adds	r3, r7, r1
 80037a8:	701a      	strb	r2, [r3, #0]
    max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
 80037aa:	187a      	adds	r2, r7, r1
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	2301      	movs	r3, #1
 80037b0:	210c      	movs	r1, #12
 80037b2:	f7ff fe4f 	bl	8003454 <max30102_write>
}
 80037b6:	46c0      	nop			@ (mov r8, r8)
 80037b8:	46bd      	mov	sp, r7
 80037ba:	b004      	add	sp, #16
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	46c0      	nop			@ (mov r8, r8)
 80037c0:	9999999a 	.word	0x9999999a
 80037c4:	3fc99999 	.word	0x3fc99999

080037c8 <max30102_set_led_current_2>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_2(max30102_t *obj, float ma)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
    uint8_t pa = ma / 0.2;
 80037d2:	6838      	ldr	r0, [r7, #0]
 80037d4:	f7ff f970 	bl	8002ab8 <__aeabi_f2d>
 80037d8:	4a0c      	ldr	r2, [pc, #48]	@ (800380c <max30102_set_led_current_2+0x44>)
 80037da:	4b0d      	ldr	r3, [pc, #52]	@ (8003810 <max30102_set_led_current_2+0x48>)
 80037dc:	f7fd fe5a 	bl	8001494 <__aeabi_ddiv>
 80037e0:	0002      	movs	r2, r0
 80037e2:	000b      	movs	r3, r1
 80037e4:	0010      	movs	r0, r2
 80037e6:	0019      	movs	r1, r3
 80037e8:	f7fc fdb8 	bl	800035c <__aeabi_d2uiz>
 80037ec:	0003      	movs	r3, r0
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	210f      	movs	r1, #15
 80037f2:	187b      	adds	r3, r7, r1
 80037f4:	701a      	strb	r2, [r3, #0]
    max30102_write(obj, MAX30102_LED_RED_PA2, &pa, 1);
 80037f6:	187a      	adds	r2, r7, r1
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	2301      	movs	r3, #1
 80037fc:	210d      	movs	r1, #13
 80037fe:	f7ff fe29 	bl	8003454 <max30102_write>
}
 8003802:	46c0      	nop			@ (mov r8, r8)
 8003804:	46bd      	mov	sp, r7
 8003806:	b004      	add	sp, #16
 8003808:	bd80      	pop	{r7, pc}
 800380a:	46c0      	nop			@ (mov r8, r8)
 800380c:	9999999a 	.word	0x9999999a
 8003810:	3fc99999 	.word	0x3fc99999

08003814 <max30102_set_fifo_config>:
 * @param smp_ave
 * @param roll_over_en Roll over enabled(1) or disabled(0).
 * @param fifo_a_full Number of empty samples when A_FULL interrupt issued (0 < fifo_a_full < 15).
 */
void max30102_set_fifo_config(max30102_t *obj, max30102_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
 8003814:	b590      	push	{r4, r7, lr}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	000c      	movs	r4, r1
 800381e:	0010      	movs	r0, r2
 8003820:	0019      	movs	r1, r3
 8003822:	1cfb      	adds	r3, r7, #3
 8003824:	1c22      	adds	r2, r4, #0
 8003826:	701a      	strb	r2, [r3, #0]
 8003828:	1cbb      	adds	r3, r7, #2
 800382a:	1c02      	adds	r2, r0, #0
 800382c:	701a      	strb	r2, [r3, #0]
 800382e:	1c7b      	adds	r3, r7, #1
 8003830:	1c0a      	adds	r2, r1, #0
 8003832:	701a      	strb	r2, [r3, #0]
    uint8_t config = 0x00;
 8003834:	210f      	movs	r1, #15
 8003836:	187b      	adds	r3, r7, r1
 8003838:	2200      	movs	r2, #0
 800383a:	701a      	strb	r2, [r3, #0]
    config |= smp_ave << MAX30102_FIFO_CONFIG_SMP_AVE;
 800383c:	1cfb      	adds	r3, r7, #3
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	015b      	lsls	r3, r3, #5
 8003842:	b25a      	sxtb	r2, r3
 8003844:	187b      	adds	r3, r7, r1
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	b25b      	sxtb	r3, r3
 800384a:	4313      	orrs	r3, r2
 800384c:	b25b      	sxtb	r3, r3
 800384e:	b2da      	uxtb	r2, r3
 8003850:	187b      	adds	r3, r7, r1
 8003852:	701a      	strb	r2, [r3, #0]
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 8003854:	1cbb      	adds	r3, r7, #2
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	b25b      	sxtb	r3, r3
 800385c:	2210      	movs	r2, #16
 800385e:	4013      	ands	r3, r2
 8003860:	b25a      	sxtb	r2, r3
 8003862:	187b      	adds	r3, r7, r1
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	b25b      	sxtb	r3, r3
 8003868:	4313      	orrs	r3, r2
 800386a:	b25b      	sxtb	r3, r3
 800386c:	b2da      	uxtb	r2, r3
 800386e:	187b      	adds	r3, r7, r1
 8003870:	701a      	strb	r2, [r3, #0]
    config |= ((fifo_a_full & 0x0f) << MAX30102_FIFO_CONFIG_FIFO_A_FULL);
 8003872:	1c7b      	adds	r3, r7, #1
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	b25b      	sxtb	r3, r3
 8003878:	220f      	movs	r2, #15
 800387a:	4013      	ands	r3, r2
 800387c:	b25a      	sxtb	r2, r3
 800387e:	187b      	adds	r3, r7, r1
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	b25b      	sxtb	r3, r3
 8003884:	4313      	orrs	r3, r2
 8003886:	b25b      	sxtb	r3, r3
 8003888:	b2da      	uxtb	r2, r3
 800388a:	187b      	adds	r3, r7, r1
 800388c:	701a      	strb	r2, [r3, #0]
    max30102_write(obj, MAX30102_FIFO_CONFIG, &config, 1);
 800388e:	187a      	adds	r2, r7, r1
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	2301      	movs	r3, #1
 8003894:	2108      	movs	r1, #8
 8003896:	f7ff fddd 	bl	8003454 <max30102_write>
}
 800389a:	46c0      	nop			@ (mov r8, r8)
 800389c:	46bd      	mov	sp, r7
 800389e:	b005      	add	sp, #20
 80038a0:	bd90      	pop	{r4, r7, pc}

080038a2 <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102_t *obj)
{
 80038a2:	b590      	push	{r4, r7, lr}
 80038a4:	b085      	sub	sp, #20
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 80038aa:	210f      	movs	r1, #15
 80038ac:	187b      	adds	r3, r7, r1
 80038ae:	2200      	movs	r2, #0
 80038b0:	701a      	strb	r2, [r3, #0]
    max30102_write(obj, MAX30102_FIFO_WR_PTR, &val, 3);
 80038b2:	000c      	movs	r4, r1
 80038b4:	193a      	adds	r2, r7, r4
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	2303      	movs	r3, #3
 80038ba:	2104      	movs	r1, #4
 80038bc:	f7ff fdca 	bl	8003454 <max30102_write>
    max30102_write(obj, MAX30102_FIFO_RD_PTR, &val, 3);
 80038c0:	193a      	adds	r2, r7, r4
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	2303      	movs	r3, #3
 80038c6:	2106      	movs	r1, #6
 80038c8:	f7ff fdc4 	bl	8003454 <max30102_write>
    max30102_write(obj, MAX30102_OVF_COUNTER, &val, 3);
 80038cc:	193a      	adds	r2, r7, r4
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	2303      	movs	r3, #3
 80038d2:	2105      	movs	r1, #5
 80038d4:	f7ff fdbe 	bl	8003454 <max30102_write>
}
 80038d8:	46c0      	nop			@ (mov r8, r8)
 80038da:	46bd      	mov	sp, r7
 80038dc:	b005      	add	sp, #20
 80038de:	bd90      	pop	{r4, r7, pc}

080038e0 <max30102_read_fifo>:
 * @param obj Pointer to max30102_t object instance.
 */


Max30102Samples max30102_read_fifo(max30102_t *obj)
{
 80038e0:	b5b0      	push	{r4, r5, r7, lr}
 80038e2:	b08e      	sub	sp, #56	@ 0x38
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr = 0, rd_ptr = 0;
 80038ea:	211f      	movs	r1, #31
 80038ec:	187b      	adds	r3, r7, r1
 80038ee:	2200      	movs	r2, #0
 80038f0:	701a      	strb	r2, [r3, #0]
 80038f2:	251e      	movs	r5, #30
 80038f4:	197b      	adds	r3, r7, r5
 80038f6:	2200      	movs	r2, #0
 80038f8:	701a      	strb	r2, [r3, #0]
    max30102_read(obj, MAX30102_FIFO_WR_PTR, &wr_ptr, 1);
 80038fa:	000c      	movs	r4, r1
 80038fc:	187a      	adds	r2, r7, r1
 80038fe:	6838      	ldr	r0, [r7, #0]
 8003900:	2301      	movs	r3, #1
 8003902:	2104      	movs	r1, #4
 8003904:	f7ff fde7 	bl	80034d6 <max30102_read>
    max30102_read(obj, MAX30102_FIFO_RD_PTR, &rd_ptr, 1);
 8003908:	197a      	adds	r2, r7, r5
 800390a:	6838      	ldr	r0, [r7, #0]
 800390c:	2301      	movs	r3, #1
 800390e:	2106      	movs	r1, #6
 8003910:	f7ff fde1 	bl	80034d6 <max30102_read>
//    printf("Before Reading: Write Ptr: %u, Read Ptr: %u\n", wr_ptr, rd_ptr);

    int8_t num_samples;


    num_samples = (int8_t)wr_ptr - (int8_t)rd_ptr;
 8003914:	193b      	adds	r3, r7, r4
 8003916:	781a      	ldrb	r2, [r3, #0]
 8003918:	197b      	adds	r3, r7, r5
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	b2da      	uxtb	r2, r3
 8003920:	2137      	movs	r1, #55	@ 0x37
 8003922:	187b      	adds	r3, r7, r1
 8003924:	701a      	strb	r2, [r3, #0]

    if (num_samples < 1)
 8003926:	187b      	adds	r3, r7, r1
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	b25b      	sxtb	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	dc05      	bgt.n	800393c <max30102_read_fifo+0x5c>
    {
        num_samples += 32;
 8003930:	187b      	adds	r3, r7, r1
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	3320      	adds	r3, #32
 8003936:	b2da      	uxtb	r2, r3
 8003938:	187b      	adds	r3, r7, r1
 800393a:	701a      	strb	r2, [r3, #0]
    }
    uint32_t last_ir_sample = 0;
 800393c:	2300      	movs	r3, #0
 800393e:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t last_red_sample = 0;
 8003940:	2300      	movs	r3, #0
 8003942:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
    for (int8_t i = 0; i < num_samples; i++)
 8003944:	232b      	movs	r3, #43	@ 0x2b
 8003946:	18fb      	adds	r3, r7, r3
 8003948:	2200      	movs	r2, #0
 800394a:	701a      	strb	r2, [r3, #0]
 800394c:	e047      	b.n	80039de <max30102_read_fifo+0xfe>
    {
        uint8_t sample[6];
        max30102_read(obj, MAX30102_FIFO_DATA, sample, 6);
 800394e:	240c      	movs	r4, #12
 8003950:	193a      	adds	r2, r7, r4
 8003952:	6838      	ldr	r0, [r7, #0]
 8003954:	2306      	movs	r3, #6
 8003956:	2107      	movs	r1, #7
 8003958:	f7ff fdbd 	bl	80034d6 <max30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 800395c:	0021      	movs	r1, r4
 800395e:	187b      	adds	r3, r7, r1
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	041a      	lsls	r2, r3, #16
 8003964:	187b      	adds	r3, r7, r1
 8003966:	785b      	ldrb	r3, [r3, #1]
 8003968:	021b      	lsls	r3, r3, #8
 800396a:	4313      	orrs	r3, r2
 800396c:	187a      	adds	r2, r7, r1
 800396e:	7892      	ldrb	r2, [r2, #2]
 8003970:	4313      	orrs	r3, r2
 8003972:	039b      	lsls	r3, r3, #14
 8003974:	0b9b      	lsrs	r3, r3, #14
 8003976:	627b      	str	r3, [r7, #36]	@ 0x24
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 8003978:	187b      	adds	r3, r7, r1
 800397a:	78db      	ldrb	r3, [r3, #3]
 800397c:	041a      	lsls	r2, r3, #16
 800397e:	187b      	adds	r3, r7, r1
 8003980:	791b      	ldrb	r3, [r3, #4]
 8003982:	021b      	lsls	r3, r3, #8
 8003984:	4313      	orrs	r3, r2
 8003986:	187a      	adds	r2, r7, r1
 8003988:	7952      	ldrb	r2, [r2, #5]
 800398a:	4313      	orrs	r3, r2
 800398c:	039b      	lsls	r3, r3, #14
 800398e:	0b9b      	lsrs	r3, r3, #14
 8003990:	623b      	str	r3, [r7, #32]
        obj->_ir_samples[i] = ir_sample;
 8003992:	242b      	movs	r4, #43	@ 0x2b
 8003994:	193b      	adds	r3, r7, r4
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	b25b      	sxtb	r3, r3
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	18d3      	adds	r3, r2, r3
 80039a0:	3304      	adds	r3, #4
 80039a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039a4:	601a      	str	r2, [r3, #0]
        obj->_red_samples[i] = red_sample;
 80039a6:	193b      	adds	r3, r7, r4
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	b25b      	sxtb	r3, r3
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	3320      	adds	r3, #32
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	18d3      	adds	r3, r2, r3
 80039b4:	3304      	adds	r3, #4
 80039b6:	6a3a      	ldr	r2, [r7, #32]
 80039b8:	601a      	str	r2, [r3, #0]
        max30102_plot(ir_sample, red_sample);
 80039ba:	6a3a      	ldr	r2, [r7, #32]
 80039bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039be:	0011      	movs	r1, r2
 80039c0:	0018      	movs	r0, r3
 80039c2:	f7ff fd1f 	bl	8003404 <max30102_plot>
        // Store the latest sample
		last_ir_sample = ir_sample;
 80039c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c8:	633b      	str	r3, [r7, #48]	@ 0x30
		last_red_sample = red_sample;
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (int8_t i = 0; i < num_samples; i++)
 80039ce:	193b      	adds	r3, r7, r4
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	b25b      	sxtb	r3, r3
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	3301      	adds	r3, #1
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	193b      	adds	r3, r7, r4
 80039dc:	701a      	strb	r2, [r3, #0]
 80039de:	232b      	movs	r3, #43	@ 0x2b
 80039e0:	18fa      	adds	r2, r7, r3
 80039e2:	2337      	movs	r3, #55	@ 0x37
 80039e4:	18fb      	adds	r3, r7, r3
 80039e6:	7812      	ldrb	r2, [r2, #0]
 80039e8:	b252      	sxtb	r2, r2
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	b25b      	sxtb	r3, r3
 80039ee:	429a      	cmp	r2, r3
 80039f0:	dbad      	blt.n	800394e <max30102_read_fifo+0x6e>

    // Print only the most recent sample after the loop

//    printf("Most Recent Sample - IR: %lu, Red: %lu\n", last_ir_sample, last_red_sample);
    // Reset the FIFO read pointer to clear the data after reading
	uint8_t reset_value = wr_ptr;
 80039f2:	231f      	movs	r3, #31
 80039f4:	18fb      	adds	r3, r7, r3
 80039f6:	781a      	ldrb	r2, [r3, #0]
 80039f8:	211d      	movs	r1, #29
 80039fa:	187b      	adds	r3, r7, r1
 80039fc:	701a      	strb	r2, [r3, #0]
	max30102_write(obj, MAX30102_FIFO_RD_PTR, &reset_value, 1);
 80039fe:	187a      	adds	r2, r7, r1
 8003a00:	6838      	ldr	r0, [r7, #0]
 8003a02:	2301      	movs	r3, #1
 8003a04:	2106      	movs	r1, #6
 8003a06:	f7ff fd25 	bl	8003454 <max30102_write>
	// Return both the last IR and Red samples in a struct
	Max30102Samples result = { last_ir_sample, last_red_sample };
 8003a0a:	2114      	movs	r1, #20
 8003a0c:	187b      	adds	r3, r7, r1
 8003a0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	187b      	adds	r3, r7, r1
 8003a14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a16:	605a      	str	r2, [r3, #4]
	return result;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	187a      	adds	r2, r7, r1
 8003a1c:	ca03      	ldmia	r2!, {r0, r1}
 8003a1e:	c303      	stmia	r3!, {r0, r1}

}
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	46bd      	mov	sp, r7
 8003a24:	b00e      	add	sp, #56	@ 0x38
 8003a26:	bdb0      	pop	{r4, r5, r7, pc}

08003a28 <MinMaxAvgStatistic_init>:
    float sum;
    int count;
} MinMaxAvgStatistic;

// Function to initialize the statistic block
void MinMaxAvgStatistic_init(MinMaxAvgStatistic *stat) {
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
    stat->min = NAN;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a07      	ldr	r2, [pc, #28]	@ (8003a50 <MinMaxAvgStatistic_init+0x28>)
 8003a34:	601a      	str	r2, [r3, #0]
    stat->max = NAN;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a05      	ldr	r2, [pc, #20]	@ (8003a50 <MinMaxAvgStatistic_init+0x28>)
 8003a3a:	605a      	str	r2, [r3, #4]
    stat->sum = 0;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	609a      	str	r2, [r3, #8]
    stat->count = 0;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	60da      	str	r2, [r3, #12]
}
 8003a48:	46c0      	nop			@ (mov r8, r8)
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	b002      	add	sp, #8
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	7fc00000 	.word	0x7fc00000

08003a54 <HighPassFilter_init1>:

/**s
 * @brief Initialize the High Pass Filter
 * @param samples Number of samples until decay to 36.8 %
 */
void HighPassFilter_init1(HighPassFilter* filter, float samples) {
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
    filter->kX = exp(-1 / samples);
 8003a5e:	6839      	ldr	r1, [r7, #0]
 8003a60:	481d      	ldr	r0, [pc, #116]	@ (8003ad8 <HighPassFilter_init1+0x84>)
 8003a62:	f7fc feef 	bl	8000844 <__aeabi_fdiv>
 8003a66:	1c03      	adds	r3, r0, #0
 8003a68:	1c18      	adds	r0, r3, #0
 8003a6a:	f7ff f825 	bl	8002ab8 <__aeabi_f2d>
 8003a6e:	0002      	movs	r2, r0
 8003a70:	000b      	movs	r3, r1
 8003a72:	0010      	movs	r0, r2
 8003a74:	0019      	movs	r1, r3
 8003a76:	f008 f873 	bl	800bb60 <exp>
 8003a7a:	0002      	movs	r2, r0
 8003a7c:	000b      	movs	r3, r1
 8003a7e:	0010      	movs	r0, r2
 8003a80:	0019      	movs	r1, r3
 8003a82:	f7ff f861 	bl	8002b48 <__aeabi_d2f>
 8003a86:	1c02      	adds	r2, r0, #0
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	601a      	str	r2, [r3, #0]
    filter->kA0 = (1 + filter->kX) / 2;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	21fe      	movs	r1, #254	@ 0xfe
 8003a92:	0589      	lsls	r1, r1, #22
 8003a94:	1c18      	adds	r0, r3, #0
 8003a96:	f7fc fd4b 	bl	8000530 <__aeabi_fadd>
 8003a9a:	1c03      	adds	r3, r0, #0
 8003a9c:	2180      	movs	r1, #128	@ 0x80
 8003a9e:	05c9      	lsls	r1, r1, #23
 8003aa0:	1c18      	adds	r0, r3, #0
 8003aa2:	f7fc fecf 	bl	8000844 <__aeabi_fdiv>
 8003aa6:	1c03      	adds	r3, r0, #0
 8003aa8:	1c1a      	adds	r2, r3, #0
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	605a      	str	r2, [r3, #4]
    filter->kA1 = -filter->kA0;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2280      	movs	r2, #128	@ 0x80
 8003ab4:	0612      	lsls	r2, r2, #24
 8003ab6:	405a      	eors	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	609a      	str	r2, [r3, #8]
    filter->kB1 = filter->kX;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	60da      	str	r2, [r3, #12]
    filter->last_filter_value = NAN;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a05      	ldr	r2, [pc, #20]	@ (8003adc <HighPassFilter_init1+0x88>)
 8003ac8:	611a      	str	r2, [r3, #16]
    filter->last_raw_value = NAN;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a03      	ldr	r2, [pc, #12]	@ (8003adc <HighPassFilter_init1+0x88>)
 8003ace:	615a      	str	r2, [r3, #20]
}
 8003ad0:	46c0      	nop			@ (mov r8, r8)
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	b002      	add	sp, #8
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	bf800000 	.word	0xbf800000
 8003adc:	7fc00000 	.word	0x7fc00000

08003ae0 <HighPassFilter_init2>:

void HighPassFilter_init2(HighPassFilter* filter, float cutoff, float sampling_frequency){
 8003ae0:	b5b0      	push	{r4, r5, r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
    HighPassFilter_init1(filter, sampling_frequency/(cutoff*2*PI));
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7fe ffe3 	bl	8002ab8 <__aeabi_f2d>
 8003af2:	0004      	movs	r4, r0
 8003af4:	000d      	movs	r5, r1
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	1c19      	adds	r1, r3, #0
 8003afa:	1c18      	adds	r0, r3, #0
 8003afc:	f7fc fd18 	bl	8000530 <__aeabi_fadd>
 8003b00:	1c03      	adds	r3, r0, #0
 8003b02:	1c18      	adds	r0, r3, #0
 8003b04:	f7fe ffd8 	bl	8002ab8 <__aeabi_f2d>
 8003b08:	4a0c      	ldr	r2, [pc, #48]	@ (8003b3c <HighPassFilter_init2+0x5c>)
 8003b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b40 <HighPassFilter_init2+0x60>)
 8003b0c:	f7fe f906 	bl	8001d1c <__aeabi_dmul>
 8003b10:	0002      	movs	r2, r0
 8003b12:	000b      	movs	r3, r1
 8003b14:	0020      	movs	r0, r4
 8003b16:	0029      	movs	r1, r5
 8003b18:	f7fd fcbc 	bl	8001494 <__aeabi_ddiv>
 8003b1c:	0002      	movs	r2, r0
 8003b1e:	000b      	movs	r3, r1
 8003b20:	0010      	movs	r0, r2
 8003b22:	0019      	movs	r1, r3
 8003b24:	f7ff f810 	bl	8002b48 <__aeabi_d2f>
 8003b28:	1c02      	adds	r2, r0, #0
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	1c11      	adds	r1, r2, #0
 8003b2e:	0018      	movs	r0, r3
 8003b30:	f7ff ff90 	bl	8003a54 <HighPassFilter_init1>
}
 8003b34:	46c0      	nop			@ (mov r8, r8)
 8003b36:	46bd      	mov	sp, r7
 8003b38:	b004      	add	sp, #16
 8003b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8003b3c:	54442d18 	.word	0x54442d18
 8003b40:	400921fb 	.word	0x400921fb

08003b44 <LowPassFilter_init1>:

/**
 * @brief Initialize the Low Pass Filter
 * @param samples Number of samples until decay to 36.8 %
 */
void LowPassFilter_init1(LowPassFilter* filter, float samples) {
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
    filter->kX = exp(-1 / samples);
 8003b4e:	6839      	ldr	r1, [r7, #0]
 8003b50:	4815      	ldr	r0, [pc, #84]	@ (8003ba8 <LowPassFilter_init1+0x64>)
 8003b52:	f7fc fe77 	bl	8000844 <__aeabi_fdiv>
 8003b56:	1c03      	adds	r3, r0, #0
 8003b58:	1c18      	adds	r0, r3, #0
 8003b5a:	f7fe ffad 	bl	8002ab8 <__aeabi_f2d>
 8003b5e:	0002      	movs	r2, r0
 8003b60:	000b      	movs	r3, r1
 8003b62:	0010      	movs	r0, r2
 8003b64:	0019      	movs	r1, r3
 8003b66:	f007 fffb 	bl	800bb60 <exp>
 8003b6a:	0002      	movs	r2, r0
 8003b6c:	000b      	movs	r3, r1
 8003b6e:	0010      	movs	r0, r2
 8003b70:	0019      	movs	r1, r3
 8003b72:	f7fe ffe9 	bl	8002b48 <__aeabi_d2f>
 8003b76:	1c02      	adds	r2, r0, #0
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	601a      	str	r2, [r3, #0]
    filter->kA0 = 1 - filter->kX;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	1c19      	adds	r1, r3, #0
 8003b82:	20fe      	movs	r0, #254	@ 0xfe
 8003b84:	0580      	lsls	r0, r0, #22
 8003b86:	f7fc ff7d 	bl	8000a84 <__aeabi_fsub>
 8003b8a:	1c03      	adds	r3, r0, #0
 8003b8c:	1c1a      	adds	r2, r3, #0
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	605a      	str	r2, [r3, #4]
    filter->kB1 = filter->kX;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	609a      	str	r2, [r3, #8]
    filter->last_value = NAN;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a03      	ldr	r2, [pc, #12]	@ (8003bac <LowPassFilter_init1+0x68>)
 8003b9e:	60da      	str	r2, [r3, #12]
}
 8003ba0:	46c0      	nop			@ (mov r8, r8)
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	b002      	add	sp, #8
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	bf800000 	.word	0xbf800000
 8003bac:	7fc00000 	.word	0x7fc00000

08003bb0 <LowPassFilter_init2>:

void LowPassFilter_init2(LowPassFilter* filter,float cutoff, float sampling_frequency){
 8003bb0:	b5b0      	push	{r4, r5, r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
	LowPassFilter_init1(filter, sampling_frequency/(cutoff*2*PI));
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7fe ff7b 	bl	8002ab8 <__aeabi_f2d>
 8003bc2:	0004      	movs	r4, r0
 8003bc4:	000d      	movs	r5, r1
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	1c19      	adds	r1, r3, #0
 8003bca:	1c18      	adds	r0, r3, #0
 8003bcc:	f7fc fcb0 	bl	8000530 <__aeabi_fadd>
 8003bd0:	1c03      	adds	r3, r0, #0
 8003bd2:	1c18      	adds	r0, r3, #0
 8003bd4:	f7fe ff70 	bl	8002ab8 <__aeabi_f2d>
 8003bd8:	4a0c      	ldr	r2, [pc, #48]	@ (8003c0c <LowPassFilter_init2+0x5c>)
 8003bda:	4b0d      	ldr	r3, [pc, #52]	@ (8003c10 <LowPassFilter_init2+0x60>)
 8003bdc:	f7fe f89e 	bl	8001d1c <__aeabi_dmul>
 8003be0:	0002      	movs	r2, r0
 8003be2:	000b      	movs	r3, r1
 8003be4:	0020      	movs	r0, r4
 8003be6:	0029      	movs	r1, r5
 8003be8:	f7fd fc54 	bl	8001494 <__aeabi_ddiv>
 8003bec:	0002      	movs	r2, r0
 8003bee:	000b      	movs	r3, r1
 8003bf0:	0010      	movs	r0, r2
 8003bf2:	0019      	movs	r1, r3
 8003bf4:	f7fe ffa8 	bl	8002b48 <__aeabi_d2f>
 8003bf8:	1c02      	adds	r2, r0, #0
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	1c11      	adds	r1, r2, #0
 8003bfe:	0018      	movs	r0, r3
 8003c00:	f7ff ffa0 	bl	8003b44 <LowPassFilter_init1>
}
 8003c04:	46c0      	nop			@ (mov r8, r8)
 8003c06:	46bd      	mov	sp, r7
 8003c08:	b004      	add	sp, #16
 8003c0a:	bdb0      	pop	{r4, r5, r7, pc}
 8003c0c:	54442d18 	.word	0x54442d18
 8003c10:	400921fb 	.word	0x400921fb

08003c14 <Differentiator_init1>:
} Differentiator;

/**
 * @brief Initializes the differentiator
 */
void Differentiator_init1(Differentiator* diff, float sampling_frequency) {
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
    diff->kSamplingFrequency = sampling_frequency;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	601a      	str	r2, [r3, #0]
    diff->last_value = NAN;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a03      	ldr	r2, [pc, #12]	@ (8003c34 <Differentiator_init1+0x20>)
 8003c28:	605a      	str	r2, [r3, #4]
}
 8003c2a:	46c0      	nop			@ (mov r8, r8)
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	b002      	add	sp, #8
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	46c0      	nop			@ (mov r8, r8)
 8003c34:	7fc00000 	.word	0x7fc00000

08003c38 <MovingAverageFilter_init1>:
} MovingAverageFilter;

/**
 * @brief Initializes moving average filter
 */
void MovingAverageFilter_init1(MovingAverageFilter* filter, int buffer_size) {
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
    filter->index = 0;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]
    filter->count = 0;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	605a      	str	r2, [r3, #4]
    filter->buffer_size = buffer_size;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	609a      	str	r2, [r3, #8]
    filter->values = (float *)malloc(buffer_size * sizeof(float));  // Allocate memory for values
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	0018      	movs	r0, r3
 8003c5a:	f007 fa97 	bl	800b18c <malloc>
 8003c5e:	0003      	movs	r3, r0
 8003c60:	001a      	movs	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	60da      	str	r2, [r3, #12]
    memset(filter->values, 0, buffer_size * sizeof(float));  // Initialize buffer with zeros
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68d8      	ldr	r0, [r3, #12]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	001a      	movs	r2, r3
 8003c70:	2100      	movs	r1, #0
 8003c72:	f007 fba9 	bl	800b3c8 <memset>

}
 8003c76:	46c0      	nop			@ (mov r8, r8)
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	b002      	add	sp, #8
 8003c7c:	bd80      	pop	{r7, pc}
	...

08003c80 <initialize_filters_1>:
static HighPassFilter high_pass_filter;
static LowPassFilter low_pass_filter;
static Differentiator differentiator;
static MovingAverageFilter averager;
// Function to initialize the filters
void initialize_filters_1() {
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
    MovingAverageFilter_init1(&averager, kAveragingSamples);
 8003c84:	2232      	movs	r2, #50	@ 0x32
 8003c86:	4b0d      	ldr	r3, [pc, #52]	@ (8003cbc <initialize_filters_1+0x3c>)
 8003c88:	0011      	movs	r1, r2
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	f7ff ffd4 	bl	8003c38 <MovingAverageFilter_init1>
    Differentiator_init1(&differentiator, kSamplingFrequency);
 8003c90:	4a0b      	ldr	r2, [pc, #44]	@ (8003cc0 <initialize_filters_1+0x40>)
 8003c92:	4b0c      	ldr	r3, [pc, #48]	@ (8003cc4 <initialize_filters_1+0x44>)
 8003c94:	1c11      	adds	r1, r2, #0
 8003c96:	0018      	movs	r0, r3
 8003c98:	f7ff ffbc 	bl	8003c14 <Differentiator_init1>
    LowPassFilter_init2(&low_pass_filter, kLowPassCutoff, kSamplingFrequency);
 8003c9c:	490a      	ldr	r1, [pc, #40]	@ (8003cc8 <initialize_filters_1+0x48>)
 8003c9e:	4a08      	ldr	r2, [pc, #32]	@ (8003cc0 <initialize_filters_1+0x40>)
 8003ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8003ccc <initialize_filters_1+0x4c>)
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	f7ff ff84 	bl	8003bb0 <LowPassFilter_init2>
    HighPassFilter_init2(&high_pass_filter, kHighPassCutoff, kSamplingFrequency);
 8003ca8:	21fc      	movs	r1, #252	@ 0xfc
 8003caa:	0589      	lsls	r1, r1, #22
 8003cac:	4a04      	ldr	r2, [pc, #16]	@ (8003cc0 <initialize_filters_1+0x40>)
 8003cae:	4b08      	ldr	r3, [pc, #32]	@ (8003cd0 <initialize_filters_1+0x50>)
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	f7ff ff15 	bl	8003ae0 <HighPassFilter_init2>
}
 8003cb6:	46c0      	nop			@ (mov r8, r8)
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	200003fc 	.word	0x200003fc
 8003cc0:	43c80000 	.word	0x43c80000
 8003cc4:	200003f4 	.word	0x200003f4
 8003cc8:	40a00000 	.word	0x40a00000
 8003ccc:	200003e4 	.word	0x200003e4
 8003cd0:	200003cc 	.word	0x200003cc

08003cd4 <initialize_filters_2>:
// Statistic for pulse oximetry
static MinMaxAvgStatistic stat_red;
static MinMaxAvgStatistic stat_ir;


void initialize_filters_2() {
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
    MovingAverageFilter_init1(&averager_bpm, kAveragingSamples_spo2);
 8003cd8:	2205      	movs	r2, #5
 8003cda:	4b1a      	ldr	r3, [pc, #104]	@ (8003d44 <initialize_filters_2+0x70>)
 8003cdc:	0011      	movs	r1, r2
 8003cde:	0018      	movs	r0, r3
 8003ce0:	f7ff ffaa 	bl	8003c38 <MovingAverageFilter_init1>
    MovingAverageFilter_init1(&averager_r, kAveragingSamples_spo2);
 8003ce4:	2205      	movs	r2, #5
 8003ce6:	4b18      	ldr	r3, [pc, #96]	@ (8003d48 <initialize_filters_2+0x74>)
 8003ce8:	0011      	movs	r1, r2
 8003cea:	0018      	movs	r0, r3
 8003cec:	f7ff ffa4 	bl	8003c38 <MovingAverageFilter_init1>
    MovingAverageFilter_init1(&averager_spo2, kAveragingSamples_spo2);
 8003cf0:	2205      	movs	r2, #5
 8003cf2:	4b16      	ldr	r3, [pc, #88]	@ (8003d4c <initialize_filters_2+0x78>)
 8003cf4:	0011      	movs	r1, r2
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	f7ff ff9e 	bl	8003c38 <MovingAverageFilter_init1>
    Differentiator_init1(&differentiator_spo2, kSamplingFrequency_spo2);
 8003cfc:	4a14      	ldr	r2, [pc, #80]	@ (8003d50 <initialize_filters_2+0x7c>)
 8003cfe:	4b15      	ldr	r3, [pc, #84]	@ (8003d54 <initialize_filters_2+0x80>)
 8003d00:	1c11      	adds	r1, r2, #0
 8003d02:	0018      	movs	r0, r3
 8003d04:	f7ff ff86 	bl	8003c14 <Differentiator_init1>
    LowPassFilter_init2(&low_pass_filter_red, kLowPassCutoff_spo2, kSamplingFrequency_spo2);
 8003d08:	4913      	ldr	r1, [pc, #76]	@ (8003d58 <initialize_filters_2+0x84>)
 8003d0a:	4a11      	ldr	r2, [pc, #68]	@ (8003d50 <initialize_filters_2+0x7c>)
 8003d0c:	4b13      	ldr	r3, [pc, #76]	@ (8003d5c <initialize_filters_2+0x88>)
 8003d0e:	0018      	movs	r0, r3
 8003d10:	f7ff ff4e 	bl	8003bb0 <LowPassFilter_init2>
    LowPassFilter_init2(&low_pass_filter_ir, kLowPassCutoff_spo2, kSamplingFrequency_spo2);
 8003d14:	4910      	ldr	r1, [pc, #64]	@ (8003d58 <initialize_filters_2+0x84>)
 8003d16:	4a0e      	ldr	r2, [pc, #56]	@ (8003d50 <initialize_filters_2+0x7c>)
 8003d18:	4b11      	ldr	r3, [pc, #68]	@ (8003d60 <initialize_filters_2+0x8c>)
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	f7ff ff48 	bl	8003bb0 <LowPassFilter_init2>
    HighPassFilter_init2(&high_pass_filter_spo2, kHighPassCutoff_spo2, kSamplingFrequency_spo2);
 8003d20:	21fc      	movs	r1, #252	@ 0xfc
 8003d22:	0589      	lsls	r1, r1, #22
 8003d24:	4a0a      	ldr	r2, [pc, #40]	@ (8003d50 <initialize_filters_2+0x7c>)
 8003d26:	4b0f      	ldr	r3, [pc, #60]	@ (8003d64 <initialize_filters_2+0x90>)
 8003d28:	0018      	movs	r0, r3
 8003d2a:	f7ff fed9 	bl	8003ae0 <HighPassFilter_init2>
    MinMaxAvgStatistic_init(&stat_red);
 8003d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8003d68 <initialize_filters_2+0x94>)
 8003d30:	0018      	movs	r0, r3
 8003d32:	f7ff fe79 	bl	8003a28 <MinMaxAvgStatistic_init>
    MinMaxAvgStatistic_init(&stat_ir);
 8003d36:	4b0d      	ldr	r3, [pc, #52]	@ (8003d6c <initialize_filters_2+0x98>)
 8003d38:	0018      	movs	r0, r3
 8003d3a:	f7ff fe75 	bl	8003a28 <MinMaxAvgStatistic_init>
}
 8003d3e:	46c0      	nop			@ (mov r8, r8)
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	2000044c 	.word	0x2000044c
 8003d48:	2000045c 	.word	0x2000045c
 8003d4c:	2000046c 	.word	0x2000046c
 8003d50:	43c80000 	.word	0x43c80000
 8003d54:	20000444 	.word	0x20000444
 8003d58:	40a00000 	.word	0x40a00000
 8003d5c:	2000040c 	.word	0x2000040c
 8003d60:	2000041c 	.word	0x2000041c
 8003d64:	2000042c 	.word	0x2000042c
 8003d68:	2000047c 	.word	0x2000047c
 8003d6c:	2000048c 	.word	0x2000048c

08003d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d74:	4b07      	ldr	r3, [pc, #28]	@ (8003d94 <HAL_MspInit+0x24>)
 8003d76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d78:	4b06      	ldr	r3, [pc, #24]	@ (8003d94 <HAL_MspInit+0x24>)
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d80:	4b04      	ldr	r3, [pc, #16]	@ (8003d94 <HAL_MspInit+0x24>)
 8003d82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d84:	4b03      	ldr	r3, [pc, #12]	@ (8003d94 <HAL_MspInit+0x24>)
 8003d86:	2180      	movs	r1, #128	@ 0x80
 8003d88:	0549      	lsls	r1, r1, #21
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d8e:	46c0      	nop			@ (mov r8, r8)
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40021000 	.word	0x40021000

08003d98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d98:	b590      	push	{r4, r7, lr}
 8003d9a:	b089      	sub	sp, #36	@ 0x24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003da0:	240c      	movs	r4, #12
 8003da2:	193b      	adds	r3, r7, r4
 8003da4:	0018      	movs	r0, r3
 8003da6:	2314      	movs	r3, #20
 8003da8:	001a      	movs	r2, r3
 8003daa:	2100      	movs	r1, #0
 8003dac:	f007 fb0c 	bl	800b3c8 <memset>
  if(hi2c->Instance==I2C1)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a18      	ldr	r2, [pc, #96]	@ (8003e18 <HAL_I2C_MspInit+0x80>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d12a      	bne.n	8003e10 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dba:	4b18      	ldr	r3, [pc, #96]	@ (8003e1c <HAL_I2C_MspInit+0x84>)
 8003dbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dbe:	4b17      	ldr	r3, [pc, #92]	@ (8003e1c <HAL_I2C_MspInit+0x84>)
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003dc6:	4b15      	ldr	r3, [pc, #84]	@ (8003e1c <HAL_I2C_MspInit+0x84>)
 8003dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dca:	2201      	movs	r2, #1
 8003dcc:	4013      	ands	r3, r2
 8003dce:	60bb      	str	r3, [r7, #8]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003dd2:	193b      	adds	r3, r7, r4
 8003dd4:	22c0      	movs	r2, #192	@ 0xc0
 8003dd6:	00d2      	lsls	r2, r2, #3
 8003dd8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003dda:	0021      	movs	r1, r4
 8003ddc:	187b      	adds	r3, r7, r1
 8003dde:	2212      	movs	r2, #18
 8003de0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de2:	187b      	adds	r3, r7, r1
 8003de4:	2200      	movs	r2, #0
 8003de6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003de8:	187b      	adds	r3, r7, r1
 8003dea:	2203      	movs	r2, #3
 8003dec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003dee:	187b      	adds	r3, r7, r1
 8003df0:	2206      	movs	r2, #6
 8003df2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003df4:	187a      	adds	r2, r7, r1
 8003df6:	23a0      	movs	r3, #160	@ 0xa0
 8003df8:	05db      	lsls	r3, r3, #23
 8003dfa:	0011      	movs	r1, r2
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	f000 fabd 	bl	800437c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e02:	4b06      	ldr	r3, [pc, #24]	@ (8003e1c <HAL_I2C_MspInit+0x84>)
 8003e04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e06:	4b05      	ldr	r3, [pc, #20]	@ (8003e1c <HAL_I2C_MspInit+0x84>)
 8003e08:	2180      	movs	r1, #128	@ 0x80
 8003e0a:	0389      	lsls	r1, r1, #14
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003e10:	46c0      	nop			@ (mov r8, r8)
 8003e12:	46bd      	mov	sp, r7
 8003e14:	b009      	add	sp, #36	@ 0x24
 8003e16:	bd90      	pop	{r4, r7, pc}
 8003e18:	40005400 	.word	0x40005400
 8003e1c:	40021000 	.word	0x40021000

08003e20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003e20:	b590      	push	{r4, r7, lr}
 8003e22:	b089      	sub	sp, #36	@ 0x24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e28:	240c      	movs	r4, #12
 8003e2a:	193b      	adds	r3, r7, r4
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	2314      	movs	r3, #20
 8003e30:	001a      	movs	r2, r3
 8003e32:	2100      	movs	r1, #0
 8003e34:	f007 fac8 	bl	800b3c8 <memset>
  if(hspi->Instance==SPI2)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a18      	ldr	r2, [pc, #96]	@ (8003ea0 <HAL_SPI_MspInit+0x80>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d129      	bne.n	8003e96 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003e42:	4b18      	ldr	r3, [pc, #96]	@ (8003ea4 <HAL_SPI_MspInit+0x84>)
 8003e44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e46:	4b17      	ldr	r3, [pc, #92]	@ (8003ea4 <HAL_SPI_MspInit+0x84>)
 8003e48:	2180      	movs	r1, #128	@ 0x80
 8003e4a:	01c9      	lsls	r1, r1, #7
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e50:	4b14      	ldr	r3, [pc, #80]	@ (8003ea4 <HAL_SPI_MspInit+0x84>)
 8003e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e54:	4b13      	ldr	r3, [pc, #76]	@ (8003ea4 <HAL_SPI_MspInit+0x84>)
 8003e56:	2102      	movs	r1, #2
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003e5c:	4b11      	ldr	r3, [pc, #68]	@ (8003ea4 <HAL_SPI_MspInit+0x84>)
 8003e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e60:	2202      	movs	r2, #2
 8003e62:	4013      	ands	r3, r2
 8003e64:	60bb      	str	r3, [r7, #8]
 8003e66:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003e68:	193b      	adds	r3, r7, r4
 8003e6a:	22e0      	movs	r2, #224	@ 0xe0
 8003e6c:	0212      	lsls	r2, r2, #8
 8003e6e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e70:	0021      	movs	r1, r4
 8003e72:	187b      	adds	r3, r7, r1
 8003e74:	2202      	movs	r2, #2
 8003e76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e78:	187b      	adds	r3, r7, r1
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e7e:	187b      	adds	r3, r7, r1
 8003e80:	2203      	movs	r2, #3
 8003e82:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8003e84:	187b      	adds	r3, r7, r1
 8003e86:	2200      	movs	r2, #0
 8003e88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e8a:	187b      	adds	r3, r7, r1
 8003e8c:	4a06      	ldr	r2, [pc, #24]	@ (8003ea8 <HAL_SPI_MspInit+0x88>)
 8003e8e:	0019      	movs	r1, r3
 8003e90:	0010      	movs	r0, r2
 8003e92:	f000 fa73 	bl	800437c <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8003e96:	46c0      	nop			@ (mov r8, r8)
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	b009      	add	sp, #36	@ 0x24
 8003e9c:	bd90      	pop	{r4, r7, pc}
 8003e9e:	46c0      	nop			@ (mov r8, r8)
 8003ea0:	40003800 	.word	0x40003800
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	50000400 	.word	0x50000400

08003eac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003eac:	b590      	push	{r4, r7, lr}
 8003eae:	b089      	sub	sp, #36	@ 0x24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eb4:	240c      	movs	r4, #12
 8003eb6:	193b      	adds	r3, r7, r4
 8003eb8:	0018      	movs	r0, r3
 8003eba:	2314      	movs	r3, #20
 8003ebc:	001a      	movs	r2, r3
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	f007 fa82 	bl	800b3c8 <memset>
  if(huart->Instance==USART2)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a18      	ldr	r2, [pc, #96]	@ (8003f2c <HAL_UART_MspInit+0x80>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d129      	bne.n	8003f22 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ece:	4b18      	ldr	r3, [pc, #96]	@ (8003f30 <HAL_UART_MspInit+0x84>)
 8003ed0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ed2:	4b17      	ldr	r3, [pc, #92]	@ (8003f30 <HAL_UART_MspInit+0x84>)
 8003ed4:	2180      	movs	r1, #128	@ 0x80
 8003ed6:	0289      	lsls	r1, r1, #10
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003edc:	4b14      	ldr	r3, [pc, #80]	@ (8003f30 <HAL_UART_MspInit+0x84>)
 8003ede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ee0:	4b13      	ldr	r3, [pc, #76]	@ (8003f30 <HAL_UART_MspInit+0x84>)
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003ee8:	4b11      	ldr	r3, [pc, #68]	@ (8003f30 <HAL_UART_MspInit+0x84>)
 8003eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eec:	2201      	movs	r2, #1
 8003eee:	4013      	ands	r3, r2
 8003ef0:	60bb      	str	r3, [r7, #8]
 8003ef2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003ef4:	0021      	movs	r1, r4
 8003ef6:	187b      	adds	r3, r7, r1
 8003ef8:	220c      	movs	r2, #12
 8003efa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003efc:	187b      	adds	r3, r7, r1
 8003efe:	2202      	movs	r2, #2
 8003f00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f02:	187b      	adds	r3, r7, r1
 8003f04:	2200      	movs	r2, #0
 8003f06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f08:	187b      	adds	r3, r7, r1
 8003f0a:	2203      	movs	r2, #3
 8003f0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003f0e:	187b      	adds	r3, r7, r1
 8003f10:	2204      	movs	r2, #4
 8003f12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f14:	187a      	adds	r2, r7, r1
 8003f16:	23a0      	movs	r3, #160	@ 0xa0
 8003f18:	05db      	lsls	r3, r3, #23
 8003f1a:	0011      	movs	r1, r2
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f000 fa2d 	bl	800437c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8003f22:	46c0      	nop			@ (mov r8, r8)
 8003f24:	46bd      	mov	sp, r7
 8003f26:	b009      	add	sp, #36	@ 0x24
 8003f28:	bd90      	pop	{r4, r7, pc}
 8003f2a:	46c0      	nop			@ (mov r8, r8)
 8003f2c:	40004400 	.word	0x40004400
 8003f30:	40021000 	.word	0x40021000

08003f34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f34:	b5b0      	push	{r4, r5, r7, lr}
 8003f36:	b08c      	sub	sp, #48	@ 0x30
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	0019      	movs	r1, r3
 8003f42:	2011      	movs	r0, #17
 8003f44:	f000 f9f4 	bl	8004330 <HAL_NVIC_SetPriority>
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003f48:	2011      	movs	r0, #17
 8003f4a:	f000 fa06 	bl	800435a <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003f4e:	4b32      	ldr	r3, [pc, #200]	@ (8004018 <HAL_InitTick+0xe4>)
 8003f50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f52:	4b31      	ldr	r3, [pc, #196]	@ (8004018 <HAL_InitTick+0xe4>)
 8003f54:	2110      	movs	r1, #16
 8003f56:	430a      	orrs	r2, r1
 8003f58:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003f5a:	2308      	movs	r3, #8
 8003f5c:	18fa      	adds	r2, r7, r3
 8003f5e:	240c      	movs	r4, #12
 8003f60:	193b      	adds	r3, r7, r4
 8003f62:	0011      	movs	r1, r2
 8003f64:	0018      	movs	r0, r3
 8003f66:	f001 ffaf 	bl	8005ec8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003f6a:	193b      	adds	r3, r7, r4
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d104      	bne.n	8003f80 <HAL_InitTick+0x4c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003f76:	f001 ff7b 	bl	8005e70 <HAL_RCC_GetPCLK1Freq>
 8003f7a:	0003      	movs	r3, r0
 8003f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f7e:	e004      	b.n	8003f8a <HAL_InitTick+0x56>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003f80:	f001 ff76 	bl	8005e70 <HAL_RCC_GetPCLK1Freq>
 8003f84:	0003      	movs	r3, r0
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f8c:	4923      	ldr	r1, [pc, #140]	@ (800401c <HAL_InitTick+0xe8>)
 8003f8e:	0018      	movs	r0, r3
 8003f90:	f7fc f8cc 	bl	800012c <__udivsi3>
 8003f94:	0003      	movs	r3, r0
 8003f96:	3b01      	subs	r3, #1
 8003f98:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003f9a:	4b21      	ldr	r3, [pc, #132]	@ (8004020 <HAL_InitTick+0xec>)
 8003f9c:	4a21      	ldr	r2, [pc, #132]	@ (8004024 <HAL_InitTick+0xf0>)
 8003f9e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003fa0:	4b1f      	ldr	r3, [pc, #124]	@ (8004020 <HAL_InitTick+0xec>)
 8003fa2:	4a21      	ldr	r2, [pc, #132]	@ (8004028 <HAL_InitTick+0xf4>)
 8003fa4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003fa6:	4b1e      	ldr	r3, [pc, #120]	@ (8004020 <HAL_InitTick+0xec>)
 8003fa8:	6a3a      	ldr	r2, [r7, #32]
 8003faa:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8003fac:	4b1c      	ldr	r3, [pc, #112]	@ (8004020 <HAL_InitTick+0xec>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8004020 <HAL_InitTick+0xec>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8003fb8:	252b      	movs	r5, #43	@ 0x2b
 8003fba:	197c      	adds	r4, r7, r5
 8003fbc:	4b18      	ldr	r3, [pc, #96]	@ (8004020 <HAL_InitTick+0xec>)
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	f002 fde2 	bl	8006b88 <HAL_TIM_Base_Init>
 8003fc4:	0003      	movs	r3, r0
 8003fc6:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8003fc8:	197b      	adds	r3, r7, r5
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d11b      	bne.n	8004008 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003fd0:	197c      	adds	r4, r7, r5
 8003fd2:	4b13      	ldr	r3, [pc, #76]	@ (8004020 <HAL_InitTick+0xec>)
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f002 fe1f 	bl	8006c18 <HAL_TIM_Base_Start_IT>
 8003fda:	0003      	movs	r3, r0
 8003fdc:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8003fde:	197b      	adds	r3, r7, r5
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d110      	bne.n	8004008 <HAL_InitTick+0xd4>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b03      	cmp	r3, #3
 8003fea:	d809      	bhi.n	8004000 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	0019      	movs	r1, r3
 8003ff2:	2011      	movs	r0, #17
 8003ff4:	f000 f99c 	bl	8004330 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800402c <HAL_InitTick+0xf8>)
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	e003      	b.n	8004008 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8004000:	232b      	movs	r3, #43	@ 0x2b
 8004002:	18fb      	adds	r3, r7, r3
 8004004:	2201      	movs	r2, #1
 8004006:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8004008:	232b      	movs	r3, #43	@ 0x2b
 800400a:	18fb      	adds	r3, r7, r3
 800400c:	781b      	ldrb	r3, [r3, #0]
}
 800400e:	0018      	movs	r0, r3
 8004010:	46bd      	mov	sp, r7
 8004012:	b00c      	add	sp, #48	@ 0x30
 8004014:	bdb0      	pop	{r4, r5, r7, pc}
 8004016:	46c0      	nop			@ (mov r8, r8)
 8004018:	40021000 	.word	0x40021000
 800401c:	000f4240 	.word	0x000f4240
 8004020:	2000049c 	.word	0x2000049c
 8004024:	40001000 	.word	0x40001000
 8004028:	000003e7 	.word	0x000003e7
 800402c:	20000004 	.word	0x20000004

08004030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004034:	46c0      	nop			@ (mov r8, r8)
 8004036:	e7fd      	b.n	8004034 <NMI_Handler+0x4>

08004038 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800403c:	46c0      	nop			@ (mov r8, r8)
 800403e:	e7fd      	b.n	800403c <HardFault_Handler+0x4>

08004040 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004044:	46c0      	nop			@ (mov r8, r8)
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800404e:	46c0      	nop			@ (mov r8, r8)
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004058:	46c0      	nop			@ (mov r8, r8)
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
	...

08004060 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
	max30102_on_interrupt(&max30102);
 8004064:	4b04      	ldr	r3, [pc, #16]	@ (8004078 <EXTI0_1_IRQHandler+0x18>)
 8004066:	0018      	movs	r0, r3
 8004068:	f7ff fad9 	bl	800361e <max30102_on_interrupt>
//	printf("Interrupt triggered for GPIO_PIN_0\n");
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800406c:	2001      	movs	r0, #1
 800406e:	f000 fb21 	bl	80046b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8004072:	46c0      	nop			@ (mov r8, r8)
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	200001c4 	.word	0x200001c4

0800407c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004080:	4b03      	ldr	r3, [pc, #12]	@ (8004090 <TIM6_DAC_IRQHandler+0x14>)
 8004082:	0018      	movs	r0, r3
 8004084:	f002 fe1a 	bl	8006cbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004088:	46c0      	nop			@ (mov r8, r8)
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	46c0      	nop			@ (mov r8, r8)
 8004090:	2000049c 	.word	0x2000049c

08004094 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800409c:	4a14      	ldr	r2, [pc, #80]	@ (80040f0 <_sbrk+0x5c>)
 800409e:	4b15      	ldr	r3, [pc, #84]	@ (80040f4 <_sbrk+0x60>)
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040a8:	4b13      	ldr	r3, [pc, #76]	@ (80040f8 <_sbrk+0x64>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d102      	bne.n	80040b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040b0:	4b11      	ldr	r3, [pc, #68]	@ (80040f8 <_sbrk+0x64>)
 80040b2:	4a12      	ldr	r2, [pc, #72]	@ (80040fc <_sbrk+0x68>)
 80040b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040b6:	4b10      	ldr	r3, [pc, #64]	@ (80040f8 <_sbrk+0x64>)
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	18d3      	adds	r3, r2, r3
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d207      	bcs.n	80040d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040c4:	f007 f99a 	bl	800b3fc <__errno>
 80040c8:	0003      	movs	r3, r0
 80040ca:	220c      	movs	r2, #12
 80040cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040ce:	2301      	movs	r3, #1
 80040d0:	425b      	negs	r3, r3
 80040d2:	e009      	b.n	80040e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040d4:	4b08      	ldr	r3, [pc, #32]	@ (80040f8 <_sbrk+0x64>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040da:	4b07      	ldr	r3, [pc, #28]	@ (80040f8 <_sbrk+0x64>)
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	18d2      	adds	r2, r2, r3
 80040e2:	4b05      	ldr	r3, [pc, #20]	@ (80040f8 <_sbrk+0x64>)
 80040e4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80040e6:	68fb      	ldr	r3, [r7, #12]
}
 80040e8:	0018      	movs	r0, r3
 80040ea:	46bd      	mov	sp, r7
 80040ec:	b006      	add	sp, #24
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	20005000 	.word	0x20005000
 80040f4:	00000400 	.word	0x00000400
 80040f8:	200004dc 	.word	0x200004dc
 80040fc:	20000678 	.word	0x20000678

08004100 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004104:	46c0      	nop			@ (mov r8, r8)
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
	...

0800410c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800410c:	480d      	ldr	r0, [pc, #52]	@ (8004144 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800410e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004110:	f7ff fff6 	bl	8004100 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004114:	480c      	ldr	r0, [pc, #48]	@ (8004148 <LoopForever+0x6>)
  ldr r1, =_edata
 8004116:	490d      	ldr	r1, [pc, #52]	@ (800414c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004118:	4a0d      	ldr	r2, [pc, #52]	@ (8004150 <LoopForever+0xe>)
  movs r3, #0
 800411a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800411c:	e002      	b.n	8004124 <LoopCopyDataInit>

0800411e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800411e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004122:	3304      	adds	r3, #4

08004124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004128:	d3f9      	bcc.n	800411e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800412a:	4a0a      	ldr	r2, [pc, #40]	@ (8004154 <LoopForever+0x12>)
  ldr r4, =_ebss
 800412c:	4c0a      	ldr	r4, [pc, #40]	@ (8004158 <LoopForever+0x16>)
  movs r3, #0
 800412e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004130:	e001      	b.n	8004136 <LoopFillZerobss>

08004132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004134:	3204      	adds	r2, #4

08004136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004138:	d3fb      	bcc.n	8004132 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800413a:	f007 f965 	bl	800b408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800413e:	f7fe fdd9 	bl	8002cf4 <main>

08004142 <LoopForever>:

LoopForever:
    b LoopForever
 8004142:	e7fe      	b.n	8004142 <LoopForever>
   ldr   r0, =_estack
 8004144:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8004148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800414c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8004150:	0800c340 	.word	0x0800c340
  ldr r2, =_sbss
 8004154:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8004158:	20000674 	.word	0x20000674

0800415c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800415c:	e7fe      	b.n	800415c <ADC1_COMP_IRQHandler>
	...

08004160 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004166:	1dfb      	adds	r3, r7, #7
 8004168:	2200      	movs	r2, #0
 800416a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800416c:	4b0b      	ldr	r3, [pc, #44]	@ (800419c <HAL_Init+0x3c>)
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	4b0a      	ldr	r3, [pc, #40]	@ (800419c <HAL_Init+0x3c>)
 8004172:	2140      	movs	r1, #64	@ 0x40
 8004174:	430a      	orrs	r2, r1
 8004176:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004178:	2003      	movs	r0, #3
 800417a:	f7ff fedb 	bl	8003f34 <HAL_InitTick>
 800417e:	1e03      	subs	r3, r0, #0
 8004180:	d003      	beq.n	800418a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8004182:	1dfb      	adds	r3, r7, #7
 8004184:	2201      	movs	r2, #1
 8004186:	701a      	strb	r2, [r3, #0]
 8004188:	e001      	b.n	800418e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800418a:	f7ff fdf1 	bl	8003d70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800418e:	1dfb      	adds	r3, r7, #7
 8004190:	781b      	ldrb	r3, [r3, #0]
}
 8004192:	0018      	movs	r0, r3
 8004194:	46bd      	mov	sp, r7
 8004196:	b002      	add	sp, #8
 8004198:	bd80      	pop	{r7, pc}
 800419a:	46c0      	nop			@ (mov r8, r8)
 800419c:	40022000 	.word	0x40022000

080041a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041a4:	4b05      	ldr	r3, [pc, #20]	@ (80041bc <HAL_IncTick+0x1c>)
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	001a      	movs	r2, r3
 80041aa:	4b05      	ldr	r3, [pc, #20]	@ (80041c0 <HAL_IncTick+0x20>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	18d2      	adds	r2, r2, r3
 80041b0:	4b03      	ldr	r3, [pc, #12]	@ (80041c0 <HAL_IncTick+0x20>)
 80041b2:	601a      	str	r2, [r3, #0]
}
 80041b4:	46c0      	nop			@ (mov r8, r8)
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	46c0      	nop			@ (mov r8, r8)
 80041bc:	20000008 	.word	0x20000008
 80041c0:	200004e0 	.word	0x200004e0

080041c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  return uwTick;
 80041c8:	4b02      	ldr	r3, [pc, #8]	@ (80041d4 <HAL_GetTick+0x10>)
 80041ca:	681b      	ldr	r3, [r3, #0]
}
 80041cc:	0018      	movs	r0, r3
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	46c0      	nop			@ (mov r8, r8)
 80041d4:	200004e0 	.word	0x200004e0

080041d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041e0:	f7ff fff0 	bl	80041c4 <HAL_GetTick>
 80041e4:	0003      	movs	r3, r0
 80041e6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	3301      	adds	r3, #1
 80041f0:	d005      	beq.n	80041fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041f2:	4b0a      	ldr	r3, [pc, #40]	@ (800421c <HAL_Delay+0x44>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	001a      	movs	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	189b      	adds	r3, r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80041fe:	46c0      	nop			@ (mov r8, r8)
 8004200:	f7ff ffe0 	bl	80041c4 <HAL_GetTick>
 8004204:	0002      	movs	r2, r0
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	429a      	cmp	r2, r3
 800420e:	d8f7      	bhi.n	8004200 <HAL_Delay+0x28>
  {
  }
}
 8004210:	46c0      	nop			@ (mov r8, r8)
 8004212:	46c0      	nop			@ (mov r8, r8)
 8004214:	46bd      	mov	sp, r7
 8004216:	b004      	add	sp, #16
 8004218:	bd80      	pop	{r7, pc}
 800421a:	46c0      	nop			@ (mov r8, r8)
 800421c:	20000008 	.word	0x20000008

08004220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	0002      	movs	r2, r0
 8004228:	1dfb      	adds	r3, r7, #7
 800422a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800422c:	1dfb      	adds	r3, r7, #7
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	2b7f      	cmp	r3, #127	@ 0x7f
 8004232:	d809      	bhi.n	8004248 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004234:	1dfb      	adds	r3, r7, #7
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	001a      	movs	r2, r3
 800423a:	231f      	movs	r3, #31
 800423c:	401a      	ands	r2, r3
 800423e:	4b04      	ldr	r3, [pc, #16]	@ (8004250 <__NVIC_EnableIRQ+0x30>)
 8004240:	2101      	movs	r1, #1
 8004242:	4091      	lsls	r1, r2
 8004244:	000a      	movs	r2, r1
 8004246:	601a      	str	r2, [r3, #0]
  }
}
 8004248:	46c0      	nop			@ (mov r8, r8)
 800424a:	46bd      	mov	sp, r7
 800424c:	b002      	add	sp, #8
 800424e:	bd80      	pop	{r7, pc}
 8004250:	e000e100 	.word	0xe000e100

08004254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004254:	b590      	push	{r4, r7, lr}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	0002      	movs	r2, r0
 800425c:	6039      	str	r1, [r7, #0]
 800425e:	1dfb      	adds	r3, r7, #7
 8004260:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004262:	1dfb      	adds	r3, r7, #7
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b7f      	cmp	r3, #127	@ 0x7f
 8004268:	d828      	bhi.n	80042bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800426a:	4a2f      	ldr	r2, [pc, #188]	@ (8004328 <__NVIC_SetPriority+0xd4>)
 800426c:	1dfb      	adds	r3, r7, #7
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	b25b      	sxtb	r3, r3
 8004272:	089b      	lsrs	r3, r3, #2
 8004274:	33c0      	adds	r3, #192	@ 0xc0
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	589b      	ldr	r3, [r3, r2]
 800427a:	1dfa      	adds	r2, r7, #7
 800427c:	7812      	ldrb	r2, [r2, #0]
 800427e:	0011      	movs	r1, r2
 8004280:	2203      	movs	r2, #3
 8004282:	400a      	ands	r2, r1
 8004284:	00d2      	lsls	r2, r2, #3
 8004286:	21ff      	movs	r1, #255	@ 0xff
 8004288:	4091      	lsls	r1, r2
 800428a:	000a      	movs	r2, r1
 800428c:	43d2      	mvns	r2, r2
 800428e:	401a      	ands	r2, r3
 8004290:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	019b      	lsls	r3, r3, #6
 8004296:	22ff      	movs	r2, #255	@ 0xff
 8004298:	401a      	ands	r2, r3
 800429a:	1dfb      	adds	r3, r7, #7
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	0018      	movs	r0, r3
 80042a0:	2303      	movs	r3, #3
 80042a2:	4003      	ands	r3, r0
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042a8:	481f      	ldr	r0, [pc, #124]	@ (8004328 <__NVIC_SetPriority+0xd4>)
 80042aa:	1dfb      	adds	r3, r7, #7
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	b25b      	sxtb	r3, r3
 80042b0:	089b      	lsrs	r3, r3, #2
 80042b2:	430a      	orrs	r2, r1
 80042b4:	33c0      	adds	r3, #192	@ 0xc0
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80042ba:	e031      	b.n	8004320 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042bc:	4a1b      	ldr	r2, [pc, #108]	@ (800432c <__NVIC_SetPriority+0xd8>)
 80042be:	1dfb      	adds	r3, r7, #7
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	0019      	movs	r1, r3
 80042c4:	230f      	movs	r3, #15
 80042c6:	400b      	ands	r3, r1
 80042c8:	3b08      	subs	r3, #8
 80042ca:	089b      	lsrs	r3, r3, #2
 80042cc:	3306      	adds	r3, #6
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	18d3      	adds	r3, r2, r3
 80042d2:	3304      	adds	r3, #4
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	1dfa      	adds	r2, r7, #7
 80042d8:	7812      	ldrb	r2, [r2, #0]
 80042da:	0011      	movs	r1, r2
 80042dc:	2203      	movs	r2, #3
 80042de:	400a      	ands	r2, r1
 80042e0:	00d2      	lsls	r2, r2, #3
 80042e2:	21ff      	movs	r1, #255	@ 0xff
 80042e4:	4091      	lsls	r1, r2
 80042e6:	000a      	movs	r2, r1
 80042e8:	43d2      	mvns	r2, r2
 80042ea:	401a      	ands	r2, r3
 80042ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	019b      	lsls	r3, r3, #6
 80042f2:	22ff      	movs	r2, #255	@ 0xff
 80042f4:	401a      	ands	r2, r3
 80042f6:	1dfb      	adds	r3, r7, #7
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	0018      	movs	r0, r3
 80042fc:	2303      	movs	r3, #3
 80042fe:	4003      	ands	r3, r0
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004304:	4809      	ldr	r0, [pc, #36]	@ (800432c <__NVIC_SetPriority+0xd8>)
 8004306:	1dfb      	adds	r3, r7, #7
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	001c      	movs	r4, r3
 800430c:	230f      	movs	r3, #15
 800430e:	4023      	ands	r3, r4
 8004310:	3b08      	subs	r3, #8
 8004312:	089b      	lsrs	r3, r3, #2
 8004314:	430a      	orrs	r2, r1
 8004316:	3306      	adds	r3, #6
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	18c3      	adds	r3, r0, r3
 800431c:	3304      	adds	r3, #4
 800431e:	601a      	str	r2, [r3, #0]
}
 8004320:	46c0      	nop			@ (mov r8, r8)
 8004322:	46bd      	mov	sp, r7
 8004324:	b003      	add	sp, #12
 8004326:	bd90      	pop	{r4, r7, pc}
 8004328:	e000e100 	.word	0xe000e100
 800432c:	e000ed00 	.word	0xe000ed00

08004330 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	60b9      	str	r1, [r7, #8]
 8004338:	607a      	str	r2, [r7, #4]
 800433a:	210f      	movs	r1, #15
 800433c:	187b      	adds	r3, r7, r1
 800433e:	1c02      	adds	r2, r0, #0
 8004340:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	187b      	adds	r3, r7, r1
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	b25b      	sxtb	r3, r3
 800434a:	0011      	movs	r1, r2
 800434c:	0018      	movs	r0, r3
 800434e:	f7ff ff81 	bl	8004254 <__NVIC_SetPriority>
}
 8004352:	46c0      	nop			@ (mov r8, r8)
 8004354:	46bd      	mov	sp, r7
 8004356:	b004      	add	sp, #16
 8004358:	bd80      	pop	{r7, pc}

0800435a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b082      	sub	sp, #8
 800435e:	af00      	add	r7, sp, #0
 8004360:	0002      	movs	r2, r0
 8004362:	1dfb      	adds	r3, r7, #7
 8004364:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004366:	1dfb      	adds	r3, r7, #7
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	b25b      	sxtb	r3, r3
 800436c:	0018      	movs	r0, r3
 800436e:	f7ff ff57 	bl	8004220 <__NVIC_EnableIRQ>
}
 8004372:	46c0      	nop			@ (mov r8, r8)
 8004374:	46bd      	mov	sp, r7
 8004376:	b002      	add	sp, #8
 8004378:	bd80      	pop	{r7, pc}
	...

0800437c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004386:	2300      	movs	r3, #0
 8004388:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800438a:	2300      	movs	r3, #0
 800438c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800438e:	2300      	movs	r3, #0
 8004390:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004392:	e155      	b.n	8004640 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2101      	movs	r1, #1
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	4091      	lsls	r1, r2
 800439e:	000a      	movs	r2, r1
 80043a0:	4013      	ands	r3, r2
 80043a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d100      	bne.n	80043ac <HAL_GPIO_Init+0x30>
 80043aa:	e146      	b.n	800463a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2203      	movs	r2, #3
 80043b2:	4013      	ands	r3, r2
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d005      	beq.n	80043c4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	2203      	movs	r2, #3
 80043be:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d130      	bne.n	8004426 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	2203      	movs	r2, #3
 80043d0:	409a      	lsls	r2, r3
 80043d2:	0013      	movs	r3, r2
 80043d4:	43da      	mvns	r2, r3
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	4013      	ands	r3, r2
 80043da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	68da      	ldr	r2, [r3, #12]
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	409a      	lsls	r2, r3
 80043e6:	0013      	movs	r3, r2
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043fa:	2201      	movs	r2, #1
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	409a      	lsls	r2, r3
 8004400:	0013      	movs	r3, r2
 8004402:	43da      	mvns	r2, r3
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	4013      	ands	r3, r2
 8004408:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	091b      	lsrs	r3, r3, #4
 8004410:	2201      	movs	r2, #1
 8004412:	401a      	ands	r2, r3
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	409a      	lsls	r2, r3
 8004418:	0013      	movs	r3, r2
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	4313      	orrs	r3, r2
 800441e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2203      	movs	r2, #3
 800442c:	4013      	ands	r3, r2
 800442e:	2b03      	cmp	r3, #3
 8004430:	d017      	beq.n	8004462 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	2203      	movs	r2, #3
 800443e:	409a      	lsls	r2, r3
 8004440:	0013      	movs	r3, r2
 8004442:	43da      	mvns	r2, r3
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	4013      	ands	r3, r2
 8004448:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	689a      	ldr	r2, [r3, #8]
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	409a      	lsls	r2, r3
 8004454:	0013      	movs	r3, r2
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2203      	movs	r2, #3
 8004468:	4013      	ands	r3, r2
 800446a:	2b02      	cmp	r3, #2
 800446c:	d123      	bne.n	80044b6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	08da      	lsrs	r2, r3, #3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	3208      	adds	r2, #8
 8004476:	0092      	lsls	r2, r2, #2
 8004478:	58d3      	ldr	r3, [r2, r3]
 800447a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2207      	movs	r2, #7
 8004480:	4013      	ands	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	220f      	movs	r2, #15
 8004486:	409a      	lsls	r2, r3
 8004488:	0013      	movs	r3, r2
 800448a:	43da      	mvns	r2, r3
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	4013      	ands	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	691a      	ldr	r2, [r3, #16]
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2107      	movs	r1, #7
 800449a:	400b      	ands	r3, r1
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	409a      	lsls	r2, r3
 80044a0:	0013      	movs	r3, r2
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	08da      	lsrs	r2, r3, #3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3208      	adds	r2, #8
 80044b0:	0092      	lsls	r2, r2, #2
 80044b2:	6939      	ldr	r1, [r7, #16]
 80044b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	2203      	movs	r2, #3
 80044c2:	409a      	lsls	r2, r3
 80044c4:	0013      	movs	r3, r2
 80044c6:	43da      	mvns	r2, r3
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	4013      	ands	r3, r2
 80044cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2203      	movs	r2, #3
 80044d4:	401a      	ands	r2, r3
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	409a      	lsls	r2, r3
 80044dc:	0013      	movs	r3, r2
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	23c0      	movs	r3, #192	@ 0xc0
 80044f0:	029b      	lsls	r3, r3, #10
 80044f2:	4013      	ands	r3, r2
 80044f4:	d100      	bne.n	80044f8 <HAL_GPIO_Init+0x17c>
 80044f6:	e0a0      	b.n	800463a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044f8:	4b57      	ldr	r3, [pc, #348]	@ (8004658 <HAL_GPIO_Init+0x2dc>)
 80044fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044fc:	4b56      	ldr	r3, [pc, #344]	@ (8004658 <HAL_GPIO_Init+0x2dc>)
 80044fe:	2101      	movs	r1, #1
 8004500:	430a      	orrs	r2, r1
 8004502:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004504:	4a55      	ldr	r2, [pc, #340]	@ (800465c <HAL_GPIO_Init+0x2e0>)
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	089b      	lsrs	r3, r3, #2
 800450a:	3302      	adds	r3, #2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	589b      	ldr	r3, [r3, r2]
 8004510:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2203      	movs	r2, #3
 8004516:	4013      	ands	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	220f      	movs	r2, #15
 800451c:	409a      	lsls	r2, r3
 800451e:	0013      	movs	r3, r2
 8004520:	43da      	mvns	r2, r3
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	4013      	ands	r3, r2
 8004526:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	23a0      	movs	r3, #160	@ 0xa0
 800452c:	05db      	lsls	r3, r3, #23
 800452e:	429a      	cmp	r2, r3
 8004530:	d01f      	beq.n	8004572 <HAL_GPIO_Init+0x1f6>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a4a      	ldr	r2, [pc, #296]	@ (8004660 <HAL_GPIO_Init+0x2e4>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d019      	beq.n	800456e <HAL_GPIO_Init+0x1f2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a49      	ldr	r2, [pc, #292]	@ (8004664 <HAL_GPIO_Init+0x2e8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d013      	beq.n	800456a <HAL_GPIO_Init+0x1ee>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a48      	ldr	r2, [pc, #288]	@ (8004668 <HAL_GPIO_Init+0x2ec>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d00d      	beq.n	8004566 <HAL_GPIO_Init+0x1ea>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a47      	ldr	r2, [pc, #284]	@ (800466c <HAL_GPIO_Init+0x2f0>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d007      	beq.n	8004562 <HAL_GPIO_Init+0x1e6>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a46      	ldr	r2, [pc, #280]	@ (8004670 <HAL_GPIO_Init+0x2f4>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d101      	bne.n	800455e <HAL_GPIO_Init+0x1e2>
 800455a:	2305      	movs	r3, #5
 800455c:	e00a      	b.n	8004574 <HAL_GPIO_Init+0x1f8>
 800455e:	2306      	movs	r3, #6
 8004560:	e008      	b.n	8004574 <HAL_GPIO_Init+0x1f8>
 8004562:	2304      	movs	r3, #4
 8004564:	e006      	b.n	8004574 <HAL_GPIO_Init+0x1f8>
 8004566:	2303      	movs	r3, #3
 8004568:	e004      	b.n	8004574 <HAL_GPIO_Init+0x1f8>
 800456a:	2302      	movs	r3, #2
 800456c:	e002      	b.n	8004574 <HAL_GPIO_Init+0x1f8>
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <HAL_GPIO_Init+0x1f8>
 8004572:	2300      	movs	r3, #0
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	2103      	movs	r1, #3
 8004578:	400a      	ands	r2, r1
 800457a:	0092      	lsls	r2, r2, #2
 800457c:	4093      	lsls	r3, r2
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004584:	4935      	ldr	r1, [pc, #212]	@ (800465c <HAL_GPIO_Init+0x2e0>)
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	089b      	lsrs	r3, r3, #2
 800458a:	3302      	adds	r3, #2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004592:	4b38      	ldr	r3, [pc, #224]	@ (8004674 <HAL_GPIO_Init+0x2f8>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	43da      	mvns	r2, r3
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	4013      	ands	r3, r2
 80045a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	2380      	movs	r3, #128	@ 0x80
 80045a8:	035b      	lsls	r3, r3, #13
 80045aa:	4013      	ands	r3, r2
 80045ac:	d003      	beq.n	80045b6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80045b6:	4b2f      	ldr	r3, [pc, #188]	@ (8004674 <HAL_GPIO_Init+0x2f8>)
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80045bc:	4b2d      	ldr	r3, [pc, #180]	@ (8004674 <HAL_GPIO_Init+0x2f8>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	43da      	mvns	r2, r3
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	4013      	ands	r3, r2
 80045ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	2380      	movs	r3, #128	@ 0x80
 80045d2:	039b      	lsls	r3, r3, #14
 80045d4:	4013      	ands	r3, r2
 80045d6:	d003      	beq.n	80045e0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4313      	orrs	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80045e0:	4b24      	ldr	r3, [pc, #144]	@ (8004674 <HAL_GPIO_Init+0x2f8>)
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80045e6:	4b23      	ldr	r3, [pc, #140]	@ (8004674 <HAL_GPIO_Init+0x2f8>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	43da      	mvns	r2, r3
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	4013      	ands	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	2380      	movs	r3, #128	@ 0x80
 80045fc:	029b      	lsls	r3, r3, #10
 80045fe:	4013      	ands	r3, r2
 8004600:	d003      	beq.n	800460a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4313      	orrs	r3, r2
 8004608:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800460a:	4b1a      	ldr	r3, [pc, #104]	@ (8004674 <HAL_GPIO_Init+0x2f8>)
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004610:	4b18      	ldr	r3, [pc, #96]	@ (8004674 <HAL_GPIO_Init+0x2f8>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	43da      	mvns	r2, r3
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	4013      	ands	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	2380      	movs	r3, #128	@ 0x80
 8004626:	025b      	lsls	r3, r3, #9
 8004628:	4013      	ands	r3, r2
 800462a:	d003      	beq.n	8004634 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	4313      	orrs	r3, r2
 8004632:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004634:	4b0f      	ldr	r3, [pc, #60]	@ (8004674 <HAL_GPIO_Init+0x2f8>)
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	3301      	adds	r3, #1
 800463e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	40da      	lsrs	r2, r3
 8004648:	1e13      	subs	r3, r2, #0
 800464a:	d000      	beq.n	800464e <HAL_GPIO_Init+0x2d2>
 800464c:	e6a2      	b.n	8004394 <HAL_GPIO_Init+0x18>
  }
}
 800464e:	46c0      	nop			@ (mov r8, r8)
 8004650:	46c0      	nop			@ (mov r8, r8)
 8004652:	46bd      	mov	sp, r7
 8004654:	b006      	add	sp, #24
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40021000 	.word	0x40021000
 800465c:	40010000 	.word	0x40010000
 8004660:	50000400 	.word	0x50000400
 8004664:	50000800 	.word	0x50000800
 8004668:	50000c00 	.word	0x50000c00
 800466c:	50001000 	.word	0x50001000
 8004670:	50001c00 	.word	0x50001c00
 8004674:	40010400 	.word	0x40010400

08004678 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	0008      	movs	r0, r1
 8004682:	0011      	movs	r1, r2
 8004684:	1cbb      	adds	r3, r7, #2
 8004686:	1c02      	adds	r2, r0, #0
 8004688:	801a      	strh	r2, [r3, #0]
 800468a:	1c7b      	adds	r3, r7, #1
 800468c:	1c0a      	adds	r2, r1, #0
 800468e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004690:	1c7b      	adds	r3, r7, #1
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d004      	beq.n	80046a2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004698:	1cbb      	adds	r3, r7, #2
 800469a:	881a      	ldrh	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80046a0:	e003      	b.n	80046aa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80046a2:	1cbb      	adds	r3, r7, #2
 80046a4:	881a      	ldrh	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80046aa:	46c0      	nop			@ (mov r8, r8)
 80046ac:	46bd      	mov	sp, r7
 80046ae:	b002      	add	sp, #8
 80046b0:	bd80      	pop	{r7, pc}
	...

080046b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	0002      	movs	r2, r0
 80046bc:	1dbb      	adds	r3, r7, #6
 80046be:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80046c0:	4b09      	ldr	r3, [pc, #36]	@ (80046e8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	1dba      	adds	r2, r7, #6
 80046c6:	8812      	ldrh	r2, [r2, #0]
 80046c8:	4013      	ands	r3, r2
 80046ca:	d008      	beq.n	80046de <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046cc:	4b06      	ldr	r3, [pc, #24]	@ (80046e8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80046ce:	1dba      	adds	r2, r7, #6
 80046d0:	8812      	ldrh	r2, [r2, #0]
 80046d2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046d4:	1dbb      	adds	r3, r7, #6
 80046d6:	881b      	ldrh	r3, [r3, #0]
 80046d8:	0018      	movs	r0, r3
 80046da:	f000 f807 	bl	80046ec <HAL_GPIO_EXTI_Callback>
  }
}
 80046de:	46c0      	nop			@ (mov r8, r8)
 80046e0:	46bd      	mov	sp, r7
 80046e2:	b002      	add	sp, #8
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	46c0      	nop			@ (mov r8, r8)
 80046e8:	40010400 	.word	0x40010400

080046ec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	0002      	movs	r2, r0
 80046f4:	1dbb      	adds	r3, r7, #6
 80046f6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80046f8:	46c0      	nop			@ (mov r8, r8)
 80046fa:	46bd      	mov	sp, r7
 80046fc:	b002      	add	sp, #8
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e082      	b.n	8004818 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2241      	movs	r2, #65	@ 0x41
 8004716:	5c9b      	ldrb	r3, [r3, r2]
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d107      	bne.n	800472e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2240      	movs	r2, #64	@ 0x40
 8004722:	2100      	movs	r1, #0
 8004724:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	0018      	movs	r0, r3
 800472a:	f7ff fb35 	bl	8003d98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2241      	movs	r2, #65	@ 0x41
 8004732:	2124      	movs	r1, #36	@ 0x24
 8004734:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2101      	movs	r1, #1
 8004742:	438a      	bics	r2, r1
 8004744:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4934      	ldr	r1, [pc, #208]	@ (8004820 <HAL_I2C_Init+0x120>)
 8004750:	400a      	ands	r2, r1
 8004752:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4931      	ldr	r1, [pc, #196]	@ (8004824 <HAL_I2C_Init+0x124>)
 8004760:	400a      	ands	r2, r1
 8004762:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d108      	bne.n	800477e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2180      	movs	r1, #128	@ 0x80
 8004776:	0209      	lsls	r1, r1, #8
 8004778:	430a      	orrs	r2, r1
 800477a:	609a      	str	r2, [r3, #8]
 800477c:	e007      	b.n	800478e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689a      	ldr	r2, [r3, #8]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2184      	movs	r1, #132	@ 0x84
 8004788:	0209      	lsls	r1, r1, #8
 800478a:	430a      	orrs	r2, r1
 800478c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	2b02      	cmp	r3, #2
 8004794:	d104      	bne.n	80047a0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2280      	movs	r2, #128	@ 0x80
 800479c:	0112      	lsls	r2, r2, #4
 800479e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	491f      	ldr	r1, [pc, #124]	@ (8004828 <HAL_I2C_Init+0x128>)
 80047ac:	430a      	orrs	r2, r1
 80047ae:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	491a      	ldr	r1, [pc, #104]	@ (8004824 <HAL_I2C_Init+0x124>)
 80047bc:	400a      	ands	r2, r1
 80047be:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	691a      	ldr	r2, [r3, #16]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	431a      	orrs	r2, r3
 80047ca:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	69d9      	ldr	r1, [r3, #28]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1a      	ldr	r2, [r3, #32]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2101      	movs	r1, #1
 80047f6:	430a      	orrs	r2, r1
 80047f8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2241      	movs	r2, #65	@ 0x41
 8004804:	2120      	movs	r1, #32
 8004806:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2242      	movs	r2, #66	@ 0x42
 8004812:	2100      	movs	r1, #0
 8004814:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	0018      	movs	r0, r3
 800481a:	46bd      	mov	sp, r7
 800481c:	b002      	add	sp, #8
 800481e:	bd80      	pop	{r7, pc}
 8004820:	f0ffffff 	.word	0xf0ffffff
 8004824:	ffff7fff 	.word	0xffff7fff
 8004828:	02008000 	.word	0x02008000

0800482c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800482c:	b590      	push	{r4, r7, lr}
 800482e:	b089      	sub	sp, #36	@ 0x24
 8004830:	af02      	add	r7, sp, #8
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	0008      	movs	r0, r1
 8004836:	607a      	str	r2, [r7, #4]
 8004838:	0019      	movs	r1, r3
 800483a:	230a      	movs	r3, #10
 800483c:	18fb      	adds	r3, r7, r3
 800483e:	1c02      	adds	r2, r0, #0
 8004840:	801a      	strh	r2, [r3, #0]
 8004842:	2308      	movs	r3, #8
 8004844:	18fb      	adds	r3, r7, r3
 8004846:	1c0a      	adds	r2, r1, #0
 8004848:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2241      	movs	r2, #65	@ 0x41
 800484e:	5c9b      	ldrb	r3, [r3, r2]
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b20      	cmp	r3, #32
 8004854:	d000      	beq.n	8004858 <HAL_I2C_Master_Transmit+0x2c>
 8004856:	e0e7      	b.n	8004a28 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2240      	movs	r2, #64	@ 0x40
 800485c:	5c9b      	ldrb	r3, [r3, r2]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d101      	bne.n	8004866 <HAL_I2C_Master_Transmit+0x3a>
 8004862:	2302      	movs	r3, #2
 8004864:	e0e1      	b.n	8004a2a <HAL_I2C_Master_Transmit+0x1fe>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2240      	movs	r2, #64	@ 0x40
 800486a:	2101      	movs	r1, #1
 800486c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800486e:	f7ff fca9 	bl	80041c4 <HAL_GetTick>
 8004872:	0003      	movs	r3, r0
 8004874:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004876:	2380      	movs	r3, #128	@ 0x80
 8004878:	0219      	lsls	r1, r3, #8
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	2319      	movs	r3, #25
 8004882:	2201      	movs	r2, #1
 8004884:	f000 fa04 	bl	8004c90 <I2C_WaitOnFlagUntilTimeout>
 8004888:	1e03      	subs	r3, r0, #0
 800488a:	d001      	beq.n	8004890 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e0cc      	b.n	8004a2a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2241      	movs	r2, #65	@ 0x41
 8004894:	2121      	movs	r1, #33	@ 0x21
 8004896:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2242      	movs	r2, #66	@ 0x42
 800489c:	2110      	movs	r1, #16
 800489e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2208      	movs	r2, #8
 80048b0:	18ba      	adds	r2, r7, r2
 80048b2:	8812      	ldrh	r2, [r2, #0]
 80048b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	2bff      	cmp	r3, #255	@ 0xff
 80048c4:	d911      	bls.n	80048ea <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	22ff      	movs	r2, #255	@ 0xff
 80048ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	2380      	movs	r3, #128	@ 0x80
 80048d4:	045c      	lsls	r4, r3, #17
 80048d6:	230a      	movs	r3, #10
 80048d8:	18fb      	adds	r3, r7, r3
 80048da:	8819      	ldrh	r1, [r3, #0]
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	4b55      	ldr	r3, [pc, #340]	@ (8004a34 <HAL_I2C_Master_Transmit+0x208>)
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	0023      	movs	r3, r4
 80048e4:	f000 fc26 	bl	8005134 <I2C_TransferConfig>
 80048e8:	e075      	b.n	80049d6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048f8:	b2da      	uxtb	r2, r3
 80048fa:	2380      	movs	r3, #128	@ 0x80
 80048fc:	049c      	lsls	r4, r3, #18
 80048fe:	230a      	movs	r3, #10
 8004900:	18fb      	adds	r3, r7, r3
 8004902:	8819      	ldrh	r1, [r3, #0]
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	4b4b      	ldr	r3, [pc, #300]	@ (8004a34 <HAL_I2C_Master_Transmit+0x208>)
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	0023      	movs	r3, r4
 800490c:	f000 fc12 	bl	8005134 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004910:	e061      	b.n	80049d6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	0018      	movs	r0, r3
 800491a:	f000 fa07 	bl	8004d2c <I2C_WaitOnTXISFlagUntilTimeout>
 800491e:	1e03      	subs	r3, r0, #0
 8004920:	d001      	beq.n	8004926 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e081      	b.n	8004a2a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492a:	781a      	ldrb	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004940:	b29b      	uxth	r3, r3
 8004942:	3b01      	subs	r3, #1
 8004944:	b29a      	uxth	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800494e:	3b01      	subs	r3, #1
 8004950:	b29a      	uxth	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800495a:	b29b      	uxth	r3, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	d03a      	beq.n	80049d6 <HAL_I2C_Master_Transmit+0x1aa>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004964:	2b00      	cmp	r3, #0
 8004966:	d136      	bne.n	80049d6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004968:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	0013      	movs	r3, r2
 8004972:	2200      	movs	r2, #0
 8004974:	2180      	movs	r1, #128	@ 0x80
 8004976:	f000 f98b 	bl	8004c90 <I2C_WaitOnFlagUntilTimeout>
 800497a:	1e03      	subs	r3, r0, #0
 800497c:	d001      	beq.n	8004982 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e053      	b.n	8004a2a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004986:	b29b      	uxth	r3, r3
 8004988:	2bff      	cmp	r3, #255	@ 0xff
 800498a:	d911      	bls.n	80049b0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	22ff      	movs	r2, #255	@ 0xff
 8004990:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004996:	b2da      	uxtb	r2, r3
 8004998:	2380      	movs	r3, #128	@ 0x80
 800499a:	045c      	lsls	r4, r3, #17
 800499c:	230a      	movs	r3, #10
 800499e:	18fb      	adds	r3, r7, r3
 80049a0:	8819      	ldrh	r1, [r3, #0]
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	2300      	movs	r3, #0
 80049a6:	9300      	str	r3, [sp, #0]
 80049a8:	0023      	movs	r3, r4
 80049aa:	f000 fbc3 	bl	8005134 <I2C_TransferConfig>
 80049ae:	e012      	b.n	80049d6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049be:	b2da      	uxtb	r2, r3
 80049c0:	2380      	movs	r3, #128	@ 0x80
 80049c2:	049c      	lsls	r4, r3, #18
 80049c4:	230a      	movs	r3, #10
 80049c6:	18fb      	adds	r3, r7, r3
 80049c8:	8819      	ldrh	r1, [r3, #0]
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	2300      	movs	r3, #0
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	0023      	movs	r3, r4
 80049d2:	f000 fbaf 	bl	8005134 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049da:	b29b      	uxth	r3, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d198      	bne.n	8004912 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	0018      	movs	r0, r3
 80049e8:	f000 f9e6 	bl	8004db8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80049ec:	1e03      	subs	r3, r0, #0
 80049ee:	d001      	beq.n	80049f4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e01a      	b.n	8004a2a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2220      	movs	r2, #32
 80049fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	490c      	ldr	r1, [pc, #48]	@ (8004a38 <HAL_I2C_Master_Transmit+0x20c>)
 8004a08:	400a      	ands	r2, r1
 8004a0a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2241      	movs	r2, #65	@ 0x41
 8004a10:	2120      	movs	r1, #32
 8004a12:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2242      	movs	r2, #66	@ 0x42
 8004a18:	2100      	movs	r1, #0
 8004a1a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2240      	movs	r2, #64	@ 0x40
 8004a20:	2100      	movs	r1, #0
 8004a22:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004a24:	2300      	movs	r3, #0
 8004a26:	e000      	b.n	8004a2a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8004a28:	2302      	movs	r3, #2
  }
}
 8004a2a:	0018      	movs	r0, r3
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	b007      	add	sp, #28
 8004a30:	bd90      	pop	{r4, r7, pc}
 8004a32:	46c0      	nop			@ (mov r8, r8)
 8004a34:	80002000 	.word	0x80002000
 8004a38:	fe00e800 	.word	0xfe00e800

08004a3c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004a3c:	b590      	push	{r4, r7, lr}
 8004a3e:	b089      	sub	sp, #36	@ 0x24
 8004a40:	af02      	add	r7, sp, #8
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	0008      	movs	r0, r1
 8004a46:	607a      	str	r2, [r7, #4]
 8004a48:	0019      	movs	r1, r3
 8004a4a:	230a      	movs	r3, #10
 8004a4c:	18fb      	adds	r3, r7, r3
 8004a4e:	1c02      	adds	r2, r0, #0
 8004a50:	801a      	strh	r2, [r3, #0]
 8004a52:	2308      	movs	r3, #8
 8004a54:	18fb      	adds	r3, r7, r3
 8004a56:	1c0a      	adds	r2, r1, #0
 8004a58:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2241      	movs	r2, #65	@ 0x41
 8004a5e:	5c9b      	ldrb	r3, [r3, r2]
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b20      	cmp	r3, #32
 8004a64:	d000      	beq.n	8004a68 <HAL_I2C_Master_Receive+0x2c>
 8004a66:	e0e8      	b.n	8004c3a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2240      	movs	r2, #64	@ 0x40
 8004a6c:	5c9b      	ldrb	r3, [r3, r2]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d101      	bne.n	8004a76 <HAL_I2C_Master_Receive+0x3a>
 8004a72:	2302      	movs	r3, #2
 8004a74:	e0e2      	b.n	8004c3c <HAL_I2C_Master_Receive+0x200>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2240      	movs	r2, #64	@ 0x40
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a7e:	f7ff fba1 	bl	80041c4 <HAL_GetTick>
 8004a82:	0003      	movs	r3, r0
 8004a84:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a86:	2380      	movs	r3, #128	@ 0x80
 8004a88:	0219      	lsls	r1, r3, #8
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	2319      	movs	r3, #25
 8004a92:	2201      	movs	r2, #1
 8004a94:	f000 f8fc 	bl	8004c90 <I2C_WaitOnFlagUntilTimeout>
 8004a98:	1e03      	subs	r3, r0, #0
 8004a9a:	d001      	beq.n	8004aa0 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e0cd      	b.n	8004c3c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2241      	movs	r2, #65	@ 0x41
 8004aa4:	2122      	movs	r1, #34	@ 0x22
 8004aa6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2242      	movs	r2, #66	@ 0x42
 8004aac:	2110      	movs	r1, #16
 8004aae:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2208      	movs	r2, #8
 8004ac0:	18ba      	adds	r2, r7, r2
 8004ac2:	8812      	ldrh	r2, [r2, #0]
 8004ac4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	2bff      	cmp	r3, #255	@ 0xff
 8004ad4:	d911      	bls.n	8004afa <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	22ff      	movs	r2, #255	@ 0xff
 8004ada:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ae0:	b2da      	uxtb	r2, r3
 8004ae2:	2380      	movs	r3, #128	@ 0x80
 8004ae4:	045c      	lsls	r4, r3, #17
 8004ae6:	230a      	movs	r3, #10
 8004ae8:	18fb      	adds	r3, r7, r3
 8004aea:	8819      	ldrh	r1, [r3, #0]
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	4b55      	ldr	r3, [pc, #340]	@ (8004c44 <HAL_I2C_Master_Receive+0x208>)
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	0023      	movs	r3, r4
 8004af4:	f000 fb1e 	bl	8005134 <I2C_TransferConfig>
 8004af8:	e076      	b.n	8004be8 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	2380      	movs	r3, #128	@ 0x80
 8004b0c:	049c      	lsls	r4, r3, #18
 8004b0e:	230a      	movs	r3, #10
 8004b10:	18fb      	adds	r3, r7, r3
 8004b12:	8819      	ldrh	r1, [r3, #0]
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	4b4b      	ldr	r3, [pc, #300]	@ (8004c44 <HAL_I2C_Master_Receive+0x208>)
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	0023      	movs	r3, r4
 8004b1c:	f000 fb0a 	bl	8005134 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004b20:	e062      	b.n	8004be8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	0018      	movs	r0, r3
 8004b2a:	f000 f989 	bl	8004e40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b2e:	1e03      	subs	r3, r0, #0
 8004b30:	d001      	beq.n	8004b36 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e082      	b.n	8004c3c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b40:	b2d2      	uxtb	r2, r2
 8004b42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b48:	1c5a      	adds	r2, r3, #1
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b52:	3b01      	subs	r3, #1
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	3b01      	subs	r3, #1
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d03a      	beq.n	8004be8 <HAL_I2C_Master_Receive+0x1ac>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d136      	bne.n	8004be8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	0013      	movs	r3, r2
 8004b84:	2200      	movs	r2, #0
 8004b86:	2180      	movs	r1, #128	@ 0x80
 8004b88:	f000 f882 	bl	8004c90 <I2C_WaitOnFlagUntilTimeout>
 8004b8c:	1e03      	subs	r3, r0, #0
 8004b8e:	d001      	beq.n	8004b94 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e053      	b.n	8004c3c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	2bff      	cmp	r3, #255	@ 0xff
 8004b9c:	d911      	bls.n	8004bc2 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	22ff      	movs	r2, #255	@ 0xff
 8004ba2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	2380      	movs	r3, #128	@ 0x80
 8004bac:	045c      	lsls	r4, r3, #17
 8004bae:	230a      	movs	r3, #10
 8004bb0:	18fb      	adds	r3, r7, r3
 8004bb2:	8819      	ldrh	r1, [r3, #0]
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	0023      	movs	r3, r4
 8004bbc:	f000 faba 	bl	8005134 <I2C_TransferConfig>
 8004bc0:	e012      	b.n	8004be8 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	2380      	movs	r3, #128	@ 0x80
 8004bd4:	049c      	lsls	r4, r3, #18
 8004bd6:	230a      	movs	r3, #10
 8004bd8:	18fb      	adds	r3, r7, r3
 8004bda:	8819      	ldrh	r1, [r3, #0]
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	2300      	movs	r3, #0
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	0023      	movs	r3, r4
 8004be4:	f000 faa6 	bl	8005134 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d197      	bne.n	8004b22 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	f000 f8dd 	bl	8004db8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004bfe:	1e03      	subs	r3, r0, #0
 8004c00:	d001      	beq.n	8004c06 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e01a      	b.n	8004c3c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	490b      	ldr	r1, [pc, #44]	@ (8004c48 <HAL_I2C_Master_Receive+0x20c>)
 8004c1a:	400a      	ands	r2, r1
 8004c1c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2241      	movs	r2, #65	@ 0x41
 8004c22:	2120      	movs	r1, #32
 8004c24:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2242      	movs	r2, #66	@ 0x42
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2240      	movs	r2, #64	@ 0x40
 8004c32:	2100      	movs	r1, #0
 8004c34:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004c36:	2300      	movs	r3, #0
 8004c38:	e000      	b.n	8004c3c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8004c3a:	2302      	movs	r3, #2
  }
}
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	b007      	add	sp, #28
 8004c42:	bd90      	pop	{r4, r7, pc}
 8004c44:	80002400 	.word	0x80002400
 8004c48:	fe00e800 	.word	0xfe00e800

08004c4c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d103      	bne.n	8004c6a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2200      	movs	r2, #0
 8004c68:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	2201      	movs	r2, #1
 8004c72:	4013      	ands	r3, r2
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d007      	beq.n	8004c88 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699a      	ldr	r2, [r3, #24]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2101      	movs	r1, #1
 8004c84:	430a      	orrs	r2, r1
 8004c86:	619a      	str	r2, [r3, #24]
  }
}
 8004c88:	46c0      	nop			@ (mov r8, r8)
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	b002      	add	sp, #8
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	603b      	str	r3, [r7, #0]
 8004c9c:	1dfb      	adds	r3, r7, #7
 8004c9e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ca0:	e030      	b.n	8004d04 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	d02d      	beq.n	8004d04 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca8:	f7ff fa8c 	bl	80041c4 <HAL_GetTick>
 8004cac:	0002      	movs	r2, r0
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d302      	bcc.n	8004cbe <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d122      	bne.n	8004d04 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	68ba      	ldr	r2, [r7, #8]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	425a      	negs	r2, r3
 8004cce:	4153      	adcs	r3, r2
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	001a      	movs	r2, r3
 8004cd4:	1dfb      	adds	r3, r7, #7
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d113      	bne.n	8004d04 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2241      	movs	r2, #65	@ 0x41
 8004cec:	2120      	movs	r1, #32
 8004cee:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2242      	movs	r2, #66	@ 0x42
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2240      	movs	r2, #64	@ 0x40
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e00f      	b.n	8004d24 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	425a      	negs	r2, r3
 8004d14:	4153      	adcs	r3, r2
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	001a      	movs	r2, r3
 8004d1a:	1dfb      	adds	r3, r7, #7
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d0bf      	beq.n	8004ca2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	0018      	movs	r0, r3
 8004d26:	46bd      	mov	sp, r7
 8004d28:	b004      	add	sp, #16
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d38:	e032      	b.n	8004da0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	68b9      	ldr	r1, [r7, #8]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	0018      	movs	r0, r3
 8004d42:	f000 f8ff 	bl	8004f44 <I2C_IsErrorOccurred>
 8004d46:	1e03      	subs	r3, r0, #0
 8004d48:	d001      	beq.n	8004d4e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e030      	b.n	8004db0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	3301      	adds	r3, #1
 8004d52:	d025      	beq.n	8004da0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d54:	f7ff fa36 	bl	80041c4 <HAL_GetTick>
 8004d58:	0002      	movs	r2, r0
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d302      	bcc.n	8004d6a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d11a      	bne.n	8004da0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	2202      	movs	r2, #2
 8004d72:	4013      	ands	r3, r2
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d013      	beq.n	8004da0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2241      	movs	r2, #65	@ 0x41
 8004d88:	2120      	movs	r1, #32
 8004d8a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2242      	movs	r2, #66	@ 0x42
 8004d90:	2100      	movs	r1, #0
 8004d92:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2240      	movs	r2, #64	@ 0x40
 8004d98:	2100      	movs	r1, #0
 8004d9a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e007      	b.n	8004db0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	2202      	movs	r2, #2
 8004da8:	4013      	ands	r3, r2
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d1c5      	bne.n	8004d3a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	0018      	movs	r0, r3
 8004db2:	46bd      	mov	sp, r7
 8004db4:	b004      	add	sp, #16
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004dc4:	e02f      	b.n	8004e26 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	68b9      	ldr	r1, [r7, #8]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	0018      	movs	r0, r3
 8004dce:	f000 f8b9 	bl	8004f44 <I2C_IsErrorOccurred>
 8004dd2:	1e03      	subs	r3, r0, #0
 8004dd4:	d001      	beq.n	8004dda <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e02d      	b.n	8004e36 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dda:	f7ff f9f3 	bl	80041c4 <HAL_GetTick>
 8004dde:	0002      	movs	r2, r0
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d302      	bcc.n	8004df0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d11a      	bne.n	8004e26 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	2220      	movs	r2, #32
 8004df8:	4013      	ands	r3, r2
 8004dfa:	2b20      	cmp	r3, #32
 8004dfc:	d013      	beq.n	8004e26 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e02:	2220      	movs	r2, #32
 8004e04:	431a      	orrs	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2241      	movs	r2, #65	@ 0x41
 8004e0e:	2120      	movs	r1, #32
 8004e10:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2242      	movs	r2, #66	@ 0x42
 8004e16:	2100      	movs	r1, #0
 8004e18:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2240      	movs	r2, #64	@ 0x40
 8004e1e:	2100      	movs	r1, #0
 8004e20:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e007      	b.n	8004e36 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	4013      	ands	r3, r2
 8004e30:	2b20      	cmp	r3, #32
 8004e32:	d1c8      	bne.n	8004dc6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	0018      	movs	r0, r3
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	b004      	add	sp, #16
 8004e3c:	bd80      	pop	{r7, pc}
	...

08004e40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e4c:	e06b      	b.n	8004f26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	68b9      	ldr	r1, [r7, #8]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	0018      	movs	r0, r3
 8004e56:	f000 f875 	bl	8004f44 <I2C_IsErrorOccurred>
 8004e5a:	1e03      	subs	r3, r0, #0
 8004e5c:	d001      	beq.n	8004e62 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e069      	b.n	8004f36 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	2b20      	cmp	r3, #32
 8004e6e:	d138      	bne.n	8004ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	2204      	movs	r2, #4
 8004e78:	4013      	ands	r3, r2
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	d105      	bne.n	8004e8a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	e055      	b.n	8004f36 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	2210      	movs	r2, #16
 8004e92:	4013      	ands	r3, r2
 8004e94:	2b10      	cmp	r3, #16
 8004e96:	d107      	bne.n	8004ea8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2210      	movs	r2, #16
 8004e9e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2204      	movs	r2, #4
 8004ea4:	645a      	str	r2, [r3, #68]	@ 0x44
 8004ea6:	e002      	b.n	8004eae <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	491f      	ldr	r1, [pc, #124]	@ (8004f40 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8004ec2:	400a      	ands	r2, r1
 8004ec4:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2241      	movs	r2, #65	@ 0x41
 8004eca:	2120      	movs	r1, #32
 8004ecc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2242      	movs	r2, #66	@ 0x42
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2240      	movs	r2, #64	@ 0x40
 8004eda:	2100      	movs	r1, #0
 8004edc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e029      	b.n	8004f36 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ee2:	f7ff f96f 	bl	80041c4 <HAL_GetTick>
 8004ee6:	0002      	movs	r2, r0
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d302      	bcc.n	8004ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d116      	bne.n	8004f26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	2204      	movs	r2, #4
 8004f00:	4013      	ands	r3, r2
 8004f02:	2b04      	cmp	r3, #4
 8004f04:	d00f      	beq.n	8004f26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	431a      	orrs	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2241      	movs	r2, #65	@ 0x41
 8004f16:	2120      	movs	r1, #32
 8004f18:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2240      	movs	r2, #64	@ 0x40
 8004f1e:	2100      	movs	r1, #0
 8004f20:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e007      	b.n	8004f36 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	2204      	movs	r2, #4
 8004f2e:	4013      	ands	r3, r2
 8004f30:	2b04      	cmp	r3, #4
 8004f32:	d18c      	bne.n	8004e4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	0018      	movs	r0, r3
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	b004      	add	sp, #16
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	46c0      	nop			@ (mov r8, r8)
 8004f40:	fe00e800 	.word	0xfe00e800

08004f44 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b08a      	sub	sp, #40	@ 0x28
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f50:	2327      	movs	r3, #39	@ 0x27
 8004f52:	18fb      	adds	r3, r7, r3
 8004f54:	2200      	movs	r2, #0
 8004f56:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004f60:	2300      	movs	r3, #0
 8004f62:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	2210      	movs	r2, #16
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	d100      	bne.n	8004f72 <I2C_IsErrorOccurred+0x2e>
 8004f70:	e079      	b.n	8005066 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2210      	movs	r2, #16
 8004f78:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f7a:	e057      	b.n	800502c <I2C_IsErrorOccurred+0xe8>
 8004f7c:	2227      	movs	r2, #39	@ 0x27
 8004f7e:	18bb      	adds	r3, r7, r2
 8004f80:	18ba      	adds	r2, r7, r2
 8004f82:	7812      	ldrb	r2, [r2, #0]
 8004f84:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	d04f      	beq.n	800502c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004f8c:	f7ff f91a 	bl	80041c4 <HAL_GetTick>
 8004f90:	0002      	movs	r2, r0
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d302      	bcc.n	8004fa2 <I2C_IsErrorOccurred+0x5e>
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d144      	bne.n	800502c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	2380      	movs	r3, #128	@ 0x80
 8004faa:	01db      	lsls	r3, r3, #7
 8004fac:	4013      	ands	r3, r2
 8004fae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004fb0:	2013      	movs	r0, #19
 8004fb2:	183b      	adds	r3, r7, r0
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	2142      	movs	r1, #66	@ 0x42
 8004fb8:	5c52      	ldrb	r2, [r2, r1]
 8004fba:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	699a      	ldr	r2, [r3, #24]
 8004fc2:	2380      	movs	r3, #128	@ 0x80
 8004fc4:	021b      	lsls	r3, r3, #8
 8004fc6:	401a      	ands	r2, r3
 8004fc8:	2380      	movs	r3, #128	@ 0x80
 8004fca:	021b      	lsls	r3, r3, #8
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d126      	bne.n	800501e <I2C_IsErrorOccurred+0xda>
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	2380      	movs	r3, #128	@ 0x80
 8004fd4:	01db      	lsls	r3, r3, #7
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d021      	beq.n	800501e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8004fda:	183b      	adds	r3, r7, r0
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	2b20      	cmp	r3, #32
 8004fe0:	d01d      	beq.n	800501e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2180      	movs	r1, #128	@ 0x80
 8004fee:	01c9      	lsls	r1, r1, #7
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004ff4:	f7ff f8e6 	bl	80041c4 <HAL_GetTick>
 8004ff8:	0003      	movs	r3, r0
 8004ffa:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ffc:	e00f      	b.n	800501e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004ffe:	f7ff f8e1 	bl	80041c4 <HAL_GetTick>
 8005002:	0002      	movs	r2, r0
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b19      	cmp	r3, #25
 800500a:	d908      	bls.n	800501e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	2220      	movs	r2, #32
 8005010:	4313      	orrs	r3, r2
 8005012:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005014:	2327      	movs	r3, #39	@ 0x27
 8005016:	18fb      	adds	r3, r7, r3
 8005018:	2201      	movs	r2, #1
 800501a:	701a      	strb	r2, [r3, #0]

              break;
 800501c:	e006      	b.n	800502c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	2220      	movs	r2, #32
 8005026:	4013      	ands	r3, r2
 8005028:	2b20      	cmp	r3, #32
 800502a:	d1e8      	bne.n	8004ffe <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	2220      	movs	r2, #32
 8005034:	4013      	ands	r3, r2
 8005036:	2b20      	cmp	r3, #32
 8005038:	d004      	beq.n	8005044 <I2C_IsErrorOccurred+0x100>
 800503a:	2327      	movs	r3, #39	@ 0x27
 800503c:	18fb      	adds	r3, r7, r3
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d09b      	beq.n	8004f7c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005044:	2327      	movs	r3, #39	@ 0x27
 8005046:	18fb      	adds	r3, r7, r3
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d103      	bne.n	8005056 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2220      	movs	r2, #32
 8005054:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	2204      	movs	r2, #4
 800505a:	4313      	orrs	r3, r2
 800505c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800505e:	2327      	movs	r3, #39	@ 0x27
 8005060:	18fb      	adds	r3, r7, r3
 8005062:	2201      	movs	r2, #1
 8005064:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	2380      	movs	r3, #128	@ 0x80
 8005072:	005b      	lsls	r3, r3, #1
 8005074:	4013      	ands	r3, r2
 8005076:	d00c      	beq.n	8005092 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	2201      	movs	r2, #1
 800507c:	4313      	orrs	r3, r2
 800507e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2280      	movs	r2, #128	@ 0x80
 8005086:	0052      	lsls	r2, r2, #1
 8005088:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800508a:	2327      	movs	r3, #39	@ 0x27
 800508c:	18fb      	adds	r3, r7, r3
 800508e:	2201      	movs	r2, #1
 8005090:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	2380      	movs	r3, #128	@ 0x80
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	4013      	ands	r3, r2
 800509a:	d00c      	beq.n	80050b6 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	2208      	movs	r2, #8
 80050a0:	4313      	orrs	r3, r2
 80050a2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2280      	movs	r2, #128	@ 0x80
 80050aa:	00d2      	lsls	r2, r2, #3
 80050ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80050ae:	2327      	movs	r3, #39	@ 0x27
 80050b0:	18fb      	adds	r3, r7, r3
 80050b2:	2201      	movs	r2, #1
 80050b4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80050b6:	69ba      	ldr	r2, [r7, #24]
 80050b8:	2380      	movs	r3, #128	@ 0x80
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4013      	ands	r3, r2
 80050be:	d00c      	beq.n	80050da <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	2202      	movs	r2, #2
 80050c4:	4313      	orrs	r3, r2
 80050c6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2280      	movs	r2, #128	@ 0x80
 80050ce:	0092      	lsls	r2, r2, #2
 80050d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80050d2:	2327      	movs	r3, #39	@ 0x27
 80050d4:	18fb      	adds	r3, r7, r3
 80050d6:	2201      	movs	r2, #1
 80050d8:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80050da:	2327      	movs	r3, #39	@ 0x27
 80050dc:	18fb      	adds	r3, r7, r3
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d01d      	beq.n	8005120 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	0018      	movs	r0, r3
 80050e8:	f7ff fdb0 	bl	8004c4c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	490e      	ldr	r1, [pc, #56]	@ (8005130 <I2C_IsErrorOccurred+0x1ec>)
 80050f8:	400a      	ands	r2, r1
 80050fa:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005100:	6a3b      	ldr	r3, [r7, #32]
 8005102:	431a      	orrs	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2241      	movs	r2, #65	@ 0x41
 800510c:	2120      	movs	r1, #32
 800510e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2242      	movs	r2, #66	@ 0x42
 8005114:	2100      	movs	r1, #0
 8005116:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2240      	movs	r2, #64	@ 0x40
 800511c:	2100      	movs	r1, #0
 800511e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005120:	2327      	movs	r3, #39	@ 0x27
 8005122:	18fb      	adds	r3, r7, r3
 8005124:	781b      	ldrb	r3, [r3, #0]
}
 8005126:	0018      	movs	r0, r3
 8005128:	46bd      	mov	sp, r7
 800512a:	b00a      	add	sp, #40	@ 0x28
 800512c:	bd80      	pop	{r7, pc}
 800512e:	46c0      	nop			@ (mov r8, r8)
 8005130:	fe00e800 	.word	0xfe00e800

08005134 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005134:	b590      	push	{r4, r7, lr}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	0008      	movs	r0, r1
 800513e:	0011      	movs	r1, r2
 8005140:	607b      	str	r3, [r7, #4]
 8005142:	240a      	movs	r4, #10
 8005144:	193b      	adds	r3, r7, r4
 8005146:	1c02      	adds	r2, r0, #0
 8005148:	801a      	strh	r2, [r3, #0]
 800514a:	2009      	movs	r0, #9
 800514c:	183b      	adds	r3, r7, r0
 800514e:	1c0a      	adds	r2, r1, #0
 8005150:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005152:	193b      	adds	r3, r7, r4
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	059b      	lsls	r3, r3, #22
 8005158:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800515a:	183b      	adds	r3, r7, r0
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	0419      	lsls	r1, r3, #16
 8005160:	23ff      	movs	r3, #255	@ 0xff
 8005162:	041b      	lsls	r3, r3, #16
 8005164:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005166:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800516c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800516e:	4313      	orrs	r3, r2
 8005170:	005b      	lsls	r3, r3, #1
 8005172:	085b      	lsrs	r3, r3, #1
 8005174:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800517e:	0d51      	lsrs	r1, r2, #21
 8005180:	2280      	movs	r2, #128	@ 0x80
 8005182:	00d2      	lsls	r2, r2, #3
 8005184:	400a      	ands	r2, r1
 8005186:	4907      	ldr	r1, [pc, #28]	@ (80051a4 <I2C_TransferConfig+0x70>)
 8005188:	430a      	orrs	r2, r1
 800518a:	43d2      	mvns	r2, r2
 800518c:	401a      	ands	r2, r3
 800518e:	0011      	movs	r1, r2
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	430a      	orrs	r2, r1
 8005198:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800519a:	46c0      	nop			@ (mov r8, r8)
 800519c:	46bd      	mov	sp, r7
 800519e:	b007      	add	sp, #28
 80051a0:	bd90      	pop	{r4, r7, pc}
 80051a2:	46c0      	nop			@ (mov r8, r8)
 80051a4:	03ff63ff 	.word	0x03ff63ff

080051a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2241      	movs	r2, #65	@ 0x41
 80051b6:	5c9b      	ldrb	r3, [r3, r2]
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b20      	cmp	r3, #32
 80051bc:	d138      	bne.n	8005230 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2240      	movs	r2, #64	@ 0x40
 80051c2:	5c9b      	ldrb	r3, [r3, r2]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d101      	bne.n	80051cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80051c8:	2302      	movs	r3, #2
 80051ca:	e032      	b.n	8005232 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2240      	movs	r2, #64	@ 0x40
 80051d0:	2101      	movs	r1, #1
 80051d2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2241      	movs	r2, #65	@ 0x41
 80051d8:	2124      	movs	r1, #36	@ 0x24
 80051da:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2101      	movs	r1, #1
 80051e8:	438a      	bics	r2, r1
 80051ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4911      	ldr	r1, [pc, #68]	@ (800523c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80051f8:	400a      	ands	r2, r1
 80051fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6819      	ldr	r1, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2101      	movs	r1, #1
 8005218:	430a      	orrs	r2, r1
 800521a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2241      	movs	r2, #65	@ 0x41
 8005220:	2120      	movs	r1, #32
 8005222:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2240      	movs	r2, #64	@ 0x40
 8005228:	2100      	movs	r1, #0
 800522a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800522c:	2300      	movs	r3, #0
 800522e:	e000      	b.n	8005232 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005230:	2302      	movs	r3, #2
  }
}
 8005232:	0018      	movs	r0, r3
 8005234:	46bd      	mov	sp, r7
 8005236:	b002      	add	sp, #8
 8005238:	bd80      	pop	{r7, pc}
 800523a:	46c0      	nop			@ (mov r8, r8)
 800523c:	ffffefff 	.word	0xffffefff

08005240 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2241      	movs	r2, #65	@ 0x41
 800524e:	5c9b      	ldrb	r3, [r3, r2]
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b20      	cmp	r3, #32
 8005254:	d139      	bne.n	80052ca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2240      	movs	r2, #64	@ 0x40
 800525a:	5c9b      	ldrb	r3, [r3, r2]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d101      	bne.n	8005264 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005260:	2302      	movs	r3, #2
 8005262:	e033      	b.n	80052cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2240      	movs	r2, #64	@ 0x40
 8005268:	2101      	movs	r1, #1
 800526a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2241      	movs	r2, #65	@ 0x41
 8005270:	2124      	movs	r1, #36	@ 0x24
 8005272:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2101      	movs	r1, #1
 8005280:	438a      	bics	r2, r1
 8005282:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4a11      	ldr	r2, [pc, #68]	@ (80052d4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005290:	4013      	ands	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	021b      	lsls	r3, r3, #8
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	4313      	orrs	r3, r2
 800529c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2101      	movs	r1, #1
 80052b2:	430a      	orrs	r2, r1
 80052b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2241      	movs	r2, #65	@ 0x41
 80052ba:	2120      	movs	r1, #32
 80052bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2240      	movs	r2, #64	@ 0x40
 80052c2:	2100      	movs	r1, #0
 80052c4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80052c6:	2300      	movs	r3, #0
 80052c8:	e000      	b.n	80052cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80052ca:	2302      	movs	r3, #2
  }
}
 80052cc:	0018      	movs	r0, r3
 80052ce:	46bd      	mov	sp, r7
 80052d0:	b004      	add	sp, #16
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	fffff0ff 	.word	0xfffff0ff

080052d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052d8:	b5b0      	push	{r4, r5, r7, lr}
 80052da:	b08a      	sub	sp, #40	@ 0x28
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d102      	bne.n	80052ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	f000 fbbf 	bl	8005a6a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052ec:	4bc9      	ldr	r3, [pc, #804]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	220c      	movs	r2, #12
 80052f2:	4013      	ands	r3, r2
 80052f4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052f6:	4bc7      	ldr	r3, [pc, #796]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 80052f8:	68da      	ldr	r2, [r3, #12]
 80052fa:	2380      	movs	r3, #128	@ 0x80
 80052fc:	025b      	lsls	r3, r3, #9
 80052fe:	4013      	ands	r3, r2
 8005300:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2201      	movs	r2, #1
 8005308:	4013      	ands	r3, r2
 800530a:	d100      	bne.n	800530e <HAL_RCC_OscConfig+0x36>
 800530c:	e07e      	b.n	800540c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	2b08      	cmp	r3, #8
 8005312:	d007      	beq.n	8005324 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	2b0c      	cmp	r3, #12
 8005318:	d112      	bne.n	8005340 <HAL_RCC_OscConfig+0x68>
 800531a:	69ba      	ldr	r2, [r7, #24]
 800531c:	2380      	movs	r3, #128	@ 0x80
 800531e:	025b      	lsls	r3, r3, #9
 8005320:	429a      	cmp	r2, r3
 8005322:	d10d      	bne.n	8005340 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005324:	4bbb      	ldr	r3, [pc, #748]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	2380      	movs	r3, #128	@ 0x80
 800532a:	029b      	lsls	r3, r3, #10
 800532c:	4013      	ands	r3, r2
 800532e:	d100      	bne.n	8005332 <HAL_RCC_OscConfig+0x5a>
 8005330:	e06b      	b.n	800540a <HAL_RCC_OscConfig+0x132>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d167      	bne.n	800540a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	f000 fb95 	bl	8005a6a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	2380      	movs	r3, #128	@ 0x80
 8005346:	025b      	lsls	r3, r3, #9
 8005348:	429a      	cmp	r2, r3
 800534a:	d107      	bne.n	800535c <HAL_RCC_OscConfig+0x84>
 800534c:	4bb1      	ldr	r3, [pc, #708]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	4bb0      	ldr	r3, [pc, #704]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 8005352:	2180      	movs	r1, #128	@ 0x80
 8005354:	0249      	lsls	r1, r1, #9
 8005356:	430a      	orrs	r2, r1
 8005358:	601a      	str	r2, [r3, #0]
 800535a:	e027      	b.n	80053ac <HAL_RCC_OscConfig+0xd4>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	23a0      	movs	r3, #160	@ 0xa0
 8005362:	02db      	lsls	r3, r3, #11
 8005364:	429a      	cmp	r2, r3
 8005366:	d10e      	bne.n	8005386 <HAL_RCC_OscConfig+0xae>
 8005368:	4baa      	ldr	r3, [pc, #680]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	4ba9      	ldr	r3, [pc, #676]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 800536e:	2180      	movs	r1, #128	@ 0x80
 8005370:	02c9      	lsls	r1, r1, #11
 8005372:	430a      	orrs	r2, r1
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	4ba7      	ldr	r3, [pc, #668]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	4ba6      	ldr	r3, [pc, #664]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 800537c:	2180      	movs	r1, #128	@ 0x80
 800537e:	0249      	lsls	r1, r1, #9
 8005380:	430a      	orrs	r2, r1
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	e012      	b.n	80053ac <HAL_RCC_OscConfig+0xd4>
 8005386:	4ba3      	ldr	r3, [pc, #652]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	4ba2      	ldr	r3, [pc, #648]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 800538c:	49a2      	ldr	r1, [pc, #648]	@ (8005618 <HAL_RCC_OscConfig+0x340>)
 800538e:	400a      	ands	r2, r1
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	4ba0      	ldr	r3, [pc, #640]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	2380      	movs	r3, #128	@ 0x80
 8005398:	025b      	lsls	r3, r3, #9
 800539a:	4013      	ands	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	4b9c      	ldr	r3, [pc, #624]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	4b9b      	ldr	r3, [pc, #620]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 80053a6:	499d      	ldr	r1, [pc, #628]	@ (800561c <HAL_RCC_OscConfig+0x344>)
 80053a8:	400a      	ands	r2, r1
 80053aa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d015      	beq.n	80053e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b4:	f7fe ff06 	bl	80041c4 <HAL_GetTick>
 80053b8:	0003      	movs	r3, r0
 80053ba:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053bc:	e009      	b.n	80053d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053be:	f7fe ff01 	bl	80041c4 <HAL_GetTick>
 80053c2:	0002      	movs	r2, r0
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	2b64      	cmp	r3, #100	@ 0x64
 80053ca:	d902      	bls.n	80053d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	f000 fb4c 	bl	8005a6a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053d2:	4b90      	ldr	r3, [pc, #576]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	2380      	movs	r3, #128	@ 0x80
 80053d8:	029b      	lsls	r3, r3, #10
 80053da:	4013      	ands	r3, r2
 80053dc:	d0ef      	beq.n	80053be <HAL_RCC_OscConfig+0xe6>
 80053de:	e015      	b.n	800540c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e0:	f7fe fef0 	bl	80041c4 <HAL_GetTick>
 80053e4:	0003      	movs	r3, r0
 80053e6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053e8:	e008      	b.n	80053fc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053ea:	f7fe feeb 	bl	80041c4 <HAL_GetTick>
 80053ee:	0002      	movs	r2, r0
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b64      	cmp	r3, #100	@ 0x64
 80053f6:	d901      	bls.n	80053fc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e336      	b.n	8005a6a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053fc:	4b85      	ldr	r3, [pc, #532]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	2380      	movs	r3, #128	@ 0x80
 8005402:	029b      	lsls	r3, r3, #10
 8005404:	4013      	ands	r3, r2
 8005406:	d1f0      	bne.n	80053ea <HAL_RCC_OscConfig+0x112>
 8005408:	e000      	b.n	800540c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800540a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2202      	movs	r2, #2
 8005412:	4013      	ands	r3, r2
 8005414:	d100      	bne.n	8005418 <HAL_RCC_OscConfig+0x140>
 8005416:	e099      	b.n	800554c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800541e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005420:	2220      	movs	r2, #32
 8005422:	4013      	ands	r3, r2
 8005424:	d009      	beq.n	800543a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005426:	4b7b      	ldr	r3, [pc, #492]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	4b7a      	ldr	r3, [pc, #488]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 800542c:	2120      	movs	r1, #32
 800542e:	430a      	orrs	r2, r1
 8005430:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8005432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005434:	2220      	movs	r2, #32
 8005436:	4393      	bics	r3, r2
 8005438:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	2b04      	cmp	r3, #4
 800543e:	d005      	beq.n	800544c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	2b0c      	cmp	r3, #12
 8005444:	d13e      	bne.n	80054c4 <HAL_RCC_OscConfig+0x1ec>
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d13b      	bne.n	80054c4 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800544c:	4b71      	ldr	r3, [pc, #452]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2204      	movs	r2, #4
 8005452:	4013      	ands	r3, r2
 8005454:	d004      	beq.n	8005460 <HAL_RCC_OscConfig+0x188>
 8005456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e304      	b.n	8005a6a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005460:	4b6c      	ldr	r3, [pc, #432]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	4a6e      	ldr	r2, [pc, #440]	@ (8005620 <HAL_RCC_OscConfig+0x348>)
 8005466:	4013      	ands	r3, r2
 8005468:	0019      	movs	r1, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	021a      	lsls	r2, r3, #8
 8005470:	4b68      	ldr	r3, [pc, #416]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 8005472:	430a      	orrs	r2, r1
 8005474:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005476:	4b67      	ldr	r3, [pc, #412]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2209      	movs	r2, #9
 800547c:	4393      	bics	r3, r2
 800547e:	0019      	movs	r1, r3
 8005480:	4b64      	ldr	r3, [pc, #400]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 8005482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005484:	430a      	orrs	r2, r1
 8005486:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005488:	f000 fc42 	bl	8005d10 <HAL_RCC_GetSysClockFreq>
 800548c:	0001      	movs	r1, r0
 800548e:	4b61      	ldr	r3, [pc, #388]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	091b      	lsrs	r3, r3, #4
 8005494:	220f      	movs	r2, #15
 8005496:	4013      	ands	r3, r2
 8005498:	4a62      	ldr	r2, [pc, #392]	@ (8005624 <HAL_RCC_OscConfig+0x34c>)
 800549a:	5cd3      	ldrb	r3, [r2, r3]
 800549c:	000a      	movs	r2, r1
 800549e:	40da      	lsrs	r2, r3
 80054a0:	4b61      	ldr	r3, [pc, #388]	@ (8005628 <HAL_RCC_OscConfig+0x350>)
 80054a2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80054a4:	4b61      	ldr	r3, [pc, #388]	@ (800562c <HAL_RCC_OscConfig+0x354>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2513      	movs	r5, #19
 80054aa:	197c      	adds	r4, r7, r5
 80054ac:	0018      	movs	r0, r3
 80054ae:	f7fe fd41 	bl	8003f34 <HAL_InitTick>
 80054b2:	0003      	movs	r3, r0
 80054b4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80054b6:	197b      	adds	r3, r7, r5
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d046      	beq.n	800554c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80054be:	197b      	adds	r3, r7, r5
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	e2d2      	b.n	8005a6a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80054c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d027      	beq.n	800551a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80054ca:	4b52      	ldr	r3, [pc, #328]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2209      	movs	r2, #9
 80054d0:	4393      	bics	r3, r2
 80054d2:	0019      	movs	r1, r3
 80054d4:	4b4f      	ldr	r3, [pc, #316]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 80054d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054d8:	430a      	orrs	r2, r1
 80054da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054dc:	f7fe fe72 	bl	80041c4 <HAL_GetTick>
 80054e0:	0003      	movs	r3, r0
 80054e2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054e4:	e008      	b.n	80054f8 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054e6:	f7fe fe6d 	bl	80041c4 <HAL_GetTick>
 80054ea:	0002      	movs	r2, r0
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e2b8      	b.n	8005a6a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054f8:	4b46      	ldr	r3, [pc, #280]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2204      	movs	r2, #4
 80054fe:	4013      	ands	r3, r2
 8005500:	d0f1      	beq.n	80054e6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005502:	4b44      	ldr	r3, [pc, #272]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	4a46      	ldr	r2, [pc, #280]	@ (8005620 <HAL_RCC_OscConfig+0x348>)
 8005508:	4013      	ands	r3, r2
 800550a:	0019      	movs	r1, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	021a      	lsls	r2, r3, #8
 8005512:	4b40      	ldr	r3, [pc, #256]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 8005514:	430a      	orrs	r2, r1
 8005516:	605a      	str	r2, [r3, #4]
 8005518:	e018      	b.n	800554c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800551a:	4b3e      	ldr	r3, [pc, #248]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	4b3d      	ldr	r3, [pc, #244]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 8005520:	2101      	movs	r1, #1
 8005522:	438a      	bics	r2, r1
 8005524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005526:	f7fe fe4d 	bl	80041c4 <HAL_GetTick>
 800552a:	0003      	movs	r3, r0
 800552c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800552e:	e008      	b.n	8005542 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005530:	f7fe fe48 	bl	80041c4 <HAL_GetTick>
 8005534:	0002      	movs	r2, r0
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b02      	cmp	r3, #2
 800553c:	d901      	bls.n	8005542 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e293      	b.n	8005a6a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005542:	4b34      	ldr	r3, [pc, #208]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2204      	movs	r2, #4
 8005548:	4013      	ands	r3, r2
 800554a:	d1f1      	bne.n	8005530 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2210      	movs	r2, #16
 8005552:	4013      	ands	r3, r2
 8005554:	d100      	bne.n	8005558 <HAL_RCC_OscConfig+0x280>
 8005556:	e0a2      	b.n	800569e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d140      	bne.n	80055e0 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800555e:	4b2d      	ldr	r3, [pc, #180]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	2380      	movs	r3, #128	@ 0x80
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	4013      	ands	r3, r2
 8005568:	d005      	beq.n	8005576 <HAL_RCC_OscConfig+0x29e>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e279      	b.n	8005a6a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005576:	4b27      	ldr	r3, [pc, #156]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	4a2d      	ldr	r2, [pc, #180]	@ (8005630 <HAL_RCC_OscConfig+0x358>)
 800557c:	4013      	ands	r3, r2
 800557e:	0019      	movs	r1, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005584:	4b23      	ldr	r3, [pc, #140]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 8005586:	430a      	orrs	r2, r1
 8005588:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800558a:	4b22      	ldr	r3, [pc, #136]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	021b      	lsls	r3, r3, #8
 8005590:	0a19      	lsrs	r1, r3, #8
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	061a      	lsls	r2, r3, #24
 8005598:	4b1e      	ldr	r3, [pc, #120]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 800559a:	430a      	orrs	r2, r1
 800559c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a2:	0b5b      	lsrs	r3, r3, #13
 80055a4:	3301      	adds	r3, #1
 80055a6:	2280      	movs	r2, #128	@ 0x80
 80055a8:	0212      	lsls	r2, r2, #8
 80055aa:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80055ac:	4b19      	ldr	r3, [pc, #100]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	091b      	lsrs	r3, r3, #4
 80055b2:	210f      	movs	r1, #15
 80055b4:	400b      	ands	r3, r1
 80055b6:	491b      	ldr	r1, [pc, #108]	@ (8005624 <HAL_RCC_OscConfig+0x34c>)
 80055b8:	5ccb      	ldrb	r3, [r1, r3]
 80055ba:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80055bc:	4b1a      	ldr	r3, [pc, #104]	@ (8005628 <HAL_RCC_OscConfig+0x350>)
 80055be:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80055c0:	4b1a      	ldr	r3, [pc, #104]	@ (800562c <HAL_RCC_OscConfig+0x354>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2513      	movs	r5, #19
 80055c6:	197c      	adds	r4, r7, r5
 80055c8:	0018      	movs	r0, r3
 80055ca:	f7fe fcb3 	bl	8003f34 <HAL_InitTick>
 80055ce:	0003      	movs	r3, r0
 80055d0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80055d2:	197b      	adds	r3, r7, r5
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d061      	beq.n	800569e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80055da:	197b      	adds	r3, r7, r5
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	e244      	b.n	8005a6a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d040      	beq.n	800566a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80055e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	4b09      	ldr	r3, [pc, #36]	@ (8005614 <HAL_RCC_OscConfig+0x33c>)
 80055ee:	2180      	movs	r1, #128	@ 0x80
 80055f0:	0049      	lsls	r1, r1, #1
 80055f2:	430a      	orrs	r2, r1
 80055f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f6:	f7fe fde5 	bl	80041c4 <HAL_GetTick>
 80055fa:	0003      	movs	r3, r0
 80055fc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80055fe:	e019      	b.n	8005634 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005600:	f7fe fde0 	bl	80041c4 <HAL_GetTick>
 8005604:	0002      	movs	r2, r0
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b02      	cmp	r3, #2
 800560c:	d912      	bls.n	8005634 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e22b      	b.n	8005a6a <HAL_RCC_OscConfig+0x792>
 8005612:	46c0      	nop			@ (mov r8, r8)
 8005614:	40021000 	.word	0x40021000
 8005618:	fffeffff 	.word	0xfffeffff
 800561c:	fffbffff 	.word	0xfffbffff
 8005620:	ffffe0ff 	.word	0xffffe0ff
 8005624:	0800c1e0 	.word	0x0800c1e0
 8005628:	20000000 	.word	0x20000000
 800562c:	20000004 	.word	0x20000004
 8005630:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005634:	4bca      	ldr	r3, [pc, #808]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	2380      	movs	r3, #128	@ 0x80
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4013      	ands	r3, r2
 800563e:	d0df      	beq.n	8005600 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005640:	4bc7      	ldr	r3, [pc, #796]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	4ac7      	ldr	r2, [pc, #796]	@ (8005964 <HAL_RCC_OscConfig+0x68c>)
 8005646:	4013      	ands	r3, r2
 8005648:	0019      	movs	r1, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800564e:	4bc4      	ldr	r3, [pc, #784]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 8005650:	430a      	orrs	r2, r1
 8005652:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005654:	4bc2      	ldr	r3, [pc, #776]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	021b      	lsls	r3, r3, #8
 800565a:	0a19      	lsrs	r1, r3, #8
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	061a      	lsls	r2, r3, #24
 8005662:	4bbf      	ldr	r3, [pc, #764]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 8005664:	430a      	orrs	r2, r1
 8005666:	605a      	str	r2, [r3, #4]
 8005668:	e019      	b.n	800569e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800566a:	4bbd      	ldr	r3, [pc, #756]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	4bbc      	ldr	r3, [pc, #752]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 8005670:	49bd      	ldr	r1, [pc, #756]	@ (8005968 <HAL_RCC_OscConfig+0x690>)
 8005672:	400a      	ands	r2, r1
 8005674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005676:	f7fe fda5 	bl	80041c4 <HAL_GetTick>
 800567a:	0003      	movs	r3, r0
 800567c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800567e:	e008      	b.n	8005692 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005680:	f7fe fda0 	bl	80041c4 <HAL_GetTick>
 8005684:	0002      	movs	r2, r0
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b02      	cmp	r3, #2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e1eb      	b.n	8005a6a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005692:	4bb3      	ldr	r3, [pc, #716]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	2380      	movs	r3, #128	@ 0x80
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	4013      	ands	r3, r2
 800569c:	d1f0      	bne.n	8005680 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2208      	movs	r2, #8
 80056a4:	4013      	ands	r3, r2
 80056a6:	d036      	beq.n	8005716 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d019      	beq.n	80056e4 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056b0:	4bab      	ldr	r3, [pc, #684]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 80056b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80056b4:	4baa      	ldr	r3, [pc, #680]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 80056b6:	2101      	movs	r1, #1
 80056b8:	430a      	orrs	r2, r1
 80056ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056bc:	f7fe fd82 	bl	80041c4 <HAL_GetTick>
 80056c0:	0003      	movs	r3, r0
 80056c2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80056c4:	e008      	b.n	80056d8 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056c6:	f7fe fd7d 	bl	80041c4 <HAL_GetTick>
 80056ca:	0002      	movs	r2, r0
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e1c8      	b.n	8005a6a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80056d8:	4ba1      	ldr	r3, [pc, #644]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 80056da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056dc:	2202      	movs	r2, #2
 80056de:	4013      	ands	r3, r2
 80056e0:	d0f1      	beq.n	80056c6 <HAL_RCC_OscConfig+0x3ee>
 80056e2:	e018      	b.n	8005716 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056e4:	4b9e      	ldr	r3, [pc, #632]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 80056e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80056e8:	4b9d      	ldr	r3, [pc, #628]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 80056ea:	2101      	movs	r1, #1
 80056ec:	438a      	bics	r2, r1
 80056ee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056f0:	f7fe fd68 	bl	80041c4 <HAL_GetTick>
 80056f4:	0003      	movs	r3, r0
 80056f6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056f8:	e008      	b.n	800570c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056fa:	f7fe fd63 	bl	80041c4 <HAL_GetTick>
 80056fe:	0002      	movs	r2, r0
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	2b02      	cmp	r3, #2
 8005706:	d901      	bls.n	800570c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e1ae      	b.n	8005a6a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800570c:	4b94      	ldr	r3, [pc, #592]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 800570e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005710:	2202      	movs	r2, #2
 8005712:	4013      	ands	r3, r2
 8005714:	d1f1      	bne.n	80056fa <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2204      	movs	r2, #4
 800571c:	4013      	ands	r3, r2
 800571e:	d100      	bne.n	8005722 <HAL_RCC_OscConfig+0x44a>
 8005720:	e0ae      	b.n	8005880 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005722:	2023      	movs	r0, #35	@ 0x23
 8005724:	183b      	adds	r3, r7, r0
 8005726:	2200      	movs	r2, #0
 8005728:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800572a:	4b8d      	ldr	r3, [pc, #564]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 800572c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800572e:	2380      	movs	r3, #128	@ 0x80
 8005730:	055b      	lsls	r3, r3, #21
 8005732:	4013      	ands	r3, r2
 8005734:	d109      	bne.n	800574a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005736:	4b8a      	ldr	r3, [pc, #552]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 8005738:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800573a:	4b89      	ldr	r3, [pc, #548]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 800573c:	2180      	movs	r1, #128	@ 0x80
 800573e:	0549      	lsls	r1, r1, #21
 8005740:	430a      	orrs	r2, r1
 8005742:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8005744:	183b      	adds	r3, r7, r0
 8005746:	2201      	movs	r2, #1
 8005748:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800574a:	4b88      	ldr	r3, [pc, #544]	@ (800596c <HAL_RCC_OscConfig+0x694>)
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	2380      	movs	r3, #128	@ 0x80
 8005750:	005b      	lsls	r3, r3, #1
 8005752:	4013      	ands	r3, r2
 8005754:	d11a      	bne.n	800578c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005756:	4b85      	ldr	r3, [pc, #532]	@ (800596c <HAL_RCC_OscConfig+0x694>)
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	4b84      	ldr	r3, [pc, #528]	@ (800596c <HAL_RCC_OscConfig+0x694>)
 800575c:	2180      	movs	r1, #128	@ 0x80
 800575e:	0049      	lsls	r1, r1, #1
 8005760:	430a      	orrs	r2, r1
 8005762:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005764:	f7fe fd2e 	bl	80041c4 <HAL_GetTick>
 8005768:	0003      	movs	r3, r0
 800576a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800576c:	e008      	b.n	8005780 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800576e:	f7fe fd29 	bl	80041c4 <HAL_GetTick>
 8005772:	0002      	movs	r2, r0
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b64      	cmp	r3, #100	@ 0x64
 800577a:	d901      	bls.n	8005780 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e174      	b.n	8005a6a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005780:	4b7a      	ldr	r3, [pc, #488]	@ (800596c <HAL_RCC_OscConfig+0x694>)
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	2380      	movs	r3, #128	@ 0x80
 8005786:	005b      	lsls	r3, r3, #1
 8005788:	4013      	ands	r3, r2
 800578a:	d0f0      	beq.n	800576e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	689a      	ldr	r2, [r3, #8]
 8005790:	2380      	movs	r3, #128	@ 0x80
 8005792:	005b      	lsls	r3, r3, #1
 8005794:	429a      	cmp	r2, r3
 8005796:	d107      	bne.n	80057a8 <HAL_RCC_OscConfig+0x4d0>
 8005798:	4b71      	ldr	r3, [pc, #452]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 800579a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800579c:	4b70      	ldr	r3, [pc, #448]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 800579e:	2180      	movs	r1, #128	@ 0x80
 80057a0:	0049      	lsls	r1, r1, #1
 80057a2:	430a      	orrs	r2, r1
 80057a4:	651a      	str	r2, [r3, #80]	@ 0x50
 80057a6:	e031      	b.n	800580c <HAL_RCC_OscConfig+0x534>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10c      	bne.n	80057ca <HAL_RCC_OscConfig+0x4f2>
 80057b0:	4b6b      	ldr	r3, [pc, #428]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 80057b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80057b4:	4b6a      	ldr	r3, [pc, #424]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 80057b6:	496c      	ldr	r1, [pc, #432]	@ (8005968 <HAL_RCC_OscConfig+0x690>)
 80057b8:	400a      	ands	r2, r1
 80057ba:	651a      	str	r2, [r3, #80]	@ 0x50
 80057bc:	4b68      	ldr	r3, [pc, #416]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 80057be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80057c0:	4b67      	ldr	r3, [pc, #412]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 80057c2:	496b      	ldr	r1, [pc, #428]	@ (8005970 <HAL_RCC_OscConfig+0x698>)
 80057c4:	400a      	ands	r2, r1
 80057c6:	651a      	str	r2, [r3, #80]	@ 0x50
 80057c8:	e020      	b.n	800580c <HAL_RCC_OscConfig+0x534>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	689a      	ldr	r2, [r3, #8]
 80057ce:	23a0      	movs	r3, #160	@ 0xa0
 80057d0:	00db      	lsls	r3, r3, #3
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d10e      	bne.n	80057f4 <HAL_RCC_OscConfig+0x51c>
 80057d6:	4b62      	ldr	r3, [pc, #392]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 80057d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80057da:	4b61      	ldr	r3, [pc, #388]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 80057dc:	2180      	movs	r1, #128	@ 0x80
 80057de:	00c9      	lsls	r1, r1, #3
 80057e0:	430a      	orrs	r2, r1
 80057e2:	651a      	str	r2, [r3, #80]	@ 0x50
 80057e4:	4b5e      	ldr	r3, [pc, #376]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 80057e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80057e8:	4b5d      	ldr	r3, [pc, #372]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 80057ea:	2180      	movs	r1, #128	@ 0x80
 80057ec:	0049      	lsls	r1, r1, #1
 80057ee:	430a      	orrs	r2, r1
 80057f0:	651a      	str	r2, [r3, #80]	@ 0x50
 80057f2:	e00b      	b.n	800580c <HAL_RCC_OscConfig+0x534>
 80057f4:	4b5a      	ldr	r3, [pc, #360]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 80057f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80057f8:	4b59      	ldr	r3, [pc, #356]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 80057fa:	495b      	ldr	r1, [pc, #364]	@ (8005968 <HAL_RCC_OscConfig+0x690>)
 80057fc:	400a      	ands	r2, r1
 80057fe:	651a      	str	r2, [r3, #80]	@ 0x50
 8005800:	4b57      	ldr	r3, [pc, #348]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 8005802:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005804:	4b56      	ldr	r3, [pc, #344]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 8005806:	495a      	ldr	r1, [pc, #360]	@ (8005970 <HAL_RCC_OscConfig+0x698>)
 8005808:	400a      	ands	r2, r1
 800580a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d015      	beq.n	8005840 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005814:	f7fe fcd6 	bl	80041c4 <HAL_GetTick>
 8005818:	0003      	movs	r3, r0
 800581a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800581c:	e009      	b.n	8005832 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800581e:	f7fe fcd1 	bl	80041c4 <HAL_GetTick>
 8005822:	0002      	movs	r2, r0
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	4a52      	ldr	r2, [pc, #328]	@ (8005974 <HAL_RCC_OscConfig+0x69c>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e11b      	b.n	8005a6a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005832:	4b4b      	ldr	r3, [pc, #300]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 8005834:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005836:	2380      	movs	r3, #128	@ 0x80
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4013      	ands	r3, r2
 800583c:	d0ef      	beq.n	800581e <HAL_RCC_OscConfig+0x546>
 800583e:	e014      	b.n	800586a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005840:	f7fe fcc0 	bl	80041c4 <HAL_GetTick>
 8005844:	0003      	movs	r3, r0
 8005846:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005848:	e009      	b.n	800585e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800584a:	f7fe fcbb 	bl	80041c4 <HAL_GetTick>
 800584e:	0002      	movs	r2, r0
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	4a47      	ldr	r2, [pc, #284]	@ (8005974 <HAL_RCC_OscConfig+0x69c>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e105      	b.n	8005a6a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800585e:	4b40      	ldr	r3, [pc, #256]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 8005860:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005862:	2380      	movs	r3, #128	@ 0x80
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4013      	ands	r3, r2
 8005868:	d1ef      	bne.n	800584a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800586a:	2323      	movs	r3, #35	@ 0x23
 800586c:	18fb      	adds	r3, r7, r3
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d105      	bne.n	8005880 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005874:	4b3a      	ldr	r3, [pc, #232]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 8005876:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005878:	4b39      	ldr	r3, [pc, #228]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 800587a:	493f      	ldr	r1, [pc, #252]	@ (8005978 <HAL_RCC_OscConfig+0x6a0>)
 800587c:	400a      	ands	r2, r1
 800587e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2220      	movs	r2, #32
 8005886:	4013      	ands	r3, r2
 8005888:	d049      	beq.n	800591e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d026      	beq.n	80058e0 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005892:	4b33      	ldr	r3, [pc, #204]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 8005894:	689a      	ldr	r2, [r3, #8]
 8005896:	4b32      	ldr	r3, [pc, #200]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 8005898:	2101      	movs	r1, #1
 800589a:	430a      	orrs	r2, r1
 800589c:	609a      	str	r2, [r3, #8]
 800589e:	4b30      	ldr	r3, [pc, #192]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 80058a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058a2:	4b2f      	ldr	r3, [pc, #188]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 80058a4:	2101      	movs	r1, #1
 80058a6:	430a      	orrs	r2, r1
 80058a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80058aa:	4b34      	ldr	r3, [pc, #208]	@ (800597c <HAL_RCC_OscConfig+0x6a4>)
 80058ac:	6a1a      	ldr	r2, [r3, #32]
 80058ae:	4b33      	ldr	r3, [pc, #204]	@ (800597c <HAL_RCC_OscConfig+0x6a4>)
 80058b0:	2180      	movs	r1, #128	@ 0x80
 80058b2:	0189      	lsls	r1, r1, #6
 80058b4:	430a      	orrs	r2, r1
 80058b6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058b8:	f7fe fc84 	bl	80041c4 <HAL_GetTick>
 80058bc:	0003      	movs	r3, r0
 80058be:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80058c0:	e008      	b.n	80058d4 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058c2:	f7fe fc7f 	bl	80041c4 <HAL_GetTick>
 80058c6:	0002      	movs	r2, r0
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d901      	bls.n	80058d4 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e0ca      	b.n	8005a6a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80058d4:	4b22      	ldr	r3, [pc, #136]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	2202      	movs	r2, #2
 80058da:	4013      	ands	r3, r2
 80058dc:	d0f1      	beq.n	80058c2 <HAL_RCC_OscConfig+0x5ea>
 80058de:	e01e      	b.n	800591e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80058e0:	4b1f      	ldr	r3, [pc, #124]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 80058e2:	689a      	ldr	r2, [r3, #8]
 80058e4:	4b1e      	ldr	r3, [pc, #120]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 80058e6:	2101      	movs	r1, #1
 80058e8:	438a      	bics	r2, r1
 80058ea:	609a      	str	r2, [r3, #8]
 80058ec:	4b23      	ldr	r3, [pc, #140]	@ (800597c <HAL_RCC_OscConfig+0x6a4>)
 80058ee:	6a1a      	ldr	r2, [r3, #32]
 80058f0:	4b22      	ldr	r3, [pc, #136]	@ (800597c <HAL_RCC_OscConfig+0x6a4>)
 80058f2:	4923      	ldr	r1, [pc, #140]	@ (8005980 <HAL_RCC_OscConfig+0x6a8>)
 80058f4:	400a      	ands	r2, r1
 80058f6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f8:	f7fe fc64 	bl	80041c4 <HAL_GetTick>
 80058fc:	0003      	movs	r3, r0
 80058fe:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005900:	e008      	b.n	8005914 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005902:	f7fe fc5f 	bl	80041c4 <HAL_GetTick>
 8005906:	0002      	movs	r2, r0
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	2b02      	cmp	r3, #2
 800590e:	d901      	bls.n	8005914 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e0aa      	b.n	8005a6a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005914:	4b12      	ldr	r3, [pc, #72]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	2202      	movs	r2, #2
 800591a:	4013      	ands	r3, r2
 800591c:	d1f1      	bne.n	8005902 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005922:	2b00      	cmp	r3, #0
 8005924:	d100      	bne.n	8005928 <HAL_RCC_OscConfig+0x650>
 8005926:	e09f      	b.n	8005a68 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	2b0c      	cmp	r3, #12
 800592c:	d100      	bne.n	8005930 <HAL_RCC_OscConfig+0x658>
 800592e:	e078      	b.n	8005a22 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005934:	2b02      	cmp	r3, #2
 8005936:	d159      	bne.n	80059ec <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005938:	4b09      	ldr	r3, [pc, #36]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	4b08      	ldr	r3, [pc, #32]	@ (8005960 <HAL_RCC_OscConfig+0x688>)
 800593e:	4911      	ldr	r1, [pc, #68]	@ (8005984 <HAL_RCC_OscConfig+0x6ac>)
 8005940:	400a      	ands	r2, r1
 8005942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005944:	f7fe fc3e 	bl	80041c4 <HAL_GetTick>
 8005948:	0003      	movs	r3, r0
 800594a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800594c:	e01c      	b.n	8005988 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800594e:	f7fe fc39 	bl	80041c4 <HAL_GetTick>
 8005952:	0002      	movs	r2, r0
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	2b02      	cmp	r3, #2
 800595a:	d915      	bls.n	8005988 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e084      	b.n	8005a6a <HAL_RCC_OscConfig+0x792>
 8005960:	40021000 	.word	0x40021000
 8005964:	ffff1fff 	.word	0xffff1fff
 8005968:	fffffeff 	.word	0xfffffeff
 800596c:	40007000 	.word	0x40007000
 8005970:	fffffbff 	.word	0xfffffbff
 8005974:	00001388 	.word	0x00001388
 8005978:	efffffff 	.word	0xefffffff
 800597c:	40010000 	.word	0x40010000
 8005980:	ffffdfff 	.word	0xffffdfff
 8005984:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005988:	4b3a      	ldr	r3, [pc, #232]	@ (8005a74 <HAL_RCC_OscConfig+0x79c>)
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	2380      	movs	r3, #128	@ 0x80
 800598e:	049b      	lsls	r3, r3, #18
 8005990:	4013      	ands	r3, r2
 8005992:	d1dc      	bne.n	800594e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005994:	4b37      	ldr	r3, [pc, #220]	@ (8005a74 <HAL_RCC_OscConfig+0x79c>)
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	4a37      	ldr	r2, [pc, #220]	@ (8005a78 <HAL_RCC_OscConfig+0x7a0>)
 800599a:	4013      	ands	r3, r2
 800599c:	0019      	movs	r1, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a6:	431a      	orrs	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059ac:	431a      	orrs	r2, r3
 80059ae:	4b31      	ldr	r3, [pc, #196]	@ (8005a74 <HAL_RCC_OscConfig+0x79c>)
 80059b0:	430a      	orrs	r2, r1
 80059b2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059b4:	4b2f      	ldr	r3, [pc, #188]	@ (8005a74 <HAL_RCC_OscConfig+0x79c>)
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	4b2e      	ldr	r3, [pc, #184]	@ (8005a74 <HAL_RCC_OscConfig+0x79c>)
 80059ba:	2180      	movs	r1, #128	@ 0x80
 80059bc:	0449      	lsls	r1, r1, #17
 80059be:	430a      	orrs	r2, r1
 80059c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c2:	f7fe fbff 	bl	80041c4 <HAL_GetTick>
 80059c6:	0003      	movs	r3, r0
 80059c8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80059ca:	e008      	b.n	80059de <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059cc:	f7fe fbfa 	bl	80041c4 <HAL_GetTick>
 80059d0:	0002      	movs	r2, r0
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d901      	bls.n	80059de <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e045      	b.n	8005a6a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80059de:	4b25      	ldr	r3, [pc, #148]	@ (8005a74 <HAL_RCC_OscConfig+0x79c>)
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	2380      	movs	r3, #128	@ 0x80
 80059e4:	049b      	lsls	r3, r3, #18
 80059e6:	4013      	ands	r3, r2
 80059e8:	d0f0      	beq.n	80059cc <HAL_RCC_OscConfig+0x6f4>
 80059ea:	e03d      	b.n	8005a68 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ec:	4b21      	ldr	r3, [pc, #132]	@ (8005a74 <HAL_RCC_OscConfig+0x79c>)
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	4b20      	ldr	r3, [pc, #128]	@ (8005a74 <HAL_RCC_OscConfig+0x79c>)
 80059f2:	4922      	ldr	r1, [pc, #136]	@ (8005a7c <HAL_RCC_OscConfig+0x7a4>)
 80059f4:	400a      	ands	r2, r1
 80059f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059f8:	f7fe fbe4 	bl	80041c4 <HAL_GetTick>
 80059fc:	0003      	movs	r3, r0
 80059fe:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005a00:	e008      	b.n	8005a14 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a02:	f7fe fbdf 	bl	80041c4 <HAL_GetTick>
 8005a06:	0002      	movs	r2, r0
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d901      	bls.n	8005a14 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e02a      	b.n	8005a6a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005a14:	4b17      	ldr	r3, [pc, #92]	@ (8005a74 <HAL_RCC_OscConfig+0x79c>)
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	2380      	movs	r3, #128	@ 0x80
 8005a1a:	049b      	lsls	r3, r3, #18
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	d1f0      	bne.n	8005a02 <HAL_RCC_OscConfig+0x72a>
 8005a20:	e022      	b.n	8005a68 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d101      	bne.n	8005a2e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e01d      	b.n	8005a6a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005a2e:	4b11      	ldr	r3, [pc, #68]	@ (8005a74 <HAL_RCC_OscConfig+0x79c>)
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	2380      	movs	r3, #128	@ 0x80
 8005a38:	025b      	lsls	r3, r3, #9
 8005a3a:	401a      	ands	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d10f      	bne.n	8005a64 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	23f0      	movs	r3, #240	@ 0xf0
 8005a48:	039b      	lsls	r3, r3, #14
 8005a4a:	401a      	ands	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d107      	bne.n	8005a64 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	23c0      	movs	r3, #192	@ 0xc0
 8005a58:	041b      	lsls	r3, r3, #16
 8005a5a:	401a      	ands	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d001      	beq.n	8005a68 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e000      	b.n	8005a6a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	0018      	movs	r0, r3
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	b00a      	add	sp, #40	@ 0x28
 8005a70:	bdb0      	pop	{r4, r5, r7, pc}
 8005a72:	46c0      	nop			@ (mov r8, r8)
 8005a74:	40021000 	.word	0x40021000
 8005a78:	ff02ffff 	.word	0xff02ffff
 8005a7c:	feffffff 	.word	0xfeffffff

08005a80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a80:	b5b0      	push	{r4, r5, r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d101      	bne.n	8005a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e128      	b.n	8005ce6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a94:	4b96      	ldr	r3, [pc, #600]	@ (8005cf0 <HAL_RCC_ClockConfig+0x270>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	683a      	ldr	r2, [r7, #0]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d91e      	bls.n	8005ae0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aa2:	4b93      	ldr	r3, [pc, #588]	@ (8005cf0 <HAL_RCC_ClockConfig+0x270>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	4393      	bics	r3, r2
 8005aaa:	0019      	movs	r1, r3
 8005aac:	4b90      	ldr	r3, [pc, #576]	@ (8005cf0 <HAL_RCC_ClockConfig+0x270>)
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005ab4:	f7fe fb86 	bl	80041c4 <HAL_GetTick>
 8005ab8:	0003      	movs	r3, r0
 8005aba:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005abc:	e009      	b.n	8005ad2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005abe:	f7fe fb81 	bl	80041c4 <HAL_GetTick>
 8005ac2:	0002      	movs	r2, r0
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	4a8a      	ldr	r2, [pc, #552]	@ (8005cf4 <HAL_RCC_ClockConfig+0x274>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d901      	bls.n	8005ad2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e109      	b.n	8005ce6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ad2:	4b87      	ldr	r3, [pc, #540]	@ (8005cf0 <HAL_RCC_ClockConfig+0x270>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	4013      	ands	r3, r2
 8005ada:	683a      	ldr	r2, [r7, #0]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d1ee      	bne.n	8005abe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2202      	movs	r2, #2
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	d009      	beq.n	8005afe <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005aea:	4b83      	ldr	r3, [pc, #524]	@ (8005cf8 <HAL_RCC_ClockConfig+0x278>)
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	22f0      	movs	r2, #240	@ 0xf0
 8005af0:	4393      	bics	r3, r2
 8005af2:	0019      	movs	r1, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	689a      	ldr	r2, [r3, #8]
 8005af8:	4b7f      	ldr	r3, [pc, #508]	@ (8005cf8 <HAL_RCC_ClockConfig+0x278>)
 8005afa:	430a      	orrs	r2, r1
 8005afc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2201      	movs	r2, #1
 8005b04:	4013      	ands	r3, r2
 8005b06:	d100      	bne.n	8005b0a <HAL_RCC_ClockConfig+0x8a>
 8005b08:	e089      	b.n	8005c1e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d107      	bne.n	8005b22 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b12:	4b79      	ldr	r3, [pc, #484]	@ (8005cf8 <HAL_RCC_ClockConfig+0x278>)
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	2380      	movs	r3, #128	@ 0x80
 8005b18:	029b      	lsls	r3, r3, #10
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	d120      	bne.n	8005b60 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e0e1      	b.n	8005ce6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	2b03      	cmp	r3, #3
 8005b28:	d107      	bne.n	8005b3a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b2a:	4b73      	ldr	r3, [pc, #460]	@ (8005cf8 <HAL_RCC_ClockConfig+0x278>)
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	2380      	movs	r3, #128	@ 0x80
 8005b30:	049b      	lsls	r3, r3, #18
 8005b32:	4013      	ands	r3, r2
 8005b34:	d114      	bne.n	8005b60 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e0d5      	b.n	8005ce6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d106      	bne.n	8005b50 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b42:	4b6d      	ldr	r3, [pc, #436]	@ (8005cf8 <HAL_RCC_ClockConfig+0x278>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2204      	movs	r2, #4
 8005b48:	4013      	ands	r3, r2
 8005b4a:	d109      	bne.n	8005b60 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e0ca      	b.n	8005ce6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005b50:	4b69      	ldr	r3, [pc, #420]	@ (8005cf8 <HAL_RCC_ClockConfig+0x278>)
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	2380      	movs	r3, #128	@ 0x80
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4013      	ands	r3, r2
 8005b5a:	d101      	bne.n	8005b60 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e0c2      	b.n	8005ce6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b60:	4b65      	ldr	r3, [pc, #404]	@ (8005cf8 <HAL_RCC_ClockConfig+0x278>)
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	2203      	movs	r2, #3
 8005b66:	4393      	bics	r3, r2
 8005b68:	0019      	movs	r1, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	4b62      	ldr	r3, [pc, #392]	@ (8005cf8 <HAL_RCC_ClockConfig+0x278>)
 8005b70:	430a      	orrs	r2, r1
 8005b72:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b74:	f7fe fb26 	bl	80041c4 <HAL_GetTick>
 8005b78:	0003      	movs	r3, r0
 8005b7a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d111      	bne.n	8005ba8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b84:	e009      	b.n	8005b9a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b86:	f7fe fb1d 	bl	80041c4 <HAL_GetTick>
 8005b8a:	0002      	movs	r2, r0
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	4a58      	ldr	r2, [pc, #352]	@ (8005cf4 <HAL_RCC_ClockConfig+0x274>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d901      	bls.n	8005b9a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e0a5      	b.n	8005ce6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b9a:	4b57      	ldr	r3, [pc, #348]	@ (8005cf8 <HAL_RCC_ClockConfig+0x278>)
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	220c      	movs	r2, #12
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	2b08      	cmp	r3, #8
 8005ba4:	d1ef      	bne.n	8005b86 <HAL_RCC_ClockConfig+0x106>
 8005ba6:	e03a      	b.n	8005c1e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	2b03      	cmp	r3, #3
 8005bae:	d111      	bne.n	8005bd4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bb0:	e009      	b.n	8005bc6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bb2:	f7fe fb07 	bl	80041c4 <HAL_GetTick>
 8005bb6:	0002      	movs	r2, r0
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	4a4d      	ldr	r2, [pc, #308]	@ (8005cf4 <HAL_RCC_ClockConfig+0x274>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e08f      	b.n	8005ce6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bc6:	4b4c      	ldr	r3, [pc, #304]	@ (8005cf8 <HAL_RCC_ClockConfig+0x278>)
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	220c      	movs	r2, #12
 8005bcc:	4013      	ands	r3, r2
 8005bce:	2b0c      	cmp	r3, #12
 8005bd0:	d1ef      	bne.n	8005bb2 <HAL_RCC_ClockConfig+0x132>
 8005bd2:	e024      	b.n	8005c1e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d11b      	bne.n	8005c14 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005bdc:	e009      	b.n	8005bf2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bde:	f7fe faf1 	bl	80041c4 <HAL_GetTick>
 8005be2:	0002      	movs	r2, r0
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	4a42      	ldr	r2, [pc, #264]	@ (8005cf4 <HAL_RCC_ClockConfig+0x274>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e079      	b.n	8005ce6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005bf2:	4b41      	ldr	r3, [pc, #260]	@ (8005cf8 <HAL_RCC_ClockConfig+0x278>)
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	220c      	movs	r2, #12
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	2b04      	cmp	r3, #4
 8005bfc:	d1ef      	bne.n	8005bde <HAL_RCC_ClockConfig+0x15e>
 8005bfe:	e00e      	b.n	8005c1e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c00:	f7fe fae0 	bl	80041c4 <HAL_GetTick>
 8005c04:	0002      	movs	r2, r0
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	4a3a      	ldr	r2, [pc, #232]	@ (8005cf4 <HAL_RCC_ClockConfig+0x274>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d901      	bls.n	8005c14 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e068      	b.n	8005ce6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005c14:	4b38      	ldr	r3, [pc, #224]	@ (8005cf8 <HAL_RCC_ClockConfig+0x278>)
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	220c      	movs	r2, #12
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	d1f0      	bne.n	8005c00 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c1e:	4b34      	ldr	r3, [pc, #208]	@ (8005cf0 <HAL_RCC_ClockConfig+0x270>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2201      	movs	r2, #1
 8005c24:	4013      	ands	r3, r2
 8005c26:	683a      	ldr	r2, [r7, #0]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d21e      	bcs.n	8005c6a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c2c:	4b30      	ldr	r3, [pc, #192]	@ (8005cf0 <HAL_RCC_ClockConfig+0x270>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2201      	movs	r2, #1
 8005c32:	4393      	bics	r3, r2
 8005c34:	0019      	movs	r1, r3
 8005c36:	4b2e      	ldr	r3, [pc, #184]	@ (8005cf0 <HAL_RCC_ClockConfig+0x270>)
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005c3e:	f7fe fac1 	bl	80041c4 <HAL_GetTick>
 8005c42:	0003      	movs	r3, r0
 8005c44:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c46:	e009      	b.n	8005c5c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c48:	f7fe fabc 	bl	80041c4 <HAL_GetTick>
 8005c4c:	0002      	movs	r2, r0
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	4a28      	ldr	r2, [pc, #160]	@ (8005cf4 <HAL_RCC_ClockConfig+0x274>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d901      	bls.n	8005c5c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e044      	b.n	8005ce6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c5c:	4b24      	ldr	r3, [pc, #144]	@ (8005cf0 <HAL_RCC_ClockConfig+0x270>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2201      	movs	r2, #1
 8005c62:	4013      	ands	r3, r2
 8005c64:	683a      	ldr	r2, [r7, #0]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d1ee      	bne.n	8005c48 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2204      	movs	r2, #4
 8005c70:	4013      	ands	r3, r2
 8005c72:	d009      	beq.n	8005c88 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c74:	4b20      	ldr	r3, [pc, #128]	@ (8005cf8 <HAL_RCC_ClockConfig+0x278>)
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	4a20      	ldr	r2, [pc, #128]	@ (8005cfc <HAL_RCC_ClockConfig+0x27c>)
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	0019      	movs	r1, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	68da      	ldr	r2, [r3, #12]
 8005c82:	4b1d      	ldr	r3, [pc, #116]	@ (8005cf8 <HAL_RCC_ClockConfig+0x278>)
 8005c84:	430a      	orrs	r2, r1
 8005c86:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2208      	movs	r2, #8
 8005c8e:	4013      	ands	r3, r2
 8005c90:	d00a      	beq.n	8005ca8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c92:	4b19      	ldr	r3, [pc, #100]	@ (8005cf8 <HAL_RCC_ClockConfig+0x278>)
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	4a1a      	ldr	r2, [pc, #104]	@ (8005d00 <HAL_RCC_ClockConfig+0x280>)
 8005c98:	4013      	ands	r3, r2
 8005c9a:	0019      	movs	r1, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	00da      	lsls	r2, r3, #3
 8005ca2:	4b15      	ldr	r3, [pc, #84]	@ (8005cf8 <HAL_RCC_ClockConfig+0x278>)
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ca8:	f000 f832 	bl	8005d10 <HAL_RCC_GetSysClockFreq>
 8005cac:	0001      	movs	r1, r0
 8005cae:	4b12      	ldr	r3, [pc, #72]	@ (8005cf8 <HAL_RCC_ClockConfig+0x278>)
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	091b      	lsrs	r3, r3, #4
 8005cb4:	220f      	movs	r2, #15
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	4a12      	ldr	r2, [pc, #72]	@ (8005d04 <HAL_RCC_ClockConfig+0x284>)
 8005cba:	5cd3      	ldrb	r3, [r2, r3]
 8005cbc:	000a      	movs	r2, r1
 8005cbe:	40da      	lsrs	r2, r3
 8005cc0:	4b11      	ldr	r3, [pc, #68]	@ (8005d08 <HAL_RCC_ClockConfig+0x288>)
 8005cc2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005cc4:	4b11      	ldr	r3, [pc, #68]	@ (8005d0c <HAL_RCC_ClockConfig+0x28c>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	250b      	movs	r5, #11
 8005cca:	197c      	adds	r4, r7, r5
 8005ccc:	0018      	movs	r0, r3
 8005cce:	f7fe f931 	bl	8003f34 <HAL_InitTick>
 8005cd2:	0003      	movs	r3, r0
 8005cd4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005cd6:	197b      	adds	r3, r7, r5
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d002      	beq.n	8005ce4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005cde:	197b      	adds	r3, r7, r5
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	e000      	b.n	8005ce6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	0018      	movs	r0, r3
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	b004      	add	sp, #16
 8005cec:	bdb0      	pop	{r4, r5, r7, pc}
 8005cee:	46c0      	nop			@ (mov r8, r8)
 8005cf0:	40022000 	.word	0x40022000
 8005cf4:	00001388 	.word	0x00001388
 8005cf8:	40021000 	.word	0x40021000
 8005cfc:	fffff8ff 	.word	0xfffff8ff
 8005d00:	ffffc7ff 	.word	0xffffc7ff
 8005d04:	0800c1e0 	.word	0x0800c1e0
 8005d08:	20000000 	.word	0x20000000
 8005d0c:	20000004 	.word	0x20000004

08005d10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d10:	b5b0      	push	{r4, r5, r7, lr}
 8005d12:	b08e      	sub	sp, #56	@ 0x38
 8005d14:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005d16:	4b4c      	ldr	r3, [pc, #304]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x138>)
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005d1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d1e:	230c      	movs	r3, #12
 8005d20:	4013      	ands	r3, r2
 8005d22:	2b0c      	cmp	r3, #12
 8005d24:	d014      	beq.n	8005d50 <HAL_RCC_GetSysClockFreq+0x40>
 8005d26:	d900      	bls.n	8005d2a <HAL_RCC_GetSysClockFreq+0x1a>
 8005d28:	e07b      	b.n	8005e22 <HAL_RCC_GetSysClockFreq+0x112>
 8005d2a:	2b04      	cmp	r3, #4
 8005d2c:	d002      	beq.n	8005d34 <HAL_RCC_GetSysClockFreq+0x24>
 8005d2e:	2b08      	cmp	r3, #8
 8005d30:	d00b      	beq.n	8005d4a <HAL_RCC_GetSysClockFreq+0x3a>
 8005d32:	e076      	b.n	8005e22 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005d34:	4b44      	ldr	r3, [pc, #272]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x138>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2210      	movs	r2, #16
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	d002      	beq.n	8005d44 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005d3e:	4b43      	ldr	r3, [pc, #268]	@ (8005e4c <HAL_RCC_GetSysClockFreq+0x13c>)
 8005d40:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005d42:	e07c      	b.n	8005e3e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005d44:	4b42      	ldr	r3, [pc, #264]	@ (8005e50 <HAL_RCC_GetSysClockFreq+0x140>)
 8005d46:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8005d48:	e079      	b.n	8005e3e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005d4a:	4b42      	ldr	r3, [pc, #264]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x144>)
 8005d4c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8005d4e:	e076      	b.n	8005e3e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d52:	0c9a      	lsrs	r2, r3, #18
 8005d54:	230f      	movs	r3, #15
 8005d56:	401a      	ands	r2, r3
 8005d58:	4b3f      	ldr	r3, [pc, #252]	@ (8005e58 <HAL_RCC_GetSysClockFreq+0x148>)
 8005d5a:	5c9b      	ldrb	r3, [r3, r2]
 8005d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d60:	0d9a      	lsrs	r2, r3, #22
 8005d62:	2303      	movs	r3, #3
 8005d64:	4013      	ands	r3, r2
 8005d66:	3301      	adds	r3, #1
 8005d68:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d6a:	4b37      	ldr	r3, [pc, #220]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x138>)
 8005d6c:	68da      	ldr	r2, [r3, #12]
 8005d6e:	2380      	movs	r3, #128	@ 0x80
 8005d70:	025b      	lsls	r3, r3, #9
 8005d72:	4013      	ands	r3, r2
 8005d74:	d01a      	beq.n	8005dac <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d78:	61bb      	str	r3, [r7, #24]
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	61fb      	str	r3, [r7, #28]
 8005d7e:	4a35      	ldr	r2, [pc, #212]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x144>)
 8005d80:	2300      	movs	r3, #0
 8005d82:	69b8      	ldr	r0, [r7, #24]
 8005d84:	69f9      	ldr	r1, [r7, #28]
 8005d86:	f7fa fabb 	bl	8000300 <__aeabi_lmul>
 8005d8a:	0002      	movs	r2, r0
 8005d8c:	000b      	movs	r3, r1
 8005d8e:	0010      	movs	r0, r2
 8005d90:	0019      	movs	r1, r3
 8005d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d94:	613b      	str	r3, [r7, #16]
 8005d96:	2300      	movs	r3, #0
 8005d98:	617b      	str	r3, [r7, #20]
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f7fa fa8f 	bl	80002c0 <__aeabi_uldivmod>
 8005da2:	0002      	movs	r2, r0
 8005da4:	000b      	movs	r3, r1
 8005da6:	0013      	movs	r3, r2
 8005da8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005daa:	e037      	b.n	8005e1c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005dac:	4b26      	ldr	r3, [pc, #152]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x138>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2210      	movs	r2, #16
 8005db2:	4013      	ands	r3, r2
 8005db4:	d01a      	beq.n	8005dec <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db8:	60bb      	str	r3, [r7, #8]
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60fb      	str	r3, [r7, #12]
 8005dbe:	4a23      	ldr	r2, [pc, #140]	@ (8005e4c <HAL_RCC_GetSysClockFreq+0x13c>)
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	68b8      	ldr	r0, [r7, #8]
 8005dc4:	68f9      	ldr	r1, [r7, #12]
 8005dc6:	f7fa fa9b 	bl	8000300 <__aeabi_lmul>
 8005dca:	0002      	movs	r2, r0
 8005dcc:	000b      	movs	r3, r1
 8005dce:	0010      	movs	r0, r2
 8005dd0:	0019      	movs	r1, r3
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd4:	603b      	str	r3, [r7, #0]
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	607b      	str	r3, [r7, #4]
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f7fa fa6f 	bl	80002c0 <__aeabi_uldivmod>
 8005de2:	0002      	movs	r2, r0
 8005de4:	000b      	movs	r3, r1
 8005de6:	0013      	movs	r3, r2
 8005de8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dea:	e017      	b.n	8005e1c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dee:	0018      	movs	r0, r3
 8005df0:	2300      	movs	r3, #0
 8005df2:	0019      	movs	r1, r3
 8005df4:	4a16      	ldr	r2, [pc, #88]	@ (8005e50 <HAL_RCC_GetSysClockFreq+0x140>)
 8005df6:	2300      	movs	r3, #0
 8005df8:	f7fa fa82 	bl	8000300 <__aeabi_lmul>
 8005dfc:	0002      	movs	r2, r0
 8005dfe:	000b      	movs	r3, r1
 8005e00:	0010      	movs	r0, r2
 8005e02:	0019      	movs	r1, r3
 8005e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e06:	001c      	movs	r4, r3
 8005e08:	2300      	movs	r3, #0
 8005e0a:	001d      	movs	r5, r3
 8005e0c:	0022      	movs	r2, r4
 8005e0e:	002b      	movs	r3, r5
 8005e10:	f7fa fa56 	bl	80002c0 <__aeabi_uldivmod>
 8005e14:	0002      	movs	r2, r0
 8005e16:	000b      	movs	r3, r1
 8005e18:	0013      	movs	r3, r2
 8005e1a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8005e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e1e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8005e20:	e00d      	b.n	8005e3e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005e22:	4b09      	ldr	r3, [pc, #36]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x138>)
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	0b5b      	lsrs	r3, r3, #13
 8005e28:	2207      	movs	r2, #7
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	3301      	adds	r3, #1
 8005e32:	2280      	movs	r2, #128	@ 0x80
 8005e34:	0212      	lsls	r2, r2, #8
 8005e36:	409a      	lsls	r2, r3
 8005e38:	0013      	movs	r3, r2
 8005e3a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8005e3c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8005e40:	0018      	movs	r0, r3
 8005e42:	46bd      	mov	sp, r7
 8005e44:	b00e      	add	sp, #56	@ 0x38
 8005e46:	bdb0      	pop	{r4, r5, r7, pc}
 8005e48:	40021000 	.word	0x40021000
 8005e4c:	003d0900 	.word	0x003d0900
 8005e50:	00f42400 	.word	0x00f42400
 8005e54:	007a1200 	.word	0x007a1200
 8005e58:	0800c1f8 	.word	0x0800c1f8

08005e5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e60:	4b02      	ldr	r3, [pc, #8]	@ (8005e6c <HAL_RCC_GetHCLKFreq+0x10>)
 8005e62:	681b      	ldr	r3, [r3, #0]
}
 8005e64:	0018      	movs	r0, r3
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	46c0      	nop			@ (mov r8, r8)
 8005e6c:	20000000 	.word	0x20000000

08005e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e74:	f7ff fff2 	bl	8005e5c <HAL_RCC_GetHCLKFreq>
 8005e78:	0001      	movs	r1, r0
 8005e7a:	4b06      	ldr	r3, [pc, #24]	@ (8005e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	0a1b      	lsrs	r3, r3, #8
 8005e80:	2207      	movs	r2, #7
 8005e82:	4013      	ands	r3, r2
 8005e84:	4a04      	ldr	r2, [pc, #16]	@ (8005e98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e86:	5cd3      	ldrb	r3, [r2, r3]
 8005e88:	40d9      	lsrs	r1, r3
 8005e8a:	000b      	movs	r3, r1
}
 8005e8c:	0018      	movs	r0, r3
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	46c0      	nop			@ (mov r8, r8)
 8005e94:	40021000 	.word	0x40021000
 8005e98:	0800c1f0 	.word	0x0800c1f0

08005e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ea0:	f7ff ffdc 	bl	8005e5c <HAL_RCC_GetHCLKFreq>
 8005ea4:	0001      	movs	r1, r0
 8005ea6:	4b06      	ldr	r3, [pc, #24]	@ (8005ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	0adb      	lsrs	r3, r3, #11
 8005eac:	2207      	movs	r2, #7
 8005eae:	4013      	ands	r3, r2
 8005eb0:	4a04      	ldr	r2, [pc, #16]	@ (8005ec4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005eb2:	5cd3      	ldrb	r3, [r2, r3]
 8005eb4:	40d9      	lsrs	r1, r3
 8005eb6:	000b      	movs	r3, r1
}
 8005eb8:	0018      	movs	r0, r3
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	46c0      	nop			@ (mov r8, r8)
 8005ec0:	40021000 	.word	0x40021000
 8005ec4:	0800c1f0 	.word	0x0800c1f0

08005ec8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	220f      	movs	r2, #15
 8005ed6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005ed8:	4b12      	ldr	r3, [pc, #72]	@ (8005f24 <HAL_RCC_GetClockConfig+0x5c>)
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	2203      	movs	r2, #3
 8005ede:	401a      	ands	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8005f24 <HAL_RCC_GetClockConfig+0x5c>)
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	22f0      	movs	r2, #240	@ 0xf0
 8005eea:	401a      	ands	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8005f24 <HAL_RCC_GetClockConfig+0x5c>)
 8005ef2:	68da      	ldr	r2, [r3, #12]
 8005ef4:	23e0      	movs	r3, #224	@ 0xe0
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	401a      	ands	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005efe:	4b09      	ldr	r3, [pc, #36]	@ (8005f24 <HAL_RCC_GetClockConfig+0x5c>)
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	08da      	lsrs	r2, r3, #3
 8005f04:	23e0      	movs	r3, #224	@ 0xe0
 8005f06:	00db      	lsls	r3, r3, #3
 8005f08:	401a      	ands	r2, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005f0e:	4b06      	ldr	r3, [pc, #24]	@ (8005f28 <HAL_RCC_GetClockConfig+0x60>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2201      	movs	r2, #1
 8005f14:	401a      	ands	r2, r3
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	601a      	str	r2, [r3, #0]
}
 8005f1a:	46c0      	nop			@ (mov r8, r8)
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	b002      	add	sp, #8
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	46c0      	nop			@ (mov r8, r8)
 8005f24:	40021000 	.word	0x40021000
 8005f28:	40022000 	.word	0x40022000

08005f2c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005f34:	2317      	movs	r3, #23
 8005f36:	18fb      	adds	r3, r7, r3
 8005f38:	2200      	movs	r2, #0
 8005f3a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2220      	movs	r2, #32
 8005f42:	4013      	ands	r3, r2
 8005f44:	d106      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	2380      	movs	r3, #128	@ 0x80
 8005f4c:	011b      	lsls	r3, r3, #4
 8005f4e:	4013      	ands	r3, r2
 8005f50:	d100      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8005f52:	e104      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f54:	4bb9      	ldr	r3, [pc, #740]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005f56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f58:	2380      	movs	r3, #128	@ 0x80
 8005f5a:	055b      	lsls	r3, r3, #21
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	d10a      	bne.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f60:	4bb6      	ldr	r3, [pc, #728]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005f62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f64:	4bb5      	ldr	r3, [pc, #724]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005f66:	2180      	movs	r1, #128	@ 0x80
 8005f68:	0549      	lsls	r1, r1, #21
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8005f6e:	2317      	movs	r3, #23
 8005f70:	18fb      	adds	r3, r7, r3
 8005f72:	2201      	movs	r2, #1
 8005f74:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f76:	4bb2      	ldr	r3, [pc, #712]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	2380      	movs	r3, #128	@ 0x80
 8005f7c:	005b      	lsls	r3, r3, #1
 8005f7e:	4013      	ands	r3, r2
 8005f80:	d11a      	bne.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f82:	4baf      	ldr	r3, [pc, #700]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	4bae      	ldr	r3, [pc, #696]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005f88:	2180      	movs	r1, #128	@ 0x80
 8005f8a:	0049      	lsls	r1, r1, #1
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f90:	f7fe f918 	bl	80041c4 <HAL_GetTick>
 8005f94:	0003      	movs	r3, r0
 8005f96:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f98:	e008      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f9a:	f7fe f913 	bl	80041c4 <HAL_GetTick>
 8005f9e:	0002      	movs	r2, r0
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	2b64      	cmp	r3, #100	@ 0x64
 8005fa6:	d901      	bls.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e143      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fac:	4ba4      	ldr	r3, [pc, #656]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	2380      	movs	r3, #128	@ 0x80
 8005fb2:	005b      	lsls	r3, r3, #1
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	d0f0      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005fb8:	4ba0      	ldr	r3, [pc, #640]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	23c0      	movs	r3, #192	@ 0xc0
 8005fbe:	039b      	lsls	r3, r3, #14
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	23c0      	movs	r3, #192	@ 0xc0
 8005fca:	039b      	lsls	r3, r3, #14
 8005fcc:	4013      	ands	r3, r2
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d107      	bne.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689a      	ldr	r2, [r3, #8]
 8005fd8:	23c0      	movs	r3, #192	@ 0xc0
 8005fda:	039b      	lsls	r3, r3, #14
 8005fdc:	4013      	ands	r3, r2
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d013      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	23c0      	movs	r3, #192	@ 0xc0
 8005fea:	029b      	lsls	r3, r3, #10
 8005fec:	401a      	ands	r2, r3
 8005fee:	23c0      	movs	r3, #192	@ 0xc0
 8005ff0:	029b      	lsls	r3, r3, #10
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d10a      	bne.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005ff6:	4b91      	ldr	r3, [pc, #580]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	2380      	movs	r3, #128	@ 0x80
 8005ffc:	029b      	lsls	r3, r3, #10
 8005ffe:	401a      	ands	r2, r3
 8006000:	2380      	movs	r3, #128	@ 0x80
 8006002:	029b      	lsls	r3, r3, #10
 8006004:	429a      	cmp	r2, r3
 8006006:	d101      	bne.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e113      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800600c:	4b8b      	ldr	r3, [pc, #556]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800600e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006010:	23c0      	movs	r3, #192	@ 0xc0
 8006012:	029b      	lsls	r3, r3, #10
 8006014:	4013      	ands	r3, r2
 8006016:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d049      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685a      	ldr	r2, [r3, #4]
 8006022:	23c0      	movs	r3, #192	@ 0xc0
 8006024:	029b      	lsls	r3, r3, #10
 8006026:	4013      	ands	r3, r2
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	429a      	cmp	r2, r3
 800602c:	d004      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2220      	movs	r2, #32
 8006034:	4013      	ands	r3, r2
 8006036:	d10d      	bne.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689a      	ldr	r2, [r3, #8]
 800603c:	23c0      	movs	r3, #192	@ 0xc0
 800603e:	029b      	lsls	r3, r3, #10
 8006040:	4013      	ands	r3, r2
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	429a      	cmp	r2, r3
 8006046:	d034      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	2380      	movs	r3, #128	@ 0x80
 800604e:	011b      	lsls	r3, r3, #4
 8006050:	4013      	ands	r3, r2
 8006052:	d02e      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006054:	4b79      	ldr	r3, [pc, #484]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006058:	4a7a      	ldr	r2, [pc, #488]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800605a:	4013      	ands	r3, r2
 800605c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800605e:	4b77      	ldr	r3, [pc, #476]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006060:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006062:	4b76      	ldr	r3, [pc, #472]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006064:	2180      	movs	r1, #128	@ 0x80
 8006066:	0309      	lsls	r1, r1, #12
 8006068:	430a      	orrs	r2, r1
 800606a:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800606c:	4b73      	ldr	r3, [pc, #460]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800606e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006070:	4b72      	ldr	r3, [pc, #456]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006072:	4975      	ldr	r1, [pc, #468]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006074:	400a      	ands	r2, r1
 8006076:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8006078:	4b70      	ldr	r3, [pc, #448]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	2380      	movs	r3, #128	@ 0x80
 8006082:	005b      	lsls	r3, r3, #1
 8006084:	4013      	ands	r3, r2
 8006086:	d014      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006088:	f7fe f89c 	bl	80041c4 <HAL_GetTick>
 800608c:	0003      	movs	r3, r0
 800608e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006090:	e009      	b.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006092:	f7fe f897 	bl	80041c4 <HAL_GetTick>
 8006096:	0002      	movs	r2, r0
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	4a6b      	ldr	r2, [pc, #428]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d901      	bls.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e0c6      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060a6:	4b65      	ldr	r3, [pc, #404]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80060a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80060aa:	2380      	movs	r3, #128	@ 0x80
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4013      	ands	r3, r2
 80060b0:	d0ef      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	2380      	movs	r3, #128	@ 0x80
 80060b8:	011b      	lsls	r3, r3, #4
 80060ba:	4013      	ands	r3, r2
 80060bc:	d01f      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	689a      	ldr	r2, [r3, #8]
 80060c2:	23c0      	movs	r3, #192	@ 0xc0
 80060c4:	029b      	lsls	r3, r3, #10
 80060c6:	401a      	ands	r2, r3
 80060c8:	23c0      	movs	r3, #192	@ 0xc0
 80060ca:	029b      	lsls	r3, r3, #10
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d10c      	bne.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80060d0:	4b5a      	ldr	r3, [pc, #360]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a5e      	ldr	r2, [pc, #376]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80060d6:	4013      	ands	r3, r2
 80060d8:	0019      	movs	r1, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	689a      	ldr	r2, [r3, #8]
 80060de:	23c0      	movs	r3, #192	@ 0xc0
 80060e0:	039b      	lsls	r3, r3, #14
 80060e2:	401a      	ands	r2, r3
 80060e4:	4b55      	ldr	r3, [pc, #340]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80060e6:	430a      	orrs	r2, r1
 80060e8:	601a      	str	r2, [r3, #0]
 80060ea:	4b54      	ldr	r3, [pc, #336]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80060ec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	689a      	ldr	r2, [r3, #8]
 80060f2:	23c0      	movs	r3, #192	@ 0xc0
 80060f4:	029b      	lsls	r3, r3, #10
 80060f6:	401a      	ands	r2, r3
 80060f8:	4b50      	ldr	r3, [pc, #320]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80060fa:	430a      	orrs	r2, r1
 80060fc:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2220      	movs	r2, #32
 8006104:	4013      	ands	r3, r2
 8006106:	d01f      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685a      	ldr	r2, [r3, #4]
 800610c:	23c0      	movs	r3, #192	@ 0xc0
 800610e:	029b      	lsls	r3, r3, #10
 8006110:	401a      	ands	r2, r3
 8006112:	23c0      	movs	r3, #192	@ 0xc0
 8006114:	029b      	lsls	r3, r3, #10
 8006116:	429a      	cmp	r2, r3
 8006118:	d10c      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800611a:	4b48      	ldr	r3, [pc, #288]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a4c      	ldr	r2, [pc, #304]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8006120:	4013      	ands	r3, r2
 8006122:	0019      	movs	r1, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	23c0      	movs	r3, #192	@ 0xc0
 800612a:	039b      	lsls	r3, r3, #14
 800612c:	401a      	ands	r2, r3
 800612e:	4b43      	ldr	r3, [pc, #268]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006130:	430a      	orrs	r2, r1
 8006132:	601a      	str	r2, [r3, #0]
 8006134:	4b41      	ldr	r3, [pc, #260]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006136:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	23c0      	movs	r3, #192	@ 0xc0
 800613e:	029b      	lsls	r3, r3, #10
 8006140:	401a      	ands	r2, r3
 8006142:	4b3e      	ldr	r3, [pc, #248]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006144:	430a      	orrs	r2, r1
 8006146:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006148:	2317      	movs	r3, #23
 800614a:	18fb      	adds	r3, r7, r3
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d105      	bne.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006152:	4b3a      	ldr	r3, [pc, #232]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006154:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006156:	4b39      	ldr	r3, [pc, #228]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006158:	493e      	ldr	r1, [pc, #248]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800615a:	400a      	ands	r2, r1
 800615c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2201      	movs	r2, #1
 8006164:	4013      	ands	r3, r2
 8006166:	d009      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006168:	4b34      	ldr	r3, [pc, #208]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800616a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800616c:	2203      	movs	r2, #3
 800616e:	4393      	bics	r3, r2
 8006170:	0019      	movs	r1, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68da      	ldr	r2, [r3, #12]
 8006176:	4b31      	ldr	r3, [pc, #196]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006178:	430a      	orrs	r2, r1
 800617a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2202      	movs	r2, #2
 8006182:	4013      	ands	r3, r2
 8006184:	d009      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006186:	4b2d      	ldr	r3, [pc, #180]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800618a:	220c      	movs	r2, #12
 800618c:	4393      	bics	r3, r2
 800618e:	0019      	movs	r1, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	691a      	ldr	r2, [r3, #16]
 8006194:	4b29      	ldr	r3, [pc, #164]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006196:	430a      	orrs	r2, r1
 8006198:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2204      	movs	r2, #4
 80061a0:	4013      	ands	r3, r2
 80061a2:	d009      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061a4:	4b25      	ldr	r3, [pc, #148]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80061a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061a8:	4a2b      	ldr	r2, [pc, #172]	@ (8006258 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80061aa:	4013      	ands	r3, r2
 80061ac:	0019      	movs	r1, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	695a      	ldr	r2, [r3, #20]
 80061b2:	4b22      	ldr	r3, [pc, #136]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80061b4:	430a      	orrs	r2, r1
 80061b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2208      	movs	r2, #8
 80061be:	4013      	ands	r3, r2
 80061c0:	d009      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80061c2:	4b1e      	ldr	r3, [pc, #120]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80061c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061c6:	4a25      	ldr	r2, [pc, #148]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80061c8:	4013      	ands	r3, r2
 80061ca:	0019      	movs	r1, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	699a      	ldr	r2, [r3, #24]
 80061d0:	4b1a      	ldr	r3, [pc, #104]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80061d2:	430a      	orrs	r2, r1
 80061d4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	2380      	movs	r3, #128	@ 0x80
 80061dc:	005b      	lsls	r3, r3, #1
 80061de:	4013      	ands	r3, r2
 80061e0:	d009      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80061e2:	4b16      	ldr	r3, [pc, #88]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80061e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061e6:	4a17      	ldr	r2, [pc, #92]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80061e8:	4013      	ands	r3, r2
 80061ea:	0019      	movs	r1, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	69da      	ldr	r2, [r3, #28]
 80061f0:	4b12      	ldr	r3, [pc, #72]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80061f2:	430a      	orrs	r2, r1
 80061f4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2240      	movs	r2, #64	@ 0x40
 80061fc:	4013      	ands	r3, r2
 80061fe:	d009      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006200:	4b0e      	ldr	r3, [pc, #56]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006204:	4a16      	ldr	r2, [pc, #88]	@ (8006260 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006206:	4013      	ands	r3, r2
 8006208:	0019      	movs	r1, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800620e:	4b0b      	ldr	r3, [pc, #44]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006210:	430a      	orrs	r2, r1
 8006212:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2280      	movs	r2, #128	@ 0x80
 800621a:	4013      	ands	r3, r2
 800621c:	d009      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800621e:	4b07      	ldr	r3, [pc, #28]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006222:	4a10      	ldr	r2, [pc, #64]	@ (8006264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006224:	4013      	ands	r3, r2
 8006226:	0019      	movs	r1, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a1a      	ldr	r2, [r3, #32]
 800622c:	4b03      	ldr	r3, [pc, #12]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800622e:	430a      	orrs	r2, r1
 8006230:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	0018      	movs	r0, r3
 8006236:	46bd      	mov	sp, r7
 8006238:	b006      	add	sp, #24
 800623a:	bd80      	pop	{r7, pc}
 800623c:	40021000 	.word	0x40021000
 8006240:	40007000 	.word	0x40007000
 8006244:	fffcffff 	.word	0xfffcffff
 8006248:	fff7ffff 	.word	0xfff7ffff
 800624c:	00001388 	.word	0x00001388
 8006250:	ffcfffff 	.word	0xffcfffff
 8006254:	efffffff 	.word	0xefffffff
 8006258:	fffff3ff 	.word	0xfffff3ff
 800625c:	ffffcfff 	.word	0xffffcfff
 8006260:	fbffffff 	.word	0xfbffffff
 8006264:	fff3ffff 	.word	0xfff3ffff

08006268 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e083      	b.n	8006382 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627e:	2b00      	cmp	r3, #0
 8006280:	d109      	bne.n	8006296 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	2382      	movs	r3, #130	@ 0x82
 8006288:	005b      	lsls	r3, r3, #1
 800628a:	429a      	cmp	r2, r3
 800628c:	d009      	beq.n	80062a2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	61da      	str	r2, [r3, #28]
 8006294:	e005      	b.n	80062a2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2251      	movs	r2, #81	@ 0x51
 80062ac:	5c9b      	ldrb	r3, [r3, r2]
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d107      	bne.n	80062c4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2250      	movs	r2, #80	@ 0x50
 80062b8:	2100      	movs	r1, #0
 80062ba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	0018      	movs	r0, r3
 80062c0:	f7fd fdae 	bl	8003e20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2251      	movs	r2, #81	@ 0x51
 80062c8:	2102      	movs	r1, #2
 80062ca:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2140      	movs	r1, #64	@ 0x40
 80062d8:	438a      	bics	r2, r1
 80062da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685a      	ldr	r2, [r3, #4]
 80062e0:	2382      	movs	r3, #130	@ 0x82
 80062e2:	005b      	lsls	r3, r3, #1
 80062e4:	401a      	ands	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6899      	ldr	r1, [r3, #8]
 80062ea:	2384      	movs	r3, #132	@ 0x84
 80062ec:	021b      	lsls	r3, r3, #8
 80062ee:	400b      	ands	r3, r1
 80062f0:	431a      	orrs	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68d9      	ldr	r1, [r3, #12]
 80062f6:	2380      	movs	r3, #128	@ 0x80
 80062f8:	011b      	lsls	r3, r3, #4
 80062fa:	400b      	ands	r3, r1
 80062fc:	431a      	orrs	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	2102      	movs	r1, #2
 8006304:	400b      	ands	r3, r1
 8006306:	431a      	orrs	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	2101      	movs	r1, #1
 800630e:	400b      	ands	r3, r1
 8006310:	431a      	orrs	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6999      	ldr	r1, [r3, #24]
 8006316:	2380      	movs	r3, #128	@ 0x80
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	400b      	ands	r3, r1
 800631c:	431a      	orrs	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	2138      	movs	r1, #56	@ 0x38
 8006324:	400b      	ands	r3, r1
 8006326:	431a      	orrs	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a1b      	ldr	r3, [r3, #32]
 800632c:	2180      	movs	r1, #128	@ 0x80
 800632e:	400b      	ands	r3, r1
 8006330:	431a      	orrs	r2, r3
 8006332:	0011      	movs	r1, r2
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006338:	2380      	movs	r3, #128	@ 0x80
 800633a:	019b      	lsls	r3, r3, #6
 800633c:	401a      	ands	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	430a      	orrs	r2, r1
 8006344:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	0c1b      	lsrs	r3, r3, #16
 800634c:	2204      	movs	r2, #4
 800634e:	4013      	ands	r3, r2
 8006350:	0019      	movs	r1, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006356:	2210      	movs	r2, #16
 8006358:	401a      	ands	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	69da      	ldr	r2, [r3, #28]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4907      	ldr	r1, [pc, #28]	@ (800638c <HAL_SPI_Init+0x124>)
 800636e:	400a      	ands	r2, r1
 8006370:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2251      	movs	r2, #81	@ 0x51
 800637c:	2101      	movs	r1, #1
 800637e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	0018      	movs	r0, r3
 8006384:	46bd      	mov	sp, r7
 8006386:	b002      	add	sp, #8
 8006388:	bd80      	pop	{r7, pc}
 800638a:	46c0      	nop			@ (mov r8, r8)
 800638c:	fffff7ff 	.word	0xfffff7ff

08006390 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b088      	sub	sp, #32
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	603b      	str	r3, [r7, #0]
 800639c:	1dbb      	adds	r3, r7, #6
 800639e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063a0:	231f      	movs	r3, #31
 80063a2:	18fb      	adds	r3, r7, r3
 80063a4:	2200      	movs	r2, #0
 80063a6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2250      	movs	r2, #80	@ 0x50
 80063ac:	5c9b      	ldrb	r3, [r3, r2]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d101      	bne.n	80063b6 <HAL_SPI_Transmit+0x26>
 80063b2:	2302      	movs	r3, #2
 80063b4:	e145      	b.n	8006642 <HAL_SPI_Transmit+0x2b2>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2250      	movs	r2, #80	@ 0x50
 80063ba:	2101      	movs	r1, #1
 80063bc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063be:	f7fd ff01 	bl	80041c4 <HAL_GetTick>
 80063c2:	0003      	movs	r3, r0
 80063c4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80063c6:	2316      	movs	r3, #22
 80063c8:	18fb      	adds	r3, r7, r3
 80063ca:	1dba      	adds	r2, r7, #6
 80063cc:	8812      	ldrh	r2, [r2, #0]
 80063ce:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2251      	movs	r2, #81	@ 0x51
 80063d4:	5c9b      	ldrb	r3, [r3, r2]
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d004      	beq.n	80063e6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80063dc:	231f      	movs	r3, #31
 80063de:	18fb      	adds	r3, r7, r3
 80063e0:	2202      	movs	r2, #2
 80063e2:	701a      	strb	r2, [r3, #0]
    goto error;
 80063e4:	e126      	b.n	8006634 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d003      	beq.n	80063f4 <HAL_SPI_Transmit+0x64>
 80063ec:	1dbb      	adds	r3, r7, #6
 80063ee:	881b      	ldrh	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d104      	bne.n	80063fe <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80063f4:	231f      	movs	r3, #31
 80063f6:	18fb      	adds	r3, r7, r3
 80063f8:	2201      	movs	r2, #1
 80063fa:	701a      	strb	r2, [r3, #0]
    goto error;
 80063fc:	e11a      	b.n	8006634 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2251      	movs	r2, #81	@ 0x51
 8006402:	2103      	movs	r1, #3
 8006404:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	1dba      	adds	r2, r7, #6
 8006416:	8812      	ldrh	r2, [r2, #0]
 8006418:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	1dba      	adds	r2, r7, #6
 800641e:	8812      	ldrh	r2, [r2, #0]
 8006420:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	689a      	ldr	r2, [r3, #8]
 8006444:	2380      	movs	r3, #128	@ 0x80
 8006446:	021b      	lsls	r3, r3, #8
 8006448:	429a      	cmp	r2, r3
 800644a:	d110      	bne.n	800646e <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2140      	movs	r1, #64	@ 0x40
 8006458:	438a      	bics	r2, r1
 800645a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2180      	movs	r1, #128	@ 0x80
 8006468:	01c9      	lsls	r1, r1, #7
 800646a:	430a      	orrs	r2, r1
 800646c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2240      	movs	r2, #64	@ 0x40
 8006476:	4013      	ands	r3, r2
 8006478:	2b40      	cmp	r3, #64	@ 0x40
 800647a:	d007      	beq.n	800648c <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2140      	movs	r1, #64	@ 0x40
 8006488:	430a      	orrs	r2, r1
 800648a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	68da      	ldr	r2, [r3, #12]
 8006490:	2380      	movs	r3, #128	@ 0x80
 8006492:	011b      	lsls	r3, r3, #4
 8006494:	429a      	cmp	r2, r3
 8006496:	d152      	bne.n	800653e <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d004      	beq.n	80064aa <HAL_SPI_Transmit+0x11a>
 80064a0:	2316      	movs	r3, #22
 80064a2:	18fb      	adds	r3, r7, r3
 80064a4:	881b      	ldrh	r3, [r3, #0]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d143      	bne.n	8006532 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ae:	881a      	ldrh	r2, [r3, #0]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ba:	1c9a      	adds	r2, r3, #2
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	3b01      	subs	r3, #1
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80064ce:	e030      	b.n	8006532 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	2202      	movs	r2, #2
 80064d8:	4013      	ands	r3, r2
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d112      	bne.n	8006504 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064e2:	881a      	ldrh	r2, [r3, #0]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ee:	1c9a      	adds	r2, r3, #2
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	3b01      	subs	r3, #1
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006502:	e016      	b.n	8006532 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006504:	f7fd fe5e 	bl	80041c4 <HAL_GetTick>
 8006508:	0002      	movs	r2, r0
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	683a      	ldr	r2, [r7, #0]
 8006510:	429a      	cmp	r2, r3
 8006512:	d802      	bhi.n	800651a <HAL_SPI_Transmit+0x18a>
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	3301      	adds	r3, #1
 8006518:	d102      	bne.n	8006520 <HAL_SPI_Transmit+0x190>
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d108      	bne.n	8006532 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8006520:	231f      	movs	r3, #31
 8006522:	18fb      	adds	r3, r7, r3
 8006524:	2203      	movs	r2, #3
 8006526:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2251      	movs	r2, #81	@ 0x51
 800652c:	2101      	movs	r1, #1
 800652e:	5499      	strb	r1, [r3, r2]
          goto error;
 8006530:	e080      	b.n	8006634 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006536:	b29b      	uxth	r3, r3
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1c9      	bne.n	80064d0 <HAL_SPI_Transmit+0x140>
 800653c:	e053      	b.n	80065e6 <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d004      	beq.n	8006550 <HAL_SPI_Transmit+0x1c0>
 8006546:	2316      	movs	r3, #22
 8006548:	18fb      	adds	r3, r7, r3
 800654a:	881b      	ldrh	r3, [r3, #0]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d145      	bne.n	80065dc <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	330c      	adds	r3, #12
 800655a:	7812      	ldrb	r2, [r2, #0]
 800655c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006562:	1c5a      	adds	r2, r3, #1
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800656c:	b29b      	uxth	r3, r3
 800656e:	3b01      	subs	r3, #1
 8006570:	b29a      	uxth	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006576:	e031      	b.n	80065dc <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	2202      	movs	r2, #2
 8006580:	4013      	ands	r3, r2
 8006582:	2b02      	cmp	r3, #2
 8006584:	d113      	bne.n	80065ae <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	330c      	adds	r3, #12
 8006590:	7812      	ldrb	r2, [r2, #0]
 8006592:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006598:	1c5a      	adds	r2, r3, #1
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	3b01      	subs	r3, #1
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	86da      	strh	r2, [r3, #54]	@ 0x36
 80065ac:	e016      	b.n	80065dc <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065ae:	f7fd fe09 	bl	80041c4 <HAL_GetTick>
 80065b2:	0002      	movs	r2, r0
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	683a      	ldr	r2, [r7, #0]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d802      	bhi.n	80065c4 <HAL_SPI_Transmit+0x234>
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	3301      	adds	r3, #1
 80065c2:	d102      	bne.n	80065ca <HAL_SPI_Transmit+0x23a>
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d108      	bne.n	80065dc <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 80065ca:	231f      	movs	r3, #31
 80065cc:	18fb      	adds	r3, r7, r3
 80065ce:	2203      	movs	r2, #3
 80065d0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2251      	movs	r2, #81	@ 0x51
 80065d6:	2101      	movs	r1, #1
 80065d8:	5499      	strb	r1, [r3, r2]
          goto error;
 80065da:	e02b      	b.n	8006634 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1c8      	bne.n	8006578 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065e6:	69ba      	ldr	r2, [r7, #24]
 80065e8:	6839      	ldr	r1, [r7, #0]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	0018      	movs	r0, r3
 80065ee:	f000 fa85 	bl	8006afc <SPI_EndRxTxTransaction>
 80065f2:	1e03      	subs	r3, r0, #0
 80065f4:	d002      	beq.n	80065fc <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2220      	movs	r2, #32
 80065fa:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d10a      	bne.n	800661a <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006604:	2300      	movs	r3, #0
 8006606:	613b      	str	r3, [r7, #16]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	613b      	str	r3, [r7, #16]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	613b      	str	r3, [r7, #16]
 8006618:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800661e:	2b00      	cmp	r3, #0
 8006620:	d004      	beq.n	800662c <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8006622:	231f      	movs	r3, #31
 8006624:	18fb      	adds	r3, r7, r3
 8006626:	2201      	movs	r2, #1
 8006628:	701a      	strb	r2, [r3, #0]
 800662a:	e003      	b.n	8006634 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2251      	movs	r2, #81	@ 0x51
 8006630:	2101      	movs	r1, #1
 8006632:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2250      	movs	r2, #80	@ 0x50
 8006638:	2100      	movs	r1, #0
 800663a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800663c:	231f      	movs	r3, #31
 800663e:	18fb      	adds	r3, r7, r3
 8006640:	781b      	ldrb	r3, [r3, #0]
}
 8006642:	0018      	movs	r0, r3
 8006644:	46bd      	mov	sp, r7
 8006646:	b008      	add	sp, #32
 8006648:	bd80      	pop	{r7, pc}

0800664a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b08c      	sub	sp, #48	@ 0x30
 800664e:	af00      	add	r7, sp, #0
 8006650:	60f8      	str	r0, [r7, #12]
 8006652:	60b9      	str	r1, [r7, #8]
 8006654:	607a      	str	r2, [r7, #4]
 8006656:	001a      	movs	r2, r3
 8006658:	1cbb      	adds	r3, r7, #2
 800665a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800665c:	2301      	movs	r3, #1
 800665e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006660:	232b      	movs	r3, #43	@ 0x2b
 8006662:	18fb      	adds	r3, r7, r3
 8006664:	2200      	movs	r2, #0
 8006666:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2250      	movs	r2, #80	@ 0x50
 800666c:	5c9b      	ldrb	r3, [r3, r2]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d101      	bne.n	8006676 <HAL_SPI_TransmitReceive+0x2c>
 8006672:	2302      	movs	r3, #2
 8006674:	e1b0      	b.n	80069d8 <HAL_SPI_TransmitReceive+0x38e>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2250      	movs	r2, #80	@ 0x50
 800667a:	2101      	movs	r1, #1
 800667c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800667e:	f7fd fda1 	bl	80041c4 <HAL_GetTick>
 8006682:	0003      	movs	r3, r0
 8006684:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006686:	2023      	movs	r0, #35	@ 0x23
 8006688:	183b      	adds	r3, r7, r0
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	2151      	movs	r1, #81	@ 0x51
 800668e:	5c52      	ldrb	r2, [r2, r1]
 8006690:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006698:	231a      	movs	r3, #26
 800669a:	18fb      	adds	r3, r7, r3
 800669c:	1cba      	adds	r2, r7, #2
 800669e:	8812      	ldrh	r2, [r2, #0]
 80066a0:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80066a2:	183b      	adds	r3, r7, r0
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d011      	beq.n	80066ce <HAL_SPI_TransmitReceive+0x84>
 80066aa:	69fa      	ldr	r2, [r7, #28]
 80066ac:	2382      	movs	r3, #130	@ 0x82
 80066ae:	005b      	lsls	r3, r3, #1
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d107      	bne.n	80066c4 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d103      	bne.n	80066c4 <HAL_SPI_TransmitReceive+0x7a>
 80066bc:	183b      	adds	r3, r7, r0
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	2b04      	cmp	r3, #4
 80066c2:	d004      	beq.n	80066ce <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80066c4:	232b      	movs	r3, #43	@ 0x2b
 80066c6:	18fb      	adds	r3, r7, r3
 80066c8:	2202      	movs	r2, #2
 80066ca:	701a      	strb	r2, [r3, #0]
    goto error;
 80066cc:	e17d      	b.n	80069ca <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d006      	beq.n	80066e2 <HAL_SPI_TransmitReceive+0x98>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d003      	beq.n	80066e2 <HAL_SPI_TransmitReceive+0x98>
 80066da:	1cbb      	adds	r3, r7, #2
 80066dc:	881b      	ldrh	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d104      	bne.n	80066ec <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80066e2:	232b      	movs	r3, #43	@ 0x2b
 80066e4:	18fb      	adds	r3, r7, r3
 80066e6:	2201      	movs	r2, #1
 80066e8:	701a      	strb	r2, [r3, #0]
    goto error;
 80066ea:	e16e      	b.n	80069ca <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2251      	movs	r2, #81	@ 0x51
 80066f0:	5c9b      	ldrb	r3, [r3, r2]
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	2b04      	cmp	r3, #4
 80066f6:	d003      	beq.n	8006700 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2251      	movs	r2, #81	@ 0x51
 80066fc:	2105      	movs	r1, #5
 80066fe:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	1cba      	adds	r2, r7, #2
 8006710:	8812      	ldrh	r2, [r2, #0]
 8006712:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	1cba      	adds	r2, r7, #2
 8006718:	8812      	ldrh	r2, [r2, #0]
 800671a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	1cba      	adds	r2, r7, #2
 8006726:	8812      	ldrh	r2, [r2, #0]
 8006728:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	1cba      	adds	r2, r7, #2
 800672e:	8812      	ldrh	r2, [r2, #0]
 8006730:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2240      	movs	r2, #64	@ 0x40
 8006746:	4013      	ands	r3, r2
 8006748:	2b40      	cmp	r3, #64	@ 0x40
 800674a:	d007      	beq.n	800675c <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2140      	movs	r1, #64	@ 0x40
 8006758:	430a      	orrs	r2, r1
 800675a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	68da      	ldr	r2, [r3, #12]
 8006760:	2380      	movs	r3, #128	@ 0x80
 8006762:	011b      	lsls	r3, r3, #4
 8006764:	429a      	cmp	r2, r3
 8006766:	d000      	beq.n	800676a <HAL_SPI_TransmitReceive+0x120>
 8006768:	e07f      	b.n	800686a <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d005      	beq.n	800677e <HAL_SPI_TransmitReceive+0x134>
 8006772:	231a      	movs	r3, #26
 8006774:	18fb      	adds	r3, r7, r3
 8006776:	881b      	ldrh	r3, [r3, #0]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d000      	beq.n	800677e <HAL_SPI_TransmitReceive+0x134>
 800677c:	e06a      	b.n	8006854 <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006782:	881a      	ldrh	r2, [r3, #0]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800678e:	1c9a      	adds	r2, r3, #2
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006798:	b29b      	uxth	r3, r3
 800679a:	3b01      	subs	r3, #1
 800679c:	b29a      	uxth	r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067a2:	e057      	b.n	8006854 <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	2202      	movs	r2, #2
 80067ac:	4013      	ands	r3, r2
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d11b      	bne.n	80067ea <HAL_SPI_TransmitReceive+0x1a0>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d016      	beq.n	80067ea <HAL_SPI_TransmitReceive+0x1a0>
 80067bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d113      	bne.n	80067ea <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067c6:	881a      	ldrh	r2, [r3, #0]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067d2:	1c9a      	adds	r2, r3, #2
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067dc:	b29b      	uxth	r3, r3
 80067de:	3b01      	subs	r3, #1
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067e6:	2300      	movs	r3, #0
 80067e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	2201      	movs	r2, #1
 80067f2:	4013      	ands	r3, r2
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d119      	bne.n	800682c <HAL_SPI_TransmitReceive+0x1e2>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d014      	beq.n	800682c <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68da      	ldr	r2, [r3, #12]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800680c:	b292      	uxth	r2, r2
 800680e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006814:	1c9a      	adds	r2, r3, #2
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800681e:	b29b      	uxth	r3, r3
 8006820:	3b01      	subs	r3, #1
 8006822:	b29a      	uxth	r2, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006828:	2301      	movs	r3, #1
 800682a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800682c:	f7fd fcca 	bl	80041c4 <HAL_GetTick>
 8006830:	0002      	movs	r2, r0
 8006832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006838:	429a      	cmp	r2, r3
 800683a:	d80b      	bhi.n	8006854 <HAL_SPI_TransmitReceive+0x20a>
 800683c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800683e:	3301      	adds	r3, #1
 8006840:	d008      	beq.n	8006854 <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8006842:	232b      	movs	r3, #43	@ 0x2b
 8006844:	18fb      	adds	r3, r7, r3
 8006846:	2203      	movs	r2, #3
 8006848:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2251      	movs	r2, #81	@ 0x51
 800684e:	2101      	movs	r1, #1
 8006850:	5499      	strb	r1, [r3, r2]
        goto error;
 8006852:	e0ba      	b.n	80069ca <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006858:	b29b      	uxth	r3, r3
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1a2      	bne.n	80067a4 <HAL_SPI_TransmitReceive+0x15a>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006862:	b29b      	uxth	r3, r3
 8006864:	2b00      	cmp	r3, #0
 8006866:	d19d      	bne.n	80067a4 <HAL_SPI_TransmitReceive+0x15a>
 8006868:	e083      	b.n	8006972 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d005      	beq.n	800687e <HAL_SPI_TransmitReceive+0x234>
 8006872:	231a      	movs	r3, #26
 8006874:	18fb      	adds	r3, r7, r3
 8006876:	881b      	ldrh	r3, [r3, #0]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d000      	beq.n	800687e <HAL_SPI_TransmitReceive+0x234>
 800687c:	e06f      	b.n	800695e <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	330c      	adds	r3, #12
 8006888:	7812      	ldrb	r2, [r2, #0]
 800688a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006890:	1c5a      	adds	r2, r3, #1
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800689a:	b29b      	uxth	r3, r3
 800689c:	3b01      	subs	r3, #1
 800689e:	b29a      	uxth	r2, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068a4:	e05b      	b.n	800695e <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	2202      	movs	r2, #2
 80068ae:	4013      	ands	r3, r2
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d11c      	bne.n	80068ee <HAL_SPI_TransmitReceive+0x2a4>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d017      	beq.n	80068ee <HAL_SPI_TransmitReceive+0x2a4>
 80068be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d114      	bne.n	80068ee <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	330c      	adds	r3, #12
 80068ce:	7812      	ldrb	r2, [r2, #0]
 80068d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068d6:	1c5a      	adds	r2, r3, #1
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	3b01      	subs	r3, #1
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80068ea:	2300      	movs	r3, #0
 80068ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	2201      	movs	r2, #1
 80068f6:	4013      	ands	r3, r2
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d119      	bne.n	8006930 <HAL_SPI_TransmitReceive+0x2e6>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006900:	b29b      	uxth	r3, r3
 8006902:	2b00      	cmp	r3, #0
 8006904:	d014      	beq.n	8006930 <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68da      	ldr	r2, [r3, #12]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006910:	b2d2      	uxtb	r2, r2
 8006912:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006918:	1c5a      	adds	r2, r3, #1
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006922:	b29b      	uxth	r3, r3
 8006924:	3b01      	subs	r3, #1
 8006926:	b29a      	uxth	r2, r3
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800692c:	2301      	movs	r3, #1
 800692e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006930:	f7fd fc48 	bl	80041c4 <HAL_GetTick>
 8006934:	0002      	movs	r2, r0
 8006936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800693c:	429a      	cmp	r2, r3
 800693e:	d802      	bhi.n	8006946 <HAL_SPI_TransmitReceive+0x2fc>
 8006940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006942:	3301      	adds	r3, #1
 8006944:	d102      	bne.n	800694c <HAL_SPI_TransmitReceive+0x302>
 8006946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006948:	2b00      	cmp	r3, #0
 800694a:	d108      	bne.n	800695e <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 800694c:	232b      	movs	r3, #43	@ 0x2b
 800694e:	18fb      	adds	r3, r7, r3
 8006950:	2203      	movs	r2, #3
 8006952:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2251      	movs	r2, #81	@ 0x51
 8006958:	2101      	movs	r1, #1
 800695a:	5499      	strb	r1, [r3, r2]
        goto error;
 800695c:	e035      	b.n	80069ca <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006962:	b29b      	uxth	r3, r3
 8006964:	2b00      	cmp	r3, #0
 8006966:	d19e      	bne.n	80068a6 <HAL_SPI_TransmitReceive+0x25c>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800696c:	b29b      	uxth	r3, r3
 800696e:	2b00      	cmp	r3, #0
 8006970:	d199      	bne.n	80068a6 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006972:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006974:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	0018      	movs	r0, r3
 800697a:	f000 f8bf 	bl	8006afc <SPI_EndRxTxTransaction>
 800697e:	1e03      	subs	r3, r0, #0
 8006980:	d007      	beq.n	8006992 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8006982:	232b      	movs	r3, #43	@ 0x2b
 8006984:	18fb      	adds	r3, r7, r3
 8006986:	2201      	movs	r2, #1
 8006988:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2220      	movs	r2, #32
 800698e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8006990:	e01b      	b.n	80069ca <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10a      	bne.n	80069b0 <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800699a:	2300      	movs	r3, #0
 800699c:	617b      	str	r3, [r7, #20]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	617b      	str	r3, [r7, #20]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	617b      	str	r3, [r7, #20]
 80069ae:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d004      	beq.n	80069c2 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 80069b8:	232b      	movs	r3, #43	@ 0x2b
 80069ba:	18fb      	adds	r3, r7, r3
 80069bc:	2201      	movs	r2, #1
 80069be:	701a      	strb	r2, [r3, #0]
 80069c0:	e003      	b.n	80069ca <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2251      	movs	r2, #81	@ 0x51
 80069c6:	2101      	movs	r1, #1
 80069c8:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2250      	movs	r2, #80	@ 0x50
 80069ce:	2100      	movs	r1, #0
 80069d0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80069d2:	232b      	movs	r3, #43	@ 0x2b
 80069d4:	18fb      	adds	r3, r7, r3
 80069d6:	781b      	ldrb	r3, [r3, #0]
}
 80069d8:	0018      	movs	r0, r3
 80069da:	46bd      	mov	sp, r7
 80069dc:	b00c      	add	sp, #48	@ 0x30
 80069de:	bd80      	pop	{r7, pc}

080069e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b088      	sub	sp, #32
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	603b      	str	r3, [r7, #0]
 80069ec:	1dfb      	adds	r3, r7, #7
 80069ee:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80069f0:	f7fd fbe8 	bl	80041c4 <HAL_GetTick>
 80069f4:	0002      	movs	r2, r0
 80069f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f8:	1a9b      	subs	r3, r3, r2
 80069fa:	683a      	ldr	r2, [r7, #0]
 80069fc:	18d3      	adds	r3, r2, r3
 80069fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a00:	f7fd fbe0 	bl	80041c4 <HAL_GetTick>
 8006a04:	0003      	movs	r3, r0
 8006a06:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a08:	4b3a      	ldr	r3, [pc, #232]	@ (8006af4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	015b      	lsls	r3, r3, #5
 8006a0e:	0d1b      	lsrs	r3, r3, #20
 8006a10:	69fa      	ldr	r2, [r7, #28]
 8006a12:	4353      	muls	r3, r2
 8006a14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a16:	e058      	b.n	8006aca <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	d055      	beq.n	8006aca <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a1e:	f7fd fbd1 	bl	80041c4 <HAL_GetTick>
 8006a22:	0002      	movs	r2, r0
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	69fa      	ldr	r2, [r7, #28]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d902      	bls.n	8006a34 <SPI_WaitFlagStateUntilTimeout+0x54>
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d142      	bne.n	8006aba <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	685a      	ldr	r2, [r3, #4]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	21e0      	movs	r1, #224	@ 0xe0
 8006a40:	438a      	bics	r2, r1
 8006a42:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	685a      	ldr	r2, [r3, #4]
 8006a48:	2382      	movs	r3, #130	@ 0x82
 8006a4a:	005b      	lsls	r3, r3, #1
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d113      	bne.n	8006a78 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	689a      	ldr	r2, [r3, #8]
 8006a54:	2380      	movs	r3, #128	@ 0x80
 8006a56:	021b      	lsls	r3, r3, #8
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d005      	beq.n	8006a68 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	689a      	ldr	r2, [r3, #8]
 8006a60:	2380      	movs	r3, #128	@ 0x80
 8006a62:	00db      	lsls	r3, r3, #3
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d107      	bne.n	8006a78 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2140      	movs	r1, #64	@ 0x40
 8006a74:	438a      	bics	r2, r1
 8006a76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a7c:	2380      	movs	r3, #128	@ 0x80
 8006a7e:	019b      	lsls	r3, r3, #6
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d110      	bne.n	8006aa6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	491a      	ldr	r1, [pc, #104]	@ (8006af8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006a90:	400a      	ands	r2, r1
 8006a92:	601a      	str	r2, [r3, #0]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2180      	movs	r1, #128	@ 0x80
 8006aa0:	0189      	lsls	r1, r1, #6
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2251      	movs	r2, #81	@ 0x51
 8006aaa:	2101      	movs	r1, #1
 8006aac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2250      	movs	r2, #80	@ 0x50
 8006ab2:	2100      	movs	r1, #0
 8006ab4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e017      	b.n	8006aea <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d101      	bne.n	8006ac4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	425a      	negs	r2, r3
 8006ada:	4153      	adcs	r3, r2
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	001a      	movs	r2, r3
 8006ae0:	1dfb      	adds	r3, r7, #7
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d197      	bne.n	8006a18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	0018      	movs	r0, r3
 8006aec:	46bd      	mov	sp, r7
 8006aee:	b008      	add	sp, #32
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	46c0      	nop			@ (mov r8, r8)
 8006af4:	20000000 	.word	0x20000000
 8006af8:	ffffdfff 	.word	0xffffdfff

08006afc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b088      	sub	sp, #32
 8006b00:	af02      	add	r7, sp, #8
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006b08:	4b1d      	ldr	r3, [pc, #116]	@ (8006b80 <SPI_EndRxTxTransaction+0x84>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	491d      	ldr	r1, [pc, #116]	@ (8006b84 <SPI_EndRxTxTransaction+0x88>)
 8006b0e:	0018      	movs	r0, r3
 8006b10:	f7f9 fb0c 	bl	800012c <__udivsi3>
 8006b14:	0003      	movs	r3, r0
 8006b16:	001a      	movs	r2, r3
 8006b18:	0013      	movs	r3, r2
 8006b1a:	015b      	lsls	r3, r3, #5
 8006b1c:	1a9b      	subs	r3, r3, r2
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	189b      	adds	r3, r3, r2
 8006b22:	00db      	lsls	r3, r3, #3
 8006b24:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	2382      	movs	r3, #130	@ 0x82
 8006b2c:	005b      	lsls	r3, r3, #1
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d112      	bne.n	8006b58 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	0013      	movs	r3, r2
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	2180      	movs	r1, #128	@ 0x80
 8006b40:	f7ff ff4e 	bl	80069e0 <SPI_WaitFlagStateUntilTimeout>
 8006b44:	1e03      	subs	r3, r0, #0
 8006b46:	d016      	beq.n	8006b76 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b4c:	2220      	movs	r2, #32
 8006b4e:	431a      	orrs	r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e00f      	b.n	8006b78 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00a      	beq.n	8006b74 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	3b01      	subs	r3, #1
 8006b62:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	2280      	movs	r2, #128	@ 0x80
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	2b80      	cmp	r3, #128	@ 0x80
 8006b70:	d0f2      	beq.n	8006b58 <SPI_EndRxTxTransaction+0x5c>
 8006b72:	e000      	b.n	8006b76 <SPI_EndRxTxTransaction+0x7a>
        break;
 8006b74:	46c0      	nop			@ (mov r8, r8)
  }

  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	0018      	movs	r0, r3
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	b006      	add	sp, #24
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	20000000 	.word	0x20000000
 8006b84:	016e3600 	.word	0x016e3600

08006b88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d101      	bne.n	8006b9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e032      	b.n	8006c00 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2239      	movs	r2, #57	@ 0x39
 8006b9e:	5c9b      	ldrb	r3, [r3, r2]
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d107      	bne.n	8006bb6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2238      	movs	r2, #56	@ 0x38
 8006baa:	2100      	movs	r1, #0
 8006bac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	0018      	movs	r0, r3
 8006bb2:	f000 f829 	bl	8006c08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2239      	movs	r2, #57	@ 0x39
 8006bba:	2102      	movs	r1, #2
 8006bbc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	3304      	adds	r3, #4
 8006bc6:	0019      	movs	r1, r3
 8006bc8:	0010      	movs	r0, r2
 8006bca:	f000 f97f 	bl	8006ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	223e      	movs	r2, #62	@ 0x3e
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	223a      	movs	r2, #58	@ 0x3a
 8006bda:	2101      	movs	r1, #1
 8006bdc:	5499      	strb	r1, [r3, r2]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	223b      	movs	r2, #59	@ 0x3b
 8006be2:	2101      	movs	r1, #1
 8006be4:	5499      	strb	r1, [r3, r2]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	223c      	movs	r2, #60	@ 0x3c
 8006bea:	2101      	movs	r1, #1
 8006bec:	5499      	strb	r1, [r3, r2]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	223d      	movs	r2, #61	@ 0x3d
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2239      	movs	r2, #57	@ 0x39
 8006bfa:	2101      	movs	r1, #1
 8006bfc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	0018      	movs	r0, r3
 8006c02:	46bd      	mov	sp, r7
 8006c04:	b002      	add	sp, #8
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006c10:	46c0      	nop			@ (mov r8, r8)
 8006c12:	46bd      	mov	sp, r7
 8006c14:	b002      	add	sp, #8
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2239      	movs	r2, #57	@ 0x39
 8006c24:	5c9b      	ldrb	r3, [r3, r2]
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d001      	beq.n	8006c30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e03b      	b.n	8006ca8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2239      	movs	r2, #57	@ 0x39
 8006c34:	2102      	movs	r1, #2
 8006c36:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68da      	ldr	r2, [r3, #12]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2101      	movs	r1, #1
 8006c44:	430a      	orrs	r2, r1
 8006c46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	2380      	movs	r3, #128	@ 0x80
 8006c4e:	05db      	lsls	r3, r3, #23
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d00e      	beq.n	8006c72 <HAL_TIM_Base_Start_IT+0x5a>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a15      	ldr	r2, [pc, #84]	@ (8006cb0 <HAL_TIM_Base_Start_IT+0x98>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d009      	beq.n	8006c72 <HAL_TIM_Base_Start_IT+0x5a>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a14      	ldr	r2, [pc, #80]	@ (8006cb4 <HAL_TIM_Base_Start_IT+0x9c>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d004      	beq.n	8006c72 <HAL_TIM_Base_Start_IT+0x5a>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a12      	ldr	r2, [pc, #72]	@ (8006cb8 <HAL_TIM_Base_Start_IT+0xa0>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d111      	bne.n	8006c96 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	2207      	movs	r2, #7
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2b06      	cmp	r3, #6
 8006c82:	d010      	beq.n	8006ca6 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2101      	movs	r1, #1
 8006c90:	430a      	orrs	r2, r1
 8006c92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c94:	e007      	b.n	8006ca6 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2101      	movs	r1, #1
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	0018      	movs	r0, r3
 8006caa:	46bd      	mov	sp, r7
 8006cac:	b004      	add	sp, #16
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	40000400 	.word	0x40000400
 8006cb4:	40010800 	.word	0x40010800
 8006cb8:	40011400 	.word	0x40011400

08006cbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	2202      	movs	r2, #2
 8006ccc:	4013      	ands	r3, r2
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d124      	bne.n	8006d1c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	2202      	movs	r2, #2
 8006cda:	4013      	ands	r3, r2
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d11d      	bne.n	8006d1c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2203      	movs	r2, #3
 8006ce6:	4252      	negs	r2, r2
 8006ce8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2201      	movs	r2, #1
 8006cee:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	2203      	movs	r2, #3
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	d004      	beq.n	8006d06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	0018      	movs	r0, r3
 8006d00:	f000 f8cc 	bl	8006e9c <HAL_TIM_IC_CaptureCallback>
 8006d04:	e007      	b.n	8006d16 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	0018      	movs	r0, r3
 8006d0a:	f000 f8bf 	bl	8006e8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	0018      	movs	r0, r3
 8006d12:	f000 f8cb 	bl	8006eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	2204      	movs	r2, #4
 8006d24:	4013      	ands	r3, r2
 8006d26:	2b04      	cmp	r3, #4
 8006d28:	d125      	bne.n	8006d76 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	2204      	movs	r2, #4
 8006d32:	4013      	ands	r3, r2
 8006d34:	2b04      	cmp	r3, #4
 8006d36:	d11e      	bne.n	8006d76 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2205      	movs	r2, #5
 8006d3e:	4252      	negs	r2, r2
 8006d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2202      	movs	r2, #2
 8006d46:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	699a      	ldr	r2, [r3, #24]
 8006d4e:	23c0      	movs	r3, #192	@ 0xc0
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	4013      	ands	r3, r2
 8006d54:	d004      	beq.n	8006d60 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	0018      	movs	r0, r3
 8006d5a:	f000 f89f 	bl	8006e9c <HAL_TIM_IC_CaptureCallback>
 8006d5e:	e007      	b.n	8006d70 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	0018      	movs	r0, r3
 8006d64:	f000 f892 	bl	8006e8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	0018      	movs	r0, r3
 8006d6c:	f000 f89e 	bl	8006eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	2208      	movs	r2, #8
 8006d7e:	4013      	ands	r3, r2
 8006d80:	2b08      	cmp	r3, #8
 8006d82:	d124      	bne.n	8006dce <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	2208      	movs	r2, #8
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	2b08      	cmp	r3, #8
 8006d90:	d11d      	bne.n	8006dce <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2209      	movs	r2, #9
 8006d98:	4252      	negs	r2, r2
 8006d9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2204      	movs	r2, #4
 8006da0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	69db      	ldr	r3, [r3, #28]
 8006da8:	2203      	movs	r2, #3
 8006daa:	4013      	ands	r3, r2
 8006dac:	d004      	beq.n	8006db8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	0018      	movs	r0, r3
 8006db2:	f000 f873 	bl	8006e9c <HAL_TIM_IC_CaptureCallback>
 8006db6:	e007      	b.n	8006dc8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	0018      	movs	r0, r3
 8006dbc:	f000 f866 	bl	8006e8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	0018      	movs	r0, r3
 8006dc4:	f000 f872 	bl	8006eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	2210      	movs	r2, #16
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	2b10      	cmp	r3, #16
 8006dda:	d125      	bne.n	8006e28 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	2210      	movs	r2, #16
 8006de4:	4013      	ands	r3, r2
 8006de6:	2b10      	cmp	r3, #16
 8006de8:	d11e      	bne.n	8006e28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2211      	movs	r2, #17
 8006df0:	4252      	negs	r2, r2
 8006df2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2208      	movs	r2, #8
 8006df8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	69da      	ldr	r2, [r3, #28]
 8006e00:	23c0      	movs	r3, #192	@ 0xc0
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4013      	ands	r3, r2
 8006e06:	d004      	beq.n	8006e12 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	0018      	movs	r0, r3
 8006e0c:	f000 f846 	bl	8006e9c <HAL_TIM_IC_CaptureCallback>
 8006e10:	e007      	b.n	8006e22 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	0018      	movs	r0, r3
 8006e16:	f000 f839 	bl	8006e8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	0018      	movs	r0, r3
 8006e1e:	f000 f845 	bl	8006eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	4013      	ands	r3, r2
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d10f      	bne.n	8006e56 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	4013      	ands	r3, r2
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d108      	bne.n	8006e56 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2202      	movs	r2, #2
 8006e4a:	4252      	negs	r2, r2
 8006e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	0018      	movs	r0, r3
 8006e52:	f7fc fabf 	bl	80033d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	2240      	movs	r2, #64	@ 0x40
 8006e5e:	4013      	ands	r3, r2
 8006e60:	2b40      	cmp	r3, #64	@ 0x40
 8006e62:	d10f      	bne.n	8006e84 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	2240      	movs	r2, #64	@ 0x40
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	2b40      	cmp	r3, #64	@ 0x40
 8006e70:	d108      	bne.n	8006e84 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2241      	movs	r2, #65	@ 0x41
 8006e78:	4252      	negs	r2, r2
 8006e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	0018      	movs	r0, r3
 8006e80:	f000 f81c 	bl	8006ebc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e84:	46c0      	nop			@ (mov r8, r8)
 8006e86:	46bd      	mov	sp, r7
 8006e88:	b002      	add	sp, #8
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e94:	46c0      	nop			@ (mov r8, r8)
 8006e96:	46bd      	mov	sp, r7
 8006e98:	b002      	add	sp, #8
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ea4:	46c0      	nop			@ (mov r8, r8)
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	b002      	add	sp, #8
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006eb4:	46c0      	nop			@ (mov r8, r8)
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	b002      	add	sp, #8
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ec4:	46c0      	nop			@ (mov r8, r8)
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	b002      	add	sp, #8
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	2380      	movs	r3, #128	@ 0x80
 8006ee0:	05db      	lsls	r3, r3, #23
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d00b      	beq.n	8006efe <TIM_Base_SetConfig+0x32>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a23      	ldr	r2, [pc, #140]	@ (8006f78 <TIM_Base_SetConfig+0xac>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d007      	beq.n	8006efe <TIM_Base_SetConfig+0x32>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a22      	ldr	r2, [pc, #136]	@ (8006f7c <TIM_Base_SetConfig+0xb0>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d003      	beq.n	8006efe <TIM_Base_SetConfig+0x32>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a21      	ldr	r2, [pc, #132]	@ (8006f80 <TIM_Base_SetConfig+0xb4>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d108      	bne.n	8006f10 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2270      	movs	r2, #112	@ 0x70
 8006f02:	4393      	bics	r3, r2
 8006f04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	2380      	movs	r3, #128	@ 0x80
 8006f14:	05db      	lsls	r3, r3, #23
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d00b      	beq.n	8006f32 <TIM_Base_SetConfig+0x66>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a16      	ldr	r2, [pc, #88]	@ (8006f78 <TIM_Base_SetConfig+0xac>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d007      	beq.n	8006f32 <TIM_Base_SetConfig+0x66>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a15      	ldr	r2, [pc, #84]	@ (8006f7c <TIM_Base_SetConfig+0xb0>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d003      	beq.n	8006f32 <TIM_Base_SetConfig+0x66>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a14      	ldr	r2, [pc, #80]	@ (8006f80 <TIM_Base_SetConfig+0xb4>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d108      	bne.n	8006f44 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	4a13      	ldr	r2, [pc, #76]	@ (8006f84 <TIM_Base_SetConfig+0xb8>)
 8006f36:	4013      	ands	r3, r2
 8006f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2280      	movs	r2, #128	@ 0x80
 8006f48:	4393      	bics	r3, r2
 8006f4a:	001a      	movs	r2, r3
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	689a      	ldr	r2, [r3, #8]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	615a      	str	r2, [r3, #20]
}
 8006f70:	46c0      	nop			@ (mov r8, r8)
 8006f72:	46bd      	mov	sp, r7
 8006f74:	b004      	add	sp, #16
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	40000400 	.word	0x40000400
 8006f7c:	40010800 	.word	0x40010800
 8006f80:	40011400 	.word	0x40011400
 8006f84:	fffffcff 	.word	0xfffffcff

08006f88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e044      	b.n	8007024 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d107      	bne.n	8006fb2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2278      	movs	r2, #120	@ 0x78
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	0018      	movs	r0, r3
 8006fae:	f7fc ff7d 	bl	8003eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2224      	movs	r2, #36	@ 0x24
 8006fb6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2101      	movs	r1, #1
 8006fc4:	438a      	bics	r2, r1
 8006fc6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	0018      	movs	r0, r3
 8006fcc:	f000 f8d0 	bl	8007170 <UART_SetConfig>
 8006fd0:	0003      	movs	r3, r0
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d101      	bne.n	8006fda <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e024      	b.n	8007024 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d003      	beq.n	8006fea <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	0018      	movs	r0, r3
 8006fe6:	f000 fb61 	bl	80076ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	490d      	ldr	r1, [pc, #52]	@ (800702c <HAL_UART_Init+0xa4>)
 8006ff6:	400a      	ands	r2, r1
 8006ff8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	689a      	ldr	r2, [r3, #8]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	212a      	movs	r1, #42	@ 0x2a
 8007006:	438a      	bics	r2, r1
 8007008:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2101      	movs	r1, #1
 8007016:	430a      	orrs	r2, r1
 8007018:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	0018      	movs	r0, r3
 800701e:	f000 fbf9 	bl	8007814 <UART_CheckIdleState>
 8007022:	0003      	movs	r3, r0
}
 8007024:	0018      	movs	r0, r3
 8007026:	46bd      	mov	sp, r7
 8007028:	b002      	add	sp, #8
 800702a:	bd80      	pop	{r7, pc}
 800702c:	ffffb7ff 	.word	0xffffb7ff

08007030 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b08a      	sub	sp, #40	@ 0x28
 8007034:	af02      	add	r7, sp, #8
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	603b      	str	r3, [r7, #0]
 800703c:	1dbb      	adds	r3, r7, #6
 800703e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007044:	2b20      	cmp	r3, #32
 8007046:	d000      	beq.n	800704a <HAL_UART_Transmit+0x1a>
 8007048:	e08c      	b.n	8007164 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d003      	beq.n	8007058 <HAL_UART_Transmit+0x28>
 8007050:	1dbb      	adds	r3, r7, #6
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d101      	bne.n	800705c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e084      	b.n	8007166 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	689a      	ldr	r2, [r3, #8]
 8007060:	2380      	movs	r3, #128	@ 0x80
 8007062:	015b      	lsls	r3, r3, #5
 8007064:	429a      	cmp	r2, r3
 8007066:	d109      	bne.n	800707c <HAL_UART_Transmit+0x4c>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d105      	bne.n	800707c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	2201      	movs	r2, #1
 8007074:	4013      	ands	r3, r2
 8007076:	d001      	beq.n	800707c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	e074      	b.n	8007166 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2284      	movs	r2, #132	@ 0x84
 8007080:	2100      	movs	r1, #0
 8007082:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2221      	movs	r2, #33	@ 0x21
 8007088:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800708a:	f7fd f89b 	bl	80041c4 <HAL_GetTick>
 800708e:	0003      	movs	r3, r0
 8007090:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	1dba      	adds	r2, r7, #6
 8007096:	2150      	movs	r1, #80	@ 0x50
 8007098:	8812      	ldrh	r2, [r2, #0]
 800709a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	1dba      	adds	r2, r7, #6
 80070a0:	2152      	movs	r1, #82	@ 0x52
 80070a2:	8812      	ldrh	r2, [r2, #0]
 80070a4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	689a      	ldr	r2, [r3, #8]
 80070aa:	2380      	movs	r3, #128	@ 0x80
 80070ac:	015b      	lsls	r3, r3, #5
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d108      	bne.n	80070c4 <HAL_UART_Transmit+0x94>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d104      	bne.n	80070c4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80070ba:	2300      	movs	r3, #0
 80070bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	61bb      	str	r3, [r7, #24]
 80070c2:	e003      	b.n	80070cc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070c8:	2300      	movs	r3, #0
 80070ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80070cc:	e02f      	b.n	800712e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070ce:	697a      	ldr	r2, [r7, #20]
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	9300      	str	r3, [sp, #0]
 80070d6:	0013      	movs	r3, r2
 80070d8:	2200      	movs	r2, #0
 80070da:	2180      	movs	r1, #128	@ 0x80
 80070dc:	f000 fc42 	bl	8007964 <UART_WaitOnFlagUntilTimeout>
 80070e0:	1e03      	subs	r3, r0, #0
 80070e2:	d004      	beq.n	80070ee <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2220      	movs	r2, #32
 80070e8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80070ea:	2303      	movs	r3, #3
 80070ec:	e03b      	b.n	8007166 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d10b      	bne.n	800710c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	881b      	ldrh	r3, [r3, #0]
 80070f8:	001a      	movs	r2, r3
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	05d2      	lsls	r2, r2, #23
 8007100:	0dd2      	lsrs	r2, r2, #23
 8007102:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	3302      	adds	r3, #2
 8007108:	61bb      	str	r3, [r7, #24]
 800710a:	e007      	b.n	800711c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	781a      	ldrb	r2, [r3, #0]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	3301      	adds	r3, #1
 800711a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2252      	movs	r2, #82	@ 0x52
 8007120:	5a9b      	ldrh	r3, [r3, r2]
 8007122:	b29b      	uxth	r3, r3
 8007124:	3b01      	subs	r3, #1
 8007126:	b299      	uxth	r1, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2252      	movs	r2, #82	@ 0x52
 800712c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2252      	movs	r2, #82	@ 0x52
 8007132:	5a9b      	ldrh	r3, [r3, r2]
 8007134:	b29b      	uxth	r3, r3
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1c9      	bne.n	80070ce <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	0013      	movs	r3, r2
 8007144:	2200      	movs	r2, #0
 8007146:	2140      	movs	r1, #64	@ 0x40
 8007148:	f000 fc0c 	bl	8007964 <UART_WaitOnFlagUntilTimeout>
 800714c:	1e03      	subs	r3, r0, #0
 800714e:	d004      	beq.n	800715a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2220      	movs	r2, #32
 8007154:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e005      	b.n	8007166 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2220      	movs	r2, #32
 800715e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007160:	2300      	movs	r3, #0
 8007162:	e000      	b.n	8007166 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8007164:	2302      	movs	r3, #2
  }
}
 8007166:	0018      	movs	r0, r3
 8007168:	46bd      	mov	sp, r7
 800716a:	b008      	add	sp, #32
 800716c:	bd80      	pop	{r7, pc}
	...

08007170 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007170:	b5b0      	push	{r4, r5, r7, lr}
 8007172:	b08e      	sub	sp, #56	@ 0x38
 8007174:	af00      	add	r7, sp, #0
 8007176:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007178:	231a      	movs	r3, #26
 800717a:	2218      	movs	r2, #24
 800717c:	189b      	adds	r3, r3, r2
 800717e:	19db      	adds	r3, r3, r7
 8007180:	2200      	movs	r2, #0
 8007182:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	689a      	ldr	r2, [r3, #8]
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	431a      	orrs	r2, r3
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	431a      	orrs	r2, r3
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	69db      	ldr	r3, [r3, #28]
 8007198:	4313      	orrs	r3, r2
 800719a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4ac3      	ldr	r2, [pc, #780]	@ (80074b0 <UART_SetConfig+0x340>)
 80071a4:	4013      	ands	r3, r2
 80071a6:	0019      	movs	r1, r3
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80071ae:	430a      	orrs	r2, r1
 80071b0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	4abe      	ldr	r2, [pc, #760]	@ (80074b4 <UART_SetConfig+0x344>)
 80071ba:	4013      	ands	r3, r2
 80071bc:	0019      	movs	r1, r3
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	68da      	ldr	r2, [r3, #12]
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	430a      	orrs	r2, r1
 80071c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4ab8      	ldr	r2, [pc, #736]	@ (80074b8 <UART_SetConfig+0x348>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d004      	beq.n	80071e4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80071e0:	4313      	orrs	r3, r2
 80071e2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	4ab4      	ldr	r2, [pc, #720]	@ (80074bc <UART_SetConfig+0x34c>)
 80071ec:	4013      	ands	r3, r2
 80071ee:	0019      	movs	r1, r3
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80071f6:	430a      	orrs	r2, r1
 80071f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4ab0      	ldr	r2, [pc, #704]	@ (80074c0 <UART_SetConfig+0x350>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d131      	bne.n	8007268 <UART_SetConfig+0xf8>
 8007204:	4baf      	ldr	r3, [pc, #700]	@ (80074c4 <UART_SetConfig+0x354>)
 8007206:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007208:	2203      	movs	r2, #3
 800720a:	4013      	ands	r3, r2
 800720c:	2b03      	cmp	r3, #3
 800720e:	d01d      	beq.n	800724c <UART_SetConfig+0xdc>
 8007210:	d823      	bhi.n	800725a <UART_SetConfig+0xea>
 8007212:	2b02      	cmp	r3, #2
 8007214:	d00c      	beq.n	8007230 <UART_SetConfig+0xc0>
 8007216:	d820      	bhi.n	800725a <UART_SetConfig+0xea>
 8007218:	2b00      	cmp	r3, #0
 800721a:	d002      	beq.n	8007222 <UART_SetConfig+0xb2>
 800721c:	2b01      	cmp	r3, #1
 800721e:	d00e      	beq.n	800723e <UART_SetConfig+0xce>
 8007220:	e01b      	b.n	800725a <UART_SetConfig+0xea>
 8007222:	231b      	movs	r3, #27
 8007224:	2218      	movs	r2, #24
 8007226:	189b      	adds	r3, r3, r2
 8007228:	19db      	adds	r3, r3, r7
 800722a:	2201      	movs	r2, #1
 800722c:	701a      	strb	r2, [r3, #0]
 800722e:	e0b4      	b.n	800739a <UART_SetConfig+0x22a>
 8007230:	231b      	movs	r3, #27
 8007232:	2218      	movs	r2, #24
 8007234:	189b      	adds	r3, r3, r2
 8007236:	19db      	adds	r3, r3, r7
 8007238:	2202      	movs	r2, #2
 800723a:	701a      	strb	r2, [r3, #0]
 800723c:	e0ad      	b.n	800739a <UART_SetConfig+0x22a>
 800723e:	231b      	movs	r3, #27
 8007240:	2218      	movs	r2, #24
 8007242:	189b      	adds	r3, r3, r2
 8007244:	19db      	adds	r3, r3, r7
 8007246:	2204      	movs	r2, #4
 8007248:	701a      	strb	r2, [r3, #0]
 800724a:	e0a6      	b.n	800739a <UART_SetConfig+0x22a>
 800724c:	231b      	movs	r3, #27
 800724e:	2218      	movs	r2, #24
 8007250:	189b      	adds	r3, r3, r2
 8007252:	19db      	adds	r3, r3, r7
 8007254:	2208      	movs	r2, #8
 8007256:	701a      	strb	r2, [r3, #0]
 8007258:	e09f      	b.n	800739a <UART_SetConfig+0x22a>
 800725a:	231b      	movs	r3, #27
 800725c:	2218      	movs	r2, #24
 800725e:	189b      	adds	r3, r3, r2
 8007260:	19db      	adds	r3, r3, r7
 8007262:	2210      	movs	r2, #16
 8007264:	701a      	strb	r2, [r3, #0]
 8007266:	e098      	b.n	800739a <UART_SetConfig+0x22a>
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a96      	ldr	r2, [pc, #600]	@ (80074c8 <UART_SetConfig+0x358>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d131      	bne.n	80072d6 <UART_SetConfig+0x166>
 8007272:	4b94      	ldr	r3, [pc, #592]	@ (80074c4 <UART_SetConfig+0x354>)
 8007274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007276:	220c      	movs	r2, #12
 8007278:	4013      	ands	r3, r2
 800727a:	2b0c      	cmp	r3, #12
 800727c:	d01d      	beq.n	80072ba <UART_SetConfig+0x14a>
 800727e:	d823      	bhi.n	80072c8 <UART_SetConfig+0x158>
 8007280:	2b08      	cmp	r3, #8
 8007282:	d00c      	beq.n	800729e <UART_SetConfig+0x12e>
 8007284:	d820      	bhi.n	80072c8 <UART_SetConfig+0x158>
 8007286:	2b00      	cmp	r3, #0
 8007288:	d002      	beq.n	8007290 <UART_SetConfig+0x120>
 800728a:	2b04      	cmp	r3, #4
 800728c:	d00e      	beq.n	80072ac <UART_SetConfig+0x13c>
 800728e:	e01b      	b.n	80072c8 <UART_SetConfig+0x158>
 8007290:	231b      	movs	r3, #27
 8007292:	2218      	movs	r2, #24
 8007294:	189b      	adds	r3, r3, r2
 8007296:	19db      	adds	r3, r3, r7
 8007298:	2200      	movs	r2, #0
 800729a:	701a      	strb	r2, [r3, #0]
 800729c:	e07d      	b.n	800739a <UART_SetConfig+0x22a>
 800729e:	231b      	movs	r3, #27
 80072a0:	2218      	movs	r2, #24
 80072a2:	189b      	adds	r3, r3, r2
 80072a4:	19db      	adds	r3, r3, r7
 80072a6:	2202      	movs	r2, #2
 80072a8:	701a      	strb	r2, [r3, #0]
 80072aa:	e076      	b.n	800739a <UART_SetConfig+0x22a>
 80072ac:	231b      	movs	r3, #27
 80072ae:	2218      	movs	r2, #24
 80072b0:	189b      	adds	r3, r3, r2
 80072b2:	19db      	adds	r3, r3, r7
 80072b4:	2204      	movs	r2, #4
 80072b6:	701a      	strb	r2, [r3, #0]
 80072b8:	e06f      	b.n	800739a <UART_SetConfig+0x22a>
 80072ba:	231b      	movs	r3, #27
 80072bc:	2218      	movs	r2, #24
 80072be:	189b      	adds	r3, r3, r2
 80072c0:	19db      	adds	r3, r3, r7
 80072c2:	2208      	movs	r2, #8
 80072c4:	701a      	strb	r2, [r3, #0]
 80072c6:	e068      	b.n	800739a <UART_SetConfig+0x22a>
 80072c8:	231b      	movs	r3, #27
 80072ca:	2218      	movs	r2, #24
 80072cc:	189b      	adds	r3, r3, r2
 80072ce:	19db      	adds	r3, r3, r7
 80072d0:	2210      	movs	r2, #16
 80072d2:	701a      	strb	r2, [r3, #0]
 80072d4:	e061      	b.n	800739a <UART_SetConfig+0x22a>
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a7c      	ldr	r2, [pc, #496]	@ (80074cc <UART_SetConfig+0x35c>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d106      	bne.n	80072ee <UART_SetConfig+0x17e>
 80072e0:	231b      	movs	r3, #27
 80072e2:	2218      	movs	r2, #24
 80072e4:	189b      	adds	r3, r3, r2
 80072e6:	19db      	adds	r3, r3, r7
 80072e8:	2200      	movs	r2, #0
 80072ea:	701a      	strb	r2, [r3, #0]
 80072ec:	e055      	b.n	800739a <UART_SetConfig+0x22a>
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a77      	ldr	r2, [pc, #476]	@ (80074d0 <UART_SetConfig+0x360>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d106      	bne.n	8007306 <UART_SetConfig+0x196>
 80072f8:	231b      	movs	r3, #27
 80072fa:	2218      	movs	r2, #24
 80072fc:	189b      	adds	r3, r3, r2
 80072fe:	19db      	adds	r3, r3, r7
 8007300:	2200      	movs	r2, #0
 8007302:	701a      	strb	r2, [r3, #0]
 8007304:	e049      	b.n	800739a <UART_SetConfig+0x22a>
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a6b      	ldr	r2, [pc, #428]	@ (80074b8 <UART_SetConfig+0x348>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d13e      	bne.n	800738e <UART_SetConfig+0x21e>
 8007310:	4b6c      	ldr	r3, [pc, #432]	@ (80074c4 <UART_SetConfig+0x354>)
 8007312:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007314:	23c0      	movs	r3, #192	@ 0xc0
 8007316:	011b      	lsls	r3, r3, #4
 8007318:	4013      	ands	r3, r2
 800731a:	22c0      	movs	r2, #192	@ 0xc0
 800731c:	0112      	lsls	r2, r2, #4
 800731e:	4293      	cmp	r3, r2
 8007320:	d027      	beq.n	8007372 <UART_SetConfig+0x202>
 8007322:	22c0      	movs	r2, #192	@ 0xc0
 8007324:	0112      	lsls	r2, r2, #4
 8007326:	4293      	cmp	r3, r2
 8007328:	d82a      	bhi.n	8007380 <UART_SetConfig+0x210>
 800732a:	2280      	movs	r2, #128	@ 0x80
 800732c:	0112      	lsls	r2, r2, #4
 800732e:	4293      	cmp	r3, r2
 8007330:	d011      	beq.n	8007356 <UART_SetConfig+0x1e6>
 8007332:	2280      	movs	r2, #128	@ 0x80
 8007334:	0112      	lsls	r2, r2, #4
 8007336:	4293      	cmp	r3, r2
 8007338:	d822      	bhi.n	8007380 <UART_SetConfig+0x210>
 800733a:	2b00      	cmp	r3, #0
 800733c:	d004      	beq.n	8007348 <UART_SetConfig+0x1d8>
 800733e:	2280      	movs	r2, #128	@ 0x80
 8007340:	00d2      	lsls	r2, r2, #3
 8007342:	4293      	cmp	r3, r2
 8007344:	d00e      	beq.n	8007364 <UART_SetConfig+0x1f4>
 8007346:	e01b      	b.n	8007380 <UART_SetConfig+0x210>
 8007348:	231b      	movs	r3, #27
 800734a:	2218      	movs	r2, #24
 800734c:	189b      	adds	r3, r3, r2
 800734e:	19db      	adds	r3, r3, r7
 8007350:	2200      	movs	r2, #0
 8007352:	701a      	strb	r2, [r3, #0]
 8007354:	e021      	b.n	800739a <UART_SetConfig+0x22a>
 8007356:	231b      	movs	r3, #27
 8007358:	2218      	movs	r2, #24
 800735a:	189b      	adds	r3, r3, r2
 800735c:	19db      	adds	r3, r3, r7
 800735e:	2202      	movs	r2, #2
 8007360:	701a      	strb	r2, [r3, #0]
 8007362:	e01a      	b.n	800739a <UART_SetConfig+0x22a>
 8007364:	231b      	movs	r3, #27
 8007366:	2218      	movs	r2, #24
 8007368:	189b      	adds	r3, r3, r2
 800736a:	19db      	adds	r3, r3, r7
 800736c:	2204      	movs	r2, #4
 800736e:	701a      	strb	r2, [r3, #0]
 8007370:	e013      	b.n	800739a <UART_SetConfig+0x22a>
 8007372:	231b      	movs	r3, #27
 8007374:	2218      	movs	r2, #24
 8007376:	189b      	adds	r3, r3, r2
 8007378:	19db      	adds	r3, r3, r7
 800737a:	2208      	movs	r2, #8
 800737c:	701a      	strb	r2, [r3, #0]
 800737e:	e00c      	b.n	800739a <UART_SetConfig+0x22a>
 8007380:	231b      	movs	r3, #27
 8007382:	2218      	movs	r2, #24
 8007384:	189b      	adds	r3, r3, r2
 8007386:	19db      	adds	r3, r3, r7
 8007388:	2210      	movs	r2, #16
 800738a:	701a      	strb	r2, [r3, #0]
 800738c:	e005      	b.n	800739a <UART_SetConfig+0x22a>
 800738e:	231b      	movs	r3, #27
 8007390:	2218      	movs	r2, #24
 8007392:	189b      	adds	r3, r3, r2
 8007394:	19db      	adds	r3, r3, r7
 8007396:	2210      	movs	r2, #16
 8007398:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a46      	ldr	r2, [pc, #280]	@ (80074b8 <UART_SetConfig+0x348>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d000      	beq.n	80073a6 <UART_SetConfig+0x236>
 80073a4:	e09a      	b.n	80074dc <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80073a6:	231b      	movs	r3, #27
 80073a8:	2218      	movs	r2, #24
 80073aa:	189b      	adds	r3, r3, r2
 80073ac:	19db      	adds	r3, r3, r7
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	2b08      	cmp	r3, #8
 80073b2:	d01d      	beq.n	80073f0 <UART_SetConfig+0x280>
 80073b4:	dc20      	bgt.n	80073f8 <UART_SetConfig+0x288>
 80073b6:	2b04      	cmp	r3, #4
 80073b8:	d015      	beq.n	80073e6 <UART_SetConfig+0x276>
 80073ba:	dc1d      	bgt.n	80073f8 <UART_SetConfig+0x288>
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d002      	beq.n	80073c6 <UART_SetConfig+0x256>
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d005      	beq.n	80073d0 <UART_SetConfig+0x260>
 80073c4:	e018      	b.n	80073f8 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073c6:	f7fe fd53 	bl	8005e70 <HAL_RCC_GetPCLK1Freq>
 80073ca:	0003      	movs	r3, r0
 80073cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80073ce:	e01c      	b.n	800740a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073d0:	4b3c      	ldr	r3, [pc, #240]	@ (80074c4 <UART_SetConfig+0x354>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2210      	movs	r2, #16
 80073d6:	4013      	ands	r3, r2
 80073d8:	d002      	beq.n	80073e0 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80073da:	4b3e      	ldr	r3, [pc, #248]	@ (80074d4 <UART_SetConfig+0x364>)
 80073dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80073de:	e014      	b.n	800740a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80073e0:	4b3d      	ldr	r3, [pc, #244]	@ (80074d8 <UART_SetConfig+0x368>)
 80073e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80073e4:	e011      	b.n	800740a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073e6:	f7fe fc93 	bl	8005d10 <HAL_RCC_GetSysClockFreq>
 80073ea:	0003      	movs	r3, r0
 80073ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80073ee:	e00c      	b.n	800740a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073f0:	2380      	movs	r3, #128	@ 0x80
 80073f2:	021b      	lsls	r3, r3, #8
 80073f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80073f6:	e008      	b.n	800740a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80073f8:	2300      	movs	r3, #0
 80073fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80073fc:	231a      	movs	r3, #26
 80073fe:	2218      	movs	r2, #24
 8007400:	189b      	adds	r3, r3, r2
 8007402:	19db      	adds	r3, r3, r7
 8007404:	2201      	movs	r2, #1
 8007406:	701a      	strb	r2, [r3, #0]
        break;
 8007408:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800740a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800740c:	2b00      	cmp	r3, #0
 800740e:	d100      	bne.n	8007412 <UART_SetConfig+0x2a2>
 8007410:	e133      	b.n	800767a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	685a      	ldr	r2, [r3, #4]
 8007416:	0013      	movs	r3, r2
 8007418:	005b      	lsls	r3, r3, #1
 800741a:	189b      	adds	r3, r3, r2
 800741c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800741e:	429a      	cmp	r2, r3
 8007420:	d305      	bcc.n	800742e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007428:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800742a:	429a      	cmp	r2, r3
 800742c:	d906      	bls.n	800743c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800742e:	231a      	movs	r3, #26
 8007430:	2218      	movs	r2, #24
 8007432:	189b      	adds	r3, r3, r2
 8007434:	19db      	adds	r3, r3, r7
 8007436:	2201      	movs	r2, #1
 8007438:	701a      	strb	r2, [r3, #0]
 800743a:	e11e      	b.n	800767a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800743c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800743e:	613b      	str	r3, [r7, #16]
 8007440:	2300      	movs	r3, #0
 8007442:	617b      	str	r3, [r7, #20]
 8007444:	6939      	ldr	r1, [r7, #16]
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	000b      	movs	r3, r1
 800744a:	0e1b      	lsrs	r3, r3, #24
 800744c:	0010      	movs	r0, r2
 800744e:	0205      	lsls	r5, r0, #8
 8007450:	431d      	orrs	r5, r3
 8007452:	000b      	movs	r3, r1
 8007454:	021c      	lsls	r4, r3, #8
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	085b      	lsrs	r3, r3, #1
 800745c:	60bb      	str	r3, [r7, #8]
 800745e:	2300      	movs	r3, #0
 8007460:	60fb      	str	r3, [r7, #12]
 8007462:	68b8      	ldr	r0, [r7, #8]
 8007464:	68f9      	ldr	r1, [r7, #12]
 8007466:	1900      	adds	r0, r0, r4
 8007468:	4169      	adcs	r1, r5
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	603b      	str	r3, [r7, #0]
 8007470:	2300      	movs	r3, #0
 8007472:	607b      	str	r3, [r7, #4]
 8007474:	683a      	ldr	r2, [r7, #0]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f7f8 ff22 	bl	80002c0 <__aeabi_uldivmod>
 800747c:	0002      	movs	r2, r0
 800747e:	000b      	movs	r3, r1
 8007480:	0013      	movs	r3, r2
 8007482:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007484:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007486:	23c0      	movs	r3, #192	@ 0xc0
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	429a      	cmp	r2, r3
 800748c:	d309      	bcc.n	80074a2 <UART_SetConfig+0x332>
 800748e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007490:	2380      	movs	r3, #128	@ 0x80
 8007492:	035b      	lsls	r3, r3, #13
 8007494:	429a      	cmp	r2, r3
 8007496:	d204      	bcs.n	80074a2 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800749e:	60da      	str	r2, [r3, #12]
 80074a0:	e0eb      	b.n	800767a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80074a2:	231a      	movs	r3, #26
 80074a4:	2218      	movs	r2, #24
 80074a6:	189b      	adds	r3, r3, r2
 80074a8:	19db      	adds	r3, r3, r7
 80074aa:	2201      	movs	r2, #1
 80074ac:	701a      	strb	r2, [r3, #0]
 80074ae:	e0e4      	b.n	800767a <UART_SetConfig+0x50a>
 80074b0:	efff69f3 	.word	0xefff69f3
 80074b4:	ffffcfff 	.word	0xffffcfff
 80074b8:	40004800 	.word	0x40004800
 80074bc:	fffff4ff 	.word	0xfffff4ff
 80074c0:	40013800 	.word	0x40013800
 80074c4:	40021000 	.word	0x40021000
 80074c8:	40004400 	.word	0x40004400
 80074cc:	40004c00 	.word	0x40004c00
 80074d0:	40005000 	.word	0x40005000
 80074d4:	003d0900 	.word	0x003d0900
 80074d8:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	69da      	ldr	r2, [r3, #28]
 80074e0:	2380      	movs	r3, #128	@ 0x80
 80074e2:	021b      	lsls	r3, r3, #8
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d000      	beq.n	80074ea <UART_SetConfig+0x37a>
 80074e8:	e070      	b.n	80075cc <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80074ea:	231b      	movs	r3, #27
 80074ec:	2218      	movs	r2, #24
 80074ee:	189b      	adds	r3, r3, r2
 80074f0:	19db      	adds	r3, r3, r7
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	2b08      	cmp	r3, #8
 80074f6:	d822      	bhi.n	800753e <UART_SetConfig+0x3ce>
 80074f8:	009a      	lsls	r2, r3, #2
 80074fa:	4b67      	ldr	r3, [pc, #412]	@ (8007698 <UART_SetConfig+0x528>)
 80074fc:	18d3      	adds	r3, r2, r3
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007502:	f7fe fcb5 	bl	8005e70 <HAL_RCC_GetPCLK1Freq>
 8007506:	0003      	movs	r3, r0
 8007508:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800750a:	e021      	b.n	8007550 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800750c:	f7fe fcc6 	bl	8005e9c <HAL_RCC_GetPCLK2Freq>
 8007510:	0003      	movs	r3, r0
 8007512:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007514:	e01c      	b.n	8007550 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007516:	4b61      	ldr	r3, [pc, #388]	@ (800769c <UART_SetConfig+0x52c>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2210      	movs	r2, #16
 800751c:	4013      	ands	r3, r2
 800751e:	d002      	beq.n	8007526 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007520:	4b5f      	ldr	r3, [pc, #380]	@ (80076a0 <UART_SetConfig+0x530>)
 8007522:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007524:	e014      	b.n	8007550 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8007526:	4b5f      	ldr	r3, [pc, #380]	@ (80076a4 <UART_SetConfig+0x534>)
 8007528:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800752a:	e011      	b.n	8007550 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800752c:	f7fe fbf0 	bl	8005d10 <HAL_RCC_GetSysClockFreq>
 8007530:	0003      	movs	r3, r0
 8007532:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007534:	e00c      	b.n	8007550 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007536:	2380      	movs	r3, #128	@ 0x80
 8007538:	021b      	lsls	r3, r3, #8
 800753a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800753c:	e008      	b.n	8007550 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800753e:	2300      	movs	r3, #0
 8007540:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8007542:	231a      	movs	r3, #26
 8007544:	2218      	movs	r2, #24
 8007546:	189b      	adds	r3, r3, r2
 8007548:	19db      	adds	r3, r3, r7
 800754a:	2201      	movs	r2, #1
 800754c:	701a      	strb	r2, [r3, #0]
        break;
 800754e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007552:	2b00      	cmp	r3, #0
 8007554:	d100      	bne.n	8007558 <UART_SetConfig+0x3e8>
 8007556:	e090      	b.n	800767a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800755a:	005a      	lsls	r2, r3, #1
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	085b      	lsrs	r3, r3, #1
 8007562:	18d2      	adds	r2, r2, r3
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	0019      	movs	r1, r3
 800756a:	0010      	movs	r0, r2
 800756c:	f7f8 fdde 	bl	800012c <__udivsi3>
 8007570:	0003      	movs	r3, r0
 8007572:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007576:	2b0f      	cmp	r3, #15
 8007578:	d921      	bls.n	80075be <UART_SetConfig+0x44e>
 800757a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800757c:	2380      	movs	r3, #128	@ 0x80
 800757e:	025b      	lsls	r3, r3, #9
 8007580:	429a      	cmp	r2, r3
 8007582:	d21c      	bcs.n	80075be <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007586:	b29a      	uxth	r2, r3
 8007588:	200e      	movs	r0, #14
 800758a:	2418      	movs	r4, #24
 800758c:	1903      	adds	r3, r0, r4
 800758e:	19db      	adds	r3, r3, r7
 8007590:	210f      	movs	r1, #15
 8007592:	438a      	bics	r2, r1
 8007594:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007598:	085b      	lsrs	r3, r3, #1
 800759a:	b29b      	uxth	r3, r3
 800759c:	2207      	movs	r2, #7
 800759e:	4013      	ands	r3, r2
 80075a0:	b299      	uxth	r1, r3
 80075a2:	1903      	adds	r3, r0, r4
 80075a4:	19db      	adds	r3, r3, r7
 80075a6:	1902      	adds	r2, r0, r4
 80075a8:	19d2      	adds	r2, r2, r7
 80075aa:	8812      	ldrh	r2, [r2, #0]
 80075ac:	430a      	orrs	r2, r1
 80075ae:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	1902      	adds	r2, r0, r4
 80075b6:	19d2      	adds	r2, r2, r7
 80075b8:	8812      	ldrh	r2, [r2, #0]
 80075ba:	60da      	str	r2, [r3, #12]
 80075bc:	e05d      	b.n	800767a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80075be:	231a      	movs	r3, #26
 80075c0:	2218      	movs	r2, #24
 80075c2:	189b      	adds	r3, r3, r2
 80075c4:	19db      	adds	r3, r3, r7
 80075c6:	2201      	movs	r2, #1
 80075c8:	701a      	strb	r2, [r3, #0]
 80075ca:	e056      	b.n	800767a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80075cc:	231b      	movs	r3, #27
 80075ce:	2218      	movs	r2, #24
 80075d0:	189b      	adds	r3, r3, r2
 80075d2:	19db      	adds	r3, r3, r7
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	2b08      	cmp	r3, #8
 80075d8:	d822      	bhi.n	8007620 <UART_SetConfig+0x4b0>
 80075da:	009a      	lsls	r2, r3, #2
 80075dc:	4b32      	ldr	r3, [pc, #200]	@ (80076a8 <UART_SetConfig+0x538>)
 80075de:	18d3      	adds	r3, r2, r3
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075e4:	f7fe fc44 	bl	8005e70 <HAL_RCC_GetPCLK1Freq>
 80075e8:	0003      	movs	r3, r0
 80075ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80075ec:	e021      	b.n	8007632 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075ee:	f7fe fc55 	bl	8005e9c <HAL_RCC_GetPCLK2Freq>
 80075f2:	0003      	movs	r3, r0
 80075f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80075f6:	e01c      	b.n	8007632 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075f8:	4b28      	ldr	r3, [pc, #160]	@ (800769c <UART_SetConfig+0x52c>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2210      	movs	r2, #16
 80075fe:	4013      	ands	r3, r2
 8007600:	d002      	beq.n	8007608 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007602:	4b27      	ldr	r3, [pc, #156]	@ (80076a0 <UART_SetConfig+0x530>)
 8007604:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007606:	e014      	b.n	8007632 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8007608:	4b26      	ldr	r3, [pc, #152]	@ (80076a4 <UART_SetConfig+0x534>)
 800760a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800760c:	e011      	b.n	8007632 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800760e:	f7fe fb7f 	bl	8005d10 <HAL_RCC_GetSysClockFreq>
 8007612:	0003      	movs	r3, r0
 8007614:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007616:	e00c      	b.n	8007632 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007618:	2380      	movs	r3, #128	@ 0x80
 800761a:	021b      	lsls	r3, r3, #8
 800761c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800761e:	e008      	b.n	8007632 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8007620:	2300      	movs	r3, #0
 8007622:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8007624:	231a      	movs	r3, #26
 8007626:	2218      	movs	r2, #24
 8007628:	189b      	adds	r3, r3, r2
 800762a:	19db      	adds	r3, r3, r7
 800762c:	2201      	movs	r2, #1
 800762e:	701a      	strb	r2, [r3, #0]
        break;
 8007630:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8007632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007634:	2b00      	cmp	r3, #0
 8007636:	d020      	beq.n	800767a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	085a      	lsrs	r2, r3, #1
 800763e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007640:	18d2      	adds	r2, r2, r3
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	0019      	movs	r1, r3
 8007648:	0010      	movs	r0, r2
 800764a:	f7f8 fd6f 	bl	800012c <__udivsi3>
 800764e:	0003      	movs	r3, r0
 8007650:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007654:	2b0f      	cmp	r3, #15
 8007656:	d90a      	bls.n	800766e <UART_SetConfig+0x4fe>
 8007658:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800765a:	2380      	movs	r3, #128	@ 0x80
 800765c:	025b      	lsls	r3, r3, #9
 800765e:	429a      	cmp	r2, r3
 8007660:	d205      	bcs.n	800766e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007664:	b29a      	uxth	r2, r3
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	60da      	str	r2, [r3, #12]
 800766c:	e005      	b.n	800767a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800766e:	231a      	movs	r3, #26
 8007670:	2218      	movs	r2, #24
 8007672:	189b      	adds	r3, r3, r2
 8007674:	19db      	adds	r3, r3, r7
 8007676:	2201      	movs	r2, #1
 8007678:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	2200      	movs	r2, #0
 800767e:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	2200      	movs	r2, #0
 8007684:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007686:	231a      	movs	r3, #26
 8007688:	2218      	movs	r2, #24
 800768a:	189b      	adds	r3, r3, r2
 800768c:	19db      	adds	r3, r3, r7
 800768e:	781b      	ldrb	r3, [r3, #0]
}
 8007690:	0018      	movs	r0, r3
 8007692:	46bd      	mov	sp, r7
 8007694:	b00e      	add	sp, #56	@ 0x38
 8007696:	bdb0      	pop	{r4, r5, r7, pc}
 8007698:	0800c204 	.word	0x0800c204
 800769c:	40021000 	.word	0x40021000
 80076a0:	003d0900 	.word	0x003d0900
 80076a4:	00f42400 	.word	0x00f42400
 80076a8:	0800c228 	.word	0x0800c228

080076ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076b8:	2201      	movs	r2, #1
 80076ba:	4013      	ands	r3, r2
 80076bc:	d00b      	beq.n	80076d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	4a4a      	ldr	r2, [pc, #296]	@ (80077f0 <UART_AdvFeatureConfig+0x144>)
 80076c6:	4013      	ands	r3, r2
 80076c8:	0019      	movs	r1, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	430a      	orrs	r2, r1
 80076d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076da:	2202      	movs	r2, #2
 80076dc:	4013      	ands	r3, r2
 80076de:	d00b      	beq.n	80076f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	4a43      	ldr	r2, [pc, #268]	@ (80077f4 <UART_AdvFeatureConfig+0x148>)
 80076e8:	4013      	ands	r3, r2
 80076ea:	0019      	movs	r1, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	430a      	orrs	r2, r1
 80076f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076fc:	2204      	movs	r2, #4
 80076fe:	4013      	ands	r3, r2
 8007700:	d00b      	beq.n	800771a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	4a3b      	ldr	r2, [pc, #236]	@ (80077f8 <UART_AdvFeatureConfig+0x14c>)
 800770a:	4013      	ands	r3, r2
 800770c:	0019      	movs	r1, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	430a      	orrs	r2, r1
 8007718:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800771e:	2208      	movs	r2, #8
 8007720:	4013      	ands	r3, r2
 8007722:	d00b      	beq.n	800773c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	4a34      	ldr	r2, [pc, #208]	@ (80077fc <UART_AdvFeatureConfig+0x150>)
 800772c:	4013      	ands	r3, r2
 800772e:	0019      	movs	r1, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	430a      	orrs	r2, r1
 800773a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007740:	2210      	movs	r2, #16
 8007742:	4013      	ands	r3, r2
 8007744:	d00b      	beq.n	800775e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	4a2c      	ldr	r2, [pc, #176]	@ (8007800 <UART_AdvFeatureConfig+0x154>)
 800774e:	4013      	ands	r3, r2
 8007750:	0019      	movs	r1, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	430a      	orrs	r2, r1
 800775c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007762:	2220      	movs	r2, #32
 8007764:	4013      	ands	r3, r2
 8007766:	d00b      	beq.n	8007780 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	4a25      	ldr	r2, [pc, #148]	@ (8007804 <UART_AdvFeatureConfig+0x158>)
 8007770:	4013      	ands	r3, r2
 8007772:	0019      	movs	r1, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	430a      	orrs	r2, r1
 800777e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007784:	2240      	movs	r2, #64	@ 0x40
 8007786:	4013      	ands	r3, r2
 8007788:	d01d      	beq.n	80077c6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	4a1d      	ldr	r2, [pc, #116]	@ (8007808 <UART_AdvFeatureConfig+0x15c>)
 8007792:	4013      	ands	r3, r2
 8007794:	0019      	movs	r1, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	430a      	orrs	r2, r1
 80077a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80077a6:	2380      	movs	r3, #128	@ 0x80
 80077a8:	035b      	lsls	r3, r3, #13
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d10b      	bne.n	80077c6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	4a15      	ldr	r2, [pc, #84]	@ (800780c <UART_AdvFeatureConfig+0x160>)
 80077b6:	4013      	ands	r3, r2
 80077b8:	0019      	movs	r1, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	430a      	orrs	r2, r1
 80077c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ca:	2280      	movs	r2, #128	@ 0x80
 80077cc:	4013      	ands	r3, r2
 80077ce:	d00b      	beq.n	80077e8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	4a0e      	ldr	r2, [pc, #56]	@ (8007810 <UART_AdvFeatureConfig+0x164>)
 80077d8:	4013      	ands	r3, r2
 80077da:	0019      	movs	r1, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	430a      	orrs	r2, r1
 80077e6:	605a      	str	r2, [r3, #4]
  }
}
 80077e8:	46c0      	nop			@ (mov r8, r8)
 80077ea:	46bd      	mov	sp, r7
 80077ec:	b002      	add	sp, #8
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	fffdffff 	.word	0xfffdffff
 80077f4:	fffeffff 	.word	0xfffeffff
 80077f8:	fffbffff 	.word	0xfffbffff
 80077fc:	ffff7fff 	.word	0xffff7fff
 8007800:	ffffefff 	.word	0xffffefff
 8007804:	ffffdfff 	.word	0xffffdfff
 8007808:	ffefffff 	.word	0xffefffff
 800780c:	ff9fffff 	.word	0xff9fffff
 8007810:	fff7ffff 	.word	0xfff7ffff

08007814 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b092      	sub	sp, #72	@ 0x48
 8007818:	af02      	add	r7, sp, #8
 800781a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2284      	movs	r2, #132	@ 0x84
 8007820:	2100      	movs	r1, #0
 8007822:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007824:	f7fc fcce 	bl	80041c4 <HAL_GetTick>
 8007828:	0003      	movs	r3, r0
 800782a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2208      	movs	r2, #8
 8007834:	4013      	ands	r3, r2
 8007836:	2b08      	cmp	r3, #8
 8007838:	d12c      	bne.n	8007894 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800783a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800783c:	2280      	movs	r2, #128	@ 0x80
 800783e:	0391      	lsls	r1, r2, #14
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	4a46      	ldr	r2, [pc, #280]	@ (800795c <UART_CheckIdleState+0x148>)
 8007844:	9200      	str	r2, [sp, #0]
 8007846:	2200      	movs	r2, #0
 8007848:	f000 f88c 	bl	8007964 <UART_WaitOnFlagUntilTimeout>
 800784c:	1e03      	subs	r3, r0, #0
 800784e:	d021      	beq.n	8007894 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007850:	f3ef 8310 	mrs	r3, PRIMASK
 8007854:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007858:	63bb      	str	r3, [r7, #56]	@ 0x38
 800785a:	2301      	movs	r3, #1
 800785c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800785e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007860:	f383 8810 	msr	PRIMASK, r3
}
 8007864:	46c0      	nop			@ (mov r8, r8)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2180      	movs	r1, #128	@ 0x80
 8007872:	438a      	bics	r2, r1
 8007874:	601a      	str	r2, [r3, #0]
 8007876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007878:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800787a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800787c:	f383 8810 	msr	PRIMASK, r3
}
 8007880:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2220      	movs	r2, #32
 8007886:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2278      	movs	r2, #120	@ 0x78
 800788c:	2100      	movs	r1, #0
 800788e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007890:	2303      	movs	r3, #3
 8007892:	e05f      	b.n	8007954 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2204      	movs	r2, #4
 800789c:	4013      	ands	r3, r2
 800789e:	2b04      	cmp	r3, #4
 80078a0:	d146      	bne.n	8007930 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078a4:	2280      	movs	r2, #128	@ 0x80
 80078a6:	03d1      	lsls	r1, r2, #15
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	4a2c      	ldr	r2, [pc, #176]	@ (800795c <UART_CheckIdleState+0x148>)
 80078ac:	9200      	str	r2, [sp, #0]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f000 f858 	bl	8007964 <UART_WaitOnFlagUntilTimeout>
 80078b4:	1e03      	subs	r3, r0, #0
 80078b6:	d03b      	beq.n	8007930 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078b8:	f3ef 8310 	mrs	r3, PRIMASK
 80078bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80078be:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80078c2:	2301      	movs	r3, #1
 80078c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	f383 8810 	msr	PRIMASK, r3
}
 80078cc:	46c0      	nop			@ (mov r8, r8)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4921      	ldr	r1, [pc, #132]	@ (8007960 <UART_CheckIdleState+0x14c>)
 80078da:	400a      	ands	r2, r1
 80078dc:	601a      	str	r2, [r3, #0]
 80078de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	f383 8810 	msr	PRIMASK, r3
}
 80078e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078ea:	f3ef 8310 	mrs	r3, PRIMASK
 80078ee:	61bb      	str	r3, [r7, #24]
  return(result);
 80078f0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80078f4:	2301      	movs	r3, #1
 80078f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	f383 8810 	msr	PRIMASK, r3
}
 80078fe:	46c0      	nop			@ (mov r8, r8)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	689a      	ldr	r2, [r3, #8]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2101      	movs	r1, #1
 800790c:	438a      	bics	r2, r1
 800790e:	609a      	str	r2, [r3, #8]
 8007910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007912:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007914:	6a3b      	ldr	r3, [r7, #32]
 8007916:	f383 8810 	msr	PRIMASK, r3
}
 800791a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2280      	movs	r2, #128	@ 0x80
 8007920:	2120      	movs	r1, #32
 8007922:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2278      	movs	r2, #120	@ 0x78
 8007928:	2100      	movs	r1, #0
 800792a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800792c:	2303      	movs	r3, #3
 800792e:	e011      	b.n	8007954 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2220      	movs	r2, #32
 8007934:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2280      	movs	r2, #128	@ 0x80
 800793a:	2120      	movs	r1, #32
 800793c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2278      	movs	r2, #120	@ 0x78
 800794e:	2100      	movs	r1, #0
 8007950:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	0018      	movs	r0, r3
 8007956:	46bd      	mov	sp, r7
 8007958:	b010      	add	sp, #64	@ 0x40
 800795a:	bd80      	pop	{r7, pc}
 800795c:	01ffffff 	.word	0x01ffffff
 8007960:	fffffedf 	.word	0xfffffedf

08007964 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	603b      	str	r3, [r7, #0]
 8007970:	1dfb      	adds	r3, r7, #7
 8007972:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007974:	e04b      	b.n	8007a0e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	3301      	adds	r3, #1
 800797a:	d048      	beq.n	8007a0e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800797c:	f7fc fc22 	bl	80041c4 <HAL_GetTick>
 8007980:	0002      	movs	r2, r0
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	69ba      	ldr	r2, [r7, #24]
 8007988:	429a      	cmp	r2, r3
 800798a:	d302      	bcc.n	8007992 <UART_WaitOnFlagUntilTimeout+0x2e>
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d101      	bne.n	8007996 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007992:	2303      	movs	r3, #3
 8007994:	e04b      	b.n	8007a2e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2204      	movs	r2, #4
 800799e:	4013      	ands	r3, r2
 80079a0:	d035      	beq.n	8007a0e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	69db      	ldr	r3, [r3, #28]
 80079a8:	2208      	movs	r2, #8
 80079aa:	4013      	ands	r3, r2
 80079ac:	2b08      	cmp	r3, #8
 80079ae:	d111      	bne.n	80079d4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2208      	movs	r2, #8
 80079b6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	0018      	movs	r0, r3
 80079bc:	f000 f83c 	bl	8007a38 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2284      	movs	r2, #132	@ 0x84
 80079c4:	2108      	movs	r1, #8
 80079c6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2278      	movs	r2, #120	@ 0x78
 80079cc:	2100      	movs	r1, #0
 80079ce:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e02c      	b.n	8007a2e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	69da      	ldr	r2, [r3, #28]
 80079da:	2380      	movs	r3, #128	@ 0x80
 80079dc:	011b      	lsls	r3, r3, #4
 80079de:	401a      	ands	r2, r3
 80079e0:	2380      	movs	r3, #128	@ 0x80
 80079e2:	011b      	lsls	r3, r3, #4
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d112      	bne.n	8007a0e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2280      	movs	r2, #128	@ 0x80
 80079ee:	0112      	lsls	r2, r2, #4
 80079f0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	0018      	movs	r0, r3
 80079f6:	f000 f81f 	bl	8007a38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2284      	movs	r2, #132	@ 0x84
 80079fe:	2120      	movs	r1, #32
 8007a00:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2278      	movs	r2, #120	@ 0x78
 8007a06:	2100      	movs	r1, #0
 8007a08:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	e00f      	b.n	8007a2e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	69db      	ldr	r3, [r3, #28]
 8007a14:	68ba      	ldr	r2, [r7, #8]
 8007a16:	4013      	ands	r3, r2
 8007a18:	68ba      	ldr	r2, [r7, #8]
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	425a      	negs	r2, r3
 8007a1e:	4153      	adcs	r3, r2
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	001a      	movs	r2, r3
 8007a24:	1dfb      	adds	r3, r7, #7
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d0a4      	beq.n	8007976 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	0018      	movs	r0, r3
 8007a30:	46bd      	mov	sp, r7
 8007a32:	b004      	add	sp, #16
 8007a34:	bd80      	pop	{r7, pc}
	...

08007a38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b08e      	sub	sp, #56	@ 0x38
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a40:	f3ef 8310 	mrs	r3, PRIMASK
 8007a44:	617b      	str	r3, [r7, #20]
  return(result);
 8007a46:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a48:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	f383 8810 	msr	PRIMASK, r3
}
 8007a54:	46c0      	nop			@ (mov r8, r8)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4926      	ldr	r1, [pc, #152]	@ (8007afc <UART_EndRxTransfer+0xc4>)
 8007a62:	400a      	ands	r2, r1
 8007a64:	601a      	str	r2, [r3, #0]
 8007a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	f383 8810 	msr	PRIMASK, r3
}
 8007a70:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a72:	f3ef 8310 	mrs	r3, PRIMASK
 8007a76:	623b      	str	r3, [r7, #32]
  return(result);
 8007a78:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a82:	f383 8810 	msr	PRIMASK, r3
}
 8007a86:	46c0      	nop			@ (mov r8, r8)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	689a      	ldr	r2, [r3, #8]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2101      	movs	r1, #1
 8007a94:	438a      	bics	r2, r1
 8007a96:	609a      	str	r2, [r3, #8]
 8007a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a9e:	f383 8810 	msr	PRIMASK, r3
}
 8007aa2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d118      	bne.n	8007ade <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007aac:	f3ef 8310 	mrs	r3, PRIMASK
 8007ab0:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ab2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f383 8810 	msr	PRIMASK, r3
}
 8007ac0:	46c0      	nop			@ (mov r8, r8)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2110      	movs	r1, #16
 8007ace:	438a      	bics	r2, r1
 8007ad0:	601a      	str	r2, [r3, #0]
 8007ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ad4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	f383 8810 	msr	PRIMASK, r3
}
 8007adc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2280      	movs	r2, #128	@ 0x80
 8007ae2:	2120      	movs	r1, #32
 8007ae4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007af2:	46c0      	nop			@ (mov r8, r8)
 8007af4:	46bd      	mov	sp, r7
 8007af6:	b00e      	add	sp, #56	@ 0x38
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	46c0      	nop			@ (mov r8, r8)
 8007afc:	fffffedf 	.word	0xfffffedf

08007b00 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007b04:	4a06      	ldr	r2, [pc, #24]	@ (8007b20 <MX_FATFS_Init+0x20>)
 8007b06:	4b07      	ldr	r3, [pc, #28]	@ (8007b24 <MX_FATFS_Init+0x24>)
 8007b08:	0011      	movs	r1, r2
 8007b0a:	0018      	movs	r0, r3
 8007b0c:	f003 fb2e 	bl	800b16c <FATFS_LinkDriver>
 8007b10:	0003      	movs	r3, r0
 8007b12:	001a      	movs	r2, r3
 8007b14:	4b04      	ldr	r3, [pc, #16]	@ (8007b28 <MX_FATFS_Init+0x28>)
 8007b16:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007b18:	46c0      	nop			@ (mov r8, r8)
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	46c0      	nop			@ (mov r8, r8)
 8007b20:	200004e8 	.word	0x200004e8
 8007b24:	2000000c 	.word	0x2000000c
 8007b28:	200004e4 	.word	0x200004e4

08007b2c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007b30:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007b32:	0018      	movs	r0, r3
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	0002      	movs	r2, r0
 8007b40:	1dfb      	adds	r3, r7, #7
 8007b42:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 8007b44:	1dfb      	adds	r3, r7, #7
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	0018      	movs	r0, r3
 8007b4a:	f000 fa19 	bl	8007f80 <USER_SPI_initialize>
 8007b4e:	0003      	movs	r3, r0
  /* USER CODE END INIT */
}
 8007b50:	0018      	movs	r0, r3
 8007b52:	46bd      	mov	sp, r7
 8007b54:	b002      	add	sp, #8
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	0002      	movs	r2, r0
 8007b60:	1dfb      	adds	r3, r7, #7
 8007b62:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_status(pdrv); //ADD THIS LINE
 8007b64:	1dfb      	adds	r3, r7, #7
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	0018      	movs	r0, r3
 8007b6a:	f000 fb21 	bl	80081b0 <USER_SPI_status>
 8007b6e:	0003      	movs	r3, r0
  /* USER CODE END STATUS */
}
 8007b70:	0018      	movs	r0, r3
 8007b72:	46bd      	mov	sp, r7
 8007b74:	b002      	add	sp, #8
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007b78:	b5b0      	push	{r4, r5, r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60b9      	str	r1, [r7, #8]
 8007b80:	607a      	str	r2, [r7, #4]
 8007b82:	603b      	str	r3, [r7, #0]
 8007b84:	250f      	movs	r5, #15
 8007b86:	197b      	adds	r3, r7, r5
 8007b88:	1c02      	adds	r2, r0, #0
 8007b8a:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8007b8c:	683c      	ldr	r4, [r7, #0]
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	68b9      	ldr	r1, [r7, #8]
 8007b92:	197b      	adds	r3, r7, r5
 8007b94:	7818      	ldrb	r0, [r3, #0]
 8007b96:	0023      	movs	r3, r4
 8007b98:	f000 fb20 	bl	80081dc <USER_SPI_read>
 8007b9c:	0003      	movs	r3, r0
  /* USER CODE END READ */
}
 8007b9e:	0018      	movs	r0, r3
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	b004      	add	sp, #16
 8007ba4:	bdb0      	pop	{r4, r5, r7, pc}

08007ba6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007ba6:	b5b0      	push	{r4, r5, r7, lr}
 8007ba8:	b084      	sub	sp, #16
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	607a      	str	r2, [r7, #4]
 8007bb0:	603b      	str	r3, [r7, #0]
 8007bb2:	250f      	movs	r5, #15
 8007bb4:	197b      	adds	r3, r7, r5
 8007bb6:	1c02      	adds	r2, r0, #0
 8007bb8:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 8007bba:	683c      	ldr	r4, [r7, #0]
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	68b9      	ldr	r1, [r7, #8]
 8007bc0:	197b      	adds	r3, r7, r5
 8007bc2:	7818      	ldrb	r0, [r3, #0]
 8007bc4:	0023      	movs	r3, r4
 8007bc6:	f000 fb75 	bl	80082b4 <USER_SPI_write>
 8007bca:	0003      	movs	r3, r0
  /* USER CODE END WRITE */
}
 8007bcc:	0018      	movs	r0, r3
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	b004      	add	sp, #16
 8007bd2:	bdb0      	pop	{r4, r5, r7, pc}

08007bd4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	603a      	str	r2, [r7, #0]
 8007bdc:	1dfb      	adds	r3, r7, #7
 8007bde:	1c02      	adds	r2, r0, #0
 8007be0:	701a      	strb	r2, [r3, #0]
 8007be2:	1dbb      	adds	r3, r7, #6
 8007be4:	1c0a      	adds	r2, r1, #0
 8007be6:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 8007be8:	683a      	ldr	r2, [r7, #0]
 8007bea:	1dbb      	adds	r3, r7, #6
 8007bec:	7819      	ldrb	r1, [r3, #0]
 8007bee:	1dfb      	adds	r3, r7, #7
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	0018      	movs	r0, r3
 8007bf4:	f000 fbde 	bl	80083b4 <USER_SPI_ioctl>
 8007bf8:	0003      	movs	r3, r0
  /* USER CODE END IOCTL */
}
 8007bfa:	0018      	movs	r0, r3
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	b002      	add	sp, #8
 8007c00:	bd80      	pop	{r7, pc}
	...

08007c04 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8007c0c:	f7fc fada 	bl	80041c4 <HAL_GetTick>
 8007c10:	0002      	movs	r2, r0
 8007c12:	4b04      	ldr	r3, [pc, #16]	@ (8007c24 <SPI_Timer_On+0x20>)
 8007c14:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 8007c16:	4b04      	ldr	r3, [pc, #16]	@ (8007c28 <SPI_Timer_On+0x24>)
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	601a      	str	r2, [r3, #0]
}
 8007c1c:	46c0      	nop			@ (mov r8, r8)
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	b002      	add	sp, #8
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	200004f0 	.word	0x200004f0
 8007c28:	200004f4 	.word	0x200004f4

08007c2c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8007c30:	f7fc fac8 	bl	80041c4 <HAL_GetTick>
 8007c34:	0002      	movs	r2, r0
 8007c36:	4b06      	ldr	r3, [pc, #24]	@ (8007c50 <SPI_Timer_Status+0x24>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	1ad2      	subs	r2, r2, r3
 8007c3c:	4b05      	ldr	r3, [pc, #20]	@ (8007c54 <SPI_Timer_Status+0x28>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	419b      	sbcs	r3, r3
 8007c44:	425b      	negs	r3, r3
 8007c46:	b2db      	uxtb	r3, r3
}
 8007c48:	0018      	movs	r0, r3
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	46c0      	nop			@ (mov r8, r8)
 8007c50:	200004f0 	.word	0x200004f0
 8007c54:	200004f4 	.word	0x200004f4

08007c58 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8007c58:	b590      	push	{r4, r7, lr}
 8007c5a:	b087      	sub	sp, #28
 8007c5c:	af02      	add	r7, sp, #8
 8007c5e:	0002      	movs	r2, r0
 8007c60:	1dfb      	adds	r3, r7, #7
 8007c62:	701a      	strb	r2, [r3, #0]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8007c64:	240f      	movs	r4, #15
 8007c66:	193a      	adds	r2, r7, r4
 8007c68:	1df9      	adds	r1, r7, #7
 8007c6a:	4806      	ldr	r0, [pc, #24]	@ (8007c84 <xchg_spi+0x2c>)
 8007c6c:	2332      	movs	r3, #50	@ 0x32
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	2301      	movs	r3, #1
 8007c72:	f7fe fcea 	bl	800664a <HAL_SPI_TransmitReceive>
    return rxDat;
 8007c76:	193b      	adds	r3, r7, r4
 8007c78:	781b      	ldrb	r3, [r3, #0]
}
 8007c7a:	0018      	movs	r0, r3
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	b005      	add	sp, #20
 8007c80:	bd90      	pop	{r4, r7, pc}
 8007c82:	46c0      	nop			@ (mov r8, r8)
 8007c84:	200000e4 	.word	0x200000e4

08007c88 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8007c88:	b590      	push	{r4, r7, lr}
 8007c8a:	b085      	sub	sp, #20
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8007c92:	2300      	movs	r3, #0
 8007c94:	60fb      	str	r3, [r7, #12]
 8007c96:	e00a      	b.n	8007cae <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	18d4      	adds	r4, r2, r3
 8007c9e:	20ff      	movs	r0, #255	@ 0xff
 8007ca0:	f7ff ffda 	bl	8007c58 <xchg_spi>
 8007ca4:	0003      	movs	r3, r0
 8007ca6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	3301      	adds	r3, #1
 8007cac:	60fb      	str	r3, [r7, #12]
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d3f0      	bcc.n	8007c98 <rcvr_spi_multi+0x10>
	}
}
 8007cb6:	46c0      	nop			@ (mov r8, r8)
 8007cb8:	46c0      	nop			@ (mov r8, r8)
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	b005      	add	sp, #20
 8007cbe:	bd90      	pop	{r4, r7, pc}

08007cc0 <xmit_spi_multi>:
static
void xmit_spi_multi (
		BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	2301      	movs	r3, #1
 8007cd0:	425b      	negs	r3, r3
 8007cd2:	6879      	ldr	r1, [r7, #4]
 8007cd4:	4803      	ldr	r0, [pc, #12]	@ (8007ce4 <xmit_spi_multi+0x24>)
 8007cd6:	f7fe fb5b 	bl	8006390 <HAL_SPI_Transmit>
}
 8007cda:	46c0      	nop			@ (mov r8, r8)
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	b002      	add	sp, #8
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	46c0      	nop			@ (mov r8, r8)
 8007ce4:	200000e4 	.word	0x200000e4

08007ce8 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8007ce8:	b5b0      	push	{r4, r5, r7, lr}
 8007cea:	b086      	sub	sp, #24
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8007cf0:	f7fc fa68 	bl	80041c4 <HAL_GetTick>
 8007cf4:	0003      	movs	r3, r0
 8007cf6:	617b      	str	r3, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8007cfc:	250f      	movs	r5, #15
 8007cfe:	197c      	adds	r4, r7, r5
 8007d00:	20ff      	movs	r0, #255	@ 0xff
 8007d02:	f7ff ffa9 	bl	8007c58 <xchg_spi>
 8007d06:	0003      	movs	r3, r0
 8007d08:	7023      	strb	r3, [r4, #0]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8007d0a:	197b      	adds	r3, r7, r5
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	2bff      	cmp	r3, #255	@ 0xff
 8007d10:	d007      	beq.n	8007d22 <wait_ready+0x3a>
 8007d12:	f7fc fa57 	bl	80041c4 <HAL_GetTick>
 8007d16:	0002      	movs	r2, r0
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	693a      	ldr	r2, [r7, #16]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d8ec      	bhi.n	8007cfc <wait_ready+0x14>

	return (d == 0xFF) ? 1 : 0;
 8007d22:	230f      	movs	r3, #15
 8007d24:	18fb      	adds	r3, r7, r3
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	3bff      	subs	r3, #255	@ 0xff
 8007d2a:	425a      	negs	r2, r3
 8007d2c:	4153      	adcs	r3, r2
 8007d2e:	b2db      	uxtb	r3, r3
}
 8007d30:	0018      	movs	r0, r3
 8007d32:	46bd      	mov	sp, r7
 8007d34:	b006      	add	sp, #24
 8007d36:	bdb0      	pop	{r4, r5, r7, pc}

08007d38 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8007d3c:	4b05      	ldr	r3, [pc, #20]	@ (8007d54 <despiselect+0x1c>)
 8007d3e:	2201      	movs	r2, #1
 8007d40:	2102      	movs	r1, #2
 8007d42:	0018      	movs	r0, r3
 8007d44:	f7fc fc98 	bl	8004678 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8007d48:	20ff      	movs	r0, #255	@ 0xff
 8007d4a:	f7ff ff85 	bl	8007c58 <xchg_spi>

}
 8007d4e:	46c0      	nop			@ (mov r8, r8)
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	50000400 	.word	0x50000400

08007d58 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8007d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8007d8c <spiselect+0x34>)
 8007d5e:	2200      	movs	r2, #0
 8007d60:	2102      	movs	r1, #2
 8007d62:	0018      	movs	r0, r3
 8007d64:	f7fc fc88 	bl	8004678 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8007d68:	20ff      	movs	r0, #255	@ 0xff
 8007d6a:	f7ff ff75 	bl	8007c58 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8007d6e:	23fa      	movs	r3, #250	@ 0xfa
 8007d70:	005b      	lsls	r3, r3, #1
 8007d72:	0018      	movs	r0, r3
 8007d74:	f7ff ffb8 	bl	8007ce8 <wait_ready>
 8007d78:	1e03      	subs	r3, r0, #0
 8007d7a:	d001      	beq.n	8007d80 <spiselect+0x28>
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e002      	b.n	8007d86 <spiselect+0x2e>

	despiselect();
 8007d80:	f7ff ffda 	bl	8007d38 <despiselect>
	return 0;	/* Timeout */
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	0018      	movs	r0, r3
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}
 8007d8c:	50000400 	.word	0x50000400

08007d90 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8007d90:	b5b0      	push	{r4, r5, r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8007d9a:	20c8      	movs	r0, #200	@ 0xc8
 8007d9c:	f7ff ff32 	bl	8007c04 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8007da0:	250f      	movs	r5, #15
 8007da2:	197c      	adds	r4, r7, r5
 8007da4:	20ff      	movs	r0, #255	@ 0xff
 8007da6:	f7ff ff57 	bl	8007c58 <xchg_spi>
 8007daa:	0003      	movs	r3, r0
 8007dac:	7023      	strb	r3, [r4, #0]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8007dae:	197b      	adds	r3, r7, r5
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	2bff      	cmp	r3, #255	@ 0xff
 8007db4:	d103      	bne.n	8007dbe <rcvr_datablock+0x2e>
 8007db6:	f7ff ff39 	bl	8007c2c <SPI_Timer_Status>
 8007dba:	1e03      	subs	r3, r0, #0
 8007dbc:	d1f0      	bne.n	8007da0 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8007dbe:	230f      	movs	r3, #15
 8007dc0:	18fb      	adds	r3, r7, r3
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	2bfe      	cmp	r3, #254	@ 0xfe
 8007dc6:	d001      	beq.n	8007dcc <rcvr_datablock+0x3c>
 8007dc8:	2300      	movs	r3, #0
 8007dca:	e00c      	b.n	8007de6 <rcvr_datablock+0x56>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8007dcc:	683a      	ldr	r2, [r7, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	0011      	movs	r1, r2
 8007dd2:	0018      	movs	r0, r3
 8007dd4:	f7ff ff58 	bl	8007c88 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8007dd8:	20ff      	movs	r0, #255	@ 0xff
 8007dda:	f7ff ff3d 	bl	8007c58 <xchg_spi>
 8007dde:	20ff      	movs	r0, #255	@ 0xff
 8007de0:	f7ff ff3a 	bl	8007c58 <xchg_spi>

	return 1;						/* Function succeeded */
 8007de4:	2301      	movs	r3, #1
}
 8007de6:	0018      	movs	r0, r3
 8007de8:	46bd      	mov	sp, r7
 8007dea:	b004      	add	sp, #16
 8007dec:	bdb0      	pop	{r4, r5, r7, pc}

08007dee <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8007dee:	b5b0      	push	{r4, r5, r7, lr}
 8007df0:	b084      	sub	sp, #16
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
 8007df6:	000a      	movs	r2, r1
 8007df8:	1cfb      	adds	r3, r7, #3
 8007dfa:	701a      	strb	r2, [r3, #0]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8007dfc:	23fa      	movs	r3, #250	@ 0xfa
 8007dfe:	005b      	lsls	r3, r3, #1
 8007e00:	0018      	movs	r0, r3
 8007e02:	f7ff ff71 	bl	8007ce8 <wait_ready>
 8007e06:	1e03      	subs	r3, r0, #0
 8007e08:	d101      	bne.n	8007e0e <xmit_datablock+0x20>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	e025      	b.n	8007e5a <xmit_datablock+0x6c>

	xchg_spi(token);					/* Send token */
 8007e0e:	1cfb      	adds	r3, r7, #3
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	0018      	movs	r0, r3
 8007e14:	f7ff ff20 	bl	8007c58 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8007e18:	1cfb      	adds	r3, r7, #3
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	2bfd      	cmp	r3, #253	@ 0xfd
 8007e1e:	d01b      	beq.n	8007e58 <xmit_datablock+0x6a>
		xmit_spi_multi(buff, 512);		/* Data */
 8007e20:	2380      	movs	r3, #128	@ 0x80
 8007e22:	009a      	lsls	r2, r3, #2
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	0011      	movs	r1, r2
 8007e28:	0018      	movs	r0, r3
 8007e2a:	f7ff ff49 	bl	8007cc0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8007e2e:	20ff      	movs	r0, #255	@ 0xff
 8007e30:	f7ff ff12 	bl	8007c58 <xchg_spi>
 8007e34:	20ff      	movs	r0, #255	@ 0xff
 8007e36:	f7ff ff0f 	bl	8007c58 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8007e3a:	250f      	movs	r5, #15
 8007e3c:	197c      	adds	r4, r7, r5
 8007e3e:	20ff      	movs	r0, #255	@ 0xff
 8007e40:	f7ff ff0a 	bl	8007c58 <xchg_spi>
 8007e44:	0003      	movs	r3, r0
 8007e46:	7023      	strb	r3, [r4, #0]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8007e48:	197b      	adds	r3, r7, r5
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	221f      	movs	r2, #31
 8007e4e:	4013      	ands	r3, r2
 8007e50:	2b05      	cmp	r3, #5
 8007e52:	d001      	beq.n	8007e58 <xmit_datablock+0x6a>
 8007e54:	2300      	movs	r3, #0
 8007e56:	e000      	b.n	8007e5a <xmit_datablock+0x6c>
	}
	return 1;
 8007e58:	2301      	movs	r3, #1
}
 8007e5a:	0018      	movs	r0, r3
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	b004      	add	sp, #16
 8007e60:	bdb0      	pop	{r4, r5, r7, pc}

08007e62 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8007e62:	b5b0      	push	{r4, r5, r7, lr}
 8007e64:	b084      	sub	sp, #16
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	0002      	movs	r2, r0
 8007e6a:	6039      	str	r1, [r7, #0]
 8007e6c:	1dfb      	adds	r3, r7, #7
 8007e6e:	701a      	strb	r2, [r3, #0]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8007e70:	1dfb      	adds	r3, r7, #7
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	b25b      	sxtb	r3, r3
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	da15      	bge.n	8007ea6 <send_cmd+0x44>
		cmd &= 0x7F;
 8007e7a:	1dfb      	adds	r3, r7, #7
 8007e7c:	1dfa      	adds	r2, r7, #7
 8007e7e:	7812      	ldrb	r2, [r2, #0]
 8007e80:	217f      	movs	r1, #127	@ 0x7f
 8007e82:	400a      	ands	r2, r1
 8007e84:	701a      	strb	r2, [r3, #0]
		res = send_cmd(CMD55, 0);
 8007e86:	250e      	movs	r5, #14
 8007e88:	197c      	adds	r4, r7, r5
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	2037      	movs	r0, #55	@ 0x37
 8007e8e:	f7ff ffe8 	bl	8007e62 <send_cmd>
 8007e92:	0003      	movs	r3, r0
 8007e94:	7023      	strb	r3, [r4, #0]
		if (res > 1) return res;
 8007e96:	002a      	movs	r2, r5
 8007e98:	18bb      	adds	r3, r7, r2
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d902      	bls.n	8007ea6 <send_cmd+0x44>
 8007ea0:	18bb      	adds	r3, r7, r2
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	e067      	b.n	8007f76 <send_cmd+0x114>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8007ea6:	1dfb      	adds	r3, r7, #7
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	2b0c      	cmp	r3, #12
 8007eac:	d007      	beq.n	8007ebe <send_cmd+0x5c>
		despiselect();
 8007eae:	f7ff ff43 	bl	8007d38 <despiselect>
		if (!spiselect()) return 0xFF;
 8007eb2:	f7ff ff51 	bl	8007d58 <spiselect>
 8007eb6:	1e03      	subs	r3, r0, #0
 8007eb8:	d101      	bne.n	8007ebe <send_cmd+0x5c>
 8007eba:	23ff      	movs	r3, #255	@ 0xff
 8007ebc:	e05b      	b.n	8007f76 <send_cmd+0x114>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8007ebe:	1dfb      	adds	r3, r7, #7
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	2240      	movs	r2, #64	@ 0x40
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	0018      	movs	r0, r3
 8007eca:	f7ff fec5 	bl	8007c58 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	0e1b      	lsrs	r3, r3, #24
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	0018      	movs	r0, r3
 8007ed6:	f7ff febf 	bl	8007c58 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	0c1b      	lsrs	r3, r3, #16
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	0018      	movs	r0, r3
 8007ee2:	f7ff feb9 	bl	8007c58 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	0a1b      	lsrs	r3, r3, #8
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	0018      	movs	r0, r3
 8007eee:	f7ff feb3 	bl	8007c58 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	0018      	movs	r0, r3
 8007ef8:	f7ff feae 	bl	8007c58 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8007efc:	210f      	movs	r1, #15
 8007efe:	187b      	adds	r3, r7, r1
 8007f00:	2201      	movs	r2, #1
 8007f02:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8007f04:	1dfb      	adds	r3, r7, #7
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d102      	bne.n	8007f12 <send_cmd+0xb0>
 8007f0c:	187b      	adds	r3, r7, r1
 8007f0e:	2295      	movs	r2, #149	@ 0x95
 8007f10:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8007f12:	1dfb      	adds	r3, r7, #7
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	2b08      	cmp	r3, #8
 8007f18:	d103      	bne.n	8007f22 <send_cmd+0xc0>
 8007f1a:	230f      	movs	r3, #15
 8007f1c:	18fb      	adds	r3, r7, r3
 8007f1e:	2287      	movs	r2, #135	@ 0x87
 8007f20:	701a      	strb	r2, [r3, #0]
	xchg_spi(n);
 8007f22:	230f      	movs	r3, #15
 8007f24:	18fb      	adds	r3, r7, r3
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	0018      	movs	r0, r3
 8007f2a:	f7ff fe95 	bl	8007c58 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8007f2e:	1dfb      	adds	r3, r7, #7
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	2b0c      	cmp	r3, #12
 8007f34:	d102      	bne.n	8007f3c <send_cmd+0xda>
 8007f36:	20ff      	movs	r0, #255	@ 0xff
 8007f38:	f7ff fe8e 	bl	8007c58 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8007f3c:	230f      	movs	r3, #15
 8007f3e:	18fb      	adds	r3, r7, r3
 8007f40:	220a      	movs	r2, #10
 8007f42:	701a      	strb	r2, [r3, #0]
	do {
		res = xchg_spi(0xFF);
 8007f44:	250e      	movs	r5, #14
 8007f46:	197c      	adds	r4, r7, r5
 8007f48:	20ff      	movs	r0, #255	@ 0xff
 8007f4a:	f7ff fe85 	bl	8007c58 <xchg_spi>
 8007f4e:	0003      	movs	r3, r0
 8007f50:	7023      	strb	r3, [r4, #0]
	} while ((res & 0x80) && --n);
 8007f52:	197b      	adds	r3, r7, r5
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	b25b      	sxtb	r3, r3
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	da09      	bge.n	8007f70 <send_cmd+0x10e>
 8007f5c:	210f      	movs	r1, #15
 8007f5e:	187b      	adds	r3, r7, r1
 8007f60:	187a      	adds	r2, r7, r1
 8007f62:	7812      	ldrb	r2, [r2, #0]
 8007f64:	3a01      	subs	r2, #1
 8007f66:	701a      	strb	r2, [r3, #0]
 8007f68:	187b      	adds	r3, r7, r1
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1e9      	bne.n	8007f44 <send_cmd+0xe2>

	return res;							/* Return received response */
 8007f70:	230e      	movs	r3, #14
 8007f72:	18fb      	adds	r3, r7, r3
 8007f74:	781b      	ldrb	r3, [r3, #0]
}
 8007f76:	0018      	movs	r0, r3
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	b004      	add	sp, #16
 8007f7c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007f80 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007f80:	b5b0      	push	{r4, r5, r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	0002      	movs	r2, r0
 8007f88:	1dfb      	adds	r3, r7, #7
 8007f8a:	701a      	strb	r2, [r3, #0]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8007f8c:	1dfb      	adds	r3, r7, #7
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d001      	beq.n	8007f98 <USER_SPI_initialize+0x18>
 8007f94:	2301      	movs	r3, #1
 8007f96:	e100      	b.n	800819a <USER_SPI_initialize+0x21a>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8007f98:	4b82      	ldr	r3, [pc, #520]	@ (80081a4 <USER_SPI_initialize+0x224>)
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	001a      	movs	r2, r3
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	d003      	beq.n	8007fae <USER_SPI_initialize+0x2e>
 8007fa6:	4b7f      	ldr	r3, [pc, #508]	@ (80081a4 <USER_SPI_initialize+0x224>)
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	e0f5      	b.n	800819a <USER_SPI_initialize+0x21a>

	FCLK_SLOW();
 8007fae:	4b7e      	ldr	r3, [pc, #504]	@ (80081a8 <USER_SPI_initialize+0x228>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2238      	movs	r2, #56	@ 0x38
 8007fb6:	4393      	bics	r3, r2
 8007fb8:	001a      	movs	r2, r3
 8007fba:	4b7b      	ldr	r3, [pc, #492]	@ (80081a8 <USER_SPI_initialize+0x228>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2130      	movs	r1, #48	@ 0x30
 8007fc0:	430a      	orrs	r2, r1
 8007fc2:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8007fc4:	230f      	movs	r3, #15
 8007fc6:	18fb      	adds	r3, r7, r3
 8007fc8:	220a      	movs	r2, #10
 8007fca:	701a      	strb	r2, [r3, #0]
 8007fcc:	e008      	b.n	8007fe0 <USER_SPI_initialize+0x60>
 8007fce:	20ff      	movs	r0, #255	@ 0xff
 8007fd0:	f7ff fe42 	bl	8007c58 <xchg_spi>
 8007fd4:	210f      	movs	r1, #15
 8007fd6:	187b      	adds	r3, r7, r1
 8007fd8:	781a      	ldrb	r2, [r3, #0]
 8007fda:	187b      	adds	r3, r7, r1
 8007fdc:	3a01      	subs	r2, #1
 8007fde:	701a      	strb	r2, [r3, #0]
 8007fe0:	240f      	movs	r4, #15
 8007fe2:	193b      	adds	r3, r7, r4
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1f1      	bne.n	8007fce <USER_SPI_initialize+0x4e>

	ty = 0;
 8007fea:	230d      	movs	r3, #13
 8007fec:	18fb      	adds	r3, r7, r3
 8007fee:	2200      	movs	r2, #0
 8007ff0:	701a      	strb	r2, [r3, #0]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8007ff2:	2100      	movs	r1, #0
 8007ff4:	2000      	movs	r0, #0
 8007ff6:	f7ff ff34 	bl	8007e62 <send_cmd>
 8007ffa:	0003      	movs	r3, r0
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d000      	beq.n	8008002 <USER_SPI_initialize+0x82>
 8008000:	e0a6      	b.n	8008150 <USER_SPI_initialize+0x1d0>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8008002:	23fa      	movs	r3, #250	@ 0xfa
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	0018      	movs	r0, r3
 8008008:	f7ff fdfc 	bl	8007c04 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800800c:	23d5      	movs	r3, #213	@ 0xd5
 800800e:	005b      	lsls	r3, r3, #1
 8008010:	0019      	movs	r1, r3
 8008012:	2008      	movs	r0, #8
 8008014:	f7ff ff25 	bl	8007e62 <send_cmd>
 8008018:	0003      	movs	r3, r0
 800801a:	2b01      	cmp	r3, #1
 800801c:	d162      	bne.n	80080e4 <USER_SPI_initialize+0x164>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800801e:	193b      	adds	r3, r7, r4
 8008020:	2200      	movs	r2, #0
 8008022:	701a      	strb	r2, [r3, #0]
 8008024:	e00f      	b.n	8008046 <USER_SPI_initialize+0xc6>
 8008026:	250f      	movs	r5, #15
 8008028:	197b      	adds	r3, r7, r5
 800802a:	781c      	ldrb	r4, [r3, #0]
 800802c:	20ff      	movs	r0, #255	@ 0xff
 800802e:	f7ff fe13 	bl	8007c58 <xchg_spi>
 8008032:	0003      	movs	r3, r0
 8008034:	001a      	movs	r2, r3
 8008036:	2308      	movs	r3, #8
 8008038:	18fb      	adds	r3, r7, r3
 800803a:	551a      	strb	r2, [r3, r4]
 800803c:	197b      	adds	r3, r7, r5
 800803e:	781a      	ldrb	r2, [r3, #0]
 8008040:	197b      	adds	r3, r7, r5
 8008042:	3201      	adds	r2, #1
 8008044:	701a      	strb	r2, [r3, #0]
 8008046:	230f      	movs	r3, #15
 8008048:	18fb      	adds	r3, r7, r3
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	2b03      	cmp	r3, #3
 800804e:	d9ea      	bls.n	8008026 <USER_SPI_initialize+0xa6>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8008050:	2208      	movs	r2, #8
 8008052:	18bb      	adds	r3, r7, r2
 8008054:	789b      	ldrb	r3, [r3, #2]
 8008056:	2b01      	cmp	r3, #1
 8008058:	d000      	beq.n	800805c <USER_SPI_initialize+0xdc>
 800805a:	e079      	b.n	8008150 <USER_SPI_initialize+0x1d0>
 800805c:	18bb      	adds	r3, r7, r2
 800805e:	78db      	ldrb	r3, [r3, #3]
 8008060:	2baa      	cmp	r3, #170	@ 0xaa
 8008062:	d000      	beq.n	8008066 <USER_SPI_initialize+0xe6>
 8008064:	e074      	b.n	8008150 <USER_SPI_initialize+0x1d0>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8008066:	46c0      	nop			@ (mov r8, r8)
 8008068:	f7ff fde0 	bl	8007c2c <SPI_Timer_Status>
 800806c:	1e03      	subs	r3, r0, #0
 800806e:	d007      	beq.n	8008080 <USER_SPI_initialize+0x100>
 8008070:	2380      	movs	r3, #128	@ 0x80
 8008072:	05db      	lsls	r3, r3, #23
 8008074:	0019      	movs	r1, r3
 8008076:	20a9      	movs	r0, #169	@ 0xa9
 8008078:	f7ff fef3 	bl	8007e62 <send_cmd>
 800807c:	1e03      	subs	r3, r0, #0
 800807e:	d1f3      	bne.n	8008068 <USER_SPI_initialize+0xe8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8008080:	f7ff fdd4 	bl	8007c2c <SPI_Timer_Status>
 8008084:	1e03      	subs	r3, r0, #0
 8008086:	d063      	beq.n	8008150 <USER_SPI_initialize+0x1d0>
 8008088:	2100      	movs	r1, #0
 800808a:	203a      	movs	r0, #58	@ 0x3a
 800808c:	f7ff fee9 	bl	8007e62 <send_cmd>
 8008090:	1e03      	subs	r3, r0, #0
 8008092:	d15d      	bne.n	8008150 <USER_SPI_initialize+0x1d0>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8008094:	230f      	movs	r3, #15
 8008096:	18fb      	adds	r3, r7, r3
 8008098:	2200      	movs	r2, #0
 800809a:	701a      	strb	r2, [r3, #0]
 800809c:	e00f      	b.n	80080be <USER_SPI_initialize+0x13e>
 800809e:	250f      	movs	r5, #15
 80080a0:	197b      	adds	r3, r7, r5
 80080a2:	781c      	ldrb	r4, [r3, #0]
 80080a4:	20ff      	movs	r0, #255	@ 0xff
 80080a6:	f7ff fdd7 	bl	8007c58 <xchg_spi>
 80080aa:	0003      	movs	r3, r0
 80080ac:	001a      	movs	r2, r3
 80080ae:	2308      	movs	r3, #8
 80080b0:	18fb      	adds	r3, r7, r3
 80080b2:	551a      	strb	r2, [r3, r4]
 80080b4:	197b      	adds	r3, r7, r5
 80080b6:	781a      	ldrb	r2, [r3, #0]
 80080b8:	197b      	adds	r3, r7, r5
 80080ba:	3201      	adds	r2, #1
 80080bc:	701a      	strb	r2, [r3, #0]
 80080be:	230f      	movs	r3, #15
 80080c0:	18fb      	adds	r3, r7, r3
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	2b03      	cmp	r3, #3
 80080c6:	d9ea      	bls.n	800809e <USER_SPI_initialize+0x11e>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80080c8:	2308      	movs	r3, #8
 80080ca:	18fb      	adds	r3, r7, r3
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	001a      	movs	r2, r3
 80080d0:	2340      	movs	r3, #64	@ 0x40
 80080d2:	4013      	ands	r3, r2
 80080d4:	d001      	beq.n	80080da <USER_SPI_initialize+0x15a>
 80080d6:	220c      	movs	r2, #12
 80080d8:	e000      	b.n	80080dc <USER_SPI_initialize+0x15c>
 80080da:	2204      	movs	r2, #4
 80080dc:	230d      	movs	r3, #13
 80080de:	18fb      	adds	r3, r7, r3
 80080e0:	701a      	strb	r2, [r3, #0]
 80080e2:	e035      	b.n	8008150 <USER_SPI_initialize+0x1d0>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80080e4:	2100      	movs	r1, #0
 80080e6:	20a9      	movs	r0, #169	@ 0xa9
 80080e8:	f7ff febb 	bl	8007e62 <send_cmd>
 80080ec:	0003      	movs	r3, r0
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d808      	bhi.n	8008104 <USER_SPI_initialize+0x184>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80080f2:	230d      	movs	r3, #13
 80080f4:	18fb      	adds	r3, r7, r3
 80080f6:	2202      	movs	r2, #2
 80080f8:	701a      	strb	r2, [r3, #0]
 80080fa:	230e      	movs	r3, #14
 80080fc:	18fb      	adds	r3, r7, r3
 80080fe:	22a9      	movs	r2, #169	@ 0xa9
 8008100:	701a      	strb	r2, [r3, #0]
 8008102:	e007      	b.n	8008114 <USER_SPI_initialize+0x194>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8008104:	230d      	movs	r3, #13
 8008106:	18fb      	adds	r3, r7, r3
 8008108:	2201      	movs	r2, #1
 800810a:	701a      	strb	r2, [r3, #0]
 800810c:	230e      	movs	r3, #14
 800810e:	18fb      	adds	r3, r7, r3
 8008110:	2201      	movs	r2, #1
 8008112:	701a      	strb	r2, [r3, #0]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8008114:	46c0      	nop			@ (mov r8, r8)
 8008116:	f7ff fd89 	bl	8007c2c <SPI_Timer_Status>
 800811a:	1e03      	subs	r3, r0, #0
 800811c:	d008      	beq.n	8008130 <USER_SPI_initialize+0x1b0>
 800811e:	230e      	movs	r3, #14
 8008120:	18fb      	adds	r3, r7, r3
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	2100      	movs	r1, #0
 8008126:	0018      	movs	r0, r3
 8008128:	f7ff fe9b 	bl	8007e62 <send_cmd>
 800812c:	1e03      	subs	r3, r0, #0
 800812e:	d1f2      	bne.n	8008116 <USER_SPI_initialize+0x196>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8008130:	f7ff fd7c 	bl	8007c2c <SPI_Timer_Status>
 8008134:	1e03      	subs	r3, r0, #0
 8008136:	d007      	beq.n	8008148 <USER_SPI_initialize+0x1c8>
 8008138:	2380      	movs	r3, #128	@ 0x80
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	0019      	movs	r1, r3
 800813e:	2010      	movs	r0, #16
 8008140:	f7ff fe8f 	bl	8007e62 <send_cmd>
 8008144:	1e03      	subs	r3, r0, #0
 8008146:	d003      	beq.n	8008150 <USER_SPI_initialize+0x1d0>
				ty = 0;
 8008148:	230d      	movs	r3, #13
 800814a:	18fb      	adds	r3, r7, r3
 800814c:	2200      	movs	r2, #0
 800814e:	701a      	strb	r2, [r3, #0]
		}
	}
	CardType = ty;	/* Card type */
 8008150:	4b16      	ldr	r3, [pc, #88]	@ (80081ac <USER_SPI_initialize+0x22c>)
 8008152:	240d      	movs	r4, #13
 8008154:	193a      	adds	r2, r7, r4
 8008156:	7812      	ldrb	r2, [r2, #0]
 8008158:	701a      	strb	r2, [r3, #0]
	despiselect();
 800815a:	f7ff fded 	bl	8007d38 <despiselect>

	if (ty) {			/* OK */
 800815e:	193b      	adds	r3, r7, r4
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d013      	beq.n	800818e <USER_SPI_initialize+0x20e>
		FCLK_FAST();			/* Set fast clock */
 8008166:	4b10      	ldr	r3, [pc, #64]	@ (80081a8 <USER_SPI_initialize+0x228>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2238      	movs	r2, #56	@ 0x38
 800816e:	4393      	bics	r3, r2
 8008170:	001a      	movs	r2, r3
 8008172:	4b0d      	ldr	r3, [pc, #52]	@ (80081a8 <USER_SPI_initialize+0x228>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2110      	movs	r1, #16
 8008178:	430a      	orrs	r2, r1
 800817a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800817c:	4b09      	ldr	r3, [pc, #36]	@ (80081a4 <USER_SPI_initialize+0x224>)
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	b2db      	uxtb	r3, r3
 8008182:	2201      	movs	r2, #1
 8008184:	4393      	bics	r3, r2
 8008186:	b2da      	uxtb	r2, r3
 8008188:	4b06      	ldr	r3, [pc, #24]	@ (80081a4 <USER_SPI_initialize+0x224>)
 800818a:	701a      	strb	r2, [r3, #0]
 800818c:	e002      	b.n	8008194 <USER_SPI_initialize+0x214>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800818e:	4b05      	ldr	r3, [pc, #20]	@ (80081a4 <USER_SPI_initialize+0x224>)
 8008190:	2201      	movs	r2, #1
 8008192:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8008194:	4b03      	ldr	r3, [pc, #12]	@ (80081a4 <USER_SPI_initialize+0x224>)
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	b2db      	uxtb	r3, r3
}
 800819a:	0018      	movs	r0, r3
 800819c:	46bd      	mov	sp, r7
 800819e:	b004      	add	sp, #16
 80081a0:	bdb0      	pop	{r4, r5, r7, pc}
 80081a2:	46c0      	nop			@ (mov r8, r8)
 80081a4:	20000020 	.word	0x20000020
 80081a8:	200000e4 	.word	0x200000e4
 80081ac:	200004ec 	.word	0x200004ec

080081b0 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	0002      	movs	r2, r0
 80081b8:	1dfb      	adds	r3, r7, #7
 80081ba:	701a      	strb	r2, [r3, #0]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80081bc:	1dfb      	adds	r3, r7, #7
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d001      	beq.n	80081c8 <USER_SPI_status+0x18>
 80081c4:	2301      	movs	r3, #1
 80081c6:	e002      	b.n	80081ce <USER_SPI_status+0x1e>

	return Stat;	/* Return disk status */
 80081c8:	4b03      	ldr	r3, [pc, #12]	@ (80081d8 <USER_SPI_status+0x28>)
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	b2db      	uxtb	r3, r3
}
 80081ce:	0018      	movs	r0, r3
 80081d0:	46bd      	mov	sp, r7
 80081d2:	b002      	add	sp, #8
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	46c0      	nop			@ (mov r8, r8)
 80081d8:	20000020 	.word	0x20000020

080081dc <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60b9      	str	r1, [r7, #8]
 80081e4:	607a      	str	r2, [r7, #4]
 80081e6:	603b      	str	r3, [r7, #0]
 80081e8:	210f      	movs	r1, #15
 80081ea:	187b      	adds	r3, r7, r1
 80081ec:	1c02      	adds	r2, r0, #0
 80081ee:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80081f0:	187b      	adds	r3, r7, r1
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d102      	bne.n	80081fe <USER_SPI_read+0x22>
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d101      	bne.n	8008202 <USER_SPI_read+0x26>
 80081fe:	2304      	movs	r3, #4
 8008200:	e04f      	b.n	80082a2 <USER_SPI_read+0xc6>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8008202:	4b2a      	ldr	r3, [pc, #168]	@ (80082ac <USER_SPI_read+0xd0>)
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	b2db      	uxtb	r3, r3
 8008208:	001a      	movs	r2, r3
 800820a:	2301      	movs	r3, #1
 800820c:	4013      	ands	r3, r2
 800820e:	d001      	beq.n	8008214 <USER_SPI_read+0x38>
 8008210:	2303      	movs	r3, #3
 8008212:	e046      	b.n	80082a2 <USER_SPI_read+0xc6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8008214:	4b26      	ldr	r3, [pc, #152]	@ (80082b0 <USER_SPI_read+0xd4>)
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	001a      	movs	r2, r3
 800821a:	2308      	movs	r3, #8
 800821c:	4013      	ands	r3, r2
 800821e:	d102      	bne.n	8008226 <USER_SPI_read+0x4a>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	025b      	lsls	r3, r3, #9
 8008224:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	2b01      	cmp	r3, #1
 800822a:	d112      	bne.n	8008252 <USER_SPI_read+0x76>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	0019      	movs	r1, r3
 8008230:	2011      	movs	r0, #17
 8008232:	f7ff fe16 	bl	8007e62 <send_cmd>
 8008236:	1e03      	subs	r3, r0, #0
 8008238:	d12d      	bne.n	8008296 <USER_SPI_read+0xba>
			&& rcvr_datablock(buff, 512)) {
 800823a:	2380      	movs	r3, #128	@ 0x80
 800823c:	009a      	lsls	r2, r3, #2
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	0011      	movs	r1, r2
 8008242:	0018      	movs	r0, r3
 8008244:	f7ff fda4 	bl	8007d90 <rcvr_datablock>
 8008248:	1e03      	subs	r3, r0, #0
 800824a:	d024      	beq.n	8008296 <USER_SPI_read+0xba>
			count = 0;
 800824c:	2300      	movs	r3, #0
 800824e:	603b      	str	r3, [r7, #0]
 8008250:	e021      	b.n	8008296 <USER_SPI_read+0xba>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	0019      	movs	r1, r3
 8008256:	2012      	movs	r0, #18
 8008258:	f7ff fe03 	bl	8007e62 <send_cmd>
 800825c:	1e03      	subs	r3, r0, #0
 800825e:	d11a      	bne.n	8008296 <USER_SPI_read+0xba>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8008260:	2380      	movs	r3, #128	@ 0x80
 8008262:	009a      	lsls	r2, r3, #2
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	0011      	movs	r1, r2
 8008268:	0018      	movs	r0, r3
 800826a:	f7ff fd91 	bl	8007d90 <rcvr_datablock>
 800826e:	1e03      	subs	r3, r0, #0
 8008270:	d00c      	beq.n	800828c <USER_SPI_read+0xb0>
				buff += 512;
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	2280      	movs	r2, #128	@ 0x80
 8008276:	0092      	lsls	r2, r2, #2
 8008278:	4694      	mov	ip, r2
 800827a:	4463      	add	r3, ip
 800827c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	3b01      	subs	r3, #1
 8008282:	603b      	str	r3, [r7, #0]
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1ea      	bne.n	8008260 <USER_SPI_read+0x84>
 800828a:	e000      	b.n	800828e <USER_SPI_read+0xb2>
				if (!rcvr_datablock(buff, 512)) break;
 800828c:	46c0      	nop			@ (mov r8, r8)
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800828e:	2100      	movs	r1, #0
 8008290:	200c      	movs	r0, #12
 8008292:	f7ff fde6 	bl	8007e62 <send_cmd>
		}
	}
	despiselect();
 8008296:	f7ff fd4f 	bl	8007d38 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	1e5a      	subs	r2, r3, #1
 800829e:	4193      	sbcs	r3, r2
 80082a0:	b2db      	uxtb	r3, r3
}
 80082a2:	0018      	movs	r0, r3
 80082a4:	46bd      	mov	sp, r7
 80082a6:	b004      	add	sp, #16
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	46c0      	nop			@ (mov r8, r8)
 80082ac:	20000020 	.word	0x20000020
 80082b0:	200004ec 	.word	0x200004ec

080082b4 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60b9      	str	r1, [r7, #8]
 80082bc:	607a      	str	r2, [r7, #4]
 80082be:	603b      	str	r3, [r7, #0]
 80082c0:	210f      	movs	r1, #15
 80082c2:	187b      	adds	r3, r7, r1
 80082c4:	1c02      	adds	r2, r0, #0
 80082c6:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80082c8:	187b      	adds	r3, r7, r1
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d102      	bne.n	80082d6 <USER_SPI_write+0x22>
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d101      	bne.n	80082da <USER_SPI_write+0x26>
 80082d6:	2304      	movs	r3, #4
 80082d8:	e063      	b.n	80083a2 <USER_SPI_write+0xee>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80082da:	4b34      	ldr	r3, [pc, #208]	@ (80083ac <USER_SPI_write+0xf8>)
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	001a      	movs	r2, r3
 80082e2:	2301      	movs	r3, #1
 80082e4:	4013      	ands	r3, r2
 80082e6:	d001      	beq.n	80082ec <USER_SPI_write+0x38>
 80082e8:	2303      	movs	r3, #3
 80082ea:	e05a      	b.n	80083a2 <USER_SPI_write+0xee>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80082ec:	4b2f      	ldr	r3, [pc, #188]	@ (80083ac <USER_SPI_write+0xf8>)
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	001a      	movs	r2, r3
 80082f4:	2304      	movs	r3, #4
 80082f6:	4013      	ands	r3, r2
 80082f8:	d001      	beq.n	80082fe <USER_SPI_write+0x4a>
 80082fa:	2302      	movs	r3, #2
 80082fc:	e051      	b.n	80083a2 <USER_SPI_write+0xee>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80082fe:	4b2c      	ldr	r3, [pc, #176]	@ (80083b0 <USER_SPI_write+0xfc>)
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	001a      	movs	r2, r3
 8008304:	2308      	movs	r3, #8
 8008306:	4013      	ands	r3, r2
 8008308:	d102      	bne.n	8008310 <USER_SPI_write+0x5c>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	025b      	lsls	r3, r3, #9
 800830e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	2b01      	cmp	r3, #1
 8008314:	d110      	bne.n	8008338 <USER_SPI_write+0x84>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	0019      	movs	r1, r3
 800831a:	2018      	movs	r0, #24
 800831c:	f7ff fda1 	bl	8007e62 <send_cmd>
 8008320:	1e03      	subs	r3, r0, #0
 8008322:	d138      	bne.n	8008396 <USER_SPI_write+0xe2>
			&& xmit_datablock(buff, 0xFE)) {
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	21fe      	movs	r1, #254	@ 0xfe
 8008328:	0018      	movs	r0, r3
 800832a:	f7ff fd60 	bl	8007dee <xmit_datablock>
 800832e:	1e03      	subs	r3, r0, #0
 8008330:	d031      	beq.n	8008396 <USER_SPI_write+0xe2>
			count = 0;
 8008332:	2300      	movs	r3, #0
 8008334:	603b      	str	r3, [r7, #0]
 8008336:	e02e      	b.n	8008396 <USER_SPI_write+0xe2>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8008338:	4b1d      	ldr	r3, [pc, #116]	@ (80083b0 <USER_SPI_write+0xfc>)
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	001a      	movs	r2, r3
 800833e:	2306      	movs	r3, #6
 8008340:	4013      	ands	r3, r2
 8008342:	d004      	beq.n	800834e <USER_SPI_write+0x9a>
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	0019      	movs	r1, r3
 8008348:	2097      	movs	r0, #151	@ 0x97
 800834a:	f7ff fd8a 	bl	8007e62 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	0019      	movs	r1, r3
 8008352:	2019      	movs	r0, #25
 8008354:	f7ff fd85 	bl	8007e62 <send_cmd>
 8008358:	1e03      	subs	r3, r0, #0
 800835a:	d11c      	bne.n	8008396 <USER_SPI_write+0xe2>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	21fc      	movs	r1, #252	@ 0xfc
 8008360:	0018      	movs	r0, r3
 8008362:	f7ff fd44 	bl	8007dee <xmit_datablock>
 8008366:	1e03      	subs	r3, r0, #0
 8008368:	d00c      	beq.n	8008384 <USER_SPI_write+0xd0>
				buff += 512;
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	2280      	movs	r2, #128	@ 0x80
 800836e:	0092      	lsls	r2, r2, #2
 8008370:	4694      	mov	ip, r2
 8008372:	4463      	add	r3, ip
 8008374:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	3b01      	subs	r3, #1
 800837a:	603b      	str	r3, [r7, #0]
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1ec      	bne.n	800835c <USER_SPI_write+0xa8>
 8008382:	e000      	b.n	8008386 <USER_SPI_write+0xd2>
				if (!xmit_datablock(buff, 0xFC)) break;
 8008384:	46c0      	nop			@ (mov r8, r8)
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8008386:	21fd      	movs	r1, #253	@ 0xfd
 8008388:	2000      	movs	r0, #0
 800838a:	f7ff fd30 	bl	8007dee <xmit_datablock>
 800838e:	1e03      	subs	r3, r0, #0
 8008390:	d101      	bne.n	8008396 <USER_SPI_write+0xe2>
 8008392:	2301      	movs	r3, #1
 8008394:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8008396:	f7ff fccf 	bl	8007d38 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	1e5a      	subs	r2, r3, #1
 800839e:	4193      	sbcs	r3, r2
 80083a0:	b2db      	uxtb	r3, r3
}
 80083a2:	0018      	movs	r0, r3
 80083a4:	46bd      	mov	sp, r7
 80083a6:	b004      	add	sp, #16
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	46c0      	nop			@ (mov r8, r8)
 80083ac:	20000020 	.word	0x20000020
 80083b0:	200004ec 	.word	0x200004ec

080083b4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80083b4:	b590      	push	{r4, r7, lr}
 80083b6:	b08d      	sub	sp, #52	@ 0x34
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	603a      	str	r2, [r7, #0]
 80083bc:	1dfb      	adds	r3, r7, #7
 80083be:	1c02      	adds	r2, r0, #0
 80083c0:	701a      	strb	r2, [r3, #0]
 80083c2:	1dbb      	adds	r3, r7, #6
 80083c4:	1c0a      	adds	r2, r1, #0
 80083c6:	701a      	strb	r2, [r3, #0]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80083c8:	1dfb      	adds	r3, r7, #7
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d001      	beq.n	80083d4 <USER_SPI_ioctl+0x20>
 80083d0:	2304      	movs	r3, #4
 80083d2:	e178      	b.n	80086c6 <USER_SPI_ioctl+0x312>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80083d4:	4bbe      	ldr	r3, [pc, #760]	@ (80086d0 <USER_SPI_ioctl+0x31c>)
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	001a      	movs	r2, r3
 80083dc:	2301      	movs	r3, #1
 80083de:	4013      	ands	r3, r2
 80083e0:	d001      	beq.n	80083e6 <USER_SPI_ioctl+0x32>
 80083e2:	2303      	movs	r3, #3
 80083e4:	e16f      	b.n	80086c6 <USER_SPI_ioctl+0x312>

	res = RES_ERROR;
 80083e6:	232f      	movs	r3, #47	@ 0x2f
 80083e8:	18fb      	adds	r3, r7, r3
 80083ea:	2201      	movs	r2, #1
 80083ec:	701a      	strb	r2, [r3, #0]

	switch (cmd) {
 80083ee:	1dbb      	adds	r3, r7, #6
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	2b04      	cmp	r3, #4
 80083f4:	d100      	bne.n	80083f8 <USER_SPI_ioctl+0x44>
 80083f6:	e100      	b.n	80085fa <USER_SPI_ioctl+0x246>
 80083f8:	dd00      	ble.n	80083fc <USER_SPI_ioctl+0x48>
 80083fa:	e14d      	b.n	8008698 <USER_SPI_ioctl+0x2e4>
 80083fc:	2b03      	cmp	r3, #3
 80083fe:	d100      	bne.n	8008402 <USER_SPI_ioctl+0x4e>
 8008400:	e074      	b.n	80084ec <USER_SPI_ioctl+0x138>
 8008402:	dd00      	ble.n	8008406 <USER_SPI_ioctl+0x52>
 8008404:	e148      	b.n	8008698 <USER_SPI_ioctl+0x2e4>
 8008406:	2b00      	cmp	r3, #0
 8008408:	d002      	beq.n	8008410 <USER_SPI_ioctl+0x5c>
 800840a:	2b01      	cmp	r3, #1
 800840c:	d00a      	beq.n	8008424 <USER_SPI_ioctl+0x70>
 800840e:	e143      	b.n	8008698 <USER_SPI_ioctl+0x2e4>
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8008410:	f7ff fca2 	bl	8007d58 <spiselect>
 8008414:	1e03      	subs	r3, r0, #0
 8008416:	d100      	bne.n	800841a <USER_SPI_ioctl+0x66>
 8008418:	e143      	b.n	80086a2 <USER_SPI_ioctl+0x2ee>
 800841a:	232f      	movs	r3, #47	@ 0x2f
 800841c:	18fb      	adds	r3, r7, r3
 800841e:	2200      	movs	r2, #0
 8008420:	701a      	strb	r2, [r3, #0]
		break;
 8008422:	e13e      	b.n	80086a2 <USER_SPI_ioctl+0x2ee>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8008424:	2100      	movs	r1, #0
 8008426:	2009      	movs	r0, #9
 8008428:	f7ff fd1b 	bl	8007e62 <send_cmd>
 800842c:	1e03      	subs	r3, r0, #0
 800842e:	d000      	beq.n	8008432 <USER_SPI_ioctl+0x7e>
 8008430:	e139      	b.n	80086a6 <USER_SPI_ioctl+0x2f2>
 8008432:	240c      	movs	r4, #12
 8008434:	193b      	adds	r3, r7, r4
 8008436:	2110      	movs	r1, #16
 8008438:	0018      	movs	r0, r3
 800843a:	f7ff fca9 	bl	8007d90 <rcvr_datablock>
 800843e:	1e03      	subs	r3, r0, #0
 8008440:	d100      	bne.n	8008444 <USER_SPI_ioctl+0x90>
 8008442:	e130      	b.n	80086a6 <USER_SPI_ioctl+0x2f2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8008444:	0020      	movs	r0, r4
 8008446:	183b      	adds	r3, r7, r0
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	099b      	lsrs	r3, r3, #6
 800844c:	b2db      	uxtb	r3, r3
 800844e:	2b01      	cmp	r3, #1
 8008450:	d115      	bne.n	800847e <USER_SPI_ioctl+0xca>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8008452:	183b      	adds	r3, r7, r0
 8008454:	7a5b      	ldrb	r3, [r3, #9]
 8008456:	001a      	movs	r2, r3
 8008458:	183b      	adds	r3, r7, r0
 800845a:	7a1b      	ldrb	r3, [r3, #8]
 800845c:	021b      	lsls	r3, r3, #8
 800845e:	18d3      	adds	r3, r2, r3
 8008460:	0019      	movs	r1, r3
 8008462:	183b      	adds	r3, r7, r0
 8008464:	79db      	ldrb	r3, [r3, #7]
 8008466:	041a      	lsls	r2, r3, #16
 8008468:	23fc      	movs	r3, #252	@ 0xfc
 800846a:	039b      	lsls	r3, r3, #14
 800846c:	4013      	ands	r3, r2
 800846e:	18cb      	adds	r3, r1, r3
 8008470:	3301      	adds	r3, #1
 8008472:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	029a      	lsls	r2, r3, #10
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	601a      	str	r2, [r3, #0]
 800847c:	e031      	b.n	80084e2 <USER_SPI_ioctl+0x12e>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800847e:	200c      	movs	r0, #12
 8008480:	183b      	adds	r3, r7, r0
 8008482:	795b      	ldrb	r3, [r3, #5]
 8008484:	220f      	movs	r2, #15
 8008486:	4013      	ands	r3, r2
 8008488:	b2da      	uxtb	r2, r3
 800848a:	183b      	adds	r3, r7, r0
 800848c:	7a9b      	ldrb	r3, [r3, #10]
 800848e:	09db      	lsrs	r3, r3, #7
 8008490:	b2db      	uxtb	r3, r3
 8008492:	18d3      	adds	r3, r2, r3
 8008494:	b2da      	uxtb	r2, r3
 8008496:	183b      	adds	r3, r7, r0
 8008498:	7a5b      	ldrb	r3, [r3, #9]
 800849a:	005b      	lsls	r3, r3, #1
 800849c:	b2db      	uxtb	r3, r3
 800849e:	2106      	movs	r1, #6
 80084a0:	400b      	ands	r3, r1
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	18d3      	adds	r3, r2, r3
 80084a6:	b2da      	uxtb	r2, r3
 80084a8:	242e      	movs	r4, #46	@ 0x2e
 80084aa:	193b      	adds	r3, r7, r4
 80084ac:	3202      	adds	r2, #2
 80084ae:	701a      	strb	r2, [r3, #0]
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80084b0:	183b      	adds	r3, r7, r0
 80084b2:	7a1b      	ldrb	r3, [r3, #8]
 80084b4:	099b      	lsrs	r3, r3, #6
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	001a      	movs	r2, r3
 80084ba:	183b      	adds	r3, r7, r0
 80084bc:	79db      	ldrb	r3, [r3, #7]
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	18d2      	adds	r2, r2, r3
 80084c2:	183b      	adds	r3, r7, r0
 80084c4:	799b      	ldrb	r3, [r3, #6]
 80084c6:	0299      	lsls	r1, r3, #10
 80084c8:	23c0      	movs	r3, #192	@ 0xc0
 80084ca:	011b      	lsls	r3, r3, #4
 80084cc:	400b      	ands	r3, r1
 80084ce:	18d3      	adds	r3, r2, r3
 80084d0:	3301      	adds	r3, #1
 80084d2:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80084d4:	193b      	adds	r3, r7, r4
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	3b09      	subs	r3, #9
 80084da:	69fa      	ldr	r2, [r7, #28]
 80084dc:	409a      	lsls	r2, r3
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80084e2:	232f      	movs	r3, #47	@ 0x2f
 80084e4:	18fb      	adds	r3, r7, r3
 80084e6:	2200      	movs	r2, #0
 80084e8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80084ea:	e0dc      	b.n	80086a6 <USER_SPI_ioctl+0x2f2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80084ec:	4b79      	ldr	r3, [pc, #484]	@ (80086d4 <USER_SPI_ioctl+0x320>)
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	001a      	movs	r2, r3
 80084f2:	2304      	movs	r3, #4
 80084f4:	4013      	ands	r3, r2
 80084f6:	d035      	beq.n	8008564 <USER_SPI_ioctl+0x1b0>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80084f8:	2100      	movs	r1, #0
 80084fa:	208d      	movs	r0, #141	@ 0x8d
 80084fc:	f7ff fcb1 	bl	8007e62 <send_cmd>
 8008500:	1e03      	subs	r3, r0, #0
 8008502:	d000      	beq.n	8008506 <USER_SPI_ioctl+0x152>
 8008504:	e0d1      	b.n	80086aa <USER_SPI_ioctl+0x2f6>
				xchg_spi(0xFF);
 8008506:	20ff      	movs	r0, #255	@ 0xff
 8008508:	f7ff fba6 	bl	8007c58 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800850c:	230c      	movs	r3, #12
 800850e:	18fb      	adds	r3, r7, r3
 8008510:	2110      	movs	r1, #16
 8008512:	0018      	movs	r0, r3
 8008514:	f7ff fc3c 	bl	8007d90 <rcvr_datablock>
 8008518:	1e03      	subs	r3, r0, #0
 800851a:	d100      	bne.n	800851e <USER_SPI_ioctl+0x16a>
 800851c:	e0c5      	b.n	80086aa <USER_SPI_ioctl+0x2f6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800851e:	232e      	movs	r3, #46	@ 0x2e
 8008520:	18fb      	adds	r3, r7, r3
 8008522:	2230      	movs	r2, #48	@ 0x30
 8008524:	701a      	strb	r2, [r3, #0]
 8008526:	e008      	b.n	800853a <USER_SPI_ioctl+0x186>
 8008528:	20ff      	movs	r0, #255	@ 0xff
 800852a:	f7ff fb95 	bl	8007c58 <xchg_spi>
 800852e:	212e      	movs	r1, #46	@ 0x2e
 8008530:	187b      	adds	r3, r7, r1
 8008532:	781a      	ldrb	r2, [r3, #0]
 8008534:	187b      	adds	r3, r7, r1
 8008536:	3a01      	subs	r2, #1
 8008538:	701a      	strb	r2, [r3, #0]
 800853a:	232e      	movs	r3, #46	@ 0x2e
 800853c:	18fb      	adds	r3, r7, r3
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1f1      	bne.n	8008528 <USER_SPI_ioctl+0x174>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8008544:	230c      	movs	r3, #12
 8008546:	18fb      	adds	r3, r7, r3
 8008548:	7a9b      	ldrb	r3, [r3, #10]
 800854a:	091b      	lsrs	r3, r3, #4
 800854c:	b2db      	uxtb	r3, r3
 800854e:	001a      	movs	r2, r3
 8008550:	2310      	movs	r3, #16
 8008552:	4093      	lsls	r3, r2
 8008554:	001a      	movs	r2, r3
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800855a:	232f      	movs	r3, #47	@ 0x2f
 800855c:	18fb      	adds	r3, r7, r3
 800855e:	2200      	movs	r2, #0
 8008560:	701a      	strb	r2, [r3, #0]
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8008562:	e0a2      	b.n	80086aa <USER_SPI_ioctl+0x2f6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8008564:	2100      	movs	r1, #0
 8008566:	2009      	movs	r0, #9
 8008568:	f7ff fc7b 	bl	8007e62 <send_cmd>
 800856c:	1e03      	subs	r3, r0, #0
 800856e:	d000      	beq.n	8008572 <USER_SPI_ioctl+0x1be>
 8008570:	e09b      	b.n	80086aa <USER_SPI_ioctl+0x2f6>
 8008572:	240c      	movs	r4, #12
 8008574:	193b      	adds	r3, r7, r4
 8008576:	2110      	movs	r1, #16
 8008578:	0018      	movs	r0, r3
 800857a:	f7ff fc09 	bl	8007d90 <rcvr_datablock>
 800857e:	1e03      	subs	r3, r0, #0
 8008580:	d100      	bne.n	8008584 <USER_SPI_ioctl+0x1d0>
 8008582:	e092      	b.n	80086aa <USER_SPI_ioctl+0x2f6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8008584:	4b53      	ldr	r3, [pc, #332]	@ (80086d4 <USER_SPI_ioctl+0x320>)
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	001a      	movs	r2, r3
 800858a:	2302      	movs	r3, #2
 800858c:	4013      	ands	r3, r2
 800858e:	d016      	beq.n	80085be <USER_SPI_ioctl+0x20a>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8008590:	0021      	movs	r1, r4
 8008592:	187b      	adds	r3, r7, r1
 8008594:	7a9b      	ldrb	r3, [r3, #10]
 8008596:	005b      	lsls	r3, r3, #1
 8008598:	227e      	movs	r2, #126	@ 0x7e
 800859a:	4013      	ands	r3, r2
 800859c:	187a      	adds	r2, r7, r1
 800859e:	7ad2      	ldrb	r2, [r2, #11]
 80085a0:	09d2      	lsrs	r2, r2, #7
 80085a2:	b2d2      	uxtb	r2, r2
 80085a4:	189b      	adds	r3, r3, r2
 80085a6:	1c5a      	adds	r2, r3, #1
 80085a8:	187b      	adds	r3, r7, r1
 80085aa:	7b5b      	ldrb	r3, [r3, #13]
 80085ac:	099b      	lsrs	r3, r3, #6
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	3b01      	subs	r3, #1
 80085b2:	409a      	lsls	r2, r3
 80085b4:	0013      	movs	r3, r2
 80085b6:	001a      	movs	r2, r3
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	601a      	str	r2, [r3, #0]
 80085bc:	e018      	b.n	80085f0 <USER_SPI_ioctl+0x23c>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80085be:	210c      	movs	r1, #12
 80085c0:	187b      	adds	r3, r7, r1
 80085c2:	7a9b      	ldrb	r3, [r3, #10]
 80085c4:	109b      	asrs	r3, r3, #2
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	001a      	movs	r2, r3
 80085ca:	231f      	movs	r3, #31
 80085cc:	4013      	ands	r3, r2
 80085ce:	3301      	adds	r3, #1
 80085d0:	0008      	movs	r0, r1
 80085d2:	187a      	adds	r2, r7, r1
 80085d4:	7ad2      	ldrb	r2, [r2, #11]
 80085d6:	00d2      	lsls	r2, r2, #3
 80085d8:	2118      	movs	r1, #24
 80085da:	400a      	ands	r2, r1
 80085dc:	1839      	adds	r1, r7, r0
 80085de:	7ac9      	ldrb	r1, [r1, #11]
 80085e0:	0949      	lsrs	r1, r1, #5
 80085e2:	b2c9      	uxtb	r1, r1
 80085e4:	1852      	adds	r2, r2, r1
 80085e6:	3201      	adds	r2, #1
 80085e8:	4353      	muls	r3, r2
 80085ea:	001a      	movs	r2, r3
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80085f0:	232f      	movs	r3, #47	@ 0x2f
 80085f2:	18fb      	adds	r3, r7, r3
 80085f4:	2200      	movs	r2, #0
 80085f6:	701a      	strb	r2, [r3, #0]
		break;
 80085f8:	e057      	b.n	80086aa <USER_SPI_ioctl+0x2f6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80085fa:	4b36      	ldr	r3, [pc, #216]	@ (80086d4 <USER_SPI_ioctl+0x320>)
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	001a      	movs	r2, r3
 8008600:	2306      	movs	r3, #6
 8008602:	4013      	ands	r3, r2
 8008604:	d053      	beq.n	80086ae <USER_SPI_ioctl+0x2fa>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8008606:	240c      	movs	r4, #12
 8008608:	193a      	adds	r2, r7, r4
 800860a:	1dfb      	adds	r3, r7, #7
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	210b      	movs	r1, #11
 8008610:	0018      	movs	r0, r3
 8008612:	f7ff fecf 	bl	80083b4 <USER_SPI_ioctl>
 8008616:	1e03      	subs	r3, r0, #0
 8008618:	d14b      	bne.n	80086b2 <USER_SPI_ioctl+0x2fe>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800861a:	193b      	adds	r3, r7, r4
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	099b      	lsrs	r3, r3, #6
 8008620:	b2db      	uxtb	r3, r3
 8008622:	2b00      	cmp	r3, #0
 8008624:	d105      	bne.n	8008632 <USER_SPI_ioctl+0x27e>
 8008626:	193b      	adds	r3, r7, r4
 8008628:	7a9b      	ldrb	r3, [r3, #10]
 800862a:	001a      	movs	r2, r3
 800862c:	2340      	movs	r3, #64	@ 0x40
 800862e:	4013      	ands	r3, r2
 8008630:	d041      	beq.n	80086b6 <USER_SPI_ioctl+0x302>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	623b      	str	r3, [r7, #32]
 8008636:	6a3b      	ldr	r3, [r7, #32]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800863c:	6a3b      	ldr	r3, [r7, #32]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8008642:	4b24      	ldr	r3, [pc, #144]	@ (80086d4 <USER_SPI_ioctl+0x320>)
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	001a      	movs	r2, r3
 8008648:	2308      	movs	r3, #8
 800864a:	4013      	ands	r3, r2
 800864c:	d105      	bne.n	800865a <USER_SPI_ioctl+0x2a6>
			st *= 512; ed *= 512;
 800864e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008650:	025b      	lsls	r3, r3, #9
 8008652:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008656:	025b      	lsls	r3, r3, #9
 8008658:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800865a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800865c:	0019      	movs	r1, r3
 800865e:	2020      	movs	r0, #32
 8008660:	f7ff fbff 	bl	8007e62 <send_cmd>
 8008664:	1e03      	subs	r3, r0, #0
 8008666:	d128      	bne.n	80086ba <USER_SPI_ioctl+0x306>
 8008668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866a:	0019      	movs	r1, r3
 800866c:	2021      	movs	r0, #33	@ 0x21
 800866e:	f7ff fbf8 	bl	8007e62 <send_cmd>
 8008672:	1e03      	subs	r3, r0, #0
 8008674:	d121      	bne.n	80086ba <USER_SPI_ioctl+0x306>
 8008676:	2100      	movs	r1, #0
 8008678:	2026      	movs	r0, #38	@ 0x26
 800867a:	f7ff fbf2 	bl	8007e62 <send_cmd>
 800867e:	1e03      	subs	r3, r0, #0
 8008680:	d11b      	bne.n	80086ba <USER_SPI_ioctl+0x306>
 8008682:	4b15      	ldr	r3, [pc, #84]	@ (80086d8 <USER_SPI_ioctl+0x324>)
 8008684:	0018      	movs	r0, r3
 8008686:	f7ff fb2f 	bl	8007ce8 <wait_ready>
 800868a:	1e03      	subs	r3, r0, #0
 800868c:	d015      	beq.n	80086ba <USER_SPI_ioctl+0x306>
			res = RES_OK;	/* FatFs does not check result of this command */
 800868e:	232f      	movs	r3, #47	@ 0x2f
 8008690:	18fb      	adds	r3, r7, r3
 8008692:	2200      	movs	r2, #0
 8008694:	701a      	strb	r2, [r3, #0]
		}
		break;
 8008696:	e010      	b.n	80086ba <USER_SPI_ioctl+0x306>

	default:
		res = RES_PARERR;
 8008698:	232f      	movs	r3, #47	@ 0x2f
 800869a:	18fb      	adds	r3, r7, r3
 800869c:	2204      	movs	r2, #4
 800869e:	701a      	strb	r2, [r3, #0]
 80086a0:	e00c      	b.n	80086bc <USER_SPI_ioctl+0x308>
		break;
 80086a2:	46c0      	nop			@ (mov r8, r8)
 80086a4:	e00a      	b.n	80086bc <USER_SPI_ioctl+0x308>
		break;
 80086a6:	46c0      	nop			@ (mov r8, r8)
 80086a8:	e008      	b.n	80086bc <USER_SPI_ioctl+0x308>
		break;
 80086aa:	46c0      	nop			@ (mov r8, r8)
 80086ac:	e006      	b.n	80086bc <USER_SPI_ioctl+0x308>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80086ae:	46c0      	nop			@ (mov r8, r8)
 80086b0:	e004      	b.n	80086bc <USER_SPI_ioctl+0x308>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80086b2:	46c0      	nop			@ (mov r8, r8)
 80086b4:	e002      	b.n	80086bc <USER_SPI_ioctl+0x308>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80086b6:	46c0      	nop			@ (mov r8, r8)
 80086b8:	e000      	b.n	80086bc <USER_SPI_ioctl+0x308>
		break;
 80086ba:	46c0      	nop			@ (mov r8, r8)
	}

	despiselect();
 80086bc:	f7ff fb3c 	bl	8007d38 <despiselect>

	return res;
 80086c0:	232f      	movs	r3, #47	@ 0x2f
 80086c2:	18fb      	adds	r3, r7, r3
 80086c4:	781b      	ldrb	r3, [r3, #0]
}
 80086c6:	0018      	movs	r0, r3
 80086c8:	46bd      	mov	sp, r7
 80086ca:	b00d      	add	sp, #52	@ 0x34
 80086cc:	bd90      	pop	{r4, r7, pc}
 80086ce:	46c0      	nop			@ (mov r8, r8)
 80086d0:	20000020 	.word	0x20000020
 80086d4:	200004ec 	.word	0x200004ec
 80086d8:	00007530 	.word	0x00007530

080086dc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80086dc:	b5b0      	push	{r4, r5, r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	0002      	movs	r2, r0
 80086e4:	1dfb      	adds	r3, r7, #7
 80086e6:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80086e8:	1dfb      	adds	r3, r7, #7
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	4a0b      	ldr	r2, [pc, #44]	@ (800871c <disk_status+0x40>)
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	18d3      	adds	r3, r2, r3
 80086f2:	3304      	adds	r3, #4
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	1dfa      	adds	r2, r7, #7
 80086fa:	7812      	ldrb	r2, [r2, #0]
 80086fc:	4907      	ldr	r1, [pc, #28]	@ (800871c <disk_status+0x40>)
 80086fe:	188a      	adds	r2, r1, r2
 8008700:	7a12      	ldrb	r2, [r2, #8]
 8008702:	250f      	movs	r5, #15
 8008704:	197c      	adds	r4, r7, r5
 8008706:	0010      	movs	r0, r2
 8008708:	4798      	blx	r3
 800870a:	0003      	movs	r3, r0
 800870c:	7023      	strb	r3, [r4, #0]
  return stat;
 800870e:	197b      	adds	r3, r7, r5
 8008710:	781b      	ldrb	r3, [r3, #0]
}
 8008712:	0018      	movs	r0, r3
 8008714:	46bd      	mov	sp, r7
 8008716:	b004      	add	sp, #16
 8008718:	bdb0      	pop	{r4, r5, r7, pc}
 800871a:	46c0      	nop			@ (mov r8, r8)
 800871c:	20000520 	.word	0x20000520

08008720 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008720:	b590      	push	{r4, r7, lr}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	0002      	movs	r2, r0
 8008728:	1dfb      	adds	r3, r7, #7
 800872a:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 800872c:	200f      	movs	r0, #15
 800872e:	183b      	adds	r3, r7, r0
 8008730:	2200      	movs	r2, #0
 8008732:	701a      	strb	r2, [r3, #0]

  if(disk.is_initialized[pdrv] == 0)
 8008734:	1dfb      	adds	r3, r7, #7
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	4a10      	ldr	r2, [pc, #64]	@ (800877c <disk_initialize+0x5c>)
 800873a:	5cd3      	ldrb	r3, [r2, r3]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d116      	bne.n	800876e <disk_initialize+0x4e>
  {
    disk.is_initialized[pdrv] = 1;
 8008740:	1dfb      	adds	r3, r7, #7
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	4a0d      	ldr	r2, [pc, #52]	@ (800877c <disk_initialize+0x5c>)
 8008746:	2101      	movs	r1, #1
 8008748:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800874a:	1dfb      	adds	r3, r7, #7
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	4a0b      	ldr	r2, [pc, #44]	@ (800877c <disk_initialize+0x5c>)
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	18d3      	adds	r3, r2, r3
 8008754:	3304      	adds	r3, #4
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	1dfa      	adds	r2, r7, #7
 800875c:	7812      	ldrb	r2, [r2, #0]
 800875e:	4907      	ldr	r1, [pc, #28]	@ (800877c <disk_initialize+0x5c>)
 8008760:	188a      	adds	r2, r1, r2
 8008762:	7a12      	ldrb	r2, [r2, #8]
 8008764:	183c      	adds	r4, r7, r0
 8008766:	0010      	movs	r0, r2
 8008768:	4798      	blx	r3
 800876a:	0003      	movs	r3, r0
 800876c:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 800876e:	230f      	movs	r3, #15
 8008770:	18fb      	adds	r3, r7, r3
 8008772:	781b      	ldrb	r3, [r3, #0]
}
 8008774:	0018      	movs	r0, r3
 8008776:	46bd      	mov	sp, r7
 8008778:	b005      	add	sp, #20
 800877a:	bd90      	pop	{r4, r7, pc}
 800877c:	20000520 	.word	0x20000520

08008780 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008782:	b087      	sub	sp, #28
 8008784:	af00      	add	r7, sp, #0
 8008786:	60b9      	str	r1, [r7, #8]
 8008788:	607a      	str	r2, [r7, #4]
 800878a:	603b      	str	r3, [r7, #0]
 800878c:	210f      	movs	r1, #15
 800878e:	187b      	adds	r3, r7, r1
 8008790:	1c02      	adds	r2, r0, #0
 8008792:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008794:	187b      	adds	r3, r7, r1
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	4a0c      	ldr	r2, [pc, #48]	@ (80087cc <disk_read+0x4c>)
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	18d3      	adds	r3, r2, r3
 800879e:	3304      	adds	r3, #4
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	689d      	ldr	r5, [r3, #8]
 80087a4:	187b      	adds	r3, r7, r1
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	4a08      	ldr	r2, [pc, #32]	@ (80087cc <disk_read+0x4c>)
 80087aa:	18d3      	adds	r3, r2, r3
 80087ac:	7a18      	ldrb	r0, [r3, #8]
 80087ae:	2617      	movs	r6, #23
 80087b0:	19bc      	adds	r4, r7, r6
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	68b9      	ldr	r1, [r7, #8]
 80087b8:	47a8      	blx	r5
 80087ba:	0003      	movs	r3, r0
 80087bc:	7023      	strb	r3, [r4, #0]
  return res;
 80087be:	19bb      	adds	r3, r7, r6
 80087c0:	781b      	ldrb	r3, [r3, #0]
}
 80087c2:	0018      	movs	r0, r3
 80087c4:	46bd      	mov	sp, r7
 80087c6:	b007      	add	sp, #28
 80087c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087ca:	46c0      	nop			@ (mov r8, r8)
 80087cc:	20000520 	.word	0x20000520

080087d0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80087d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087d2:	b087      	sub	sp, #28
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60b9      	str	r1, [r7, #8]
 80087d8:	607a      	str	r2, [r7, #4]
 80087da:	603b      	str	r3, [r7, #0]
 80087dc:	210f      	movs	r1, #15
 80087de:	187b      	adds	r3, r7, r1
 80087e0:	1c02      	adds	r2, r0, #0
 80087e2:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80087e4:	187b      	adds	r3, r7, r1
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	4a0c      	ldr	r2, [pc, #48]	@ (800881c <disk_write+0x4c>)
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	18d3      	adds	r3, r2, r3
 80087ee:	3304      	adds	r3, #4
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68dd      	ldr	r5, [r3, #12]
 80087f4:	187b      	adds	r3, r7, r1
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	4a08      	ldr	r2, [pc, #32]	@ (800881c <disk_write+0x4c>)
 80087fa:	18d3      	adds	r3, r2, r3
 80087fc:	7a18      	ldrb	r0, [r3, #8]
 80087fe:	2617      	movs	r6, #23
 8008800:	19bc      	adds	r4, r7, r6
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	68b9      	ldr	r1, [r7, #8]
 8008808:	47a8      	blx	r5
 800880a:	0003      	movs	r3, r0
 800880c:	7023      	strb	r3, [r4, #0]
  return res;
 800880e:	19bb      	adds	r3, r7, r6
 8008810:	781b      	ldrb	r3, [r3, #0]
}
 8008812:	0018      	movs	r0, r3
 8008814:	46bd      	mov	sp, r7
 8008816:	b007      	add	sp, #28
 8008818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800881a:	46c0      	nop			@ (mov r8, r8)
 800881c:	20000520 	.word	0x20000520

08008820 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008822:	b085      	sub	sp, #20
 8008824:	af00      	add	r7, sp, #0
 8008826:	603a      	str	r2, [r7, #0]
 8008828:	1dfb      	adds	r3, r7, #7
 800882a:	1c02      	adds	r2, r0, #0
 800882c:	701a      	strb	r2, [r3, #0]
 800882e:	1dbb      	adds	r3, r7, #6
 8008830:	1c0a      	adds	r2, r1, #0
 8008832:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008834:	1dfb      	adds	r3, r7, #7
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	4a0c      	ldr	r2, [pc, #48]	@ (800886c <disk_ioctl+0x4c>)
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	18d3      	adds	r3, r2, r3
 800883e:	3304      	adds	r3, #4
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	691b      	ldr	r3, [r3, #16]
 8008844:	1dfa      	adds	r2, r7, #7
 8008846:	7812      	ldrb	r2, [r2, #0]
 8008848:	4908      	ldr	r1, [pc, #32]	@ (800886c <disk_ioctl+0x4c>)
 800884a:	188a      	adds	r2, r1, r2
 800884c:	7a10      	ldrb	r0, [r2, #8]
 800884e:	260f      	movs	r6, #15
 8008850:	19bc      	adds	r4, r7, r6
 8008852:	683d      	ldr	r5, [r7, #0]
 8008854:	1dba      	adds	r2, r7, #6
 8008856:	7811      	ldrb	r1, [r2, #0]
 8008858:	002a      	movs	r2, r5
 800885a:	4798      	blx	r3
 800885c:	0003      	movs	r3, r0
 800885e:	7023      	strb	r3, [r4, #0]
  return res;
 8008860:	19bb      	adds	r3, r7, r6
 8008862:	781b      	ldrb	r3, [r3, #0]
}
 8008864:	0018      	movs	r0, r3
 8008866:	46bd      	mov	sp, r7
 8008868:	b005      	add	sp, #20
 800886a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800886c:	20000520 	.word	0x20000520

08008870 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	3301      	adds	r3, #1
 800887c:	781a      	ldrb	r2, [r3, #0]
 800887e:	210e      	movs	r1, #14
 8008880:	187b      	adds	r3, r7, r1
 8008882:	801a      	strh	r2, [r3, #0]
	rv = rv << 8 | ptr[0];
 8008884:	187b      	adds	r3, r7, r1
 8008886:	881b      	ldrh	r3, [r3, #0]
 8008888:	021b      	lsls	r3, r3, #8
 800888a:	b21a      	sxth	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	b21b      	sxth	r3, r3
 8008892:	4313      	orrs	r3, r2
 8008894:	b21a      	sxth	r2, r3
 8008896:	187b      	adds	r3, r7, r1
 8008898:	801a      	strh	r2, [r3, #0]
	return rv;
 800889a:	187b      	adds	r3, r7, r1
 800889c:	881b      	ldrh	r3, [r3, #0]
}
 800889e:	0018      	movs	r0, r3
 80088a0:	46bd      	mov	sp, r7
 80088a2:	b004      	add	sp, #16
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b084      	sub	sp, #16
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	3303      	adds	r3, #3
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	021b      	lsls	r3, r3, #8
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	3202      	adds	r2, #2
 80088be:	7812      	ldrb	r2, [r2, #0]
 80088c0:	4313      	orrs	r3, r2
 80088c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	021b      	lsls	r3, r3, #8
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	3201      	adds	r2, #1
 80088cc:	7812      	ldrb	r2, [r2, #0]
 80088ce:	4313      	orrs	r3, r2
 80088d0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	021b      	lsls	r3, r3, #8
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	7812      	ldrb	r2, [r2, #0]
 80088da:	4313      	orrs	r3, r2
 80088dc:	60fb      	str	r3, [r7, #12]
	return rv;
 80088de:	68fb      	ldr	r3, [r7, #12]
}
 80088e0:	0018      	movs	r0, r3
 80088e2:	46bd      	mov	sp, r7
 80088e4:	b004      	add	sp, #16
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	000a      	movs	r2, r1
 80088f2:	1cbb      	adds	r3, r7, #2
 80088f4:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	1c5a      	adds	r2, r3, #1
 80088fa:	607a      	str	r2, [r7, #4]
 80088fc:	1cba      	adds	r2, r7, #2
 80088fe:	8812      	ldrh	r2, [r2, #0]
 8008900:	b2d2      	uxtb	r2, r2
 8008902:	701a      	strb	r2, [r3, #0]
 8008904:	1cbb      	adds	r3, r7, #2
 8008906:	1cba      	adds	r2, r7, #2
 8008908:	8812      	ldrh	r2, [r2, #0]
 800890a:	0a12      	lsrs	r2, r2, #8
 800890c:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	1c5a      	adds	r2, r3, #1
 8008912:	607a      	str	r2, [r7, #4]
 8008914:	1cba      	adds	r2, r7, #2
 8008916:	8812      	ldrh	r2, [r2, #0]
 8008918:	b2d2      	uxtb	r2, r2
 800891a:	701a      	strb	r2, [r3, #0]
}
 800891c:	46c0      	nop			@ (mov r8, r8)
 800891e:	46bd      	mov	sp, r7
 8008920:	b002      	add	sp, #8
 8008922:	bd80      	pop	{r7, pc}

08008924 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	1c5a      	adds	r2, r3, #1
 8008932:	607a      	str	r2, [r7, #4]
 8008934:	683a      	ldr	r2, [r7, #0]
 8008936:	b2d2      	uxtb	r2, r2
 8008938:	701a      	strb	r2, [r3, #0]
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	0a1b      	lsrs	r3, r3, #8
 800893e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	1c5a      	adds	r2, r3, #1
 8008944:	607a      	str	r2, [r7, #4]
 8008946:	683a      	ldr	r2, [r7, #0]
 8008948:	b2d2      	uxtb	r2, r2
 800894a:	701a      	strb	r2, [r3, #0]
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	0a1b      	lsrs	r3, r3, #8
 8008950:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	1c5a      	adds	r2, r3, #1
 8008956:	607a      	str	r2, [r7, #4]
 8008958:	683a      	ldr	r2, [r7, #0]
 800895a:	b2d2      	uxtb	r2, r2
 800895c:	701a      	strb	r2, [r3, #0]
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	0a1b      	lsrs	r3, r3, #8
 8008962:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	1c5a      	adds	r2, r3, #1
 8008968:	607a      	str	r2, [r7, #4]
 800896a:	683a      	ldr	r2, [r7, #0]
 800896c:	b2d2      	uxtb	r2, r2
 800896e:	701a      	strb	r2, [r3, #0]
}
 8008970:	46c0      	nop			@ (mov r8, r8)
 8008972:	46bd      	mov	sp, r7
 8008974:	b002      	add	sp, #8
 8008976:	bd80      	pop	{r7, pc}

08008978 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008978:	b580      	push	{r7, lr}
 800897a:	b086      	sub	sp, #24
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d00d      	beq.n	80089ae <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008992:	693a      	ldr	r2, [r7, #16]
 8008994:	1c53      	adds	r3, r2, #1
 8008996:	613b      	str	r3, [r7, #16]
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	1c59      	adds	r1, r3, #1
 800899c:	6179      	str	r1, [r7, #20]
 800899e:	7812      	ldrb	r2, [r2, #0]
 80089a0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	3b01      	subs	r3, #1
 80089a6:	607b      	str	r3, [r7, #4]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1f1      	bne.n	8008992 <mem_cpy+0x1a>
	}
}
 80089ae:	46c0      	nop			@ (mov r8, r8)
 80089b0:	46bd      	mov	sp, r7
 80089b2:	b006      	add	sp, #24
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b086      	sub	sp, #24
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	60f8      	str	r0, [r7, #12]
 80089be:	60b9      	str	r1, [r7, #8]
 80089c0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	1c5a      	adds	r2, r3, #1
 80089ca:	617a      	str	r2, [r7, #20]
 80089cc:	68ba      	ldr	r2, [r7, #8]
 80089ce:	b2d2      	uxtb	r2, r2
 80089d0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	3b01      	subs	r3, #1
 80089d6:	607b      	str	r3, [r7, #4]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1f3      	bne.n	80089c6 <mem_set+0x10>
}
 80089de:	46c0      	nop			@ (mov r8, r8)
 80089e0:	46c0      	nop			@ (mov r8, r8)
 80089e2:	46bd      	mov	sp, r7
 80089e4:	b006      	add	sp, #24
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b088      	sub	sp, #32
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	61fb      	str	r3, [r7, #28]
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80089fc:	2300      	movs	r3, #0
 80089fe:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	1c5a      	adds	r2, r3, #1
 8008a04:	61fa      	str	r2, [r7, #28]
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	0019      	movs	r1, r3
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	1c5a      	adds	r2, r3, #1
 8008a0e:	61ba      	str	r2, [r7, #24]
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	1acb      	subs	r3, r1, r3
 8008a14:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	607b      	str	r3, [r7, #4]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d002      	beq.n	8008a28 <mem_cmp+0x40>
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d0eb      	beq.n	8008a00 <mem_cmp+0x18>

	return r;
 8008a28:	697b      	ldr	r3, [r7, #20]
}
 8008a2a:	0018      	movs	r0, r3
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	b008      	add	sp, #32
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b082      	sub	sp, #8
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
 8008a3a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008a3c:	e002      	b.n	8008a44 <chk_chr+0x12>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	3301      	adds	r3, #1
 8008a42:	607b      	str	r3, [r7, #4]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d005      	beq.n	8008a58 <chk_chr+0x26>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	001a      	movs	r2, r3
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d1f2      	bne.n	8008a3e <chk_chr+0xc>
	return *str;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	781b      	ldrb	r3, [r3, #0]
}
 8008a5c:	0018      	movs	r0, r3
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	b002      	add	sp, #8
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008a6e:	2300      	movs	r3, #0
 8008a70:	60bb      	str	r3, [r7, #8]
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	60fb      	str	r3, [r7, #12]
 8008a76:	e027      	b.n	8008ac8 <chk_lock+0x64>
		if (Files[i].fs) {	/* Existing entry */
 8008a78:	4b25      	ldr	r3, [pc, #148]	@ (8008b10 <chk_lock+0xac>)
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	0112      	lsls	r2, r2, #4
 8008a7e:	58d3      	ldr	r3, [r2, r3]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d01c      	beq.n	8008abe <chk_lock+0x5a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008a84:	4b22      	ldr	r3, [pc, #136]	@ (8008b10 <chk_lock+0xac>)
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	0112      	lsls	r2, r2, #4
 8008a8a:	58d2      	ldr	r2, [r2, r3]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d116      	bne.n	8008ac2 <chk_lock+0x5e>
				Files[i].clu == dp->obj.sclust &&
 8008a94:	4a1e      	ldr	r2, [pc, #120]	@ (8008b10 <chk_lock+0xac>)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	011b      	lsls	r3, r3, #4
 8008a9a:	18d3      	adds	r3, r2, r3
 8008a9c:	3304      	adds	r3, #4
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d10c      	bne.n	8008ac2 <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8008aa8:	4a19      	ldr	r2, [pc, #100]	@ (8008b10 <chk_lock+0xac>)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	011b      	lsls	r3, r3, #4
 8008aae:	18d3      	adds	r3, r2, r3
 8008ab0:	3308      	adds	r3, #8
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d102      	bne.n	8008ac2 <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8008abc:	e007      	b.n	8008ace <chk_lock+0x6a>
		} else {			/* Blank entry */
			be = 1;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	60fb      	str	r3, [r7, #12]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d9d4      	bls.n	8008a78 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2b02      	cmp	r3, #2
 8008ad2:	d109      	bne.n	8008ae8 <chk_lock+0x84>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d102      	bne.n	8008ae0 <chk_lock+0x7c>
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d101      	bne.n	8008ae4 <chk_lock+0x80>
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	e011      	b.n	8008b08 <chk_lock+0xa4>
 8008ae4:	2312      	movs	r3, #18
 8008ae6:	e00f      	b.n	8008b08 <chk_lock+0xa4>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d109      	bne.n	8008b02 <chk_lock+0x9e>
 8008aee:	4a08      	ldr	r2, [pc, #32]	@ (8008b10 <chk_lock+0xac>)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	011b      	lsls	r3, r3, #4
 8008af4:	18d3      	adds	r3, r2, r3
 8008af6:	330c      	adds	r3, #12
 8008af8:	881a      	ldrh	r2, [r3, #0]
 8008afa:	2380      	movs	r3, #128	@ 0x80
 8008afc:	005b      	lsls	r3, r3, #1
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d101      	bne.n	8008b06 <chk_lock+0xa2>
 8008b02:	2310      	movs	r3, #16
 8008b04:	e000      	b.n	8008b08 <chk_lock+0xa4>
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	0018      	movs	r0, r3
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	b004      	add	sp, #16
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	20000500 	.word	0x20000500

08008b14 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	607b      	str	r3, [r7, #4]
 8008b1e:	e002      	b.n	8008b26 <enq_lock+0x12>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	3301      	adds	r3, #1
 8008b24:	607b      	str	r3, [r7, #4]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d805      	bhi.n	8008b38 <enq_lock+0x24>
 8008b2c:	4b07      	ldr	r3, [pc, #28]	@ (8008b4c <enq_lock+0x38>)
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	0112      	lsls	r2, r2, #4
 8008b32:	58d3      	ldr	r3, [r2, r3]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d1f3      	bne.n	8008b20 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	3b02      	subs	r3, #2
 8008b3c:	1e5a      	subs	r2, r3, #1
 8008b3e:	4193      	sbcs	r3, r2
 8008b40:	b2db      	uxtb	r3, r3
}
 8008b42:	0018      	movs	r0, r3
 8008b44:	46bd      	mov	sp, r7
 8008b46:	b002      	add	sp, #8
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	46c0      	nop			@ (mov r8, r8)
 8008b4c:	20000500 	.word	0x20000500

08008b50 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	60fb      	str	r3, [r7, #12]
 8008b5e:	e01e      	b.n	8008b9e <inc_lock+0x4e>
		if (Files[i].fs == dp->obj.fs &&
 8008b60:	4b3f      	ldr	r3, [pc, #252]	@ (8008c60 <inc_lock+0x110>)
 8008b62:	68fa      	ldr	r2, [r7, #12]
 8008b64:	0112      	lsls	r2, r2, #4
 8008b66:	58d2      	ldr	r2, [r2, r3]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d113      	bne.n	8008b98 <inc_lock+0x48>
			Files[i].clu == dp->obj.sclust &&
 8008b70:	4a3b      	ldr	r2, [pc, #236]	@ (8008c60 <inc_lock+0x110>)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	011b      	lsls	r3, r3, #4
 8008b76:	18d3      	adds	r3, r2, r3
 8008b78:	3304      	adds	r3, #4
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d109      	bne.n	8008b98 <inc_lock+0x48>
			Files[i].ofs == dp->dptr) break;
 8008b84:	4a36      	ldr	r2, [pc, #216]	@ (8008c60 <inc_lock+0x110>)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	011b      	lsls	r3, r3, #4
 8008b8a:	18d3      	adds	r3, r2, r3
 8008b8c:	3308      	adds	r3, #8
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d006      	beq.n	8008ba6 <inc_lock+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	60fb      	str	r3, [r7, #12]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d9dd      	bls.n	8008b60 <inc_lock+0x10>
 8008ba4:	e000      	b.n	8008ba8 <inc_lock+0x58>
			Files[i].ofs == dp->dptr) break;
 8008ba6:	46c0      	nop			@ (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	d130      	bne.n	8008c10 <inc_lock+0xc0>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	60fb      	str	r3, [r7, #12]
 8008bb2:	e002      	b.n	8008bba <inc_lock+0x6a>
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	60fb      	str	r3, [r7, #12]
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d805      	bhi.n	8008bcc <inc_lock+0x7c>
 8008bc0:	4b27      	ldr	r3, [pc, #156]	@ (8008c60 <inc_lock+0x110>)
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	0112      	lsls	r2, r2, #4
 8008bc6:	58d3      	ldr	r3, [r2, r3]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d1f3      	bne.n	8008bb4 <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	d101      	bne.n	8008bd6 <inc_lock+0x86>
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	e03f      	b.n	8008c56 <inc_lock+0x106>
		Files[i].fs = dp->obj.fs;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6819      	ldr	r1, [r3, #0]
 8008bda:	4b21      	ldr	r3, [pc, #132]	@ (8008c60 <inc_lock+0x110>)
 8008bdc:	68fa      	ldr	r2, [r7, #12]
 8008bde:	0112      	lsls	r2, r2, #4
 8008be0:	50d1      	str	r1, [r2, r3]
		Files[i].clu = dp->obj.sclust;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	689a      	ldr	r2, [r3, #8]
 8008be6:	491e      	ldr	r1, [pc, #120]	@ (8008c60 <inc_lock+0x110>)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	011b      	lsls	r3, r3, #4
 8008bec:	18cb      	adds	r3, r1, r3
 8008bee:	3304      	adds	r3, #4
 8008bf0:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	695a      	ldr	r2, [r3, #20]
 8008bf6:	491a      	ldr	r1, [pc, #104]	@ (8008c60 <inc_lock+0x110>)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	011b      	lsls	r3, r3, #4
 8008bfc:	18cb      	adds	r3, r1, r3
 8008bfe:	3308      	adds	r3, #8
 8008c00:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008c02:	4a17      	ldr	r2, [pc, #92]	@ (8008c60 <inc_lock+0x110>)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	011b      	lsls	r3, r3, #4
 8008c08:	18d3      	adds	r3, r2, r3
 8008c0a:	330c      	adds	r3, #12
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d009      	beq.n	8008c2a <inc_lock+0xda>
 8008c16:	4a12      	ldr	r2, [pc, #72]	@ (8008c60 <inc_lock+0x110>)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	011b      	lsls	r3, r3, #4
 8008c1c:	18d3      	adds	r3, r2, r3
 8008c1e:	330c      	adds	r3, #12
 8008c20:	881b      	ldrh	r3, [r3, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d001      	beq.n	8008c2a <inc_lock+0xda>
 8008c26:	2300      	movs	r3, #0
 8008c28:	e015      	b.n	8008c56 <inc_lock+0x106>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d108      	bne.n	8008c42 <inc_lock+0xf2>
 8008c30:	4a0b      	ldr	r2, [pc, #44]	@ (8008c60 <inc_lock+0x110>)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	011b      	lsls	r3, r3, #4
 8008c36:	18d3      	adds	r3, r2, r3
 8008c38:	330c      	adds	r3, #12
 8008c3a:	881b      	ldrh	r3, [r3, #0]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	e001      	b.n	8008c46 <inc_lock+0xf6>
 8008c42:	2380      	movs	r3, #128	@ 0x80
 8008c44:	005b      	lsls	r3, r3, #1
 8008c46:	4906      	ldr	r1, [pc, #24]	@ (8008c60 <inc_lock+0x110>)
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	0112      	lsls	r2, r2, #4
 8008c4c:	188a      	adds	r2, r1, r2
 8008c4e:	320c      	adds	r2, #12
 8008c50:	8013      	strh	r3, [r2, #0]

	return i + 1;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	3301      	adds	r3, #1
}
 8008c56:	0018      	movs	r0, r3
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	b004      	add	sp, #16
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	46c0      	nop			@ (mov r8, r8)
 8008c60:	20000500 	.word	0x20000500

08008c64 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	607b      	str	r3, [r7, #4]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d832      	bhi.n	8008cde <dec_lock+0x7a>
		n = Files[i].ctr;
 8008c78:	200e      	movs	r0, #14
 8008c7a:	183b      	adds	r3, r7, r0
 8008c7c:	491d      	ldr	r1, [pc, #116]	@ (8008cf4 <dec_lock+0x90>)
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	0112      	lsls	r2, r2, #4
 8008c82:	188a      	adds	r2, r1, r2
 8008c84:	320c      	adds	r2, #12
 8008c86:	8812      	ldrh	r2, [r2, #0]
 8008c88:	801a      	strh	r2, [r3, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008c8a:	183b      	adds	r3, r7, r0
 8008c8c:	881a      	ldrh	r2, [r3, #0]
 8008c8e:	2380      	movs	r3, #128	@ 0x80
 8008c90:	005b      	lsls	r3, r3, #1
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d102      	bne.n	8008c9c <dec_lock+0x38>
 8008c96:	183b      	adds	r3, r7, r0
 8008c98:	2200      	movs	r2, #0
 8008c9a:	801a      	strh	r2, [r3, #0]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008c9c:	210e      	movs	r1, #14
 8008c9e:	187b      	adds	r3, r7, r1
 8008ca0:	881b      	ldrh	r3, [r3, #0]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d004      	beq.n	8008cb0 <dec_lock+0x4c>
 8008ca6:	187b      	adds	r3, r7, r1
 8008ca8:	881a      	ldrh	r2, [r3, #0]
 8008caa:	187b      	adds	r3, r7, r1
 8008cac:	3a01      	subs	r2, #1
 8008cae:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 8008cb0:	4a10      	ldr	r2, [pc, #64]	@ (8008cf4 <dec_lock+0x90>)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	011b      	lsls	r3, r3, #4
 8008cb6:	18d3      	adds	r3, r2, r3
 8008cb8:	330c      	adds	r3, #12
 8008cba:	210e      	movs	r1, #14
 8008cbc:	187a      	adds	r2, r7, r1
 8008cbe:	8812      	ldrh	r2, [r2, #0]
 8008cc0:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008cc2:	187b      	adds	r3, r7, r1
 8008cc4:	881b      	ldrh	r3, [r3, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d104      	bne.n	8008cd4 <dec_lock+0x70>
 8008cca:	4b0a      	ldr	r3, [pc, #40]	@ (8008cf4 <dec_lock+0x90>)
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	0112      	lsls	r2, r2, #4
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	50d1      	str	r1, [r2, r3]
		res = FR_OK;
 8008cd4:	230d      	movs	r3, #13
 8008cd6:	18fb      	adds	r3, r7, r3
 8008cd8:	2200      	movs	r2, #0
 8008cda:	701a      	strb	r2, [r3, #0]
 8008cdc:	e003      	b.n	8008ce6 <dec_lock+0x82>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008cde:	230d      	movs	r3, #13
 8008ce0:	18fb      	adds	r3, r7, r3
 8008ce2:	2202      	movs	r2, #2
 8008ce4:	701a      	strb	r2, [r3, #0]
	}
	return res;
 8008ce6:	230d      	movs	r3, #13
 8008ce8:	18fb      	adds	r3, r7, r3
 8008cea:	781b      	ldrb	r3, [r3, #0]
}
 8008cec:	0018      	movs	r0, r3
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	b004      	add	sp, #16
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	20000500 	.word	0x20000500

08008cf8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008d00:	2300      	movs	r3, #0
 8008d02:	60fb      	str	r3, [r7, #12]
 8008d04:	e00e      	b.n	8008d24 <clear_lock+0x2c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008d06:	4b0b      	ldr	r3, [pc, #44]	@ (8008d34 <clear_lock+0x3c>)
 8008d08:	68fa      	ldr	r2, [r7, #12]
 8008d0a:	0112      	lsls	r2, r2, #4
 8008d0c:	58d3      	ldr	r3, [r2, r3]
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d104      	bne.n	8008d1e <clear_lock+0x26>
 8008d14:	4b07      	ldr	r3, [pc, #28]	@ (8008d34 <clear_lock+0x3c>)
 8008d16:	68fa      	ldr	r2, [r7, #12]
 8008d18:	0112      	lsls	r2, r2, #4
 8008d1a:	2100      	movs	r1, #0
 8008d1c:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < _FS_LOCK; i++) {
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	3301      	adds	r3, #1
 8008d22:	60fb      	str	r3, [r7, #12]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d9ed      	bls.n	8008d06 <clear_lock+0xe>
	}
}
 8008d2a:	46c0      	nop			@ (mov r8, r8)
 8008d2c:	46c0      	nop			@ (mov r8, r8)
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	b004      	add	sp, #16
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	20000500 	.word	0x20000500

08008d38 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008d38:	b590      	push	{r4, r7, lr}
 8008d3a:	b087      	sub	sp, #28
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008d40:	240f      	movs	r4, #15
 8008d42:	193b      	adds	r3, r7, r4
 8008d44:	2200      	movs	r2, #0
 8008d46:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	78db      	ldrb	r3, [r3, #3]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d034      	beq.n	8008dba <sync_window+0x82>
		wsect = fs->winsect;	/* Current sector number */
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d54:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	7858      	ldrb	r0, [r3, #1]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	3330      	adds	r3, #48	@ 0x30
 8008d5e:	0019      	movs	r1, r3
 8008d60:	697a      	ldr	r2, [r7, #20]
 8008d62:	2301      	movs	r3, #1
 8008d64:	f7ff fd34 	bl	80087d0 <disk_write>
 8008d68:	1e03      	subs	r3, r0, #0
 8008d6a:	d003      	beq.n	8008d74 <sync_window+0x3c>
			res = FR_DISK_ERR;
 8008d6c:	193b      	adds	r3, r7, r4
 8008d6e:	2201      	movs	r2, #1
 8008d70:	701a      	strb	r2, [r3, #0]
 8008d72:	e022      	b.n	8008dba <sync_window+0x82>
		} else {
			fs->wflag = 0;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2200      	movs	r2, #0
 8008d78:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a1b      	ldr	r3, [r3, #32]
 8008d7e:	697a      	ldr	r2, [r7, #20]
 8008d80:	1ad2      	subs	r2, r2, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	699b      	ldr	r3, [r3, #24]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d217      	bcs.n	8008dba <sync_window+0x82>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	789b      	ldrb	r3, [r3, #2]
 8008d8e:	613b      	str	r3, [r7, #16]
 8008d90:	e010      	b.n	8008db4 <sync_window+0x7c>
					wsect += fs->fsize;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	699b      	ldr	r3, [r3, #24]
 8008d96:	697a      	ldr	r2, [r7, #20]
 8008d98:	18d3      	adds	r3, r2, r3
 8008d9a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	7858      	ldrb	r0, [r3, #1]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	3330      	adds	r3, #48	@ 0x30
 8008da4:	0019      	movs	r1, r3
 8008da6:	697a      	ldr	r2, [r7, #20]
 8008da8:	2301      	movs	r3, #1
 8008daa:	f7ff fd11 	bl	80087d0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	3b01      	subs	r3, #1
 8008db2:	613b      	str	r3, [r7, #16]
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d8eb      	bhi.n	8008d92 <sync_window+0x5a>
				}
			}
		}
	}
	return res;
 8008dba:	230f      	movs	r3, #15
 8008dbc:	18fb      	adds	r3, r7, r3
 8008dbe:	781b      	ldrb	r3, [r3, #0]
}
 8008dc0:	0018      	movs	r0, r3
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	b007      	add	sp, #28
 8008dc6:	bd90      	pop	{r4, r7, pc}

08008dc8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008dc8:	b5b0      	push	{r4, r5, r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008dd2:	250f      	movs	r5, #15
 8008dd4:	197b      	adds	r3, r7, r5
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dde:	683a      	ldr	r2, [r7, #0]
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d01f      	beq.n	8008e24 <move_window+0x5c>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008de4:	197c      	adds	r4, r7, r5
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	0018      	movs	r0, r3
 8008dea:	f7ff ffa5 	bl	8008d38 <sync_window>
 8008dee:	0003      	movs	r3, r0
 8008df0:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008df2:	002c      	movs	r4, r5
 8008df4:	193b      	adds	r3, r7, r4
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d113      	bne.n	8008e24 <move_window+0x5c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	7858      	ldrb	r0, [r3, #1]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	3330      	adds	r3, #48	@ 0x30
 8008e04:	0019      	movs	r1, r3
 8008e06:	683a      	ldr	r2, [r7, #0]
 8008e08:	2301      	movs	r3, #1
 8008e0a:	f7ff fcb9 	bl	8008780 <disk_read>
 8008e0e:	1e03      	subs	r3, r0, #0
 8008e10:	d005      	beq.n	8008e1e <move_window+0x56>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008e12:	2301      	movs	r3, #1
 8008e14:	425b      	negs	r3, r3
 8008e16:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008e18:	193b      	adds	r3, r7, r4
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	683a      	ldr	r2, [r7, #0]
 8008e22:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8008e24:	230f      	movs	r3, #15
 8008e26:	18fb      	adds	r3, r7, r3
 8008e28:	781b      	ldrb	r3, [r3, #0]
}
 8008e2a:	0018      	movs	r0, r3
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	b004      	add	sp, #16
 8008e30:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008e34 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008e34:	b5b0      	push	{r4, r5, r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008e3c:	250f      	movs	r5, #15
 8008e3e:	197c      	adds	r4, r7, r5
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	0018      	movs	r0, r3
 8008e44:	f7ff ff78 	bl	8008d38 <sync_window>
 8008e48:	0003      	movs	r3, r0
 8008e4a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8008e4c:	197b      	adds	r3, r7, r5
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d15d      	bne.n	8008f10 <sync_fs+0xdc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	2b03      	cmp	r3, #3
 8008e5a:	d14c      	bne.n	8008ef6 <sync_fs+0xc2>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	791b      	ldrb	r3, [r3, #4]
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d148      	bne.n	8008ef6 <sync_fs+0xc2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	3330      	adds	r3, #48	@ 0x30
 8008e68:	2280      	movs	r2, #128	@ 0x80
 8008e6a:	0092      	lsls	r2, r2, #2
 8008e6c:	2100      	movs	r1, #0
 8008e6e:	0018      	movs	r0, r3
 8008e70:	f7ff fda1 	bl	80089b6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	3330      	adds	r3, #48	@ 0x30
 8008e78:	33ff      	adds	r3, #255	@ 0xff
 8008e7a:	33ff      	adds	r3, #255	@ 0xff
 8008e7c:	4a28      	ldr	r2, [pc, #160]	@ (8008f20 <sync_fs+0xec>)
 8008e7e:	0011      	movs	r1, r2
 8008e80:	0018      	movs	r0, r3
 8008e82:	f7ff fd31 	bl	80088e8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	3330      	adds	r3, #48	@ 0x30
 8008e8a:	4a26      	ldr	r2, [pc, #152]	@ (8008f24 <sync_fs+0xf0>)
 8008e8c:	0011      	movs	r1, r2
 8008e8e:	0018      	movs	r0, r3
 8008e90:	f7ff fd48 	bl	8008924 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	3330      	adds	r3, #48	@ 0x30
 8008e98:	33e5      	adds	r3, #229	@ 0xe5
 8008e9a:	33ff      	adds	r3, #255	@ 0xff
 8008e9c:	4a22      	ldr	r2, [pc, #136]	@ (8008f28 <sync_fs+0xf4>)
 8008e9e:	0011      	movs	r1, r2
 8008ea0:	0018      	movs	r0, r3
 8008ea2:	f7ff fd3f 	bl	8008924 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	3330      	adds	r3, #48	@ 0x30
 8008eaa:	33e9      	adds	r3, #233	@ 0xe9
 8008eac:	33ff      	adds	r3, #255	@ 0xff
 8008eae:	001a      	movs	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	0019      	movs	r1, r3
 8008eb6:	0010      	movs	r0, r2
 8008eb8:	f7ff fd34 	bl	8008924 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	3330      	adds	r3, #48	@ 0x30
 8008ec0:	33ed      	adds	r3, #237	@ 0xed
 8008ec2:	33ff      	adds	r3, #255	@ 0xff
 8008ec4:	001a      	movs	r2, r3
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	68db      	ldr	r3, [r3, #12]
 8008eca:	0019      	movs	r1, r3
 8008ecc:	0010      	movs	r0, r2
 8008ece:	f7ff fd29 	bl	8008924 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	69db      	ldr	r3, [r3, #28]
 8008ed6:	1c5a      	adds	r2, r3, #1
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	7858      	ldrb	r0, [r3, #1]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	3330      	adds	r3, #48	@ 0x30
 8008ee4:	0019      	movs	r1, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008eea:	2301      	movs	r3, #1
 8008eec:	f7ff fc70 	bl	80087d0 <disk_write>
			fs->fsi_flag = 0;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	785b      	ldrb	r3, [r3, #1]
 8008efa:	2200      	movs	r2, #0
 8008efc:	2100      	movs	r1, #0
 8008efe:	0018      	movs	r0, r3
 8008f00:	f7ff fc8e 	bl	8008820 <disk_ioctl>
 8008f04:	1e03      	subs	r3, r0, #0
 8008f06:	d003      	beq.n	8008f10 <sync_fs+0xdc>
 8008f08:	230f      	movs	r3, #15
 8008f0a:	18fb      	adds	r3, r7, r3
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	701a      	strb	r2, [r3, #0]
	}

	return res;
 8008f10:	230f      	movs	r3, #15
 8008f12:	18fb      	adds	r3, r7, r3
 8008f14:	781b      	ldrb	r3, [r3, #0]
}
 8008f16:	0018      	movs	r0, r3
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	b004      	add	sp, #16
 8008f1c:	bdb0      	pop	{r4, r5, r7, pc}
 8008f1e:	46c0      	nop			@ (mov r8, r8)
 8008f20:	0000aa55 	.word	0x0000aa55
 8008f24:	41615252 	.word	0x41615252
 8008f28:	61417272 	.word	0x61417272

08008f2c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	3b02      	subs	r3, #2
 8008f3a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	695b      	ldr	r3, [r3, #20]
 8008f40:	3b02      	subs	r3, #2
 8008f42:	683a      	ldr	r2, [r7, #0]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d301      	bcc.n	8008f4c <clust2sect+0x20>
 8008f48:	2300      	movs	r3, #0
 8008f4a:	e007      	b.n	8008f5c <clust2sect+0x30>
	return clst * fs->csize + fs->database;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	895b      	ldrh	r3, [r3, #10]
 8008f50:	001a      	movs	r2, r3
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	435a      	muls	r2, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f5a:	18d3      	adds	r3, r2, r3
}
 8008f5c:	0018      	movs	r0, r3
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	b002      	add	sp, #8
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b086      	sub	sp, #24
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d904      	bls.n	8008f84 <get_fat+0x20>
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	695b      	ldr	r3, [r3, #20]
 8008f7e:	683a      	ldr	r2, [r7, #0]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d302      	bcc.n	8008f8a <get_fat+0x26>
		val = 1;	/* Internal error */
 8008f84:	2301      	movs	r3, #1
 8008f86:	617b      	str	r3, [r7, #20]
 8008f88:	e091      	b.n	80090ae <get_fat+0x14a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	425b      	negs	r3, r3
 8008f8e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	2b03      	cmp	r3, #3
 8008f96:	d063      	beq.n	8009060 <get_fat+0xfc>
 8008f98:	dd00      	ble.n	8008f9c <get_fat+0x38>
 8008f9a:	e07e      	b.n	800909a <get_fat+0x136>
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d002      	beq.n	8008fa6 <get_fat+0x42>
 8008fa0:	2b02      	cmp	r3, #2
 8008fa2:	d042      	beq.n	800902a <get_fat+0xc6>
 8008fa4:	e079      	b.n	800909a <get_fat+0x136>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	60fb      	str	r3, [r7, #12]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	085b      	lsrs	r3, r3, #1
 8008fae:	68fa      	ldr	r2, [r7, #12]
 8008fb0:	18d3      	adds	r3, r2, r3
 8008fb2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	6a1a      	ldr	r2, [r3, #32]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	0a5b      	lsrs	r3, r3, #9
 8008fbc:	18d2      	adds	r2, r2, r3
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	0011      	movs	r1, r2
 8008fc2:	0018      	movs	r0, r3
 8008fc4:	f7ff ff00 	bl	8008dc8 <move_window>
 8008fc8:	1e03      	subs	r3, r0, #0
 8008fca:	d169      	bne.n	80090a0 <get_fat+0x13c>
			wc = fs->win[bc++ % SS(fs)];
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	1c5a      	adds	r2, r3, #1
 8008fd0:	60fa      	str	r2, [r7, #12]
 8008fd2:	05db      	lsls	r3, r3, #23
 8008fd4:	0ddb      	lsrs	r3, r3, #23
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	2130      	movs	r1, #48	@ 0x30
 8008fda:	18d3      	adds	r3, r2, r3
 8008fdc:	185b      	adds	r3, r3, r1
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	6a1a      	ldr	r2, [r3, #32]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	0a5b      	lsrs	r3, r3, #9
 8008fea:	18d2      	adds	r2, r2, r3
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	0011      	movs	r1, r2
 8008ff0:	0018      	movs	r0, r3
 8008ff2:	f7ff fee9 	bl	8008dc8 <move_window>
 8008ff6:	1e03      	subs	r3, r0, #0
 8008ff8:	d154      	bne.n	80090a4 <get_fat+0x140>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	05db      	lsls	r3, r3, #23
 8008ffe:	0ddb      	lsrs	r3, r3, #23
 8009000:	693a      	ldr	r2, [r7, #16]
 8009002:	2130      	movs	r1, #48	@ 0x30
 8009004:	18d3      	adds	r3, r2, r3
 8009006:	185b      	adds	r3, r3, r1
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	021b      	lsls	r3, r3, #8
 800900c:	68ba      	ldr	r2, [r7, #8]
 800900e:	4313      	orrs	r3, r2
 8009010:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	2201      	movs	r2, #1
 8009016:	4013      	ands	r3, r2
 8009018:	d002      	beq.n	8009020 <get_fat+0xbc>
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	091b      	lsrs	r3, r3, #4
 800901e:	e002      	b.n	8009026 <get_fat+0xc2>
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	051b      	lsls	r3, r3, #20
 8009024:	0d1b      	lsrs	r3, r3, #20
 8009026:	617b      	str	r3, [r7, #20]
			break;
 8009028:	e041      	b.n	80090ae <get_fat+0x14a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	6a1a      	ldr	r2, [r3, #32]
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	0a1b      	lsrs	r3, r3, #8
 8009032:	18d2      	adds	r2, r2, r3
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	0011      	movs	r1, r2
 8009038:	0018      	movs	r0, r3
 800903a:	f7ff fec5 	bl	8008dc8 <move_window>
 800903e:	1e03      	subs	r3, r0, #0
 8009040:	d132      	bne.n	80090a8 <get_fat+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	3330      	adds	r3, #48	@ 0x30
 8009046:	001a      	movs	r2, r3
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	0059      	lsls	r1, r3, #1
 800904c:	23ff      	movs	r3, #255	@ 0xff
 800904e:	005b      	lsls	r3, r3, #1
 8009050:	400b      	ands	r3, r1
 8009052:	18d3      	adds	r3, r2, r3
 8009054:	0018      	movs	r0, r3
 8009056:	f7ff fc0b 	bl	8008870 <ld_word>
 800905a:	0003      	movs	r3, r0
 800905c:	617b      	str	r3, [r7, #20]
			break;
 800905e:	e026      	b.n	80090ae <get_fat+0x14a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	6a1a      	ldr	r2, [r3, #32]
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	09db      	lsrs	r3, r3, #7
 8009068:	18d2      	adds	r2, r2, r3
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	0011      	movs	r1, r2
 800906e:	0018      	movs	r0, r3
 8009070:	f7ff feaa 	bl	8008dc8 <move_window>
 8009074:	1e03      	subs	r3, r0, #0
 8009076:	d119      	bne.n	80090ac <get_fat+0x148>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	3330      	adds	r3, #48	@ 0x30
 800907c:	001a      	movs	r2, r3
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	0099      	lsls	r1, r3, #2
 8009082:	23fe      	movs	r3, #254	@ 0xfe
 8009084:	005b      	lsls	r3, r3, #1
 8009086:	400b      	ands	r3, r1
 8009088:	18d3      	adds	r3, r2, r3
 800908a:	0018      	movs	r0, r3
 800908c:	f7ff fc0b 	bl	80088a6 <ld_dword>
 8009090:	0003      	movs	r3, r0
 8009092:	011b      	lsls	r3, r3, #4
 8009094:	091b      	lsrs	r3, r3, #4
 8009096:	617b      	str	r3, [r7, #20]
			break;
 8009098:	e009      	b.n	80090ae <get_fat+0x14a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800909a:	2301      	movs	r3, #1
 800909c:	617b      	str	r3, [r7, #20]
 800909e:	e006      	b.n	80090ae <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80090a0:	46c0      	nop			@ (mov r8, r8)
 80090a2:	e004      	b.n	80090ae <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80090a4:	46c0      	nop			@ (mov r8, r8)
 80090a6:	e002      	b.n	80090ae <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80090a8:	46c0      	nop			@ (mov r8, r8)
 80090aa:	e000      	b.n	80090ae <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80090ac:	46c0      	nop			@ (mov r8, r8)
		}
	}

	return val;
 80090ae:	697b      	ldr	r3, [r7, #20]
}
 80090b0:	0018      	movs	r0, r3
 80090b2:	46bd      	mov	sp, r7
 80090b4:	b006      	add	sp, #24
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80090b8:	b5b0      	push	{r4, r5, r7, lr}
 80090ba:	b088      	sub	sp, #32
 80090bc:	af00      	add	r7, sp, #0
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80090c4:	231f      	movs	r3, #31
 80090c6:	18fb      	adds	r3, r7, r3
 80090c8:	2202      	movs	r2, #2
 80090ca:	701a      	strb	r2, [r3, #0]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d800      	bhi.n	80090d4 <put_fat+0x1c>
 80090d2:	e0eb      	b.n	80092ac <put_fat+0x1f4>
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	695b      	ldr	r3, [r3, #20]
 80090d8:	68ba      	ldr	r2, [r7, #8]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d300      	bcc.n	80090e0 <put_fat+0x28>
 80090de:	e0e5      	b.n	80092ac <put_fat+0x1f4>
		switch (fs->fs_type) {
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	2b03      	cmp	r3, #3
 80090e6:	d100      	bne.n	80090ea <put_fat+0x32>
 80090e8:	e0a1      	b.n	800922e <put_fat+0x176>
 80090ea:	dd00      	ble.n	80090ee <put_fat+0x36>
 80090ec:	e0de      	b.n	80092ac <put_fat+0x1f4>
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d003      	beq.n	80090fa <put_fat+0x42>
 80090f2:	2b02      	cmp	r3, #2
 80090f4:	d100      	bne.n	80090f8 <put_fat+0x40>
 80090f6:	e075      	b.n	80091e4 <put_fat+0x12c>
 80090f8:	e0d8      	b.n	80092ac <put_fat+0x1f4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	61bb      	str	r3, [r7, #24]
 80090fe:	69bb      	ldr	r3, [r7, #24]
 8009100:	085b      	lsrs	r3, r3, #1
 8009102:	69ba      	ldr	r2, [r7, #24]
 8009104:	18d3      	adds	r3, r2, r3
 8009106:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6a1a      	ldr	r2, [r3, #32]
 800910c:	69bb      	ldr	r3, [r7, #24]
 800910e:	0a5b      	lsrs	r3, r3, #9
 8009110:	18d2      	adds	r2, r2, r3
 8009112:	251f      	movs	r5, #31
 8009114:	197c      	adds	r4, r7, r5
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	0011      	movs	r1, r2
 800911a:	0018      	movs	r0, r3
 800911c:	f7ff fe54 	bl	8008dc8 <move_window>
 8009120:	0003      	movs	r3, r0
 8009122:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8009124:	197b      	adds	r3, r7, r5
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d000      	beq.n	800912e <put_fat+0x76>
 800912c:	e0b7      	b.n	800929e <put_fat+0x1e6>
			p = fs->win + bc++ % SS(fs);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	3330      	adds	r3, #48	@ 0x30
 8009132:	001a      	movs	r2, r3
 8009134:	69bb      	ldr	r3, [r7, #24]
 8009136:	1c59      	adds	r1, r3, #1
 8009138:	61b9      	str	r1, [r7, #24]
 800913a:	05db      	lsls	r3, r3, #23
 800913c:	0ddb      	lsrs	r3, r3, #23
 800913e:	18d3      	adds	r3, r2, r3
 8009140:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	2201      	movs	r2, #1
 8009146:	4013      	ands	r3, r2
 8009148:	d00d      	beq.n	8009166 <put_fat+0xae>
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	b25b      	sxtb	r3, r3
 8009150:	220f      	movs	r2, #15
 8009152:	4013      	ands	r3, r2
 8009154:	b25a      	sxtb	r2, r3
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	b2db      	uxtb	r3, r3
 800915a:	011b      	lsls	r3, r3, #4
 800915c:	b25b      	sxtb	r3, r3
 800915e:	4313      	orrs	r3, r2
 8009160:	b25b      	sxtb	r3, r3
 8009162:	b2db      	uxtb	r3, r3
 8009164:	e001      	b.n	800916a <put_fat+0xb2>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	b2db      	uxtb	r3, r3
 800916a:	697a      	ldr	r2, [r7, #20]
 800916c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2201      	movs	r2, #1
 8009172:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6a1a      	ldr	r2, [r3, #32]
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	0a5b      	lsrs	r3, r3, #9
 800917c:	18d2      	adds	r2, r2, r3
 800917e:	251f      	movs	r5, #31
 8009180:	197c      	adds	r4, r7, r5
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	0011      	movs	r1, r2
 8009186:	0018      	movs	r0, r3
 8009188:	f7ff fe1e 	bl	8008dc8 <move_window>
 800918c:	0003      	movs	r3, r0
 800918e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8009190:	197b      	adds	r3, r7, r5
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d000      	beq.n	800919a <put_fat+0xe2>
 8009198:	e083      	b.n	80092a2 <put_fat+0x1ea>
			p = fs->win + bc % SS(fs);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	3330      	adds	r3, #48	@ 0x30
 800919e:	001a      	movs	r2, r3
 80091a0:	69bb      	ldr	r3, [r7, #24]
 80091a2:	05db      	lsls	r3, r3, #23
 80091a4:	0ddb      	lsrs	r3, r3, #23
 80091a6:	18d3      	adds	r3, r2, r3
 80091a8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	2201      	movs	r2, #1
 80091ae:	4013      	ands	r3, r2
 80091b0:	d003      	beq.n	80091ba <put_fat+0x102>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	091b      	lsrs	r3, r3, #4
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	e00e      	b.n	80091d8 <put_fat+0x120>
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	b25b      	sxtb	r3, r3
 80091c0:	220f      	movs	r2, #15
 80091c2:	4393      	bics	r3, r2
 80091c4:	b25a      	sxtb	r2, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	0a1b      	lsrs	r3, r3, #8
 80091ca:	b25b      	sxtb	r3, r3
 80091cc:	210f      	movs	r1, #15
 80091ce:	400b      	ands	r3, r1
 80091d0:	b25b      	sxtb	r3, r3
 80091d2:	4313      	orrs	r3, r2
 80091d4:	b25b      	sxtb	r3, r3
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	697a      	ldr	r2, [r7, #20]
 80091da:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2201      	movs	r2, #1
 80091e0:	70da      	strb	r2, [r3, #3]
			break;
 80091e2:	e063      	b.n	80092ac <put_fat+0x1f4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6a1a      	ldr	r2, [r3, #32]
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	0a1b      	lsrs	r3, r3, #8
 80091ec:	18d2      	adds	r2, r2, r3
 80091ee:	251f      	movs	r5, #31
 80091f0:	197c      	adds	r4, r7, r5
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	0011      	movs	r1, r2
 80091f6:	0018      	movs	r0, r3
 80091f8:	f7ff fde6 	bl	8008dc8 <move_window>
 80091fc:	0003      	movs	r3, r0
 80091fe:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8009200:	197b      	adds	r3, r7, r5
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d14e      	bne.n	80092a6 <put_fat+0x1ee>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	3330      	adds	r3, #48	@ 0x30
 800920c:	001a      	movs	r2, r3
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	0059      	lsls	r1, r3, #1
 8009212:	23ff      	movs	r3, #255	@ 0xff
 8009214:	005b      	lsls	r3, r3, #1
 8009216:	400b      	ands	r3, r1
 8009218:	18d3      	adds	r3, r2, r3
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	b292      	uxth	r2, r2
 800921e:	0011      	movs	r1, r2
 8009220:	0018      	movs	r0, r3
 8009222:	f7ff fb61 	bl	80088e8 <st_word>
			fs->wflag = 1;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2201      	movs	r2, #1
 800922a:	70da      	strb	r2, [r3, #3]
			break;
 800922c:	e03e      	b.n	80092ac <put_fat+0x1f4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6a1a      	ldr	r2, [r3, #32]
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	09db      	lsrs	r3, r3, #7
 8009236:	18d2      	adds	r2, r2, r3
 8009238:	251f      	movs	r5, #31
 800923a:	197c      	adds	r4, r7, r5
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	0011      	movs	r1, r2
 8009240:	0018      	movs	r0, r3
 8009242:	f7ff fdc1 	bl	8008dc8 <move_window>
 8009246:	0003      	movs	r3, r0
 8009248:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800924a:	197b      	adds	r3, r7, r5
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d12b      	bne.n	80092aa <put_fat+0x1f2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	011b      	lsls	r3, r3, #4
 8009256:	091c      	lsrs	r4, r3, #4
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	3330      	adds	r3, #48	@ 0x30
 800925c:	001a      	movs	r2, r3
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	0099      	lsls	r1, r3, #2
 8009262:	23fe      	movs	r3, #254	@ 0xfe
 8009264:	005b      	lsls	r3, r3, #1
 8009266:	400b      	ands	r3, r1
 8009268:	18d3      	adds	r3, r2, r3
 800926a:	0018      	movs	r0, r3
 800926c:	f7ff fb1b 	bl	80088a6 <ld_dword>
 8009270:	0003      	movs	r3, r0
 8009272:	0f1b      	lsrs	r3, r3, #28
 8009274:	071b      	lsls	r3, r3, #28
 8009276:	4323      	orrs	r3, r4
 8009278:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	3330      	adds	r3, #48	@ 0x30
 800927e:	001a      	movs	r2, r3
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	0099      	lsls	r1, r3, #2
 8009284:	23fe      	movs	r3, #254	@ 0xfe
 8009286:	005b      	lsls	r3, r3, #1
 8009288:	400b      	ands	r3, r1
 800928a:	18d3      	adds	r3, r2, r3
 800928c:	687a      	ldr	r2, [r7, #4]
 800928e:	0011      	movs	r1, r2
 8009290:	0018      	movs	r0, r3
 8009292:	f7ff fb47 	bl	8008924 <st_dword>
			fs->wflag = 1;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2201      	movs	r2, #1
 800929a:	70da      	strb	r2, [r3, #3]
			break;
 800929c:	e006      	b.n	80092ac <put_fat+0x1f4>
			if (res != FR_OK) break;
 800929e:	46c0      	nop			@ (mov r8, r8)
 80092a0:	e004      	b.n	80092ac <put_fat+0x1f4>
			if (res != FR_OK) break;
 80092a2:	46c0      	nop			@ (mov r8, r8)
 80092a4:	e002      	b.n	80092ac <put_fat+0x1f4>
			if (res != FR_OK) break;
 80092a6:	46c0      	nop			@ (mov r8, r8)
 80092a8:	e000      	b.n	80092ac <put_fat+0x1f4>
			if (res != FR_OK) break;
 80092aa:	46c0      	nop			@ (mov r8, r8)
		}
	}
	return res;
 80092ac:	231f      	movs	r3, #31
 80092ae:	18fb      	adds	r3, r7, r3
 80092b0:	781b      	ldrb	r3, [r3, #0]
}
 80092b2:	0018      	movs	r0, r3
 80092b4:	46bd      	mov	sp, r7
 80092b6:	b008      	add	sp, #32
 80092b8:	bdb0      	pop	{r4, r5, r7, pc}

080092ba <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80092ba:	b5b0      	push	{r4, r5, r7, lr}
 80092bc:	b088      	sub	sp, #32
 80092be:	af00      	add	r7, sp, #0
 80092c0:	60f8      	str	r0, [r7, #12]
 80092c2:	60b9      	str	r1, [r7, #8]
 80092c4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80092c6:	231f      	movs	r3, #31
 80092c8:	18fb      	adds	r3, r7, r3
 80092ca:	2200      	movs	r2, #0
 80092cc:	701a      	strb	r2, [r3, #0]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d904      	bls.n	80092e4 <remove_chain+0x2a>
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	695b      	ldr	r3, [r3, #20]
 80092de:	68ba      	ldr	r2, [r7, #8]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d301      	bcc.n	80092e8 <remove_chain+0x2e>
 80092e4:	2302      	movs	r3, #2
 80092e6:	e057      	b.n	8009398 <remove_chain+0xde>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d011      	beq.n	8009312 <remove_chain+0x58>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80092ee:	251f      	movs	r5, #31
 80092f0:	197c      	adds	r4, r7, r5
 80092f2:	2301      	movs	r3, #1
 80092f4:	425a      	negs	r2, r3
 80092f6:	6879      	ldr	r1, [r7, #4]
 80092f8:	69bb      	ldr	r3, [r7, #24]
 80092fa:	0018      	movs	r0, r3
 80092fc:	f7ff fedc 	bl	80090b8 <put_fat>
 8009300:	0003      	movs	r3, r0
 8009302:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) return res;
 8009304:	197b      	adds	r3, r7, r5
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d002      	beq.n	8009312 <remove_chain+0x58>
 800930c:	197b      	adds	r3, r7, r5
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	e042      	b.n	8009398 <remove_chain+0xde>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009312:	68ba      	ldr	r2, [r7, #8]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	0011      	movs	r1, r2
 8009318:	0018      	movs	r0, r3
 800931a:	f7ff fe23 	bl	8008f64 <get_fat>
 800931e:	0003      	movs	r3, r0
 8009320:	617b      	str	r3, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d035      	beq.n	8009394 <remove_chain+0xda>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	2b01      	cmp	r3, #1
 800932c:	d101      	bne.n	8009332 <remove_chain+0x78>
 800932e:	2302      	movs	r3, #2
 8009330:	e032      	b.n	8009398 <remove_chain+0xde>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	3301      	adds	r3, #1
 8009336:	d101      	bne.n	800933c <remove_chain+0x82>
 8009338:	2301      	movs	r3, #1
 800933a:	e02d      	b.n	8009398 <remove_chain+0xde>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800933c:	251f      	movs	r5, #31
 800933e:	197c      	adds	r4, r7, r5
 8009340:	68b9      	ldr	r1, [r7, #8]
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	2200      	movs	r2, #0
 8009346:	0018      	movs	r0, r3
 8009348:	f7ff feb6 	bl	80090b8 <put_fat>
 800934c:	0003      	movs	r3, r0
 800934e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) return res;
 8009350:	197b      	adds	r3, r7, r5
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d002      	beq.n	800935e <remove_chain+0xa4>
 8009358:	197b      	adds	r3, r7, r5
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	e01c      	b.n	8009398 <remove_chain+0xde>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	691a      	ldr	r2, [r3, #16]
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	695b      	ldr	r3, [r3, #20]
 8009366:	3b02      	subs	r3, #2
 8009368:	429a      	cmp	r2, r3
 800936a:	d20b      	bcs.n	8009384 <remove_chain+0xca>
			fs->free_clst++;
 800936c:	69bb      	ldr	r3, [r7, #24]
 800936e:	691b      	ldr	r3, [r3, #16]
 8009370:	1c5a      	adds	r2, r3, #1
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	791b      	ldrb	r3, [r3, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	4313      	orrs	r3, r2
 800937e:	b2da      	uxtb	r2, r3
 8009380:	69bb      	ldr	r3, [r7, #24]
 8009382:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009388:	69bb      	ldr	r3, [r7, #24]
 800938a:	695b      	ldr	r3, [r3, #20]
 800938c:	68ba      	ldr	r2, [r7, #8]
 800938e:	429a      	cmp	r2, r3
 8009390:	d3bf      	bcc.n	8009312 <remove_chain+0x58>
 8009392:	e000      	b.n	8009396 <remove_chain+0xdc>
		if (nxt == 0) break;				/* Empty cluster? */
 8009394:	46c0      	nop			@ (mov r8, r8)
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009396:	2300      	movs	r3, #0
}
 8009398:	0018      	movs	r0, r3
 800939a:	46bd      	mov	sp, r7
 800939c:	b008      	add	sp, #32
 800939e:	bdb0      	pop	{r4, r5, r7, pc}

080093a0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80093a0:	b5b0      	push	{r4, r5, r7, lr}
 80093a2:	b088      	sub	sp, #32
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d10d      	bne.n	80093d2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80093bc:	69bb      	ldr	r3, [r7, #24]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d004      	beq.n	80093cc <create_chain+0x2c>
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	695b      	ldr	r3, [r3, #20]
 80093c6:	69ba      	ldr	r2, [r7, #24]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d31d      	bcc.n	8009408 <create_chain+0x68>
 80093cc:	2301      	movs	r3, #1
 80093ce:	61bb      	str	r3, [r7, #24]
 80093d0:	e01a      	b.n	8009408 <create_chain+0x68>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80093d2:	683a      	ldr	r2, [r7, #0]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	0011      	movs	r1, r2
 80093d8:	0018      	movs	r0, r3
 80093da:	f7ff fdc3 	bl	8008f64 <get_fat>
 80093de:	0003      	movs	r3, r0
 80093e0:	60fb      	str	r3, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d801      	bhi.n	80093ec <create_chain+0x4c>
 80093e8:	2301      	movs	r3, #1
 80093ea:	e07b      	b.n	80094e4 <create_chain+0x144>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	3301      	adds	r3, #1
 80093f0:	d101      	bne.n	80093f6 <create_chain+0x56>
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	e076      	b.n	80094e4 <create_chain+0x144>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	695b      	ldr	r3, [r3, #20]
 80093fa:	68fa      	ldr	r2, [r7, #12]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d201      	bcs.n	8009404 <create_chain+0x64>
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	e06f      	b.n	80094e4 <create_chain+0x144>
		scl = clst;
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	3301      	adds	r3, #1
 8009410:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	695b      	ldr	r3, [r3, #20]
 8009416:	69fa      	ldr	r2, [r7, #28]
 8009418:	429a      	cmp	r2, r3
 800941a:	d307      	bcc.n	800942c <create_chain+0x8c>
				ncl = 2;
 800941c:	2302      	movs	r3, #2
 800941e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009420:	69fa      	ldr	r2, [r7, #28]
 8009422:	69bb      	ldr	r3, [r7, #24]
 8009424:	429a      	cmp	r2, r3
 8009426:	d901      	bls.n	800942c <create_chain+0x8c>
 8009428:	2300      	movs	r3, #0
 800942a:	e05b      	b.n	80094e4 <create_chain+0x144>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800942c:	69fa      	ldr	r2, [r7, #28]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	0011      	movs	r1, r2
 8009432:	0018      	movs	r0, r3
 8009434:	f7ff fd96 	bl	8008f64 <get_fat>
 8009438:	0003      	movs	r3, r0
 800943a:	60fb      	str	r3, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d00d      	beq.n	800945e <create_chain+0xbe>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2b01      	cmp	r3, #1
 8009446:	d002      	beq.n	800944e <create_chain+0xae>
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	3301      	adds	r3, #1
 800944c:	d101      	bne.n	8009452 <create_chain+0xb2>
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	e048      	b.n	80094e4 <create_chain+0x144>
			if (ncl == scl) return 0;		/* No free cluster */
 8009452:	69fa      	ldr	r2, [r7, #28]
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	429a      	cmp	r2, r3
 8009458:	d1d8      	bne.n	800940c <create_chain+0x6c>
 800945a:	2300      	movs	r3, #0
 800945c:	e042      	b.n	80094e4 <create_chain+0x144>
			if (cs == 0) break;				/* Found a free cluster */
 800945e:	46c0      	nop			@ (mov r8, r8)
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009460:	2517      	movs	r5, #23
 8009462:	197c      	adds	r4, r7, r5
 8009464:	2301      	movs	r3, #1
 8009466:	425a      	negs	r2, r3
 8009468:	69f9      	ldr	r1, [r7, #28]
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	0018      	movs	r0, r3
 800946e:	f7ff fe23 	bl	80090b8 <put_fat>
 8009472:	0003      	movs	r3, r0
 8009474:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK && clst != 0) {
 8009476:	197b      	adds	r3, r7, r5
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d10b      	bne.n	8009496 <create_chain+0xf6>
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d008      	beq.n	8009496 <create_chain+0xf6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009484:	197c      	adds	r4, r7, r5
 8009486:	69fa      	ldr	r2, [r7, #28]
 8009488:	6839      	ldr	r1, [r7, #0]
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	0018      	movs	r0, r3
 800948e:	f7ff fe13 	bl	80090b8 <put_fat>
 8009492:	0003      	movs	r3, r0
 8009494:	7023      	strb	r3, [r4, #0]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009496:	2317      	movs	r3, #23
 8009498:	18fb      	adds	r3, r7, r3
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d116      	bne.n	80094ce <create_chain+0x12e>
		fs->last_clst = ncl;
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	69fa      	ldr	r2, [r7, #28]
 80094a4:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	691a      	ldr	r2, [r3, #16]
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	695b      	ldr	r3, [r3, #20]
 80094ae:	3b02      	subs	r3, #2
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d804      	bhi.n	80094be <create_chain+0x11e>
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	691b      	ldr	r3, [r3, #16]
 80094b8:	1e5a      	subs	r2, r3, #1
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	791b      	ldrb	r3, [r3, #4]
 80094c2:	2201      	movs	r2, #1
 80094c4:	4313      	orrs	r3, r2
 80094c6:	b2da      	uxtb	r2, r3
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	711a      	strb	r2, [r3, #4]
 80094cc:	e009      	b.n	80094e2 <create_chain+0x142>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80094ce:	2317      	movs	r3, #23
 80094d0:	18fb      	adds	r3, r7, r3
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d102      	bne.n	80094de <create_chain+0x13e>
 80094d8:	2301      	movs	r3, #1
 80094da:	425b      	negs	r3, r3
 80094dc:	e000      	b.n	80094e0 <create_chain+0x140>
 80094de:	2301      	movs	r3, #1
 80094e0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80094e2:	69fb      	ldr	r3, [r7, #28]
}
 80094e4:	0018      	movs	r0, r3
 80094e6:	46bd      	mov	sp, r7
 80094e8:	b008      	add	sp, #32
 80094ea:	bdb0      	pop	{r4, r5, r7, pc}

080094ec <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b086      	sub	sp, #24
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009500:	3304      	adds	r3, #4
 8009502:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	0a5a      	lsrs	r2, r3, #9
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	895b      	ldrh	r3, [r3, #10]
 800950c:	0019      	movs	r1, r3
 800950e:	0010      	movs	r0, r2
 8009510:	f7f6 fe0c 	bl	800012c <__udivsi3>
 8009514:	0003      	movs	r3, r0
 8009516:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	1d1a      	adds	r2, r3, #4
 800951c:	613a      	str	r2, [r7, #16]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d101      	bne.n	800952c <clmt_clust+0x40>
 8009528:	2300      	movs	r3, #0
 800952a:	e010      	b.n	800954e <clmt_clust+0x62>
		if (cl < ncl) break;	/* In this fragment? */
 800952c:	697a      	ldr	r2, [r7, #20]
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	429a      	cmp	r2, r3
 8009532:	d307      	bcc.n	8009544 <clmt_clust+0x58>
		cl -= ncl; tbl++;		/* Next fragment */
 8009534:	697a      	ldr	r2, [r7, #20]
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	1ad3      	subs	r3, r2, r3
 800953a:	617b      	str	r3, [r7, #20]
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	3304      	adds	r3, #4
 8009540:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009542:	e7e9      	b.n	8009518 <clmt_clust+0x2c>
		if (cl < ncl) break;	/* In this fragment? */
 8009544:	46c0      	nop			@ (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	18d3      	adds	r3, r2, r3
}
 800954e:	0018      	movs	r0, r3
 8009550:	46bd      	mov	sp, r7
 8009552:	b006      	add	sp, #24
 8009554:	bd80      	pop	{r7, pc}

08009556 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009556:	b580      	push	{r7, lr}
 8009558:	b086      	sub	sp, #24
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
 800955e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009566:	683a      	ldr	r2, [r7, #0]
 8009568:	2380      	movs	r3, #128	@ 0x80
 800956a:	039b      	lsls	r3, r3, #14
 800956c:	429a      	cmp	r2, r3
 800956e:	d203      	bcs.n	8009578 <dir_sdi+0x22>
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	221f      	movs	r2, #31
 8009574:	4013      	ands	r3, r2
 8009576:	d001      	beq.n	800957c <dir_sdi+0x26>
		return FR_INT_ERR;
 8009578:	2302      	movs	r3, #2
 800957a:	e066      	b.n	800964a <dir_sdi+0xf4>
	}
	dp->dptr = ofs;				/* Set current offset */
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	683a      	ldr	r2, [r7, #0]
 8009580:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d106      	bne.n	800959c <dir_sdi+0x46>
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	2b02      	cmp	r3, #2
 8009594:	d902      	bls.n	800959c <dir_sdi+0x46>
		clst = fs->dirbase;
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800959a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d10c      	bne.n	80095bc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	095b      	lsrs	r3, r3, #5
 80095a6:	693a      	ldr	r2, [r7, #16]
 80095a8:	8912      	ldrh	r2, [r2, #8]
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d301      	bcc.n	80095b2 <dir_sdi+0x5c>
 80095ae:	2302      	movs	r3, #2
 80095b0:	e04b      	b.n	800964a <dir_sdi+0xf4>
		dp->sect = fs->dirbase;
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	61da      	str	r2, [r3, #28]
 80095ba:	e02c      	b.n	8009616 <dir_sdi+0xc0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	895b      	ldrh	r3, [r3, #10]
 80095c0:	025b      	lsls	r3, r3, #9
 80095c2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80095c4:	e01a      	b.n	80095fc <dir_sdi+0xa6>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	697a      	ldr	r2, [r7, #20]
 80095ca:	0011      	movs	r1, r2
 80095cc:	0018      	movs	r0, r3
 80095ce:	f7ff fcc9 	bl	8008f64 <get_fat>
 80095d2:	0003      	movs	r3, r0
 80095d4:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	3301      	adds	r3, #1
 80095da:	d101      	bne.n	80095e0 <dir_sdi+0x8a>
 80095dc:	2301      	movs	r3, #1
 80095de:	e034      	b.n	800964a <dir_sdi+0xf4>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d904      	bls.n	80095f0 <dir_sdi+0x9a>
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	695b      	ldr	r3, [r3, #20]
 80095ea:	697a      	ldr	r2, [r7, #20]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d301      	bcc.n	80095f4 <dir_sdi+0x9e>
 80095f0:	2302      	movs	r3, #2
 80095f2:	e02a      	b.n	800964a <dir_sdi+0xf4>
			ofs -= csz;
 80095f4:	683a      	ldr	r2, [r7, #0]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	1ad3      	subs	r3, r2, r3
 80095fa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80095fc:	683a      	ldr	r2, [r7, #0]
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	429a      	cmp	r2, r3
 8009602:	d2e0      	bcs.n	80095c6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009604:	697a      	ldr	r2, [r7, #20]
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	0011      	movs	r1, r2
 800960a:	0018      	movs	r0, r3
 800960c:	f7ff fc8e 	bl	8008f2c <clust2sect>
 8009610:	0002      	movs	r2, r0
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	697a      	ldr	r2, [r7, #20]
 800961a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	69db      	ldr	r3, [r3, #28]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d101      	bne.n	8009628 <dir_sdi+0xd2>
 8009624:	2302      	movs	r3, #2
 8009626:	e010      	b.n	800964a <dir_sdi+0xf4>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	69da      	ldr	r2, [r3, #28]
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	0a5b      	lsrs	r3, r3, #9
 8009630:	18d2      	adds	r2, r2, r3
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	3330      	adds	r3, #48	@ 0x30
 800963a:	001a      	movs	r2, r3
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	05db      	lsls	r3, r3, #23
 8009640:	0ddb      	lsrs	r3, r3, #23
 8009642:	18d2      	adds	r2, r2, r3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009648:	2300      	movs	r3, #0
}
 800964a:	0018      	movs	r0, r3
 800964c:	46bd      	mov	sp, r7
 800964e:	b006      	add	sp, #24
 8009650:	bd80      	pop	{r7, pc}

08009652 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b086      	sub	sp, #24
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
 800965a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	695b      	ldr	r3, [r3, #20]
 8009666:	3320      	adds	r3, #32
 8009668:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	69db      	ldr	r3, [r3, #28]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d004      	beq.n	800967c <dir_next+0x2a>
 8009672:	68ba      	ldr	r2, [r7, #8]
 8009674:	2380      	movs	r3, #128	@ 0x80
 8009676:	039b      	lsls	r3, r3, #14
 8009678:	429a      	cmp	r2, r3
 800967a:	d301      	bcc.n	8009680 <dir_next+0x2e>
 800967c:	2304      	movs	r3, #4
 800967e:	e0ad      	b.n	80097dc <dir_next+0x18a>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	05db      	lsls	r3, r3, #23
 8009684:	0ddb      	lsrs	r3, r3, #23
 8009686:	d000      	beq.n	800968a <dir_next+0x38>
 8009688:	e09b      	b.n	80097c2 <dir_next+0x170>
		dp->sect++;				/* Next sector */
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	69db      	ldr	r3, [r3, #28]
 800968e:	1c5a      	adds	r2, r3, #1
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	699b      	ldr	r3, [r3, #24]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d10b      	bne.n	80096b4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	095b      	lsrs	r3, r3, #5
 80096a0:	68fa      	ldr	r2, [r7, #12]
 80096a2:	8912      	ldrh	r2, [r2, #8]
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d200      	bcs.n	80096aa <dir_next+0x58>
 80096a8:	e08b      	b.n	80097c2 <dir_next+0x170>
				dp->sect = 0; return FR_NO_FILE;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	61da      	str	r2, [r3, #28]
 80096b0:	2304      	movs	r3, #4
 80096b2:	e093      	b.n	80097dc <dir_next+0x18a>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	0a5b      	lsrs	r3, r3, #9
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	8952      	ldrh	r2, [r2, #10]
 80096bc:	3a01      	subs	r2, #1
 80096be:	4013      	ands	r3, r2
 80096c0:	d000      	beq.n	80096c4 <dir_next+0x72>
 80096c2:	e07e      	b.n	80097c2 <dir_next+0x170>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	699b      	ldr	r3, [r3, #24]
 80096ca:	0019      	movs	r1, r3
 80096cc:	0010      	movs	r0, r2
 80096ce:	f7ff fc49 	bl	8008f64 <get_fat>
 80096d2:	0003      	movs	r3, r0
 80096d4:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d801      	bhi.n	80096e0 <dir_next+0x8e>
 80096dc:	2302      	movs	r3, #2
 80096de:	e07d      	b.n	80097dc <dir_next+0x18a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	3301      	adds	r3, #1
 80096e4:	d101      	bne.n	80096ea <dir_next+0x98>
 80096e6:	2301      	movs	r3, #1
 80096e8:	e078      	b.n	80097dc <dir_next+0x18a>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	695b      	ldr	r3, [r3, #20]
 80096ee:	697a      	ldr	r2, [r7, #20]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d35a      	bcc.n	80097aa <dir_next+0x158>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d104      	bne.n	8009704 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	61da      	str	r2, [r3, #28]
 8009700:	2304      	movs	r3, #4
 8009702:	e06b      	b.n	80097dc <dir_next+0x18a>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	699b      	ldr	r3, [r3, #24]
 800970a:	0019      	movs	r1, r3
 800970c:	0010      	movs	r0, r2
 800970e:	f7ff fe47 	bl	80093a0 <create_chain>
 8009712:	0003      	movs	r3, r0
 8009714:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d101      	bne.n	8009720 <dir_next+0xce>
 800971c:	2307      	movs	r3, #7
 800971e:	e05d      	b.n	80097dc <dir_next+0x18a>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	2b01      	cmp	r3, #1
 8009724:	d101      	bne.n	800972a <dir_next+0xd8>
 8009726:	2302      	movs	r3, #2
 8009728:	e058      	b.n	80097dc <dir_next+0x18a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	3301      	adds	r3, #1
 800972e:	d101      	bne.n	8009734 <dir_next+0xe2>
 8009730:	2301      	movs	r3, #1
 8009732:	e053      	b.n	80097dc <dir_next+0x18a>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	0018      	movs	r0, r3
 8009738:	f7ff fafe 	bl	8008d38 <sync_window>
 800973c:	1e03      	subs	r3, r0, #0
 800973e:	d001      	beq.n	8009744 <dir_next+0xf2>
 8009740:	2301      	movs	r3, #1
 8009742:	e04b      	b.n	80097dc <dir_next+0x18a>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	3330      	adds	r3, #48	@ 0x30
 8009748:	2280      	movs	r2, #128	@ 0x80
 800974a:	0092      	lsls	r2, r2, #2
 800974c:	2100      	movs	r1, #0
 800974e:	0018      	movs	r0, r3
 8009750:	f7ff f931 	bl	80089b6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009754:	2300      	movs	r3, #0
 8009756:	613b      	str	r3, [r7, #16]
 8009758:	697a      	ldr	r2, [r7, #20]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	0011      	movs	r1, r2
 800975e:	0018      	movs	r0, r3
 8009760:	f7ff fbe4 	bl	8008f2c <clust2sect>
 8009764:	0002      	movs	r2, r0
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	62da      	str	r2, [r3, #44]	@ 0x2c
 800976a:	e012      	b.n	8009792 <dir_next+0x140>
						fs->wflag = 1;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2201      	movs	r2, #1
 8009770:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	0018      	movs	r0, r3
 8009776:	f7ff fadf 	bl	8008d38 <sync_window>
 800977a:	1e03      	subs	r3, r0, #0
 800977c:	d001      	beq.n	8009782 <dir_next+0x130>
 800977e:	2301      	movs	r3, #1
 8009780:	e02c      	b.n	80097dc <dir_next+0x18a>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	3301      	adds	r3, #1
 8009786:	613b      	str	r3, [r7, #16]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800978c:	1c5a      	adds	r2, r3, #1
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	895b      	ldrh	r3, [r3, #10]
 8009796:	001a      	movs	r2, r3
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	4293      	cmp	r3, r2
 800979c:	d3e6      	bcc.n	800976c <dir_next+0x11a>
					}
					fs->winsect -= n;							/* Restore window offset */
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	1ad2      	subs	r2, r2, r3
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	697a      	ldr	r2, [r7, #20]
 80097ae:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80097b0:	697a      	ldr	r2, [r7, #20]
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	0011      	movs	r1, r2
 80097b6:	0018      	movs	r0, r3
 80097b8:	f7ff fbb8 	bl	8008f2c <clust2sect>
 80097bc:	0002      	movs	r2, r0
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	68ba      	ldr	r2, [r7, #8]
 80097c6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	3330      	adds	r3, #48	@ 0x30
 80097cc:	001a      	movs	r2, r3
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	05db      	lsls	r3, r3, #23
 80097d2:	0ddb      	lsrs	r3, r3, #23
 80097d4:	18d2      	adds	r2, r2, r3
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	0018      	movs	r0, r3
 80097de:	46bd      	mov	sp, r7
 80097e0:	b006      	add	sp, #24
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80097e4:	b5b0      	push	{r4, r5, r7, lr}
 80097e6:	b086      	sub	sp, #24
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80097f4:	2517      	movs	r5, #23
 80097f6:	197c      	adds	r4, r7, r5
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2100      	movs	r1, #0
 80097fc:	0018      	movs	r0, r3
 80097fe:	f7ff feaa 	bl	8009556 <dir_sdi>
 8009802:	0003      	movs	r3, r0
 8009804:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8009806:	197b      	adds	r3, r7, r5
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d133      	bne.n	8009876 <dir_alloc+0x92>
		n = 0;
 800980e:	2300      	movs	r3, #0
 8009810:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	69da      	ldr	r2, [r3, #28]
 8009816:	2517      	movs	r5, #23
 8009818:	197c      	adds	r4, r7, r5
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	0011      	movs	r1, r2
 800981e:	0018      	movs	r0, r3
 8009820:	f7ff fad2 	bl	8008dc8 <move_window>
 8009824:	0003      	movs	r3, r0
 8009826:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8009828:	197b      	adds	r3, r7, r5
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d121      	bne.n	8009874 <dir_alloc+0x90>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6a1b      	ldr	r3, [r3, #32]
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	2be5      	cmp	r3, #229	@ 0xe5
 8009838:	d004      	beq.n	8009844 <dir_alloc+0x60>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6a1b      	ldr	r3, [r3, #32]
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d107      	bne.n	8009854 <dir_alloc+0x70>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	3301      	adds	r3, #1
 8009848:	613b      	str	r3, [r7, #16]
 800984a:	693a      	ldr	r2, [r7, #16]
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	429a      	cmp	r2, r3
 8009850:	d102      	bne.n	8009858 <dir_alloc+0x74>
 8009852:	e010      	b.n	8009876 <dir_alloc+0x92>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009854:	2300      	movs	r3, #0
 8009856:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009858:	2517      	movs	r5, #23
 800985a:	197c      	adds	r4, r7, r5
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2101      	movs	r1, #1
 8009860:	0018      	movs	r0, r3
 8009862:	f7ff fef6 	bl	8009652 <dir_next>
 8009866:	0003      	movs	r3, r0
 8009868:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800986a:	197b      	adds	r3, r7, r5
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d0cf      	beq.n	8009812 <dir_alloc+0x2e>
 8009872:	e000      	b.n	8009876 <dir_alloc+0x92>
			if (res != FR_OK) break;
 8009874:	46c0      	nop			@ (mov r8, r8)
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009876:	2217      	movs	r2, #23
 8009878:	18bb      	adds	r3, r7, r2
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	2b04      	cmp	r3, #4
 800987e:	d102      	bne.n	8009886 <dir_alloc+0xa2>
 8009880:	18bb      	adds	r3, r7, r2
 8009882:	2207      	movs	r2, #7
 8009884:	701a      	strb	r2, [r3, #0]
	return res;
 8009886:	2317      	movs	r3, #23
 8009888:	18fb      	adds	r3, r7, r3
 800988a:	781b      	ldrb	r3, [r3, #0]
}
 800988c:	0018      	movs	r0, r3
 800988e:	46bd      	mov	sp, r7
 8009890:	b006      	add	sp, #24
 8009892:	bdb0      	pop	{r4, r5, r7, pc}

08009894 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	331a      	adds	r3, #26
 80098a2:	0018      	movs	r0, r3
 80098a4:	f7fe ffe4 	bl	8008870 <ld_word>
 80098a8:	0003      	movs	r3, r0
 80098aa:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	2b03      	cmp	r3, #3
 80098b2:	d109      	bne.n	80098c8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	3314      	adds	r3, #20
 80098b8:	0018      	movs	r0, r3
 80098ba:	f7fe ffd9 	bl	8008870 <ld_word>
 80098be:	0003      	movs	r3, r0
 80098c0:	041b      	lsls	r3, r3, #16
 80098c2:	68fa      	ldr	r2, [r7, #12]
 80098c4:	4313      	orrs	r3, r2
 80098c6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80098c8:	68fb      	ldr	r3, [r7, #12]
}
 80098ca:	0018      	movs	r0, r3
 80098cc:	46bd      	mov	sp, r7
 80098ce:	b004      	add	sp, #16
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b084      	sub	sp, #16
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	60f8      	str	r0, [r7, #12]
 80098da:	60b9      	str	r1, [r7, #8]
 80098dc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	331a      	adds	r3, #26
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	b292      	uxth	r2, r2
 80098e6:	0011      	movs	r1, r2
 80098e8:	0018      	movs	r0, r3
 80098ea:	f7fe fffd 	bl	80088e8 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	2b03      	cmp	r3, #3
 80098f4:	d109      	bne.n	800990a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	3314      	adds	r3, #20
 80098fa:	001a      	movs	r2, r3
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	0c1b      	lsrs	r3, r3, #16
 8009900:	b29b      	uxth	r3, r3
 8009902:	0019      	movs	r1, r3
 8009904:	0010      	movs	r0, r2
 8009906:	f7fe ffef 	bl	80088e8 <st_word>
	}
}
 800990a:	46c0      	nop			@ (mov r8, r8)
 800990c:	46bd      	mov	sp, r7
 800990e:	b004      	add	sp, #16
 8009910:	bd80      	pop	{r7, pc}

08009912 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009912:	b5b0      	push	{r4, r5, r7, lr}
 8009914:	b086      	sub	sp, #24
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009920:	2517      	movs	r5, #23
 8009922:	197c      	adds	r4, r7, r5
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2100      	movs	r1, #0
 8009928:	0018      	movs	r0, r3
 800992a:	f7ff fe14 	bl	8009556 <dir_sdi>
 800992e:	0003      	movs	r3, r0
 8009930:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 8009932:	197b      	adds	r3, r7, r5
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d002      	beq.n	8009940 <dir_find+0x2e>
 800993a:	197b      	adds	r3, r7, r5
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	e04c      	b.n	80099da <dir_find+0xc8>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	69da      	ldr	r2, [r3, #28]
 8009944:	2517      	movs	r5, #23
 8009946:	197c      	adds	r4, r7, r5
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	0011      	movs	r1, r2
 800994c:	0018      	movs	r0, r3
 800994e:	f7ff fa3b 	bl	8008dc8 <move_window>
 8009952:	0003      	movs	r3, r0
 8009954:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 8009956:	0029      	movs	r1, r5
 8009958:	187b      	adds	r3, r7, r1
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d136      	bne.n	80099ce <dir_find+0xbc>
		c = dp->dir[DIR_Name];
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6a1a      	ldr	r2, [r3, #32]
 8009964:	200f      	movs	r0, #15
 8009966:	183b      	adds	r3, r7, r0
 8009968:	7812      	ldrb	r2, [r2, #0]
 800996a:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800996c:	183b      	adds	r3, r7, r0
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d103      	bne.n	800997c <dir_find+0x6a>
 8009974:	187b      	adds	r3, r7, r1
 8009976:	2204      	movs	r2, #4
 8009978:	701a      	strb	r2, [r3, #0]
 800997a:	e02b      	b.n	80099d4 <dir_find+0xc2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6a1b      	ldr	r3, [r3, #32]
 8009980:	330b      	adds	r3, #11
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	223f      	movs	r2, #63	@ 0x3f
 8009986:	4013      	ands	r3, r2
 8009988:	b2da      	uxtb	r2, r3
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6a1b      	ldr	r3, [r3, #32]
 8009992:	330b      	adds	r3, #11
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	001a      	movs	r2, r3
 8009998:	2308      	movs	r3, #8
 800999a:	4013      	ands	r3, r2
 800999c:	d109      	bne.n	80099b2 <dir_find+0xa0>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6a18      	ldr	r0, [r3, #32]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	3324      	adds	r3, #36	@ 0x24
 80099a6:	220b      	movs	r2, #11
 80099a8:	0019      	movs	r1, r3
 80099aa:	f7ff f81d 	bl	80089e8 <mem_cmp>
 80099ae:	1e03      	subs	r3, r0, #0
 80099b0:	d00f      	beq.n	80099d2 <dir_find+0xc0>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80099b2:	2517      	movs	r5, #23
 80099b4:	197c      	adds	r4, r7, r5
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2100      	movs	r1, #0
 80099ba:	0018      	movs	r0, r3
 80099bc:	f7ff fe49 	bl	8009652 <dir_next>
 80099c0:	0003      	movs	r3, r0
 80099c2:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 80099c4:	197b      	adds	r3, r7, r5
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d0b9      	beq.n	8009940 <dir_find+0x2e>
 80099cc:	e002      	b.n	80099d4 <dir_find+0xc2>
		if (res != FR_OK) break;
 80099ce:	46c0      	nop			@ (mov r8, r8)
 80099d0:	e000      	b.n	80099d4 <dir_find+0xc2>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80099d2:	46c0      	nop			@ (mov r8, r8)

	return res;
 80099d4:	2317      	movs	r3, #23
 80099d6:	18fb      	adds	r3, r7, r3
 80099d8:	781b      	ldrb	r3, [r3, #0]
}
 80099da:	0018      	movs	r0, r3
 80099dc:	46bd      	mov	sp, r7
 80099de:	b006      	add	sp, #24
 80099e0:	bdb0      	pop	{r4, r5, r7, pc}

080099e2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80099e2:	b5b0      	push	{r4, r5, r7, lr}
 80099e4:	b084      	sub	sp, #16
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80099f0:	250f      	movs	r5, #15
 80099f2:	197c      	adds	r4, r7, r5
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2101      	movs	r1, #1
 80099f8:	0018      	movs	r0, r3
 80099fa:	f7ff fef3 	bl	80097e4 <dir_alloc>
 80099fe:	0003      	movs	r3, r0
 8009a00:	7023      	strb	r3, [r4, #0]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009a02:	197b      	adds	r3, r7, r5
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d11f      	bne.n	8009a4a <dir_register+0x68>
		res = move_window(fs, dp->sect);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	69da      	ldr	r2, [r3, #28]
 8009a0e:	197c      	adds	r4, r7, r5
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	0011      	movs	r1, r2
 8009a14:	0018      	movs	r0, r3
 8009a16:	f7ff f9d7 	bl	8008dc8 <move_window>
 8009a1a:	0003      	movs	r3, r0
 8009a1c:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8009a1e:	197b      	adds	r3, r7, r5
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d111      	bne.n	8009a4a <dir_register+0x68>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6a1b      	ldr	r3, [r3, #32]
 8009a2a:	2220      	movs	r2, #32
 8009a2c:	2100      	movs	r1, #0
 8009a2e:	0018      	movs	r0, r3
 8009a30:	f7fe ffc1 	bl	80089b6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6a18      	ldr	r0, [r3, #32]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	3324      	adds	r3, #36	@ 0x24
 8009a3c:	220b      	movs	r2, #11
 8009a3e:	0019      	movs	r1, r3
 8009a40:	f7fe ff9a 	bl	8008978 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	2201      	movs	r2, #1
 8009a48:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009a4a:	230f      	movs	r3, #15
 8009a4c:	18fb      	adds	r3, r7, r3
 8009a4e:	781b      	ldrb	r3, [r3, #0]
}
 8009a50:	0018      	movs	r0, r3
 8009a52:	46bd      	mov	sp, r7
 8009a54:	b004      	add	sp, #16
 8009a56:	bdb0      	pop	{r4, r5, r7, pc}

08009a58 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b088      	sub	sp, #32
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	60fb      	str	r3, [r7, #12]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	3324      	adds	r3, #36	@ 0x24
 8009a6c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	220b      	movs	r2, #11
 8009a72:	2120      	movs	r1, #32
 8009a74:	0018      	movs	r0, r3
 8009a76:	f7fe ff9e 	bl	80089b6 <mem_set>
	si = i = 0; ni = 8;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	613b      	str	r3, [r7, #16]
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	61fb      	str	r3, [r7, #28]
 8009a82:	2308      	movs	r3, #8
 8009a84:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009a86:	69fb      	ldr	r3, [r7, #28]
 8009a88:	1c5a      	adds	r2, r3, #1
 8009a8a:	61fa      	str	r2, [r7, #28]
 8009a8c:	68fa      	ldr	r2, [r7, #12]
 8009a8e:	18d2      	adds	r2, r2, r3
 8009a90:	211b      	movs	r1, #27
 8009a92:	187b      	adds	r3, r7, r1
 8009a94:	7812      	ldrb	r2, [r2, #0]
 8009a96:	701a      	strb	r2, [r3, #0]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009a98:	000a      	movs	r2, r1
 8009a9a:	18bb      	adds	r3, r7, r2
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	2b20      	cmp	r3, #32
 8009aa0:	d800      	bhi.n	8009aa4 <create_name+0x4c>
 8009aa2:	e062      	b.n	8009b6a <create_name+0x112>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009aa4:	18bb      	adds	r3, r7, r2
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	2b2f      	cmp	r3, #47	@ 0x2f
 8009aaa:	d007      	beq.n	8009abc <create_name+0x64>
 8009aac:	18bb      	adds	r3, r7, r2
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	2b5c      	cmp	r3, #92	@ 0x5c
 8009ab2:	d110      	bne.n	8009ad6 <create_name+0x7e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009ab4:	e002      	b.n	8009abc <create_name+0x64>
 8009ab6:	69fb      	ldr	r3, [r7, #28]
 8009ab8:	3301      	adds	r3, #1
 8009aba:	61fb      	str	r3, [r7, #28]
 8009abc:	68fa      	ldr	r2, [r7, #12]
 8009abe:	69fb      	ldr	r3, [r7, #28]
 8009ac0:	18d3      	adds	r3, r2, r3
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	2b2f      	cmp	r3, #47	@ 0x2f
 8009ac6:	d0f6      	beq.n	8009ab6 <create_name+0x5e>
 8009ac8:	68fa      	ldr	r2, [r7, #12]
 8009aca:	69fb      	ldr	r3, [r7, #28]
 8009acc:	18d3      	adds	r3, r2, r3
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	2b5c      	cmp	r3, #92	@ 0x5c
 8009ad2:	d0f0      	beq.n	8009ab6 <create_name+0x5e>
			break;
 8009ad4:	e04a      	b.n	8009b6c <create_name+0x114>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009ad6:	231b      	movs	r3, #27
 8009ad8:	18fb      	adds	r3, r7, r3
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	2b2e      	cmp	r3, #46	@ 0x2e
 8009ade:	d003      	beq.n	8009ae8 <create_name+0x90>
 8009ae0:	693a      	ldr	r2, [r7, #16]
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d30e      	bcc.n	8009b06 <create_name+0xae>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	2b0b      	cmp	r3, #11
 8009aec:	d004      	beq.n	8009af8 <create_name+0xa0>
 8009aee:	231b      	movs	r3, #27
 8009af0:	18fb      	adds	r3, r7, r3
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	2b2e      	cmp	r3, #46	@ 0x2e
 8009af6:	d001      	beq.n	8009afc <create_name+0xa4>
 8009af8:	2306      	movs	r3, #6
 8009afa:	e054      	b.n	8009ba6 <create_name+0x14e>
			i = 8; ni = 11;				/* Goto extension */
 8009afc:	2308      	movs	r3, #8
 8009afe:	613b      	str	r3, [r7, #16]
 8009b00:	230b      	movs	r3, #11
 8009b02:	617b      	str	r3, [r7, #20]
			continue;
 8009b04:	e030      	b.n	8009b68 <create_name+0x110>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009b06:	211b      	movs	r1, #27
 8009b08:	187b      	adds	r3, r7, r1
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	b25b      	sxtb	r3, r3
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	da07      	bge.n	8009b22 <create_name+0xca>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009b12:	187b      	adds	r3, r7, r1
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	3b80      	subs	r3, #128	@ 0x80
 8009b18:	001a      	movs	r2, r3
 8009b1a:	187b      	adds	r3, r7, r1
 8009b1c:	4924      	ldr	r1, [pc, #144]	@ (8009bb0 <create_name+0x158>)
 8009b1e:	5c8a      	ldrb	r2, [r1, r2]
 8009b20:	701a      	strb	r2, [r3, #0]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009b22:	231b      	movs	r3, #27
 8009b24:	18fb      	adds	r3, r7, r3
 8009b26:	781a      	ldrb	r2, [r3, #0]
 8009b28:	4b22      	ldr	r3, [pc, #136]	@ (8009bb4 <create_name+0x15c>)
 8009b2a:	0011      	movs	r1, r2
 8009b2c:	0018      	movs	r0, r3
 8009b2e:	f7fe ff80 	bl	8008a32 <chk_chr>
 8009b32:	1e03      	subs	r3, r0, #0
 8009b34:	d001      	beq.n	8009b3a <create_name+0xe2>
 8009b36:	2306      	movs	r3, #6
 8009b38:	e035      	b.n	8009ba6 <create_name+0x14e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009b3a:	221b      	movs	r2, #27
 8009b3c:	18bb      	adds	r3, r7, r2
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	2b60      	cmp	r3, #96	@ 0x60
 8009b42:	d908      	bls.n	8009b56 <create_name+0xfe>
 8009b44:	18bb      	adds	r3, r7, r2
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	2b7a      	cmp	r3, #122	@ 0x7a
 8009b4a:	d804      	bhi.n	8009b56 <create_name+0xfe>
 8009b4c:	18bb      	adds	r3, r7, r2
 8009b4e:	18ba      	adds	r2, r7, r2
 8009b50:	7812      	ldrb	r2, [r2, #0]
 8009b52:	3a20      	subs	r2, #32
 8009b54:	701a      	strb	r2, [r3, #0]
			sfn[i++] = c;
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	1c5a      	adds	r2, r3, #1
 8009b5a:	613a      	str	r2, [r7, #16]
 8009b5c:	68ba      	ldr	r2, [r7, #8]
 8009b5e:	18d3      	adds	r3, r2, r3
 8009b60:	221b      	movs	r2, #27
 8009b62:	18ba      	adds	r2, r7, r2
 8009b64:	7812      	ldrb	r2, [r2, #0]
 8009b66:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009b68:	e78d      	b.n	8009a86 <create_name+0x2e>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009b6a:	46c0      	nop			@ (mov r8, r8)
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009b6c:	68fa      	ldr	r2, [r7, #12]
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	18d2      	adds	r2, r2, r3
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d101      	bne.n	8009b80 <create_name+0x128>
 8009b7c:	2306      	movs	r3, #6
 8009b7e:	e012      	b.n	8009ba6 <create_name+0x14e>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	2be5      	cmp	r3, #229	@ 0xe5
 8009b86:	d102      	bne.n	8009b8e <create_name+0x136>
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	2205      	movs	r2, #5
 8009b8c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009b8e:	231b      	movs	r3, #27
 8009b90:	18fb      	adds	r3, r7, r3
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	2b20      	cmp	r3, #32
 8009b96:	d801      	bhi.n	8009b9c <create_name+0x144>
 8009b98:	2204      	movs	r2, #4
 8009b9a:	e000      	b.n	8009b9e <create_name+0x146>
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	330b      	adds	r3, #11
 8009ba2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009ba4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009ba6:	0018      	movs	r0, r3
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	b008      	add	sp, #32
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	46c0      	nop			@ (mov r8, r8)
 8009bb0:	0800c24c 	.word	0x0800c24c
 8009bb4:	0800c0e0 	.word	0x0800c0e0

08009bb8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009bb8:	b5b0      	push	{r4, r5, r7, lr}
 8009bba:	b086      	sub	sp, #24
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009bcc:	e002      	b.n	8009bd4 <follow_path+0x1c>
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	603b      	str	r3, [r7, #0]
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	2b2f      	cmp	r3, #47	@ 0x2f
 8009bda:	d0f8      	beq.n	8009bce <follow_path+0x16>
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	2b5c      	cmp	r3, #92	@ 0x5c
 8009be2:	d0f4      	beq.n	8009bce <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	2200      	movs	r2, #0
 8009be8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	2b1f      	cmp	r3, #31
 8009bf0:	d80d      	bhi.n	8009c0e <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	222f      	movs	r2, #47	@ 0x2f
 8009bf6:	2180      	movs	r1, #128	@ 0x80
 8009bf8:	5499      	strb	r1, [r3, r2]
		res = dir_sdi(dp, 0);
 8009bfa:	2317      	movs	r3, #23
 8009bfc:	18fc      	adds	r4, r7, r3
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2100      	movs	r1, #0
 8009c02:	0018      	movs	r0, r3
 8009c04:	f7ff fca7 	bl	8009556 <dir_sdi>
 8009c08:	0003      	movs	r3, r0
 8009c0a:	7023      	strb	r3, [r4, #0]
 8009c0c:	e052      	b.n	8009cb4 <follow_path+0xfc>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009c0e:	2517      	movs	r5, #23
 8009c10:	197c      	adds	r4, r7, r5
 8009c12:	003a      	movs	r2, r7
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	0011      	movs	r1, r2
 8009c18:	0018      	movs	r0, r3
 8009c1a:	f7ff ff1d 	bl	8009a58 <create_name>
 8009c1e:	0003      	movs	r3, r0
 8009c20:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8009c22:	197b      	adds	r3, r7, r5
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d13f      	bne.n	8009caa <follow_path+0xf2>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009c2a:	197c      	adds	r4, r7, r5
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	0018      	movs	r0, r3
 8009c30:	f7ff fe6f 	bl	8009912 <dir_find>
 8009c34:	0003      	movs	r3, r0
 8009c36:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 8009c38:	200b      	movs	r0, #11
 8009c3a:	183b      	adds	r3, r7, r0
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	212f      	movs	r1, #47	@ 0x2f
 8009c40:	5c52      	ldrb	r2, [r2, r1]
 8009c42:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 8009c44:	197b      	adds	r3, r7, r5
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d00c      	beq.n	8009c66 <follow_path+0xae>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009c4c:	197b      	adds	r3, r7, r5
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	2b04      	cmp	r3, #4
 8009c52:	d12c      	bne.n	8009cae <follow_path+0xf6>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009c54:	183b      	adds	r3, r7, r0
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	2204      	movs	r2, #4
 8009c5a:	4013      	ands	r3, r2
 8009c5c:	d127      	bne.n	8009cae <follow_path+0xf6>
 8009c5e:	197b      	adds	r3, r7, r5
 8009c60:	2205      	movs	r2, #5
 8009c62:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 8009c64:	e023      	b.n	8009cae <follow_path+0xf6>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009c66:	230b      	movs	r3, #11
 8009c68:	18fb      	adds	r3, r7, r3
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	2204      	movs	r2, #4
 8009c6e:	4013      	ands	r3, r2
 8009c70:	d11f      	bne.n	8009cb2 <follow_path+0xfa>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	799b      	ldrb	r3, [r3, #6]
 8009c76:	001a      	movs	r2, r3
 8009c78:	2310      	movs	r3, #16
 8009c7a:	4013      	ands	r3, r2
 8009c7c:	d104      	bne.n	8009c88 <follow_path+0xd0>
				res = FR_NO_PATH; break;
 8009c7e:	2317      	movs	r3, #23
 8009c80:	18fb      	adds	r3, r7, r3
 8009c82:	2205      	movs	r2, #5
 8009c84:	701a      	strb	r2, [r3, #0]
 8009c86:	e015      	b.n	8009cb4 <follow_path+0xfc>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	3330      	adds	r3, #48	@ 0x30
 8009c8c:	001a      	movs	r2, r3
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	695b      	ldr	r3, [r3, #20]
 8009c92:	05db      	lsls	r3, r3, #23
 8009c94:	0ddb      	lsrs	r3, r3, #23
 8009c96:	18d2      	adds	r2, r2, r3
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	0011      	movs	r1, r2
 8009c9c:	0018      	movs	r0, r3
 8009c9e:	f7ff fdf9 	bl	8009894 <ld_clust>
 8009ca2:	0002      	movs	r2, r0
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009ca8:	e7b1      	b.n	8009c0e <follow_path+0x56>
			if (res != FR_OK) break;
 8009caa:	46c0      	nop			@ (mov r8, r8)
 8009cac:	e002      	b.n	8009cb4 <follow_path+0xfc>
				break;
 8009cae:	46c0      	nop			@ (mov r8, r8)
 8009cb0:	e000      	b.n	8009cb4 <follow_path+0xfc>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009cb2:	46c0      	nop			@ (mov r8, r8)
			}
		}
	}

	return res;
 8009cb4:	2317      	movs	r3, #23
 8009cb6:	18fb      	adds	r3, r7, r3
 8009cb8:	781b      	ldrb	r3, [r3, #0]
}
 8009cba:	0018      	movs	r0, r3
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	b006      	add	sp, #24
 8009cc0:	bdb0      	pop	{r4, r5, r7, pc}

08009cc2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009cc2:	b580      	push	{r7, lr}
 8009cc4:	b086      	sub	sp, #24
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	425b      	negs	r3, r3
 8009cce:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d031      	beq.n	8009d3c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	617b      	str	r3, [r7, #20]
 8009cde:	e002      	b.n	8009ce6 <get_ldnumber+0x24>
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	617b      	str	r3, [r7, #20]
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	2b20      	cmp	r3, #32
 8009cec:	d903      	bls.n	8009cf6 <get_ldnumber+0x34>
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	2b3a      	cmp	r3, #58	@ 0x3a
 8009cf4:	d1f4      	bne.n	8009ce0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	2b3a      	cmp	r3, #58	@ 0x3a
 8009cfc:	d11c      	bne.n	8009d38 <get_ldnumber+0x76>
			tp = *path;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	1c5a      	adds	r2, r3, #1
 8009d08:	60fa      	str	r2, [r7, #12]
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	3b30      	subs	r3, #48	@ 0x30
 8009d0e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	2b09      	cmp	r3, #9
 8009d14:	d80e      	bhi.n	8009d34 <get_ldnumber+0x72>
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d10a      	bne.n	8009d34 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d107      	bne.n	8009d34 <get_ldnumber+0x72>
					vol = (int)i;
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	617b      	str	r3, [r7, #20]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	697a      	ldr	r2, [r7, #20]
 8009d32:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	e002      	b.n	8009d3e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009d38:	2300      	movs	r3, #0
 8009d3a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009d3c:	693b      	ldr	r3, [r7, #16]
}
 8009d3e:	0018      	movs	r0, r3
 8009d40:	46bd      	mov	sp, r7
 8009d42:	b006      	add	sp, #24
 8009d44:	bd80      	pop	{r7, pc}
	...

08009d48 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2200      	movs	r2, #0
 8009d56:	70da      	strb	r2, [r3, #3]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	4252      	negs	r2, r2
 8009d5e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009d60:	683a      	ldr	r2, [r7, #0]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	0011      	movs	r1, r2
 8009d66:	0018      	movs	r0, r3
 8009d68:	f7ff f82e 	bl	8008dc8 <move_window>
 8009d6c:	1e03      	subs	r3, r0, #0
 8009d6e:	d001      	beq.n	8009d74 <check_fs+0x2c>
 8009d70:	2304      	movs	r3, #4
 8009d72:	e037      	b.n	8009de4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	3330      	adds	r3, #48	@ 0x30
 8009d78:	33ff      	adds	r3, #255	@ 0xff
 8009d7a:	33ff      	adds	r3, #255	@ 0xff
 8009d7c:	0018      	movs	r0, r3
 8009d7e:	f7fe fd77 	bl	8008870 <ld_word>
 8009d82:	0003      	movs	r3, r0
 8009d84:	001a      	movs	r2, r3
 8009d86:	4b19      	ldr	r3, [pc, #100]	@ (8009dec <check_fs+0xa4>)
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d001      	beq.n	8009d90 <check_fs+0x48>
 8009d8c:	2303      	movs	r3, #3
 8009d8e:	e029      	b.n	8009de4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2230      	movs	r2, #48	@ 0x30
 8009d94:	5c9b      	ldrb	r3, [r3, r2]
 8009d96:	2be9      	cmp	r3, #233	@ 0xe9
 8009d98:	d009      	beq.n	8009dae <check_fs+0x66>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2230      	movs	r2, #48	@ 0x30
 8009d9e:	5c9b      	ldrb	r3, [r3, r2]
 8009da0:	2beb      	cmp	r3, #235	@ 0xeb
 8009da2:	d11e      	bne.n	8009de2 <check_fs+0x9a>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2232      	movs	r2, #50	@ 0x32
 8009da8:	5c9b      	ldrb	r3, [r3, r2]
 8009daa:	2b90      	cmp	r3, #144	@ 0x90
 8009dac:	d119      	bne.n	8009de2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	3330      	adds	r3, #48	@ 0x30
 8009db2:	3336      	adds	r3, #54	@ 0x36
 8009db4:	0018      	movs	r0, r3
 8009db6:	f7fe fd76 	bl	80088a6 <ld_dword>
 8009dba:	0003      	movs	r3, r0
 8009dbc:	021b      	lsls	r3, r3, #8
 8009dbe:	0a1b      	lsrs	r3, r3, #8
 8009dc0:	4a0b      	ldr	r2, [pc, #44]	@ (8009df0 <check_fs+0xa8>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d101      	bne.n	8009dca <check_fs+0x82>
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	e00c      	b.n	8009de4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	3330      	adds	r3, #48	@ 0x30
 8009dce:	3352      	adds	r3, #82	@ 0x52
 8009dd0:	0018      	movs	r0, r3
 8009dd2:	f7fe fd68 	bl	80088a6 <ld_dword>
 8009dd6:	0003      	movs	r3, r0
 8009dd8:	4a06      	ldr	r2, [pc, #24]	@ (8009df4 <check_fs+0xac>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d101      	bne.n	8009de2 <check_fs+0x9a>
 8009dde:	2300      	movs	r3, #0
 8009de0:	e000      	b.n	8009de4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009de2:	2302      	movs	r3, #2
}
 8009de4:	0018      	movs	r0, r3
 8009de6:	46bd      	mov	sp, r7
 8009de8:	b002      	add	sp, #8
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	0000aa55 	.word	0x0000aa55
 8009df0:	00544146 	.word	0x00544146
 8009df4:	33544146 	.word	0x33544146

08009df8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009df8:	b5b0      	push	{r4, r5, r7, lr}
 8009dfa:	b096      	sub	sp, #88	@ 0x58
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	60b9      	str	r1, [r7, #8]
 8009e02:	1dfb      	adds	r3, r7, #7
 8009e04:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	0018      	movs	r0, r3
 8009e10:	f7ff ff57 	bl	8009cc2 <get_ldnumber>
 8009e14:	0003      	movs	r3, r0
 8009e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009e18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	da01      	bge.n	8009e22 <find_volume+0x2a>
 8009e1e:	230b      	movs	r3, #11
 8009e20:	e24b      	b.n	800a2ba <find_volume+0x4c2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009e22:	4bcc      	ldr	r3, [pc, #816]	@ (800a154 <find_volume+0x35c>)
 8009e24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009e26:	0092      	lsls	r2, r2, #2
 8009e28:	58d3      	ldr	r3, [r2, r3]
 8009e2a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d101      	bne.n	8009e36 <find_volume+0x3e>
 8009e32:	230c      	movs	r3, #12
 8009e34:	e241      	b.n	800a2ba <find_volume+0x4c2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e3a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009e3c:	1dfb      	adds	r3, r7, #7
 8009e3e:	1dfa      	adds	r2, r7, #7
 8009e40:	7812      	ldrb	r2, [r2, #0]
 8009e42:	2101      	movs	r1, #1
 8009e44:	438a      	bics	r2, r1
 8009e46:	701a      	strb	r2, [r3, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d01b      	beq.n	8009e88 <find_volume+0x90>
		stat = disk_status(fs->drv);
 8009e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e52:	785b      	ldrb	r3, [r3, #1]
 8009e54:	2537      	movs	r5, #55	@ 0x37
 8009e56:	197c      	adds	r4, r7, r5
 8009e58:	0018      	movs	r0, r3
 8009e5a:	f7fe fc3f 	bl	80086dc <disk_status>
 8009e5e:	0003      	movs	r3, r0
 8009e60:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009e62:	0029      	movs	r1, r5
 8009e64:	187b      	adds	r3, r7, r1
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	4013      	ands	r3, r2
 8009e6c:	d10c      	bne.n	8009e88 <find_volume+0x90>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009e6e:	1dfb      	adds	r3, r7, #7
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d006      	beq.n	8009e84 <find_volume+0x8c>
 8009e76:	187b      	adds	r3, r7, r1
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	2204      	movs	r2, #4
 8009e7c:	4013      	ands	r3, r2
 8009e7e:	d001      	beq.n	8009e84 <find_volume+0x8c>
				return FR_WRITE_PROTECTED;
 8009e80:	230a      	movs	r3, #10
 8009e82:	e21a      	b.n	800a2ba <find_volume+0x4c2>
			}
			return FR_OK;				/* The file system object is valid */
 8009e84:	2300      	movs	r3, #0
 8009e86:	e218      	b.n	800a2ba <find_volume+0x4c2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e90:	b2da      	uxtb	r2, r3
 8009e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e94:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e98:	785b      	ldrb	r3, [r3, #1]
 8009e9a:	2537      	movs	r5, #55	@ 0x37
 8009e9c:	197c      	adds	r4, r7, r5
 8009e9e:	0018      	movs	r0, r3
 8009ea0:	f7fe fc3e 	bl	8008720 <disk_initialize>
 8009ea4:	0003      	movs	r3, r0
 8009ea6:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009ea8:	197b      	adds	r3, r7, r5
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	2201      	movs	r2, #1
 8009eae:	4013      	ands	r3, r2
 8009eb0:	d001      	beq.n	8009eb6 <find_volume+0xbe>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	e201      	b.n	800a2ba <find_volume+0x4c2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009eb6:	1dfb      	adds	r3, r7, #7
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d007      	beq.n	8009ece <find_volume+0xd6>
 8009ebe:	2337      	movs	r3, #55	@ 0x37
 8009ec0:	18fb      	adds	r3, r7, r3
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	2204      	movs	r2, #4
 8009ec6:	4013      	ands	r3, r2
 8009ec8:	d001      	beq.n	8009ece <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8009eca:	230a      	movs	r3, #10
 8009ecc:	e1f5      	b.n	800a2ba <find_volume+0x4c2>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009ed2:	2557      	movs	r5, #87	@ 0x57
 8009ed4:	197c      	adds	r4, r7, r5
 8009ed6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eda:	0011      	movs	r1, r2
 8009edc:	0018      	movs	r0, r3
 8009ede:	f7ff ff33 	bl	8009d48 <check_fs>
 8009ee2:	0003      	movs	r3, r0
 8009ee4:	7023      	strb	r3, [r4, #0]
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009ee6:	197b      	adds	r3, r7, r5
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	2b02      	cmp	r3, #2
 8009eec:	d14b      	bne.n	8009f86 <find_volume+0x18e>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009eee:	2300      	movs	r3, #0
 8009ef0:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ef2:	e01d      	b.n	8009f30 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ef6:	3330      	adds	r3, #48	@ 0x30
 8009ef8:	001a      	movs	r2, r3
 8009efa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009efc:	011b      	lsls	r3, r3, #4
 8009efe:	33bf      	adds	r3, #191	@ 0xbf
 8009f00:	33ff      	adds	r3, #255	@ 0xff
 8009f02:	18d3      	adds	r3, r2, r3
 8009f04:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f08:	3304      	adds	r3, #4
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d006      	beq.n	8009f1e <find_volume+0x126>
 8009f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f12:	3308      	adds	r3, #8
 8009f14:	0018      	movs	r0, r3
 8009f16:	f7fe fcc6 	bl	80088a6 <ld_dword>
 8009f1a:	0003      	movs	r3, r0
 8009f1c:	e000      	b.n	8009f20 <find_volume+0x128>
 8009f1e:	2300      	movs	r3, #0
 8009f20:	2214      	movs	r2, #20
 8009f22:	18ba      	adds	r2, r7, r2
 8009f24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f26:	0089      	lsls	r1, r1, #2
 8009f28:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009f2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f32:	2b03      	cmp	r3, #3
 8009f34:	d9de      	bls.n	8009ef4 <find_volume+0xfc>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009f36:	2300      	movs	r3, #0
 8009f38:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8009f3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d002      	beq.n	8009f46 <find_volume+0x14e>
 8009f40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f42:	3b01      	subs	r3, #1
 8009f44:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009f46:	2314      	movs	r3, #20
 8009f48:	18fb      	adds	r3, r7, r3
 8009f4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009f4c:	0092      	lsls	r2, r2, #2
 8009f4e:	58d3      	ldr	r3, [r2, r3]
 8009f50:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009f52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d008      	beq.n	8009f6a <find_volume+0x172>
 8009f58:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f5c:	0011      	movs	r1, r2
 8009f5e:	0018      	movs	r0, r3
 8009f60:	f7ff fef2 	bl	8009d48 <check_fs>
 8009f64:	0003      	movs	r3, r0
 8009f66:	001a      	movs	r2, r3
 8009f68:	e000      	b.n	8009f6c <find_volume+0x174>
 8009f6a:	2203      	movs	r2, #3
 8009f6c:	2157      	movs	r1, #87	@ 0x57
 8009f6e:	187b      	adds	r3, r7, r1
 8009f70:	701a      	strb	r2, [r3, #0]
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009f72:	187b      	adds	r3, r7, r1
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d905      	bls.n	8009f86 <find_volume+0x18e>
 8009f7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f82:	2b03      	cmp	r3, #3
 8009f84:	d9df      	bls.n	8009f46 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009f86:	2357      	movs	r3, #87	@ 0x57
 8009f88:	18fb      	adds	r3, r7, r3
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	2b04      	cmp	r3, #4
 8009f8e:	d101      	bne.n	8009f94 <find_volume+0x19c>
 8009f90:	2301      	movs	r3, #1
 8009f92:	e192      	b.n	800a2ba <find_volume+0x4c2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009f94:	2357      	movs	r3, #87	@ 0x57
 8009f96:	18fb      	adds	r3, r7, r3
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d901      	bls.n	8009fa2 <find_volume+0x1aa>
 8009f9e:	230d      	movs	r3, #13
 8009fa0:	e18b      	b.n	800a2ba <find_volume+0x4c2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fa4:	3330      	adds	r3, #48	@ 0x30
 8009fa6:	330b      	adds	r3, #11
 8009fa8:	0018      	movs	r0, r3
 8009faa:	f7fe fc61 	bl	8008870 <ld_word>
 8009fae:	0003      	movs	r3, r0
 8009fb0:	001a      	movs	r2, r3
 8009fb2:	2380      	movs	r3, #128	@ 0x80
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d001      	beq.n	8009fbe <find_volume+0x1c6>
 8009fba:	230d      	movs	r3, #13
 8009fbc:	e17d      	b.n	800a2ba <find_volume+0x4c2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fc0:	3330      	adds	r3, #48	@ 0x30
 8009fc2:	3316      	adds	r3, #22
 8009fc4:	0018      	movs	r0, r3
 8009fc6:	f7fe fc53 	bl	8008870 <ld_word>
 8009fca:	0003      	movs	r3, r0
 8009fcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009fce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d107      	bne.n	8009fe4 <find_volume+0x1ec>
 8009fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fd6:	3330      	adds	r3, #48	@ 0x30
 8009fd8:	3324      	adds	r3, #36	@ 0x24
 8009fda:	0018      	movs	r0, r3
 8009fdc:	f7fe fc63 	bl	80088a6 <ld_dword>
 8009fe0:	0003      	movs	r3, r0
 8009fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8009fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fe6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009fe8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fec:	2240      	movs	r2, #64	@ 0x40
 8009fee:	5c9a      	ldrb	r2, [r3, r2]
 8009ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ff2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ff6:	789b      	ldrb	r3, [r3, #2]
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d005      	beq.n	800a008 <find_volume+0x210>
 8009ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ffe:	789b      	ldrb	r3, [r3, #2]
 800a000:	2b02      	cmp	r3, #2
 800a002:	d001      	beq.n	800a008 <find_volume+0x210>
 800a004:	230d      	movs	r3, #13
 800a006:	e158      	b.n	800a2ba <find_volume+0x4c2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a00a:	789b      	ldrb	r3, [r3, #2]
 800a00c:	001a      	movs	r2, r3
 800a00e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a010:	4353      	muls	r3, r2
 800a012:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a016:	223d      	movs	r2, #61	@ 0x3d
 800a018:	5c9b      	ldrb	r3, [r3, r2]
 800a01a:	001a      	movs	r2, r3
 800a01c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a01e:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a022:	895b      	ldrh	r3, [r3, #10]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d007      	beq.n	800a038 <find_volume+0x240>
 800a028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a02a:	895b      	ldrh	r3, [r3, #10]
 800a02c:	001a      	movs	r2, r3
 800a02e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a030:	895b      	ldrh	r3, [r3, #10]
 800a032:	3b01      	subs	r3, #1
 800a034:	4013      	ands	r3, r2
 800a036:	d001      	beq.n	800a03c <find_volume+0x244>
 800a038:	230d      	movs	r3, #13
 800a03a:	e13e      	b.n	800a2ba <find_volume+0x4c2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a03c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a03e:	3330      	adds	r3, #48	@ 0x30
 800a040:	3311      	adds	r3, #17
 800a042:	0018      	movs	r0, r3
 800a044:	f7fe fc14 	bl	8008870 <ld_word>
 800a048:	0003      	movs	r3, r0
 800a04a:	001a      	movs	r2, r3
 800a04c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a04e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a052:	891b      	ldrh	r3, [r3, #8]
 800a054:	220f      	movs	r2, #15
 800a056:	4013      	ands	r3, r2
 800a058:	b29b      	uxth	r3, r3
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d001      	beq.n	800a062 <find_volume+0x26a>
 800a05e:	230d      	movs	r3, #13
 800a060:	e12b      	b.n	800a2ba <find_volume+0x4c2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a064:	3330      	adds	r3, #48	@ 0x30
 800a066:	3313      	adds	r3, #19
 800a068:	0018      	movs	r0, r3
 800a06a:	f7fe fc01 	bl	8008870 <ld_word>
 800a06e:	0003      	movs	r3, r0
 800a070:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a072:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a074:	2b00      	cmp	r3, #0
 800a076:	d107      	bne.n	800a088 <find_volume+0x290>
 800a078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a07a:	3330      	adds	r3, #48	@ 0x30
 800a07c:	3320      	adds	r3, #32
 800a07e:	0018      	movs	r0, r3
 800a080:	f7fe fc11 	bl	80088a6 <ld_dword>
 800a084:	0003      	movs	r3, r0
 800a086:	64bb      	str	r3, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a08a:	3330      	adds	r3, #48	@ 0x30
 800a08c:	330e      	adds	r3, #14
 800a08e:	252e      	movs	r5, #46	@ 0x2e
 800a090:	197c      	adds	r4, r7, r5
 800a092:	0018      	movs	r0, r3
 800a094:	f7fe fbec 	bl	8008870 <ld_word>
 800a098:	0003      	movs	r3, r0
 800a09a:	8023      	strh	r3, [r4, #0]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a09c:	197b      	adds	r3, r7, r5
 800a09e:	881b      	ldrh	r3, [r3, #0]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d101      	bne.n	800a0a8 <find_volume+0x2b0>
 800a0a4:	230d      	movs	r3, #13
 800a0a6:	e108      	b.n	800a2ba <find_volume+0x4c2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a0a8:	232e      	movs	r3, #46	@ 0x2e
 800a0aa:	18fb      	adds	r3, r7, r3
 800a0ac:	881a      	ldrh	r2, [r3, #0]
 800a0ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0b0:	18d3      	adds	r3, r2, r3
 800a0b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a0b4:	8912      	ldrh	r2, [r2, #8]
 800a0b6:	0912      	lsrs	r2, r2, #4
 800a0b8:	b292      	uxth	r2, r2
 800a0ba:	189b      	adds	r3, r3, r2
 800a0bc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a0be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d201      	bcs.n	800a0ca <find_volume+0x2d2>
 800a0c6:	230d      	movs	r3, #13
 800a0c8:	e0f7      	b.n	800a2ba <find_volume+0x4c2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a0ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ce:	1ad2      	subs	r2, r2, r3
 800a0d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0d2:	895b      	ldrh	r3, [r3, #10]
 800a0d4:	0019      	movs	r1, r3
 800a0d6:	0010      	movs	r0, r2
 800a0d8:	f7f6 f828 	bl	800012c <__udivsi3>
 800a0dc:	0003      	movs	r3, r0
 800a0de:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d101      	bne.n	800a0ea <find_volume+0x2f2>
 800a0e6:	230d      	movs	r3, #13
 800a0e8:	e0e7      	b.n	800a2ba <find_volume+0x4c2>
		fmt = FS_FAT32;
 800a0ea:	2157      	movs	r1, #87	@ 0x57
 800a0ec:	187b      	adds	r3, r7, r1
 800a0ee:	2203      	movs	r2, #3
 800a0f0:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f4:	4a18      	ldr	r2, [pc, #96]	@ (800a158 <find_volume+0x360>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d802      	bhi.n	800a100 <find_volume+0x308>
 800a0fa:	187b      	adds	r3, r7, r1
 800a0fc:	2202      	movs	r2, #2
 800a0fe:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a102:	4a16      	ldr	r2, [pc, #88]	@ (800a15c <find_volume+0x364>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d803      	bhi.n	800a110 <find_volume+0x318>
 800a108:	2357      	movs	r3, #87	@ 0x57
 800a10a:	18fb      	adds	r3, r7, r3
 800a10c:	2201      	movs	r2, #1
 800a10e:	701a      	strb	r2, [r3, #0]

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a112:	1c9a      	adds	r2, r3, #2
 800a114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a116:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a11a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a11c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a11e:	232e      	movs	r3, #46	@ 0x2e
 800a120:	18fb      	adds	r3, r7, r3
 800a122:	881a      	ldrh	r2, [r3, #0]
 800a124:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a126:	18d2      	adds	r2, r2, r3
 800a128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a12a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a12c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a130:	18d2      	adds	r2, r2, r3
 800a132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a134:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800a136:	2357      	movs	r3, #87	@ 0x57
 800a138:	18fb      	adds	r3, r7, r3
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	2b03      	cmp	r3, #3
 800a13e:	d123      	bne.n	800a188 <find_volume+0x390>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a142:	3330      	adds	r3, #48	@ 0x30
 800a144:	332a      	adds	r3, #42	@ 0x2a
 800a146:	0018      	movs	r0, r3
 800a148:	f7fe fb92 	bl	8008870 <ld_word>
 800a14c:	1e03      	subs	r3, r0, #0
 800a14e:	d007      	beq.n	800a160 <find_volume+0x368>
 800a150:	230d      	movs	r3, #13
 800a152:	e0b2      	b.n	800a2ba <find_volume+0x4c2>
 800a154:	200004f8 	.word	0x200004f8
 800a158:	0000fff5 	.word	0x0000fff5
 800a15c:	00000ff5 	.word	0x00000ff5
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a162:	891b      	ldrh	r3, [r3, #8]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d001      	beq.n	800a16c <find_volume+0x374>
 800a168:	230d      	movs	r3, #13
 800a16a:	e0a6      	b.n	800a2ba <find_volume+0x4c2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a16c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a16e:	3330      	adds	r3, #48	@ 0x30
 800a170:	332c      	adds	r3, #44	@ 0x2c
 800a172:	0018      	movs	r0, r3
 800a174:	f7fe fb97 	bl	80088a6 <ld_dword>
 800a178:	0002      	movs	r2, r0
 800a17a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a17c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a17e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a180:	695b      	ldr	r3, [r3, #20]
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	647b      	str	r3, [r7, #68]	@ 0x44
 800a186:	e020      	b.n	800a1ca <find_volume+0x3d2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a18a:	891b      	ldrh	r3, [r3, #8]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d101      	bne.n	800a194 <find_volume+0x39c>
 800a190:	230d      	movs	r3, #13
 800a192:	e092      	b.n	800a2ba <find_volume+0x4c2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a196:	6a1a      	ldr	r2, [r3, #32]
 800a198:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a19a:	18d2      	adds	r2, r2, r3
 800a19c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a19e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a1a0:	2357      	movs	r3, #87	@ 0x57
 800a1a2:	18fb      	adds	r3, r7, r3
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	2b02      	cmp	r3, #2
 800a1a8:	d103      	bne.n	800a1b2 <find_volume+0x3ba>
 800a1aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ac:	695b      	ldr	r3, [r3, #20]
 800a1ae:	005b      	lsls	r3, r3, #1
 800a1b0:	e00a      	b.n	800a1c8 <find_volume+0x3d0>
 800a1b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1b4:	695a      	ldr	r2, [r3, #20]
 800a1b6:	0013      	movs	r3, r2
 800a1b8:	005b      	lsls	r3, r3, #1
 800a1ba:	189b      	adds	r3, r3, r2
 800a1bc:	085a      	lsrs	r2, r3, #1
 800a1be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1c0:	695b      	ldr	r3, [r3, #20]
 800a1c2:	2101      	movs	r1, #1
 800a1c4:	400b      	ands	r3, r1
 800a1c6:	18d3      	adds	r3, r2, r3
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a1c8:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a1ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1cc:	699a      	ldr	r2, [r3, #24]
 800a1ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1d0:	493c      	ldr	r1, [pc, #240]	@ (800a2c4 <find_volume+0x4cc>)
 800a1d2:	468c      	mov	ip, r1
 800a1d4:	4463      	add	r3, ip
 800a1d6:	0a5b      	lsrs	r3, r3, #9
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d201      	bcs.n	800a1e0 <find_volume+0x3e8>
 800a1dc:	230d      	movs	r3, #13
 800a1de:	e06c      	b.n	800a2ba <find_volume+0x4c2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a1e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	4252      	negs	r2, r2
 800a1e6:	611a      	str	r2, [r3, #16]
 800a1e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ea:	691a      	ldr	r2, [r3, #16]
 800a1ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ee:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a1f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1f2:	2280      	movs	r2, #128	@ 0x80
 800a1f4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a1f6:	2357      	movs	r3, #87	@ 0x57
 800a1f8:	18fb      	adds	r3, r7, r3
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	2b03      	cmp	r3, #3
 800a1fe:	d148      	bne.n	800a292 <find_volume+0x49a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a202:	3330      	adds	r3, #48	@ 0x30
 800a204:	3330      	adds	r3, #48	@ 0x30
 800a206:	0018      	movs	r0, r3
 800a208:	f7fe fb32 	bl	8008870 <ld_word>
 800a20c:	0003      	movs	r3, r0
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d13f      	bne.n	800a292 <find_volume+0x49a>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a212:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a214:	1c5a      	adds	r2, r3, #1
 800a216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a218:	0011      	movs	r1, r2
 800a21a:	0018      	movs	r0, r3
 800a21c:	f7fe fdd4 	bl	8008dc8 <move_window>
 800a220:	1e03      	subs	r3, r0, #0
 800a222:	d136      	bne.n	800a292 <find_volume+0x49a>
		{
			fs->fsi_flag = 0;
 800a224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a226:	2200      	movs	r2, #0
 800a228:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a22a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a22c:	3330      	adds	r3, #48	@ 0x30
 800a22e:	33ff      	adds	r3, #255	@ 0xff
 800a230:	33ff      	adds	r3, #255	@ 0xff
 800a232:	0018      	movs	r0, r3
 800a234:	f7fe fb1c 	bl	8008870 <ld_word>
 800a238:	0003      	movs	r3, r0
 800a23a:	001a      	movs	r2, r3
 800a23c:	4b22      	ldr	r3, [pc, #136]	@ (800a2c8 <find_volume+0x4d0>)
 800a23e:	429a      	cmp	r2, r3
 800a240:	d127      	bne.n	800a292 <find_volume+0x49a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a244:	3330      	adds	r3, #48	@ 0x30
 800a246:	0018      	movs	r0, r3
 800a248:	f7fe fb2d 	bl	80088a6 <ld_dword>
 800a24c:	0003      	movs	r3, r0
 800a24e:	4a1f      	ldr	r2, [pc, #124]	@ (800a2cc <find_volume+0x4d4>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d11e      	bne.n	800a292 <find_volume+0x49a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a256:	3330      	adds	r3, #48	@ 0x30
 800a258:	33e5      	adds	r3, #229	@ 0xe5
 800a25a:	33ff      	adds	r3, #255	@ 0xff
 800a25c:	0018      	movs	r0, r3
 800a25e:	f7fe fb22 	bl	80088a6 <ld_dword>
 800a262:	0003      	movs	r3, r0
 800a264:	4a1a      	ldr	r2, [pc, #104]	@ (800a2d0 <find_volume+0x4d8>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d113      	bne.n	800a292 <find_volume+0x49a>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a26a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a26c:	3330      	adds	r3, #48	@ 0x30
 800a26e:	33e9      	adds	r3, #233	@ 0xe9
 800a270:	33ff      	adds	r3, #255	@ 0xff
 800a272:	0018      	movs	r0, r3
 800a274:	f7fe fb17 	bl	80088a6 <ld_dword>
 800a278:	0002      	movs	r2, r0
 800a27a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a27c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a27e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a280:	3330      	adds	r3, #48	@ 0x30
 800a282:	33ed      	adds	r3, #237	@ 0xed
 800a284:	33ff      	adds	r3, #255	@ 0xff
 800a286:	0018      	movs	r0, r3
 800a288:	f7fe fb0d 	bl	80088a6 <ld_dword>
 800a28c:	0002      	movs	r2, r0
 800a28e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a290:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a294:	2257      	movs	r2, #87	@ 0x57
 800a296:	18ba      	adds	r2, r7, r2
 800a298:	7812      	ldrb	r2, [r2, #0]
 800a29a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a29c:	4b0d      	ldr	r3, [pc, #52]	@ (800a2d4 <find_volume+0x4dc>)
 800a29e:	881b      	ldrh	r3, [r3, #0]
 800a2a0:	3301      	adds	r3, #1
 800a2a2:	b29a      	uxth	r2, r3
 800a2a4:	4b0b      	ldr	r3, [pc, #44]	@ (800a2d4 <find_volume+0x4dc>)
 800a2a6:	801a      	strh	r2, [r3, #0]
 800a2a8:	4b0a      	ldr	r3, [pc, #40]	@ (800a2d4 <find_volume+0x4dc>)
 800a2aa:	881a      	ldrh	r2, [r3, #0]
 800a2ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ae:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a2b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2b2:	0018      	movs	r0, r3
 800a2b4:	f7fe fd20 	bl	8008cf8 <clear_lock>
#endif
	return FR_OK;
 800a2b8:	2300      	movs	r3, #0
}
 800a2ba:	0018      	movs	r0, r3
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	b016      	add	sp, #88	@ 0x58
 800a2c0:	bdb0      	pop	{r4, r5, r7, pc}
 800a2c2:	46c0      	nop			@ (mov r8, r8)
 800a2c4:	000001ff 	.word	0x000001ff
 800a2c8:	0000aa55 	.word	0x0000aa55
 800a2cc:	41615252 	.word	0x41615252
 800a2d0:	61417272 	.word	0x61417272
 800a2d4:	200004fc 	.word	0x200004fc

0800a2d8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a2d8:	b590      	push	{r4, r7, lr}
 800a2da:	b085      	sub	sp, #20
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a2e2:	240f      	movs	r4, #15
 800a2e4:	193b      	adds	r3, r7, r4
 800a2e6:	2209      	movs	r2, #9
 800a2e8:	701a      	strb	r2, [r3, #0]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d01d      	beq.n	800a32c <validate+0x54>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d019      	beq.n	800a32c <validate+0x54>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d014      	beq.n	800a32c <validate+0x54>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	889a      	ldrh	r2, [r3, #4]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	88db      	ldrh	r3, [r3, #6]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d10d      	bne.n	800a32c <validate+0x54>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	785b      	ldrb	r3, [r3, #1]
 800a316:	0018      	movs	r0, r3
 800a318:	f7fe f9e0 	bl	80086dc <disk_status>
 800a31c:	0003      	movs	r3, r0
 800a31e:	001a      	movs	r2, r3
 800a320:	2301      	movs	r3, #1
 800a322:	4013      	ands	r3, r2
 800a324:	d102      	bne.n	800a32c <validate+0x54>
			res = FR_OK;
 800a326:	193b      	adds	r3, r7, r4
 800a328:	2200      	movs	r2, #0
 800a32a:	701a      	strb	r2, [r3, #0]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a32c:	230f      	movs	r3, #15
 800a32e:	18fb      	adds	r3, r7, r3
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d102      	bne.n	800a33c <validate+0x64>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	e000      	b.n	800a33e <validate+0x66>
 800a33c:	2200      	movs	r2, #0
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	601a      	str	r2, [r3, #0]
	return res;
 800a342:	230f      	movs	r3, #15
 800a344:	18fb      	adds	r3, r7, r3
 800a346:	781b      	ldrb	r3, [r3, #0]
}
 800a348:	0018      	movs	r0, r3
 800a34a:	46bd      	mov	sp, r7
 800a34c:	b005      	add	sp, #20
 800a34e:	bd90      	pop	{r4, r7, pc}

0800a350 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a350:	b5b0      	push	{r4, r5, r7, lr}
 800a352:	b088      	sub	sp, #32
 800a354:	af00      	add	r7, sp, #0
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	60b9      	str	r1, [r7, #8]
 800a35a:	1dfb      	adds	r3, r7, #7
 800a35c:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a362:	2310      	movs	r3, #16
 800a364:	18fb      	adds	r3, r7, r3
 800a366:	0018      	movs	r0, r3
 800a368:	f7ff fcab 	bl	8009cc2 <get_ldnumber>
 800a36c:	0003      	movs	r3, r0
 800a36e:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a370:	69fb      	ldr	r3, [r7, #28]
 800a372:	2b00      	cmp	r3, #0
 800a374:	da01      	bge.n	800a37a <f_mount+0x2a>
 800a376:	230b      	movs	r3, #11
 800a378:	e030      	b.n	800a3dc <f_mount+0x8c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a37a:	4b1a      	ldr	r3, [pc, #104]	@ (800a3e4 <f_mount+0x94>)
 800a37c:	69fa      	ldr	r2, [r7, #28]
 800a37e:	0092      	lsls	r2, r2, #2
 800a380:	58d3      	ldr	r3, [r2, r3]
 800a382:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a384:	69bb      	ldr	r3, [r7, #24]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d006      	beq.n	800a398 <f_mount+0x48>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a38a:	69bb      	ldr	r3, [r7, #24]
 800a38c:	0018      	movs	r0, r3
 800a38e:	f7fe fcb3 	bl	8008cf8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a392:	69bb      	ldr	r3, [r7, #24]
 800a394:	2200      	movs	r2, #0
 800a396:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d002      	beq.n	800a3a4 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a3a4:	68f9      	ldr	r1, [r7, #12]
 800a3a6:	4b0f      	ldr	r3, [pc, #60]	@ (800a3e4 <f_mount+0x94>)
 800a3a8:	69fa      	ldr	r2, [r7, #28]
 800a3aa:	0092      	lsls	r2, r2, #2
 800a3ac:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d003      	beq.n	800a3bc <f_mount+0x6c>
 800a3b4:	1dfb      	adds	r3, r7, #7
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d001      	beq.n	800a3c0 <f_mount+0x70>
 800a3bc:	2300      	movs	r3, #0
 800a3be:	e00d      	b.n	800a3dc <f_mount+0x8c>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a3c0:	2517      	movs	r5, #23
 800a3c2:	197c      	adds	r4, r7, r5
 800a3c4:	230c      	movs	r3, #12
 800a3c6:	18f9      	adds	r1, r7, r3
 800a3c8:	2308      	movs	r3, #8
 800a3ca:	18fb      	adds	r3, r7, r3
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	0018      	movs	r0, r3
 800a3d0:	f7ff fd12 	bl	8009df8 <find_volume>
 800a3d4:	0003      	movs	r3, r0
 800a3d6:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 800a3d8:	197b      	adds	r3, r7, r5
 800a3da:	781b      	ldrb	r3, [r3, #0]
}
 800a3dc:	0018      	movs	r0, r3
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	b008      	add	sp, #32
 800a3e2:	bdb0      	pop	{r4, r5, r7, pc}
 800a3e4:	200004f8 	.word	0x200004f8

0800a3e8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3ea:	b099      	sub	sp, #100	@ 0x64
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	60b9      	str	r1, [r7, #8]
 800a3f2:	1dfb      	adds	r3, r7, #7
 800a3f4:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d101      	bne.n	800a400 <f_open+0x18>
 800a3fc:	2309      	movs	r3, #9
 800a3fe:	e1e3      	b.n	800a7c8 <f_open+0x3e0>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a400:	1dfb      	adds	r3, r7, #7
 800a402:	1dfa      	adds	r2, r7, #7
 800a404:	7812      	ldrb	r2, [r2, #0]
 800a406:	213f      	movs	r1, #63	@ 0x3f
 800a408:	400a      	ands	r2, r1
 800a40a:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800a40c:	255f      	movs	r5, #95	@ 0x5f
 800a40e:	197c      	adds	r4, r7, r5
 800a410:	1dfb      	adds	r3, r7, #7
 800a412:	781a      	ldrb	r2, [r3, #0]
 800a414:	2310      	movs	r3, #16
 800a416:	18f9      	adds	r1, r7, r3
 800a418:	2308      	movs	r3, #8
 800a41a:	18fb      	adds	r3, r7, r3
 800a41c:	0018      	movs	r0, r3
 800a41e:	f7ff fceb 	bl	8009df8 <find_volume>
 800a422:	0003      	movs	r3, r0
 800a424:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800a426:	197b      	adds	r3, r7, r5
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d000      	beq.n	800a430 <f_open+0x48>
 800a42e:	e1c0      	b.n	800a7b2 <f_open+0x3ca>
		dj.obj.fs = fs;
 800a430:	693a      	ldr	r2, [r7, #16]
 800a432:	2614      	movs	r6, #20
 800a434:	19bb      	adds	r3, r7, r6
 800a436:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a438:	68ba      	ldr	r2, [r7, #8]
 800a43a:	197c      	adds	r4, r7, r5
 800a43c:	19bb      	adds	r3, r7, r6
 800a43e:	0011      	movs	r1, r2
 800a440:	0018      	movs	r0, r3
 800a442:	f7ff fbb9 	bl	8009bb8 <follow_path>
 800a446:	0003      	movs	r3, r0
 800a448:	7023      	strb	r3, [r4, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a44a:	0029      	movs	r1, r5
 800a44c:	197b      	adds	r3, r7, r5
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d11b      	bne.n	800a48c <f_open+0xa4>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a454:	19bb      	adds	r3, r7, r6
 800a456:	222f      	movs	r2, #47	@ 0x2f
 800a458:	5c9b      	ldrb	r3, [r3, r2]
 800a45a:	b25b      	sxtb	r3, r3
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	da03      	bge.n	800a468 <f_open+0x80>
				res = FR_INVALID_NAME;
 800a460:	187b      	adds	r3, r7, r1
 800a462:	2206      	movs	r2, #6
 800a464:	701a      	strb	r2, [r3, #0]
 800a466:	e011      	b.n	800a48c <f_open+0xa4>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a468:	1dfb      	adds	r3, r7, #7
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	2201      	movs	r2, #1
 800a46e:	429a      	cmp	r2, r3
 800a470:	419b      	sbcs	r3, r3
 800a472:	425b      	negs	r3, r3
 800a474:	b2db      	uxtb	r3, r3
 800a476:	001a      	movs	r2, r3
 800a478:	235f      	movs	r3, #95	@ 0x5f
 800a47a:	18fc      	adds	r4, r7, r3
 800a47c:	2314      	movs	r3, #20
 800a47e:	18fb      	adds	r3, r7, r3
 800a480:	0011      	movs	r1, r2
 800a482:	0018      	movs	r0, r3
 800a484:	f7fe faee 	bl	8008a64 <chk_lock>
 800a488:	0003      	movs	r3, r0
 800a48a:	7023      	strb	r3, [r4, #0]
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a48c:	1dfb      	adds	r3, r7, #7
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	221c      	movs	r2, #28
 800a492:	4013      	ands	r3, r2
 800a494:	d100      	bne.n	800a498 <f_open+0xb0>
 800a496:	e096      	b.n	800a5c6 <f_open+0x1de>
			if (res != FR_OK) {					/* No file, create new */
 800a498:	225f      	movs	r2, #95	@ 0x5f
 800a49a:	18bb      	adds	r3, r7, r2
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d01a      	beq.n	800a4d8 <f_open+0xf0>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a4a2:	18bb      	adds	r3, r7, r2
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	2b04      	cmp	r3, #4
 800a4a8:	d10f      	bne.n	800a4ca <f_open+0xe2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a4aa:	f7fe fb33 	bl	8008b14 <enq_lock>
 800a4ae:	1e03      	subs	r3, r0, #0
 800a4b0:	d007      	beq.n	800a4c2 <f_open+0xda>
 800a4b2:	2314      	movs	r3, #20
 800a4b4:	18fb      	adds	r3, r7, r3
 800a4b6:	0018      	movs	r0, r3
 800a4b8:	f7ff fa93 	bl	80099e2 <dir_register>
 800a4bc:	0003      	movs	r3, r0
 800a4be:	001a      	movs	r2, r3
 800a4c0:	e000      	b.n	800a4c4 <f_open+0xdc>
 800a4c2:	2212      	movs	r2, #18
 800a4c4:	235f      	movs	r3, #95	@ 0x5f
 800a4c6:	18fb      	adds	r3, r7, r3
 800a4c8:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a4ca:	1dfb      	adds	r3, r7, #7
 800a4cc:	1dfa      	adds	r2, r7, #7
 800a4ce:	7812      	ldrb	r2, [r2, #0]
 800a4d0:	2108      	movs	r1, #8
 800a4d2:	430a      	orrs	r2, r1
 800a4d4:	701a      	strb	r2, [r3, #0]
 800a4d6:	e014      	b.n	800a502 <f_open+0x11a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a4d8:	2314      	movs	r3, #20
 800a4da:	18fb      	adds	r3, r7, r3
 800a4dc:	799b      	ldrb	r3, [r3, #6]
 800a4de:	001a      	movs	r2, r3
 800a4e0:	2311      	movs	r3, #17
 800a4e2:	4013      	ands	r3, r2
 800a4e4:	d004      	beq.n	800a4f0 <f_open+0x108>
					res = FR_DENIED;
 800a4e6:	235f      	movs	r3, #95	@ 0x5f
 800a4e8:	18fb      	adds	r3, r7, r3
 800a4ea:	2207      	movs	r2, #7
 800a4ec:	701a      	strb	r2, [r3, #0]
 800a4ee:	e008      	b.n	800a502 <f_open+0x11a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a4f0:	1dfb      	adds	r3, r7, #7
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	2204      	movs	r2, #4
 800a4f6:	4013      	ands	r3, r2
 800a4f8:	d003      	beq.n	800a502 <f_open+0x11a>
 800a4fa:	235f      	movs	r3, #95	@ 0x5f
 800a4fc:	18fb      	adds	r3, r7, r3
 800a4fe:	2208      	movs	r2, #8
 800a500:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a502:	245f      	movs	r4, #95	@ 0x5f
 800a504:	193b      	adds	r3, r7, r4
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d000      	beq.n	800a50e <f_open+0x126>
 800a50c:	e07b      	b.n	800a606 <f_open+0x21e>
 800a50e:	1dfb      	adds	r3, r7, #7
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	2208      	movs	r2, #8
 800a514:	4013      	ands	r3, r2
 800a516:	d100      	bne.n	800a51a <f_open+0x132>
 800a518:	e075      	b.n	800a606 <f_open+0x21e>
				dw = GET_FATTIME();
 800a51a:	f7fd fb07 	bl	8007b2c <get_fattime>
 800a51e:	0003      	movs	r3, r0
 800a520:	653b      	str	r3, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a522:	2514      	movs	r5, #20
 800a524:	197b      	adds	r3, r7, r5
 800a526:	6a1b      	ldr	r3, [r3, #32]
 800a528:	330e      	adds	r3, #14
 800a52a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a52c:	0011      	movs	r1, r2
 800a52e:	0018      	movs	r0, r3
 800a530:	f7fe f9f8 	bl	8008924 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a534:	197b      	adds	r3, r7, r5
 800a536:	6a1b      	ldr	r3, [r3, #32]
 800a538:	3316      	adds	r3, #22
 800a53a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a53c:	0011      	movs	r1, r2
 800a53e:	0018      	movs	r0, r3
 800a540:	f7fe f9f0 	bl	8008924 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a544:	197b      	adds	r3, r7, r5
 800a546:	6a1b      	ldr	r3, [r3, #32]
 800a548:	330b      	adds	r3, #11
 800a54a:	2220      	movs	r2, #32
 800a54c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a54e:	693a      	ldr	r2, [r7, #16]
 800a550:	197b      	adds	r3, r7, r5
 800a552:	6a1b      	ldr	r3, [r3, #32]
 800a554:	0019      	movs	r1, r3
 800a556:	0010      	movs	r0, r2
 800a558:	f7ff f99c 	bl	8009894 <ld_clust>
 800a55c:	0003      	movs	r3, r0
 800a55e:	64fb      	str	r3, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a560:	6938      	ldr	r0, [r7, #16]
 800a562:	197b      	adds	r3, r7, r5
 800a564:	6a1b      	ldr	r3, [r3, #32]
 800a566:	2200      	movs	r2, #0
 800a568:	0019      	movs	r1, r3
 800a56a:	f7ff f9b2 	bl	80098d2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a56e:	197b      	adds	r3, r7, r5
 800a570:	6a1b      	ldr	r3, [r3, #32]
 800a572:	331c      	adds	r3, #28
 800a574:	2100      	movs	r1, #0
 800a576:	0018      	movs	r0, r3
 800a578:	f7fe f9d4 	bl	8008924 <st_dword>
					fs->wflag = 1;
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	2201      	movs	r2, #1
 800a580:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a582:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a584:	2b00      	cmp	r3, #0
 800a586:	d03e      	beq.n	800a606 <f_open+0x21e>
						dw = fs->winsect;
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a58c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a58e:	0026      	movs	r6, r4
 800a590:	193c      	adds	r4, r7, r4
 800a592:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a594:	197b      	adds	r3, r7, r5
 800a596:	2200      	movs	r2, #0
 800a598:	0018      	movs	r0, r3
 800a59a:	f7fe fe8e 	bl	80092ba <remove_chain>
 800a59e:	0003      	movs	r3, r0
 800a5a0:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK) {
 800a5a2:	19bb      	adds	r3, r7, r6
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d12d      	bne.n	800a606 <f_open+0x21e>
							res = move_window(fs, dw);
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	19bc      	adds	r4, r7, r6
 800a5ae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a5b0:	0011      	movs	r1, r2
 800a5b2:	0018      	movs	r0, r3
 800a5b4:	f7fe fc08 	bl	8008dc8 <move_window>
 800a5b8:	0003      	movs	r3, r0
 800a5ba:	7023      	strb	r3, [r4, #0]
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a5c0:	3a01      	subs	r2, #1
 800a5c2:	60da      	str	r2, [r3, #12]
 800a5c4:	e01f      	b.n	800a606 <f_open+0x21e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a5c6:	215f      	movs	r1, #95	@ 0x5f
 800a5c8:	187b      	adds	r3, r7, r1
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d11a      	bne.n	800a606 <f_open+0x21e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a5d0:	2314      	movs	r3, #20
 800a5d2:	18fb      	adds	r3, r7, r3
 800a5d4:	799b      	ldrb	r3, [r3, #6]
 800a5d6:	001a      	movs	r2, r3
 800a5d8:	2310      	movs	r3, #16
 800a5da:	4013      	ands	r3, r2
 800a5dc:	d003      	beq.n	800a5e6 <f_open+0x1fe>
					res = FR_NO_FILE;
 800a5de:	187b      	adds	r3, r7, r1
 800a5e0:	2204      	movs	r2, #4
 800a5e2:	701a      	strb	r2, [r3, #0]
 800a5e4:	e00f      	b.n	800a606 <f_open+0x21e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a5e6:	1dfb      	adds	r3, r7, #7
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	2202      	movs	r2, #2
 800a5ec:	4013      	ands	r3, r2
 800a5ee:	d00a      	beq.n	800a606 <f_open+0x21e>
 800a5f0:	2314      	movs	r3, #20
 800a5f2:	18fb      	adds	r3, r7, r3
 800a5f4:	799b      	ldrb	r3, [r3, #6]
 800a5f6:	001a      	movs	r2, r3
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	4013      	ands	r3, r2
 800a5fc:	d003      	beq.n	800a606 <f_open+0x21e>
						res = FR_DENIED;
 800a5fe:	235f      	movs	r3, #95	@ 0x5f
 800a600:	18fb      	adds	r3, r7, r3
 800a602:	2207      	movs	r2, #7
 800a604:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		if (res == FR_OK) {
 800a606:	235f      	movs	r3, #95	@ 0x5f
 800a608:	18fb      	adds	r3, r7, r3
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d12b      	bne.n	800a668 <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a610:	1dfb      	adds	r3, r7, #7
 800a612:	781b      	ldrb	r3, [r3, #0]
 800a614:	2208      	movs	r2, #8
 800a616:	4013      	ands	r3, r2
 800a618:	d005      	beq.n	800a626 <f_open+0x23e>
				mode |= FA_MODIFIED;
 800a61a:	1dfb      	adds	r3, r7, #7
 800a61c:	1dfa      	adds	r2, r7, #7
 800a61e:	7812      	ldrb	r2, [r2, #0]
 800a620:	2140      	movs	r1, #64	@ 0x40
 800a622:	430a      	orrs	r2, r1
 800a624:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800a62e:	2114      	movs	r1, #20
 800a630:	187b      	adds	r3, r7, r1
 800a632:	6a1a      	ldr	r2, [r3, #32]
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a638:	1dfb      	adds	r3, r7, #7
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	2201      	movs	r2, #1
 800a63e:	429a      	cmp	r2, r3
 800a640:	419b      	sbcs	r3, r3
 800a642:	425b      	negs	r3, r3
 800a644:	b2db      	uxtb	r3, r3
 800a646:	001a      	movs	r2, r3
 800a648:	187b      	adds	r3, r7, r1
 800a64a:	0011      	movs	r1, r2
 800a64c:	0018      	movs	r0, r3
 800a64e:	f7fe fa7f 	bl	8008b50 <inc_lock>
 800a652:	0002      	movs	r2, r0
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	691b      	ldr	r3, [r3, #16]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d103      	bne.n	800a668 <f_open+0x280>
 800a660:	235f      	movs	r3, #95	@ 0x5f
 800a662:	18fb      	adds	r3, r7, r3
 800a664:	2202      	movs	r2, #2
 800a666:	701a      	strb	r2, [r3, #0]
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a668:	235f      	movs	r3, #95	@ 0x5f
 800a66a:	18fb      	adds	r3, r7, r3
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d000      	beq.n	800a674 <f_open+0x28c>
 800a672:	e09e      	b.n	800a7b2 <f_open+0x3ca>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a674:	693a      	ldr	r2, [r7, #16]
 800a676:	2414      	movs	r4, #20
 800a678:	193b      	adds	r3, r7, r4
 800a67a:	6a1b      	ldr	r3, [r3, #32]
 800a67c:	0019      	movs	r1, r3
 800a67e:	0010      	movs	r0, r2
 800a680:	f7ff f908 	bl	8009894 <ld_clust>
 800a684:	0002      	movs	r2, r0
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a68a:	193b      	adds	r3, r7, r4
 800a68c:	6a1b      	ldr	r3, [r3, #32]
 800a68e:	331c      	adds	r3, #28
 800a690:	0018      	movs	r0, r3
 800a692:	f7fe f908 	bl	80088a6 <ld_dword>
 800a696:	0002      	movs	r2, r0
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a6a2:	693a      	ldr	r2, [r7, #16]
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	88da      	ldrh	r2, [r3, #6]
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	1dfa      	adds	r2, r7, #7
 800a6b4:	7812      	ldrb	r2, [r2, #0]
 800a6b6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	3330      	adds	r3, #48	@ 0x30
 800a6ce:	2280      	movs	r2, #128	@ 0x80
 800a6d0:	0092      	lsls	r2, r2, #2
 800a6d2:	2100      	movs	r1, #0
 800a6d4:	0018      	movs	r0, r3
 800a6d6:	f7fe f96e 	bl	80089b6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a6da:	1dfb      	adds	r3, r7, #7
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	2220      	movs	r2, #32
 800a6e0:	4013      	ands	r3, r2
 800a6e2:	d066      	beq.n	800a7b2 <f_open+0x3ca>
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d062      	beq.n	800a7b2 <f_open+0x3ca>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	68da      	ldr	r2, [r3, #12]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	895b      	ldrh	r3, [r3, #10]
 800a6f8:	025b      	lsls	r3, r3, #9
 800a6fa:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	689b      	ldr	r3, [r3, #8]
 800a700:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	68db      	ldr	r3, [r3, #12]
 800a706:	657b      	str	r3, [r7, #84]	@ 0x54
 800a708:	e019      	b.n	800a73e <f_open+0x356>
					clst = get_fat(&fp->obj, clst);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a70e:	0011      	movs	r1, r2
 800a710:	0018      	movs	r0, r3
 800a712:	f7fe fc27 	bl	8008f64 <get_fat>
 800a716:	0003      	movs	r3, r0
 800a718:	65bb      	str	r3, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a71a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d803      	bhi.n	800a728 <f_open+0x340>
 800a720:	235f      	movs	r3, #95	@ 0x5f
 800a722:	18fb      	adds	r3, r7, r3
 800a724:	2202      	movs	r2, #2
 800a726:	701a      	strb	r2, [r3, #0]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a728:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a72a:	3301      	adds	r3, #1
 800a72c:	d103      	bne.n	800a736 <f_open+0x34e>
 800a72e:	235f      	movs	r3, #95	@ 0x5f
 800a730:	18fb      	adds	r3, r7, r3
 800a732:	2201      	movs	r2, #1
 800a734:	701a      	strb	r2, [r3, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a736:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a738:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a73a:	1ad3      	subs	r3, r2, r3
 800a73c:	657b      	str	r3, [r7, #84]	@ 0x54
 800a73e:	235f      	movs	r3, #95	@ 0x5f
 800a740:	18fb      	adds	r3, r7, r3
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d103      	bne.n	800a750 <f_open+0x368>
 800a748:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a74a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d8dc      	bhi.n	800a70a <f_open+0x322>
				}
				fp->clust = clst;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a754:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a756:	245f      	movs	r4, #95	@ 0x5f
 800a758:	193b      	adds	r3, r7, r4
 800a75a:	781b      	ldrb	r3, [r3, #0]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d128      	bne.n	800a7b2 <f_open+0x3ca>
 800a760:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a762:	05db      	lsls	r3, r3, #23
 800a764:	0ddb      	lsrs	r3, r3, #23
 800a766:	d024      	beq.n	800a7b2 <f_open+0x3ca>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a76c:	0011      	movs	r1, r2
 800a76e:	0018      	movs	r0, r3
 800a770:	f7fe fbdc 	bl	8008f2c <clust2sect>
 800a774:	0003      	movs	r3, r0
 800a776:	647b      	str	r3, [r7, #68]	@ 0x44
 800a778:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d103      	bne.n	800a786 <f_open+0x39e>
						res = FR_INT_ERR;
 800a77e:	193b      	adds	r3, r7, r4
 800a780:	2202      	movs	r2, #2
 800a782:	701a      	strb	r2, [r3, #0]
 800a784:	e015      	b.n	800a7b2 <f_open+0x3ca>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a786:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a788:	0a5a      	lsrs	r2, r3, #9
 800a78a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a78c:	18d2      	adds	r2, r2, r3
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	7858      	ldrb	r0, [r3, #1]
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	3330      	adds	r3, #48	@ 0x30
 800a79a:	0019      	movs	r1, r3
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	6a1a      	ldr	r2, [r3, #32]
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	f7fd ffed 	bl	8008780 <disk_read>
 800a7a6:	1e03      	subs	r3, r0, #0
 800a7a8:	d003      	beq.n	800a7b2 <f_open+0x3ca>
 800a7aa:	235f      	movs	r3, #95	@ 0x5f
 800a7ac:	18fb      	adds	r3, r7, r3
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	701a      	strb	r2, [r3, #0]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a7b2:	235f      	movs	r3, #95	@ 0x5f
 800a7b4:	18fb      	adds	r3, r7, r3
 800a7b6:	781b      	ldrb	r3, [r3, #0]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d002      	beq.n	800a7c2 <f_open+0x3da>
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a7c2:	235f      	movs	r3, #95	@ 0x5f
 800a7c4:	18fb      	adds	r3, r7, r3
 800a7c6:	781b      	ldrb	r3, [r3, #0]
}
 800a7c8:	0018      	movs	r0, r3
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	b019      	add	sp, #100	@ 0x64
 800a7ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a7d0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a7d0:	b5b0      	push	{r4, r5, r7, lr}
 800a7d2:	b08e      	sub	sp, #56	@ 0x38
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	60b9      	str	r1, [r7, #8]
 800a7da:	607a      	str	r2, [r7, #4]
 800a7dc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2537      	movs	r5, #55	@ 0x37
 800a7ec:	197c      	adds	r4, r7, r5
 800a7ee:	2214      	movs	r2, #20
 800a7f0:	18ba      	adds	r2, r7, r2
 800a7f2:	0011      	movs	r1, r2
 800a7f4:	0018      	movs	r0, r3
 800a7f6:	f7ff fd6f 	bl	800a2d8 <validate>
 800a7fa:	0003      	movs	r3, r0
 800a7fc:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a7fe:	197b      	adds	r3, r7, r5
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d107      	bne.n	800a816 <f_read+0x46>
 800a806:	197b      	adds	r3, r7, r5
 800a808:	68fa      	ldr	r2, [r7, #12]
 800a80a:	7d52      	ldrb	r2, [r2, #21]
 800a80c:	701a      	strb	r2, [r3, #0]
 800a80e:	197b      	adds	r3, r7, r5
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d003      	beq.n	800a81e <f_read+0x4e>
 800a816:	2337      	movs	r3, #55	@ 0x37
 800a818:	18fb      	adds	r3, r7, r3
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	e115      	b.n	800aa4a <f_read+0x27a>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	7d1b      	ldrb	r3, [r3, #20]
 800a822:	001a      	movs	r2, r3
 800a824:	2301      	movs	r3, #1
 800a826:	4013      	ands	r3, r2
 800a828:	d101      	bne.n	800a82e <f_read+0x5e>
 800a82a:	2307      	movs	r3, #7
 800a82c:	e10d      	b.n	800aa4a <f_read+0x27a>
	remain = fp->obj.objsize - fp->fptr;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	68da      	ldr	r2, [r3, #12]
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	699b      	ldr	r3, [r3, #24]
 800a836:	1ad3      	subs	r3, r2, r3
 800a838:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a83a:	687a      	ldr	r2, [r7, #4]
 800a83c:	6a3b      	ldr	r3, [r7, #32]
 800a83e:	429a      	cmp	r2, r3
 800a840:	d800      	bhi.n	800a844 <f_read+0x74>
 800a842:	e0fd      	b.n	800aa40 <f_read+0x270>
 800a844:	6a3b      	ldr	r3, [r7, #32]
 800a846:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a848:	e0fa      	b.n	800aa40 <f_read+0x270>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	699b      	ldr	r3, [r3, #24]
 800a84e:	05db      	lsls	r3, r3, #23
 800a850:	0ddb      	lsrs	r3, r3, #23
 800a852:	d000      	beq.n	800a856 <f_read+0x86>
 800a854:	e0c5      	b.n	800a9e2 <f_read+0x212>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	699b      	ldr	r3, [r3, #24]
 800a85a:	0a5b      	lsrs	r3, r3, #9
 800a85c:	697a      	ldr	r2, [r7, #20]
 800a85e:	8952      	ldrh	r2, [r2, #10]
 800a860:	3a01      	subs	r2, #1
 800a862:	4013      	ands	r3, r2
 800a864:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a866:	69fb      	ldr	r3, [r7, #28]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d131      	bne.n	800a8d0 <f_read+0x100>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	699b      	ldr	r3, [r3, #24]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d103      	bne.n	800a87c <f_read+0xac>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	689b      	ldr	r3, [r3, #8]
 800a878:	633b      	str	r3, [r7, #48]	@ 0x30
 800a87a:	e016      	b.n	800a8aa <f_read+0xda>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a880:	2b00      	cmp	r3, #0
 800a882:	d009      	beq.n	800a898 <f_read+0xc8>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	699a      	ldr	r2, [r3, #24]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	0011      	movs	r1, r2
 800a88c:	0018      	movs	r0, r3
 800a88e:	f7fe fe2d 	bl	80094ec <clmt_clust>
 800a892:	0003      	movs	r3, r0
 800a894:	633b      	str	r3, [r7, #48]	@ 0x30
 800a896:	e008      	b.n	800a8aa <f_read+0xda>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a898:	68fa      	ldr	r2, [r7, #12]
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	69db      	ldr	r3, [r3, #28]
 800a89e:	0019      	movs	r1, r3
 800a8a0:	0010      	movs	r0, r2
 800a8a2:	f7fe fb5f 	bl	8008f64 <get_fat>
 800a8a6:	0003      	movs	r3, r0
 800a8a8:	633b      	str	r3, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d804      	bhi.n	800a8ba <f_read+0xea>
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2202      	movs	r2, #2
 800a8b4:	755a      	strb	r2, [r3, #21]
 800a8b6:	2302      	movs	r3, #2
 800a8b8:	e0c7      	b.n	800aa4a <f_read+0x27a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a8ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8bc:	3301      	adds	r3, #1
 800a8be:	d104      	bne.n	800a8ca <f_read+0xfa>
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	755a      	strb	r2, [r3, #21]
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e0bf      	b.n	800aa4a <f_read+0x27a>
				fp->clust = clst;				/* Update current cluster */
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8ce:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a8d0:	697a      	ldr	r2, [r7, #20]
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	69db      	ldr	r3, [r3, #28]
 800a8d6:	0019      	movs	r1, r3
 800a8d8:	0010      	movs	r0, r2
 800a8da:	f7fe fb27 	bl	8008f2c <clust2sect>
 800a8de:	0003      	movs	r3, r0
 800a8e0:	61bb      	str	r3, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a8e2:	69bb      	ldr	r3, [r7, #24]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d104      	bne.n	800a8f2 <f_read+0x122>
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2202      	movs	r2, #2
 800a8ec:	755a      	strb	r2, [r3, #21]
 800a8ee:	2302      	movs	r3, #2
 800a8f0:	e0ab      	b.n	800aa4a <f_read+0x27a>
			sect += csect;
 800a8f2:	69ba      	ldr	r2, [r7, #24]
 800a8f4:	69fb      	ldr	r3, [r7, #28]
 800a8f6:	18d3      	adds	r3, r2, r3
 800a8f8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	0a5b      	lsrs	r3, r3, #9
 800a8fe:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a902:	2b00      	cmp	r3, #0
 800a904:	d038      	beq.n	800a978 <f_read+0x1a8>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a906:	69fa      	ldr	r2, [r7, #28]
 800a908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a90a:	18d3      	adds	r3, r2, r3
 800a90c:	697a      	ldr	r2, [r7, #20]
 800a90e:	8952      	ldrh	r2, [r2, #10]
 800a910:	4293      	cmp	r3, r2
 800a912:	d905      	bls.n	800a920 <f_read+0x150>
					cc = fs->csize - csect;
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	895b      	ldrh	r3, [r3, #10]
 800a918:	001a      	movs	r2, r3
 800a91a:	69fb      	ldr	r3, [r7, #28]
 800a91c:	1ad3      	subs	r3, r2, r3
 800a91e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	7858      	ldrb	r0, [r3, #1]
 800a924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a926:	69ba      	ldr	r2, [r7, #24]
 800a928:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a92a:	f7fd ff29 	bl	8008780 <disk_read>
 800a92e:	1e03      	subs	r3, r0, #0
 800a930:	d004      	beq.n	800a93c <f_read+0x16c>
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	2201      	movs	r2, #1
 800a936:	755a      	strb	r2, [r3, #21]
 800a938:	2301      	movs	r3, #1
 800a93a:	e086      	b.n	800aa4a <f_read+0x27a>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	7d1b      	ldrb	r3, [r3, #20]
 800a940:	b25b      	sxtb	r3, r3
 800a942:	2b00      	cmp	r3, #0
 800a944:	da14      	bge.n	800a970 <f_read+0x1a0>
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	6a1a      	ldr	r2, [r3, #32]
 800a94a:	69bb      	ldr	r3, [r7, #24]
 800a94c:	1ad3      	subs	r3, r2, r3
 800a94e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a950:	429a      	cmp	r2, r3
 800a952:	d90d      	bls.n	800a970 <f_read+0x1a0>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	6a1a      	ldr	r2, [r3, #32]
 800a958:	69bb      	ldr	r3, [r7, #24]
 800a95a:	1ad3      	subs	r3, r2, r3
 800a95c:	025b      	lsls	r3, r3, #9
 800a95e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a960:	18d0      	adds	r0, r2, r3
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	3330      	adds	r3, #48	@ 0x30
 800a966:	2280      	movs	r2, #128	@ 0x80
 800a968:	0092      	lsls	r2, r2, #2
 800a96a:	0019      	movs	r1, r3
 800a96c:	f7fe f804 	bl	8008978 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a972:	025b      	lsls	r3, r3, #9
 800a974:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800a976:	e04f      	b.n	800aa18 <f_read+0x248>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	6a1b      	ldr	r3, [r3, #32]
 800a97c:	69ba      	ldr	r2, [r7, #24]
 800a97e:	429a      	cmp	r2, r3
 800a980:	d02c      	beq.n	800a9dc <f_read+0x20c>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	7d1b      	ldrb	r3, [r3, #20]
 800a986:	b25b      	sxtb	r3, r3
 800a988:	2b00      	cmp	r3, #0
 800a98a:	da17      	bge.n	800a9bc <f_read+0x1ec>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	7858      	ldrb	r0, [r3, #1]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	3330      	adds	r3, #48	@ 0x30
 800a994:	0019      	movs	r1, r3
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	6a1a      	ldr	r2, [r3, #32]
 800a99a:	2301      	movs	r3, #1
 800a99c:	f7fd ff18 	bl	80087d0 <disk_write>
 800a9a0:	1e03      	subs	r3, r0, #0
 800a9a2:	d004      	beq.n	800a9ae <f_read+0x1de>
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	755a      	strb	r2, [r3, #21]
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	e04d      	b.n	800aa4a <f_read+0x27a>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	7d1b      	ldrb	r3, [r3, #20]
 800a9b2:	227f      	movs	r2, #127	@ 0x7f
 800a9b4:	4013      	ands	r3, r2
 800a9b6:	b2da      	uxtb	r2, r3
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	7858      	ldrb	r0, [r3, #1]
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	3330      	adds	r3, #48	@ 0x30
 800a9c4:	0019      	movs	r1, r3
 800a9c6:	69ba      	ldr	r2, [r7, #24]
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	f7fd fed9 	bl	8008780 <disk_read>
 800a9ce:	1e03      	subs	r3, r0, #0
 800a9d0:	d004      	beq.n	800a9dc <f_read+0x20c>
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2201      	movs	r2, #1
 800a9d6:	755a      	strb	r2, [r3, #21]
 800a9d8:	2301      	movs	r3, #1
 800a9da:	e036      	b.n	800aa4a <f_read+0x27a>
			}
#endif
			fp->sect = sect;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	69ba      	ldr	r2, [r7, #24]
 800a9e0:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	699b      	ldr	r3, [r3, #24]
 800a9e6:	05db      	lsls	r3, r3, #23
 800a9e8:	0ddb      	lsrs	r3, r3, #23
 800a9ea:	2280      	movs	r2, #128	@ 0x80
 800a9ec:	0092      	lsls	r2, r2, #2
 800a9ee:	1ad3      	subs	r3, r2, r3
 800a9f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a9f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d901      	bls.n	800a9fe <f_read+0x22e>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	3330      	adds	r3, #48	@ 0x30
 800aa02:	001a      	movs	r2, r3
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	699b      	ldr	r3, [r3, #24]
 800aa08:	05db      	lsls	r3, r3, #23
 800aa0a:	0ddb      	lsrs	r3, r3, #23
 800aa0c:	18d1      	adds	r1, r2, r3
 800aa0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa12:	0018      	movs	r0, r3
 800aa14:	f7fd ffb0 	bl	8008978 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800aa18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa1c:	18d3      	adds	r3, r2, r3
 800aa1e:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	699a      	ldr	r2, [r3, #24]
 800aa24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa26:	18d2      	adds	r2, r2, r3
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	619a      	str	r2, [r3, #24]
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	681a      	ldr	r2, [r3, #0]
 800aa30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa32:	18d2      	adds	r2, r2, r3
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	601a      	str	r2, [r3, #0]
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa3c:	1ad3      	subs	r3, r2, r3
 800aa3e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d000      	beq.n	800aa48 <f_read+0x278>
 800aa46:	e700      	b.n	800a84a <f_read+0x7a>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800aa48:	2300      	movs	r3, #0
}
 800aa4a:	0018      	movs	r0, r3
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	b00e      	add	sp, #56	@ 0x38
 800aa50:	bdb0      	pop	{r4, r5, r7, pc}

0800aa52 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800aa52:	b5b0      	push	{r4, r5, r7, lr}
 800aa54:	b08c      	sub	sp, #48	@ 0x30
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	60f8      	str	r0, [r7, #12]
 800aa5a:	60b9      	str	r1, [r7, #8]
 800aa5c:	607a      	str	r2, [r7, #4]
 800aa5e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	2200      	movs	r2, #0
 800aa68:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	252f      	movs	r5, #47	@ 0x2f
 800aa6e:	197c      	adds	r4, r7, r5
 800aa70:	2210      	movs	r2, #16
 800aa72:	18ba      	adds	r2, r7, r2
 800aa74:	0011      	movs	r1, r2
 800aa76:	0018      	movs	r0, r3
 800aa78:	f7ff fc2e 	bl	800a2d8 <validate>
 800aa7c:	0003      	movs	r3, r0
 800aa7e:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800aa80:	197b      	adds	r3, r7, r5
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d107      	bne.n	800aa98 <f_write+0x46>
 800aa88:	197b      	adds	r3, r7, r5
 800aa8a:	68fa      	ldr	r2, [r7, #12]
 800aa8c:	7d52      	ldrb	r2, [r2, #21]
 800aa8e:	701a      	strb	r2, [r3, #0]
 800aa90:	197b      	adds	r3, r7, r5
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d003      	beq.n	800aaa0 <f_write+0x4e>
 800aa98:	232f      	movs	r3, #47	@ 0x2f
 800aa9a:	18fb      	adds	r3, r7, r3
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	e14e      	b.n	800ad3e <f_write+0x2ec>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	7d1b      	ldrb	r3, [r3, #20]
 800aaa4:	001a      	movs	r2, r3
 800aaa6:	2302      	movs	r3, #2
 800aaa8:	4013      	ands	r3, r2
 800aaaa:	d101      	bne.n	800aab0 <f_write+0x5e>
 800aaac:	2307      	movs	r3, #7
 800aaae:	e146      	b.n	800ad3e <f_write+0x2ec>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	699a      	ldr	r2, [r3, #24]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	18d2      	adds	r2, r2, r3
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	699b      	ldr	r3, [r3, #24]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d300      	bcc.n	800aac2 <f_write+0x70>
 800aac0:	e12f      	b.n	800ad22 <f_write+0x2d0>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	699b      	ldr	r3, [r3, #24]
 800aac6:	43db      	mvns	r3, r3
 800aac8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800aaca:	e12a      	b.n	800ad22 <f_write+0x2d0>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	699b      	ldr	r3, [r3, #24]
 800aad0:	05db      	lsls	r3, r3, #23
 800aad2:	0ddb      	lsrs	r3, r3, #23
 800aad4:	d000      	beq.n	800aad8 <f_write+0x86>
 800aad6:	e0e3      	b.n	800aca0 <f_write+0x24e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	699b      	ldr	r3, [r3, #24]
 800aadc:	0a5b      	lsrs	r3, r3, #9
 800aade:	693a      	ldr	r2, [r7, #16]
 800aae0:	8952      	ldrh	r2, [r2, #10]
 800aae2:	3a01      	subs	r2, #1
 800aae4:	4013      	ands	r3, r2
 800aae6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800aae8:	69bb      	ldr	r3, [r7, #24]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d146      	bne.n	800ab7c <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	699b      	ldr	r3, [r3, #24]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d10d      	bne.n	800ab12 <f_write+0xc0>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	689b      	ldr	r3, [r3, #8]
 800aafa:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800aafc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d11e      	bne.n	800ab40 <f_write+0xee>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	2100      	movs	r1, #0
 800ab06:	0018      	movs	r0, r3
 800ab08:	f7fe fc4a 	bl	80093a0 <create_chain>
 800ab0c:	0003      	movs	r3, r0
 800ab0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ab10:	e016      	b.n	800ab40 <f_write+0xee>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d009      	beq.n	800ab2e <f_write+0xdc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	699a      	ldr	r2, [r3, #24]
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	0011      	movs	r1, r2
 800ab22:	0018      	movs	r0, r3
 800ab24:	f7fe fce2 	bl	80094ec <clmt_clust>
 800ab28:	0003      	movs	r3, r0
 800ab2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ab2c:	e008      	b.n	800ab40 <f_write+0xee>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ab2e:	68fa      	ldr	r2, [r7, #12]
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	69db      	ldr	r3, [r3, #28]
 800ab34:	0019      	movs	r1, r3
 800ab36:	0010      	movs	r0, r2
 800ab38:	f7fe fc32 	bl	80093a0 <create_chain>
 800ab3c:	0003      	movs	r3, r0
 800ab3e:	62bb      	str	r3, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ab40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d100      	bne.n	800ab48 <f_write+0xf6>
 800ab46:	e0f1      	b.n	800ad2c <f_write+0x2da>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ab48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab4a:	2b01      	cmp	r3, #1
 800ab4c:	d104      	bne.n	800ab58 <f_write+0x106>
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2202      	movs	r2, #2
 800ab52:	755a      	strb	r2, [r3, #21]
 800ab54:	2302      	movs	r3, #2
 800ab56:	e0f2      	b.n	800ad3e <f_write+0x2ec>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ab58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	d104      	bne.n	800ab68 <f_write+0x116>
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2201      	movs	r2, #1
 800ab62:	755a      	strb	r2, [r3, #21]
 800ab64:	2301      	movs	r3, #1
 800ab66:	e0ea      	b.n	800ad3e <f_write+0x2ec>
				fp->clust = clst;			/* Update current cluster */
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab6c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	689b      	ldr	r3, [r3, #8]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d102      	bne.n	800ab7c <f_write+0x12a>
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab7a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	7d1b      	ldrb	r3, [r3, #20]
 800ab80:	b25b      	sxtb	r3, r3
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	da17      	bge.n	800abb6 <f_write+0x164>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	7858      	ldrb	r0, [r3, #1]
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	3330      	adds	r3, #48	@ 0x30
 800ab8e:	0019      	movs	r1, r3
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	6a1a      	ldr	r2, [r3, #32]
 800ab94:	2301      	movs	r3, #1
 800ab96:	f7fd fe1b 	bl	80087d0 <disk_write>
 800ab9a:	1e03      	subs	r3, r0, #0
 800ab9c:	d004      	beq.n	800aba8 <f_write+0x156>
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	2201      	movs	r2, #1
 800aba2:	755a      	strb	r2, [r3, #21]
 800aba4:	2301      	movs	r3, #1
 800aba6:	e0ca      	b.n	800ad3e <f_write+0x2ec>
				fp->flag &= (BYTE)~FA_DIRTY;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	7d1b      	ldrb	r3, [r3, #20]
 800abac:	227f      	movs	r2, #127	@ 0x7f
 800abae:	4013      	ands	r3, r2
 800abb0:	b2da      	uxtb	r2, r3
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800abb6:	693a      	ldr	r2, [r7, #16]
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	69db      	ldr	r3, [r3, #28]
 800abbc:	0019      	movs	r1, r3
 800abbe:	0010      	movs	r0, r2
 800abc0:	f7fe f9b4 	bl	8008f2c <clust2sect>
 800abc4:	0003      	movs	r3, r0
 800abc6:	617b      	str	r3, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d104      	bne.n	800abd8 <f_write+0x186>
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2202      	movs	r2, #2
 800abd2:	755a      	strb	r2, [r3, #21]
 800abd4:	2302      	movs	r3, #2
 800abd6:	e0b2      	b.n	800ad3e <f_write+0x2ec>
			sect += csect;
 800abd8:	697a      	ldr	r2, [r7, #20]
 800abda:	69bb      	ldr	r3, [r7, #24]
 800abdc:	18d3      	adds	r3, r2, r3
 800abde:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	0a5b      	lsrs	r3, r3, #9
 800abe4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800abe6:	6a3b      	ldr	r3, [r7, #32]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d03b      	beq.n	800ac64 <f_write+0x212>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800abec:	69ba      	ldr	r2, [r7, #24]
 800abee:	6a3b      	ldr	r3, [r7, #32]
 800abf0:	18d3      	adds	r3, r2, r3
 800abf2:	693a      	ldr	r2, [r7, #16]
 800abf4:	8952      	ldrh	r2, [r2, #10]
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d905      	bls.n	800ac06 <f_write+0x1b4>
					cc = fs->csize - csect;
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	895b      	ldrh	r3, [r3, #10]
 800abfe:	001a      	movs	r2, r3
 800ac00:	69bb      	ldr	r3, [r7, #24]
 800ac02:	1ad3      	subs	r3, r2, r3
 800ac04:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	7858      	ldrb	r0, [r3, #1]
 800ac0a:	6a3b      	ldr	r3, [r7, #32]
 800ac0c:	697a      	ldr	r2, [r7, #20]
 800ac0e:	69f9      	ldr	r1, [r7, #28]
 800ac10:	f7fd fdde 	bl	80087d0 <disk_write>
 800ac14:	1e03      	subs	r3, r0, #0
 800ac16:	d004      	beq.n	800ac22 <f_write+0x1d0>
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	755a      	strb	r2, [r3, #21]
 800ac1e:	2301      	movs	r3, #1
 800ac20:	e08d      	b.n	800ad3e <f_write+0x2ec>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	6a1a      	ldr	r2, [r3, #32]
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	1ad3      	subs	r3, r2, r3
 800ac2a:	6a3a      	ldr	r2, [r7, #32]
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d915      	bls.n	800ac5c <f_write+0x20a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	3330      	adds	r3, #48	@ 0x30
 800ac34:	0018      	movs	r0, r3
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	6a1a      	ldr	r2, [r3, #32]
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	1ad3      	subs	r3, r2, r3
 800ac3e:	025b      	lsls	r3, r3, #9
 800ac40:	69fa      	ldr	r2, [r7, #28]
 800ac42:	18d3      	adds	r3, r2, r3
 800ac44:	2280      	movs	r2, #128	@ 0x80
 800ac46:	0092      	lsls	r2, r2, #2
 800ac48:	0019      	movs	r1, r3
 800ac4a:	f7fd fe95 	bl	8008978 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	7d1b      	ldrb	r3, [r3, #20]
 800ac52:	227f      	movs	r2, #127	@ 0x7f
 800ac54:	4013      	ands	r3, r2
 800ac56:	b2da      	uxtb	r2, r3
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ac5c:	6a3b      	ldr	r3, [r7, #32]
 800ac5e:	025b      	lsls	r3, r3, #9
 800ac60:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800ac62:	e040      	b.n	800ace6 <f_write+0x294>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	6a1b      	ldr	r3, [r3, #32]
 800ac68:	697a      	ldr	r2, [r7, #20]
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d015      	beq.n	800ac9a <f_write+0x248>
				fp->fptr < fp->obj.objsize &&
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	699a      	ldr	r2, [r3, #24]
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d20f      	bcs.n	800ac9a <f_write+0x248>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	7858      	ldrb	r0, [r3, #1]
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	3330      	adds	r3, #48	@ 0x30
 800ac82:	0019      	movs	r1, r3
 800ac84:	697a      	ldr	r2, [r7, #20]
 800ac86:	2301      	movs	r3, #1
 800ac88:	f7fd fd7a 	bl	8008780 <disk_read>
 800ac8c:	1e03      	subs	r3, r0, #0
				fp->fptr < fp->obj.objsize &&
 800ac8e:	d004      	beq.n	800ac9a <f_write+0x248>
					ABORT(fs, FR_DISK_ERR);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2201      	movs	r2, #1
 800ac94:	755a      	strb	r2, [r3, #21]
 800ac96:	2301      	movs	r3, #1
 800ac98:	e051      	b.n	800ad3e <f_write+0x2ec>
			}
#endif
			fp->sect = sect;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	697a      	ldr	r2, [r7, #20]
 800ac9e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	699b      	ldr	r3, [r3, #24]
 800aca4:	05db      	lsls	r3, r3, #23
 800aca6:	0ddb      	lsrs	r3, r3, #23
 800aca8:	2280      	movs	r2, #128	@ 0x80
 800acaa:	0092      	lsls	r2, r2, #2
 800acac:	1ad3      	subs	r3, r2, r3
 800acae:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800acb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d901      	bls.n	800acbc <f_write+0x26a>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	3330      	adds	r3, #48	@ 0x30
 800acc0:	001a      	movs	r2, r3
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	699b      	ldr	r3, [r3, #24]
 800acc6:	05db      	lsls	r3, r3, #23
 800acc8:	0ddb      	lsrs	r3, r3, #23
 800acca:	18d3      	adds	r3, r2, r3
 800accc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800acce:	69f9      	ldr	r1, [r7, #28]
 800acd0:	0018      	movs	r0, r3
 800acd2:	f7fd fe51 	bl	8008978 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	7d1b      	ldrb	r3, [r3, #20]
 800acda:	2280      	movs	r2, #128	@ 0x80
 800acdc:	4252      	negs	r2, r2
 800acde:	4313      	orrs	r3, r2
 800ace0:	b2da      	uxtb	r2, r3
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ace6:	69fa      	ldr	r2, [r7, #28]
 800ace8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acea:	18d3      	adds	r3, r2, r3
 800acec:	61fb      	str	r3, [r7, #28]
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	699a      	ldr	r2, [r3, #24]
 800acf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf4:	18d2      	adds	r2, r2, r3
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	619a      	str	r2, [r3, #24]
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	68d9      	ldr	r1, [r3, #12]
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	699a      	ldr	r2, [r3, #24]
 800ad02:	000b      	movs	r3, r1
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d200      	bcs.n	800ad0a <f_write+0x2b8>
 800ad08:	0013      	movs	r3, r2
 800ad0a:	68fa      	ldr	r2, [r7, #12]
 800ad0c:	60d3      	str	r3, [r2, #12]
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	681a      	ldr	r2, [r3, #0]
 800ad12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad14:	18d2      	adds	r2, r2, r3
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	601a      	str	r2, [r3, #0]
 800ad1a:	687a      	ldr	r2, [r7, #4]
 800ad1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad1e:	1ad3      	subs	r3, r2, r3
 800ad20:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d000      	beq.n	800ad2a <f_write+0x2d8>
 800ad28:	e6d0      	b.n	800aacc <f_write+0x7a>
 800ad2a:	e000      	b.n	800ad2e <f_write+0x2dc>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ad2c:	46c0      	nop			@ (mov r8, r8)
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	7d1b      	ldrb	r3, [r3, #20]
 800ad32:	2240      	movs	r2, #64	@ 0x40
 800ad34:	4313      	orrs	r3, r2
 800ad36:	b2da      	uxtb	r2, r3
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ad3c:	2300      	movs	r3, #0
}
 800ad3e:	0018      	movs	r0, r3
 800ad40:	46bd      	mov	sp, r7
 800ad42:	b00c      	add	sp, #48	@ 0x30
 800ad44:	bdb0      	pop	{r4, r5, r7, pc}

0800ad46 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ad46:	b5b0      	push	{r4, r5, r7, lr}
 800ad48:	b086      	sub	sp, #24
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2517      	movs	r5, #23
 800ad52:	197c      	adds	r4, r7, r5
 800ad54:	2208      	movs	r2, #8
 800ad56:	18ba      	adds	r2, r7, r2
 800ad58:	0011      	movs	r1, r2
 800ad5a:	0018      	movs	r0, r3
 800ad5c:	f7ff fabc 	bl	800a2d8 <validate>
 800ad60:	0003      	movs	r3, r0
 800ad62:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800ad64:	197b      	adds	r3, r7, r5
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d16e      	bne.n	800ae4a <f_sync+0x104>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	7d1b      	ldrb	r3, [r3, #20]
 800ad70:	001a      	movs	r2, r3
 800ad72:	2340      	movs	r3, #64	@ 0x40
 800ad74:	4013      	ands	r3, r2
 800ad76:	d068      	beq.n	800ae4a <f_sync+0x104>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	7d1b      	ldrb	r3, [r3, #20]
 800ad7c:	b25b      	sxtb	r3, r3
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	da14      	bge.n	800adac <f_sync+0x66>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	7858      	ldrb	r0, [r3, #1]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	3330      	adds	r3, #48	@ 0x30
 800ad8a:	0019      	movs	r1, r3
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6a1a      	ldr	r2, [r3, #32]
 800ad90:	2301      	movs	r3, #1
 800ad92:	f7fd fd1d 	bl	80087d0 <disk_write>
 800ad96:	1e03      	subs	r3, r0, #0
 800ad98:	d001      	beq.n	800ad9e <f_sync+0x58>
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	e058      	b.n	800ae50 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	7d1b      	ldrb	r3, [r3, #20]
 800ada2:	227f      	movs	r2, #127	@ 0x7f
 800ada4:	4013      	ands	r3, r2
 800ada6:	b2da      	uxtb	r2, r3
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800adac:	f7fc febe 	bl	8007b2c <get_fattime>
 800adb0:	0003      	movs	r3, r0
 800adb2:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800adb4:	68ba      	ldr	r2, [r7, #8]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adba:	2517      	movs	r5, #23
 800adbc:	197c      	adds	r4, r7, r5
 800adbe:	0019      	movs	r1, r3
 800adc0:	0010      	movs	r0, r2
 800adc2:	f7fe f801 	bl	8008dc8 <move_window>
 800adc6:	0003      	movs	r3, r0
 800adc8:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
 800adca:	002c      	movs	r4, r5
 800adcc:	193b      	adds	r3, r7, r4
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d13a      	bne.n	800ae4a <f_sync+0x104>
					dir = fp->dir_ptr;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800add8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	330b      	adds	r3, #11
 800adde:	781a      	ldrb	r2, [r3, #0]
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	330b      	adds	r3, #11
 800ade4:	2120      	movs	r1, #32
 800ade6:	430a      	orrs	r2, r1
 800ade8:	b2d2      	uxtb	r2, r2
 800adea:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6818      	ldr	r0, [r3, #0]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	689a      	ldr	r2, [r3, #8]
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	0019      	movs	r1, r3
 800adf8:	f7fe fd6b 	bl	80098d2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	331c      	adds	r3, #28
 800ae00:	001a      	movs	r2, r3
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	68db      	ldr	r3, [r3, #12]
 800ae06:	0019      	movs	r1, r3
 800ae08:	0010      	movs	r0, r2
 800ae0a:	f7fd fd8b 	bl	8008924 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	3316      	adds	r3, #22
 800ae12:	693a      	ldr	r2, [r7, #16]
 800ae14:	0011      	movs	r1, r2
 800ae16:	0018      	movs	r0, r3
 800ae18:	f7fd fd84 	bl	8008924 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	3312      	adds	r3, #18
 800ae20:	2100      	movs	r1, #0
 800ae22:	0018      	movs	r0, r3
 800ae24:	f7fd fd60 	bl	80088e8 <st_word>
					fs->wflag = 1;
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	193c      	adds	r4, r7, r4
 800ae32:	0018      	movs	r0, r3
 800ae34:	f7fd fffe 	bl	8008e34 <sync_fs>
 800ae38:	0003      	movs	r3, r0
 800ae3a:	7023      	strb	r3, [r4, #0]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	7d1b      	ldrb	r3, [r3, #20]
 800ae40:	2240      	movs	r2, #64	@ 0x40
 800ae42:	4393      	bics	r3, r2
 800ae44:	b2da      	uxtb	r2, r3
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ae4a:	2317      	movs	r3, #23
 800ae4c:	18fb      	adds	r3, r7, r3
 800ae4e:	781b      	ldrb	r3, [r3, #0]
}
 800ae50:	0018      	movs	r0, r3
 800ae52:	46bd      	mov	sp, r7
 800ae54:	b006      	add	sp, #24
 800ae56:	bdb0      	pop	{r4, r5, r7, pc}

0800ae58 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ae58:	b5b0      	push	{r4, r5, r7, lr}
 800ae5a:	b084      	sub	sp, #16
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ae60:	250f      	movs	r5, #15
 800ae62:	197c      	adds	r4, r7, r5
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	0018      	movs	r0, r3
 800ae68:	f7ff ff6d 	bl	800ad46 <f_sync>
 800ae6c:	0003      	movs	r3, r0
 800ae6e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 800ae70:	197b      	adds	r3, r7, r5
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d11c      	bne.n	800aeb2 <f_close+0x5a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	197c      	adds	r4, r7, r5
 800ae7c:	2208      	movs	r2, #8
 800ae7e:	18ba      	adds	r2, r7, r2
 800ae80:	0011      	movs	r1, r2
 800ae82:	0018      	movs	r0, r3
 800ae84:	f7ff fa28 	bl	800a2d8 <validate>
 800ae88:	0003      	movs	r3, r0
 800ae8a:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 800ae8c:	197b      	adds	r3, r7, r5
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d10e      	bne.n	800aeb2 <f_close+0x5a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	691b      	ldr	r3, [r3, #16]
 800ae98:	197c      	adds	r4, r7, r5
 800ae9a:	0018      	movs	r0, r3
 800ae9c:	f7fd fee2 	bl	8008c64 <dec_lock>
 800aea0:	0003      	movs	r3, r0
 800aea2:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 800aea4:	197b      	adds	r3, r7, r5
 800aea6:	781b      	ldrb	r3, [r3, #0]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d102      	bne.n	800aeb2 <f_close+0x5a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800aeb2:	230f      	movs	r3, #15
 800aeb4:	18fb      	adds	r3, r7, r3
 800aeb6:	781b      	ldrb	r3, [r3, #0]
}
 800aeb8:	0018      	movs	r0, r3
 800aeba:	46bd      	mov	sp, r7
 800aebc:	b004      	add	sp, #16
 800aebe:	bdb0      	pop	{r4, r5, r7, pc}

0800aec0 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800aec0:	b5b0      	push	{r4, r5, r7, lr}
 800aec2:	b092      	sub	sp, #72	@ 0x48
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	60f8      	str	r0, [r7, #12]
 800aec8:	60b9      	str	r1, [r7, #8]
 800aeca:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800aecc:	2547      	movs	r5, #71	@ 0x47
 800aece:	197c      	adds	r4, r7, r5
 800aed0:	2328      	movs	r3, #40	@ 0x28
 800aed2:	18f9      	adds	r1, r7, r3
 800aed4:	230c      	movs	r3, #12
 800aed6:	18fb      	adds	r3, r7, r3
 800aed8:	2200      	movs	r2, #0
 800aeda:	0018      	movs	r0, r3
 800aedc:	f7fe ff8c 	bl	8009df8 <find_volume>
 800aee0:	0003      	movs	r3, r0
 800aee2:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800aee4:	197b      	adds	r3, r7, r5
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d000      	beq.n	800aeee <f_getfree+0x2e>
 800aeec:	e09e      	b.n	800b02c <f_getfree+0x16c>
		*fatfs = fs;				/* Return ptr to the fs object */
 800aeee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800aef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aef6:	691a      	ldr	r2, [r3, #16]
 800aef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aefa:	695b      	ldr	r3, [r3, #20]
 800aefc:	3b02      	subs	r3, #2
 800aefe:	429a      	cmp	r2, r3
 800af00:	d804      	bhi.n	800af0c <f_getfree+0x4c>
			*nclst = fs->free_clst;
 800af02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af04:	691a      	ldr	r2, [r3, #16]
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	601a      	str	r2, [r3, #0]
 800af0a:	e08f      	b.n	800b02c <f_getfree+0x16c>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800af0c:	2300      	movs	r3, #0
 800af0e:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800af10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	2b01      	cmp	r3, #1
 800af16:	d12d      	bne.n	800af74 <f_getfree+0xb4>
				clst = 2; obj.fs = fs;
 800af18:	2302      	movs	r3, #2
 800af1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af1e:	2314      	movs	r3, #20
 800af20:	18fb      	adds	r3, r7, r3
 800af22:	601a      	str	r2, [r3, #0]
				do {
					stat = get_fat(&obj, clst);
 800af24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800af26:	2314      	movs	r3, #20
 800af28:	18fb      	adds	r3, r7, r3
 800af2a:	0011      	movs	r1, r2
 800af2c:	0018      	movs	r0, r3
 800af2e:	f7fe f819 	bl	8008f64 <get_fat>
 800af32:	0003      	movs	r3, r0
 800af34:	62fb      	str	r3, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800af36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af38:	3301      	adds	r3, #1
 800af3a:	d104      	bne.n	800af46 <f_getfree+0x86>
 800af3c:	2347      	movs	r3, #71	@ 0x47
 800af3e:	18fb      	adds	r3, r7, r3
 800af40:	2201      	movs	r2, #1
 800af42:	701a      	strb	r2, [r3, #0]
 800af44:	e065      	b.n	800b012 <f_getfree+0x152>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800af46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d104      	bne.n	800af56 <f_getfree+0x96>
 800af4c:	2347      	movs	r3, #71	@ 0x47
 800af4e:	18fb      	adds	r3, r7, r3
 800af50:	2202      	movs	r2, #2
 800af52:	701a      	strb	r2, [r3, #0]
 800af54:	e05d      	b.n	800b012 <f_getfree+0x152>
					if (stat == 0) nfree++;
 800af56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d102      	bne.n	800af62 <f_getfree+0xa2>
 800af5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af5e:	3301      	adds	r3, #1
 800af60:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800af62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af64:	3301      	adds	r3, #1
 800af66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af6a:	695b      	ldr	r3, [r3, #20]
 800af6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800af6e:	429a      	cmp	r2, r3
 800af70:	d3d8      	bcc.n	800af24 <f_getfree+0x64>
 800af72:	e04e      	b.n	800b012 <f_getfree+0x152>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800af74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af76:	695b      	ldr	r3, [r3, #20]
 800af78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af7c:	6a1b      	ldr	r3, [r3, #32]
 800af7e:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800af80:	2300      	movs	r3, #0
 800af82:	637b      	str	r3, [r7, #52]	@ 0x34
 800af84:	2300      	movs	r3, #0
 800af86:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800af88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d114      	bne.n	800afb8 <f_getfree+0xf8>
							res = move_window(fs, sect++);
 800af8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af92:	1c5a      	adds	r2, r3, #1
 800af94:	63ba      	str	r2, [r7, #56]	@ 0x38
 800af96:	2547      	movs	r5, #71	@ 0x47
 800af98:	197c      	adds	r4, r7, r5
 800af9a:	0019      	movs	r1, r3
 800af9c:	f7fd ff14 	bl	8008dc8 <move_window>
 800afa0:	0003      	movs	r3, r0
 800afa2:	7023      	strb	r3, [r4, #0]
							if (res != FR_OK) break;
 800afa4:	197b      	adds	r3, r7, r5
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d131      	bne.n	800b010 <f_getfree+0x150>
							p = fs->win;
 800afac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afae:	3330      	adds	r3, #48	@ 0x30
 800afb0:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800afb2:	2380      	movs	r3, #128	@ 0x80
 800afb4:	009b      	lsls	r3, r3, #2
 800afb6:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800afb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	2b02      	cmp	r3, #2
 800afbe:	d10f      	bne.n	800afe0 <f_getfree+0x120>
							if (ld_word(p) == 0) nfree++;
 800afc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afc2:	0018      	movs	r0, r3
 800afc4:	f7fd fc54 	bl	8008870 <ld_word>
 800afc8:	1e03      	subs	r3, r0, #0
 800afca:	d102      	bne.n	800afd2 <f_getfree+0x112>
 800afcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afce:	3301      	adds	r3, #1
 800afd0:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800afd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afd4:	3302      	adds	r3, #2
 800afd6:	633b      	str	r3, [r7, #48]	@ 0x30
 800afd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afda:	3b02      	subs	r3, #2
 800afdc:	637b      	str	r3, [r7, #52]	@ 0x34
 800afde:	e010      	b.n	800b002 <f_getfree+0x142>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800afe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afe2:	0018      	movs	r0, r3
 800afe4:	f7fd fc5f 	bl	80088a6 <ld_dword>
 800afe8:	0003      	movs	r3, r0
 800afea:	011b      	lsls	r3, r3, #4
 800afec:	091b      	lsrs	r3, r3, #4
 800afee:	d102      	bne.n	800aff6 <f_getfree+0x136>
 800aff0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aff2:	3301      	adds	r3, #1
 800aff4:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800aff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff8:	3304      	adds	r3, #4
 800affa:	633b      	str	r3, [r7, #48]	@ 0x30
 800affc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800affe:	3b04      	subs	r3, #4
 800b000:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800b002:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b004:	3b01      	subs	r3, #1
 800b006:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b008:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d1bc      	bne.n	800af88 <f_getfree+0xc8>
 800b00e:	e000      	b.n	800b012 <f_getfree+0x152>
							if (res != FR_OK) break;
 800b010:	46c0      	nop			@ (mov r8, r8)
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b016:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800b018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b01a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b01c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800b01e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b020:	791a      	ldrb	r2, [r3, #4]
 800b022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b024:	2101      	movs	r1, #1
 800b026:	430a      	orrs	r2, r1
 800b028:	b2d2      	uxtb	r2, r2
 800b02a:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800b02c:	2347      	movs	r3, #71	@ 0x47
 800b02e:	18fb      	adds	r3, r7, r3
 800b030:	781b      	ldrb	r3, [r3, #0]
}
 800b032:	0018      	movs	r0, r3
 800b034:	46bd      	mov	sp, r7
 800b036:	b012      	add	sp, #72	@ 0x48
 800b038:	bdb0      	pop	{r4, r5, r7, pc}

0800b03a <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800b03a:	b590      	push	{r4, r7, lr}
 800b03c:	b089      	sub	sp, #36	@ 0x24
 800b03e:	af00      	add	r7, sp, #0
 800b040:	60f8      	str	r0, [r7, #12]
 800b042:	60b9      	str	r1, [r7, #8]
 800b044:	607a      	str	r2, [r7, #4]
	int n = 0;
 800b046:	2300      	movs	r3, #0
 800b048:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800b04e:	e022      	b.n	800b096 <f_gets+0x5c>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800b050:	2310      	movs	r3, #16
 800b052:	18fb      	adds	r3, r7, r3
 800b054:	2414      	movs	r4, #20
 800b056:	1939      	adds	r1, r7, r4
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	2201      	movs	r2, #1
 800b05c:	f7ff fbb8 	bl	800a7d0 <f_read>
		if (rc != 1) break;
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	2b01      	cmp	r3, #1
 800b064:	d11d      	bne.n	800b0a2 <f_gets+0x68>
		c = s[0];
 800b066:	2117      	movs	r1, #23
 800b068:	187b      	adds	r3, r7, r1
 800b06a:	193a      	adds	r2, r7, r4
 800b06c:	7812      	ldrb	r2, [r2, #0]
 800b06e:	701a      	strb	r2, [r3, #0]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800b070:	187b      	adds	r3, r7, r1
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	2b0d      	cmp	r3, #13
 800b076:	d00d      	beq.n	800b094 <f_gets+0x5a>
		*p++ = c;
 800b078:	69bb      	ldr	r3, [r7, #24]
 800b07a:	1c5a      	adds	r2, r3, #1
 800b07c:	61ba      	str	r2, [r7, #24]
 800b07e:	187a      	adds	r2, r7, r1
 800b080:	7812      	ldrb	r2, [r2, #0]
 800b082:	701a      	strb	r2, [r3, #0]
		n++;
 800b084:	69fb      	ldr	r3, [r7, #28]
 800b086:	3301      	adds	r3, #1
 800b088:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800b08a:	187b      	adds	r3, r7, r1
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	2b0a      	cmp	r3, #10
 800b090:	d009      	beq.n	800b0a6 <f_gets+0x6c>
 800b092:	e000      	b.n	800b096 <f_gets+0x5c>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800b094:	46c0      	nop			@ (mov r8, r8)
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	3b01      	subs	r3, #1
 800b09a:	69fa      	ldr	r2, [r7, #28]
 800b09c:	429a      	cmp	r2, r3
 800b09e:	dbd7      	blt.n	800b050 <f_gets+0x16>
 800b0a0:	e002      	b.n	800b0a8 <f_gets+0x6e>
		if (rc != 1) break;
 800b0a2:	46c0      	nop			@ (mov r8, r8)
 800b0a4:	e000      	b.n	800b0a8 <f_gets+0x6e>
		if (c == '\n') break;		/* Break on EOL */
 800b0a6:	46c0      	nop			@ (mov r8, r8)
	}
	*p = 0;
 800b0a8:	69bb      	ldr	r3, [r7, #24]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800b0ae:	69fb      	ldr	r3, [r7, #28]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d001      	beq.n	800b0b8 <f_gets+0x7e>
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	e000      	b.n	800b0ba <f_gets+0x80>
 800b0b8:	2300      	movs	r3, #0
}
 800b0ba:	0018      	movs	r0, r3
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	b009      	add	sp, #36	@ 0x24
 800b0c0:	bd90      	pop	{r4, r7, pc}
	...

0800b0c4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b0c4:	b590      	push	{r4, r7, lr}
 800b0c6:	b087      	sub	sp, #28
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	60b9      	str	r1, [r7, #8]
 800b0ce:	1dfb      	adds	r3, r7, #7
 800b0d0:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 800b0d2:	2417      	movs	r4, #23
 800b0d4:	193b      	adds	r3, r7, r4
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 800b0da:	2016      	movs	r0, #22
 800b0dc:	183b      	adds	r3, r7, r0
 800b0de:	2200      	movs	r2, #0
 800b0e0:	701a      	strb	r2, [r3, #0]

  if(disk.nbr < _VOLUMES)
 800b0e2:	4b21      	ldr	r3, [pc, #132]	@ (800b168 <FATFS_LinkDriverEx+0xa4>)
 800b0e4:	7a5b      	ldrb	r3, [r3, #9]
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d136      	bne.n	800b15a <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b0ec:	4b1e      	ldr	r3, [pc, #120]	@ (800b168 <FATFS_LinkDriverEx+0xa4>)
 800b0ee:	7a5b      	ldrb	r3, [r3, #9]
 800b0f0:	b2db      	uxtb	r3, r3
 800b0f2:	001a      	movs	r2, r3
 800b0f4:	4b1c      	ldr	r3, [pc, #112]	@ (800b168 <FATFS_LinkDriverEx+0xa4>)
 800b0f6:	2100      	movs	r1, #0
 800b0f8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b0fa:	4b1b      	ldr	r3, [pc, #108]	@ (800b168 <FATFS_LinkDriverEx+0xa4>)
 800b0fc:	7a5b      	ldrb	r3, [r3, #9]
 800b0fe:	b2db      	uxtb	r3, r3
 800b100:	4a19      	ldr	r2, [pc, #100]	@ (800b168 <FATFS_LinkDriverEx+0xa4>)
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	18d3      	adds	r3, r2, r3
 800b106:	3304      	adds	r3, #4
 800b108:	68fa      	ldr	r2, [r7, #12]
 800b10a:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;
 800b10c:	4b16      	ldr	r3, [pc, #88]	@ (800b168 <FATFS_LinkDriverEx+0xa4>)
 800b10e:	7a5b      	ldrb	r3, [r3, #9]
 800b110:	b2db      	uxtb	r3, r3
 800b112:	001a      	movs	r2, r3
 800b114:	4b14      	ldr	r3, [pc, #80]	@ (800b168 <FATFS_LinkDriverEx+0xa4>)
 800b116:	189b      	adds	r3, r3, r2
 800b118:	1dfa      	adds	r2, r7, #7
 800b11a:	7812      	ldrb	r2, [r2, #0]
 800b11c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b11e:	4b12      	ldr	r3, [pc, #72]	@ (800b168 <FATFS_LinkDriverEx+0xa4>)
 800b120:	7a5b      	ldrb	r3, [r3, #9]
 800b122:	b2db      	uxtb	r3, r3
 800b124:	1c5a      	adds	r2, r3, #1
 800b126:	b2d1      	uxtb	r1, r2
 800b128:	4a0f      	ldr	r2, [pc, #60]	@ (800b168 <FATFS_LinkDriverEx+0xa4>)
 800b12a:	7251      	strb	r1, [r2, #9]
 800b12c:	183a      	adds	r2, r7, r0
 800b12e:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 800b130:	183b      	adds	r3, r7, r0
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	3330      	adds	r3, #48	@ 0x30
 800b136:	b2da      	uxtb	r2, r3
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	3301      	adds	r3, #1
 800b140:	223a      	movs	r2, #58	@ 0x3a
 800b142:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	3302      	adds	r3, #2
 800b148:	222f      	movs	r2, #47	@ 0x2f
 800b14a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	3303      	adds	r3, #3
 800b150:	2200      	movs	r2, #0
 800b152:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b154:	193b      	adds	r3, r7, r4
 800b156:	2200      	movs	r2, #0
 800b158:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800b15a:	2317      	movs	r3, #23
 800b15c:	18fb      	adds	r3, r7, r3
 800b15e:	781b      	ldrb	r3, [r3, #0]
}
 800b160:	0018      	movs	r0, r3
 800b162:	46bd      	mov	sp, r7
 800b164:	b007      	add	sp, #28
 800b166:	bd90      	pop	{r4, r7, pc}
 800b168:	20000520 	.word	0x20000520

0800b16c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b176:	6839      	ldr	r1, [r7, #0]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2200      	movs	r2, #0
 800b17c:	0018      	movs	r0, r3
 800b17e:	f7ff ffa1 	bl	800b0c4 <FATFS_LinkDriverEx>
 800b182:	0003      	movs	r3, r0
}
 800b184:	0018      	movs	r0, r3
 800b186:	46bd      	mov	sp, r7
 800b188:	b002      	add	sp, #8
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <malloc>:
 800b18c:	b510      	push	{r4, lr}
 800b18e:	4b03      	ldr	r3, [pc, #12]	@ (800b19c <malloc+0x10>)
 800b190:	0001      	movs	r1, r0
 800b192:	6818      	ldr	r0, [r3, #0]
 800b194:	f000 f830 	bl	800b1f8 <_malloc_r>
 800b198:	bd10      	pop	{r4, pc}
 800b19a:	46c0      	nop			@ (mov r8, r8)
 800b19c:	20000024 	.word	0x20000024

0800b1a0 <free>:
 800b1a0:	b510      	push	{r4, lr}
 800b1a2:	4b03      	ldr	r3, [pc, #12]	@ (800b1b0 <free+0x10>)
 800b1a4:	0001      	movs	r1, r0
 800b1a6:	6818      	ldr	r0, [r3, #0]
 800b1a8:	f000 f95e 	bl	800b468 <_free_r>
 800b1ac:	bd10      	pop	{r4, pc}
 800b1ae:	46c0      	nop			@ (mov r8, r8)
 800b1b0:	20000024 	.word	0x20000024

0800b1b4 <sbrk_aligned>:
 800b1b4:	b570      	push	{r4, r5, r6, lr}
 800b1b6:	4e0f      	ldr	r6, [pc, #60]	@ (800b1f4 <sbrk_aligned+0x40>)
 800b1b8:	000d      	movs	r5, r1
 800b1ba:	6831      	ldr	r1, [r6, #0]
 800b1bc:	0004      	movs	r4, r0
 800b1be:	2900      	cmp	r1, #0
 800b1c0:	d102      	bne.n	800b1c8 <sbrk_aligned+0x14>
 800b1c2:	f000 f909 	bl	800b3d8 <_sbrk_r>
 800b1c6:	6030      	str	r0, [r6, #0]
 800b1c8:	0029      	movs	r1, r5
 800b1ca:	0020      	movs	r0, r4
 800b1cc:	f000 f904 	bl	800b3d8 <_sbrk_r>
 800b1d0:	1c43      	adds	r3, r0, #1
 800b1d2:	d103      	bne.n	800b1dc <sbrk_aligned+0x28>
 800b1d4:	2501      	movs	r5, #1
 800b1d6:	426d      	negs	r5, r5
 800b1d8:	0028      	movs	r0, r5
 800b1da:	bd70      	pop	{r4, r5, r6, pc}
 800b1dc:	2303      	movs	r3, #3
 800b1de:	1cc5      	adds	r5, r0, #3
 800b1e0:	439d      	bics	r5, r3
 800b1e2:	42a8      	cmp	r0, r5
 800b1e4:	d0f8      	beq.n	800b1d8 <sbrk_aligned+0x24>
 800b1e6:	1a29      	subs	r1, r5, r0
 800b1e8:	0020      	movs	r0, r4
 800b1ea:	f000 f8f5 	bl	800b3d8 <_sbrk_r>
 800b1ee:	3001      	adds	r0, #1
 800b1f0:	d1f2      	bne.n	800b1d8 <sbrk_aligned+0x24>
 800b1f2:	e7ef      	b.n	800b1d4 <sbrk_aligned+0x20>
 800b1f4:	2000052c 	.word	0x2000052c

0800b1f8 <_malloc_r>:
 800b1f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1fa:	2203      	movs	r2, #3
 800b1fc:	1ccb      	adds	r3, r1, #3
 800b1fe:	4393      	bics	r3, r2
 800b200:	3308      	adds	r3, #8
 800b202:	0005      	movs	r5, r0
 800b204:	001f      	movs	r7, r3
 800b206:	2b0c      	cmp	r3, #12
 800b208:	d234      	bcs.n	800b274 <_malloc_r+0x7c>
 800b20a:	270c      	movs	r7, #12
 800b20c:	42b9      	cmp	r1, r7
 800b20e:	d833      	bhi.n	800b278 <_malloc_r+0x80>
 800b210:	0028      	movs	r0, r5
 800b212:	f000 f871 	bl	800b2f8 <__malloc_lock>
 800b216:	4e37      	ldr	r6, [pc, #220]	@ (800b2f4 <_malloc_r+0xfc>)
 800b218:	6833      	ldr	r3, [r6, #0]
 800b21a:	001c      	movs	r4, r3
 800b21c:	2c00      	cmp	r4, #0
 800b21e:	d12f      	bne.n	800b280 <_malloc_r+0x88>
 800b220:	0039      	movs	r1, r7
 800b222:	0028      	movs	r0, r5
 800b224:	f7ff ffc6 	bl	800b1b4 <sbrk_aligned>
 800b228:	0004      	movs	r4, r0
 800b22a:	1c43      	adds	r3, r0, #1
 800b22c:	d15f      	bne.n	800b2ee <_malloc_r+0xf6>
 800b22e:	6834      	ldr	r4, [r6, #0]
 800b230:	9400      	str	r4, [sp, #0]
 800b232:	9b00      	ldr	r3, [sp, #0]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d14a      	bne.n	800b2ce <_malloc_r+0xd6>
 800b238:	2c00      	cmp	r4, #0
 800b23a:	d052      	beq.n	800b2e2 <_malloc_r+0xea>
 800b23c:	6823      	ldr	r3, [r4, #0]
 800b23e:	0028      	movs	r0, r5
 800b240:	18e3      	adds	r3, r4, r3
 800b242:	9900      	ldr	r1, [sp, #0]
 800b244:	9301      	str	r3, [sp, #4]
 800b246:	f000 f8c7 	bl	800b3d8 <_sbrk_r>
 800b24a:	9b01      	ldr	r3, [sp, #4]
 800b24c:	4283      	cmp	r3, r0
 800b24e:	d148      	bne.n	800b2e2 <_malloc_r+0xea>
 800b250:	6823      	ldr	r3, [r4, #0]
 800b252:	0028      	movs	r0, r5
 800b254:	1aff      	subs	r7, r7, r3
 800b256:	0039      	movs	r1, r7
 800b258:	f7ff ffac 	bl	800b1b4 <sbrk_aligned>
 800b25c:	3001      	adds	r0, #1
 800b25e:	d040      	beq.n	800b2e2 <_malloc_r+0xea>
 800b260:	6823      	ldr	r3, [r4, #0]
 800b262:	19db      	adds	r3, r3, r7
 800b264:	6023      	str	r3, [r4, #0]
 800b266:	6833      	ldr	r3, [r6, #0]
 800b268:	685a      	ldr	r2, [r3, #4]
 800b26a:	2a00      	cmp	r2, #0
 800b26c:	d133      	bne.n	800b2d6 <_malloc_r+0xde>
 800b26e:	9b00      	ldr	r3, [sp, #0]
 800b270:	6033      	str	r3, [r6, #0]
 800b272:	e019      	b.n	800b2a8 <_malloc_r+0xb0>
 800b274:	2b00      	cmp	r3, #0
 800b276:	dac9      	bge.n	800b20c <_malloc_r+0x14>
 800b278:	230c      	movs	r3, #12
 800b27a:	602b      	str	r3, [r5, #0]
 800b27c:	2000      	movs	r0, #0
 800b27e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b280:	6821      	ldr	r1, [r4, #0]
 800b282:	1bc9      	subs	r1, r1, r7
 800b284:	d420      	bmi.n	800b2c8 <_malloc_r+0xd0>
 800b286:	290b      	cmp	r1, #11
 800b288:	d90a      	bls.n	800b2a0 <_malloc_r+0xa8>
 800b28a:	19e2      	adds	r2, r4, r7
 800b28c:	6027      	str	r7, [r4, #0]
 800b28e:	42a3      	cmp	r3, r4
 800b290:	d104      	bne.n	800b29c <_malloc_r+0xa4>
 800b292:	6032      	str	r2, [r6, #0]
 800b294:	6863      	ldr	r3, [r4, #4]
 800b296:	6011      	str	r1, [r2, #0]
 800b298:	6053      	str	r3, [r2, #4]
 800b29a:	e005      	b.n	800b2a8 <_malloc_r+0xb0>
 800b29c:	605a      	str	r2, [r3, #4]
 800b29e:	e7f9      	b.n	800b294 <_malloc_r+0x9c>
 800b2a0:	6862      	ldr	r2, [r4, #4]
 800b2a2:	42a3      	cmp	r3, r4
 800b2a4:	d10e      	bne.n	800b2c4 <_malloc_r+0xcc>
 800b2a6:	6032      	str	r2, [r6, #0]
 800b2a8:	0028      	movs	r0, r5
 800b2aa:	f000 f82d 	bl	800b308 <__malloc_unlock>
 800b2ae:	0020      	movs	r0, r4
 800b2b0:	2207      	movs	r2, #7
 800b2b2:	300b      	adds	r0, #11
 800b2b4:	1d23      	adds	r3, r4, #4
 800b2b6:	4390      	bics	r0, r2
 800b2b8:	1ac2      	subs	r2, r0, r3
 800b2ba:	4298      	cmp	r0, r3
 800b2bc:	d0df      	beq.n	800b27e <_malloc_r+0x86>
 800b2be:	1a1b      	subs	r3, r3, r0
 800b2c0:	50a3      	str	r3, [r4, r2]
 800b2c2:	e7dc      	b.n	800b27e <_malloc_r+0x86>
 800b2c4:	605a      	str	r2, [r3, #4]
 800b2c6:	e7ef      	b.n	800b2a8 <_malloc_r+0xb0>
 800b2c8:	0023      	movs	r3, r4
 800b2ca:	6864      	ldr	r4, [r4, #4]
 800b2cc:	e7a6      	b.n	800b21c <_malloc_r+0x24>
 800b2ce:	9c00      	ldr	r4, [sp, #0]
 800b2d0:	6863      	ldr	r3, [r4, #4]
 800b2d2:	9300      	str	r3, [sp, #0]
 800b2d4:	e7ad      	b.n	800b232 <_malloc_r+0x3a>
 800b2d6:	001a      	movs	r2, r3
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	42a3      	cmp	r3, r4
 800b2dc:	d1fb      	bne.n	800b2d6 <_malloc_r+0xde>
 800b2de:	2300      	movs	r3, #0
 800b2e0:	e7da      	b.n	800b298 <_malloc_r+0xa0>
 800b2e2:	230c      	movs	r3, #12
 800b2e4:	0028      	movs	r0, r5
 800b2e6:	602b      	str	r3, [r5, #0]
 800b2e8:	f000 f80e 	bl	800b308 <__malloc_unlock>
 800b2ec:	e7c6      	b.n	800b27c <_malloc_r+0x84>
 800b2ee:	6007      	str	r7, [r0, #0]
 800b2f0:	e7da      	b.n	800b2a8 <_malloc_r+0xb0>
 800b2f2:	46c0      	nop			@ (mov r8, r8)
 800b2f4:	20000530 	.word	0x20000530

0800b2f8 <__malloc_lock>:
 800b2f8:	b510      	push	{r4, lr}
 800b2fa:	4802      	ldr	r0, [pc, #8]	@ (800b304 <__malloc_lock+0xc>)
 800b2fc:	f000 f8a8 	bl	800b450 <__retarget_lock_acquire_recursive>
 800b300:	bd10      	pop	{r4, pc}
 800b302:	46c0      	nop			@ (mov r8, r8)
 800b304:	2000066c 	.word	0x2000066c

0800b308 <__malloc_unlock>:
 800b308:	b510      	push	{r4, lr}
 800b30a:	4802      	ldr	r0, [pc, #8]	@ (800b314 <__malloc_unlock+0xc>)
 800b30c:	f000 f8a1 	bl	800b452 <__retarget_lock_release_recursive>
 800b310:	bd10      	pop	{r4, pc}
 800b312:	46c0      	nop			@ (mov r8, r8)
 800b314:	2000066c 	.word	0x2000066c

0800b318 <siprintf>:
 800b318:	b40e      	push	{r1, r2, r3}
 800b31a:	b500      	push	{lr}
 800b31c:	490b      	ldr	r1, [pc, #44]	@ (800b34c <siprintf+0x34>)
 800b31e:	b09c      	sub	sp, #112	@ 0x70
 800b320:	ab1d      	add	r3, sp, #116	@ 0x74
 800b322:	9002      	str	r0, [sp, #8]
 800b324:	9006      	str	r0, [sp, #24]
 800b326:	9107      	str	r1, [sp, #28]
 800b328:	9104      	str	r1, [sp, #16]
 800b32a:	4809      	ldr	r0, [pc, #36]	@ (800b350 <siprintf+0x38>)
 800b32c:	4909      	ldr	r1, [pc, #36]	@ (800b354 <siprintf+0x3c>)
 800b32e:	cb04      	ldmia	r3!, {r2}
 800b330:	9105      	str	r1, [sp, #20]
 800b332:	6800      	ldr	r0, [r0, #0]
 800b334:	a902      	add	r1, sp, #8
 800b336:	9301      	str	r3, [sp, #4]
 800b338:	f000 f940 	bl	800b5bc <_svfiprintf_r>
 800b33c:	2200      	movs	r2, #0
 800b33e:	9b02      	ldr	r3, [sp, #8]
 800b340:	701a      	strb	r2, [r3, #0]
 800b342:	b01c      	add	sp, #112	@ 0x70
 800b344:	bc08      	pop	{r3}
 800b346:	b003      	add	sp, #12
 800b348:	4718      	bx	r3
 800b34a:	46c0      	nop			@ (mov r8, r8)
 800b34c:	7fffffff 	.word	0x7fffffff
 800b350:	20000024 	.word	0x20000024
 800b354:	ffff0208 	.word	0xffff0208

0800b358 <_vsniprintf_r>:
 800b358:	b530      	push	{r4, r5, lr}
 800b35a:	0014      	movs	r4, r2
 800b35c:	0005      	movs	r5, r0
 800b35e:	001a      	movs	r2, r3
 800b360:	b09b      	sub	sp, #108	@ 0x6c
 800b362:	2c00      	cmp	r4, #0
 800b364:	da05      	bge.n	800b372 <_vsniprintf_r+0x1a>
 800b366:	238b      	movs	r3, #139	@ 0x8b
 800b368:	6003      	str	r3, [r0, #0]
 800b36a:	2001      	movs	r0, #1
 800b36c:	4240      	negs	r0, r0
 800b36e:	b01b      	add	sp, #108	@ 0x6c
 800b370:	bd30      	pop	{r4, r5, pc}
 800b372:	2382      	movs	r3, #130	@ 0x82
 800b374:	4668      	mov	r0, sp
 800b376:	009b      	lsls	r3, r3, #2
 800b378:	8183      	strh	r3, [r0, #12]
 800b37a:	2300      	movs	r3, #0
 800b37c:	9100      	str	r1, [sp, #0]
 800b37e:	9104      	str	r1, [sp, #16]
 800b380:	429c      	cmp	r4, r3
 800b382:	d000      	beq.n	800b386 <_vsniprintf_r+0x2e>
 800b384:	1e63      	subs	r3, r4, #1
 800b386:	9302      	str	r3, [sp, #8]
 800b388:	9305      	str	r3, [sp, #20]
 800b38a:	2301      	movs	r3, #1
 800b38c:	4669      	mov	r1, sp
 800b38e:	425b      	negs	r3, r3
 800b390:	81cb      	strh	r3, [r1, #14]
 800b392:	0028      	movs	r0, r5
 800b394:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b396:	f000 f911 	bl	800b5bc <_svfiprintf_r>
 800b39a:	1c43      	adds	r3, r0, #1
 800b39c:	da01      	bge.n	800b3a2 <_vsniprintf_r+0x4a>
 800b39e:	238b      	movs	r3, #139	@ 0x8b
 800b3a0:	602b      	str	r3, [r5, #0]
 800b3a2:	2c00      	cmp	r4, #0
 800b3a4:	d0e3      	beq.n	800b36e <_vsniprintf_r+0x16>
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	9b00      	ldr	r3, [sp, #0]
 800b3aa:	701a      	strb	r2, [r3, #0]
 800b3ac:	e7df      	b.n	800b36e <_vsniprintf_r+0x16>
	...

0800b3b0 <vsniprintf>:
 800b3b0:	b513      	push	{r0, r1, r4, lr}
 800b3b2:	4c04      	ldr	r4, [pc, #16]	@ (800b3c4 <vsniprintf+0x14>)
 800b3b4:	9300      	str	r3, [sp, #0]
 800b3b6:	0013      	movs	r3, r2
 800b3b8:	000a      	movs	r2, r1
 800b3ba:	0001      	movs	r1, r0
 800b3bc:	6820      	ldr	r0, [r4, #0]
 800b3be:	f7ff ffcb 	bl	800b358 <_vsniprintf_r>
 800b3c2:	bd16      	pop	{r1, r2, r4, pc}
 800b3c4:	20000024 	.word	0x20000024

0800b3c8 <memset>:
 800b3c8:	0003      	movs	r3, r0
 800b3ca:	1882      	adds	r2, r0, r2
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d100      	bne.n	800b3d2 <memset+0xa>
 800b3d0:	4770      	bx	lr
 800b3d2:	7019      	strb	r1, [r3, #0]
 800b3d4:	3301      	adds	r3, #1
 800b3d6:	e7f9      	b.n	800b3cc <memset+0x4>

0800b3d8 <_sbrk_r>:
 800b3d8:	2300      	movs	r3, #0
 800b3da:	b570      	push	{r4, r5, r6, lr}
 800b3dc:	4d06      	ldr	r5, [pc, #24]	@ (800b3f8 <_sbrk_r+0x20>)
 800b3de:	0004      	movs	r4, r0
 800b3e0:	0008      	movs	r0, r1
 800b3e2:	602b      	str	r3, [r5, #0]
 800b3e4:	f7f8 fe56 	bl	8004094 <_sbrk>
 800b3e8:	1c43      	adds	r3, r0, #1
 800b3ea:	d103      	bne.n	800b3f4 <_sbrk_r+0x1c>
 800b3ec:	682b      	ldr	r3, [r5, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d000      	beq.n	800b3f4 <_sbrk_r+0x1c>
 800b3f2:	6023      	str	r3, [r4, #0]
 800b3f4:	bd70      	pop	{r4, r5, r6, pc}
 800b3f6:	46c0      	nop			@ (mov r8, r8)
 800b3f8:	20000670 	.word	0x20000670

0800b3fc <__errno>:
 800b3fc:	4b01      	ldr	r3, [pc, #4]	@ (800b404 <__errno+0x8>)
 800b3fe:	6818      	ldr	r0, [r3, #0]
 800b400:	4770      	bx	lr
 800b402:	46c0      	nop			@ (mov r8, r8)
 800b404:	20000024 	.word	0x20000024

0800b408 <__libc_init_array>:
 800b408:	b570      	push	{r4, r5, r6, lr}
 800b40a:	2600      	movs	r6, #0
 800b40c:	4c0c      	ldr	r4, [pc, #48]	@ (800b440 <__libc_init_array+0x38>)
 800b40e:	4d0d      	ldr	r5, [pc, #52]	@ (800b444 <__libc_init_array+0x3c>)
 800b410:	1b64      	subs	r4, r4, r5
 800b412:	10a4      	asrs	r4, r4, #2
 800b414:	42a6      	cmp	r6, r4
 800b416:	d109      	bne.n	800b42c <__libc_init_array+0x24>
 800b418:	2600      	movs	r6, #0
 800b41a:	f000 fd77 	bl	800bf0c <_init>
 800b41e:	4c0a      	ldr	r4, [pc, #40]	@ (800b448 <__libc_init_array+0x40>)
 800b420:	4d0a      	ldr	r5, [pc, #40]	@ (800b44c <__libc_init_array+0x44>)
 800b422:	1b64      	subs	r4, r4, r5
 800b424:	10a4      	asrs	r4, r4, #2
 800b426:	42a6      	cmp	r6, r4
 800b428:	d105      	bne.n	800b436 <__libc_init_array+0x2e>
 800b42a:	bd70      	pop	{r4, r5, r6, pc}
 800b42c:	00b3      	lsls	r3, r6, #2
 800b42e:	58eb      	ldr	r3, [r5, r3]
 800b430:	4798      	blx	r3
 800b432:	3601      	adds	r6, #1
 800b434:	e7ee      	b.n	800b414 <__libc_init_array+0xc>
 800b436:	00b3      	lsls	r3, r6, #2
 800b438:	58eb      	ldr	r3, [r5, r3]
 800b43a:	4798      	blx	r3
 800b43c:	3601      	adds	r6, #1
 800b43e:	e7f2      	b.n	800b426 <__libc_init_array+0x1e>
 800b440:	0800c338 	.word	0x0800c338
 800b444:	0800c338 	.word	0x0800c338
 800b448:	0800c33c 	.word	0x0800c33c
 800b44c:	0800c338 	.word	0x0800c338

0800b450 <__retarget_lock_acquire_recursive>:
 800b450:	4770      	bx	lr

0800b452 <__retarget_lock_release_recursive>:
 800b452:	4770      	bx	lr

0800b454 <memcpy>:
 800b454:	2300      	movs	r3, #0
 800b456:	b510      	push	{r4, lr}
 800b458:	429a      	cmp	r2, r3
 800b45a:	d100      	bne.n	800b45e <memcpy+0xa>
 800b45c:	bd10      	pop	{r4, pc}
 800b45e:	5ccc      	ldrb	r4, [r1, r3]
 800b460:	54c4      	strb	r4, [r0, r3]
 800b462:	3301      	adds	r3, #1
 800b464:	e7f8      	b.n	800b458 <memcpy+0x4>
	...

0800b468 <_free_r>:
 800b468:	b570      	push	{r4, r5, r6, lr}
 800b46a:	0005      	movs	r5, r0
 800b46c:	1e0c      	subs	r4, r1, #0
 800b46e:	d010      	beq.n	800b492 <_free_r+0x2a>
 800b470:	3c04      	subs	r4, #4
 800b472:	6823      	ldr	r3, [r4, #0]
 800b474:	2b00      	cmp	r3, #0
 800b476:	da00      	bge.n	800b47a <_free_r+0x12>
 800b478:	18e4      	adds	r4, r4, r3
 800b47a:	0028      	movs	r0, r5
 800b47c:	f7ff ff3c 	bl	800b2f8 <__malloc_lock>
 800b480:	4a1d      	ldr	r2, [pc, #116]	@ (800b4f8 <_free_r+0x90>)
 800b482:	6813      	ldr	r3, [r2, #0]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d105      	bne.n	800b494 <_free_r+0x2c>
 800b488:	6063      	str	r3, [r4, #4]
 800b48a:	6014      	str	r4, [r2, #0]
 800b48c:	0028      	movs	r0, r5
 800b48e:	f7ff ff3b 	bl	800b308 <__malloc_unlock>
 800b492:	bd70      	pop	{r4, r5, r6, pc}
 800b494:	42a3      	cmp	r3, r4
 800b496:	d908      	bls.n	800b4aa <_free_r+0x42>
 800b498:	6820      	ldr	r0, [r4, #0]
 800b49a:	1821      	adds	r1, r4, r0
 800b49c:	428b      	cmp	r3, r1
 800b49e:	d1f3      	bne.n	800b488 <_free_r+0x20>
 800b4a0:	6819      	ldr	r1, [r3, #0]
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	1809      	adds	r1, r1, r0
 800b4a6:	6021      	str	r1, [r4, #0]
 800b4a8:	e7ee      	b.n	800b488 <_free_r+0x20>
 800b4aa:	001a      	movs	r2, r3
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d001      	beq.n	800b4b6 <_free_r+0x4e>
 800b4b2:	42a3      	cmp	r3, r4
 800b4b4:	d9f9      	bls.n	800b4aa <_free_r+0x42>
 800b4b6:	6811      	ldr	r1, [r2, #0]
 800b4b8:	1850      	adds	r0, r2, r1
 800b4ba:	42a0      	cmp	r0, r4
 800b4bc:	d10b      	bne.n	800b4d6 <_free_r+0x6e>
 800b4be:	6820      	ldr	r0, [r4, #0]
 800b4c0:	1809      	adds	r1, r1, r0
 800b4c2:	1850      	adds	r0, r2, r1
 800b4c4:	6011      	str	r1, [r2, #0]
 800b4c6:	4283      	cmp	r3, r0
 800b4c8:	d1e0      	bne.n	800b48c <_free_r+0x24>
 800b4ca:	6818      	ldr	r0, [r3, #0]
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	1841      	adds	r1, r0, r1
 800b4d0:	6011      	str	r1, [r2, #0]
 800b4d2:	6053      	str	r3, [r2, #4]
 800b4d4:	e7da      	b.n	800b48c <_free_r+0x24>
 800b4d6:	42a0      	cmp	r0, r4
 800b4d8:	d902      	bls.n	800b4e0 <_free_r+0x78>
 800b4da:	230c      	movs	r3, #12
 800b4dc:	602b      	str	r3, [r5, #0]
 800b4de:	e7d5      	b.n	800b48c <_free_r+0x24>
 800b4e0:	6820      	ldr	r0, [r4, #0]
 800b4e2:	1821      	adds	r1, r4, r0
 800b4e4:	428b      	cmp	r3, r1
 800b4e6:	d103      	bne.n	800b4f0 <_free_r+0x88>
 800b4e8:	6819      	ldr	r1, [r3, #0]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	1809      	adds	r1, r1, r0
 800b4ee:	6021      	str	r1, [r4, #0]
 800b4f0:	6063      	str	r3, [r4, #4]
 800b4f2:	6054      	str	r4, [r2, #4]
 800b4f4:	e7ca      	b.n	800b48c <_free_r+0x24>
 800b4f6:	46c0      	nop			@ (mov r8, r8)
 800b4f8:	20000530 	.word	0x20000530

0800b4fc <__ssputs_r>:
 800b4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4fe:	688e      	ldr	r6, [r1, #8]
 800b500:	b085      	sub	sp, #20
 800b502:	001f      	movs	r7, r3
 800b504:	000c      	movs	r4, r1
 800b506:	680b      	ldr	r3, [r1, #0]
 800b508:	9002      	str	r0, [sp, #8]
 800b50a:	9203      	str	r2, [sp, #12]
 800b50c:	42be      	cmp	r6, r7
 800b50e:	d830      	bhi.n	800b572 <__ssputs_r+0x76>
 800b510:	210c      	movs	r1, #12
 800b512:	5e62      	ldrsh	r2, [r4, r1]
 800b514:	2190      	movs	r1, #144	@ 0x90
 800b516:	00c9      	lsls	r1, r1, #3
 800b518:	420a      	tst	r2, r1
 800b51a:	d028      	beq.n	800b56e <__ssputs_r+0x72>
 800b51c:	2003      	movs	r0, #3
 800b51e:	6921      	ldr	r1, [r4, #16]
 800b520:	1a5b      	subs	r3, r3, r1
 800b522:	9301      	str	r3, [sp, #4]
 800b524:	6963      	ldr	r3, [r4, #20]
 800b526:	4343      	muls	r3, r0
 800b528:	9801      	ldr	r0, [sp, #4]
 800b52a:	0fdd      	lsrs	r5, r3, #31
 800b52c:	18ed      	adds	r5, r5, r3
 800b52e:	1c7b      	adds	r3, r7, #1
 800b530:	181b      	adds	r3, r3, r0
 800b532:	106d      	asrs	r5, r5, #1
 800b534:	42ab      	cmp	r3, r5
 800b536:	d900      	bls.n	800b53a <__ssputs_r+0x3e>
 800b538:	001d      	movs	r5, r3
 800b53a:	0552      	lsls	r2, r2, #21
 800b53c:	d528      	bpl.n	800b590 <__ssputs_r+0x94>
 800b53e:	0029      	movs	r1, r5
 800b540:	9802      	ldr	r0, [sp, #8]
 800b542:	f7ff fe59 	bl	800b1f8 <_malloc_r>
 800b546:	1e06      	subs	r6, r0, #0
 800b548:	d02c      	beq.n	800b5a4 <__ssputs_r+0xa8>
 800b54a:	9a01      	ldr	r2, [sp, #4]
 800b54c:	6921      	ldr	r1, [r4, #16]
 800b54e:	f7ff ff81 	bl	800b454 <memcpy>
 800b552:	89a2      	ldrh	r2, [r4, #12]
 800b554:	4b18      	ldr	r3, [pc, #96]	@ (800b5b8 <__ssputs_r+0xbc>)
 800b556:	401a      	ands	r2, r3
 800b558:	2380      	movs	r3, #128	@ 0x80
 800b55a:	4313      	orrs	r3, r2
 800b55c:	81a3      	strh	r3, [r4, #12]
 800b55e:	9b01      	ldr	r3, [sp, #4]
 800b560:	6126      	str	r6, [r4, #16]
 800b562:	18f6      	adds	r6, r6, r3
 800b564:	6026      	str	r6, [r4, #0]
 800b566:	003e      	movs	r6, r7
 800b568:	6165      	str	r5, [r4, #20]
 800b56a:	1aed      	subs	r5, r5, r3
 800b56c:	60a5      	str	r5, [r4, #8]
 800b56e:	42be      	cmp	r6, r7
 800b570:	d900      	bls.n	800b574 <__ssputs_r+0x78>
 800b572:	003e      	movs	r6, r7
 800b574:	0032      	movs	r2, r6
 800b576:	9903      	ldr	r1, [sp, #12]
 800b578:	6820      	ldr	r0, [r4, #0]
 800b57a:	f000 faca 	bl	800bb12 <memmove>
 800b57e:	2000      	movs	r0, #0
 800b580:	68a3      	ldr	r3, [r4, #8]
 800b582:	1b9b      	subs	r3, r3, r6
 800b584:	60a3      	str	r3, [r4, #8]
 800b586:	6823      	ldr	r3, [r4, #0]
 800b588:	199b      	adds	r3, r3, r6
 800b58a:	6023      	str	r3, [r4, #0]
 800b58c:	b005      	add	sp, #20
 800b58e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b590:	002a      	movs	r2, r5
 800b592:	9802      	ldr	r0, [sp, #8]
 800b594:	f000 fa8e 	bl	800bab4 <_realloc_r>
 800b598:	1e06      	subs	r6, r0, #0
 800b59a:	d1e0      	bne.n	800b55e <__ssputs_r+0x62>
 800b59c:	6921      	ldr	r1, [r4, #16]
 800b59e:	9802      	ldr	r0, [sp, #8]
 800b5a0:	f7ff ff62 	bl	800b468 <_free_r>
 800b5a4:	230c      	movs	r3, #12
 800b5a6:	2001      	movs	r0, #1
 800b5a8:	9a02      	ldr	r2, [sp, #8]
 800b5aa:	4240      	negs	r0, r0
 800b5ac:	6013      	str	r3, [r2, #0]
 800b5ae:	89a2      	ldrh	r2, [r4, #12]
 800b5b0:	3334      	adds	r3, #52	@ 0x34
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	81a3      	strh	r3, [r4, #12]
 800b5b6:	e7e9      	b.n	800b58c <__ssputs_r+0x90>
 800b5b8:	fffffb7f 	.word	0xfffffb7f

0800b5bc <_svfiprintf_r>:
 800b5bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5be:	b0a1      	sub	sp, #132	@ 0x84
 800b5c0:	9003      	str	r0, [sp, #12]
 800b5c2:	001d      	movs	r5, r3
 800b5c4:	898b      	ldrh	r3, [r1, #12]
 800b5c6:	000f      	movs	r7, r1
 800b5c8:	0016      	movs	r6, r2
 800b5ca:	061b      	lsls	r3, r3, #24
 800b5cc:	d511      	bpl.n	800b5f2 <_svfiprintf_r+0x36>
 800b5ce:	690b      	ldr	r3, [r1, #16]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d10e      	bne.n	800b5f2 <_svfiprintf_r+0x36>
 800b5d4:	2140      	movs	r1, #64	@ 0x40
 800b5d6:	f7ff fe0f 	bl	800b1f8 <_malloc_r>
 800b5da:	6038      	str	r0, [r7, #0]
 800b5dc:	6138      	str	r0, [r7, #16]
 800b5de:	2800      	cmp	r0, #0
 800b5e0:	d105      	bne.n	800b5ee <_svfiprintf_r+0x32>
 800b5e2:	230c      	movs	r3, #12
 800b5e4:	9a03      	ldr	r2, [sp, #12]
 800b5e6:	6013      	str	r3, [r2, #0]
 800b5e8:	2001      	movs	r0, #1
 800b5ea:	4240      	negs	r0, r0
 800b5ec:	e0cf      	b.n	800b78e <_svfiprintf_r+0x1d2>
 800b5ee:	2340      	movs	r3, #64	@ 0x40
 800b5f0:	617b      	str	r3, [r7, #20]
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	ac08      	add	r4, sp, #32
 800b5f6:	6163      	str	r3, [r4, #20]
 800b5f8:	3320      	adds	r3, #32
 800b5fa:	7663      	strb	r3, [r4, #25]
 800b5fc:	3310      	adds	r3, #16
 800b5fe:	76a3      	strb	r3, [r4, #26]
 800b600:	9507      	str	r5, [sp, #28]
 800b602:	0035      	movs	r5, r6
 800b604:	782b      	ldrb	r3, [r5, #0]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d001      	beq.n	800b60e <_svfiprintf_r+0x52>
 800b60a:	2b25      	cmp	r3, #37	@ 0x25
 800b60c:	d148      	bne.n	800b6a0 <_svfiprintf_r+0xe4>
 800b60e:	1bab      	subs	r3, r5, r6
 800b610:	9305      	str	r3, [sp, #20]
 800b612:	42b5      	cmp	r5, r6
 800b614:	d00b      	beq.n	800b62e <_svfiprintf_r+0x72>
 800b616:	0032      	movs	r2, r6
 800b618:	0039      	movs	r1, r7
 800b61a:	9803      	ldr	r0, [sp, #12]
 800b61c:	f7ff ff6e 	bl	800b4fc <__ssputs_r>
 800b620:	3001      	adds	r0, #1
 800b622:	d100      	bne.n	800b626 <_svfiprintf_r+0x6a>
 800b624:	e0ae      	b.n	800b784 <_svfiprintf_r+0x1c8>
 800b626:	6963      	ldr	r3, [r4, #20]
 800b628:	9a05      	ldr	r2, [sp, #20]
 800b62a:	189b      	adds	r3, r3, r2
 800b62c:	6163      	str	r3, [r4, #20]
 800b62e:	782b      	ldrb	r3, [r5, #0]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d100      	bne.n	800b636 <_svfiprintf_r+0x7a>
 800b634:	e0a6      	b.n	800b784 <_svfiprintf_r+0x1c8>
 800b636:	2201      	movs	r2, #1
 800b638:	2300      	movs	r3, #0
 800b63a:	4252      	negs	r2, r2
 800b63c:	6062      	str	r2, [r4, #4]
 800b63e:	a904      	add	r1, sp, #16
 800b640:	3254      	adds	r2, #84	@ 0x54
 800b642:	1852      	adds	r2, r2, r1
 800b644:	1c6e      	adds	r6, r5, #1
 800b646:	6023      	str	r3, [r4, #0]
 800b648:	60e3      	str	r3, [r4, #12]
 800b64a:	60a3      	str	r3, [r4, #8]
 800b64c:	7013      	strb	r3, [r2, #0]
 800b64e:	65a3      	str	r3, [r4, #88]	@ 0x58
 800b650:	4b54      	ldr	r3, [pc, #336]	@ (800b7a4 <_svfiprintf_r+0x1e8>)
 800b652:	2205      	movs	r2, #5
 800b654:	0018      	movs	r0, r3
 800b656:	7831      	ldrb	r1, [r6, #0]
 800b658:	9305      	str	r3, [sp, #20]
 800b65a:	f000 fa6d 	bl	800bb38 <memchr>
 800b65e:	1c75      	adds	r5, r6, #1
 800b660:	2800      	cmp	r0, #0
 800b662:	d11f      	bne.n	800b6a4 <_svfiprintf_r+0xe8>
 800b664:	6822      	ldr	r2, [r4, #0]
 800b666:	06d3      	lsls	r3, r2, #27
 800b668:	d504      	bpl.n	800b674 <_svfiprintf_r+0xb8>
 800b66a:	2353      	movs	r3, #83	@ 0x53
 800b66c:	a904      	add	r1, sp, #16
 800b66e:	185b      	adds	r3, r3, r1
 800b670:	2120      	movs	r1, #32
 800b672:	7019      	strb	r1, [r3, #0]
 800b674:	0713      	lsls	r3, r2, #28
 800b676:	d504      	bpl.n	800b682 <_svfiprintf_r+0xc6>
 800b678:	2353      	movs	r3, #83	@ 0x53
 800b67a:	a904      	add	r1, sp, #16
 800b67c:	185b      	adds	r3, r3, r1
 800b67e:	212b      	movs	r1, #43	@ 0x2b
 800b680:	7019      	strb	r1, [r3, #0]
 800b682:	7833      	ldrb	r3, [r6, #0]
 800b684:	2b2a      	cmp	r3, #42	@ 0x2a
 800b686:	d016      	beq.n	800b6b6 <_svfiprintf_r+0xfa>
 800b688:	0035      	movs	r5, r6
 800b68a:	2100      	movs	r1, #0
 800b68c:	200a      	movs	r0, #10
 800b68e:	68e3      	ldr	r3, [r4, #12]
 800b690:	782a      	ldrb	r2, [r5, #0]
 800b692:	1c6e      	adds	r6, r5, #1
 800b694:	3a30      	subs	r2, #48	@ 0x30
 800b696:	2a09      	cmp	r2, #9
 800b698:	d950      	bls.n	800b73c <_svfiprintf_r+0x180>
 800b69a:	2900      	cmp	r1, #0
 800b69c:	d111      	bne.n	800b6c2 <_svfiprintf_r+0x106>
 800b69e:	e017      	b.n	800b6d0 <_svfiprintf_r+0x114>
 800b6a0:	3501      	adds	r5, #1
 800b6a2:	e7af      	b.n	800b604 <_svfiprintf_r+0x48>
 800b6a4:	9b05      	ldr	r3, [sp, #20]
 800b6a6:	6822      	ldr	r2, [r4, #0]
 800b6a8:	1ac0      	subs	r0, r0, r3
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	4083      	lsls	r3, r0
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	002e      	movs	r6, r5
 800b6b2:	6023      	str	r3, [r4, #0]
 800b6b4:	e7cc      	b.n	800b650 <_svfiprintf_r+0x94>
 800b6b6:	9b07      	ldr	r3, [sp, #28]
 800b6b8:	1d19      	adds	r1, r3, #4
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	9107      	str	r1, [sp, #28]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	db01      	blt.n	800b6c6 <_svfiprintf_r+0x10a>
 800b6c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b6c4:	e004      	b.n	800b6d0 <_svfiprintf_r+0x114>
 800b6c6:	425b      	negs	r3, r3
 800b6c8:	60e3      	str	r3, [r4, #12]
 800b6ca:	2302      	movs	r3, #2
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	6023      	str	r3, [r4, #0]
 800b6d0:	782b      	ldrb	r3, [r5, #0]
 800b6d2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b6d4:	d10c      	bne.n	800b6f0 <_svfiprintf_r+0x134>
 800b6d6:	786b      	ldrb	r3, [r5, #1]
 800b6d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6da:	d134      	bne.n	800b746 <_svfiprintf_r+0x18a>
 800b6dc:	9b07      	ldr	r3, [sp, #28]
 800b6de:	3502      	adds	r5, #2
 800b6e0:	1d1a      	adds	r2, r3, #4
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	9207      	str	r2, [sp, #28]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	da01      	bge.n	800b6ee <_svfiprintf_r+0x132>
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	425b      	negs	r3, r3
 800b6ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6f0:	4e2d      	ldr	r6, [pc, #180]	@ (800b7a8 <_svfiprintf_r+0x1ec>)
 800b6f2:	2203      	movs	r2, #3
 800b6f4:	0030      	movs	r0, r6
 800b6f6:	7829      	ldrb	r1, [r5, #0]
 800b6f8:	f000 fa1e 	bl	800bb38 <memchr>
 800b6fc:	2800      	cmp	r0, #0
 800b6fe:	d006      	beq.n	800b70e <_svfiprintf_r+0x152>
 800b700:	2340      	movs	r3, #64	@ 0x40
 800b702:	1b80      	subs	r0, r0, r6
 800b704:	4083      	lsls	r3, r0
 800b706:	6822      	ldr	r2, [r4, #0]
 800b708:	3501      	adds	r5, #1
 800b70a:	4313      	orrs	r3, r2
 800b70c:	6023      	str	r3, [r4, #0]
 800b70e:	7829      	ldrb	r1, [r5, #0]
 800b710:	2206      	movs	r2, #6
 800b712:	4826      	ldr	r0, [pc, #152]	@ (800b7ac <_svfiprintf_r+0x1f0>)
 800b714:	1c6e      	adds	r6, r5, #1
 800b716:	7621      	strb	r1, [r4, #24]
 800b718:	f000 fa0e 	bl	800bb38 <memchr>
 800b71c:	2800      	cmp	r0, #0
 800b71e:	d038      	beq.n	800b792 <_svfiprintf_r+0x1d6>
 800b720:	4b23      	ldr	r3, [pc, #140]	@ (800b7b0 <_svfiprintf_r+0x1f4>)
 800b722:	2b00      	cmp	r3, #0
 800b724:	d122      	bne.n	800b76c <_svfiprintf_r+0x1b0>
 800b726:	2207      	movs	r2, #7
 800b728:	9b07      	ldr	r3, [sp, #28]
 800b72a:	3307      	adds	r3, #7
 800b72c:	4393      	bics	r3, r2
 800b72e:	3308      	adds	r3, #8
 800b730:	9307      	str	r3, [sp, #28]
 800b732:	6963      	ldr	r3, [r4, #20]
 800b734:	9a04      	ldr	r2, [sp, #16]
 800b736:	189b      	adds	r3, r3, r2
 800b738:	6163      	str	r3, [r4, #20]
 800b73a:	e762      	b.n	800b602 <_svfiprintf_r+0x46>
 800b73c:	4343      	muls	r3, r0
 800b73e:	0035      	movs	r5, r6
 800b740:	2101      	movs	r1, #1
 800b742:	189b      	adds	r3, r3, r2
 800b744:	e7a4      	b.n	800b690 <_svfiprintf_r+0xd4>
 800b746:	2300      	movs	r3, #0
 800b748:	200a      	movs	r0, #10
 800b74a:	0019      	movs	r1, r3
 800b74c:	3501      	adds	r5, #1
 800b74e:	6063      	str	r3, [r4, #4]
 800b750:	782a      	ldrb	r2, [r5, #0]
 800b752:	1c6e      	adds	r6, r5, #1
 800b754:	3a30      	subs	r2, #48	@ 0x30
 800b756:	2a09      	cmp	r2, #9
 800b758:	d903      	bls.n	800b762 <_svfiprintf_r+0x1a6>
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d0c8      	beq.n	800b6f0 <_svfiprintf_r+0x134>
 800b75e:	9109      	str	r1, [sp, #36]	@ 0x24
 800b760:	e7c6      	b.n	800b6f0 <_svfiprintf_r+0x134>
 800b762:	4341      	muls	r1, r0
 800b764:	0035      	movs	r5, r6
 800b766:	2301      	movs	r3, #1
 800b768:	1889      	adds	r1, r1, r2
 800b76a:	e7f1      	b.n	800b750 <_svfiprintf_r+0x194>
 800b76c:	aa07      	add	r2, sp, #28
 800b76e:	9200      	str	r2, [sp, #0]
 800b770:	0021      	movs	r1, r4
 800b772:	003a      	movs	r2, r7
 800b774:	4b0f      	ldr	r3, [pc, #60]	@ (800b7b4 <_svfiprintf_r+0x1f8>)
 800b776:	9803      	ldr	r0, [sp, #12]
 800b778:	e000      	b.n	800b77c <_svfiprintf_r+0x1c0>
 800b77a:	bf00      	nop
 800b77c:	9004      	str	r0, [sp, #16]
 800b77e:	9b04      	ldr	r3, [sp, #16]
 800b780:	3301      	adds	r3, #1
 800b782:	d1d6      	bne.n	800b732 <_svfiprintf_r+0x176>
 800b784:	89bb      	ldrh	r3, [r7, #12]
 800b786:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800b788:	065b      	lsls	r3, r3, #25
 800b78a:	d500      	bpl.n	800b78e <_svfiprintf_r+0x1d2>
 800b78c:	e72c      	b.n	800b5e8 <_svfiprintf_r+0x2c>
 800b78e:	b021      	add	sp, #132	@ 0x84
 800b790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b792:	aa07      	add	r2, sp, #28
 800b794:	9200      	str	r2, [sp, #0]
 800b796:	0021      	movs	r1, r4
 800b798:	003a      	movs	r2, r7
 800b79a:	4b06      	ldr	r3, [pc, #24]	@ (800b7b4 <_svfiprintf_r+0x1f8>)
 800b79c:	9803      	ldr	r0, [sp, #12]
 800b79e:	f000 f87b 	bl	800b898 <_printf_i>
 800b7a2:	e7eb      	b.n	800b77c <_svfiprintf_r+0x1c0>
 800b7a4:	0800c2cc 	.word	0x0800c2cc
 800b7a8:	0800c2d2 	.word	0x0800c2d2
 800b7ac:	0800c2d6 	.word	0x0800c2d6
 800b7b0:	00000000 	.word	0x00000000
 800b7b4:	0800b4fd 	.word	0x0800b4fd

0800b7b8 <_printf_common>:
 800b7b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7ba:	0016      	movs	r6, r2
 800b7bc:	9301      	str	r3, [sp, #4]
 800b7be:	688a      	ldr	r2, [r1, #8]
 800b7c0:	690b      	ldr	r3, [r1, #16]
 800b7c2:	000c      	movs	r4, r1
 800b7c4:	9000      	str	r0, [sp, #0]
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	da00      	bge.n	800b7cc <_printf_common+0x14>
 800b7ca:	0013      	movs	r3, r2
 800b7cc:	0022      	movs	r2, r4
 800b7ce:	6033      	str	r3, [r6, #0]
 800b7d0:	3243      	adds	r2, #67	@ 0x43
 800b7d2:	7812      	ldrb	r2, [r2, #0]
 800b7d4:	2a00      	cmp	r2, #0
 800b7d6:	d001      	beq.n	800b7dc <_printf_common+0x24>
 800b7d8:	3301      	adds	r3, #1
 800b7da:	6033      	str	r3, [r6, #0]
 800b7dc:	6823      	ldr	r3, [r4, #0]
 800b7de:	069b      	lsls	r3, r3, #26
 800b7e0:	d502      	bpl.n	800b7e8 <_printf_common+0x30>
 800b7e2:	6833      	ldr	r3, [r6, #0]
 800b7e4:	3302      	adds	r3, #2
 800b7e6:	6033      	str	r3, [r6, #0]
 800b7e8:	6822      	ldr	r2, [r4, #0]
 800b7ea:	2306      	movs	r3, #6
 800b7ec:	0015      	movs	r5, r2
 800b7ee:	401d      	ands	r5, r3
 800b7f0:	421a      	tst	r2, r3
 800b7f2:	d027      	beq.n	800b844 <_printf_common+0x8c>
 800b7f4:	0023      	movs	r3, r4
 800b7f6:	3343      	adds	r3, #67	@ 0x43
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	1e5a      	subs	r2, r3, #1
 800b7fc:	4193      	sbcs	r3, r2
 800b7fe:	6822      	ldr	r2, [r4, #0]
 800b800:	0692      	lsls	r2, r2, #26
 800b802:	d430      	bmi.n	800b866 <_printf_common+0xae>
 800b804:	0022      	movs	r2, r4
 800b806:	9901      	ldr	r1, [sp, #4]
 800b808:	9800      	ldr	r0, [sp, #0]
 800b80a:	9d08      	ldr	r5, [sp, #32]
 800b80c:	3243      	adds	r2, #67	@ 0x43
 800b80e:	47a8      	blx	r5
 800b810:	3001      	adds	r0, #1
 800b812:	d025      	beq.n	800b860 <_printf_common+0xa8>
 800b814:	2206      	movs	r2, #6
 800b816:	6823      	ldr	r3, [r4, #0]
 800b818:	2500      	movs	r5, #0
 800b81a:	4013      	ands	r3, r2
 800b81c:	2b04      	cmp	r3, #4
 800b81e:	d105      	bne.n	800b82c <_printf_common+0x74>
 800b820:	6833      	ldr	r3, [r6, #0]
 800b822:	68e5      	ldr	r5, [r4, #12]
 800b824:	1aed      	subs	r5, r5, r3
 800b826:	43eb      	mvns	r3, r5
 800b828:	17db      	asrs	r3, r3, #31
 800b82a:	401d      	ands	r5, r3
 800b82c:	68a3      	ldr	r3, [r4, #8]
 800b82e:	6922      	ldr	r2, [r4, #16]
 800b830:	4293      	cmp	r3, r2
 800b832:	dd01      	ble.n	800b838 <_printf_common+0x80>
 800b834:	1a9b      	subs	r3, r3, r2
 800b836:	18ed      	adds	r5, r5, r3
 800b838:	2600      	movs	r6, #0
 800b83a:	42b5      	cmp	r5, r6
 800b83c:	d120      	bne.n	800b880 <_printf_common+0xc8>
 800b83e:	2000      	movs	r0, #0
 800b840:	e010      	b.n	800b864 <_printf_common+0xac>
 800b842:	3501      	adds	r5, #1
 800b844:	68e3      	ldr	r3, [r4, #12]
 800b846:	6832      	ldr	r2, [r6, #0]
 800b848:	1a9b      	subs	r3, r3, r2
 800b84a:	42ab      	cmp	r3, r5
 800b84c:	ddd2      	ble.n	800b7f4 <_printf_common+0x3c>
 800b84e:	0022      	movs	r2, r4
 800b850:	2301      	movs	r3, #1
 800b852:	9901      	ldr	r1, [sp, #4]
 800b854:	9800      	ldr	r0, [sp, #0]
 800b856:	9f08      	ldr	r7, [sp, #32]
 800b858:	3219      	adds	r2, #25
 800b85a:	47b8      	blx	r7
 800b85c:	3001      	adds	r0, #1
 800b85e:	d1f0      	bne.n	800b842 <_printf_common+0x8a>
 800b860:	2001      	movs	r0, #1
 800b862:	4240      	negs	r0, r0
 800b864:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b866:	2030      	movs	r0, #48	@ 0x30
 800b868:	18e1      	adds	r1, r4, r3
 800b86a:	3143      	adds	r1, #67	@ 0x43
 800b86c:	7008      	strb	r0, [r1, #0]
 800b86e:	0021      	movs	r1, r4
 800b870:	1c5a      	adds	r2, r3, #1
 800b872:	3145      	adds	r1, #69	@ 0x45
 800b874:	7809      	ldrb	r1, [r1, #0]
 800b876:	18a2      	adds	r2, r4, r2
 800b878:	3243      	adds	r2, #67	@ 0x43
 800b87a:	3302      	adds	r3, #2
 800b87c:	7011      	strb	r1, [r2, #0]
 800b87e:	e7c1      	b.n	800b804 <_printf_common+0x4c>
 800b880:	0022      	movs	r2, r4
 800b882:	2301      	movs	r3, #1
 800b884:	9901      	ldr	r1, [sp, #4]
 800b886:	9800      	ldr	r0, [sp, #0]
 800b888:	9f08      	ldr	r7, [sp, #32]
 800b88a:	321a      	adds	r2, #26
 800b88c:	47b8      	blx	r7
 800b88e:	3001      	adds	r0, #1
 800b890:	d0e6      	beq.n	800b860 <_printf_common+0xa8>
 800b892:	3601      	adds	r6, #1
 800b894:	e7d1      	b.n	800b83a <_printf_common+0x82>
	...

0800b898 <_printf_i>:
 800b898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b89a:	b08b      	sub	sp, #44	@ 0x2c
 800b89c:	9206      	str	r2, [sp, #24]
 800b89e:	000a      	movs	r2, r1
 800b8a0:	3243      	adds	r2, #67	@ 0x43
 800b8a2:	9307      	str	r3, [sp, #28]
 800b8a4:	9005      	str	r0, [sp, #20]
 800b8a6:	9203      	str	r2, [sp, #12]
 800b8a8:	7e0a      	ldrb	r2, [r1, #24]
 800b8aa:	000c      	movs	r4, r1
 800b8ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b8ae:	2a78      	cmp	r2, #120	@ 0x78
 800b8b0:	d809      	bhi.n	800b8c6 <_printf_i+0x2e>
 800b8b2:	2a62      	cmp	r2, #98	@ 0x62
 800b8b4:	d80b      	bhi.n	800b8ce <_printf_i+0x36>
 800b8b6:	2a00      	cmp	r2, #0
 800b8b8:	d100      	bne.n	800b8bc <_printf_i+0x24>
 800b8ba:	e0bc      	b.n	800ba36 <_printf_i+0x19e>
 800b8bc:	497b      	ldr	r1, [pc, #492]	@ (800baac <_printf_i+0x214>)
 800b8be:	9104      	str	r1, [sp, #16]
 800b8c0:	2a58      	cmp	r2, #88	@ 0x58
 800b8c2:	d100      	bne.n	800b8c6 <_printf_i+0x2e>
 800b8c4:	e090      	b.n	800b9e8 <_printf_i+0x150>
 800b8c6:	0025      	movs	r5, r4
 800b8c8:	3542      	adds	r5, #66	@ 0x42
 800b8ca:	702a      	strb	r2, [r5, #0]
 800b8cc:	e022      	b.n	800b914 <_printf_i+0x7c>
 800b8ce:	0010      	movs	r0, r2
 800b8d0:	3863      	subs	r0, #99	@ 0x63
 800b8d2:	2815      	cmp	r0, #21
 800b8d4:	d8f7      	bhi.n	800b8c6 <_printf_i+0x2e>
 800b8d6:	f7f4 fc1f 	bl	8000118 <__gnu_thumb1_case_shi>
 800b8da:	0016      	.short	0x0016
 800b8dc:	fff6001f 	.word	0xfff6001f
 800b8e0:	fff6fff6 	.word	0xfff6fff6
 800b8e4:	001ffff6 	.word	0x001ffff6
 800b8e8:	fff6fff6 	.word	0xfff6fff6
 800b8ec:	fff6fff6 	.word	0xfff6fff6
 800b8f0:	003600a1 	.word	0x003600a1
 800b8f4:	fff60080 	.word	0xfff60080
 800b8f8:	00b2fff6 	.word	0x00b2fff6
 800b8fc:	0036fff6 	.word	0x0036fff6
 800b900:	fff6fff6 	.word	0xfff6fff6
 800b904:	0084      	.short	0x0084
 800b906:	0025      	movs	r5, r4
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	3542      	adds	r5, #66	@ 0x42
 800b90c:	1d11      	adds	r1, r2, #4
 800b90e:	6019      	str	r1, [r3, #0]
 800b910:	6813      	ldr	r3, [r2, #0]
 800b912:	702b      	strb	r3, [r5, #0]
 800b914:	2301      	movs	r3, #1
 800b916:	e0a0      	b.n	800ba5a <_printf_i+0x1c2>
 800b918:	6818      	ldr	r0, [r3, #0]
 800b91a:	6809      	ldr	r1, [r1, #0]
 800b91c:	1d02      	adds	r2, r0, #4
 800b91e:	060d      	lsls	r5, r1, #24
 800b920:	d50b      	bpl.n	800b93a <_printf_i+0xa2>
 800b922:	6806      	ldr	r6, [r0, #0]
 800b924:	601a      	str	r2, [r3, #0]
 800b926:	2e00      	cmp	r6, #0
 800b928:	da03      	bge.n	800b932 <_printf_i+0x9a>
 800b92a:	232d      	movs	r3, #45	@ 0x2d
 800b92c:	9a03      	ldr	r2, [sp, #12]
 800b92e:	4276      	negs	r6, r6
 800b930:	7013      	strb	r3, [r2, #0]
 800b932:	4b5e      	ldr	r3, [pc, #376]	@ (800baac <_printf_i+0x214>)
 800b934:	270a      	movs	r7, #10
 800b936:	9304      	str	r3, [sp, #16]
 800b938:	e018      	b.n	800b96c <_printf_i+0xd4>
 800b93a:	6806      	ldr	r6, [r0, #0]
 800b93c:	601a      	str	r2, [r3, #0]
 800b93e:	0649      	lsls	r1, r1, #25
 800b940:	d5f1      	bpl.n	800b926 <_printf_i+0x8e>
 800b942:	b236      	sxth	r6, r6
 800b944:	e7ef      	b.n	800b926 <_printf_i+0x8e>
 800b946:	6808      	ldr	r0, [r1, #0]
 800b948:	6819      	ldr	r1, [r3, #0]
 800b94a:	c940      	ldmia	r1!, {r6}
 800b94c:	0605      	lsls	r5, r0, #24
 800b94e:	d402      	bmi.n	800b956 <_printf_i+0xbe>
 800b950:	0640      	lsls	r0, r0, #25
 800b952:	d500      	bpl.n	800b956 <_printf_i+0xbe>
 800b954:	b2b6      	uxth	r6, r6
 800b956:	6019      	str	r1, [r3, #0]
 800b958:	4b54      	ldr	r3, [pc, #336]	@ (800baac <_printf_i+0x214>)
 800b95a:	270a      	movs	r7, #10
 800b95c:	9304      	str	r3, [sp, #16]
 800b95e:	2a6f      	cmp	r2, #111	@ 0x6f
 800b960:	d100      	bne.n	800b964 <_printf_i+0xcc>
 800b962:	3f02      	subs	r7, #2
 800b964:	0023      	movs	r3, r4
 800b966:	2200      	movs	r2, #0
 800b968:	3343      	adds	r3, #67	@ 0x43
 800b96a:	701a      	strb	r2, [r3, #0]
 800b96c:	6863      	ldr	r3, [r4, #4]
 800b96e:	60a3      	str	r3, [r4, #8]
 800b970:	2b00      	cmp	r3, #0
 800b972:	db03      	blt.n	800b97c <_printf_i+0xe4>
 800b974:	2104      	movs	r1, #4
 800b976:	6822      	ldr	r2, [r4, #0]
 800b978:	438a      	bics	r2, r1
 800b97a:	6022      	str	r2, [r4, #0]
 800b97c:	2e00      	cmp	r6, #0
 800b97e:	d102      	bne.n	800b986 <_printf_i+0xee>
 800b980:	9d03      	ldr	r5, [sp, #12]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d00c      	beq.n	800b9a0 <_printf_i+0x108>
 800b986:	9d03      	ldr	r5, [sp, #12]
 800b988:	0030      	movs	r0, r6
 800b98a:	0039      	movs	r1, r7
 800b98c:	f7f4 fc54 	bl	8000238 <__aeabi_uidivmod>
 800b990:	9b04      	ldr	r3, [sp, #16]
 800b992:	3d01      	subs	r5, #1
 800b994:	5c5b      	ldrb	r3, [r3, r1]
 800b996:	702b      	strb	r3, [r5, #0]
 800b998:	0033      	movs	r3, r6
 800b99a:	0006      	movs	r6, r0
 800b99c:	429f      	cmp	r7, r3
 800b99e:	d9f3      	bls.n	800b988 <_printf_i+0xf0>
 800b9a0:	2f08      	cmp	r7, #8
 800b9a2:	d109      	bne.n	800b9b8 <_printf_i+0x120>
 800b9a4:	6823      	ldr	r3, [r4, #0]
 800b9a6:	07db      	lsls	r3, r3, #31
 800b9a8:	d506      	bpl.n	800b9b8 <_printf_i+0x120>
 800b9aa:	6862      	ldr	r2, [r4, #4]
 800b9ac:	6923      	ldr	r3, [r4, #16]
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	dc02      	bgt.n	800b9b8 <_printf_i+0x120>
 800b9b2:	2330      	movs	r3, #48	@ 0x30
 800b9b4:	3d01      	subs	r5, #1
 800b9b6:	702b      	strb	r3, [r5, #0]
 800b9b8:	9b03      	ldr	r3, [sp, #12]
 800b9ba:	1b5b      	subs	r3, r3, r5
 800b9bc:	6123      	str	r3, [r4, #16]
 800b9be:	9b07      	ldr	r3, [sp, #28]
 800b9c0:	0021      	movs	r1, r4
 800b9c2:	9300      	str	r3, [sp, #0]
 800b9c4:	9805      	ldr	r0, [sp, #20]
 800b9c6:	9b06      	ldr	r3, [sp, #24]
 800b9c8:	aa09      	add	r2, sp, #36	@ 0x24
 800b9ca:	f7ff fef5 	bl	800b7b8 <_printf_common>
 800b9ce:	3001      	adds	r0, #1
 800b9d0:	d148      	bne.n	800ba64 <_printf_i+0x1cc>
 800b9d2:	2001      	movs	r0, #1
 800b9d4:	4240      	negs	r0, r0
 800b9d6:	b00b      	add	sp, #44	@ 0x2c
 800b9d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9da:	2220      	movs	r2, #32
 800b9dc:	6809      	ldr	r1, [r1, #0]
 800b9de:	430a      	orrs	r2, r1
 800b9e0:	6022      	str	r2, [r4, #0]
 800b9e2:	2278      	movs	r2, #120	@ 0x78
 800b9e4:	4932      	ldr	r1, [pc, #200]	@ (800bab0 <_printf_i+0x218>)
 800b9e6:	9104      	str	r1, [sp, #16]
 800b9e8:	0021      	movs	r1, r4
 800b9ea:	3145      	adds	r1, #69	@ 0x45
 800b9ec:	700a      	strb	r2, [r1, #0]
 800b9ee:	6819      	ldr	r1, [r3, #0]
 800b9f0:	6822      	ldr	r2, [r4, #0]
 800b9f2:	c940      	ldmia	r1!, {r6}
 800b9f4:	0610      	lsls	r0, r2, #24
 800b9f6:	d402      	bmi.n	800b9fe <_printf_i+0x166>
 800b9f8:	0650      	lsls	r0, r2, #25
 800b9fa:	d500      	bpl.n	800b9fe <_printf_i+0x166>
 800b9fc:	b2b6      	uxth	r6, r6
 800b9fe:	6019      	str	r1, [r3, #0]
 800ba00:	07d3      	lsls	r3, r2, #31
 800ba02:	d502      	bpl.n	800ba0a <_printf_i+0x172>
 800ba04:	2320      	movs	r3, #32
 800ba06:	4313      	orrs	r3, r2
 800ba08:	6023      	str	r3, [r4, #0]
 800ba0a:	2e00      	cmp	r6, #0
 800ba0c:	d001      	beq.n	800ba12 <_printf_i+0x17a>
 800ba0e:	2710      	movs	r7, #16
 800ba10:	e7a8      	b.n	800b964 <_printf_i+0xcc>
 800ba12:	2220      	movs	r2, #32
 800ba14:	6823      	ldr	r3, [r4, #0]
 800ba16:	4393      	bics	r3, r2
 800ba18:	6023      	str	r3, [r4, #0]
 800ba1a:	e7f8      	b.n	800ba0e <_printf_i+0x176>
 800ba1c:	681a      	ldr	r2, [r3, #0]
 800ba1e:	680d      	ldr	r5, [r1, #0]
 800ba20:	1d10      	adds	r0, r2, #4
 800ba22:	6949      	ldr	r1, [r1, #20]
 800ba24:	6018      	str	r0, [r3, #0]
 800ba26:	6813      	ldr	r3, [r2, #0]
 800ba28:	062e      	lsls	r6, r5, #24
 800ba2a:	d501      	bpl.n	800ba30 <_printf_i+0x198>
 800ba2c:	6019      	str	r1, [r3, #0]
 800ba2e:	e002      	b.n	800ba36 <_printf_i+0x19e>
 800ba30:	066d      	lsls	r5, r5, #25
 800ba32:	d5fb      	bpl.n	800ba2c <_printf_i+0x194>
 800ba34:	8019      	strh	r1, [r3, #0]
 800ba36:	2300      	movs	r3, #0
 800ba38:	9d03      	ldr	r5, [sp, #12]
 800ba3a:	6123      	str	r3, [r4, #16]
 800ba3c:	e7bf      	b.n	800b9be <_printf_i+0x126>
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	1d11      	adds	r1, r2, #4
 800ba42:	6019      	str	r1, [r3, #0]
 800ba44:	6815      	ldr	r5, [r2, #0]
 800ba46:	2100      	movs	r1, #0
 800ba48:	0028      	movs	r0, r5
 800ba4a:	6862      	ldr	r2, [r4, #4]
 800ba4c:	f000 f874 	bl	800bb38 <memchr>
 800ba50:	2800      	cmp	r0, #0
 800ba52:	d001      	beq.n	800ba58 <_printf_i+0x1c0>
 800ba54:	1b40      	subs	r0, r0, r5
 800ba56:	6060      	str	r0, [r4, #4]
 800ba58:	6863      	ldr	r3, [r4, #4]
 800ba5a:	6123      	str	r3, [r4, #16]
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	9a03      	ldr	r2, [sp, #12]
 800ba60:	7013      	strb	r3, [r2, #0]
 800ba62:	e7ac      	b.n	800b9be <_printf_i+0x126>
 800ba64:	002a      	movs	r2, r5
 800ba66:	6923      	ldr	r3, [r4, #16]
 800ba68:	9906      	ldr	r1, [sp, #24]
 800ba6a:	9805      	ldr	r0, [sp, #20]
 800ba6c:	9d07      	ldr	r5, [sp, #28]
 800ba6e:	47a8      	blx	r5
 800ba70:	3001      	adds	r0, #1
 800ba72:	d0ae      	beq.n	800b9d2 <_printf_i+0x13a>
 800ba74:	6823      	ldr	r3, [r4, #0]
 800ba76:	079b      	lsls	r3, r3, #30
 800ba78:	d415      	bmi.n	800baa6 <_printf_i+0x20e>
 800ba7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba7c:	68e0      	ldr	r0, [r4, #12]
 800ba7e:	4298      	cmp	r0, r3
 800ba80:	daa9      	bge.n	800b9d6 <_printf_i+0x13e>
 800ba82:	0018      	movs	r0, r3
 800ba84:	e7a7      	b.n	800b9d6 <_printf_i+0x13e>
 800ba86:	0022      	movs	r2, r4
 800ba88:	2301      	movs	r3, #1
 800ba8a:	9906      	ldr	r1, [sp, #24]
 800ba8c:	9805      	ldr	r0, [sp, #20]
 800ba8e:	9e07      	ldr	r6, [sp, #28]
 800ba90:	3219      	adds	r2, #25
 800ba92:	47b0      	blx	r6
 800ba94:	3001      	adds	r0, #1
 800ba96:	d09c      	beq.n	800b9d2 <_printf_i+0x13a>
 800ba98:	3501      	adds	r5, #1
 800ba9a:	68e3      	ldr	r3, [r4, #12]
 800ba9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba9e:	1a9b      	subs	r3, r3, r2
 800baa0:	42ab      	cmp	r3, r5
 800baa2:	dcf0      	bgt.n	800ba86 <_printf_i+0x1ee>
 800baa4:	e7e9      	b.n	800ba7a <_printf_i+0x1e2>
 800baa6:	2500      	movs	r5, #0
 800baa8:	e7f7      	b.n	800ba9a <_printf_i+0x202>
 800baaa:	46c0      	nop			@ (mov r8, r8)
 800baac:	0800c2dd 	.word	0x0800c2dd
 800bab0:	0800c2ee 	.word	0x0800c2ee

0800bab4 <_realloc_r>:
 800bab4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bab6:	0006      	movs	r6, r0
 800bab8:	000c      	movs	r4, r1
 800baba:	0015      	movs	r5, r2
 800babc:	2900      	cmp	r1, #0
 800babe:	d105      	bne.n	800bacc <_realloc_r+0x18>
 800bac0:	0011      	movs	r1, r2
 800bac2:	f7ff fb99 	bl	800b1f8 <_malloc_r>
 800bac6:	0004      	movs	r4, r0
 800bac8:	0020      	movs	r0, r4
 800baca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bacc:	2a00      	cmp	r2, #0
 800bace:	d103      	bne.n	800bad8 <_realloc_r+0x24>
 800bad0:	f7ff fcca 	bl	800b468 <_free_r>
 800bad4:	2400      	movs	r4, #0
 800bad6:	e7f7      	b.n	800bac8 <_realloc_r+0x14>
 800bad8:	f000 f839 	bl	800bb4e <_malloc_usable_size_r>
 800badc:	0007      	movs	r7, r0
 800bade:	4285      	cmp	r5, r0
 800bae0:	d802      	bhi.n	800bae8 <_realloc_r+0x34>
 800bae2:	0843      	lsrs	r3, r0, #1
 800bae4:	42ab      	cmp	r3, r5
 800bae6:	d3ef      	bcc.n	800bac8 <_realloc_r+0x14>
 800bae8:	0029      	movs	r1, r5
 800baea:	0030      	movs	r0, r6
 800baec:	f7ff fb84 	bl	800b1f8 <_malloc_r>
 800baf0:	9001      	str	r0, [sp, #4]
 800baf2:	2800      	cmp	r0, #0
 800baf4:	d0ee      	beq.n	800bad4 <_realloc_r+0x20>
 800baf6:	002a      	movs	r2, r5
 800baf8:	42bd      	cmp	r5, r7
 800bafa:	d900      	bls.n	800bafe <_realloc_r+0x4a>
 800bafc:	003a      	movs	r2, r7
 800bafe:	0021      	movs	r1, r4
 800bb00:	9801      	ldr	r0, [sp, #4]
 800bb02:	f7ff fca7 	bl	800b454 <memcpy>
 800bb06:	0021      	movs	r1, r4
 800bb08:	0030      	movs	r0, r6
 800bb0a:	f7ff fcad 	bl	800b468 <_free_r>
 800bb0e:	9c01      	ldr	r4, [sp, #4]
 800bb10:	e7da      	b.n	800bac8 <_realloc_r+0x14>

0800bb12 <memmove>:
 800bb12:	b510      	push	{r4, lr}
 800bb14:	4288      	cmp	r0, r1
 800bb16:	d806      	bhi.n	800bb26 <memmove+0x14>
 800bb18:	2300      	movs	r3, #0
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d008      	beq.n	800bb30 <memmove+0x1e>
 800bb1e:	5ccc      	ldrb	r4, [r1, r3]
 800bb20:	54c4      	strb	r4, [r0, r3]
 800bb22:	3301      	adds	r3, #1
 800bb24:	e7f9      	b.n	800bb1a <memmove+0x8>
 800bb26:	188b      	adds	r3, r1, r2
 800bb28:	4298      	cmp	r0, r3
 800bb2a:	d2f5      	bcs.n	800bb18 <memmove+0x6>
 800bb2c:	3a01      	subs	r2, #1
 800bb2e:	d200      	bcs.n	800bb32 <memmove+0x20>
 800bb30:	bd10      	pop	{r4, pc}
 800bb32:	5c8b      	ldrb	r3, [r1, r2]
 800bb34:	5483      	strb	r3, [r0, r2]
 800bb36:	e7f9      	b.n	800bb2c <memmove+0x1a>

0800bb38 <memchr>:
 800bb38:	b2c9      	uxtb	r1, r1
 800bb3a:	1882      	adds	r2, r0, r2
 800bb3c:	4290      	cmp	r0, r2
 800bb3e:	d101      	bne.n	800bb44 <memchr+0xc>
 800bb40:	2000      	movs	r0, #0
 800bb42:	4770      	bx	lr
 800bb44:	7803      	ldrb	r3, [r0, #0]
 800bb46:	428b      	cmp	r3, r1
 800bb48:	d0fb      	beq.n	800bb42 <memchr+0xa>
 800bb4a:	3001      	adds	r0, #1
 800bb4c:	e7f6      	b.n	800bb3c <memchr+0x4>

0800bb4e <_malloc_usable_size_r>:
 800bb4e:	1f0b      	subs	r3, r1, #4
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	1f18      	subs	r0, r3, #4
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	da01      	bge.n	800bb5c <_malloc_usable_size_r+0xe>
 800bb58:	580b      	ldr	r3, [r1, r0]
 800bb5a:	18c0      	adds	r0, r0, r3
 800bb5c:	4770      	bx	lr
	...

0800bb60 <exp>:
 800bb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb62:	0004      	movs	r4, r0
 800bb64:	000d      	movs	r5, r1
 800bb66:	f000 f83b 	bl	800bbe0 <__ieee754_exp>
 800bb6a:	0006      	movs	r6, r0
 800bb6c:	000f      	movs	r7, r1
 800bb6e:	0020      	movs	r0, r4
 800bb70:	0029      	movs	r1, r5
 800bb72:	f000 f82d 	bl	800bbd0 <finite>
 800bb76:	2800      	cmp	r0, #0
 800bb78:	d00d      	beq.n	800bb96 <exp+0x36>
 800bb7a:	0020      	movs	r0, r4
 800bb7c:	0029      	movs	r1, r5
 800bb7e:	4a0f      	ldr	r2, [pc, #60]	@ (800bbbc <exp+0x5c>)
 800bb80:	4b0f      	ldr	r3, [pc, #60]	@ (800bbc0 <exp+0x60>)
 800bb82:	f7f4 fb89 	bl	8000298 <__aeabi_dcmpgt>
 800bb86:	2800      	cmp	r0, #0
 800bb88:	d008      	beq.n	800bb9c <exp+0x3c>
 800bb8a:	f7ff fc37 	bl	800b3fc <__errno>
 800bb8e:	2322      	movs	r3, #34	@ 0x22
 800bb90:	2600      	movs	r6, #0
 800bb92:	4f0c      	ldr	r7, [pc, #48]	@ (800bbc4 <exp+0x64>)
 800bb94:	6003      	str	r3, [r0, #0]
 800bb96:	0030      	movs	r0, r6
 800bb98:	0039      	movs	r1, r7
 800bb9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb9c:	0020      	movs	r0, r4
 800bb9e:	0029      	movs	r1, r5
 800bba0:	4a09      	ldr	r2, [pc, #36]	@ (800bbc8 <exp+0x68>)
 800bba2:	4b0a      	ldr	r3, [pc, #40]	@ (800bbcc <exp+0x6c>)
 800bba4:	f7f4 fb64 	bl	8000270 <__aeabi_dcmplt>
 800bba8:	2800      	cmp	r0, #0
 800bbaa:	d0f4      	beq.n	800bb96 <exp+0x36>
 800bbac:	f7ff fc26 	bl	800b3fc <__errno>
 800bbb0:	2322      	movs	r3, #34	@ 0x22
 800bbb2:	2600      	movs	r6, #0
 800bbb4:	2700      	movs	r7, #0
 800bbb6:	6003      	str	r3, [r0, #0]
 800bbb8:	e7ed      	b.n	800bb96 <exp+0x36>
 800bbba:	46c0      	nop			@ (mov r8, r8)
 800bbbc:	fefa39ef 	.word	0xfefa39ef
 800bbc0:	40862e42 	.word	0x40862e42
 800bbc4:	7ff00000 	.word	0x7ff00000
 800bbc8:	d52d3051 	.word	0xd52d3051
 800bbcc:	c0874910 	.word	0xc0874910

0800bbd0 <finite>:
 800bbd0:	4b02      	ldr	r3, [pc, #8]	@ (800bbdc <finite+0xc>)
 800bbd2:	0048      	lsls	r0, r1, #1
 800bbd4:	0840      	lsrs	r0, r0, #1
 800bbd6:	18c0      	adds	r0, r0, r3
 800bbd8:	0fc0      	lsrs	r0, r0, #31
 800bbda:	4770      	bx	lr
 800bbdc:	80100000 	.word	0x80100000

0800bbe0 <__ieee754_exp>:
 800bbe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbe2:	004b      	lsls	r3, r1, #1
 800bbe4:	000f      	movs	r7, r1
 800bbe6:	0fcc      	lsrs	r4, r1, #31
 800bbe8:	4991      	ldr	r1, [pc, #580]	@ (800be30 <__ieee754_exp+0x250>)
 800bbea:	0006      	movs	r6, r0
 800bbec:	b089      	sub	sp, #36	@ 0x24
 800bbee:	085b      	lsrs	r3, r3, #1
 800bbf0:	428b      	cmp	r3, r1
 800bbf2:	d92e      	bls.n	800bc52 <__ieee754_exp+0x72>
 800bbf4:	498f      	ldr	r1, [pc, #572]	@ (800be34 <__ieee754_exp+0x254>)
 800bbf6:	428b      	cmp	r3, r1
 800bbf8:	d911      	bls.n	800bc1e <__ieee754_exp+0x3e>
 800bbfa:	033b      	lsls	r3, r7, #12
 800bbfc:	0b1b      	lsrs	r3, r3, #12
 800bbfe:	4303      	orrs	r3, r0
 800bc00:	d006      	beq.n	800bc10 <__ieee754_exp+0x30>
 800bc02:	0002      	movs	r2, r0
 800bc04:	003b      	movs	r3, r7
 800bc06:	0030      	movs	r0, r6
 800bc08:	0039      	movs	r1, r7
 800bc0a:	f7f5 f8df 	bl	8000dcc <__aeabi_dadd>
 800bc0e:	e010      	b.n	800bc32 <__ieee754_exp+0x52>
 800bc10:	2c00      	cmp	r4, #0
 800bc12:	d000      	beq.n	800bc16 <__ieee754_exp+0x36>
 800bc14:	e109      	b.n	800be2a <__ieee754_exp+0x24a>
 800bc16:	0030      	movs	r0, r6
 800bc18:	0039      	movs	r1, r7
 800bc1a:	b009      	add	sp, #36	@ 0x24
 800bc1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc1e:	0039      	movs	r1, r7
 800bc20:	4a85      	ldr	r2, [pc, #532]	@ (800be38 <__ieee754_exp+0x258>)
 800bc22:	4b86      	ldr	r3, [pc, #536]	@ (800be3c <__ieee754_exp+0x25c>)
 800bc24:	f7f4 fb38 	bl	8000298 <__aeabi_dcmpgt>
 800bc28:	1e05      	subs	r5, r0, #0
 800bc2a:	d005      	beq.n	800bc38 <__ieee754_exp+0x58>
 800bc2c:	2000      	movs	r0, #0
 800bc2e:	f000 f965 	bl	800befc <__math_oflow>
 800bc32:	0006      	movs	r6, r0
 800bc34:	000f      	movs	r7, r1
 800bc36:	e7ee      	b.n	800bc16 <__ieee754_exp+0x36>
 800bc38:	0030      	movs	r0, r6
 800bc3a:	0039      	movs	r1, r7
 800bc3c:	4a80      	ldr	r2, [pc, #512]	@ (800be40 <__ieee754_exp+0x260>)
 800bc3e:	4b81      	ldr	r3, [pc, #516]	@ (800be44 <__ieee754_exp+0x264>)
 800bc40:	f7f4 fb16 	bl	8000270 <__aeabi_dcmplt>
 800bc44:	2800      	cmp	r0, #0
 800bc46:	d100      	bne.n	800bc4a <__ieee754_exp+0x6a>
 800bc48:	e07d      	b.n	800bd46 <__ieee754_exp+0x166>
 800bc4a:	0028      	movs	r0, r5
 800bc4c:	f000 f94f 	bl	800beee <__math_uflow>
 800bc50:	e7ef      	b.n	800bc32 <__ieee754_exp+0x52>
 800bc52:	4a7d      	ldr	r2, [pc, #500]	@ (800be48 <__ieee754_exp+0x268>)
 800bc54:	4293      	cmp	r3, r2
 800bc56:	d800      	bhi.n	800bc5a <__ieee754_exp+0x7a>
 800bc58:	e09e      	b.n	800bd98 <__ieee754_exp+0x1b8>
 800bc5a:	4a7c      	ldr	r2, [pc, #496]	@ (800be4c <__ieee754_exp+0x26c>)
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d872      	bhi.n	800bd46 <__ieee754_exp+0x166>
 800bc60:	4b7b      	ldr	r3, [pc, #492]	@ (800be50 <__ieee754_exp+0x270>)
 800bc62:	00e5      	lsls	r5, r4, #3
 800bc64:	195b      	adds	r3, r3, r5
 800bc66:	681a      	ldr	r2, [r3, #0]
 800bc68:	685b      	ldr	r3, [r3, #4]
 800bc6a:	0039      	movs	r1, r7
 800bc6c:	f7f6 fb1e 	bl	80022ac <__aeabi_dsub>
 800bc70:	4b78      	ldr	r3, [pc, #480]	@ (800be54 <__ieee754_exp+0x274>)
 800bc72:	9002      	str	r0, [sp, #8]
 800bc74:	9103      	str	r1, [sp, #12]
 800bc76:	195b      	adds	r3, r3, r5
 800bc78:	681a      	ldr	r2, [r3, #0]
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	9204      	str	r2, [sp, #16]
 800bc7e:	9305      	str	r3, [sp, #20]
 800bc80:	2301      	movs	r3, #1
 800bc82:	1b1b      	subs	r3, r3, r4
 800bc84:	1b1b      	subs	r3, r3, r4
 800bc86:	9301      	str	r3, [sp, #4]
 800bc88:	9a04      	ldr	r2, [sp, #16]
 800bc8a:	9b05      	ldr	r3, [sp, #20]
 800bc8c:	9802      	ldr	r0, [sp, #8]
 800bc8e:	9903      	ldr	r1, [sp, #12]
 800bc90:	f7f6 fb0c 	bl	80022ac <__aeabi_dsub>
 800bc94:	0006      	movs	r6, r0
 800bc96:	000f      	movs	r7, r1
 800bc98:	0032      	movs	r2, r6
 800bc9a:	003b      	movs	r3, r7
 800bc9c:	0030      	movs	r0, r6
 800bc9e:	0039      	movs	r1, r7
 800bca0:	f7f6 f83c 	bl	8001d1c <__aeabi_dmul>
 800bca4:	0004      	movs	r4, r0
 800bca6:	000d      	movs	r5, r1
 800bca8:	4a6b      	ldr	r2, [pc, #428]	@ (800be58 <__ieee754_exp+0x278>)
 800bcaa:	4b6c      	ldr	r3, [pc, #432]	@ (800be5c <__ieee754_exp+0x27c>)
 800bcac:	f7f6 f836 	bl	8001d1c <__aeabi_dmul>
 800bcb0:	4a6b      	ldr	r2, [pc, #428]	@ (800be60 <__ieee754_exp+0x280>)
 800bcb2:	4b6c      	ldr	r3, [pc, #432]	@ (800be64 <__ieee754_exp+0x284>)
 800bcb4:	f7f6 fafa 	bl	80022ac <__aeabi_dsub>
 800bcb8:	0022      	movs	r2, r4
 800bcba:	002b      	movs	r3, r5
 800bcbc:	f7f6 f82e 	bl	8001d1c <__aeabi_dmul>
 800bcc0:	4a69      	ldr	r2, [pc, #420]	@ (800be68 <__ieee754_exp+0x288>)
 800bcc2:	4b6a      	ldr	r3, [pc, #424]	@ (800be6c <__ieee754_exp+0x28c>)
 800bcc4:	f7f5 f882 	bl	8000dcc <__aeabi_dadd>
 800bcc8:	0022      	movs	r2, r4
 800bcca:	002b      	movs	r3, r5
 800bccc:	f7f6 f826 	bl	8001d1c <__aeabi_dmul>
 800bcd0:	4a67      	ldr	r2, [pc, #412]	@ (800be70 <__ieee754_exp+0x290>)
 800bcd2:	4b68      	ldr	r3, [pc, #416]	@ (800be74 <__ieee754_exp+0x294>)
 800bcd4:	f7f6 faea 	bl	80022ac <__aeabi_dsub>
 800bcd8:	0022      	movs	r2, r4
 800bcda:	002b      	movs	r3, r5
 800bcdc:	f7f6 f81e 	bl	8001d1c <__aeabi_dmul>
 800bce0:	4a65      	ldr	r2, [pc, #404]	@ (800be78 <__ieee754_exp+0x298>)
 800bce2:	4b66      	ldr	r3, [pc, #408]	@ (800be7c <__ieee754_exp+0x29c>)
 800bce4:	f7f5 f872 	bl	8000dcc <__aeabi_dadd>
 800bce8:	0022      	movs	r2, r4
 800bcea:	002b      	movs	r3, r5
 800bcec:	f7f6 f816 	bl	8001d1c <__aeabi_dmul>
 800bcf0:	0002      	movs	r2, r0
 800bcf2:	000b      	movs	r3, r1
 800bcf4:	0030      	movs	r0, r6
 800bcf6:	0039      	movs	r1, r7
 800bcf8:	f7f6 fad8 	bl	80022ac <__aeabi_dsub>
 800bcfc:	000b      	movs	r3, r1
 800bcfe:	0002      	movs	r2, r0
 800bd00:	0004      	movs	r4, r0
 800bd02:	000d      	movs	r5, r1
 800bd04:	0030      	movs	r0, r6
 800bd06:	0039      	movs	r1, r7
 800bd08:	f7f6 f808 	bl	8001d1c <__aeabi_dmul>
 800bd0c:	9b01      	ldr	r3, [sp, #4]
 800bd0e:	9006      	str	r0, [sp, #24]
 800bd10:	9107      	str	r1, [sp, #28]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d156      	bne.n	800bdc4 <__ieee754_exp+0x1e4>
 800bd16:	2380      	movs	r3, #128	@ 0x80
 800bd18:	2200      	movs	r2, #0
 800bd1a:	0020      	movs	r0, r4
 800bd1c:	0029      	movs	r1, r5
 800bd1e:	05db      	lsls	r3, r3, #23
 800bd20:	f7f6 fac4 	bl	80022ac <__aeabi_dsub>
 800bd24:	0002      	movs	r2, r0
 800bd26:	000b      	movs	r3, r1
 800bd28:	9806      	ldr	r0, [sp, #24]
 800bd2a:	9907      	ldr	r1, [sp, #28]
 800bd2c:	f7f5 fbb2 	bl	8001494 <__aeabi_ddiv>
 800bd30:	0032      	movs	r2, r6
 800bd32:	003b      	movs	r3, r7
 800bd34:	f7f6 faba 	bl	80022ac <__aeabi_dsub>
 800bd38:	0002      	movs	r2, r0
 800bd3a:	000b      	movs	r3, r1
 800bd3c:	2000      	movs	r0, #0
 800bd3e:	4950      	ldr	r1, [pc, #320]	@ (800be80 <__ieee754_exp+0x2a0>)
 800bd40:	f7f6 fab4 	bl	80022ac <__aeabi_dsub>
 800bd44:	e775      	b.n	800bc32 <__ieee754_exp+0x52>
 800bd46:	4b4f      	ldr	r3, [pc, #316]	@ (800be84 <__ieee754_exp+0x2a4>)
 800bd48:	00e4      	lsls	r4, r4, #3
 800bd4a:	191c      	adds	r4, r3, r4
 800bd4c:	4a4e      	ldr	r2, [pc, #312]	@ (800be88 <__ieee754_exp+0x2a8>)
 800bd4e:	4b4f      	ldr	r3, [pc, #316]	@ (800be8c <__ieee754_exp+0x2ac>)
 800bd50:	0030      	movs	r0, r6
 800bd52:	0039      	movs	r1, r7
 800bd54:	f7f5 ffe2 	bl	8001d1c <__aeabi_dmul>
 800bd58:	6822      	ldr	r2, [r4, #0]
 800bd5a:	6863      	ldr	r3, [r4, #4]
 800bd5c:	f7f5 f836 	bl	8000dcc <__aeabi_dadd>
 800bd60:	f7f6 fe40 	bl	80029e4 <__aeabi_d2iz>
 800bd64:	9001      	str	r0, [sp, #4]
 800bd66:	f7f6 fe79 	bl	8002a5c <__aeabi_i2d>
 800bd6a:	4a49      	ldr	r2, [pc, #292]	@ (800be90 <__ieee754_exp+0x2b0>)
 800bd6c:	4b49      	ldr	r3, [pc, #292]	@ (800be94 <__ieee754_exp+0x2b4>)
 800bd6e:	0004      	movs	r4, r0
 800bd70:	000d      	movs	r5, r1
 800bd72:	f7f5 ffd3 	bl	8001d1c <__aeabi_dmul>
 800bd76:	0002      	movs	r2, r0
 800bd78:	000b      	movs	r3, r1
 800bd7a:	0030      	movs	r0, r6
 800bd7c:	0039      	movs	r1, r7
 800bd7e:	f7f6 fa95 	bl	80022ac <__aeabi_dsub>
 800bd82:	4a45      	ldr	r2, [pc, #276]	@ (800be98 <__ieee754_exp+0x2b8>)
 800bd84:	9002      	str	r0, [sp, #8]
 800bd86:	9103      	str	r1, [sp, #12]
 800bd88:	4b44      	ldr	r3, [pc, #272]	@ (800be9c <__ieee754_exp+0x2bc>)
 800bd8a:	0020      	movs	r0, r4
 800bd8c:	0029      	movs	r1, r5
 800bd8e:	f7f5 ffc5 	bl	8001d1c <__aeabi_dmul>
 800bd92:	9004      	str	r0, [sp, #16]
 800bd94:	9105      	str	r1, [sp, #20]
 800bd96:	e777      	b.n	800bc88 <__ieee754_exp+0xa8>
 800bd98:	4a41      	ldr	r2, [pc, #260]	@ (800bea0 <__ieee754_exp+0x2c0>)
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d80d      	bhi.n	800bdba <__ieee754_exp+0x1da>
 800bd9e:	4a41      	ldr	r2, [pc, #260]	@ (800bea4 <__ieee754_exp+0x2c4>)
 800bda0:	4b41      	ldr	r3, [pc, #260]	@ (800bea8 <__ieee754_exp+0x2c8>)
 800bda2:	0039      	movs	r1, r7
 800bda4:	f7f5 f812 	bl	8000dcc <__aeabi_dadd>
 800bda8:	2200      	movs	r2, #0
 800bdaa:	4b35      	ldr	r3, [pc, #212]	@ (800be80 <__ieee754_exp+0x2a0>)
 800bdac:	f7f4 fa74 	bl	8000298 <__aeabi_dcmpgt>
 800bdb0:	2800      	cmp	r0, #0
 800bdb2:	d005      	beq.n	800bdc0 <__ieee754_exp+0x1e0>
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	4b32      	ldr	r3, [pc, #200]	@ (800be80 <__ieee754_exp+0x2a0>)
 800bdb8:	e725      	b.n	800bc06 <__ieee754_exp+0x26>
 800bdba:	2300      	movs	r3, #0
 800bdbc:	9301      	str	r3, [sp, #4]
 800bdbe:	e76b      	b.n	800bc98 <__ieee754_exp+0xb8>
 800bdc0:	9001      	str	r0, [sp, #4]
 800bdc2:	e769      	b.n	800bc98 <__ieee754_exp+0xb8>
 800bdc4:	2180      	movs	r1, #128	@ 0x80
 800bdc6:	002b      	movs	r3, r5
 800bdc8:	0022      	movs	r2, r4
 800bdca:	2000      	movs	r0, #0
 800bdcc:	05c9      	lsls	r1, r1, #23
 800bdce:	f7f6 fa6d 	bl	80022ac <__aeabi_dsub>
 800bdd2:	0002      	movs	r2, r0
 800bdd4:	000b      	movs	r3, r1
 800bdd6:	9806      	ldr	r0, [sp, #24]
 800bdd8:	9907      	ldr	r1, [sp, #28]
 800bdda:	f7f5 fb5b 	bl	8001494 <__aeabi_ddiv>
 800bdde:	0002      	movs	r2, r0
 800bde0:	000b      	movs	r3, r1
 800bde2:	9804      	ldr	r0, [sp, #16]
 800bde4:	9905      	ldr	r1, [sp, #20]
 800bde6:	f7f6 fa61 	bl	80022ac <__aeabi_dsub>
 800bdea:	9a02      	ldr	r2, [sp, #8]
 800bdec:	9b03      	ldr	r3, [sp, #12]
 800bdee:	f7f6 fa5d 	bl	80022ac <__aeabi_dsub>
 800bdf2:	0002      	movs	r2, r0
 800bdf4:	000b      	movs	r3, r1
 800bdf6:	2000      	movs	r0, #0
 800bdf8:	4921      	ldr	r1, [pc, #132]	@ (800be80 <__ieee754_exp+0x2a0>)
 800bdfa:	f7f6 fa57 	bl	80022ac <__aeabi_dsub>
 800bdfe:	4b2b      	ldr	r3, [pc, #172]	@ (800beac <__ieee754_exp+0x2cc>)
 800be00:	9a01      	ldr	r2, [sp, #4]
 800be02:	000d      	movs	r5, r1
 800be04:	429a      	cmp	r2, r3
 800be06:	db03      	blt.n	800be10 <__ieee754_exp+0x230>
 800be08:	0511      	lsls	r1, r2, #20
 800be0a:	0006      	movs	r6, r0
 800be0c:	194f      	adds	r7, r1, r5
 800be0e:	e702      	b.n	800bc16 <__ieee754_exp+0x36>
 800be10:	22fa      	movs	r2, #250	@ 0xfa
 800be12:	0092      	lsls	r2, r2, #2
 800be14:	4694      	mov	ip, r2
 800be16:	9b01      	ldr	r3, [sp, #4]
 800be18:	2200      	movs	r2, #0
 800be1a:	4463      	add	r3, ip
 800be1c:	051b      	lsls	r3, r3, #20
 800be1e:	1859      	adds	r1, r3, r1
 800be20:	23b8      	movs	r3, #184	@ 0xb8
 800be22:	045b      	lsls	r3, r3, #17
 800be24:	f7f5 ff7a 	bl	8001d1c <__aeabi_dmul>
 800be28:	e703      	b.n	800bc32 <__ieee754_exp+0x52>
 800be2a:	2600      	movs	r6, #0
 800be2c:	2700      	movs	r7, #0
 800be2e:	e6f2      	b.n	800bc16 <__ieee754_exp+0x36>
 800be30:	40862e41 	.word	0x40862e41
 800be34:	7fefffff 	.word	0x7fefffff
 800be38:	fefa39ef 	.word	0xfefa39ef
 800be3c:	40862e42 	.word	0x40862e42
 800be40:	d52d3051 	.word	0xd52d3051
 800be44:	c0874910 	.word	0xc0874910
 800be48:	3fd62e42 	.word	0x3fd62e42
 800be4c:	3ff0a2b1 	.word	0x3ff0a2b1
 800be50:	0800c310 	.word	0x0800c310
 800be54:	0800c300 	.word	0x0800c300
 800be58:	72bea4d0 	.word	0x72bea4d0
 800be5c:	3e663769 	.word	0x3e663769
 800be60:	c5d26bf1 	.word	0xc5d26bf1
 800be64:	3ebbbd41 	.word	0x3ebbbd41
 800be68:	af25de2c 	.word	0xaf25de2c
 800be6c:	3f11566a 	.word	0x3f11566a
 800be70:	16bebd93 	.word	0x16bebd93
 800be74:	3f66c16c 	.word	0x3f66c16c
 800be78:	5555553e 	.word	0x5555553e
 800be7c:	3fc55555 	.word	0x3fc55555
 800be80:	3ff00000 	.word	0x3ff00000
 800be84:	0800c320 	.word	0x0800c320
 800be88:	652b82fe 	.word	0x652b82fe
 800be8c:	3ff71547 	.word	0x3ff71547
 800be90:	fee00000 	.word	0xfee00000
 800be94:	3fe62e42 	.word	0x3fe62e42
 800be98:	35793c76 	.word	0x35793c76
 800be9c:	3dea39ef 	.word	0x3dea39ef
 800bea0:	3defffff 	.word	0x3defffff
 800bea4:	8800759c 	.word	0x8800759c
 800bea8:	7e37e43c 	.word	0x7e37e43c
 800beac:	fffffc03 	.word	0xfffffc03

0800beb0 <with_errno>:
 800beb0:	b570      	push	{r4, r5, r6, lr}
 800beb2:	000d      	movs	r5, r1
 800beb4:	0016      	movs	r6, r2
 800beb6:	0004      	movs	r4, r0
 800beb8:	f7ff faa0 	bl	800b3fc <__errno>
 800bebc:	0029      	movs	r1, r5
 800bebe:	6006      	str	r6, [r0, #0]
 800bec0:	0020      	movs	r0, r4
 800bec2:	bd70      	pop	{r4, r5, r6, pc}

0800bec4 <xflow>:
 800bec4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bec6:	0014      	movs	r4, r2
 800bec8:	001d      	movs	r5, r3
 800beca:	2800      	cmp	r0, #0
 800becc:	d002      	beq.n	800bed4 <xflow+0x10>
 800bece:	2180      	movs	r1, #128	@ 0x80
 800bed0:	0609      	lsls	r1, r1, #24
 800bed2:	185b      	adds	r3, r3, r1
 800bed4:	9200      	str	r2, [sp, #0]
 800bed6:	9301      	str	r3, [sp, #4]
 800bed8:	9a00      	ldr	r2, [sp, #0]
 800beda:	9b01      	ldr	r3, [sp, #4]
 800bedc:	0020      	movs	r0, r4
 800bede:	0029      	movs	r1, r5
 800bee0:	f7f5 ff1c 	bl	8001d1c <__aeabi_dmul>
 800bee4:	2222      	movs	r2, #34	@ 0x22
 800bee6:	f7ff ffe3 	bl	800beb0 <with_errno>
 800beea:	b003      	add	sp, #12
 800beec:	bd30      	pop	{r4, r5, pc}

0800beee <__math_uflow>:
 800beee:	2380      	movs	r3, #128	@ 0x80
 800bef0:	b510      	push	{r4, lr}
 800bef2:	2200      	movs	r2, #0
 800bef4:	055b      	lsls	r3, r3, #21
 800bef6:	f7ff ffe5 	bl	800bec4 <xflow>
 800befa:	bd10      	pop	{r4, pc}

0800befc <__math_oflow>:
 800befc:	23e0      	movs	r3, #224	@ 0xe0
 800befe:	b510      	push	{r4, lr}
 800bf00:	2200      	movs	r2, #0
 800bf02:	05db      	lsls	r3, r3, #23
 800bf04:	f7ff ffde 	bl	800bec4 <xflow>
 800bf08:	bd10      	pop	{r4, pc}
	...

0800bf0c <_init>:
 800bf0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf0e:	46c0      	nop			@ (mov r8, r8)
 800bf10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf12:	bc08      	pop	{r3}
 800bf14:	469e      	mov	lr, r3
 800bf16:	4770      	bx	lr

0800bf18 <_fini>:
 800bf18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf1a:	46c0      	nop			@ (mov r8, r8)
 800bf1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf1e:	bc08      	pop	{r3}
 800bf20:	469e      	mov	lr, r3
 800bf22:	4770      	bx	lr

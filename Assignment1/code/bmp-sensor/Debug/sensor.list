
sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000983c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  08009900  08009900  0000a900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e48  08009e48  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009e48  08009e48  0000ae48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e50  08009e50  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e50  08009e50  0000ae50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009e54  08009e54  0000ae54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009e58  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  200001d4  0800a02c  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  0800a02c  0000b564  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c882  00000000  00000000  0000b1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dac  00000000  00000000  00017a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  00019830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000878  00000000  00000000  0001a318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015742  00000000  00000000  0001ab90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e609  00000000  00000000  000302d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080585  00000000  00000000  0003e8db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bee60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003924  00000000  00000000  000beea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000c27c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080098e4 	.word	0x080098e4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	080098e4 	.word	0x080098e4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fa73 	bl	8001928 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f9b3 	bl	80017b8 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fa65 	bl	8001928 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fa5b 	bl	8001928 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f9dd 	bl	8001840 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f9d3 	bl	8001840 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_ldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d115      	bne.n	80004d8 <__aeabi_ldivmod+0x30>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d113      	bne.n	80004d8 <__aeabi_ldivmod+0x30>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	db06      	blt.n	80004c2 <__aeabi_ldivmod+0x1a>
 80004b4:	dc01      	bgt.n	80004ba <__aeabi_ldivmod+0x12>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d006      	beq.n	80004c8 <__aeabi_ldivmod+0x20>
 80004ba:	2000      	movs	r0, #0
 80004bc:	43c0      	mvns	r0, r0
 80004be:	0841      	lsrs	r1, r0, #1
 80004c0:	e002      	b.n	80004c8 <__aeabi_ldivmod+0x20>
 80004c2:	2180      	movs	r1, #128	@ 0x80
 80004c4:	0609      	lsls	r1, r1, #24
 80004c6:	2000      	movs	r0, #0
 80004c8:	b407      	push	{r0, r1, r2}
 80004ca:	4802      	ldr	r0, [pc, #8]	@ (80004d4 <__aeabi_ldivmod+0x2c>)
 80004cc:	a101      	add	r1, pc, #4	@ (adr r1, 80004d4 <__aeabi_ldivmod+0x2c>)
 80004ce:	1840      	adds	r0, r0, r1
 80004d0:	9002      	str	r0, [sp, #8]
 80004d2:	bd03      	pop	{r0, r1, pc}
 80004d4:	ffffff55 	.word	0xffffff55
 80004d8:	b403      	push	{r0, r1}
 80004da:	4668      	mov	r0, sp
 80004dc:	b501      	push	{r0, lr}
 80004de:	9802      	ldr	r0, [sp, #8]
 80004e0:	f000 f920 	bl	8000724 <__gnu_ldivmod_helper>
 80004e4:	9b01      	ldr	r3, [sp, #4]
 80004e6:	469e      	mov	lr, r3
 80004e8:	b002      	add	sp, #8
 80004ea:	bc0c      	pop	{r2, r3}
 80004ec:	4770      	bx	lr
 80004ee:	46c0      	nop			@ (mov r8, r8)

080004f0 <__aeabi_uldivmod>:
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d111      	bne.n	8000518 <__aeabi_uldivmod+0x28>
 80004f4:	2a00      	cmp	r2, #0
 80004f6:	d10f      	bne.n	8000518 <__aeabi_uldivmod+0x28>
 80004f8:	2900      	cmp	r1, #0
 80004fa:	d100      	bne.n	80004fe <__aeabi_uldivmod+0xe>
 80004fc:	2800      	cmp	r0, #0
 80004fe:	d002      	beq.n	8000506 <__aeabi_uldivmod+0x16>
 8000500:	2100      	movs	r1, #0
 8000502:	43c9      	mvns	r1, r1
 8000504:	0008      	movs	r0, r1
 8000506:	b407      	push	{r0, r1, r2}
 8000508:	4802      	ldr	r0, [pc, #8]	@ (8000514 <__aeabi_uldivmod+0x24>)
 800050a:	a102      	add	r1, pc, #8	@ (adr r1, 8000514 <__aeabi_uldivmod+0x24>)
 800050c:	1840      	adds	r0, r0, r1
 800050e:	9002      	str	r0, [sp, #8]
 8000510:	bd03      	pop	{r0, r1, pc}
 8000512:	46c0      	nop			@ (mov r8, r8)
 8000514:	ffffff15 	.word	0xffffff15
 8000518:	b403      	push	{r0, r1}
 800051a:	4668      	mov	r0, sp
 800051c:	b501      	push	{r0, lr}
 800051e:	9802      	ldr	r0, [sp, #8]
 8000520:	f000 f834 	bl	800058c <__udivmoddi4>
 8000524:	9b01      	ldr	r3, [sp, #4]
 8000526:	469e      	mov	lr, r3
 8000528:	b002      	add	sp, #8
 800052a:	bc0c      	pop	{r2, r3}
 800052c:	4770      	bx	lr
 800052e:	46c0      	nop			@ (mov r8, r8)

08000530 <__aeabi_lmul>:
 8000530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000532:	46ce      	mov	lr, r9
 8000534:	4699      	mov	r9, r3
 8000536:	0c03      	lsrs	r3, r0, #16
 8000538:	469c      	mov	ip, r3
 800053a:	0413      	lsls	r3, r2, #16
 800053c:	4647      	mov	r7, r8
 800053e:	0c1b      	lsrs	r3, r3, #16
 8000540:	001d      	movs	r5, r3
 8000542:	000e      	movs	r6, r1
 8000544:	4661      	mov	r1, ip
 8000546:	0404      	lsls	r4, r0, #16
 8000548:	0c24      	lsrs	r4, r4, #16
 800054a:	b580      	push	{r7, lr}
 800054c:	0007      	movs	r7, r0
 800054e:	0c10      	lsrs	r0, r2, #16
 8000550:	434b      	muls	r3, r1
 8000552:	4365      	muls	r5, r4
 8000554:	4341      	muls	r1, r0
 8000556:	4360      	muls	r0, r4
 8000558:	0c2c      	lsrs	r4, r5, #16
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	1824      	adds	r4, r4, r0
 800055e:	468c      	mov	ip, r1
 8000560:	42a3      	cmp	r3, r4
 8000562:	d903      	bls.n	800056c <__aeabi_lmul+0x3c>
 8000564:	2380      	movs	r3, #128	@ 0x80
 8000566:	025b      	lsls	r3, r3, #9
 8000568:	4698      	mov	r8, r3
 800056a:	44c4      	add	ip, r8
 800056c:	4649      	mov	r1, r9
 800056e:	4379      	muls	r1, r7
 8000570:	4356      	muls	r6, r2
 8000572:	0c23      	lsrs	r3, r4, #16
 8000574:	042d      	lsls	r5, r5, #16
 8000576:	0c2d      	lsrs	r5, r5, #16
 8000578:	1989      	adds	r1, r1, r6
 800057a:	4463      	add	r3, ip
 800057c:	0424      	lsls	r4, r4, #16
 800057e:	1960      	adds	r0, r4, r5
 8000580:	18c9      	adds	r1, r1, r3
 8000582:	bcc0      	pop	{r6, r7}
 8000584:	46b9      	mov	r9, r7
 8000586:	46b0      	mov	r8, r6
 8000588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800058a:	46c0      	nop			@ (mov r8, r8)

0800058c <__udivmoddi4>:
 800058c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058e:	4657      	mov	r7, sl
 8000590:	464e      	mov	r6, r9
 8000592:	4645      	mov	r5, r8
 8000594:	46de      	mov	lr, fp
 8000596:	b5e0      	push	{r5, r6, r7, lr}
 8000598:	0004      	movs	r4, r0
 800059a:	000d      	movs	r5, r1
 800059c:	4692      	mov	sl, r2
 800059e:	4699      	mov	r9, r3
 80005a0:	b083      	sub	sp, #12
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d830      	bhi.n	8000608 <__udivmoddi4+0x7c>
 80005a6:	d02d      	beq.n	8000604 <__udivmoddi4+0x78>
 80005a8:	4649      	mov	r1, r9
 80005aa:	4650      	mov	r0, sl
 80005ac:	f002 f9a8 	bl	8002900 <__clzdi2>
 80005b0:	0029      	movs	r1, r5
 80005b2:	0006      	movs	r6, r0
 80005b4:	0020      	movs	r0, r4
 80005b6:	f002 f9a3 	bl	8002900 <__clzdi2>
 80005ba:	1a33      	subs	r3, r6, r0
 80005bc:	4698      	mov	r8, r3
 80005be:	3b20      	subs	r3, #32
 80005c0:	d434      	bmi.n	800062c <__udivmoddi4+0xa0>
 80005c2:	469b      	mov	fp, r3
 80005c4:	4653      	mov	r3, sl
 80005c6:	465a      	mov	r2, fp
 80005c8:	4093      	lsls	r3, r2
 80005ca:	4642      	mov	r2, r8
 80005cc:	001f      	movs	r7, r3
 80005ce:	4653      	mov	r3, sl
 80005d0:	4093      	lsls	r3, r2
 80005d2:	001e      	movs	r6, r3
 80005d4:	42af      	cmp	r7, r5
 80005d6:	d83b      	bhi.n	8000650 <__udivmoddi4+0xc4>
 80005d8:	42af      	cmp	r7, r5
 80005da:	d100      	bne.n	80005de <__udivmoddi4+0x52>
 80005dc:	e079      	b.n	80006d2 <__udivmoddi4+0x146>
 80005de:	465b      	mov	r3, fp
 80005e0:	1ba4      	subs	r4, r4, r6
 80005e2:	41bd      	sbcs	r5, r7
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	da00      	bge.n	80005ea <__udivmoddi4+0x5e>
 80005e8:	e076      	b.n	80006d8 <__udivmoddi4+0x14c>
 80005ea:	2200      	movs	r2, #0
 80005ec:	2300      	movs	r3, #0
 80005ee:	9200      	str	r2, [sp, #0]
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	2301      	movs	r3, #1
 80005f4:	465a      	mov	r2, fp
 80005f6:	4093      	lsls	r3, r2
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	2301      	movs	r3, #1
 80005fc:	4642      	mov	r2, r8
 80005fe:	4093      	lsls	r3, r2
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	e029      	b.n	8000658 <__udivmoddi4+0xcc>
 8000604:	4282      	cmp	r2, r0
 8000606:	d9cf      	bls.n	80005a8 <__udivmoddi4+0x1c>
 8000608:	2200      	movs	r2, #0
 800060a:	2300      	movs	r3, #0
 800060c:	9200      	str	r2, [sp, #0]
 800060e:	9301      	str	r3, [sp, #4]
 8000610:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <__udivmoddi4+0x8e>
 8000616:	601c      	str	r4, [r3, #0]
 8000618:	605d      	str	r5, [r3, #4]
 800061a:	9800      	ldr	r0, [sp, #0]
 800061c:	9901      	ldr	r1, [sp, #4]
 800061e:	b003      	add	sp, #12
 8000620:	bcf0      	pop	{r4, r5, r6, r7}
 8000622:	46bb      	mov	fp, r7
 8000624:	46b2      	mov	sl, r6
 8000626:	46a9      	mov	r9, r5
 8000628:	46a0      	mov	r8, r4
 800062a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800062c:	4642      	mov	r2, r8
 800062e:	469b      	mov	fp, r3
 8000630:	2320      	movs	r3, #32
 8000632:	1a9b      	subs	r3, r3, r2
 8000634:	4652      	mov	r2, sl
 8000636:	40da      	lsrs	r2, r3
 8000638:	4641      	mov	r1, r8
 800063a:	0013      	movs	r3, r2
 800063c:	464a      	mov	r2, r9
 800063e:	408a      	lsls	r2, r1
 8000640:	0017      	movs	r7, r2
 8000642:	4642      	mov	r2, r8
 8000644:	431f      	orrs	r7, r3
 8000646:	4653      	mov	r3, sl
 8000648:	4093      	lsls	r3, r2
 800064a:	001e      	movs	r6, r3
 800064c:	42af      	cmp	r7, r5
 800064e:	d9c3      	bls.n	80005d8 <__udivmoddi4+0x4c>
 8000650:	2200      	movs	r2, #0
 8000652:	2300      	movs	r3, #0
 8000654:	9200      	str	r2, [sp, #0]
 8000656:	9301      	str	r3, [sp, #4]
 8000658:	4643      	mov	r3, r8
 800065a:	2b00      	cmp	r3, #0
 800065c:	d0d8      	beq.n	8000610 <__udivmoddi4+0x84>
 800065e:	07fb      	lsls	r3, r7, #31
 8000660:	0872      	lsrs	r2, r6, #1
 8000662:	431a      	orrs	r2, r3
 8000664:	4646      	mov	r6, r8
 8000666:	087b      	lsrs	r3, r7, #1
 8000668:	e00e      	b.n	8000688 <__udivmoddi4+0xfc>
 800066a:	42ab      	cmp	r3, r5
 800066c:	d101      	bne.n	8000672 <__udivmoddi4+0xe6>
 800066e:	42a2      	cmp	r2, r4
 8000670:	d80c      	bhi.n	800068c <__udivmoddi4+0x100>
 8000672:	1aa4      	subs	r4, r4, r2
 8000674:	419d      	sbcs	r5, r3
 8000676:	2001      	movs	r0, #1
 8000678:	1924      	adds	r4, r4, r4
 800067a:	416d      	adcs	r5, r5
 800067c:	2100      	movs	r1, #0
 800067e:	3e01      	subs	r6, #1
 8000680:	1824      	adds	r4, r4, r0
 8000682:	414d      	adcs	r5, r1
 8000684:	2e00      	cmp	r6, #0
 8000686:	d006      	beq.n	8000696 <__udivmoddi4+0x10a>
 8000688:	42ab      	cmp	r3, r5
 800068a:	d9ee      	bls.n	800066a <__udivmoddi4+0xde>
 800068c:	3e01      	subs	r6, #1
 800068e:	1924      	adds	r4, r4, r4
 8000690:	416d      	adcs	r5, r5
 8000692:	2e00      	cmp	r6, #0
 8000694:	d1f8      	bne.n	8000688 <__udivmoddi4+0xfc>
 8000696:	9800      	ldr	r0, [sp, #0]
 8000698:	9901      	ldr	r1, [sp, #4]
 800069a:	465b      	mov	r3, fp
 800069c:	1900      	adds	r0, r0, r4
 800069e:	4169      	adcs	r1, r5
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db24      	blt.n	80006ee <__udivmoddi4+0x162>
 80006a4:	002b      	movs	r3, r5
 80006a6:	465a      	mov	r2, fp
 80006a8:	4644      	mov	r4, r8
 80006aa:	40d3      	lsrs	r3, r2
 80006ac:	002a      	movs	r2, r5
 80006ae:	40e2      	lsrs	r2, r4
 80006b0:	001c      	movs	r4, r3
 80006b2:	465b      	mov	r3, fp
 80006b4:	0015      	movs	r5, r2
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	db2a      	blt.n	8000710 <__udivmoddi4+0x184>
 80006ba:	0026      	movs	r6, r4
 80006bc:	409e      	lsls	r6, r3
 80006be:	0033      	movs	r3, r6
 80006c0:	0026      	movs	r6, r4
 80006c2:	4647      	mov	r7, r8
 80006c4:	40be      	lsls	r6, r7
 80006c6:	0032      	movs	r2, r6
 80006c8:	1a80      	subs	r0, r0, r2
 80006ca:	4199      	sbcs	r1, r3
 80006cc:	9000      	str	r0, [sp, #0]
 80006ce:	9101      	str	r1, [sp, #4]
 80006d0:	e79e      	b.n	8000610 <__udivmoddi4+0x84>
 80006d2:	42a3      	cmp	r3, r4
 80006d4:	d8bc      	bhi.n	8000650 <__udivmoddi4+0xc4>
 80006d6:	e782      	b.n	80005de <__udivmoddi4+0x52>
 80006d8:	4642      	mov	r2, r8
 80006da:	2320      	movs	r3, #32
 80006dc:	2100      	movs	r1, #0
 80006de:	1a9b      	subs	r3, r3, r2
 80006e0:	2200      	movs	r2, #0
 80006e2:	9100      	str	r1, [sp, #0]
 80006e4:	9201      	str	r2, [sp, #4]
 80006e6:	2201      	movs	r2, #1
 80006e8:	40da      	lsrs	r2, r3
 80006ea:	9201      	str	r2, [sp, #4]
 80006ec:	e785      	b.n	80005fa <__udivmoddi4+0x6e>
 80006ee:	4642      	mov	r2, r8
 80006f0:	2320      	movs	r3, #32
 80006f2:	1a9b      	subs	r3, r3, r2
 80006f4:	002a      	movs	r2, r5
 80006f6:	4646      	mov	r6, r8
 80006f8:	409a      	lsls	r2, r3
 80006fa:	0023      	movs	r3, r4
 80006fc:	40f3      	lsrs	r3, r6
 80006fe:	4644      	mov	r4, r8
 8000700:	4313      	orrs	r3, r2
 8000702:	002a      	movs	r2, r5
 8000704:	40e2      	lsrs	r2, r4
 8000706:	001c      	movs	r4, r3
 8000708:	465b      	mov	r3, fp
 800070a:	0015      	movs	r5, r2
 800070c:	2b00      	cmp	r3, #0
 800070e:	dad4      	bge.n	80006ba <__udivmoddi4+0x12e>
 8000710:	4642      	mov	r2, r8
 8000712:	002f      	movs	r7, r5
 8000714:	2320      	movs	r3, #32
 8000716:	0026      	movs	r6, r4
 8000718:	4097      	lsls	r7, r2
 800071a:	1a9b      	subs	r3, r3, r2
 800071c:	40de      	lsrs	r6, r3
 800071e:	003b      	movs	r3, r7
 8000720:	4333      	orrs	r3, r6
 8000722:	e7cd      	b.n	80006c0 <__udivmoddi4+0x134>

08000724 <__gnu_ldivmod_helper>:
 8000724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000726:	46ce      	mov	lr, r9
 8000728:	4647      	mov	r7, r8
 800072a:	b580      	push	{r7, lr}
 800072c:	4691      	mov	r9, r2
 800072e:	4698      	mov	r8, r3
 8000730:	0004      	movs	r4, r0
 8000732:	000d      	movs	r5, r1
 8000734:	f002 f8f0 	bl	8002918 <__divdi3>
 8000738:	0007      	movs	r7, r0
 800073a:	000e      	movs	r6, r1
 800073c:	0002      	movs	r2, r0
 800073e:	000b      	movs	r3, r1
 8000740:	4648      	mov	r0, r9
 8000742:	4641      	mov	r1, r8
 8000744:	f7ff fef4 	bl	8000530 <__aeabi_lmul>
 8000748:	1a24      	subs	r4, r4, r0
 800074a:	418d      	sbcs	r5, r1
 800074c:	9b08      	ldr	r3, [sp, #32]
 800074e:	0038      	movs	r0, r7
 8000750:	0031      	movs	r1, r6
 8000752:	601c      	str	r4, [r3, #0]
 8000754:	605d      	str	r5, [r3, #4]
 8000756:	bcc0      	pop	{r6, r7}
 8000758:	46b9      	mov	r9, r7
 800075a:	46b0      	mov	r8, r6
 800075c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800075e:	46c0      	nop			@ (mov r8, r8)

08000760 <__aeabi_fdiv>:
 8000760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000762:	464f      	mov	r7, r9
 8000764:	4646      	mov	r6, r8
 8000766:	46d6      	mov	lr, sl
 8000768:	0244      	lsls	r4, r0, #9
 800076a:	b5c0      	push	{r6, r7, lr}
 800076c:	0047      	lsls	r7, r0, #1
 800076e:	1c0e      	adds	r6, r1, #0
 8000770:	0a64      	lsrs	r4, r4, #9
 8000772:	0e3f      	lsrs	r7, r7, #24
 8000774:	0fc5      	lsrs	r5, r0, #31
 8000776:	2f00      	cmp	r7, #0
 8000778:	d03c      	beq.n	80007f4 <__aeabi_fdiv+0x94>
 800077a:	2fff      	cmp	r7, #255	@ 0xff
 800077c:	d042      	beq.n	8000804 <__aeabi_fdiv+0xa4>
 800077e:	2300      	movs	r3, #0
 8000780:	2280      	movs	r2, #128	@ 0x80
 8000782:	4699      	mov	r9, r3
 8000784:	469a      	mov	sl, r3
 8000786:	00e4      	lsls	r4, r4, #3
 8000788:	04d2      	lsls	r2, r2, #19
 800078a:	4314      	orrs	r4, r2
 800078c:	3f7f      	subs	r7, #127	@ 0x7f
 800078e:	0273      	lsls	r3, r6, #9
 8000790:	0a5b      	lsrs	r3, r3, #9
 8000792:	4698      	mov	r8, r3
 8000794:	0073      	lsls	r3, r6, #1
 8000796:	0e1b      	lsrs	r3, r3, #24
 8000798:	0ff6      	lsrs	r6, r6, #31
 800079a:	2b00      	cmp	r3, #0
 800079c:	d01b      	beq.n	80007d6 <__aeabi_fdiv+0x76>
 800079e:	2bff      	cmp	r3, #255	@ 0xff
 80007a0:	d013      	beq.n	80007ca <__aeabi_fdiv+0x6a>
 80007a2:	4642      	mov	r2, r8
 80007a4:	2180      	movs	r1, #128	@ 0x80
 80007a6:	00d2      	lsls	r2, r2, #3
 80007a8:	04c9      	lsls	r1, r1, #19
 80007aa:	4311      	orrs	r1, r2
 80007ac:	4688      	mov	r8, r1
 80007ae:	2000      	movs	r0, #0
 80007b0:	3b7f      	subs	r3, #127	@ 0x7f
 80007b2:	0029      	movs	r1, r5
 80007b4:	1aff      	subs	r7, r7, r3
 80007b6:	464b      	mov	r3, r9
 80007b8:	4071      	eors	r1, r6
 80007ba:	b2c9      	uxtb	r1, r1
 80007bc:	2b0f      	cmp	r3, #15
 80007be:	d900      	bls.n	80007c2 <__aeabi_fdiv+0x62>
 80007c0:	e0b5      	b.n	800092e <__aeabi_fdiv+0x1ce>
 80007c2:	4a74      	ldr	r2, [pc, #464]	@ (8000994 <__aeabi_fdiv+0x234>)
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	58d3      	ldr	r3, [r2, r3]
 80007c8:	469f      	mov	pc, r3
 80007ca:	4643      	mov	r3, r8
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d13f      	bne.n	8000850 <__aeabi_fdiv+0xf0>
 80007d0:	3fff      	subs	r7, #255	@ 0xff
 80007d2:	3302      	adds	r3, #2
 80007d4:	e003      	b.n	80007de <__aeabi_fdiv+0x7e>
 80007d6:	4643      	mov	r3, r8
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d12d      	bne.n	8000838 <__aeabi_fdiv+0xd8>
 80007dc:	2301      	movs	r3, #1
 80007de:	0029      	movs	r1, r5
 80007e0:	464a      	mov	r2, r9
 80007e2:	4071      	eors	r1, r6
 80007e4:	b2c9      	uxtb	r1, r1
 80007e6:	431a      	orrs	r2, r3
 80007e8:	2a0e      	cmp	r2, #14
 80007ea:	d838      	bhi.n	800085e <__aeabi_fdiv+0xfe>
 80007ec:	486a      	ldr	r0, [pc, #424]	@ (8000998 <__aeabi_fdiv+0x238>)
 80007ee:	0092      	lsls	r2, r2, #2
 80007f0:	5882      	ldr	r2, [r0, r2]
 80007f2:	4697      	mov	pc, r2
 80007f4:	2c00      	cmp	r4, #0
 80007f6:	d113      	bne.n	8000820 <__aeabi_fdiv+0xc0>
 80007f8:	2304      	movs	r3, #4
 80007fa:	4699      	mov	r9, r3
 80007fc:	3b03      	subs	r3, #3
 80007fe:	2700      	movs	r7, #0
 8000800:	469a      	mov	sl, r3
 8000802:	e7c4      	b.n	800078e <__aeabi_fdiv+0x2e>
 8000804:	2c00      	cmp	r4, #0
 8000806:	d105      	bne.n	8000814 <__aeabi_fdiv+0xb4>
 8000808:	2308      	movs	r3, #8
 800080a:	4699      	mov	r9, r3
 800080c:	3b06      	subs	r3, #6
 800080e:	27ff      	movs	r7, #255	@ 0xff
 8000810:	469a      	mov	sl, r3
 8000812:	e7bc      	b.n	800078e <__aeabi_fdiv+0x2e>
 8000814:	230c      	movs	r3, #12
 8000816:	4699      	mov	r9, r3
 8000818:	3b09      	subs	r3, #9
 800081a:	27ff      	movs	r7, #255	@ 0xff
 800081c:	469a      	mov	sl, r3
 800081e:	e7b6      	b.n	800078e <__aeabi_fdiv+0x2e>
 8000820:	0020      	movs	r0, r4
 8000822:	f002 f84f 	bl	80028c4 <__clzsi2>
 8000826:	2776      	movs	r7, #118	@ 0x76
 8000828:	1f43      	subs	r3, r0, #5
 800082a:	409c      	lsls	r4, r3
 800082c:	2300      	movs	r3, #0
 800082e:	427f      	negs	r7, r7
 8000830:	4699      	mov	r9, r3
 8000832:	469a      	mov	sl, r3
 8000834:	1a3f      	subs	r7, r7, r0
 8000836:	e7aa      	b.n	800078e <__aeabi_fdiv+0x2e>
 8000838:	4640      	mov	r0, r8
 800083a:	f002 f843 	bl	80028c4 <__clzsi2>
 800083e:	4642      	mov	r2, r8
 8000840:	1f43      	subs	r3, r0, #5
 8000842:	409a      	lsls	r2, r3
 8000844:	2376      	movs	r3, #118	@ 0x76
 8000846:	425b      	negs	r3, r3
 8000848:	1a1b      	subs	r3, r3, r0
 800084a:	4690      	mov	r8, r2
 800084c:	2000      	movs	r0, #0
 800084e:	e7b0      	b.n	80007b2 <__aeabi_fdiv+0x52>
 8000850:	2303      	movs	r3, #3
 8000852:	464a      	mov	r2, r9
 8000854:	431a      	orrs	r2, r3
 8000856:	4691      	mov	r9, r2
 8000858:	2003      	movs	r0, #3
 800085a:	33fc      	adds	r3, #252	@ 0xfc
 800085c:	e7a9      	b.n	80007b2 <__aeabi_fdiv+0x52>
 800085e:	000d      	movs	r5, r1
 8000860:	20ff      	movs	r0, #255	@ 0xff
 8000862:	2200      	movs	r2, #0
 8000864:	05c0      	lsls	r0, r0, #23
 8000866:	07ed      	lsls	r5, r5, #31
 8000868:	4310      	orrs	r0, r2
 800086a:	4328      	orrs	r0, r5
 800086c:	bce0      	pop	{r5, r6, r7}
 800086e:	46ba      	mov	sl, r7
 8000870:	46b1      	mov	r9, r6
 8000872:	46a8      	mov	r8, r5
 8000874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000876:	000d      	movs	r5, r1
 8000878:	2000      	movs	r0, #0
 800087a:	2200      	movs	r2, #0
 800087c:	e7f2      	b.n	8000864 <__aeabi_fdiv+0x104>
 800087e:	4653      	mov	r3, sl
 8000880:	2b02      	cmp	r3, #2
 8000882:	d0ed      	beq.n	8000860 <__aeabi_fdiv+0x100>
 8000884:	2b03      	cmp	r3, #3
 8000886:	d033      	beq.n	80008f0 <__aeabi_fdiv+0x190>
 8000888:	46a0      	mov	r8, r4
 800088a:	2b01      	cmp	r3, #1
 800088c:	d105      	bne.n	800089a <__aeabi_fdiv+0x13a>
 800088e:	2000      	movs	r0, #0
 8000890:	2200      	movs	r2, #0
 8000892:	e7e7      	b.n	8000864 <__aeabi_fdiv+0x104>
 8000894:	0035      	movs	r5, r6
 8000896:	2803      	cmp	r0, #3
 8000898:	d07a      	beq.n	8000990 <__aeabi_fdiv+0x230>
 800089a:	003b      	movs	r3, r7
 800089c:	337f      	adds	r3, #127	@ 0x7f
 800089e:	2b00      	cmp	r3, #0
 80008a0:	dd2d      	ble.n	80008fe <__aeabi_fdiv+0x19e>
 80008a2:	4642      	mov	r2, r8
 80008a4:	0752      	lsls	r2, r2, #29
 80008a6:	d007      	beq.n	80008b8 <__aeabi_fdiv+0x158>
 80008a8:	220f      	movs	r2, #15
 80008aa:	4641      	mov	r1, r8
 80008ac:	400a      	ands	r2, r1
 80008ae:	2a04      	cmp	r2, #4
 80008b0:	d002      	beq.n	80008b8 <__aeabi_fdiv+0x158>
 80008b2:	2204      	movs	r2, #4
 80008b4:	4694      	mov	ip, r2
 80008b6:	44e0      	add	r8, ip
 80008b8:	4642      	mov	r2, r8
 80008ba:	0112      	lsls	r2, r2, #4
 80008bc:	d505      	bpl.n	80008ca <__aeabi_fdiv+0x16a>
 80008be:	4642      	mov	r2, r8
 80008c0:	4b36      	ldr	r3, [pc, #216]	@ (800099c <__aeabi_fdiv+0x23c>)
 80008c2:	401a      	ands	r2, r3
 80008c4:	003b      	movs	r3, r7
 80008c6:	4690      	mov	r8, r2
 80008c8:	3380      	adds	r3, #128	@ 0x80
 80008ca:	2bfe      	cmp	r3, #254	@ 0xfe
 80008cc:	dcc8      	bgt.n	8000860 <__aeabi_fdiv+0x100>
 80008ce:	4642      	mov	r2, r8
 80008d0:	0192      	lsls	r2, r2, #6
 80008d2:	0a52      	lsrs	r2, r2, #9
 80008d4:	b2d8      	uxtb	r0, r3
 80008d6:	e7c5      	b.n	8000864 <__aeabi_fdiv+0x104>
 80008d8:	2280      	movs	r2, #128	@ 0x80
 80008da:	2500      	movs	r5, #0
 80008dc:	20ff      	movs	r0, #255	@ 0xff
 80008de:	03d2      	lsls	r2, r2, #15
 80008e0:	e7c0      	b.n	8000864 <__aeabi_fdiv+0x104>
 80008e2:	2280      	movs	r2, #128	@ 0x80
 80008e4:	03d2      	lsls	r2, r2, #15
 80008e6:	4214      	tst	r4, r2
 80008e8:	d002      	beq.n	80008f0 <__aeabi_fdiv+0x190>
 80008ea:	4643      	mov	r3, r8
 80008ec:	4213      	tst	r3, r2
 80008ee:	d049      	beq.n	8000984 <__aeabi_fdiv+0x224>
 80008f0:	2280      	movs	r2, #128	@ 0x80
 80008f2:	03d2      	lsls	r2, r2, #15
 80008f4:	4322      	orrs	r2, r4
 80008f6:	0252      	lsls	r2, r2, #9
 80008f8:	20ff      	movs	r0, #255	@ 0xff
 80008fa:	0a52      	lsrs	r2, r2, #9
 80008fc:	e7b2      	b.n	8000864 <__aeabi_fdiv+0x104>
 80008fe:	2201      	movs	r2, #1
 8000900:	1ad3      	subs	r3, r2, r3
 8000902:	2b1b      	cmp	r3, #27
 8000904:	dcc3      	bgt.n	800088e <__aeabi_fdiv+0x12e>
 8000906:	4642      	mov	r2, r8
 8000908:	40da      	lsrs	r2, r3
 800090a:	4643      	mov	r3, r8
 800090c:	379e      	adds	r7, #158	@ 0x9e
 800090e:	40bb      	lsls	r3, r7
 8000910:	1e59      	subs	r1, r3, #1
 8000912:	418b      	sbcs	r3, r1
 8000914:	431a      	orrs	r2, r3
 8000916:	0753      	lsls	r3, r2, #29
 8000918:	d004      	beq.n	8000924 <__aeabi_fdiv+0x1c4>
 800091a:	230f      	movs	r3, #15
 800091c:	4013      	ands	r3, r2
 800091e:	2b04      	cmp	r3, #4
 8000920:	d000      	beq.n	8000924 <__aeabi_fdiv+0x1c4>
 8000922:	3204      	adds	r2, #4
 8000924:	0153      	lsls	r3, r2, #5
 8000926:	d529      	bpl.n	800097c <__aeabi_fdiv+0x21c>
 8000928:	2001      	movs	r0, #1
 800092a:	2200      	movs	r2, #0
 800092c:	e79a      	b.n	8000864 <__aeabi_fdiv+0x104>
 800092e:	4642      	mov	r2, r8
 8000930:	0163      	lsls	r3, r4, #5
 8000932:	0155      	lsls	r5, r2, #5
 8000934:	42ab      	cmp	r3, r5
 8000936:	d215      	bcs.n	8000964 <__aeabi_fdiv+0x204>
 8000938:	201b      	movs	r0, #27
 800093a:	2200      	movs	r2, #0
 800093c:	3f01      	subs	r7, #1
 800093e:	2601      	movs	r6, #1
 8000940:	001c      	movs	r4, r3
 8000942:	0052      	lsls	r2, r2, #1
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	2c00      	cmp	r4, #0
 8000948:	db01      	blt.n	800094e <__aeabi_fdiv+0x1ee>
 800094a:	429d      	cmp	r5, r3
 800094c:	d801      	bhi.n	8000952 <__aeabi_fdiv+0x1f2>
 800094e:	1b5b      	subs	r3, r3, r5
 8000950:	4332      	orrs	r2, r6
 8000952:	3801      	subs	r0, #1
 8000954:	2800      	cmp	r0, #0
 8000956:	d1f3      	bne.n	8000940 <__aeabi_fdiv+0x1e0>
 8000958:	1e58      	subs	r0, r3, #1
 800095a:	4183      	sbcs	r3, r0
 800095c:	4313      	orrs	r3, r2
 800095e:	4698      	mov	r8, r3
 8000960:	000d      	movs	r5, r1
 8000962:	e79a      	b.n	800089a <__aeabi_fdiv+0x13a>
 8000964:	201a      	movs	r0, #26
 8000966:	2201      	movs	r2, #1
 8000968:	1b5b      	subs	r3, r3, r5
 800096a:	e7e8      	b.n	800093e <__aeabi_fdiv+0x1de>
 800096c:	3b02      	subs	r3, #2
 800096e:	425a      	negs	r2, r3
 8000970:	4153      	adcs	r3, r2
 8000972:	425b      	negs	r3, r3
 8000974:	0035      	movs	r5, r6
 8000976:	2200      	movs	r2, #0
 8000978:	b2d8      	uxtb	r0, r3
 800097a:	e773      	b.n	8000864 <__aeabi_fdiv+0x104>
 800097c:	0192      	lsls	r2, r2, #6
 800097e:	2000      	movs	r0, #0
 8000980:	0a52      	lsrs	r2, r2, #9
 8000982:	e76f      	b.n	8000864 <__aeabi_fdiv+0x104>
 8000984:	431a      	orrs	r2, r3
 8000986:	0252      	lsls	r2, r2, #9
 8000988:	0035      	movs	r5, r6
 800098a:	20ff      	movs	r0, #255	@ 0xff
 800098c:	0a52      	lsrs	r2, r2, #9
 800098e:	e769      	b.n	8000864 <__aeabi_fdiv+0x104>
 8000990:	4644      	mov	r4, r8
 8000992:	e7ad      	b.n	80008f0 <__aeabi_fdiv+0x190>
 8000994:	080099b0 	.word	0x080099b0
 8000998:	080099f0 	.word	0x080099f0
 800099c:	f7ffffff 	.word	0xf7ffffff

080009a0 <__aeabi_i2f>:
 80009a0:	b570      	push	{r4, r5, r6, lr}
 80009a2:	2800      	cmp	r0, #0
 80009a4:	d013      	beq.n	80009ce <__aeabi_i2f+0x2e>
 80009a6:	17c3      	asrs	r3, r0, #31
 80009a8:	18c5      	adds	r5, r0, r3
 80009aa:	405d      	eors	r5, r3
 80009ac:	0fc4      	lsrs	r4, r0, #31
 80009ae:	0028      	movs	r0, r5
 80009b0:	f001 ff88 	bl	80028c4 <__clzsi2>
 80009b4:	239e      	movs	r3, #158	@ 0x9e
 80009b6:	0001      	movs	r1, r0
 80009b8:	1a1b      	subs	r3, r3, r0
 80009ba:	2b96      	cmp	r3, #150	@ 0x96
 80009bc:	dc0f      	bgt.n	80009de <__aeabi_i2f+0x3e>
 80009be:	2808      	cmp	r0, #8
 80009c0:	d034      	beq.n	8000a2c <__aeabi_i2f+0x8c>
 80009c2:	3908      	subs	r1, #8
 80009c4:	408d      	lsls	r5, r1
 80009c6:	026d      	lsls	r5, r5, #9
 80009c8:	0a6d      	lsrs	r5, r5, #9
 80009ca:	b2d8      	uxtb	r0, r3
 80009cc:	e002      	b.n	80009d4 <__aeabi_i2f+0x34>
 80009ce:	2400      	movs	r4, #0
 80009d0:	2000      	movs	r0, #0
 80009d2:	2500      	movs	r5, #0
 80009d4:	05c0      	lsls	r0, r0, #23
 80009d6:	4328      	orrs	r0, r5
 80009d8:	07e4      	lsls	r4, r4, #31
 80009da:	4320      	orrs	r0, r4
 80009dc:	bd70      	pop	{r4, r5, r6, pc}
 80009de:	2b99      	cmp	r3, #153	@ 0x99
 80009e0:	dc16      	bgt.n	8000a10 <__aeabi_i2f+0x70>
 80009e2:	1f42      	subs	r2, r0, #5
 80009e4:	2805      	cmp	r0, #5
 80009e6:	d000      	beq.n	80009ea <__aeabi_i2f+0x4a>
 80009e8:	4095      	lsls	r5, r2
 80009ea:	002a      	movs	r2, r5
 80009ec:	4811      	ldr	r0, [pc, #68]	@ (8000a34 <__aeabi_i2f+0x94>)
 80009ee:	4002      	ands	r2, r0
 80009f0:	076e      	lsls	r6, r5, #29
 80009f2:	d009      	beq.n	8000a08 <__aeabi_i2f+0x68>
 80009f4:	260f      	movs	r6, #15
 80009f6:	4035      	ands	r5, r6
 80009f8:	2d04      	cmp	r5, #4
 80009fa:	d005      	beq.n	8000a08 <__aeabi_i2f+0x68>
 80009fc:	3204      	adds	r2, #4
 80009fe:	0155      	lsls	r5, r2, #5
 8000a00:	d502      	bpl.n	8000a08 <__aeabi_i2f+0x68>
 8000a02:	239f      	movs	r3, #159	@ 0x9f
 8000a04:	4002      	ands	r2, r0
 8000a06:	1a5b      	subs	r3, r3, r1
 8000a08:	0192      	lsls	r2, r2, #6
 8000a0a:	0a55      	lsrs	r5, r2, #9
 8000a0c:	b2d8      	uxtb	r0, r3
 8000a0e:	e7e1      	b.n	80009d4 <__aeabi_i2f+0x34>
 8000a10:	2205      	movs	r2, #5
 8000a12:	1a12      	subs	r2, r2, r0
 8000a14:	0028      	movs	r0, r5
 8000a16:	40d0      	lsrs	r0, r2
 8000a18:	0002      	movs	r2, r0
 8000a1a:	0008      	movs	r0, r1
 8000a1c:	301b      	adds	r0, #27
 8000a1e:	4085      	lsls	r5, r0
 8000a20:	0028      	movs	r0, r5
 8000a22:	1e45      	subs	r5, r0, #1
 8000a24:	41a8      	sbcs	r0, r5
 8000a26:	4302      	orrs	r2, r0
 8000a28:	0015      	movs	r5, r2
 8000a2a:	e7de      	b.n	80009ea <__aeabi_i2f+0x4a>
 8000a2c:	026d      	lsls	r5, r5, #9
 8000a2e:	2096      	movs	r0, #150	@ 0x96
 8000a30:	0a6d      	lsrs	r5, r5, #9
 8000a32:	e7cf      	b.n	80009d4 <__aeabi_i2f+0x34>
 8000a34:	fbffffff 	.word	0xfbffffff

08000a38 <__aeabi_ui2f>:
 8000a38:	b570      	push	{r4, r5, r6, lr}
 8000a3a:	1e04      	subs	r4, r0, #0
 8000a3c:	d00e      	beq.n	8000a5c <__aeabi_ui2f+0x24>
 8000a3e:	f001 ff41 	bl	80028c4 <__clzsi2>
 8000a42:	239e      	movs	r3, #158	@ 0x9e
 8000a44:	0001      	movs	r1, r0
 8000a46:	1a1b      	subs	r3, r3, r0
 8000a48:	2b96      	cmp	r3, #150	@ 0x96
 8000a4a:	dc0c      	bgt.n	8000a66 <__aeabi_ui2f+0x2e>
 8000a4c:	2808      	cmp	r0, #8
 8000a4e:	d02f      	beq.n	8000ab0 <__aeabi_ui2f+0x78>
 8000a50:	3908      	subs	r1, #8
 8000a52:	408c      	lsls	r4, r1
 8000a54:	0264      	lsls	r4, r4, #9
 8000a56:	0a64      	lsrs	r4, r4, #9
 8000a58:	b2d8      	uxtb	r0, r3
 8000a5a:	e001      	b.n	8000a60 <__aeabi_ui2f+0x28>
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	2400      	movs	r4, #0
 8000a60:	05c0      	lsls	r0, r0, #23
 8000a62:	4320      	orrs	r0, r4
 8000a64:	bd70      	pop	{r4, r5, r6, pc}
 8000a66:	2b99      	cmp	r3, #153	@ 0x99
 8000a68:	dc16      	bgt.n	8000a98 <__aeabi_ui2f+0x60>
 8000a6a:	1f42      	subs	r2, r0, #5
 8000a6c:	2805      	cmp	r0, #5
 8000a6e:	d000      	beq.n	8000a72 <__aeabi_ui2f+0x3a>
 8000a70:	4094      	lsls	r4, r2
 8000a72:	0022      	movs	r2, r4
 8000a74:	4810      	ldr	r0, [pc, #64]	@ (8000ab8 <__aeabi_ui2f+0x80>)
 8000a76:	4002      	ands	r2, r0
 8000a78:	0765      	lsls	r5, r4, #29
 8000a7a:	d009      	beq.n	8000a90 <__aeabi_ui2f+0x58>
 8000a7c:	250f      	movs	r5, #15
 8000a7e:	402c      	ands	r4, r5
 8000a80:	2c04      	cmp	r4, #4
 8000a82:	d005      	beq.n	8000a90 <__aeabi_ui2f+0x58>
 8000a84:	3204      	adds	r2, #4
 8000a86:	0154      	lsls	r4, r2, #5
 8000a88:	d502      	bpl.n	8000a90 <__aeabi_ui2f+0x58>
 8000a8a:	239f      	movs	r3, #159	@ 0x9f
 8000a8c:	4002      	ands	r2, r0
 8000a8e:	1a5b      	subs	r3, r3, r1
 8000a90:	0192      	lsls	r2, r2, #6
 8000a92:	0a54      	lsrs	r4, r2, #9
 8000a94:	b2d8      	uxtb	r0, r3
 8000a96:	e7e3      	b.n	8000a60 <__aeabi_ui2f+0x28>
 8000a98:	0002      	movs	r2, r0
 8000a9a:	0020      	movs	r0, r4
 8000a9c:	321b      	adds	r2, #27
 8000a9e:	4090      	lsls	r0, r2
 8000aa0:	0002      	movs	r2, r0
 8000aa2:	1e50      	subs	r0, r2, #1
 8000aa4:	4182      	sbcs	r2, r0
 8000aa6:	2005      	movs	r0, #5
 8000aa8:	1a40      	subs	r0, r0, r1
 8000aaa:	40c4      	lsrs	r4, r0
 8000aac:	4314      	orrs	r4, r2
 8000aae:	e7e0      	b.n	8000a72 <__aeabi_ui2f+0x3a>
 8000ab0:	0264      	lsls	r4, r4, #9
 8000ab2:	2096      	movs	r0, #150	@ 0x96
 8000ab4:	0a64      	lsrs	r4, r4, #9
 8000ab6:	e7d3      	b.n	8000a60 <__aeabi_ui2f+0x28>
 8000ab8:	fbffffff 	.word	0xfbffffff

08000abc <__aeabi_dadd>:
 8000abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000abe:	4657      	mov	r7, sl
 8000ac0:	464e      	mov	r6, r9
 8000ac2:	4645      	mov	r5, r8
 8000ac4:	46de      	mov	lr, fp
 8000ac6:	b5e0      	push	{r5, r6, r7, lr}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	9000      	str	r0, [sp, #0]
 8000acc:	9101      	str	r1, [sp, #4]
 8000ace:	030c      	lsls	r4, r1, #12
 8000ad0:	004f      	lsls	r7, r1, #1
 8000ad2:	0fce      	lsrs	r6, r1, #31
 8000ad4:	0a61      	lsrs	r1, r4, #9
 8000ad6:	9c00      	ldr	r4, [sp, #0]
 8000ad8:	031d      	lsls	r5, r3, #12
 8000ada:	0f64      	lsrs	r4, r4, #29
 8000adc:	430c      	orrs	r4, r1
 8000ade:	9900      	ldr	r1, [sp, #0]
 8000ae0:	9200      	str	r2, [sp, #0]
 8000ae2:	9301      	str	r3, [sp, #4]
 8000ae4:	00c8      	lsls	r0, r1, #3
 8000ae6:	0059      	lsls	r1, r3, #1
 8000ae8:	0d4b      	lsrs	r3, r1, #21
 8000aea:	4699      	mov	r9, r3
 8000aec:	9a00      	ldr	r2, [sp, #0]
 8000aee:	9b01      	ldr	r3, [sp, #4]
 8000af0:	0a6d      	lsrs	r5, r5, #9
 8000af2:	0fd9      	lsrs	r1, r3, #31
 8000af4:	0f53      	lsrs	r3, r2, #29
 8000af6:	432b      	orrs	r3, r5
 8000af8:	469a      	mov	sl, r3
 8000afa:	9b00      	ldr	r3, [sp, #0]
 8000afc:	0d7f      	lsrs	r7, r7, #21
 8000afe:	00da      	lsls	r2, r3, #3
 8000b00:	4694      	mov	ip, r2
 8000b02:	464a      	mov	r2, r9
 8000b04:	46b0      	mov	r8, r6
 8000b06:	1aba      	subs	r2, r7, r2
 8000b08:	428e      	cmp	r6, r1
 8000b0a:	d100      	bne.n	8000b0e <__aeabi_dadd+0x52>
 8000b0c:	e0b0      	b.n	8000c70 <__aeabi_dadd+0x1b4>
 8000b0e:	2a00      	cmp	r2, #0
 8000b10:	dc00      	bgt.n	8000b14 <__aeabi_dadd+0x58>
 8000b12:	e078      	b.n	8000c06 <__aeabi_dadd+0x14a>
 8000b14:	4649      	mov	r1, r9
 8000b16:	2900      	cmp	r1, #0
 8000b18:	d100      	bne.n	8000b1c <__aeabi_dadd+0x60>
 8000b1a:	e0e9      	b.n	8000cf0 <__aeabi_dadd+0x234>
 8000b1c:	49c9      	ldr	r1, [pc, #804]	@ (8000e44 <__aeabi_dadd+0x388>)
 8000b1e:	428f      	cmp	r7, r1
 8000b20:	d100      	bne.n	8000b24 <__aeabi_dadd+0x68>
 8000b22:	e195      	b.n	8000e50 <__aeabi_dadd+0x394>
 8000b24:	2501      	movs	r5, #1
 8000b26:	2a38      	cmp	r2, #56	@ 0x38
 8000b28:	dc16      	bgt.n	8000b58 <__aeabi_dadd+0x9c>
 8000b2a:	2180      	movs	r1, #128	@ 0x80
 8000b2c:	4653      	mov	r3, sl
 8000b2e:	0409      	lsls	r1, r1, #16
 8000b30:	430b      	orrs	r3, r1
 8000b32:	469a      	mov	sl, r3
 8000b34:	2a1f      	cmp	r2, #31
 8000b36:	dd00      	ble.n	8000b3a <__aeabi_dadd+0x7e>
 8000b38:	e1e7      	b.n	8000f0a <__aeabi_dadd+0x44e>
 8000b3a:	2120      	movs	r1, #32
 8000b3c:	4655      	mov	r5, sl
 8000b3e:	1a8b      	subs	r3, r1, r2
 8000b40:	4661      	mov	r1, ip
 8000b42:	409d      	lsls	r5, r3
 8000b44:	40d1      	lsrs	r1, r2
 8000b46:	430d      	orrs	r5, r1
 8000b48:	4661      	mov	r1, ip
 8000b4a:	4099      	lsls	r1, r3
 8000b4c:	1e4b      	subs	r3, r1, #1
 8000b4e:	4199      	sbcs	r1, r3
 8000b50:	4653      	mov	r3, sl
 8000b52:	40d3      	lsrs	r3, r2
 8000b54:	430d      	orrs	r5, r1
 8000b56:	1ae4      	subs	r4, r4, r3
 8000b58:	1b45      	subs	r5, r0, r5
 8000b5a:	42a8      	cmp	r0, r5
 8000b5c:	4180      	sbcs	r0, r0
 8000b5e:	4240      	negs	r0, r0
 8000b60:	1a24      	subs	r4, r4, r0
 8000b62:	0223      	lsls	r3, r4, #8
 8000b64:	d400      	bmi.n	8000b68 <__aeabi_dadd+0xac>
 8000b66:	e10f      	b.n	8000d88 <__aeabi_dadd+0x2cc>
 8000b68:	0264      	lsls	r4, r4, #9
 8000b6a:	0a64      	lsrs	r4, r4, #9
 8000b6c:	2c00      	cmp	r4, #0
 8000b6e:	d100      	bne.n	8000b72 <__aeabi_dadd+0xb6>
 8000b70:	e139      	b.n	8000de6 <__aeabi_dadd+0x32a>
 8000b72:	0020      	movs	r0, r4
 8000b74:	f001 fea6 	bl	80028c4 <__clzsi2>
 8000b78:	0003      	movs	r3, r0
 8000b7a:	3b08      	subs	r3, #8
 8000b7c:	2120      	movs	r1, #32
 8000b7e:	0028      	movs	r0, r5
 8000b80:	1aca      	subs	r2, r1, r3
 8000b82:	40d0      	lsrs	r0, r2
 8000b84:	409c      	lsls	r4, r3
 8000b86:	0002      	movs	r2, r0
 8000b88:	409d      	lsls	r5, r3
 8000b8a:	4322      	orrs	r2, r4
 8000b8c:	429f      	cmp	r7, r3
 8000b8e:	dd00      	ble.n	8000b92 <__aeabi_dadd+0xd6>
 8000b90:	e173      	b.n	8000e7a <__aeabi_dadd+0x3be>
 8000b92:	1bd8      	subs	r0, r3, r7
 8000b94:	3001      	adds	r0, #1
 8000b96:	1a09      	subs	r1, r1, r0
 8000b98:	002c      	movs	r4, r5
 8000b9a:	408d      	lsls	r5, r1
 8000b9c:	40c4      	lsrs	r4, r0
 8000b9e:	1e6b      	subs	r3, r5, #1
 8000ba0:	419d      	sbcs	r5, r3
 8000ba2:	0013      	movs	r3, r2
 8000ba4:	40c2      	lsrs	r2, r0
 8000ba6:	408b      	lsls	r3, r1
 8000ba8:	4325      	orrs	r5, r4
 8000baa:	2700      	movs	r7, #0
 8000bac:	0014      	movs	r4, r2
 8000bae:	431d      	orrs	r5, r3
 8000bb0:	076b      	lsls	r3, r5, #29
 8000bb2:	d009      	beq.n	8000bc8 <__aeabi_dadd+0x10c>
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	402b      	ands	r3, r5
 8000bb8:	2b04      	cmp	r3, #4
 8000bba:	d005      	beq.n	8000bc8 <__aeabi_dadd+0x10c>
 8000bbc:	1d2b      	adds	r3, r5, #4
 8000bbe:	42ab      	cmp	r3, r5
 8000bc0:	41ad      	sbcs	r5, r5
 8000bc2:	426d      	negs	r5, r5
 8000bc4:	1964      	adds	r4, r4, r5
 8000bc6:	001d      	movs	r5, r3
 8000bc8:	0223      	lsls	r3, r4, #8
 8000bca:	d400      	bmi.n	8000bce <__aeabi_dadd+0x112>
 8000bcc:	e12d      	b.n	8000e2a <__aeabi_dadd+0x36e>
 8000bce:	4a9d      	ldr	r2, [pc, #628]	@ (8000e44 <__aeabi_dadd+0x388>)
 8000bd0:	3701      	adds	r7, #1
 8000bd2:	4297      	cmp	r7, r2
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_dadd+0x11c>
 8000bd6:	e0d3      	b.n	8000d80 <__aeabi_dadd+0x2c4>
 8000bd8:	4646      	mov	r6, r8
 8000bda:	499b      	ldr	r1, [pc, #620]	@ (8000e48 <__aeabi_dadd+0x38c>)
 8000bdc:	08ed      	lsrs	r5, r5, #3
 8000bde:	4021      	ands	r1, r4
 8000be0:	074a      	lsls	r2, r1, #29
 8000be2:	432a      	orrs	r2, r5
 8000be4:	057c      	lsls	r4, r7, #21
 8000be6:	024d      	lsls	r5, r1, #9
 8000be8:	0b2d      	lsrs	r5, r5, #12
 8000bea:	0d64      	lsrs	r4, r4, #21
 8000bec:	0524      	lsls	r4, r4, #20
 8000bee:	432c      	orrs	r4, r5
 8000bf0:	07f6      	lsls	r6, r6, #31
 8000bf2:	4334      	orrs	r4, r6
 8000bf4:	0010      	movs	r0, r2
 8000bf6:	0021      	movs	r1, r4
 8000bf8:	b003      	add	sp, #12
 8000bfa:	bcf0      	pop	{r4, r5, r6, r7}
 8000bfc:	46bb      	mov	fp, r7
 8000bfe:	46b2      	mov	sl, r6
 8000c00:	46a9      	mov	r9, r5
 8000c02:	46a0      	mov	r8, r4
 8000c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c06:	2a00      	cmp	r2, #0
 8000c08:	d100      	bne.n	8000c0c <__aeabi_dadd+0x150>
 8000c0a:	e084      	b.n	8000d16 <__aeabi_dadd+0x25a>
 8000c0c:	464a      	mov	r2, r9
 8000c0e:	1bd2      	subs	r2, r2, r7
 8000c10:	2f00      	cmp	r7, #0
 8000c12:	d000      	beq.n	8000c16 <__aeabi_dadd+0x15a>
 8000c14:	e16d      	b.n	8000ef2 <__aeabi_dadd+0x436>
 8000c16:	0025      	movs	r5, r4
 8000c18:	4305      	orrs	r5, r0
 8000c1a:	d100      	bne.n	8000c1e <__aeabi_dadd+0x162>
 8000c1c:	e127      	b.n	8000e6e <__aeabi_dadd+0x3b2>
 8000c1e:	1e56      	subs	r6, r2, #1
 8000c20:	2a01      	cmp	r2, #1
 8000c22:	d100      	bne.n	8000c26 <__aeabi_dadd+0x16a>
 8000c24:	e23b      	b.n	800109e <__aeabi_dadd+0x5e2>
 8000c26:	4d87      	ldr	r5, [pc, #540]	@ (8000e44 <__aeabi_dadd+0x388>)
 8000c28:	42aa      	cmp	r2, r5
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_dadd+0x172>
 8000c2c:	e26a      	b.n	8001104 <__aeabi_dadd+0x648>
 8000c2e:	2501      	movs	r5, #1
 8000c30:	2e38      	cmp	r6, #56	@ 0x38
 8000c32:	dc12      	bgt.n	8000c5a <__aeabi_dadd+0x19e>
 8000c34:	0032      	movs	r2, r6
 8000c36:	2a1f      	cmp	r2, #31
 8000c38:	dd00      	ble.n	8000c3c <__aeabi_dadd+0x180>
 8000c3a:	e1f8      	b.n	800102e <__aeabi_dadd+0x572>
 8000c3c:	2620      	movs	r6, #32
 8000c3e:	0025      	movs	r5, r4
 8000c40:	1ab6      	subs	r6, r6, r2
 8000c42:	0007      	movs	r7, r0
 8000c44:	4653      	mov	r3, sl
 8000c46:	40b0      	lsls	r0, r6
 8000c48:	40d4      	lsrs	r4, r2
 8000c4a:	40b5      	lsls	r5, r6
 8000c4c:	40d7      	lsrs	r7, r2
 8000c4e:	1e46      	subs	r6, r0, #1
 8000c50:	41b0      	sbcs	r0, r6
 8000c52:	1b1b      	subs	r3, r3, r4
 8000c54:	469a      	mov	sl, r3
 8000c56:	433d      	orrs	r5, r7
 8000c58:	4305      	orrs	r5, r0
 8000c5a:	4662      	mov	r2, ip
 8000c5c:	1b55      	subs	r5, r2, r5
 8000c5e:	45ac      	cmp	ip, r5
 8000c60:	4192      	sbcs	r2, r2
 8000c62:	4653      	mov	r3, sl
 8000c64:	4252      	negs	r2, r2
 8000c66:	000e      	movs	r6, r1
 8000c68:	464f      	mov	r7, r9
 8000c6a:	4688      	mov	r8, r1
 8000c6c:	1a9c      	subs	r4, r3, r2
 8000c6e:	e778      	b.n	8000b62 <__aeabi_dadd+0xa6>
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	dc00      	bgt.n	8000c76 <__aeabi_dadd+0x1ba>
 8000c74:	e08e      	b.n	8000d94 <__aeabi_dadd+0x2d8>
 8000c76:	4649      	mov	r1, r9
 8000c78:	2900      	cmp	r1, #0
 8000c7a:	d175      	bne.n	8000d68 <__aeabi_dadd+0x2ac>
 8000c7c:	4661      	mov	r1, ip
 8000c7e:	4653      	mov	r3, sl
 8000c80:	4319      	orrs	r1, r3
 8000c82:	d100      	bne.n	8000c86 <__aeabi_dadd+0x1ca>
 8000c84:	e0f6      	b.n	8000e74 <__aeabi_dadd+0x3b8>
 8000c86:	1e51      	subs	r1, r2, #1
 8000c88:	2a01      	cmp	r2, #1
 8000c8a:	d100      	bne.n	8000c8e <__aeabi_dadd+0x1d2>
 8000c8c:	e191      	b.n	8000fb2 <__aeabi_dadd+0x4f6>
 8000c8e:	4d6d      	ldr	r5, [pc, #436]	@ (8000e44 <__aeabi_dadd+0x388>)
 8000c90:	42aa      	cmp	r2, r5
 8000c92:	d100      	bne.n	8000c96 <__aeabi_dadd+0x1da>
 8000c94:	e0dc      	b.n	8000e50 <__aeabi_dadd+0x394>
 8000c96:	2501      	movs	r5, #1
 8000c98:	2938      	cmp	r1, #56	@ 0x38
 8000c9a:	dc14      	bgt.n	8000cc6 <__aeabi_dadd+0x20a>
 8000c9c:	000a      	movs	r2, r1
 8000c9e:	2a1f      	cmp	r2, #31
 8000ca0:	dd00      	ble.n	8000ca4 <__aeabi_dadd+0x1e8>
 8000ca2:	e1a2      	b.n	8000fea <__aeabi_dadd+0x52e>
 8000ca4:	2120      	movs	r1, #32
 8000ca6:	4653      	mov	r3, sl
 8000ca8:	1a89      	subs	r1, r1, r2
 8000caa:	408b      	lsls	r3, r1
 8000cac:	001d      	movs	r5, r3
 8000cae:	4663      	mov	r3, ip
 8000cb0:	40d3      	lsrs	r3, r2
 8000cb2:	431d      	orrs	r5, r3
 8000cb4:	4663      	mov	r3, ip
 8000cb6:	408b      	lsls	r3, r1
 8000cb8:	0019      	movs	r1, r3
 8000cba:	1e4b      	subs	r3, r1, #1
 8000cbc:	4199      	sbcs	r1, r3
 8000cbe:	4653      	mov	r3, sl
 8000cc0:	40d3      	lsrs	r3, r2
 8000cc2:	430d      	orrs	r5, r1
 8000cc4:	18e4      	adds	r4, r4, r3
 8000cc6:	182d      	adds	r5, r5, r0
 8000cc8:	4285      	cmp	r5, r0
 8000cca:	4180      	sbcs	r0, r0
 8000ccc:	4240      	negs	r0, r0
 8000cce:	1824      	adds	r4, r4, r0
 8000cd0:	0223      	lsls	r3, r4, #8
 8000cd2:	d559      	bpl.n	8000d88 <__aeabi_dadd+0x2cc>
 8000cd4:	4b5b      	ldr	r3, [pc, #364]	@ (8000e44 <__aeabi_dadd+0x388>)
 8000cd6:	3701      	adds	r7, #1
 8000cd8:	429f      	cmp	r7, r3
 8000cda:	d051      	beq.n	8000d80 <__aeabi_dadd+0x2c4>
 8000cdc:	2101      	movs	r1, #1
 8000cde:	4b5a      	ldr	r3, [pc, #360]	@ (8000e48 <__aeabi_dadd+0x38c>)
 8000ce0:	086a      	lsrs	r2, r5, #1
 8000ce2:	401c      	ands	r4, r3
 8000ce4:	4029      	ands	r1, r5
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	07e5      	lsls	r5, r4, #31
 8000cea:	4315      	orrs	r5, r2
 8000cec:	0864      	lsrs	r4, r4, #1
 8000cee:	e75f      	b.n	8000bb0 <__aeabi_dadd+0xf4>
 8000cf0:	4661      	mov	r1, ip
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	4319      	orrs	r1, r3
 8000cf6:	d100      	bne.n	8000cfa <__aeabi_dadd+0x23e>
 8000cf8:	e0bc      	b.n	8000e74 <__aeabi_dadd+0x3b8>
 8000cfa:	1e51      	subs	r1, r2, #1
 8000cfc:	2a01      	cmp	r2, #1
 8000cfe:	d100      	bne.n	8000d02 <__aeabi_dadd+0x246>
 8000d00:	e164      	b.n	8000fcc <__aeabi_dadd+0x510>
 8000d02:	4d50      	ldr	r5, [pc, #320]	@ (8000e44 <__aeabi_dadd+0x388>)
 8000d04:	42aa      	cmp	r2, r5
 8000d06:	d100      	bne.n	8000d0a <__aeabi_dadd+0x24e>
 8000d08:	e16a      	b.n	8000fe0 <__aeabi_dadd+0x524>
 8000d0a:	2501      	movs	r5, #1
 8000d0c:	2938      	cmp	r1, #56	@ 0x38
 8000d0e:	dd00      	ble.n	8000d12 <__aeabi_dadd+0x256>
 8000d10:	e722      	b.n	8000b58 <__aeabi_dadd+0x9c>
 8000d12:	000a      	movs	r2, r1
 8000d14:	e70e      	b.n	8000b34 <__aeabi_dadd+0x78>
 8000d16:	4a4d      	ldr	r2, [pc, #308]	@ (8000e4c <__aeabi_dadd+0x390>)
 8000d18:	1c7d      	adds	r5, r7, #1
 8000d1a:	4215      	tst	r5, r2
 8000d1c:	d000      	beq.n	8000d20 <__aeabi_dadd+0x264>
 8000d1e:	e0d0      	b.n	8000ec2 <__aeabi_dadd+0x406>
 8000d20:	0025      	movs	r5, r4
 8000d22:	4662      	mov	r2, ip
 8000d24:	4653      	mov	r3, sl
 8000d26:	4305      	orrs	r5, r0
 8000d28:	431a      	orrs	r2, r3
 8000d2a:	2f00      	cmp	r7, #0
 8000d2c:	d000      	beq.n	8000d30 <__aeabi_dadd+0x274>
 8000d2e:	e137      	b.n	8000fa0 <__aeabi_dadd+0x4e4>
 8000d30:	2d00      	cmp	r5, #0
 8000d32:	d100      	bne.n	8000d36 <__aeabi_dadd+0x27a>
 8000d34:	e1a8      	b.n	8001088 <__aeabi_dadd+0x5cc>
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d100      	bne.n	8000d3c <__aeabi_dadd+0x280>
 8000d3a:	e16a      	b.n	8001012 <__aeabi_dadd+0x556>
 8000d3c:	4663      	mov	r3, ip
 8000d3e:	1ac5      	subs	r5, r0, r3
 8000d40:	4653      	mov	r3, sl
 8000d42:	1ae2      	subs	r2, r4, r3
 8000d44:	42a8      	cmp	r0, r5
 8000d46:	419b      	sbcs	r3, r3
 8000d48:	425b      	negs	r3, r3
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	021a      	lsls	r2, r3, #8
 8000d4e:	d400      	bmi.n	8000d52 <__aeabi_dadd+0x296>
 8000d50:	e203      	b.n	800115a <__aeabi_dadd+0x69e>
 8000d52:	4663      	mov	r3, ip
 8000d54:	1a1d      	subs	r5, r3, r0
 8000d56:	45ac      	cmp	ip, r5
 8000d58:	4192      	sbcs	r2, r2
 8000d5a:	4653      	mov	r3, sl
 8000d5c:	4252      	negs	r2, r2
 8000d5e:	1b1c      	subs	r4, r3, r4
 8000d60:	000e      	movs	r6, r1
 8000d62:	4688      	mov	r8, r1
 8000d64:	1aa4      	subs	r4, r4, r2
 8000d66:	e723      	b.n	8000bb0 <__aeabi_dadd+0xf4>
 8000d68:	4936      	ldr	r1, [pc, #216]	@ (8000e44 <__aeabi_dadd+0x388>)
 8000d6a:	428f      	cmp	r7, r1
 8000d6c:	d070      	beq.n	8000e50 <__aeabi_dadd+0x394>
 8000d6e:	2501      	movs	r5, #1
 8000d70:	2a38      	cmp	r2, #56	@ 0x38
 8000d72:	dca8      	bgt.n	8000cc6 <__aeabi_dadd+0x20a>
 8000d74:	2180      	movs	r1, #128	@ 0x80
 8000d76:	4653      	mov	r3, sl
 8000d78:	0409      	lsls	r1, r1, #16
 8000d7a:	430b      	orrs	r3, r1
 8000d7c:	469a      	mov	sl, r3
 8000d7e:	e78e      	b.n	8000c9e <__aeabi_dadd+0x1e2>
 8000d80:	003c      	movs	r4, r7
 8000d82:	2500      	movs	r5, #0
 8000d84:	2200      	movs	r2, #0
 8000d86:	e731      	b.n	8000bec <__aeabi_dadd+0x130>
 8000d88:	2307      	movs	r3, #7
 8000d8a:	402b      	ands	r3, r5
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d000      	beq.n	8000d92 <__aeabi_dadd+0x2d6>
 8000d90:	e710      	b.n	8000bb4 <__aeabi_dadd+0xf8>
 8000d92:	e093      	b.n	8000ebc <__aeabi_dadd+0x400>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	d074      	beq.n	8000e82 <__aeabi_dadd+0x3c6>
 8000d98:	464a      	mov	r2, r9
 8000d9a:	1bd2      	subs	r2, r2, r7
 8000d9c:	2f00      	cmp	r7, #0
 8000d9e:	d100      	bne.n	8000da2 <__aeabi_dadd+0x2e6>
 8000da0:	e0c7      	b.n	8000f32 <__aeabi_dadd+0x476>
 8000da2:	4928      	ldr	r1, [pc, #160]	@ (8000e44 <__aeabi_dadd+0x388>)
 8000da4:	4589      	cmp	r9, r1
 8000da6:	d100      	bne.n	8000daa <__aeabi_dadd+0x2ee>
 8000da8:	e185      	b.n	80010b6 <__aeabi_dadd+0x5fa>
 8000daa:	2501      	movs	r5, #1
 8000dac:	2a38      	cmp	r2, #56	@ 0x38
 8000dae:	dc12      	bgt.n	8000dd6 <__aeabi_dadd+0x31a>
 8000db0:	2180      	movs	r1, #128	@ 0x80
 8000db2:	0409      	lsls	r1, r1, #16
 8000db4:	430c      	orrs	r4, r1
 8000db6:	2a1f      	cmp	r2, #31
 8000db8:	dd00      	ble.n	8000dbc <__aeabi_dadd+0x300>
 8000dba:	e1ab      	b.n	8001114 <__aeabi_dadd+0x658>
 8000dbc:	2120      	movs	r1, #32
 8000dbe:	0025      	movs	r5, r4
 8000dc0:	1a89      	subs	r1, r1, r2
 8000dc2:	0007      	movs	r7, r0
 8000dc4:	4088      	lsls	r0, r1
 8000dc6:	408d      	lsls	r5, r1
 8000dc8:	40d7      	lsrs	r7, r2
 8000dca:	1e41      	subs	r1, r0, #1
 8000dcc:	4188      	sbcs	r0, r1
 8000dce:	40d4      	lsrs	r4, r2
 8000dd0:	433d      	orrs	r5, r7
 8000dd2:	4305      	orrs	r5, r0
 8000dd4:	44a2      	add	sl, r4
 8000dd6:	4465      	add	r5, ip
 8000dd8:	4565      	cmp	r5, ip
 8000dda:	4192      	sbcs	r2, r2
 8000ddc:	4252      	negs	r2, r2
 8000dde:	4452      	add	r2, sl
 8000de0:	0014      	movs	r4, r2
 8000de2:	464f      	mov	r7, r9
 8000de4:	e774      	b.n	8000cd0 <__aeabi_dadd+0x214>
 8000de6:	0028      	movs	r0, r5
 8000de8:	f001 fd6c 	bl	80028c4 <__clzsi2>
 8000dec:	0003      	movs	r3, r0
 8000dee:	3318      	adds	r3, #24
 8000df0:	2b1f      	cmp	r3, #31
 8000df2:	dc00      	bgt.n	8000df6 <__aeabi_dadd+0x33a>
 8000df4:	e6c2      	b.n	8000b7c <__aeabi_dadd+0xc0>
 8000df6:	002a      	movs	r2, r5
 8000df8:	3808      	subs	r0, #8
 8000dfa:	4082      	lsls	r2, r0
 8000dfc:	429f      	cmp	r7, r3
 8000dfe:	dd00      	ble.n	8000e02 <__aeabi_dadd+0x346>
 8000e00:	e0a9      	b.n	8000f56 <__aeabi_dadd+0x49a>
 8000e02:	1bdb      	subs	r3, r3, r7
 8000e04:	1c58      	adds	r0, r3, #1
 8000e06:	281f      	cmp	r0, #31
 8000e08:	dc00      	bgt.n	8000e0c <__aeabi_dadd+0x350>
 8000e0a:	e1ac      	b.n	8001166 <__aeabi_dadd+0x6aa>
 8000e0c:	0015      	movs	r5, r2
 8000e0e:	3b1f      	subs	r3, #31
 8000e10:	40dd      	lsrs	r5, r3
 8000e12:	2820      	cmp	r0, #32
 8000e14:	d005      	beq.n	8000e22 <__aeabi_dadd+0x366>
 8000e16:	2340      	movs	r3, #64	@ 0x40
 8000e18:	1a1b      	subs	r3, r3, r0
 8000e1a:	409a      	lsls	r2, r3
 8000e1c:	1e53      	subs	r3, r2, #1
 8000e1e:	419a      	sbcs	r2, r3
 8000e20:	4315      	orrs	r5, r2
 8000e22:	2307      	movs	r3, #7
 8000e24:	2700      	movs	r7, #0
 8000e26:	402b      	ands	r3, r5
 8000e28:	e7b0      	b.n	8000d8c <__aeabi_dadd+0x2d0>
 8000e2a:	08ed      	lsrs	r5, r5, #3
 8000e2c:	4b05      	ldr	r3, [pc, #20]	@ (8000e44 <__aeabi_dadd+0x388>)
 8000e2e:	0762      	lsls	r2, r4, #29
 8000e30:	432a      	orrs	r2, r5
 8000e32:	08e4      	lsrs	r4, r4, #3
 8000e34:	429f      	cmp	r7, r3
 8000e36:	d00f      	beq.n	8000e58 <__aeabi_dadd+0x39c>
 8000e38:	0324      	lsls	r4, r4, #12
 8000e3a:	0b25      	lsrs	r5, r4, #12
 8000e3c:	057c      	lsls	r4, r7, #21
 8000e3e:	0d64      	lsrs	r4, r4, #21
 8000e40:	e6d4      	b.n	8000bec <__aeabi_dadd+0x130>
 8000e42:	46c0      	nop			@ (mov r8, r8)
 8000e44:	000007ff 	.word	0x000007ff
 8000e48:	ff7fffff 	.word	0xff7fffff
 8000e4c:	000007fe 	.word	0x000007fe
 8000e50:	08c0      	lsrs	r0, r0, #3
 8000e52:	0762      	lsls	r2, r4, #29
 8000e54:	4302      	orrs	r2, r0
 8000e56:	08e4      	lsrs	r4, r4, #3
 8000e58:	0013      	movs	r3, r2
 8000e5a:	4323      	orrs	r3, r4
 8000e5c:	d100      	bne.n	8000e60 <__aeabi_dadd+0x3a4>
 8000e5e:	e186      	b.n	800116e <__aeabi_dadd+0x6b2>
 8000e60:	2580      	movs	r5, #128	@ 0x80
 8000e62:	032d      	lsls	r5, r5, #12
 8000e64:	4325      	orrs	r5, r4
 8000e66:	032d      	lsls	r5, r5, #12
 8000e68:	4cc3      	ldr	r4, [pc, #780]	@ (8001178 <__aeabi_dadd+0x6bc>)
 8000e6a:	0b2d      	lsrs	r5, r5, #12
 8000e6c:	e6be      	b.n	8000bec <__aeabi_dadd+0x130>
 8000e6e:	4660      	mov	r0, ip
 8000e70:	4654      	mov	r4, sl
 8000e72:	000e      	movs	r6, r1
 8000e74:	0017      	movs	r7, r2
 8000e76:	08c5      	lsrs	r5, r0, #3
 8000e78:	e7d8      	b.n	8000e2c <__aeabi_dadd+0x370>
 8000e7a:	4cc0      	ldr	r4, [pc, #768]	@ (800117c <__aeabi_dadd+0x6c0>)
 8000e7c:	1aff      	subs	r7, r7, r3
 8000e7e:	4014      	ands	r4, r2
 8000e80:	e696      	b.n	8000bb0 <__aeabi_dadd+0xf4>
 8000e82:	4abf      	ldr	r2, [pc, #764]	@ (8001180 <__aeabi_dadd+0x6c4>)
 8000e84:	1c79      	adds	r1, r7, #1
 8000e86:	4211      	tst	r1, r2
 8000e88:	d16b      	bne.n	8000f62 <__aeabi_dadd+0x4a6>
 8000e8a:	0022      	movs	r2, r4
 8000e8c:	4302      	orrs	r2, r0
 8000e8e:	2f00      	cmp	r7, #0
 8000e90:	d000      	beq.n	8000e94 <__aeabi_dadd+0x3d8>
 8000e92:	e0db      	b.n	800104c <__aeabi_dadd+0x590>
 8000e94:	2a00      	cmp	r2, #0
 8000e96:	d100      	bne.n	8000e9a <__aeabi_dadd+0x3de>
 8000e98:	e12d      	b.n	80010f6 <__aeabi_dadd+0x63a>
 8000e9a:	4662      	mov	r2, ip
 8000e9c:	4653      	mov	r3, sl
 8000e9e:	431a      	orrs	r2, r3
 8000ea0:	d100      	bne.n	8000ea4 <__aeabi_dadd+0x3e8>
 8000ea2:	e0b6      	b.n	8001012 <__aeabi_dadd+0x556>
 8000ea4:	4663      	mov	r3, ip
 8000ea6:	18c5      	adds	r5, r0, r3
 8000ea8:	4285      	cmp	r5, r0
 8000eaa:	4180      	sbcs	r0, r0
 8000eac:	4454      	add	r4, sl
 8000eae:	4240      	negs	r0, r0
 8000eb0:	1824      	adds	r4, r4, r0
 8000eb2:	0223      	lsls	r3, r4, #8
 8000eb4:	d502      	bpl.n	8000ebc <__aeabi_dadd+0x400>
 8000eb6:	000f      	movs	r7, r1
 8000eb8:	4bb0      	ldr	r3, [pc, #704]	@ (800117c <__aeabi_dadd+0x6c0>)
 8000eba:	401c      	ands	r4, r3
 8000ebc:	003a      	movs	r2, r7
 8000ebe:	0028      	movs	r0, r5
 8000ec0:	e7d8      	b.n	8000e74 <__aeabi_dadd+0x3b8>
 8000ec2:	4662      	mov	r2, ip
 8000ec4:	1a85      	subs	r5, r0, r2
 8000ec6:	42a8      	cmp	r0, r5
 8000ec8:	4192      	sbcs	r2, r2
 8000eca:	4653      	mov	r3, sl
 8000ecc:	4252      	negs	r2, r2
 8000ece:	4691      	mov	r9, r2
 8000ed0:	1ae3      	subs	r3, r4, r3
 8000ed2:	001a      	movs	r2, r3
 8000ed4:	464b      	mov	r3, r9
 8000ed6:	1ad2      	subs	r2, r2, r3
 8000ed8:	0013      	movs	r3, r2
 8000eda:	4691      	mov	r9, r2
 8000edc:	021a      	lsls	r2, r3, #8
 8000ede:	d454      	bmi.n	8000f8a <__aeabi_dadd+0x4ce>
 8000ee0:	464a      	mov	r2, r9
 8000ee2:	464c      	mov	r4, r9
 8000ee4:	432a      	orrs	r2, r5
 8000ee6:	d000      	beq.n	8000eea <__aeabi_dadd+0x42e>
 8000ee8:	e640      	b.n	8000b6c <__aeabi_dadd+0xb0>
 8000eea:	2600      	movs	r6, #0
 8000eec:	2400      	movs	r4, #0
 8000eee:	2500      	movs	r5, #0
 8000ef0:	e67c      	b.n	8000bec <__aeabi_dadd+0x130>
 8000ef2:	4da1      	ldr	r5, [pc, #644]	@ (8001178 <__aeabi_dadd+0x6bc>)
 8000ef4:	45a9      	cmp	r9, r5
 8000ef6:	d100      	bne.n	8000efa <__aeabi_dadd+0x43e>
 8000ef8:	e090      	b.n	800101c <__aeabi_dadd+0x560>
 8000efa:	2501      	movs	r5, #1
 8000efc:	2a38      	cmp	r2, #56	@ 0x38
 8000efe:	dd00      	ble.n	8000f02 <__aeabi_dadd+0x446>
 8000f00:	e6ab      	b.n	8000c5a <__aeabi_dadd+0x19e>
 8000f02:	2580      	movs	r5, #128	@ 0x80
 8000f04:	042d      	lsls	r5, r5, #16
 8000f06:	432c      	orrs	r4, r5
 8000f08:	e695      	b.n	8000c36 <__aeabi_dadd+0x17a>
 8000f0a:	0011      	movs	r1, r2
 8000f0c:	4655      	mov	r5, sl
 8000f0e:	3920      	subs	r1, #32
 8000f10:	40cd      	lsrs	r5, r1
 8000f12:	46a9      	mov	r9, r5
 8000f14:	2a20      	cmp	r2, #32
 8000f16:	d006      	beq.n	8000f26 <__aeabi_dadd+0x46a>
 8000f18:	2140      	movs	r1, #64	@ 0x40
 8000f1a:	4653      	mov	r3, sl
 8000f1c:	1a8a      	subs	r2, r1, r2
 8000f1e:	4093      	lsls	r3, r2
 8000f20:	4662      	mov	r2, ip
 8000f22:	431a      	orrs	r2, r3
 8000f24:	4694      	mov	ip, r2
 8000f26:	4665      	mov	r5, ip
 8000f28:	1e6b      	subs	r3, r5, #1
 8000f2a:	419d      	sbcs	r5, r3
 8000f2c:	464b      	mov	r3, r9
 8000f2e:	431d      	orrs	r5, r3
 8000f30:	e612      	b.n	8000b58 <__aeabi_dadd+0x9c>
 8000f32:	0021      	movs	r1, r4
 8000f34:	4301      	orrs	r1, r0
 8000f36:	d100      	bne.n	8000f3a <__aeabi_dadd+0x47e>
 8000f38:	e0c4      	b.n	80010c4 <__aeabi_dadd+0x608>
 8000f3a:	1e51      	subs	r1, r2, #1
 8000f3c:	2a01      	cmp	r2, #1
 8000f3e:	d100      	bne.n	8000f42 <__aeabi_dadd+0x486>
 8000f40:	e0fb      	b.n	800113a <__aeabi_dadd+0x67e>
 8000f42:	4d8d      	ldr	r5, [pc, #564]	@ (8001178 <__aeabi_dadd+0x6bc>)
 8000f44:	42aa      	cmp	r2, r5
 8000f46:	d100      	bne.n	8000f4a <__aeabi_dadd+0x48e>
 8000f48:	e0b5      	b.n	80010b6 <__aeabi_dadd+0x5fa>
 8000f4a:	2501      	movs	r5, #1
 8000f4c:	2938      	cmp	r1, #56	@ 0x38
 8000f4e:	dd00      	ble.n	8000f52 <__aeabi_dadd+0x496>
 8000f50:	e741      	b.n	8000dd6 <__aeabi_dadd+0x31a>
 8000f52:	000a      	movs	r2, r1
 8000f54:	e72f      	b.n	8000db6 <__aeabi_dadd+0x2fa>
 8000f56:	4c89      	ldr	r4, [pc, #548]	@ (800117c <__aeabi_dadd+0x6c0>)
 8000f58:	1aff      	subs	r7, r7, r3
 8000f5a:	4014      	ands	r4, r2
 8000f5c:	0762      	lsls	r2, r4, #29
 8000f5e:	08e4      	lsrs	r4, r4, #3
 8000f60:	e76a      	b.n	8000e38 <__aeabi_dadd+0x37c>
 8000f62:	4a85      	ldr	r2, [pc, #532]	@ (8001178 <__aeabi_dadd+0x6bc>)
 8000f64:	4291      	cmp	r1, r2
 8000f66:	d100      	bne.n	8000f6a <__aeabi_dadd+0x4ae>
 8000f68:	e0e3      	b.n	8001132 <__aeabi_dadd+0x676>
 8000f6a:	4663      	mov	r3, ip
 8000f6c:	18c2      	adds	r2, r0, r3
 8000f6e:	4282      	cmp	r2, r0
 8000f70:	4180      	sbcs	r0, r0
 8000f72:	0023      	movs	r3, r4
 8000f74:	4240      	negs	r0, r0
 8000f76:	4453      	add	r3, sl
 8000f78:	181b      	adds	r3, r3, r0
 8000f7a:	07dd      	lsls	r5, r3, #31
 8000f7c:	085c      	lsrs	r4, r3, #1
 8000f7e:	2307      	movs	r3, #7
 8000f80:	0852      	lsrs	r2, r2, #1
 8000f82:	4315      	orrs	r5, r2
 8000f84:	000f      	movs	r7, r1
 8000f86:	402b      	ands	r3, r5
 8000f88:	e700      	b.n	8000d8c <__aeabi_dadd+0x2d0>
 8000f8a:	4663      	mov	r3, ip
 8000f8c:	1a1d      	subs	r5, r3, r0
 8000f8e:	45ac      	cmp	ip, r5
 8000f90:	4192      	sbcs	r2, r2
 8000f92:	4653      	mov	r3, sl
 8000f94:	4252      	negs	r2, r2
 8000f96:	1b1c      	subs	r4, r3, r4
 8000f98:	000e      	movs	r6, r1
 8000f9a:	4688      	mov	r8, r1
 8000f9c:	1aa4      	subs	r4, r4, r2
 8000f9e:	e5e5      	b.n	8000b6c <__aeabi_dadd+0xb0>
 8000fa0:	2d00      	cmp	r5, #0
 8000fa2:	d000      	beq.n	8000fa6 <__aeabi_dadd+0x4ea>
 8000fa4:	e091      	b.n	80010ca <__aeabi_dadd+0x60e>
 8000fa6:	2a00      	cmp	r2, #0
 8000fa8:	d138      	bne.n	800101c <__aeabi_dadd+0x560>
 8000faa:	2480      	movs	r4, #128	@ 0x80
 8000fac:	2600      	movs	r6, #0
 8000fae:	0324      	lsls	r4, r4, #12
 8000fb0:	e756      	b.n	8000e60 <__aeabi_dadd+0x3a4>
 8000fb2:	4663      	mov	r3, ip
 8000fb4:	18c5      	adds	r5, r0, r3
 8000fb6:	4285      	cmp	r5, r0
 8000fb8:	4180      	sbcs	r0, r0
 8000fba:	4454      	add	r4, sl
 8000fbc:	4240      	negs	r0, r0
 8000fbe:	1824      	adds	r4, r4, r0
 8000fc0:	2701      	movs	r7, #1
 8000fc2:	0223      	lsls	r3, r4, #8
 8000fc4:	d400      	bmi.n	8000fc8 <__aeabi_dadd+0x50c>
 8000fc6:	e6df      	b.n	8000d88 <__aeabi_dadd+0x2cc>
 8000fc8:	2702      	movs	r7, #2
 8000fca:	e687      	b.n	8000cdc <__aeabi_dadd+0x220>
 8000fcc:	4663      	mov	r3, ip
 8000fce:	1ac5      	subs	r5, r0, r3
 8000fd0:	42a8      	cmp	r0, r5
 8000fd2:	4180      	sbcs	r0, r0
 8000fd4:	4653      	mov	r3, sl
 8000fd6:	4240      	negs	r0, r0
 8000fd8:	1ae4      	subs	r4, r4, r3
 8000fda:	2701      	movs	r7, #1
 8000fdc:	1a24      	subs	r4, r4, r0
 8000fde:	e5c0      	b.n	8000b62 <__aeabi_dadd+0xa6>
 8000fe0:	0762      	lsls	r2, r4, #29
 8000fe2:	08c0      	lsrs	r0, r0, #3
 8000fe4:	4302      	orrs	r2, r0
 8000fe6:	08e4      	lsrs	r4, r4, #3
 8000fe8:	e736      	b.n	8000e58 <__aeabi_dadd+0x39c>
 8000fea:	0011      	movs	r1, r2
 8000fec:	4653      	mov	r3, sl
 8000fee:	3920      	subs	r1, #32
 8000ff0:	40cb      	lsrs	r3, r1
 8000ff2:	4699      	mov	r9, r3
 8000ff4:	2a20      	cmp	r2, #32
 8000ff6:	d006      	beq.n	8001006 <__aeabi_dadd+0x54a>
 8000ff8:	2140      	movs	r1, #64	@ 0x40
 8000ffa:	4653      	mov	r3, sl
 8000ffc:	1a8a      	subs	r2, r1, r2
 8000ffe:	4093      	lsls	r3, r2
 8001000:	4662      	mov	r2, ip
 8001002:	431a      	orrs	r2, r3
 8001004:	4694      	mov	ip, r2
 8001006:	4665      	mov	r5, ip
 8001008:	1e6b      	subs	r3, r5, #1
 800100a:	419d      	sbcs	r5, r3
 800100c:	464b      	mov	r3, r9
 800100e:	431d      	orrs	r5, r3
 8001010:	e659      	b.n	8000cc6 <__aeabi_dadd+0x20a>
 8001012:	0762      	lsls	r2, r4, #29
 8001014:	08c0      	lsrs	r0, r0, #3
 8001016:	4302      	orrs	r2, r0
 8001018:	08e4      	lsrs	r4, r4, #3
 800101a:	e70d      	b.n	8000e38 <__aeabi_dadd+0x37c>
 800101c:	4653      	mov	r3, sl
 800101e:	075a      	lsls	r2, r3, #29
 8001020:	4663      	mov	r3, ip
 8001022:	08d8      	lsrs	r0, r3, #3
 8001024:	4653      	mov	r3, sl
 8001026:	000e      	movs	r6, r1
 8001028:	4302      	orrs	r2, r0
 800102a:	08dc      	lsrs	r4, r3, #3
 800102c:	e714      	b.n	8000e58 <__aeabi_dadd+0x39c>
 800102e:	0015      	movs	r5, r2
 8001030:	0026      	movs	r6, r4
 8001032:	3d20      	subs	r5, #32
 8001034:	40ee      	lsrs	r6, r5
 8001036:	2a20      	cmp	r2, #32
 8001038:	d003      	beq.n	8001042 <__aeabi_dadd+0x586>
 800103a:	2540      	movs	r5, #64	@ 0x40
 800103c:	1aaa      	subs	r2, r5, r2
 800103e:	4094      	lsls	r4, r2
 8001040:	4320      	orrs	r0, r4
 8001042:	1e42      	subs	r2, r0, #1
 8001044:	4190      	sbcs	r0, r2
 8001046:	0005      	movs	r5, r0
 8001048:	4335      	orrs	r5, r6
 800104a:	e606      	b.n	8000c5a <__aeabi_dadd+0x19e>
 800104c:	2a00      	cmp	r2, #0
 800104e:	d07c      	beq.n	800114a <__aeabi_dadd+0x68e>
 8001050:	4662      	mov	r2, ip
 8001052:	4653      	mov	r3, sl
 8001054:	08c0      	lsrs	r0, r0, #3
 8001056:	431a      	orrs	r2, r3
 8001058:	d100      	bne.n	800105c <__aeabi_dadd+0x5a0>
 800105a:	e6fa      	b.n	8000e52 <__aeabi_dadd+0x396>
 800105c:	0762      	lsls	r2, r4, #29
 800105e:	4310      	orrs	r0, r2
 8001060:	2280      	movs	r2, #128	@ 0x80
 8001062:	08e4      	lsrs	r4, r4, #3
 8001064:	0312      	lsls	r2, r2, #12
 8001066:	4214      	tst	r4, r2
 8001068:	d008      	beq.n	800107c <__aeabi_dadd+0x5c0>
 800106a:	08d9      	lsrs	r1, r3, #3
 800106c:	4211      	tst	r1, r2
 800106e:	d105      	bne.n	800107c <__aeabi_dadd+0x5c0>
 8001070:	4663      	mov	r3, ip
 8001072:	08d8      	lsrs	r0, r3, #3
 8001074:	4653      	mov	r3, sl
 8001076:	000c      	movs	r4, r1
 8001078:	075b      	lsls	r3, r3, #29
 800107a:	4318      	orrs	r0, r3
 800107c:	0f42      	lsrs	r2, r0, #29
 800107e:	00c0      	lsls	r0, r0, #3
 8001080:	08c0      	lsrs	r0, r0, #3
 8001082:	0752      	lsls	r2, r2, #29
 8001084:	4302      	orrs	r2, r0
 8001086:	e6e7      	b.n	8000e58 <__aeabi_dadd+0x39c>
 8001088:	2a00      	cmp	r2, #0
 800108a:	d100      	bne.n	800108e <__aeabi_dadd+0x5d2>
 800108c:	e72d      	b.n	8000eea <__aeabi_dadd+0x42e>
 800108e:	4663      	mov	r3, ip
 8001090:	08d8      	lsrs	r0, r3, #3
 8001092:	4653      	mov	r3, sl
 8001094:	075a      	lsls	r2, r3, #29
 8001096:	000e      	movs	r6, r1
 8001098:	4302      	orrs	r2, r0
 800109a:	08dc      	lsrs	r4, r3, #3
 800109c:	e6cc      	b.n	8000e38 <__aeabi_dadd+0x37c>
 800109e:	4663      	mov	r3, ip
 80010a0:	1a1d      	subs	r5, r3, r0
 80010a2:	45ac      	cmp	ip, r5
 80010a4:	4192      	sbcs	r2, r2
 80010a6:	4653      	mov	r3, sl
 80010a8:	4252      	negs	r2, r2
 80010aa:	1b1c      	subs	r4, r3, r4
 80010ac:	000e      	movs	r6, r1
 80010ae:	4688      	mov	r8, r1
 80010b0:	1aa4      	subs	r4, r4, r2
 80010b2:	3701      	adds	r7, #1
 80010b4:	e555      	b.n	8000b62 <__aeabi_dadd+0xa6>
 80010b6:	4663      	mov	r3, ip
 80010b8:	08d9      	lsrs	r1, r3, #3
 80010ba:	4653      	mov	r3, sl
 80010bc:	075a      	lsls	r2, r3, #29
 80010be:	430a      	orrs	r2, r1
 80010c0:	08dc      	lsrs	r4, r3, #3
 80010c2:	e6c9      	b.n	8000e58 <__aeabi_dadd+0x39c>
 80010c4:	4660      	mov	r0, ip
 80010c6:	4654      	mov	r4, sl
 80010c8:	e6d4      	b.n	8000e74 <__aeabi_dadd+0x3b8>
 80010ca:	08c0      	lsrs	r0, r0, #3
 80010cc:	2a00      	cmp	r2, #0
 80010ce:	d100      	bne.n	80010d2 <__aeabi_dadd+0x616>
 80010d0:	e6bf      	b.n	8000e52 <__aeabi_dadd+0x396>
 80010d2:	0762      	lsls	r2, r4, #29
 80010d4:	4310      	orrs	r0, r2
 80010d6:	2280      	movs	r2, #128	@ 0x80
 80010d8:	08e4      	lsrs	r4, r4, #3
 80010da:	0312      	lsls	r2, r2, #12
 80010dc:	4214      	tst	r4, r2
 80010de:	d0cd      	beq.n	800107c <__aeabi_dadd+0x5c0>
 80010e0:	08dd      	lsrs	r5, r3, #3
 80010e2:	4215      	tst	r5, r2
 80010e4:	d1ca      	bne.n	800107c <__aeabi_dadd+0x5c0>
 80010e6:	4663      	mov	r3, ip
 80010e8:	08d8      	lsrs	r0, r3, #3
 80010ea:	4653      	mov	r3, sl
 80010ec:	075b      	lsls	r3, r3, #29
 80010ee:	000e      	movs	r6, r1
 80010f0:	002c      	movs	r4, r5
 80010f2:	4318      	orrs	r0, r3
 80010f4:	e7c2      	b.n	800107c <__aeabi_dadd+0x5c0>
 80010f6:	4663      	mov	r3, ip
 80010f8:	08d9      	lsrs	r1, r3, #3
 80010fa:	4653      	mov	r3, sl
 80010fc:	075a      	lsls	r2, r3, #29
 80010fe:	430a      	orrs	r2, r1
 8001100:	08dc      	lsrs	r4, r3, #3
 8001102:	e699      	b.n	8000e38 <__aeabi_dadd+0x37c>
 8001104:	4663      	mov	r3, ip
 8001106:	08d8      	lsrs	r0, r3, #3
 8001108:	4653      	mov	r3, sl
 800110a:	075a      	lsls	r2, r3, #29
 800110c:	000e      	movs	r6, r1
 800110e:	4302      	orrs	r2, r0
 8001110:	08dc      	lsrs	r4, r3, #3
 8001112:	e6a1      	b.n	8000e58 <__aeabi_dadd+0x39c>
 8001114:	0011      	movs	r1, r2
 8001116:	0027      	movs	r7, r4
 8001118:	3920      	subs	r1, #32
 800111a:	40cf      	lsrs	r7, r1
 800111c:	2a20      	cmp	r2, #32
 800111e:	d003      	beq.n	8001128 <__aeabi_dadd+0x66c>
 8001120:	2140      	movs	r1, #64	@ 0x40
 8001122:	1a8a      	subs	r2, r1, r2
 8001124:	4094      	lsls	r4, r2
 8001126:	4320      	orrs	r0, r4
 8001128:	1e42      	subs	r2, r0, #1
 800112a:	4190      	sbcs	r0, r2
 800112c:	0005      	movs	r5, r0
 800112e:	433d      	orrs	r5, r7
 8001130:	e651      	b.n	8000dd6 <__aeabi_dadd+0x31a>
 8001132:	000c      	movs	r4, r1
 8001134:	2500      	movs	r5, #0
 8001136:	2200      	movs	r2, #0
 8001138:	e558      	b.n	8000bec <__aeabi_dadd+0x130>
 800113a:	4460      	add	r0, ip
 800113c:	4560      	cmp	r0, ip
 800113e:	4192      	sbcs	r2, r2
 8001140:	4454      	add	r4, sl
 8001142:	4252      	negs	r2, r2
 8001144:	0005      	movs	r5, r0
 8001146:	18a4      	adds	r4, r4, r2
 8001148:	e73a      	b.n	8000fc0 <__aeabi_dadd+0x504>
 800114a:	4653      	mov	r3, sl
 800114c:	075a      	lsls	r2, r3, #29
 800114e:	4663      	mov	r3, ip
 8001150:	08d9      	lsrs	r1, r3, #3
 8001152:	4653      	mov	r3, sl
 8001154:	430a      	orrs	r2, r1
 8001156:	08dc      	lsrs	r4, r3, #3
 8001158:	e67e      	b.n	8000e58 <__aeabi_dadd+0x39c>
 800115a:	001a      	movs	r2, r3
 800115c:	001c      	movs	r4, r3
 800115e:	432a      	orrs	r2, r5
 8001160:	d000      	beq.n	8001164 <__aeabi_dadd+0x6a8>
 8001162:	e6ab      	b.n	8000ebc <__aeabi_dadd+0x400>
 8001164:	e6c1      	b.n	8000eea <__aeabi_dadd+0x42e>
 8001166:	2120      	movs	r1, #32
 8001168:	2500      	movs	r5, #0
 800116a:	1a09      	subs	r1, r1, r0
 800116c:	e519      	b.n	8000ba2 <__aeabi_dadd+0xe6>
 800116e:	2200      	movs	r2, #0
 8001170:	2500      	movs	r5, #0
 8001172:	4c01      	ldr	r4, [pc, #4]	@ (8001178 <__aeabi_dadd+0x6bc>)
 8001174:	e53a      	b.n	8000bec <__aeabi_dadd+0x130>
 8001176:	46c0      	nop			@ (mov r8, r8)
 8001178:	000007ff 	.word	0x000007ff
 800117c:	ff7fffff 	.word	0xff7fffff
 8001180:	000007fe 	.word	0x000007fe

08001184 <__aeabi_ddiv>:
 8001184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001186:	46de      	mov	lr, fp
 8001188:	4645      	mov	r5, r8
 800118a:	4657      	mov	r7, sl
 800118c:	464e      	mov	r6, r9
 800118e:	b5e0      	push	{r5, r6, r7, lr}
 8001190:	b087      	sub	sp, #28
 8001192:	9200      	str	r2, [sp, #0]
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	030b      	lsls	r3, r1, #12
 8001198:	0b1b      	lsrs	r3, r3, #12
 800119a:	469b      	mov	fp, r3
 800119c:	0fca      	lsrs	r2, r1, #31
 800119e:	004b      	lsls	r3, r1, #1
 80011a0:	0004      	movs	r4, r0
 80011a2:	4680      	mov	r8, r0
 80011a4:	0d5b      	lsrs	r3, r3, #21
 80011a6:	9202      	str	r2, [sp, #8]
 80011a8:	d100      	bne.n	80011ac <__aeabi_ddiv+0x28>
 80011aa:	e16a      	b.n	8001482 <__aeabi_ddiv+0x2fe>
 80011ac:	4ad4      	ldr	r2, [pc, #848]	@ (8001500 <__aeabi_ddiv+0x37c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d100      	bne.n	80011b4 <__aeabi_ddiv+0x30>
 80011b2:	e18c      	b.n	80014ce <__aeabi_ddiv+0x34a>
 80011b4:	4659      	mov	r1, fp
 80011b6:	0f42      	lsrs	r2, r0, #29
 80011b8:	00c9      	lsls	r1, r1, #3
 80011ba:	430a      	orrs	r2, r1
 80011bc:	2180      	movs	r1, #128	@ 0x80
 80011be:	0409      	lsls	r1, r1, #16
 80011c0:	4311      	orrs	r1, r2
 80011c2:	00c2      	lsls	r2, r0, #3
 80011c4:	4690      	mov	r8, r2
 80011c6:	4acf      	ldr	r2, [pc, #828]	@ (8001504 <__aeabi_ddiv+0x380>)
 80011c8:	4689      	mov	r9, r1
 80011ca:	4692      	mov	sl, r2
 80011cc:	449a      	add	sl, r3
 80011ce:	2300      	movs	r3, #0
 80011d0:	2400      	movs	r4, #0
 80011d2:	9303      	str	r3, [sp, #12]
 80011d4:	9e00      	ldr	r6, [sp, #0]
 80011d6:	9f01      	ldr	r7, [sp, #4]
 80011d8:	033b      	lsls	r3, r7, #12
 80011da:	0b1b      	lsrs	r3, r3, #12
 80011dc:	469b      	mov	fp, r3
 80011de:	007b      	lsls	r3, r7, #1
 80011e0:	0030      	movs	r0, r6
 80011e2:	0d5b      	lsrs	r3, r3, #21
 80011e4:	0ffd      	lsrs	r5, r7, #31
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d100      	bne.n	80011ec <__aeabi_ddiv+0x68>
 80011ea:	e128      	b.n	800143e <__aeabi_ddiv+0x2ba>
 80011ec:	4ac4      	ldr	r2, [pc, #784]	@ (8001500 <__aeabi_ddiv+0x37c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d100      	bne.n	80011f4 <__aeabi_ddiv+0x70>
 80011f2:	e177      	b.n	80014e4 <__aeabi_ddiv+0x360>
 80011f4:	4659      	mov	r1, fp
 80011f6:	0f72      	lsrs	r2, r6, #29
 80011f8:	00c9      	lsls	r1, r1, #3
 80011fa:	430a      	orrs	r2, r1
 80011fc:	2180      	movs	r1, #128	@ 0x80
 80011fe:	0409      	lsls	r1, r1, #16
 8001200:	4311      	orrs	r1, r2
 8001202:	468b      	mov	fp, r1
 8001204:	49bf      	ldr	r1, [pc, #764]	@ (8001504 <__aeabi_ddiv+0x380>)
 8001206:	00f2      	lsls	r2, r6, #3
 8001208:	468c      	mov	ip, r1
 800120a:	4651      	mov	r1, sl
 800120c:	4463      	add	r3, ip
 800120e:	1acb      	subs	r3, r1, r3
 8001210:	469a      	mov	sl, r3
 8001212:	2300      	movs	r3, #0
 8001214:	9e02      	ldr	r6, [sp, #8]
 8001216:	406e      	eors	r6, r5
 8001218:	2c0f      	cmp	r4, #15
 800121a:	d827      	bhi.n	800126c <__aeabi_ddiv+0xe8>
 800121c:	49ba      	ldr	r1, [pc, #744]	@ (8001508 <__aeabi_ddiv+0x384>)
 800121e:	00a4      	lsls	r4, r4, #2
 8001220:	5909      	ldr	r1, [r1, r4]
 8001222:	468f      	mov	pc, r1
 8001224:	46cb      	mov	fp, r9
 8001226:	4642      	mov	r2, r8
 8001228:	9e02      	ldr	r6, [sp, #8]
 800122a:	9b03      	ldr	r3, [sp, #12]
 800122c:	2b02      	cmp	r3, #2
 800122e:	d016      	beq.n	800125e <__aeabi_ddiv+0xda>
 8001230:	2b03      	cmp	r3, #3
 8001232:	d100      	bne.n	8001236 <__aeabi_ddiv+0xb2>
 8001234:	e2a6      	b.n	8001784 <__aeabi_ddiv+0x600>
 8001236:	2b01      	cmp	r3, #1
 8001238:	d000      	beq.n	800123c <__aeabi_ddiv+0xb8>
 800123a:	e0df      	b.n	80013fc <__aeabi_ddiv+0x278>
 800123c:	2200      	movs	r2, #0
 800123e:	2300      	movs	r3, #0
 8001240:	2400      	movs	r4, #0
 8001242:	4690      	mov	r8, r2
 8001244:	051b      	lsls	r3, r3, #20
 8001246:	4323      	orrs	r3, r4
 8001248:	07f6      	lsls	r6, r6, #31
 800124a:	4333      	orrs	r3, r6
 800124c:	4640      	mov	r0, r8
 800124e:	0019      	movs	r1, r3
 8001250:	b007      	add	sp, #28
 8001252:	bcf0      	pop	{r4, r5, r6, r7}
 8001254:	46bb      	mov	fp, r7
 8001256:	46b2      	mov	sl, r6
 8001258:	46a9      	mov	r9, r5
 800125a:	46a0      	mov	r8, r4
 800125c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800125e:	2200      	movs	r2, #0
 8001260:	2400      	movs	r4, #0
 8001262:	4690      	mov	r8, r2
 8001264:	4ba6      	ldr	r3, [pc, #664]	@ (8001500 <__aeabi_ddiv+0x37c>)
 8001266:	e7ed      	b.n	8001244 <__aeabi_ddiv+0xc0>
 8001268:	002e      	movs	r6, r5
 800126a:	e7df      	b.n	800122c <__aeabi_ddiv+0xa8>
 800126c:	45cb      	cmp	fp, r9
 800126e:	d200      	bcs.n	8001272 <__aeabi_ddiv+0xee>
 8001270:	e1d4      	b.n	800161c <__aeabi_ddiv+0x498>
 8001272:	d100      	bne.n	8001276 <__aeabi_ddiv+0xf2>
 8001274:	e1cf      	b.n	8001616 <__aeabi_ddiv+0x492>
 8001276:	2301      	movs	r3, #1
 8001278:	425b      	negs	r3, r3
 800127a:	469c      	mov	ip, r3
 800127c:	4644      	mov	r4, r8
 800127e:	4648      	mov	r0, r9
 8001280:	2700      	movs	r7, #0
 8001282:	44e2      	add	sl, ip
 8001284:	465b      	mov	r3, fp
 8001286:	0e15      	lsrs	r5, r2, #24
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	431d      	orrs	r5, r3
 800128c:	0c19      	lsrs	r1, r3, #16
 800128e:	042b      	lsls	r3, r5, #16
 8001290:	0212      	lsls	r2, r2, #8
 8001292:	9500      	str	r5, [sp, #0]
 8001294:	0c1d      	lsrs	r5, r3, #16
 8001296:	4691      	mov	r9, r2
 8001298:	9102      	str	r1, [sp, #8]
 800129a:	9503      	str	r5, [sp, #12]
 800129c:	f7fe ffd6 	bl	800024c <__aeabi_uidivmod>
 80012a0:	0002      	movs	r2, r0
 80012a2:	436a      	muls	r2, r5
 80012a4:	040b      	lsls	r3, r1, #16
 80012a6:	0c21      	lsrs	r1, r4, #16
 80012a8:	4680      	mov	r8, r0
 80012aa:	4319      	orrs	r1, r3
 80012ac:	428a      	cmp	r2, r1
 80012ae:	d909      	bls.n	80012c4 <__aeabi_ddiv+0x140>
 80012b0:	9d00      	ldr	r5, [sp, #0]
 80012b2:	2301      	movs	r3, #1
 80012b4:	46ac      	mov	ip, r5
 80012b6:	425b      	negs	r3, r3
 80012b8:	4461      	add	r1, ip
 80012ba:	469c      	mov	ip, r3
 80012bc:	44e0      	add	r8, ip
 80012be:	428d      	cmp	r5, r1
 80012c0:	d800      	bhi.n	80012c4 <__aeabi_ddiv+0x140>
 80012c2:	e1fb      	b.n	80016bc <__aeabi_ddiv+0x538>
 80012c4:	1a88      	subs	r0, r1, r2
 80012c6:	9902      	ldr	r1, [sp, #8]
 80012c8:	f7fe ffc0 	bl	800024c <__aeabi_uidivmod>
 80012cc:	9a03      	ldr	r2, [sp, #12]
 80012ce:	0424      	lsls	r4, r4, #16
 80012d0:	4342      	muls	r2, r0
 80012d2:	0409      	lsls	r1, r1, #16
 80012d4:	0c24      	lsrs	r4, r4, #16
 80012d6:	0003      	movs	r3, r0
 80012d8:	430c      	orrs	r4, r1
 80012da:	42a2      	cmp	r2, r4
 80012dc:	d906      	bls.n	80012ec <__aeabi_ddiv+0x168>
 80012de:	9900      	ldr	r1, [sp, #0]
 80012e0:	3b01      	subs	r3, #1
 80012e2:	468c      	mov	ip, r1
 80012e4:	4464      	add	r4, ip
 80012e6:	42a1      	cmp	r1, r4
 80012e8:	d800      	bhi.n	80012ec <__aeabi_ddiv+0x168>
 80012ea:	e1e1      	b.n	80016b0 <__aeabi_ddiv+0x52c>
 80012ec:	1aa0      	subs	r0, r4, r2
 80012ee:	4642      	mov	r2, r8
 80012f0:	0412      	lsls	r2, r2, #16
 80012f2:	431a      	orrs	r2, r3
 80012f4:	4693      	mov	fp, r2
 80012f6:	464b      	mov	r3, r9
 80012f8:	4659      	mov	r1, fp
 80012fa:	0c1b      	lsrs	r3, r3, #16
 80012fc:	001d      	movs	r5, r3
 80012fe:	9304      	str	r3, [sp, #16]
 8001300:	040b      	lsls	r3, r1, #16
 8001302:	4649      	mov	r1, r9
 8001304:	0409      	lsls	r1, r1, #16
 8001306:	0c09      	lsrs	r1, r1, #16
 8001308:	000c      	movs	r4, r1
 800130a:	0c1b      	lsrs	r3, r3, #16
 800130c:	435c      	muls	r4, r3
 800130e:	0c12      	lsrs	r2, r2, #16
 8001310:	436b      	muls	r3, r5
 8001312:	4688      	mov	r8, r1
 8001314:	4351      	muls	r1, r2
 8001316:	436a      	muls	r2, r5
 8001318:	0c25      	lsrs	r5, r4, #16
 800131a:	46ac      	mov	ip, r5
 800131c:	185b      	adds	r3, r3, r1
 800131e:	4463      	add	r3, ip
 8001320:	4299      	cmp	r1, r3
 8001322:	d903      	bls.n	800132c <__aeabi_ddiv+0x1a8>
 8001324:	2180      	movs	r1, #128	@ 0x80
 8001326:	0249      	lsls	r1, r1, #9
 8001328:	468c      	mov	ip, r1
 800132a:	4462      	add	r2, ip
 800132c:	0c19      	lsrs	r1, r3, #16
 800132e:	0424      	lsls	r4, r4, #16
 8001330:	041b      	lsls	r3, r3, #16
 8001332:	0c24      	lsrs	r4, r4, #16
 8001334:	188a      	adds	r2, r1, r2
 8001336:	191c      	adds	r4, r3, r4
 8001338:	4290      	cmp	r0, r2
 800133a:	d302      	bcc.n	8001342 <__aeabi_ddiv+0x1be>
 800133c:	d116      	bne.n	800136c <__aeabi_ddiv+0x1e8>
 800133e:	42a7      	cmp	r7, r4
 8001340:	d214      	bcs.n	800136c <__aeabi_ddiv+0x1e8>
 8001342:	465b      	mov	r3, fp
 8001344:	9d00      	ldr	r5, [sp, #0]
 8001346:	3b01      	subs	r3, #1
 8001348:	444f      	add	r7, r9
 800134a:	9305      	str	r3, [sp, #20]
 800134c:	454f      	cmp	r7, r9
 800134e:	419b      	sbcs	r3, r3
 8001350:	46ac      	mov	ip, r5
 8001352:	425b      	negs	r3, r3
 8001354:	4463      	add	r3, ip
 8001356:	18c0      	adds	r0, r0, r3
 8001358:	4285      	cmp	r5, r0
 800135a:	d300      	bcc.n	800135e <__aeabi_ddiv+0x1da>
 800135c:	e1a1      	b.n	80016a2 <__aeabi_ddiv+0x51e>
 800135e:	4282      	cmp	r2, r0
 8001360:	d900      	bls.n	8001364 <__aeabi_ddiv+0x1e0>
 8001362:	e1f6      	b.n	8001752 <__aeabi_ddiv+0x5ce>
 8001364:	d100      	bne.n	8001368 <__aeabi_ddiv+0x1e4>
 8001366:	e1f1      	b.n	800174c <__aeabi_ddiv+0x5c8>
 8001368:	9b05      	ldr	r3, [sp, #20]
 800136a:	469b      	mov	fp, r3
 800136c:	1b3c      	subs	r4, r7, r4
 800136e:	42a7      	cmp	r7, r4
 8001370:	41bf      	sbcs	r7, r7
 8001372:	9d00      	ldr	r5, [sp, #0]
 8001374:	1a80      	subs	r0, r0, r2
 8001376:	427f      	negs	r7, r7
 8001378:	1bc0      	subs	r0, r0, r7
 800137a:	4285      	cmp	r5, r0
 800137c:	d100      	bne.n	8001380 <__aeabi_ddiv+0x1fc>
 800137e:	e1d0      	b.n	8001722 <__aeabi_ddiv+0x59e>
 8001380:	9902      	ldr	r1, [sp, #8]
 8001382:	f7fe ff63 	bl	800024c <__aeabi_uidivmod>
 8001386:	9a03      	ldr	r2, [sp, #12]
 8001388:	040b      	lsls	r3, r1, #16
 800138a:	4342      	muls	r2, r0
 800138c:	0c21      	lsrs	r1, r4, #16
 800138e:	0007      	movs	r7, r0
 8001390:	4319      	orrs	r1, r3
 8001392:	428a      	cmp	r2, r1
 8001394:	d900      	bls.n	8001398 <__aeabi_ddiv+0x214>
 8001396:	e178      	b.n	800168a <__aeabi_ddiv+0x506>
 8001398:	1a88      	subs	r0, r1, r2
 800139a:	9902      	ldr	r1, [sp, #8]
 800139c:	f7fe ff56 	bl	800024c <__aeabi_uidivmod>
 80013a0:	9a03      	ldr	r2, [sp, #12]
 80013a2:	0424      	lsls	r4, r4, #16
 80013a4:	4342      	muls	r2, r0
 80013a6:	0409      	lsls	r1, r1, #16
 80013a8:	0c24      	lsrs	r4, r4, #16
 80013aa:	0003      	movs	r3, r0
 80013ac:	430c      	orrs	r4, r1
 80013ae:	42a2      	cmp	r2, r4
 80013b0:	d900      	bls.n	80013b4 <__aeabi_ddiv+0x230>
 80013b2:	e15d      	b.n	8001670 <__aeabi_ddiv+0x4ec>
 80013b4:	4641      	mov	r1, r8
 80013b6:	1aa4      	subs	r4, r4, r2
 80013b8:	043a      	lsls	r2, r7, #16
 80013ba:	431a      	orrs	r2, r3
 80013bc:	9d04      	ldr	r5, [sp, #16]
 80013be:	0413      	lsls	r3, r2, #16
 80013c0:	0c1b      	lsrs	r3, r3, #16
 80013c2:	4359      	muls	r1, r3
 80013c4:	4647      	mov	r7, r8
 80013c6:	436b      	muls	r3, r5
 80013c8:	469c      	mov	ip, r3
 80013ca:	0c10      	lsrs	r0, r2, #16
 80013cc:	4347      	muls	r7, r0
 80013ce:	0c0b      	lsrs	r3, r1, #16
 80013d0:	44bc      	add	ip, r7
 80013d2:	4463      	add	r3, ip
 80013d4:	4368      	muls	r0, r5
 80013d6:	429f      	cmp	r7, r3
 80013d8:	d903      	bls.n	80013e2 <__aeabi_ddiv+0x25e>
 80013da:	2580      	movs	r5, #128	@ 0x80
 80013dc:	026d      	lsls	r5, r5, #9
 80013de:	46ac      	mov	ip, r5
 80013e0:	4460      	add	r0, ip
 80013e2:	0c1f      	lsrs	r7, r3, #16
 80013e4:	0409      	lsls	r1, r1, #16
 80013e6:	041b      	lsls	r3, r3, #16
 80013e8:	0c09      	lsrs	r1, r1, #16
 80013ea:	183f      	adds	r7, r7, r0
 80013ec:	185b      	adds	r3, r3, r1
 80013ee:	42bc      	cmp	r4, r7
 80013f0:	d200      	bcs.n	80013f4 <__aeabi_ddiv+0x270>
 80013f2:	e102      	b.n	80015fa <__aeabi_ddiv+0x476>
 80013f4:	d100      	bne.n	80013f8 <__aeabi_ddiv+0x274>
 80013f6:	e0fd      	b.n	80015f4 <__aeabi_ddiv+0x470>
 80013f8:	2301      	movs	r3, #1
 80013fa:	431a      	orrs	r2, r3
 80013fc:	4b43      	ldr	r3, [pc, #268]	@ (800150c <__aeabi_ddiv+0x388>)
 80013fe:	4453      	add	r3, sl
 8001400:	2b00      	cmp	r3, #0
 8001402:	dc00      	bgt.n	8001406 <__aeabi_ddiv+0x282>
 8001404:	e0ae      	b.n	8001564 <__aeabi_ddiv+0x3e0>
 8001406:	0751      	lsls	r1, r2, #29
 8001408:	d000      	beq.n	800140c <__aeabi_ddiv+0x288>
 800140a:	e198      	b.n	800173e <__aeabi_ddiv+0x5ba>
 800140c:	4659      	mov	r1, fp
 800140e:	01c9      	lsls	r1, r1, #7
 8001410:	d506      	bpl.n	8001420 <__aeabi_ddiv+0x29c>
 8001412:	4659      	mov	r1, fp
 8001414:	4b3e      	ldr	r3, [pc, #248]	@ (8001510 <__aeabi_ddiv+0x38c>)
 8001416:	4019      	ands	r1, r3
 8001418:	2380      	movs	r3, #128	@ 0x80
 800141a:	468b      	mov	fp, r1
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	4453      	add	r3, sl
 8001420:	493c      	ldr	r1, [pc, #240]	@ (8001514 <__aeabi_ddiv+0x390>)
 8001422:	428b      	cmp	r3, r1
 8001424:	dd00      	ble.n	8001428 <__aeabi_ddiv+0x2a4>
 8001426:	e71a      	b.n	800125e <__aeabi_ddiv+0xda>
 8001428:	4659      	mov	r1, fp
 800142a:	08d2      	lsrs	r2, r2, #3
 800142c:	0749      	lsls	r1, r1, #29
 800142e:	4311      	orrs	r1, r2
 8001430:	465a      	mov	r2, fp
 8001432:	055b      	lsls	r3, r3, #21
 8001434:	0254      	lsls	r4, r2, #9
 8001436:	4688      	mov	r8, r1
 8001438:	0b24      	lsrs	r4, r4, #12
 800143a:	0d5b      	lsrs	r3, r3, #21
 800143c:	e702      	b.n	8001244 <__aeabi_ddiv+0xc0>
 800143e:	465a      	mov	r2, fp
 8001440:	9b00      	ldr	r3, [sp, #0]
 8001442:	431a      	orrs	r2, r3
 8001444:	d100      	bne.n	8001448 <__aeabi_ddiv+0x2c4>
 8001446:	e07e      	b.n	8001546 <__aeabi_ddiv+0x3c2>
 8001448:	465b      	mov	r3, fp
 800144a:	2b00      	cmp	r3, #0
 800144c:	d100      	bne.n	8001450 <__aeabi_ddiv+0x2cc>
 800144e:	e100      	b.n	8001652 <__aeabi_ddiv+0x4ce>
 8001450:	4658      	mov	r0, fp
 8001452:	f001 fa37 	bl	80028c4 <__clzsi2>
 8001456:	0002      	movs	r2, r0
 8001458:	0003      	movs	r3, r0
 800145a:	3a0b      	subs	r2, #11
 800145c:	271d      	movs	r7, #29
 800145e:	9e00      	ldr	r6, [sp, #0]
 8001460:	1aba      	subs	r2, r7, r2
 8001462:	0019      	movs	r1, r3
 8001464:	4658      	mov	r0, fp
 8001466:	40d6      	lsrs	r6, r2
 8001468:	3908      	subs	r1, #8
 800146a:	4088      	lsls	r0, r1
 800146c:	0032      	movs	r2, r6
 800146e:	4302      	orrs	r2, r0
 8001470:	4693      	mov	fp, r2
 8001472:	9a00      	ldr	r2, [sp, #0]
 8001474:	408a      	lsls	r2, r1
 8001476:	4928      	ldr	r1, [pc, #160]	@ (8001518 <__aeabi_ddiv+0x394>)
 8001478:	4453      	add	r3, sl
 800147a:	468a      	mov	sl, r1
 800147c:	449a      	add	sl, r3
 800147e:	2300      	movs	r3, #0
 8001480:	e6c8      	b.n	8001214 <__aeabi_ddiv+0x90>
 8001482:	465b      	mov	r3, fp
 8001484:	4303      	orrs	r3, r0
 8001486:	4699      	mov	r9, r3
 8001488:	d056      	beq.n	8001538 <__aeabi_ddiv+0x3b4>
 800148a:	465b      	mov	r3, fp
 800148c:	2b00      	cmp	r3, #0
 800148e:	d100      	bne.n	8001492 <__aeabi_ddiv+0x30e>
 8001490:	e0cd      	b.n	800162e <__aeabi_ddiv+0x4aa>
 8001492:	4658      	mov	r0, fp
 8001494:	f001 fa16 	bl	80028c4 <__clzsi2>
 8001498:	230b      	movs	r3, #11
 800149a:	425b      	negs	r3, r3
 800149c:	469c      	mov	ip, r3
 800149e:	0002      	movs	r2, r0
 80014a0:	4484      	add	ip, r0
 80014a2:	4666      	mov	r6, ip
 80014a4:	231d      	movs	r3, #29
 80014a6:	1b9b      	subs	r3, r3, r6
 80014a8:	0026      	movs	r6, r4
 80014aa:	0011      	movs	r1, r2
 80014ac:	4658      	mov	r0, fp
 80014ae:	40de      	lsrs	r6, r3
 80014b0:	3908      	subs	r1, #8
 80014b2:	4088      	lsls	r0, r1
 80014b4:	0033      	movs	r3, r6
 80014b6:	4303      	orrs	r3, r0
 80014b8:	4699      	mov	r9, r3
 80014ba:	0023      	movs	r3, r4
 80014bc:	408b      	lsls	r3, r1
 80014be:	4698      	mov	r8, r3
 80014c0:	4b16      	ldr	r3, [pc, #88]	@ (800151c <__aeabi_ddiv+0x398>)
 80014c2:	2400      	movs	r4, #0
 80014c4:	1a9b      	subs	r3, r3, r2
 80014c6:	469a      	mov	sl, r3
 80014c8:	2300      	movs	r3, #0
 80014ca:	9303      	str	r3, [sp, #12]
 80014cc:	e682      	b.n	80011d4 <__aeabi_ddiv+0x50>
 80014ce:	465a      	mov	r2, fp
 80014d0:	4302      	orrs	r2, r0
 80014d2:	4691      	mov	r9, r2
 80014d4:	d12a      	bne.n	800152c <__aeabi_ddiv+0x3a8>
 80014d6:	2200      	movs	r2, #0
 80014d8:	469a      	mov	sl, r3
 80014da:	2302      	movs	r3, #2
 80014dc:	4690      	mov	r8, r2
 80014de:	2408      	movs	r4, #8
 80014e0:	9303      	str	r3, [sp, #12]
 80014e2:	e677      	b.n	80011d4 <__aeabi_ddiv+0x50>
 80014e4:	465a      	mov	r2, fp
 80014e6:	9b00      	ldr	r3, [sp, #0]
 80014e8:	431a      	orrs	r2, r3
 80014ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001520 <__aeabi_ddiv+0x39c>)
 80014ec:	469c      	mov	ip, r3
 80014ee:	44e2      	add	sl, ip
 80014f0:	2a00      	cmp	r2, #0
 80014f2:	d117      	bne.n	8001524 <__aeabi_ddiv+0x3a0>
 80014f4:	2302      	movs	r3, #2
 80014f6:	431c      	orrs	r4, r3
 80014f8:	2300      	movs	r3, #0
 80014fa:	469b      	mov	fp, r3
 80014fc:	3302      	adds	r3, #2
 80014fe:	e689      	b.n	8001214 <__aeabi_ddiv+0x90>
 8001500:	000007ff 	.word	0x000007ff
 8001504:	fffffc01 	.word	0xfffffc01
 8001508:	08009a2c 	.word	0x08009a2c
 800150c:	000003ff 	.word	0x000003ff
 8001510:	feffffff 	.word	0xfeffffff
 8001514:	000007fe 	.word	0x000007fe
 8001518:	000003f3 	.word	0x000003f3
 800151c:	fffffc0d 	.word	0xfffffc0d
 8001520:	fffff801 	.word	0xfffff801
 8001524:	2303      	movs	r3, #3
 8001526:	0032      	movs	r2, r6
 8001528:	431c      	orrs	r4, r3
 800152a:	e673      	b.n	8001214 <__aeabi_ddiv+0x90>
 800152c:	469a      	mov	sl, r3
 800152e:	2303      	movs	r3, #3
 8001530:	46d9      	mov	r9, fp
 8001532:	240c      	movs	r4, #12
 8001534:	9303      	str	r3, [sp, #12]
 8001536:	e64d      	b.n	80011d4 <__aeabi_ddiv+0x50>
 8001538:	2300      	movs	r3, #0
 800153a:	4698      	mov	r8, r3
 800153c:	469a      	mov	sl, r3
 800153e:	3301      	adds	r3, #1
 8001540:	2404      	movs	r4, #4
 8001542:	9303      	str	r3, [sp, #12]
 8001544:	e646      	b.n	80011d4 <__aeabi_ddiv+0x50>
 8001546:	2301      	movs	r3, #1
 8001548:	431c      	orrs	r4, r3
 800154a:	2300      	movs	r3, #0
 800154c:	469b      	mov	fp, r3
 800154e:	3301      	adds	r3, #1
 8001550:	e660      	b.n	8001214 <__aeabi_ddiv+0x90>
 8001552:	2300      	movs	r3, #0
 8001554:	2480      	movs	r4, #128	@ 0x80
 8001556:	4698      	mov	r8, r3
 8001558:	2600      	movs	r6, #0
 800155a:	4b92      	ldr	r3, [pc, #584]	@ (80017a4 <__aeabi_ddiv+0x620>)
 800155c:	0324      	lsls	r4, r4, #12
 800155e:	e671      	b.n	8001244 <__aeabi_ddiv+0xc0>
 8001560:	2201      	movs	r2, #1
 8001562:	4252      	negs	r2, r2
 8001564:	2101      	movs	r1, #1
 8001566:	1ac9      	subs	r1, r1, r3
 8001568:	2938      	cmp	r1, #56	@ 0x38
 800156a:	dd00      	ble.n	800156e <__aeabi_ddiv+0x3ea>
 800156c:	e666      	b.n	800123c <__aeabi_ddiv+0xb8>
 800156e:	291f      	cmp	r1, #31
 8001570:	dc00      	bgt.n	8001574 <__aeabi_ddiv+0x3f0>
 8001572:	e0ab      	b.n	80016cc <__aeabi_ddiv+0x548>
 8001574:	201f      	movs	r0, #31
 8001576:	4240      	negs	r0, r0
 8001578:	1ac3      	subs	r3, r0, r3
 800157a:	4658      	mov	r0, fp
 800157c:	40d8      	lsrs	r0, r3
 800157e:	0003      	movs	r3, r0
 8001580:	2920      	cmp	r1, #32
 8001582:	d004      	beq.n	800158e <__aeabi_ddiv+0x40a>
 8001584:	4658      	mov	r0, fp
 8001586:	4988      	ldr	r1, [pc, #544]	@ (80017a8 <__aeabi_ddiv+0x624>)
 8001588:	4451      	add	r1, sl
 800158a:	4088      	lsls	r0, r1
 800158c:	4302      	orrs	r2, r0
 800158e:	1e51      	subs	r1, r2, #1
 8001590:	418a      	sbcs	r2, r1
 8001592:	431a      	orrs	r2, r3
 8001594:	2307      	movs	r3, #7
 8001596:	0019      	movs	r1, r3
 8001598:	2400      	movs	r4, #0
 800159a:	4011      	ands	r1, r2
 800159c:	4213      	tst	r3, r2
 800159e:	d00c      	beq.n	80015ba <__aeabi_ddiv+0x436>
 80015a0:	230f      	movs	r3, #15
 80015a2:	4013      	ands	r3, r2
 80015a4:	2b04      	cmp	r3, #4
 80015a6:	d100      	bne.n	80015aa <__aeabi_ddiv+0x426>
 80015a8:	e0f9      	b.n	800179e <__aeabi_ddiv+0x61a>
 80015aa:	1d11      	adds	r1, r2, #4
 80015ac:	4291      	cmp	r1, r2
 80015ae:	419b      	sbcs	r3, r3
 80015b0:	000a      	movs	r2, r1
 80015b2:	425b      	negs	r3, r3
 80015b4:	0759      	lsls	r1, r3, #29
 80015b6:	025b      	lsls	r3, r3, #9
 80015b8:	0b1c      	lsrs	r4, r3, #12
 80015ba:	08d2      	lsrs	r2, r2, #3
 80015bc:	430a      	orrs	r2, r1
 80015be:	4690      	mov	r8, r2
 80015c0:	2300      	movs	r3, #0
 80015c2:	e63f      	b.n	8001244 <__aeabi_ddiv+0xc0>
 80015c4:	2480      	movs	r4, #128	@ 0x80
 80015c6:	464b      	mov	r3, r9
 80015c8:	0324      	lsls	r4, r4, #12
 80015ca:	4223      	tst	r3, r4
 80015cc:	d009      	beq.n	80015e2 <__aeabi_ddiv+0x45e>
 80015ce:	465b      	mov	r3, fp
 80015d0:	4223      	tst	r3, r4
 80015d2:	d106      	bne.n	80015e2 <__aeabi_ddiv+0x45e>
 80015d4:	431c      	orrs	r4, r3
 80015d6:	0324      	lsls	r4, r4, #12
 80015d8:	002e      	movs	r6, r5
 80015da:	4690      	mov	r8, r2
 80015dc:	4b71      	ldr	r3, [pc, #452]	@ (80017a4 <__aeabi_ddiv+0x620>)
 80015de:	0b24      	lsrs	r4, r4, #12
 80015e0:	e630      	b.n	8001244 <__aeabi_ddiv+0xc0>
 80015e2:	2480      	movs	r4, #128	@ 0x80
 80015e4:	464b      	mov	r3, r9
 80015e6:	0324      	lsls	r4, r4, #12
 80015e8:	431c      	orrs	r4, r3
 80015ea:	0324      	lsls	r4, r4, #12
 80015ec:	9e02      	ldr	r6, [sp, #8]
 80015ee:	4b6d      	ldr	r3, [pc, #436]	@ (80017a4 <__aeabi_ddiv+0x620>)
 80015f0:	0b24      	lsrs	r4, r4, #12
 80015f2:	e627      	b.n	8001244 <__aeabi_ddiv+0xc0>
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d100      	bne.n	80015fa <__aeabi_ddiv+0x476>
 80015f8:	e700      	b.n	80013fc <__aeabi_ddiv+0x278>
 80015fa:	9800      	ldr	r0, [sp, #0]
 80015fc:	1e51      	subs	r1, r2, #1
 80015fe:	4684      	mov	ip, r0
 8001600:	4464      	add	r4, ip
 8001602:	4284      	cmp	r4, r0
 8001604:	d200      	bcs.n	8001608 <__aeabi_ddiv+0x484>
 8001606:	e084      	b.n	8001712 <__aeabi_ddiv+0x58e>
 8001608:	42bc      	cmp	r4, r7
 800160a:	d200      	bcs.n	800160e <__aeabi_ddiv+0x48a>
 800160c:	e0ae      	b.n	800176c <__aeabi_ddiv+0x5e8>
 800160e:	d100      	bne.n	8001612 <__aeabi_ddiv+0x48e>
 8001610:	e0c1      	b.n	8001796 <__aeabi_ddiv+0x612>
 8001612:	000a      	movs	r2, r1
 8001614:	e6f0      	b.n	80013f8 <__aeabi_ddiv+0x274>
 8001616:	4542      	cmp	r2, r8
 8001618:	d900      	bls.n	800161c <__aeabi_ddiv+0x498>
 800161a:	e62c      	b.n	8001276 <__aeabi_ddiv+0xf2>
 800161c:	464b      	mov	r3, r9
 800161e:	07dc      	lsls	r4, r3, #31
 8001620:	0858      	lsrs	r0, r3, #1
 8001622:	4643      	mov	r3, r8
 8001624:	085b      	lsrs	r3, r3, #1
 8001626:	431c      	orrs	r4, r3
 8001628:	4643      	mov	r3, r8
 800162a:	07df      	lsls	r7, r3, #31
 800162c:	e62a      	b.n	8001284 <__aeabi_ddiv+0x100>
 800162e:	f001 f949 	bl	80028c4 <__clzsi2>
 8001632:	2315      	movs	r3, #21
 8001634:	469c      	mov	ip, r3
 8001636:	4484      	add	ip, r0
 8001638:	0002      	movs	r2, r0
 800163a:	4663      	mov	r3, ip
 800163c:	3220      	adds	r2, #32
 800163e:	2b1c      	cmp	r3, #28
 8001640:	dc00      	bgt.n	8001644 <__aeabi_ddiv+0x4c0>
 8001642:	e72e      	b.n	80014a2 <__aeabi_ddiv+0x31e>
 8001644:	0023      	movs	r3, r4
 8001646:	3808      	subs	r0, #8
 8001648:	4083      	lsls	r3, r0
 800164a:	4699      	mov	r9, r3
 800164c:	2300      	movs	r3, #0
 800164e:	4698      	mov	r8, r3
 8001650:	e736      	b.n	80014c0 <__aeabi_ddiv+0x33c>
 8001652:	f001 f937 	bl	80028c4 <__clzsi2>
 8001656:	0002      	movs	r2, r0
 8001658:	0003      	movs	r3, r0
 800165a:	3215      	adds	r2, #21
 800165c:	3320      	adds	r3, #32
 800165e:	2a1c      	cmp	r2, #28
 8001660:	dc00      	bgt.n	8001664 <__aeabi_ddiv+0x4e0>
 8001662:	e6fb      	b.n	800145c <__aeabi_ddiv+0x2d8>
 8001664:	9900      	ldr	r1, [sp, #0]
 8001666:	3808      	subs	r0, #8
 8001668:	4081      	lsls	r1, r0
 800166a:	2200      	movs	r2, #0
 800166c:	468b      	mov	fp, r1
 800166e:	e702      	b.n	8001476 <__aeabi_ddiv+0x2f2>
 8001670:	9900      	ldr	r1, [sp, #0]
 8001672:	3b01      	subs	r3, #1
 8001674:	468c      	mov	ip, r1
 8001676:	4464      	add	r4, ip
 8001678:	42a1      	cmp	r1, r4
 800167a:	d900      	bls.n	800167e <__aeabi_ddiv+0x4fa>
 800167c:	e69a      	b.n	80013b4 <__aeabi_ddiv+0x230>
 800167e:	42a2      	cmp	r2, r4
 8001680:	d800      	bhi.n	8001684 <__aeabi_ddiv+0x500>
 8001682:	e697      	b.n	80013b4 <__aeabi_ddiv+0x230>
 8001684:	1e83      	subs	r3, r0, #2
 8001686:	4464      	add	r4, ip
 8001688:	e694      	b.n	80013b4 <__aeabi_ddiv+0x230>
 800168a:	46ac      	mov	ip, r5
 800168c:	4461      	add	r1, ip
 800168e:	3f01      	subs	r7, #1
 8001690:	428d      	cmp	r5, r1
 8001692:	d900      	bls.n	8001696 <__aeabi_ddiv+0x512>
 8001694:	e680      	b.n	8001398 <__aeabi_ddiv+0x214>
 8001696:	428a      	cmp	r2, r1
 8001698:	d800      	bhi.n	800169c <__aeabi_ddiv+0x518>
 800169a:	e67d      	b.n	8001398 <__aeabi_ddiv+0x214>
 800169c:	1e87      	subs	r7, r0, #2
 800169e:	4461      	add	r1, ip
 80016a0:	e67a      	b.n	8001398 <__aeabi_ddiv+0x214>
 80016a2:	4285      	cmp	r5, r0
 80016a4:	d000      	beq.n	80016a8 <__aeabi_ddiv+0x524>
 80016a6:	e65f      	b.n	8001368 <__aeabi_ddiv+0x1e4>
 80016a8:	45b9      	cmp	r9, r7
 80016aa:	d900      	bls.n	80016ae <__aeabi_ddiv+0x52a>
 80016ac:	e65c      	b.n	8001368 <__aeabi_ddiv+0x1e4>
 80016ae:	e656      	b.n	800135e <__aeabi_ddiv+0x1da>
 80016b0:	42a2      	cmp	r2, r4
 80016b2:	d800      	bhi.n	80016b6 <__aeabi_ddiv+0x532>
 80016b4:	e61a      	b.n	80012ec <__aeabi_ddiv+0x168>
 80016b6:	1e83      	subs	r3, r0, #2
 80016b8:	4464      	add	r4, ip
 80016ba:	e617      	b.n	80012ec <__aeabi_ddiv+0x168>
 80016bc:	428a      	cmp	r2, r1
 80016be:	d800      	bhi.n	80016c2 <__aeabi_ddiv+0x53e>
 80016c0:	e600      	b.n	80012c4 <__aeabi_ddiv+0x140>
 80016c2:	46ac      	mov	ip, r5
 80016c4:	1e83      	subs	r3, r0, #2
 80016c6:	4698      	mov	r8, r3
 80016c8:	4461      	add	r1, ip
 80016ca:	e5fb      	b.n	80012c4 <__aeabi_ddiv+0x140>
 80016cc:	4837      	ldr	r0, [pc, #220]	@ (80017ac <__aeabi_ddiv+0x628>)
 80016ce:	0014      	movs	r4, r2
 80016d0:	4450      	add	r0, sl
 80016d2:	4082      	lsls	r2, r0
 80016d4:	465b      	mov	r3, fp
 80016d6:	0017      	movs	r7, r2
 80016d8:	4083      	lsls	r3, r0
 80016da:	40cc      	lsrs	r4, r1
 80016dc:	1e7a      	subs	r2, r7, #1
 80016de:	4197      	sbcs	r7, r2
 80016e0:	4323      	orrs	r3, r4
 80016e2:	433b      	orrs	r3, r7
 80016e4:	001a      	movs	r2, r3
 80016e6:	465b      	mov	r3, fp
 80016e8:	40cb      	lsrs	r3, r1
 80016ea:	0751      	lsls	r1, r2, #29
 80016ec:	d009      	beq.n	8001702 <__aeabi_ddiv+0x57e>
 80016ee:	210f      	movs	r1, #15
 80016f0:	4011      	ands	r1, r2
 80016f2:	2904      	cmp	r1, #4
 80016f4:	d005      	beq.n	8001702 <__aeabi_ddiv+0x57e>
 80016f6:	1d11      	adds	r1, r2, #4
 80016f8:	4291      	cmp	r1, r2
 80016fa:	4192      	sbcs	r2, r2
 80016fc:	4252      	negs	r2, r2
 80016fe:	189b      	adds	r3, r3, r2
 8001700:	000a      	movs	r2, r1
 8001702:	0219      	lsls	r1, r3, #8
 8001704:	d400      	bmi.n	8001708 <__aeabi_ddiv+0x584>
 8001706:	e755      	b.n	80015b4 <__aeabi_ddiv+0x430>
 8001708:	2200      	movs	r2, #0
 800170a:	2301      	movs	r3, #1
 800170c:	2400      	movs	r4, #0
 800170e:	4690      	mov	r8, r2
 8001710:	e598      	b.n	8001244 <__aeabi_ddiv+0xc0>
 8001712:	000a      	movs	r2, r1
 8001714:	42bc      	cmp	r4, r7
 8001716:	d000      	beq.n	800171a <__aeabi_ddiv+0x596>
 8001718:	e66e      	b.n	80013f8 <__aeabi_ddiv+0x274>
 800171a:	454b      	cmp	r3, r9
 800171c:	d000      	beq.n	8001720 <__aeabi_ddiv+0x59c>
 800171e:	e66b      	b.n	80013f8 <__aeabi_ddiv+0x274>
 8001720:	e66c      	b.n	80013fc <__aeabi_ddiv+0x278>
 8001722:	4b23      	ldr	r3, [pc, #140]	@ (80017b0 <__aeabi_ddiv+0x62c>)
 8001724:	4a23      	ldr	r2, [pc, #140]	@ (80017b4 <__aeabi_ddiv+0x630>)
 8001726:	4453      	add	r3, sl
 8001728:	4592      	cmp	sl, r2
 800172a:	da00      	bge.n	800172e <__aeabi_ddiv+0x5aa>
 800172c:	e718      	b.n	8001560 <__aeabi_ddiv+0x3dc>
 800172e:	2101      	movs	r1, #1
 8001730:	4249      	negs	r1, r1
 8001732:	1d0a      	adds	r2, r1, #4
 8001734:	428a      	cmp	r2, r1
 8001736:	4189      	sbcs	r1, r1
 8001738:	4249      	negs	r1, r1
 800173a:	448b      	add	fp, r1
 800173c:	e666      	b.n	800140c <__aeabi_ddiv+0x288>
 800173e:	210f      	movs	r1, #15
 8001740:	4011      	ands	r1, r2
 8001742:	2904      	cmp	r1, #4
 8001744:	d100      	bne.n	8001748 <__aeabi_ddiv+0x5c4>
 8001746:	e661      	b.n	800140c <__aeabi_ddiv+0x288>
 8001748:	0011      	movs	r1, r2
 800174a:	e7f2      	b.n	8001732 <__aeabi_ddiv+0x5ae>
 800174c:	42bc      	cmp	r4, r7
 800174e:	d800      	bhi.n	8001752 <__aeabi_ddiv+0x5ce>
 8001750:	e60a      	b.n	8001368 <__aeabi_ddiv+0x1e4>
 8001752:	2302      	movs	r3, #2
 8001754:	425b      	negs	r3, r3
 8001756:	469c      	mov	ip, r3
 8001758:	9900      	ldr	r1, [sp, #0]
 800175a:	444f      	add	r7, r9
 800175c:	454f      	cmp	r7, r9
 800175e:	419b      	sbcs	r3, r3
 8001760:	44e3      	add	fp, ip
 8001762:	468c      	mov	ip, r1
 8001764:	425b      	negs	r3, r3
 8001766:	4463      	add	r3, ip
 8001768:	18c0      	adds	r0, r0, r3
 800176a:	e5ff      	b.n	800136c <__aeabi_ddiv+0x1e8>
 800176c:	4649      	mov	r1, r9
 800176e:	9d00      	ldr	r5, [sp, #0]
 8001770:	0048      	lsls	r0, r1, #1
 8001772:	4548      	cmp	r0, r9
 8001774:	4189      	sbcs	r1, r1
 8001776:	46ac      	mov	ip, r5
 8001778:	4249      	negs	r1, r1
 800177a:	4461      	add	r1, ip
 800177c:	4681      	mov	r9, r0
 800177e:	3a02      	subs	r2, #2
 8001780:	1864      	adds	r4, r4, r1
 8001782:	e7c7      	b.n	8001714 <__aeabi_ddiv+0x590>
 8001784:	2480      	movs	r4, #128	@ 0x80
 8001786:	465b      	mov	r3, fp
 8001788:	0324      	lsls	r4, r4, #12
 800178a:	431c      	orrs	r4, r3
 800178c:	0324      	lsls	r4, r4, #12
 800178e:	4690      	mov	r8, r2
 8001790:	4b04      	ldr	r3, [pc, #16]	@ (80017a4 <__aeabi_ddiv+0x620>)
 8001792:	0b24      	lsrs	r4, r4, #12
 8001794:	e556      	b.n	8001244 <__aeabi_ddiv+0xc0>
 8001796:	4599      	cmp	r9, r3
 8001798:	d3e8      	bcc.n	800176c <__aeabi_ddiv+0x5e8>
 800179a:	000a      	movs	r2, r1
 800179c:	e7bd      	b.n	800171a <__aeabi_ddiv+0x596>
 800179e:	2300      	movs	r3, #0
 80017a0:	e708      	b.n	80015b4 <__aeabi_ddiv+0x430>
 80017a2:	46c0      	nop			@ (mov r8, r8)
 80017a4:	000007ff 	.word	0x000007ff
 80017a8:	0000043e 	.word	0x0000043e
 80017ac:	0000041e 	.word	0x0000041e
 80017b0:	000003ff 	.word	0x000003ff
 80017b4:	fffffc02 	.word	0xfffffc02

080017b8 <__eqdf2>:
 80017b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ba:	4657      	mov	r7, sl
 80017bc:	46de      	mov	lr, fp
 80017be:	464e      	mov	r6, r9
 80017c0:	4645      	mov	r5, r8
 80017c2:	b5e0      	push	{r5, r6, r7, lr}
 80017c4:	000d      	movs	r5, r1
 80017c6:	0004      	movs	r4, r0
 80017c8:	0fe8      	lsrs	r0, r5, #31
 80017ca:	4683      	mov	fp, r0
 80017cc:	0309      	lsls	r1, r1, #12
 80017ce:	0fd8      	lsrs	r0, r3, #31
 80017d0:	0b09      	lsrs	r1, r1, #12
 80017d2:	4682      	mov	sl, r0
 80017d4:	4819      	ldr	r0, [pc, #100]	@ (800183c <__eqdf2+0x84>)
 80017d6:	468c      	mov	ip, r1
 80017d8:	031f      	lsls	r7, r3, #12
 80017da:	0069      	lsls	r1, r5, #1
 80017dc:	005e      	lsls	r6, r3, #1
 80017de:	0d49      	lsrs	r1, r1, #21
 80017e0:	0b3f      	lsrs	r7, r7, #12
 80017e2:	0d76      	lsrs	r6, r6, #21
 80017e4:	4281      	cmp	r1, r0
 80017e6:	d018      	beq.n	800181a <__eqdf2+0x62>
 80017e8:	4286      	cmp	r6, r0
 80017ea:	d00f      	beq.n	800180c <__eqdf2+0x54>
 80017ec:	2001      	movs	r0, #1
 80017ee:	42b1      	cmp	r1, r6
 80017f0:	d10d      	bne.n	800180e <__eqdf2+0x56>
 80017f2:	45bc      	cmp	ip, r7
 80017f4:	d10b      	bne.n	800180e <__eqdf2+0x56>
 80017f6:	4294      	cmp	r4, r2
 80017f8:	d109      	bne.n	800180e <__eqdf2+0x56>
 80017fa:	45d3      	cmp	fp, sl
 80017fc:	d01c      	beq.n	8001838 <__eqdf2+0x80>
 80017fe:	2900      	cmp	r1, #0
 8001800:	d105      	bne.n	800180e <__eqdf2+0x56>
 8001802:	4660      	mov	r0, ip
 8001804:	4320      	orrs	r0, r4
 8001806:	1e43      	subs	r3, r0, #1
 8001808:	4198      	sbcs	r0, r3
 800180a:	e000      	b.n	800180e <__eqdf2+0x56>
 800180c:	2001      	movs	r0, #1
 800180e:	bcf0      	pop	{r4, r5, r6, r7}
 8001810:	46bb      	mov	fp, r7
 8001812:	46b2      	mov	sl, r6
 8001814:	46a9      	mov	r9, r5
 8001816:	46a0      	mov	r8, r4
 8001818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800181a:	2001      	movs	r0, #1
 800181c:	428e      	cmp	r6, r1
 800181e:	d1f6      	bne.n	800180e <__eqdf2+0x56>
 8001820:	4661      	mov	r1, ip
 8001822:	4339      	orrs	r1, r7
 8001824:	000f      	movs	r7, r1
 8001826:	4317      	orrs	r7, r2
 8001828:	4327      	orrs	r7, r4
 800182a:	d1f0      	bne.n	800180e <__eqdf2+0x56>
 800182c:	465b      	mov	r3, fp
 800182e:	4652      	mov	r2, sl
 8001830:	1a98      	subs	r0, r3, r2
 8001832:	1e43      	subs	r3, r0, #1
 8001834:	4198      	sbcs	r0, r3
 8001836:	e7ea      	b.n	800180e <__eqdf2+0x56>
 8001838:	2000      	movs	r0, #0
 800183a:	e7e8      	b.n	800180e <__eqdf2+0x56>
 800183c:	000007ff 	.word	0x000007ff

08001840 <__gedf2>:
 8001840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001842:	4657      	mov	r7, sl
 8001844:	464e      	mov	r6, r9
 8001846:	4645      	mov	r5, r8
 8001848:	46de      	mov	lr, fp
 800184a:	b5e0      	push	{r5, r6, r7, lr}
 800184c:	000d      	movs	r5, r1
 800184e:	030f      	lsls	r7, r1, #12
 8001850:	0b39      	lsrs	r1, r7, #12
 8001852:	b083      	sub	sp, #12
 8001854:	0004      	movs	r4, r0
 8001856:	4680      	mov	r8, r0
 8001858:	9101      	str	r1, [sp, #4]
 800185a:	0058      	lsls	r0, r3, #1
 800185c:	0fe9      	lsrs	r1, r5, #31
 800185e:	4f31      	ldr	r7, [pc, #196]	@ (8001924 <__gedf2+0xe4>)
 8001860:	0d40      	lsrs	r0, r0, #21
 8001862:	468c      	mov	ip, r1
 8001864:	006e      	lsls	r6, r5, #1
 8001866:	0319      	lsls	r1, r3, #12
 8001868:	4682      	mov	sl, r0
 800186a:	4691      	mov	r9, r2
 800186c:	0d76      	lsrs	r6, r6, #21
 800186e:	0b09      	lsrs	r1, r1, #12
 8001870:	0fd8      	lsrs	r0, r3, #31
 8001872:	42be      	cmp	r6, r7
 8001874:	d01f      	beq.n	80018b6 <__gedf2+0x76>
 8001876:	45ba      	cmp	sl, r7
 8001878:	d00f      	beq.n	800189a <__gedf2+0x5a>
 800187a:	2e00      	cmp	r6, #0
 800187c:	d12f      	bne.n	80018de <__gedf2+0x9e>
 800187e:	4655      	mov	r5, sl
 8001880:	9e01      	ldr	r6, [sp, #4]
 8001882:	4334      	orrs	r4, r6
 8001884:	2d00      	cmp	r5, #0
 8001886:	d127      	bne.n	80018d8 <__gedf2+0x98>
 8001888:	430a      	orrs	r2, r1
 800188a:	d03a      	beq.n	8001902 <__gedf2+0xc2>
 800188c:	2c00      	cmp	r4, #0
 800188e:	d145      	bne.n	800191c <__gedf2+0xdc>
 8001890:	2800      	cmp	r0, #0
 8001892:	d11a      	bne.n	80018ca <__gedf2+0x8a>
 8001894:	2001      	movs	r0, #1
 8001896:	4240      	negs	r0, r0
 8001898:	e017      	b.n	80018ca <__gedf2+0x8a>
 800189a:	4311      	orrs	r1, r2
 800189c:	d13b      	bne.n	8001916 <__gedf2+0xd6>
 800189e:	2e00      	cmp	r6, #0
 80018a0:	d102      	bne.n	80018a8 <__gedf2+0x68>
 80018a2:	9f01      	ldr	r7, [sp, #4]
 80018a4:	4327      	orrs	r7, r4
 80018a6:	d0f3      	beq.n	8001890 <__gedf2+0x50>
 80018a8:	4584      	cmp	ip, r0
 80018aa:	d109      	bne.n	80018c0 <__gedf2+0x80>
 80018ac:	4663      	mov	r3, ip
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d0f0      	beq.n	8001894 <__gedf2+0x54>
 80018b2:	4660      	mov	r0, ip
 80018b4:	e009      	b.n	80018ca <__gedf2+0x8a>
 80018b6:	9f01      	ldr	r7, [sp, #4]
 80018b8:	4327      	orrs	r7, r4
 80018ba:	d12c      	bne.n	8001916 <__gedf2+0xd6>
 80018bc:	45b2      	cmp	sl, r6
 80018be:	d024      	beq.n	800190a <__gedf2+0xca>
 80018c0:	4663      	mov	r3, ip
 80018c2:	2002      	movs	r0, #2
 80018c4:	3b01      	subs	r3, #1
 80018c6:	4018      	ands	r0, r3
 80018c8:	3801      	subs	r0, #1
 80018ca:	b003      	add	sp, #12
 80018cc:	bcf0      	pop	{r4, r5, r6, r7}
 80018ce:	46bb      	mov	fp, r7
 80018d0:	46b2      	mov	sl, r6
 80018d2:	46a9      	mov	r9, r5
 80018d4:	46a0      	mov	r8, r4
 80018d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018d8:	2c00      	cmp	r4, #0
 80018da:	d0d9      	beq.n	8001890 <__gedf2+0x50>
 80018dc:	e7e4      	b.n	80018a8 <__gedf2+0x68>
 80018de:	4654      	mov	r4, sl
 80018e0:	2c00      	cmp	r4, #0
 80018e2:	d0ed      	beq.n	80018c0 <__gedf2+0x80>
 80018e4:	4584      	cmp	ip, r0
 80018e6:	d1eb      	bne.n	80018c0 <__gedf2+0x80>
 80018e8:	4556      	cmp	r6, sl
 80018ea:	dce9      	bgt.n	80018c0 <__gedf2+0x80>
 80018ec:	dbde      	blt.n	80018ac <__gedf2+0x6c>
 80018ee:	9b01      	ldr	r3, [sp, #4]
 80018f0:	428b      	cmp	r3, r1
 80018f2:	d8e5      	bhi.n	80018c0 <__gedf2+0x80>
 80018f4:	d1da      	bne.n	80018ac <__gedf2+0x6c>
 80018f6:	45c8      	cmp	r8, r9
 80018f8:	d8e2      	bhi.n	80018c0 <__gedf2+0x80>
 80018fa:	2000      	movs	r0, #0
 80018fc:	45c8      	cmp	r8, r9
 80018fe:	d2e4      	bcs.n	80018ca <__gedf2+0x8a>
 8001900:	e7d4      	b.n	80018ac <__gedf2+0x6c>
 8001902:	2000      	movs	r0, #0
 8001904:	2c00      	cmp	r4, #0
 8001906:	d0e0      	beq.n	80018ca <__gedf2+0x8a>
 8001908:	e7da      	b.n	80018c0 <__gedf2+0x80>
 800190a:	4311      	orrs	r1, r2
 800190c:	d103      	bne.n	8001916 <__gedf2+0xd6>
 800190e:	4584      	cmp	ip, r0
 8001910:	d1d6      	bne.n	80018c0 <__gedf2+0x80>
 8001912:	2000      	movs	r0, #0
 8001914:	e7d9      	b.n	80018ca <__gedf2+0x8a>
 8001916:	2002      	movs	r0, #2
 8001918:	4240      	negs	r0, r0
 800191a:	e7d6      	b.n	80018ca <__gedf2+0x8a>
 800191c:	4584      	cmp	ip, r0
 800191e:	d0e6      	beq.n	80018ee <__gedf2+0xae>
 8001920:	e7ce      	b.n	80018c0 <__gedf2+0x80>
 8001922:	46c0      	nop			@ (mov r8, r8)
 8001924:	000007ff 	.word	0x000007ff

08001928 <__ledf2>:
 8001928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800192a:	4657      	mov	r7, sl
 800192c:	464e      	mov	r6, r9
 800192e:	4645      	mov	r5, r8
 8001930:	46de      	mov	lr, fp
 8001932:	b5e0      	push	{r5, r6, r7, lr}
 8001934:	000d      	movs	r5, r1
 8001936:	030f      	lsls	r7, r1, #12
 8001938:	0004      	movs	r4, r0
 800193a:	4680      	mov	r8, r0
 800193c:	0fe8      	lsrs	r0, r5, #31
 800193e:	0b39      	lsrs	r1, r7, #12
 8001940:	4684      	mov	ip, r0
 8001942:	b083      	sub	sp, #12
 8001944:	0058      	lsls	r0, r3, #1
 8001946:	4f30      	ldr	r7, [pc, #192]	@ (8001a08 <__ledf2+0xe0>)
 8001948:	0d40      	lsrs	r0, r0, #21
 800194a:	9101      	str	r1, [sp, #4]
 800194c:	031e      	lsls	r6, r3, #12
 800194e:	0069      	lsls	r1, r5, #1
 8001950:	4682      	mov	sl, r0
 8001952:	4691      	mov	r9, r2
 8001954:	0d49      	lsrs	r1, r1, #21
 8001956:	0b36      	lsrs	r6, r6, #12
 8001958:	0fd8      	lsrs	r0, r3, #31
 800195a:	42b9      	cmp	r1, r7
 800195c:	d020      	beq.n	80019a0 <__ledf2+0x78>
 800195e:	45ba      	cmp	sl, r7
 8001960:	d00f      	beq.n	8001982 <__ledf2+0x5a>
 8001962:	2900      	cmp	r1, #0
 8001964:	d12b      	bne.n	80019be <__ledf2+0x96>
 8001966:	9901      	ldr	r1, [sp, #4]
 8001968:	430c      	orrs	r4, r1
 800196a:	4651      	mov	r1, sl
 800196c:	2900      	cmp	r1, #0
 800196e:	d137      	bne.n	80019e0 <__ledf2+0xb8>
 8001970:	4332      	orrs	r2, r6
 8001972:	d038      	beq.n	80019e6 <__ledf2+0xbe>
 8001974:	2c00      	cmp	r4, #0
 8001976:	d144      	bne.n	8001a02 <__ledf2+0xda>
 8001978:	2800      	cmp	r0, #0
 800197a:	d119      	bne.n	80019b0 <__ledf2+0x88>
 800197c:	2001      	movs	r0, #1
 800197e:	4240      	negs	r0, r0
 8001980:	e016      	b.n	80019b0 <__ledf2+0x88>
 8001982:	4316      	orrs	r6, r2
 8001984:	d113      	bne.n	80019ae <__ledf2+0x86>
 8001986:	2900      	cmp	r1, #0
 8001988:	d102      	bne.n	8001990 <__ledf2+0x68>
 800198a:	9f01      	ldr	r7, [sp, #4]
 800198c:	4327      	orrs	r7, r4
 800198e:	d0f3      	beq.n	8001978 <__ledf2+0x50>
 8001990:	4584      	cmp	ip, r0
 8001992:	d020      	beq.n	80019d6 <__ledf2+0xae>
 8001994:	4663      	mov	r3, ip
 8001996:	2002      	movs	r0, #2
 8001998:	3b01      	subs	r3, #1
 800199a:	4018      	ands	r0, r3
 800199c:	3801      	subs	r0, #1
 800199e:	e007      	b.n	80019b0 <__ledf2+0x88>
 80019a0:	9f01      	ldr	r7, [sp, #4]
 80019a2:	4327      	orrs	r7, r4
 80019a4:	d103      	bne.n	80019ae <__ledf2+0x86>
 80019a6:	458a      	cmp	sl, r1
 80019a8:	d1f4      	bne.n	8001994 <__ledf2+0x6c>
 80019aa:	4316      	orrs	r6, r2
 80019ac:	d01f      	beq.n	80019ee <__ledf2+0xc6>
 80019ae:	2002      	movs	r0, #2
 80019b0:	b003      	add	sp, #12
 80019b2:	bcf0      	pop	{r4, r5, r6, r7}
 80019b4:	46bb      	mov	fp, r7
 80019b6:	46b2      	mov	sl, r6
 80019b8:	46a9      	mov	r9, r5
 80019ba:	46a0      	mov	r8, r4
 80019bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019be:	4654      	mov	r4, sl
 80019c0:	2c00      	cmp	r4, #0
 80019c2:	d0e7      	beq.n	8001994 <__ledf2+0x6c>
 80019c4:	4584      	cmp	ip, r0
 80019c6:	d1e5      	bne.n	8001994 <__ledf2+0x6c>
 80019c8:	4551      	cmp	r1, sl
 80019ca:	dce3      	bgt.n	8001994 <__ledf2+0x6c>
 80019cc:	db03      	blt.n	80019d6 <__ledf2+0xae>
 80019ce:	9b01      	ldr	r3, [sp, #4]
 80019d0:	42b3      	cmp	r3, r6
 80019d2:	d8df      	bhi.n	8001994 <__ledf2+0x6c>
 80019d4:	d00f      	beq.n	80019f6 <__ledf2+0xce>
 80019d6:	4663      	mov	r3, ip
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0cf      	beq.n	800197c <__ledf2+0x54>
 80019dc:	4660      	mov	r0, ip
 80019de:	e7e7      	b.n	80019b0 <__ledf2+0x88>
 80019e0:	2c00      	cmp	r4, #0
 80019e2:	d0c9      	beq.n	8001978 <__ledf2+0x50>
 80019e4:	e7d4      	b.n	8001990 <__ledf2+0x68>
 80019e6:	2000      	movs	r0, #0
 80019e8:	2c00      	cmp	r4, #0
 80019ea:	d0e1      	beq.n	80019b0 <__ledf2+0x88>
 80019ec:	e7d2      	b.n	8001994 <__ledf2+0x6c>
 80019ee:	4584      	cmp	ip, r0
 80019f0:	d1d0      	bne.n	8001994 <__ledf2+0x6c>
 80019f2:	2000      	movs	r0, #0
 80019f4:	e7dc      	b.n	80019b0 <__ledf2+0x88>
 80019f6:	45c8      	cmp	r8, r9
 80019f8:	d8cc      	bhi.n	8001994 <__ledf2+0x6c>
 80019fa:	2000      	movs	r0, #0
 80019fc:	45c8      	cmp	r8, r9
 80019fe:	d2d7      	bcs.n	80019b0 <__ledf2+0x88>
 8001a00:	e7e9      	b.n	80019d6 <__ledf2+0xae>
 8001a02:	4584      	cmp	ip, r0
 8001a04:	d0e3      	beq.n	80019ce <__ledf2+0xa6>
 8001a06:	e7c5      	b.n	8001994 <__ledf2+0x6c>
 8001a08:	000007ff 	.word	0x000007ff

08001a0c <__aeabi_dmul>:
 8001a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a0e:	4657      	mov	r7, sl
 8001a10:	46de      	mov	lr, fp
 8001a12:	464e      	mov	r6, r9
 8001a14:	4645      	mov	r5, r8
 8001a16:	b5e0      	push	{r5, r6, r7, lr}
 8001a18:	001f      	movs	r7, r3
 8001a1a:	030b      	lsls	r3, r1, #12
 8001a1c:	0b1b      	lsrs	r3, r3, #12
 8001a1e:	0016      	movs	r6, r2
 8001a20:	469a      	mov	sl, r3
 8001a22:	0fca      	lsrs	r2, r1, #31
 8001a24:	004b      	lsls	r3, r1, #1
 8001a26:	0004      	movs	r4, r0
 8001a28:	4693      	mov	fp, r2
 8001a2a:	b087      	sub	sp, #28
 8001a2c:	0d5b      	lsrs	r3, r3, #21
 8001a2e:	d100      	bne.n	8001a32 <__aeabi_dmul+0x26>
 8001a30:	e0d5      	b.n	8001bde <__aeabi_dmul+0x1d2>
 8001a32:	4abb      	ldr	r2, [pc, #748]	@ (8001d20 <__aeabi_dmul+0x314>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d100      	bne.n	8001a3a <__aeabi_dmul+0x2e>
 8001a38:	e0f8      	b.n	8001c2c <__aeabi_dmul+0x220>
 8001a3a:	4651      	mov	r1, sl
 8001a3c:	0f42      	lsrs	r2, r0, #29
 8001a3e:	00c9      	lsls	r1, r1, #3
 8001a40:	430a      	orrs	r2, r1
 8001a42:	2180      	movs	r1, #128	@ 0x80
 8001a44:	0409      	lsls	r1, r1, #16
 8001a46:	4311      	orrs	r1, r2
 8001a48:	00c2      	lsls	r2, r0, #3
 8001a4a:	4691      	mov	r9, r2
 8001a4c:	4ab5      	ldr	r2, [pc, #724]	@ (8001d24 <__aeabi_dmul+0x318>)
 8001a4e:	468a      	mov	sl, r1
 8001a50:	189d      	adds	r5, r3, r2
 8001a52:	2300      	movs	r3, #0
 8001a54:	4698      	mov	r8, r3
 8001a56:	9302      	str	r3, [sp, #8]
 8001a58:	033c      	lsls	r4, r7, #12
 8001a5a:	007b      	lsls	r3, r7, #1
 8001a5c:	0ffa      	lsrs	r2, r7, #31
 8001a5e:	0030      	movs	r0, r6
 8001a60:	0b24      	lsrs	r4, r4, #12
 8001a62:	0d5b      	lsrs	r3, r3, #21
 8001a64:	9200      	str	r2, [sp, #0]
 8001a66:	d100      	bne.n	8001a6a <__aeabi_dmul+0x5e>
 8001a68:	e096      	b.n	8001b98 <__aeabi_dmul+0x18c>
 8001a6a:	4aad      	ldr	r2, [pc, #692]	@ (8001d20 <__aeabi_dmul+0x314>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d031      	beq.n	8001ad4 <__aeabi_dmul+0xc8>
 8001a70:	0f72      	lsrs	r2, r6, #29
 8001a72:	00e4      	lsls	r4, r4, #3
 8001a74:	4322      	orrs	r2, r4
 8001a76:	2480      	movs	r4, #128	@ 0x80
 8001a78:	0424      	lsls	r4, r4, #16
 8001a7a:	4314      	orrs	r4, r2
 8001a7c:	4aa9      	ldr	r2, [pc, #676]	@ (8001d24 <__aeabi_dmul+0x318>)
 8001a7e:	00f0      	lsls	r0, r6, #3
 8001a80:	4694      	mov	ip, r2
 8001a82:	4463      	add	r3, ip
 8001a84:	195b      	adds	r3, r3, r5
 8001a86:	1c5a      	adds	r2, r3, #1
 8001a88:	9201      	str	r2, [sp, #4]
 8001a8a:	4642      	mov	r2, r8
 8001a8c:	2600      	movs	r6, #0
 8001a8e:	2a0a      	cmp	r2, #10
 8001a90:	dc42      	bgt.n	8001b18 <__aeabi_dmul+0x10c>
 8001a92:	465a      	mov	r2, fp
 8001a94:	9900      	ldr	r1, [sp, #0]
 8001a96:	404a      	eors	r2, r1
 8001a98:	4693      	mov	fp, r2
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	2a02      	cmp	r2, #2
 8001a9e:	dc32      	bgt.n	8001b06 <__aeabi_dmul+0xfa>
 8001aa0:	3a01      	subs	r2, #1
 8001aa2:	2a01      	cmp	r2, #1
 8001aa4:	d900      	bls.n	8001aa8 <__aeabi_dmul+0x9c>
 8001aa6:	e149      	b.n	8001d3c <__aeabi_dmul+0x330>
 8001aa8:	2e02      	cmp	r6, #2
 8001aaa:	d100      	bne.n	8001aae <__aeabi_dmul+0xa2>
 8001aac:	e0ca      	b.n	8001c44 <__aeabi_dmul+0x238>
 8001aae:	2e01      	cmp	r6, #1
 8001ab0:	d13d      	bne.n	8001b2e <__aeabi_dmul+0x122>
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	2400      	movs	r4, #0
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	0010      	movs	r0, r2
 8001aba:	465a      	mov	r2, fp
 8001abc:	051b      	lsls	r3, r3, #20
 8001abe:	4323      	orrs	r3, r4
 8001ac0:	07d2      	lsls	r2, r2, #31
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	0019      	movs	r1, r3
 8001ac6:	b007      	add	sp, #28
 8001ac8:	bcf0      	pop	{r4, r5, r6, r7}
 8001aca:	46bb      	mov	fp, r7
 8001acc:	46b2      	mov	sl, r6
 8001ace:	46a9      	mov	r9, r5
 8001ad0:	46a0      	mov	r8, r4
 8001ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ad4:	4b92      	ldr	r3, [pc, #584]	@ (8001d20 <__aeabi_dmul+0x314>)
 8001ad6:	4326      	orrs	r6, r4
 8001ad8:	18eb      	adds	r3, r5, r3
 8001ada:	2e00      	cmp	r6, #0
 8001adc:	d100      	bne.n	8001ae0 <__aeabi_dmul+0xd4>
 8001ade:	e0bb      	b.n	8001c58 <__aeabi_dmul+0x24c>
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	4641      	mov	r1, r8
 8001ae4:	4311      	orrs	r1, r2
 8001ae6:	465a      	mov	r2, fp
 8001ae8:	4688      	mov	r8, r1
 8001aea:	9900      	ldr	r1, [sp, #0]
 8001aec:	404a      	eors	r2, r1
 8001aee:	2180      	movs	r1, #128	@ 0x80
 8001af0:	0109      	lsls	r1, r1, #4
 8001af2:	468c      	mov	ip, r1
 8001af4:	0029      	movs	r1, r5
 8001af6:	4461      	add	r1, ip
 8001af8:	9101      	str	r1, [sp, #4]
 8001afa:	4641      	mov	r1, r8
 8001afc:	290a      	cmp	r1, #10
 8001afe:	dd00      	ble.n	8001b02 <__aeabi_dmul+0xf6>
 8001b00:	e233      	b.n	8001f6a <__aeabi_dmul+0x55e>
 8001b02:	4693      	mov	fp, r2
 8001b04:	2603      	movs	r6, #3
 8001b06:	4642      	mov	r2, r8
 8001b08:	2701      	movs	r7, #1
 8001b0a:	4097      	lsls	r7, r2
 8001b0c:	21a6      	movs	r1, #166	@ 0xa6
 8001b0e:	003a      	movs	r2, r7
 8001b10:	00c9      	lsls	r1, r1, #3
 8001b12:	400a      	ands	r2, r1
 8001b14:	420f      	tst	r7, r1
 8001b16:	d031      	beq.n	8001b7c <__aeabi_dmul+0x170>
 8001b18:	9e02      	ldr	r6, [sp, #8]
 8001b1a:	2e02      	cmp	r6, #2
 8001b1c:	d100      	bne.n	8001b20 <__aeabi_dmul+0x114>
 8001b1e:	e235      	b.n	8001f8c <__aeabi_dmul+0x580>
 8001b20:	2e03      	cmp	r6, #3
 8001b22:	d100      	bne.n	8001b26 <__aeabi_dmul+0x11a>
 8001b24:	e1d2      	b.n	8001ecc <__aeabi_dmul+0x4c0>
 8001b26:	4654      	mov	r4, sl
 8001b28:	4648      	mov	r0, r9
 8001b2a:	2e01      	cmp	r6, #1
 8001b2c:	d0c1      	beq.n	8001ab2 <__aeabi_dmul+0xa6>
 8001b2e:	9a01      	ldr	r2, [sp, #4]
 8001b30:	4b7d      	ldr	r3, [pc, #500]	@ (8001d28 <__aeabi_dmul+0x31c>)
 8001b32:	4694      	mov	ip, r2
 8001b34:	4463      	add	r3, ip
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	dc00      	bgt.n	8001b3c <__aeabi_dmul+0x130>
 8001b3a:	e0c0      	b.n	8001cbe <__aeabi_dmul+0x2b2>
 8001b3c:	0742      	lsls	r2, r0, #29
 8001b3e:	d009      	beq.n	8001b54 <__aeabi_dmul+0x148>
 8001b40:	220f      	movs	r2, #15
 8001b42:	4002      	ands	r2, r0
 8001b44:	2a04      	cmp	r2, #4
 8001b46:	d005      	beq.n	8001b54 <__aeabi_dmul+0x148>
 8001b48:	1d02      	adds	r2, r0, #4
 8001b4a:	4282      	cmp	r2, r0
 8001b4c:	4180      	sbcs	r0, r0
 8001b4e:	4240      	negs	r0, r0
 8001b50:	1824      	adds	r4, r4, r0
 8001b52:	0010      	movs	r0, r2
 8001b54:	01e2      	lsls	r2, r4, #7
 8001b56:	d506      	bpl.n	8001b66 <__aeabi_dmul+0x15a>
 8001b58:	4b74      	ldr	r3, [pc, #464]	@ (8001d2c <__aeabi_dmul+0x320>)
 8001b5a:	9a01      	ldr	r2, [sp, #4]
 8001b5c:	401c      	ands	r4, r3
 8001b5e:	2380      	movs	r3, #128	@ 0x80
 8001b60:	4694      	mov	ip, r2
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	4463      	add	r3, ip
 8001b66:	4a72      	ldr	r2, [pc, #456]	@ (8001d30 <__aeabi_dmul+0x324>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	dc6b      	bgt.n	8001c44 <__aeabi_dmul+0x238>
 8001b6c:	0762      	lsls	r2, r4, #29
 8001b6e:	08c0      	lsrs	r0, r0, #3
 8001b70:	0264      	lsls	r4, r4, #9
 8001b72:	055b      	lsls	r3, r3, #21
 8001b74:	4302      	orrs	r2, r0
 8001b76:	0b24      	lsrs	r4, r4, #12
 8001b78:	0d5b      	lsrs	r3, r3, #21
 8001b7a:	e79d      	b.n	8001ab8 <__aeabi_dmul+0xac>
 8001b7c:	2190      	movs	r1, #144	@ 0x90
 8001b7e:	0089      	lsls	r1, r1, #2
 8001b80:	420f      	tst	r7, r1
 8001b82:	d163      	bne.n	8001c4c <__aeabi_dmul+0x240>
 8001b84:	2288      	movs	r2, #136	@ 0x88
 8001b86:	423a      	tst	r2, r7
 8001b88:	d100      	bne.n	8001b8c <__aeabi_dmul+0x180>
 8001b8a:	e0d7      	b.n	8001d3c <__aeabi_dmul+0x330>
 8001b8c:	9b00      	ldr	r3, [sp, #0]
 8001b8e:	46a2      	mov	sl, r4
 8001b90:	469b      	mov	fp, r3
 8001b92:	4681      	mov	r9, r0
 8001b94:	9602      	str	r6, [sp, #8]
 8001b96:	e7bf      	b.n	8001b18 <__aeabi_dmul+0x10c>
 8001b98:	0023      	movs	r3, r4
 8001b9a:	4333      	orrs	r3, r6
 8001b9c:	d100      	bne.n	8001ba0 <__aeabi_dmul+0x194>
 8001b9e:	e07f      	b.n	8001ca0 <__aeabi_dmul+0x294>
 8001ba0:	2c00      	cmp	r4, #0
 8001ba2:	d100      	bne.n	8001ba6 <__aeabi_dmul+0x19a>
 8001ba4:	e1ad      	b.n	8001f02 <__aeabi_dmul+0x4f6>
 8001ba6:	0020      	movs	r0, r4
 8001ba8:	f000 fe8c 	bl	80028c4 <__clzsi2>
 8001bac:	0002      	movs	r2, r0
 8001bae:	0003      	movs	r3, r0
 8001bb0:	3a0b      	subs	r2, #11
 8001bb2:	201d      	movs	r0, #29
 8001bb4:	0019      	movs	r1, r3
 8001bb6:	1a82      	subs	r2, r0, r2
 8001bb8:	0030      	movs	r0, r6
 8001bba:	3908      	subs	r1, #8
 8001bbc:	40d0      	lsrs	r0, r2
 8001bbe:	408c      	lsls	r4, r1
 8001bc0:	4304      	orrs	r4, r0
 8001bc2:	0030      	movs	r0, r6
 8001bc4:	4088      	lsls	r0, r1
 8001bc6:	4a5b      	ldr	r2, [pc, #364]	@ (8001d34 <__aeabi_dmul+0x328>)
 8001bc8:	1aeb      	subs	r3, r5, r3
 8001bca:	4694      	mov	ip, r2
 8001bcc:	4463      	add	r3, ip
 8001bce:	1c5a      	adds	r2, r3, #1
 8001bd0:	9201      	str	r2, [sp, #4]
 8001bd2:	4642      	mov	r2, r8
 8001bd4:	2600      	movs	r6, #0
 8001bd6:	2a0a      	cmp	r2, #10
 8001bd8:	dc00      	bgt.n	8001bdc <__aeabi_dmul+0x1d0>
 8001bda:	e75a      	b.n	8001a92 <__aeabi_dmul+0x86>
 8001bdc:	e79c      	b.n	8001b18 <__aeabi_dmul+0x10c>
 8001bde:	4653      	mov	r3, sl
 8001be0:	4303      	orrs	r3, r0
 8001be2:	4699      	mov	r9, r3
 8001be4:	d054      	beq.n	8001c90 <__aeabi_dmul+0x284>
 8001be6:	4653      	mov	r3, sl
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d100      	bne.n	8001bee <__aeabi_dmul+0x1e2>
 8001bec:	e177      	b.n	8001ede <__aeabi_dmul+0x4d2>
 8001bee:	4650      	mov	r0, sl
 8001bf0:	f000 fe68 	bl	80028c4 <__clzsi2>
 8001bf4:	230b      	movs	r3, #11
 8001bf6:	425b      	negs	r3, r3
 8001bf8:	469c      	mov	ip, r3
 8001bfa:	0002      	movs	r2, r0
 8001bfc:	4484      	add	ip, r0
 8001bfe:	0011      	movs	r1, r2
 8001c00:	4650      	mov	r0, sl
 8001c02:	3908      	subs	r1, #8
 8001c04:	4088      	lsls	r0, r1
 8001c06:	231d      	movs	r3, #29
 8001c08:	4680      	mov	r8, r0
 8001c0a:	4660      	mov	r0, ip
 8001c0c:	1a1b      	subs	r3, r3, r0
 8001c0e:	0020      	movs	r0, r4
 8001c10:	40d8      	lsrs	r0, r3
 8001c12:	0003      	movs	r3, r0
 8001c14:	4640      	mov	r0, r8
 8001c16:	4303      	orrs	r3, r0
 8001c18:	469a      	mov	sl, r3
 8001c1a:	0023      	movs	r3, r4
 8001c1c:	408b      	lsls	r3, r1
 8001c1e:	4699      	mov	r9, r3
 8001c20:	2300      	movs	r3, #0
 8001c22:	4d44      	ldr	r5, [pc, #272]	@ (8001d34 <__aeabi_dmul+0x328>)
 8001c24:	4698      	mov	r8, r3
 8001c26:	1aad      	subs	r5, r5, r2
 8001c28:	9302      	str	r3, [sp, #8]
 8001c2a:	e715      	b.n	8001a58 <__aeabi_dmul+0x4c>
 8001c2c:	4652      	mov	r2, sl
 8001c2e:	4302      	orrs	r2, r0
 8001c30:	4691      	mov	r9, r2
 8001c32:	d126      	bne.n	8001c82 <__aeabi_dmul+0x276>
 8001c34:	2200      	movs	r2, #0
 8001c36:	001d      	movs	r5, r3
 8001c38:	2302      	movs	r3, #2
 8001c3a:	4692      	mov	sl, r2
 8001c3c:	3208      	adds	r2, #8
 8001c3e:	4690      	mov	r8, r2
 8001c40:	9302      	str	r3, [sp, #8]
 8001c42:	e709      	b.n	8001a58 <__aeabi_dmul+0x4c>
 8001c44:	2400      	movs	r4, #0
 8001c46:	2200      	movs	r2, #0
 8001c48:	4b35      	ldr	r3, [pc, #212]	@ (8001d20 <__aeabi_dmul+0x314>)
 8001c4a:	e735      	b.n	8001ab8 <__aeabi_dmul+0xac>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	2480      	movs	r4, #128	@ 0x80
 8001c50:	469b      	mov	fp, r3
 8001c52:	0324      	lsls	r4, r4, #12
 8001c54:	4b32      	ldr	r3, [pc, #200]	@ (8001d20 <__aeabi_dmul+0x314>)
 8001c56:	e72f      	b.n	8001ab8 <__aeabi_dmul+0xac>
 8001c58:	2202      	movs	r2, #2
 8001c5a:	4641      	mov	r1, r8
 8001c5c:	4311      	orrs	r1, r2
 8001c5e:	2280      	movs	r2, #128	@ 0x80
 8001c60:	0112      	lsls	r2, r2, #4
 8001c62:	4694      	mov	ip, r2
 8001c64:	002a      	movs	r2, r5
 8001c66:	4462      	add	r2, ip
 8001c68:	4688      	mov	r8, r1
 8001c6a:	9201      	str	r2, [sp, #4]
 8001c6c:	290a      	cmp	r1, #10
 8001c6e:	dd00      	ble.n	8001c72 <__aeabi_dmul+0x266>
 8001c70:	e752      	b.n	8001b18 <__aeabi_dmul+0x10c>
 8001c72:	465a      	mov	r2, fp
 8001c74:	2000      	movs	r0, #0
 8001c76:	9900      	ldr	r1, [sp, #0]
 8001c78:	0004      	movs	r4, r0
 8001c7a:	404a      	eors	r2, r1
 8001c7c:	4693      	mov	fp, r2
 8001c7e:	2602      	movs	r6, #2
 8001c80:	e70b      	b.n	8001a9a <__aeabi_dmul+0x8e>
 8001c82:	220c      	movs	r2, #12
 8001c84:	001d      	movs	r5, r3
 8001c86:	2303      	movs	r3, #3
 8001c88:	4681      	mov	r9, r0
 8001c8a:	4690      	mov	r8, r2
 8001c8c:	9302      	str	r3, [sp, #8]
 8001c8e:	e6e3      	b.n	8001a58 <__aeabi_dmul+0x4c>
 8001c90:	2300      	movs	r3, #0
 8001c92:	469a      	mov	sl, r3
 8001c94:	3304      	adds	r3, #4
 8001c96:	4698      	mov	r8, r3
 8001c98:	3b03      	subs	r3, #3
 8001c9a:	2500      	movs	r5, #0
 8001c9c:	9302      	str	r3, [sp, #8]
 8001c9e:	e6db      	b.n	8001a58 <__aeabi_dmul+0x4c>
 8001ca0:	4642      	mov	r2, r8
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	002b      	movs	r3, r5
 8001ca8:	4690      	mov	r8, r2
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	9201      	str	r2, [sp, #4]
 8001cae:	4642      	mov	r2, r8
 8001cb0:	2400      	movs	r4, #0
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	2601      	movs	r6, #1
 8001cb6:	2a0a      	cmp	r2, #10
 8001cb8:	dc00      	bgt.n	8001cbc <__aeabi_dmul+0x2b0>
 8001cba:	e6ea      	b.n	8001a92 <__aeabi_dmul+0x86>
 8001cbc:	e72c      	b.n	8001b18 <__aeabi_dmul+0x10c>
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	1ad2      	subs	r2, r2, r3
 8001cc2:	2a38      	cmp	r2, #56	@ 0x38
 8001cc4:	dd00      	ble.n	8001cc8 <__aeabi_dmul+0x2bc>
 8001cc6:	e6f4      	b.n	8001ab2 <__aeabi_dmul+0xa6>
 8001cc8:	2a1f      	cmp	r2, #31
 8001cca:	dc00      	bgt.n	8001cce <__aeabi_dmul+0x2c2>
 8001ccc:	e12a      	b.n	8001f24 <__aeabi_dmul+0x518>
 8001cce:	211f      	movs	r1, #31
 8001cd0:	4249      	negs	r1, r1
 8001cd2:	1acb      	subs	r3, r1, r3
 8001cd4:	0021      	movs	r1, r4
 8001cd6:	40d9      	lsrs	r1, r3
 8001cd8:	000b      	movs	r3, r1
 8001cda:	2a20      	cmp	r2, #32
 8001cdc:	d005      	beq.n	8001cea <__aeabi_dmul+0x2de>
 8001cde:	4a16      	ldr	r2, [pc, #88]	@ (8001d38 <__aeabi_dmul+0x32c>)
 8001ce0:	9d01      	ldr	r5, [sp, #4]
 8001ce2:	4694      	mov	ip, r2
 8001ce4:	4465      	add	r5, ip
 8001ce6:	40ac      	lsls	r4, r5
 8001ce8:	4320      	orrs	r0, r4
 8001cea:	1e42      	subs	r2, r0, #1
 8001cec:	4190      	sbcs	r0, r2
 8001cee:	4318      	orrs	r0, r3
 8001cf0:	2307      	movs	r3, #7
 8001cf2:	0019      	movs	r1, r3
 8001cf4:	2400      	movs	r4, #0
 8001cf6:	4001      	ands	r1, r0
 8001cf8:	4203      	tst	r3, r0
 8001cfa:	d00c      	beq.n	8001d16 <__aeabi_dmul+0x30a>
 8001cfc:	230f      	movs	r3, #15
 8001cfe:	4003      	ands	r3, r0
 8001d00:	2b04      	cmp	r3, #4
 8001d02:	d100      	bne.n	8001d06 <__aeabi_dmul+0x2fa>
 8001d04:	e140      	b.n	8001f88 <__aeabi_dmul+0x57c>
 8001d06:	1d03      	adds	r3, r0, #4
 8001d08:	4283      	cmp	r3, r0
 8001d0a:	41a4      	sbcs	r4, r4
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	4264      	negs	r4, r4
 8001d10:	0761      	lsls	r1, r4, #29
 8001d12:	0264      	lsls	r4, r4, #9
 8001d14:	0b24      	lsrs	r4, r4, #12
 8001d16:	08c2      	lsrs	r2, r0, #3
 8001d18:	2300      	movs	r3, #0
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	e6cc      	b.n	8001ab8 <__aeabi_dmul+0xac>
 8001d1e:	46c0      	nop			@ (mov r8, r8)
 8001d20:	000007ff 	.word	0x000007ff
 8001d24:	fffffc01 	.word	0xfffffc01
 8001d28:	000003ff 	.word	0x000003ff
 8001d2c:	feffffff 	.word	0xfeffffff
 8001d30:	000007fe 	.word	0x000007fe
 8001d34:	fffffc0d 	.word	0xfffffc0d
 8001d38:	0000043e 	.word	0x0000043e
 8001d3c:	4649      	mov	r1, r9
 8001d3e:	464a      	mov	r2, r9
 8001d40:	0409      	lsls	r1, r1, #16
 8001d42:	0c09      	lsrs	r1, r1, #16
 8001d44:	000d      	movs	r5, r1
 8001d46:	0c16      	lsrs	r6, r2, #16
 8001d48:	0c02      	lsrs	r2, r0, #16
 8001d4a:	0400      	lsls	r0, r0, #16
 8001d4c:	0c00      	lsrs	r0, r0, #16
 8001d4e:	4345      	muls	r5, r0
 8001d50:	46ac      	mov	ip, r5
 8001d52:	0005      	movs	r5, r0
 8001d54:	4375      	muls	r5, r6
 8001d56:	46a8      	mov	r8, r5
 8001d58:	0015      	movs	r5, r2
 8001d5a:	000f      	movs	r7, r1
 8001d5c:	4375      	muls	r5, r6
 8001d5e:	9200      	str	r2, [sp, #0]
 8001d60:	9502      	str	r5, [sp, #8]
 8001d62:	002a      	movs	r2, r5
 8001d64:	9d00      	ldr	r5, [sp, #0]
 8001d66:	436f      	muls	r7, r5
 8001d68:	4665      	mov	r5, ip
 8001d6a:	0c2d      	lsrs	r5, r5, #16
 8001d6c:	46a9      	mov	r9, r5
 8001d6e:	4447      	add	r7, r8
 8001d70:	444f      	add	r7, r9
 8001d72:	45b8      	cmp	r8, r7
 8001d74:	d905      	bls.n	8001d82 <__aeabi_dmul+0x376>
 8001d76:	0015      	movs	r5, r2
 8001d78:	2280      	movs	r2, #128	@ 0x80
 8001d7a:	0252      	lsls	r2, r2, #9
 8001d7c:	4690      	mov	r8, r2
 8001d7e:	4445      	add	r5, r8
 8001d80:	9502      	str	r5, [sp, #8]
 8001d82:	0c3d      	lsrs	r5, r7, #16
 8001d84:	9503      	str	r5, [sp, #12]
 8001d86:	4665      	mov	r5, ip
 8001d88:	042d      	lsls	r5, r5, #16
 8001d8a:	043f      	lsls	r7, r7, #16
 8001d8c:	0c2d      	lsrs	r5, r5, #16
 8001d8e:	46ac      	mov	ip, r5
 8001d90:	003d      	movs	r5, r7
 8001d92:	4465      	add	r5, ip
 8001d94:	9504      	str	r5, [sp, #16]
 8001d96:	0c25      	lsrs	r5, r4, #16
 8001d98:	0424      	lsls	r4, r4, #16
 8001d9a:	0c24      	lsrs	r4, r4, #16
 8001d9c:	46ac      	mov	ip, r5
 8001d9e:	0025      	movs	r5, r4
 8001da0:	4375      	muls	r5, r6
 8001da2:	46a8      	mov	r8, r5
 8001da4:	4665      	mov	r5, ip
 8001da6:	000f      	movs	r7, r1
 8001da8:	4369      	muls	r1, r5
 8001daa:	4441      	add	r1, r8
 8001dac:	4689      	mov	r9, r1
 8001dae:	4367      	muls	r7, r4
 8001db0:	0c39      	lsrs	r1, r7, #16
 8001db2:	4449      	add	r1, r9
 8001db4:	436e      	muls	r6, r5
 8001db6:	4588      	cmp	r8, r1
 8001db8:	d903      	bls.n	8001dc2 <__aeabi_dmul+0x3b6>
 8001dba:	2280      	movs	r2, #128	@ 0x80
 8001dbc:	0252      	lsls	r2, r2, #9
 8001dbe:	4690      	mov	r8, r2
 8001dc0:	4446      	add	r6, r8
 8001dc2:	0c0d      	lsrs	r5, r1, #16
 8001dc4:	46a8      	mov	r8, r5
 8001dc6:	0035      	movs	r5, r6
 8001dc8:	4445      	add	r5, r8
 8001dca:	9505      	str	r5, [sp, #20]
 8001dcc:	9d03      	ldr	r5, [sp, #12]
 8001dce:	043f      	lsls	r7, r7, #16
 8001dd0:	46a8      	mov	r8, r5
 8001dd2:	0c3f      	lsrs	r7, r7, #16
 8001dd4:	0409      	lsls	r1, r1, #16
 8001dd6:	19c9      	adds	r1, r1, r7
 8001dd8:	4488      	add	r8, r1
 8001dda:	4645      	mov	r5, r8
 8001ddc:	9503      	str	r5, [sp, #12]
 8001dde:	4655      	mov	r5, sl
 8001de0:	042e      	lsls	r6, r5, #16
 8001de2:	0c36      	lsrs	r6, r6, #16
 8001de4:	0c2f      	lsrs	r7, r5, #16
 8001de6:	0035      	movs	r5, r6
 8001de8:	4345      	muls	r5, r0
 8001dea:	4378      	muls	r0, r7
 8001dec:	4681      	mov	r9, r0
 8001dee:	0038      	movs	r0, r7
 8001df0:	46a8      	mov	r8, r5
 8001df2:	0c2d      	lsrs	r5, r5, #16
 8001df4:	46aa      	mov	sl, r5
 8001df6:	9a00      	ldr	r2, [sp, #0]
 8001df8:	4350      	muls	r0, r2
 8001dfa:	4372      	muls	r2, r6
 8001dfc:	444a      	add	r2, r9
 8001dfe:	4452      	add	r2, sl
 8001e00:	4591      	cmp	r9, r2
 8001e02:	d903      	bls.n	8001e0c <__aeabi_dmul+0x400>
 8001e04:	2580      	movs	r5, #128	@ 0x80
 8001e06:	026d      	lsls	r5, r5, #9
 8001e08:	46a9      	mov	r9, r5
 8001e0a:	4448      	add	r0, r9
 8001e0c:	0c15      	lsrs	r5, r2, #16
 8001e0e:	46a9      	mov	r9, r5
 8001e10:	4645      	mov	r5, r8
 8001e12:	042d      	lsls	r5, r5, #16
 8001e14:	0c2d      	lsrs	r5, r5, #16
 8001e16:	46a8      	mov	r8, r5
 8001e18:	4665      	mov	r5, ip
 8001e1a:	437d      	muls	r5, r7
 8001e1c:	0412      	lsls	r2, r2, #16
 8001e1e:	4448      	add	r0, r9
 8001e20:	4490      	add	r8, r2
 8001e22:	46a9      	mov	r9, r5
 8001e24:	0032      	movs	r2, r6
 8001e26:	4665      	mov	r5, ip
 8001e28:	4362      	muls	r2, r4
 8001e2a:	436e      	muls	r6, r5
 8001e2c:	437c      	muls	r4, r7
 8001e2e:	0c17      	lsrs	r7, r2, #16
 8001e30:	1936      	adds	r6, r6, r4
 8001e32:	19bf      	adds	r7, r7, r6
 8001e34:	42bc      	cmp	r4, r7
 8001e36:	d903      	bls.n	8001e40 <__aeabi_dmul+0x434>
 8001e38:	2480      	movs	r4, #128	@ 0x80
 8001e3a:	0264      	lsls	r4, r4, #9
 8001e3c:	46a4      	mov	ip, r4
 8001e3e:	44e1      	add	r9, ip
 8001e40:	9c02      	ldr	r4, [sp, #8]
 8001e42:	9e03      	ldr	r6, [sp, #12]
 8001e44:	46a4      	mov	ip, r4
 8001e46:	9d05      	ldr	r5, [sp, #20]
 8001e48:	4466      	add	r6, ip
 8001e4a:	428e      	cmp	r6, r1
 8001e4c:	4189      	sbcs	r1, r1
 8001e4e:	46ac      	mov	ip, r5
 8001e50:	0412      	lsls	r2, r2, #16
 8001e52:	043c      	lsls	r4, r7, #16
 8001e54:	0c12      	lsrs	r2, r2, #16
 8001e56:	18a2      	adds	r2, r4, r2
 8001e58:	4462      	add	r2, ip
 8001e5a:	4249      	negs	r1, r1
 8001e5c:	1854      	adds	r4, r2, r1
 8001e5e:	4446      	add	r6, r8
 8001e60:	46a4      	mov	ip, r4
 8001e62:	4546      	cmp	r6, r8
 8001e64:	41a4      	sbcs	r4, r4
 8001e66:	4682      	mov	sl, r0
 8001e68:	4264      	negs	r4, r4
 8001e6a:	46a0      	mov	r8, r4
 8001e6c:	42aa      	cmp	r2, r5
 8001e6e:	4192      	sbcs	r2, r2
 8001e70:	458c      	cmp	ip, r1
 8001e72:	4189      	sbcs	r1, r1
 8001e74:	44e2      	add	sl, ip
 8001e76:	44d0      	add	r8, sl
 8001e78:	4249      	negs	r1, r1
 8001e7a:	4252      	negs	r2, r2
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	45a0      	cmp	r8, r4
 8001e80:	41a4      	sbcs	r4, r4
 8001e82:	4582      	cmp	sl, r0
 8001e84:	4189      	sbcs	r1, r1
 8001e86:	4264      	negs	r4, r4
 8001e88:	4249      	negs	r1, r1
 8001e8a:	430c      	orrs	r4, r1
 8001e8c:	4641      	mov	r1, r8
 8001e8e:	0c3f      	lsrs	r7, r7, #16
 8001e90:	19d2      	adds	r2, r2, r7
 8001e92:	1912      	adds	r2, r2, r4
 8001e94:	0dcc      	lsrs	r4, r1, #23
 8001e96:	9904      	ldr	r1, [sp, #16]
 8001e98:	0270      	lsls	r0, r6, #9
 8001e9a:	4308      	orrs	r0, r1
 8001e9c:	1e41      	subs	r1, r0, #1
 8001e9e:	4188      	sbcs	r0, r1
 8001ea0:	4641      	mov	r1, r8
 8001ea2:	444a      	add	r2, r9
 8001ea4:	0df6      	lsrs	r6, r6, #23
 8001ea6:	0252      	lsls	r2, r2, #9
 8001ea8:	4330      	orrs	r0, r6
 8001eaa:	0249      	lsls	r1, r1, #9
 8001eac:	4314      	orrs	r4, r2
 8001eae:	4308      	orrs	r0, r1
 8001eb0:	01d2      	lsls	r2, r2, #7
 8001eb2:	d535      	bpl.n	8001f20 <__aeabi_dmul+0x514>
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	0843      	lsrs	r3, r0, #1
 8001eb8:	4002      	ands	r2, r0
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	07e0      	lsls	r0, r4, #31
 8001ebe:	4318      	orrs	r0, r3
 8001ec0:	0864      	lsrs	r4, r4, #1
 8001ec2:	e634      	b.n	8001b2e <__aeabi_dmul+0x122>
 8001ec4:	9b00      	ldr	r3, [sp, #0]
 8001ec6:	46a2      	mov	sl, r4
 8001ec8:	469b      	mov	fp, r3
 8001eca:	4681      	mov	r9, r0
 8001ecc:	2480      	movs	r4, #128	@ 0x80
 8001ece:	4653      	mov	r3, sl
 8001ed0:	0324      	lsls	r4, r4, #12
 8001ed2:	431c      	orrs	r4, r3
 8001ed4:	0324      	lsls	r4, r4, #12
 8001ed6:	464a      	mov	r2, r9
 8001ed8:	4b2e      	ldr	r3, [pc, #184]	@ (8001f94 <__aeabi_dmul+0x588>)
 8001eda:	0b24      	lsrs	r4, r4, #12
 8001edc:	e5ec      	b.n	8001ab8 <__aeabi_dmul+0xac>
 8001ede:	f000 fcf1 	bl	80028c4 <__clzsi2>
 8001ee2:	2315      	movs	r3, #21
 8001ee4:	469c      	mov	ip, r3
 8001ee6:	4484      	add	ip, r0
 8001ee8:	0002      	movs	r2, r0
 8001eea:	4663      	mov	r3, ip
 8001eec:	3220      	adds	r2, #32
 8001eee:	2b1c      	cmp	r3, #28
 8001ef0:	dc00      	bgt.n	8001ef4 <__aeabi_dmul+0x4e8>
 8001ef2:	e684      	b.n	8001bfe <__aeabi_dmul+0x1f2>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	4699      	mov	r9, r3
 8001ef8:	0023      	movs	r3, r4
 8001efa:	3808      	subs	r0, #8
 8001efc:	4083      	lsls	r3, r0
 8001efe:	469a      	mov	sl, r3
 8001f00:	e68e      	b.n	8001c20 <__aeabi_dmul+0x214>
 8001f02:	f000 fcdf 	bl	80028c4 <__clzsi2>
 8001f06:	0002      	movs	r2, r0
 8001f08:	0003      	movs	r3, r0
 8001f0a:	3215      	adds	r2, #21
 8001f0c:	3320      	adds	r3, #32
 8001f0e:	2a1c      	cmp	r2, #28
 8001f10:	dc00      	bgt.n	8001f14 <__aeabi_dmul+0x508>
 8001f12:	e64e      	b.n	8001bb2 <__aeabi_dmul+0x1a6>
 8001f14:	0002      	movs	r2, r0
 8001f16:	0034      	movs	r4, r6
 8001f18:	3a08      	subs	r2, #8
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	4094      	lsls	r4, r2
 8001f1e:	e652      	b.n	8001bc6 <__aeabi_dmul+0x1ba>
 8001f20:	9301      	str	r3, [sp, #4]
 8001f22:	e604      	b.n	8001b2e <__aeabi_dmul+0x122>
 8001f24:	4b1c      	ldr	r3, [pc, #112]	@ (8001f98 <__aeabi_dmul+0x58c>)
 8001f26:	0021      	movs	r1, r4
 8001f28:	469c      	mov	ip, r3
 8001f2a:	0003      	movs	r3, r0
 8001f2c:	9d01      	ldr	r5, [sp, #4]
 8001f2e:	40d3      	lsrs	r3, r2
 8001f30:	4465      	add	r5, ip
 8001f32:	40a9      	lsls	r1, r5
 8001f34:	4319      	orrs	r1, r3
 8001f36:	0003      	movs	r3, r0
 8001f38:	40ab      	lsls	r3, r5
 8001f3a:	1e58      	subs	r0, r3, #1
 8001f3c:	4183      	sbcs	r3, r0
 8001f3e:	4319      	orrs	r1, r3
 8001f40:	0008      	movs	r0, r1
 8001f42:	40d4      	lsrs	r4, r2
 8001f44:	074b      	lsls	r3, r1, #29
 8001f46:	d009      	beq.n	8001f5c <__aeabi_dmul+0x550>
 8001f48:	230f      	movs	r3, #15
 8001f4a:	400b      	ands	r3, r1
 8001f4c:	2b04      	cmp	r3, #4
 8001f4e:	d005      	beq.n	8001f5c <__aeabi_dmul+0x550>
 8001f50:	1d0b      	adds	r3, r1, #4
 8001f52:	428b      	cmp	r3, r1
 8001f54:	4180      	sbcs	r0, r0
 8001f56:	4240      	negs	r0, r0
 8001f58:	1824      	adds	r4, r4, r0
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	0223      	lsls	r3, r4, #8
 8001f5e:	d400      	bmi.n	8001f62 <__aeabi_dmul+0x556>
 8001f60:	e6d6      	b.n	8001d10 <__aeabi_dmul+0x304>
 8001f62:	2301      	movs	r3, #1
 8001f64:	2400      	movs	r4, #0
 8001f66:	2200      	movs	r2, #0
 8001f68:	e5a6      	b.n	8001ab8 <__aeabi_dmul+0xac>
 8001f6a:	290f      	cmp	r1, #15
 8001f6c:	d1aa      	bne.n	8001ec4 <__aeabi_dmul+0x4b8>
 8001f6e:	2380      	movs	r3, #128	@ 0x80
 8001f70:	4652      	mov	r2, sl
 8001f72:	031b      	lsls	r3, r3, #12
 8001f74:	421a      	tst	r2, r3
 8001f76:	d0a9      	beq.n	8001ecc <__aeabi_dmul+0x4c0>
 8001f78:	421c      	tst	r4, r3
 8001f7a:	d1a7      	bne.n	8001ecc <__aeabi_dmul+0x4c0>
 8001f7c:	431c      	orrs	r4, r3
 8001f7e:	9b00      	ldr	r3, [sp, #0]
 8001f80:	0002      	movs	r2, r0
 8001f82:	469b      	mov	fp, r3
 8001f84:	4b03      	ldr	r3, [pc, #12]	@ (8001f94 <__aeabi_dmul+0x588>)
 8001f86:	e597      	b.n	8001ab8 <__aeabi_dmul+0xac>
 8001f88:	2400      	movs	r4, #0
 8001f8a:	e6c1      	b.n	8001d10 <__aeabi_dmul+0x304>
 8001f8c:	2400      	movs	r4, #0
 8001f8e:	4b01      	ldr	r3, [pc, #4]	@ (8001f94 <__aeabi_dmul+0x588>)
 8001f90:	0022      	movs	r2, r4
 8001f92:	e591      	b.n	8001ab8 <__aeabi_dmul+0xac>
 8001f94:	000007ff 	.word	0x000007ff
 8001f98:	0000041e 	.word	0x0000041e

08001f9c <__aeabi_dsub>:
 8001f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f9e:	464e      	mov	r6, r9
 8001fa0:	4645      	mov	r5, r8
 8001fa2:	46de      	mov	lr, fp
 8001fa4:	4657      	mov	r7, sl
 8001fa6:	b5e0      	push	{r5, r6, r7, lr}
 8001fa8:	b085      	sub	sp, #20
 8001faa:	9000      	str	r0, [sp, #0]
 8001fac:	9101      	str	r1, [sp, #4]
 8001fae:	030c      	lsls	r4, r1, #12
 8001fb0:	004f      	lsls	r7, r1, #1
 8001fb2:	0fce      	lsrs	r6, r1, #31
 8001fb4:	0a61      	lsrs	r1, r4, #9
 8001fb6:	9c00      	ldr	r4, [sp, #0]
 8001fb8:	46b0      	mov	r8, r6
 8001fba:	0f64      	lsrs	r4, r4, #29
 8001fbc:	430c      	orrs	r4, r1
 8001fbe:	9900      	ldr	r1, [sp, #0]
 8001fc0:	0d7f      	lsrs	r7, r7, #21
 8001fc2:	00c8      	lsls	r0, r1, #3
 8001fc4:	0011      	movs	r1, r2
 8001fc6:	001a      	movs	r2, r3
 8001fc8:	031b      	lsls	r3, r3, #12
 8001fca:	469c      	mov	ip, r3
 8001fcc:	9100      	str	r1, [sp, #0]
 8001fce:	9201      	str	r2, [sp, #4]
 8001fd0:	0051      	lsls	r1, r2, #1
 8001fd2:	0d4b      	lsrs	r3, r1, #21
 8001fd4:	4699      	mov	r9, r3
 8001fd6:	9b01      	ldr	r3, [sp, #4]
 8001fd8:	9d00      	ldr	r5, [sp, #0]
 8001fda:	0fd9      	lsrs	r1, r3, #31
 8001fdc:	4663      	mov	r3, ip
 8001fde:	0f6a      	lsrs	r2, r5, #29
 8001fe0:	0a5b      	lsrs	r3, r3, #9
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	00ea      	lsls	r2, r5, #3
 8001fe6:	4694      	mov	ip, r2
 8001fe8:	4693      	mov	fp, r2
 8001fea:	4ac1      	ldr	r2, [pc, #772]	@ (80022f0 <__aeabi_dsub+0x354>)
 8001fec:	9003      	str	r0, [sp, #12]
 8001fee:	9302      	str	r3, [sp, #8]
 8001ff0:	4591      	cmp	r9, r2
 8001ff2:	d100      	bne.n	8001ff6 <__aeabi_dsub+0x5a>
 8001ff4:	e0cd      	b.n	8002192 <__aeabi_dsub+0x1f6>
 8001ff6:	2501      	movs	r5, #1
 8001ff8:	4069      	eors	r1, r5
 8001ffa:	464d      	mov	r5, r9
 8001ffc:	1b7d      	subs	r5, r7, r5
 8001ffe:	46aa      	mov	sl, r5
 8002000:	428e      	cmp	r6, r1
 8002002:	d100      	bne.n	8002006 <__aeabi_dsub+0x6a>
 8002004:	e080      	b.n	8002108 <__aeabi_dsub+0x16c>
 8002006:	2d00      	cmp	r5, #0
 8002008:	dc00      	bgt.n	800200c <__aeabi_dsub+0x70>
 800200a:	e335      	b.n	8002678 <__aeabi_dsub+0x6dc>
 800200c:	4649      	mov	r1, r9
 800200e:	2900      	cmp	r1, #0
 8002010:	d100      	bne.n	8002014 <__aeabi_dsub+0x78>
 8002012:	e0df      	b.n	80021d4 <__aeabi_dsub+0x238>
 8002014:	4297      	cmp	r7, r2
 8002016:	d100      	bne.n	800201a <__aeabi_dsub+0x7e>
 8002018:	e194      	b.n	8002344 <__aeabi_dsub+0x3a8>
 800201a:	4652      	mov	r2, sl
 800201c:	2501      	movs	r5, #1
 800201e:	2a38      	cmp	r2, #56	@ 0x38
 8002020:	dc19      	bgt.n	8002056 <__aeabi_dsub+0xba>
 8002022:	2280      	movs	r2, #128	@ 0x80
 8002024:	9b02      	ldr	r3, [sp, #8]
 8002026:	0412      	lsls	r2, r2, #16
 8002028:	4313      	orrs	r3, r2
 800202a:	9302      	str	r3, [sp, #8]
 800202c:	4652      	mov	r2, sl
 800202e:	2a1f      	cmp	r2, #31
 8002030:	dd00      	ble.n	8002034 <__aeabi_dsub+0x98>
 8002032:	e1e3      	b.n	80023fc <__aeabi_dsub+0x460>
 8002034:	4653      	mov	r3, sl
 8002036:	2220      	movs	r2, #32
 8002038:	4661      	mov	r1, ip
 800203a:	9d02      	ldr	r5, [sp, #8]
 800203c:	1ad2      	subs	r2, r2, r3
 800203e:	4095      	lsls	r5, r2
 8002040:	40d9      	lsrs	r1, r3
 8002042:	430d      	orrs	r5, r1
 8002044:	4661      	mov	r1, ip
 8002046:	4091      	lsls	r1, r2
 8002048:	000a      	movs	r2, r1
 800204a:	1e51      	subs	r1, r2, #1
 800204c:	418a      	sbcs	r2, r1
 800204e:	4315      	orrs	r5, r2
 8002050:	9a02      	ldr	r2, [sp, #8]
 8002052:	40da      	lsrs	r2, r3
 8002054:	1aa4      	subs	r4, r4, r2
 8002056:	1b45      	subs	r5, r0, r5
 8002058:	42a8      	cmp	r0, r5
 800205a:	4180      	sbcs	r0, r0
 800205c:	4240      	negs	r0, r0
 800205e:	1a24      	subs	r4, r4, r0
 8002060:	0223      	lsls	r3, r4, #8
 8002062:	d400      	bmi.n	8002066 <__aeabi_dsub+0xca>
 8002064:	e13d      	b.n	80022e2 <__aeabi_dsub+0x346>
 8002066:	0264      	lsls	r4, r4, #9
 8002068:	0a64      	lsrs	r4, r4, #9
 800206a:	2c00      	cmp	r4, #0
 800206c:	d100      	bne.n	8002070 <__aeabi_dsub+0xd4>
 800206e:	e147      	b.n	8002300 <__aeabi_dsub+0x364>
 8002070:	0020      	movs	r0, r4
 8002072:	f000 fc27 	bl	80028c4 <__clzsi2>
 8002076:	0003      	movs	r3, r0
 8002078:	3b08      	subs	r3, #8
 800207a:	2120      	movs	r1, #32
 800207c:	0028      	movs	r0, r5
 800207e:	1aca      	subs	r2, r1, r3
 8002080:	40d0      	lsrs	r0, r2
 8002082:	409c      	lsls	r4, r3
 8002084:	0002      	movs	r2, r0
 8002086:	409d      	lsls	r5, r3
 8002088:	4322      	orrs	r2, r4
 800208a:	429f      	cmp	r7, r3
 800208c:	dd00      	ble.n	8002090 <__aeabi_dsub+0xf4>
 800208e:	e177      	b.n	8002380 <__aeabi_dsub+0x3e4>
 8002090:	1bd8      	subs	r0, r3, r7
 8002092:	3001      	adds	r0, #1
 8002094:	1a09      	subs	r1, r1, r0
 8002096:	002c      	movs	r4, r5
 8002098:	408d      	lsls	r5, r1
 800209a:	40c4      	lsrs	r4, r0
 800209c:	1e6b      	subs	r3, r5, #1
 800209e:	419d      	sbcs	r5, r3
 80020a0:	0013      	movs	r3, r2
 80020a2:	40c2      	lsrs	r2, r0
 80020a4:	408b      	lsls	r3, r1
 80020a6:	4325      	orrs	r5, r4
 80020a8:	2700      	movs	r7, #0
 80020aa:	0014      	movs	r4, r2
 80020ac:	431d      	orrs	r5, r3
 80020ae:	076b      	lsls	r3, r5, #29
 80020b0:	d009      	beq.n	80020c6 <__aeabi_dsub+0x12a>
 80020b2:	230f      	movs	r3, #15
 80020b4:	402b      	ands	r3, r5
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d005      	beq.n	80020c6 <__aeabi_dsub+0x12a>
 80020ba:	1d2b      	adds	r3, r5, #4
 80020bc:	42ab      	cmp	r3, r5
 80020be:	41ad      	sbcs	r5, r5
 80020c0:	426d      	negs	r5, r5
 80020c2:	1964      	adds	r4, r4, r5
 80020c4:	001d      	movs	r5, r3
 80020c6:	0223      	lsls	r3, r4, #8
 80020c8:	d400      	bmi.n	80020cc <__aeabi_dsub+0x130>
 80020ca:	e140      	b.n	800234e <__aeabi_dsub+0x3b2>
 80020cc:	4a88      	ldr	r2, [pc, #544]	@ (80022f0 <__aeabi_dsub+0x354>)
 80020ce:	3701      	adds	r7, #1
 80020d0:	4297      	cmp	r7, r2
 80020d2:	d100      	bne.n	80020d6 <__aeabi_dsub+0x13a>
 80020d4:	e101      	b.n	80022da <__aeabi_dsub+0x33e>
 80020d6:	2601      	movs	r6, #1
 80020d8:	4643      	mov	r3, r8
 80020da:	4986      	ldr	r1, [pc, #536]	@ (80022f4 <__aeabi_dsub+0x358>)
 80020dc:	08ed      	lsrs	r5, r5, #3
 80020de:	4021      	ands	r1, r4
 80020e0:	074a      	lsls	r2, r1, #29
 80020e2:	432a      	orrs	r2, r5
 80020e4:	057c      	lsls	r4, r7, #21
 80020e6:	024d      	lsls	r5, r1, #9
 80020e8:	0b2d      	lsrs	r5, r5, #12
 80020ea:	0d64      	lsrs	r4, r4, #21
 80020ec:	401e      	ands	r6, r3
 80020ee:	0524      	lsls	r4, r4, #20
 80020f0:	432c      	orrs	r4, r5
 80020f2:	07f6      	lsls	r6, r6, #31
 80020f4:	4334      	orrs	r4, r6
 80020f6:	0010      	movs	r0, r2
 80020f8:	0021      	movs	r1, r4
 80020fa:	b005      	add	sp, #20
 80020fc:	bcf0      	pop	{r4, r5, r6, r7}
 80020fe:	46bb      	mov	fp, r7
 8002100:	46b2      	mov	sl, r6
 8002102:	46a9      	mov	r9, r5
 8002104:	46a0      	mov	r8, r4
 8002106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002108:	2d00      	cmp	r5, #0
 800210a:	dc00      	bgt.n	800210e <__aeabi_dsub+0x172>
 800210c:	e2d0      	b.n	80026b0 <__aeabi_dsub+0x714>
 800210e:	4649      	mov	r1, r9
 8002110:	2900      	cmp	r1, #0
 8002112:	d000      	beq.n	8002116 <__aeabi_dsub+0x17a>
 8002114:	e0d4      	b.n	80022c0 <__aeabi_dsub+0x324>
 8002116:	4661      	mov	r1, ip
 8002118:	9b02      	ldr	r3, [sp, #8]
 800211a:	4319      	orrs	r1, r3
 800211c:	d100      	bne.n	8002120 <__aeabi_dsub+0x184>
 800211e:	e12b      	b.n	8002378 <__aeabi_dsub+0x3dc>
 8002120:	1e69      	subs	r1, r5, #1
 8002122:	2d01      	cmp	r5, #1
 8002124:	d100      	bne.n	8002128 <__aeabi_dsub+0x18c>
 8002126:	e1d9      	b.n	80024dc <__aeabi_dsub+0x540>
 8002128:	4295      	cmp	r5, r2
 800212a:	d100      	bne.n	800212e <__aeabi_dsub+0x192>
 800212c:	e10a      	b.n	8002344 <__aeabi_dsub+0x3a8>
 800212e:	2501      	movs	r5, #1
 8002130:	2938      	cmp	r1, #56	@ 0x38
 8002132:	dc17      	bgt.n	8002164 <__aeabi_dsub+0x1c8>
 8002134:	468a      	mov	sl, r1
 8002136:	4653      	mov	r3, sl
 8002138:	2b1f      	cmp	r3, #31
 800213a:	dd00      	ble.n	800213e <__aeabi_dsub+0x1a2>
 800213c:	e1e7      	b.n	800250e <__aeabi_dsub+0x572>
 800213e:	2220      	movs	r2, #32
 8002140:	1ad2      	subs	r2, r2, r3
 8002142:	9b02      	ldr	r3, [sp, #8]
 8002144:	4661      	mov	r1, ip
 8002146:	4093      	lsls	r3, r2
 8002148:	001d      	movs	r5, r3
 800214a:	4653      	mov	r3, sl
 800214c:	40d9      	lsrs	r1, r3
 800214e:	4663      	mov	r3, ip
 8002150:	4093      	lsls	r3, r2
 8002152:	001a      	movs	r2, r3
 8002154:	430d      	orrs	r5, r1
 8002156:	1e51      	subs	r1, r2, #1
 8002158:	418a      	sbcs	r2, r1
 800215a:	4653      	mov	r3, sl
 800215c:	4315      	orrs	r5, r2
 800215e:	9a02      	ldr	r2, [sp, #8]
 8002160:	40da      	lsrs	r2, r3
 8002162:	18a4      	adds	r4, r4, r2
 8002164:	182d      	adds	r5, r5, r0
 8002166:	4285      	cmp	r5, r0
 8002168:	4180      	sbcs	r0, r0
 800216a:	4240      	negs	r0, r0
 800216c:	1824      	adds	r4, r4, r0
 800216e:	0223      	lsls	r3, r4, #8
 8002170:	d400      	bmi.n	8002174 <__aeabi_dsub+0x1d8>
 8002172:	e0b6      	b.n	80022e2 <__aeabi_dsub+0x346>
 8002174:	4b5e      	ldr	r3, [pc, #376]	@ (80022f0 <__aeabi_dsub+0x354>)
 8002176:	3701      	adds	r7, #1
 8002178:	429f      	cmp	r7, r3
 800217a:	d100      	bne.n	800217e <__aeabi_dsub+0x1e2>
 800217c:	e0ad      	b.n	80022da <__aeabi_dsub+0x33e>
 800217e:	2101      	movs	r1, #1
 8002180:	4b5c      	ldr	r3, [pc, #368]	@ (80022f4 <__aeabi_dsub+0x358>)
 8002182:	086a      	lsrs	r2, r5, #1
 8002184:	401c      	ands	r4, r3
 8002186:	4029      	ands	r1, r5
 8002188:	430a      	orrs	r2, r1
 800218a:	07e5      	lsls	r5, r4, #31
 800218c:	4315      	orrs	r5, r2
 800218e:	0864      	lsrs	r4, r4, #1
 8002190:	e78d      	b.n	80020ae <__aeabi_dsub+0x112>
 8002192:	4a59      	ldr	r2, [pc, #356]	@ (80022f8 <__aeabi_dsub+0x35c>)
 8002194:	9b02      	ldr	r3, [sp, #8]
 8002196:	4692      	mov	sl, r2
 8002198:	4662      	mov	r2, ip
 800219a:	44ba      	add	sl, r7
 800219c:	431a      	orrs	r2, r3
 800219e:	d02c      	beq.n	80021fa <__aeabi_dsub+0x25e>
 80021a0:	428e      	cmp	r6, r1
 80021a2:	d02e      	beq.n	8002202 <__aeabi_dsub+0x266>
 80021a4:	4652      	mov	r2, sl
 80021a6:	2a00      	cmp	r2, #0
 80021a8:	d060      	beq.n	800226c <__aeabi_dsub+0x2d0>
 80021aa:	2f00      	cmp	r7, #0
 80021ac:	d100      	bne.n	80021b0 <__aeabi_dsub+0x214>
 80021ae:	e0db      	b.n	8002368 <__aeabi_dsub+0x3cc>
 80021b0:	4663      	mov	r3, ip
 80021b2:	000e      	movs	r6, r1
 80021b4:	9c02      	ldr	r4, [sp, #8]
 80021b6:	08d8      	lsrs	r0, r3, #3
 80021b8:	0762      	lsls	r2, r4, #29
 80021ba:	4302      	orrs	r2, r0
 80021bc:	08e4      	lsrs	r4, r4, #3
 80021be:	0013      	movs	r3, r2
 80021c0:	4323      	orrs	r3, r4
 80021c2:	d100      	bne.n	80021c6 <__aeabi_dsub+0x22a>
 80021c4:	e254      	b.n	8002670 <__aeabi_dsub+0x6d4>
 80021c6:	2580      	movs	r5, #128	@ 0x80
 80021c8:	032d      	lsls	r5, r5, #12
 80021ca:	4325      	orrs	r5, r4
 80021cc:	032d      	lsls	r5, r5, #12
 80021ce:	4c48      	ldr	r4, [pc, #288]	@ (80022f0 <__aeabi_dsub+0x354>)
 80021d0:	0b2d      	lsrs	r5, r5, #12
 80021d2:	e78c      	b.n	80020ee <__aeabi_dsub+0x152>
 80021d4:	4661      	mov	r1, ip
 80021d6:	9b02      	ldr	r3, [sp, #8]
 80021d8:	4319      	orrs	r1, r3
 80021da:	d100      	bne.n	80021de <__aeabi_dsub+0x242>
 80021dc:	e0cc      	b.n	8002378 <__aeabi_dsub+0x3dc>
 80021de:	0029      	movs	r1, r5
 80021e0:	3901      	subs	r1, #1
 80021e2:	2d01      	cmp	r5, #1
 80021e4:	d100      	bne.n	80021e8 <__aeabi_dsub+0x24c>
 80021e6:	e188      	b.n	80024fa <__aeabi_dsub+0x55e>
 80021e8:	4295      	cmp	r5, r2
 80021ea:	d100      	bne.n	80021ee <__aeabi_dsub+0x252>
 80021ec:	e0aa      	b.n	8002344 <__aeabi_dsub+0x3a8>
 80021ee:	2501      	movs	r5, #1
 80021f0:	2938      	cmp	r1, #56	@ 0x38
 80021f2:	dd00      	ble.n	80021f6 <__aeabi_dsub+0x25a>
 80021f4:	e72f      	b.n	8002056 <__aeabi_dsub+0xba>
 80021f6:	468a      	mov	sl, r1
 80021f8:	e718      	b.n	800202c <__aeabi_dsub+0x90>
 80021fa:	2201      	movs	r2, #1
 80021fc:	4051      	eors	r1, r2
 80021fe:	428e      	cmp	r6, r1
 8002200:	d1d0      	bne.n	80021a4 <__aeabi_dsub+0x208>
 8002202:	4653      	mov	r3, sl
 8002204:	2b00      	cmp	r3, #0
 8002206:	d100      	bne.n	800220a <__aeabi_dsub+0x26e>
 8002208:	e0be      	b.n	8002388 <__aeabi_dsub+0x3ec>
 800220a:	2f00      	cmp	r7, #0
 800220c:	d000      	beq.n	8002210 <__aeabi_dsub+0x274>
 800220e:	e138      	b.n	8002482 <__aeabi_dsub+0x4e6>
 8002210:	46ca      	mov	sl, r9
 8002212:	0022      	movs	r2, r4
 8002214:	4302      	orrs	r2, r0
 8002216:	d100      	bne.n	800221a <__aeabi_dsub+0x27e>
 8002218:	e1e2      	b.n	80025e0 <__aeabi_dsub+0x644>
 800221a:	4653      	mov	r3, sl
 800221c:	1e59      	subs	r1, r3, #1
 800221e:	2b01      	cmp	r3, #1
 8002220:	d100      	bne.n	8002224 <__aeabi_dsub+0x288>
 8002222:	e20d      	b.n	8002640 <__aeabi_dsub+0x6a4>
 8002224:	4a32      	ldr	r2, [pc, #200]	@ (80022f0 <__aeabi_dsub+0x354>)
 8002226:	4592      	cmp	sl, r2
 8002228:	d100      	bne.n	800222c <__aeabi_dsub+0x290>
 800222a:	e1d2      	b.n	80025d2 <__aeabi_dsub+0x636>
 800222c:	2701      	movs	r7, #1
 800222e:	2938      	cmp	r1, #56	@ 0x38
 8002230:	dc13      	bgt.n	800225a <__aeabi_dsub+0x2be>
 8002232:	291f      	cmp	r1, #31
 8002234:	dd00      	ble.n	8002238 <__aeabi_dsub+0x29c>
 8002236:	e1ee      	b.n	8002616 <__aeabi_dsub+0x67a>
 8002238:	2220      	movs	r2, #32
 800223a:	9b02      	ldr	r3, [sp, #8]
 800223c:	1a52      	subs	r2, r2, r1
 800223e:	0025      	movs	r5, r4
 8002240:	0007      	movs	r7, r0
 8002242:	469a      	mov	sl, r3
 8002244:	40cc      	lsrs	r4, r1
 8002246:	4090      	lsls	r0, r2
 8002248:	4095      	lsls	r5, r2
 800224a:	40cf      	lsrs	r7, r1
 800224c:	44a2      	add	sl, r4
 800224e:	1e42      	subs	r2, r0, #1
 8002250:	4190      	sbcs	r0, r2
 8002252:	4653      	mov	r3, sl
 8002254:	432f      	orrs	r7, r5
 8002256:	4307      	orrs	r7, r0
 8002258:	9302      	str	r3, [sp, #8]
 800225a:	003d      	movs	r5, r7
 800225c:	4465      	add	r5, ip
 800225e:	4565      	cmp	r5, ip
 8002260:	4192      	sbcs	r2, r2
 8002262:	9b02      	ldr	r3, [sp, #8]
 8002264:	4252      	negs	r2, r2
 8002266:	464f      	mov	r7, r9
 8002268:	18d4      	adds	r4, r2, r3
 800226a:	e780      	b.n	800216e <__aeabi_dsub+0x1d2>
 800226c:	4a23      	ldr	r2, [pc, #140]	@ (80022fc <__aeabi_dsub+0x360>)
 800226e:	1c7d      	adds	r5, r7, #1
 8002270:	4215      	tst	r5, r2
 8002272:	d000      	beq.n	8002276 <__aeabi_dsub+0x2da>
 8002274:	e0aa      	b.n	80023cc <__aeabi_dsub+0x430>
 8002276:	4662      	mov	r2, ip
 8002278:	0025      	movs	r5, r4
 800227a:	9b02      	ldr	r3, [sp, #8]
 800227c:	4305      	orrs	r5, r0
 800227e:	431a      	orrs	r2, r3
 8002280:	2f00      	cmp	r7, #0
 8002282:	d000      	beq.n	8002286 <__aeabi_dsub+0x2ea>
 8002284:	e0f5      	b.n	8002472 <__aeabi_dsub+0x4d6>
 8002286:	2d00      	cmp	r5, #0
 8002288:	d100      	bne.n	800228c <__aeabi_dsub+0x2f0>
 800228a:	e16b      	b.n	8002564 <__aeabi_dsub+0x5c8>
 800228c:	2a00      	cmp	r2, #0
 800228e:	d100      	bne.n	8002292 <__aeabi_dsub+0x2f6>
 8002290:	e152      	b.n	8002538 <__aeabi_dsub+0x59c>
 8002292:	4663      	mov	r3, ip
 8002294:	1ac5      	subs	r5, r0, r3
 8002296:	9b02      	ldr	r3, [sp, #8]
 8002298:	1ae2      	subs	r2, r4, r3
 800229a:	42a8      	cmp	r0, r5
 800229c:	419b      	sbcs	r3, r3
 800229e:	425b      	negs	r3, r3
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	021a      	lsls	r2, r3, #8
 80022a4:	d400      	bmi.n	80022a8 <__aeabi_dsub+0x30c>
 80022a6:	e1d5      	b.n	8002654 <__aeabi_dsub+0x6b8>
 80022a8:	4663      	mov	r3, ip
 80022aa:	1a1d      	subs	r5, r3, r0
 80022ac:	45ac      	cmp	ip, r5
 80022ae:	4192      	sbcs	r2, r2
 80022b0:	2601      	movs	r6, #1
 80022b2:	9b02      	ldr	r3, [sp, #8]
 80022b4:	4252      	negs	r2, r2
 80022b6:	1b1c      	subs	r4, r3, r4
 80022b8:	4688      	mov	r8, r1
 80022ba:	1aa4      	subs	r4, r4, r2
 80022bc:	400e      	ands	r6, r1
 80022be:	e6f6      	b.n	80020ae <__aeabi_dsub+0x112>
 80022c0:	4297      	cmp	r7, r2
 80022c2:	d03f      	beq.n	8002344 <__aeabi_dsub+0x3a8>
 80022c4:	4652      	mov	r2, sl
 80022c6:	2501      	movs	r5, #1
 80022c8:	2a38      	cmp	r2, #56	@ 0x38
 80022ca:	dd00      	ble.n	80022ce <__aeabi_dsub+0x332>
 80022cc:	e74a      	b.n	8002164 <__aeabi_dsub+0x1c8>
 80022ce:	2280      	movs	r2, #128	@ 0x80
 80022d0:	9b02      	ldr	r3, [sp, #8]
 80022d2:	0412      	lsls	r2, r2, #16
 80022d4:	4313      	orrs	r3, r2
 80022d6:	9302      	str	r3, [sp, #8]
 80022d8:	e72d      	b.n	8002136 <__aeabi_dsub+0x19a>
 80022da:	003c      	movs	r4, r7
 80022dc:	2500      	movs	r5, #0
 80022de:	2200      	movs	r2, #0
 80022e0:	e705      	b.n	80020ee <__aeabi_dsub+0x152>
 80022e2:	2307      	movs	r3, #7
 80022e4:	402b      	ands	r3, r5
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d000      	beq.n	80022ec <__aeabi_dsub+0x350>
 80022ea:	e6e2      	b.n	80020b2 <__aeabi_dsub+0x116>
 80022ec:	e06b      	b.n	80023c6 <__aeabi_dsub+0x42a>
 80022ee:	46c0      	nop			@ (mov r8, r8)
 80022f0:	000007ff 	.word	0x000007ff
 80022f4:	ff7fffff 	.word	0xff7fffff
 80022f8:	fffff801 	.word	0xfffff801
 80022fc:	000007fe 	.word	0x000007fe
 8002300:	0028      	movs	r0, r5
 8002302:	f000 fadf 	bl	80028c4 <__clzsi2>
 8002306:	0003      	movs	r3, r0
 8002308:	3318      	adds	r3, #24
 800230a:	2b1f      	cmp	r3, #31
 800230c:	dc00      	bgt.n	8002310 <__aeabi_dsub+0x374>
 800230e:	e6b4      	b.n	800207a <__aeabi_dsub+0xde>
 8002310:	002a      	movs	r2, r5
 8002312:	3808      	subs	r0, #8
 8002314:	4082      	lsls	r2, r0
 8002316:	429f      	cmp	r7, r3
 8002318:	dd00      	ble.n	800231c <__aeabi_dsub+0x380>
 800231a:	e0b9      	b.n	8002490 <__aeabi_dsub+0x4f4>
 800231c:	1bdb      	subs	r3, r3, r7
 800231e:	1c58      	adds	r0, r3, #1
 8002320:	281f      	cmp	r0, #31
 8002322:	dc00      	bgt.n	8002326 <__aeabi_dsub+0x38a>
 8002324:	e1a0      	b.n	8002668 <__aeabi_dsub+0x6cc>
 8002326:	0015      	movs	r5, r2
 8002328:	3b1f      	subs	r3, #31
 800232a:	40dd      	lsrs	r5, r3
 800232c:	2820      	cmp	r0, #32
 800232e:	d005      	beq.n	800233c <__aeabi_dsub+0x3a0>
 8002330:	2340      	movs	r3, #64	@ 0x40
 8002332:	1a1b      	subs	r3, r3, r0
 8002334:	409a      	lsls	r2, r3
 8002336:	1e53      	subs	r3, r2, #1
 8002338:	419a      	sbcs	r2, r3
 800233a:	4315      	orrs	r5, r2
 800233c:	2307      	movs	r3, #7
 800233e:	2700      	movs	r7, #0
 8002340:	402b      	ands	r3, r5
 8002342:	e7d0      	b.n	80022e6 <__aeabi_dsub+0x34a>
 8002344:	08c0      	lsrs	r0, r0, #3
 8002346:	0762      	lsls	r2, r4, #29
 8002348:	4302      	orrs	r2, r0
 800234a:	08e4      	lsrs	r4, r4, #3
 800234c:	e737      	b.n	80021be <__aeabi_dsub+0x222>
 800234e:	08ea      	lsrs	r2, r5, #3
 8002350:	0763      	lsls	r3, r4, #29
 8002352:	431a      	orrs	r2, r3
 8002354:	4bd3      	ldr	r3, [pc, #844]	@ (80026a4 <__aeabi_dsub+0x708>)
 8002356:	08e4      	lsrs	r4, r4, #3
 8002358:	429f      	cmp	r7, r3
 800235a:	d100      	bne.n	800235e <__aeabi_dsub+0x3c2>
 800235c:	e72f      	b.n	80021be <__aeabi_dsub+0x222>
 800235e:	0324      	lsls	r4, r4, #12
 8002360:	0b25      	lsrs	r5, r4, #12
 8002362:	057c      	lsls	r4, r7, #21
 8002364:	0d64      	lsrs	r4, r4, #21
 8002366:	e6c2      	b.n	80020ee <__aeabi_dsub+0x152>
 8002368:	46ca      	mov	sl, r9
 800236a:	0022      	movs	r2, r4
 800236c:	4302      	orrs	r2, r0
 800236e:	d158      	bne.n	8002422 <__aeabi_dsub+0x486>
 8002370:	4663      	mov	r3, ip
 8002372:	000e      	movs	r6, r1
 8002374:	9c02      	ldr	r4, [sp, #8]
 8002376:	9303      	str	r3, [sp, #12]
 8002378:	9b03      	ldr	r3, [sp, #12]
 800237a:	4657      	mov	r7, sl
 800237c:	08da      	lsrs	r2, r3, #3
 800237e:	e7e7      	b.n	8002350 <__aeabi_dsub+0x3b4>
 8002380:	4cc9      	ldr	r4, [pc, #804]	@ (80026a8 <__aeabi_dsub+0x70c>)
 8002382:	1aff      	subs	r7, r7, r3
 8002384:	4014      	ands	r4, r2
 8002386:	e692      	b.n	80020ae <__aeabi_dsub+0x112>
 8002388:	4dc8      	ldr	r5, [pc, #800]	@ (80026ac <__aeabi_dsub+0x710>)
 800238a:	1c7a      	adds	r2, r7, #1
 800238c:	422a      	tst	r2, r5
 800238e:	d000      	beq.n	8002392 <__aeabi_dsub+0x3f6>
 8002390:	e084      	b.n	800249c <__aeabi_dsub+0x500>
 8002392:	0022      	movs	r2, r4
 8002394:	4302      	orrs	r2, r0
 8002396:	2f00      	cmp	r7, #0
 8002398:	d000      	beq.n	800239c <__aeabi_dsub+0x400>
 800239a:	e0ef      	b.n	800257c <__aeabi_dsub+0x5e0>
 800239c:	2a00      	cmp	r2, #0
 800239e:	d100      	bne.n	80023a2 <__aeabi_dsub+0x406>
 80023a0:	e0e5      	b.n	800256e <__aeabi_dsub+0x5d2>
 80023a2:	4662      	mov	r2, ip
 80023a4:	9902      	ldr	r1, [sp, #8]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	d100      	bne.n	80023ac <__aeabi_dsub+0x410>
 80023aa:	e0c5      	b.n	8002538 <__aeabi_dsub+0x59c>
 80023ac:	4663      	mov	r3, ip
 80023ae:	18c5      	adds	r5, r0, r3
 80023b0:	468c      	mov	ip, r1
 80023b2:	4285      	cmp	r5, r0
 80023b4:	4180      	sbcs	r0, r0
 80023b6:	4464      	add	r4, ip
 80023b8:	4240      	negs	r0, r0
 80023ba:	1824      	adds	r4, r4, r0
 80023bc:	0223      	lsls	r3, r4, #8
 80023be:	d502      	bpl.n	80023c6 <__aeabi_dsub+0x42a>
 80023c0:	4bb9      	ldr	r3, [pc, #740]	@ (80026a8 <__aeabi_dsub+0x70c>)
 80023c2:	3701      	adds	r7, #1
 80023c4:	401c      	ands	r4, r3
 80023c6:	46ba      	mov	sl, r7
 80023c8:	9503      	str	r5, [sp, #12]
 80023ca:	e7d5      	b.n	8002378 <__aeabi_dsub+0x3dc>
 80023cc:	4662      	mov	r2, ip
 80023ce:	1a85      	subs	r5, r0, r2
 80023d0:	42a8      	cmp	r0, r5
 80023d2:	4192      	sbcs	r2, r2
 80023d4:	4252      	negs	r2, r2
 80023d6:	4691      	mov	r9, r2
 80023d8:	9b02      	ldr	r3, [sp, #8]
 80023da:	1ae3      	subs	r3, r4, r3
 80023dc:	001a      	movs	r2, r3
 80023de:	464b      	mov	r3, r9
 80023e0:	1ad2      	subs	r2, r2, r3
 80023e2:	0013      	movs	r3, r2
 80023e4:	4691      	mov	r9, r2
 80023e6:	021a      	lsls	r2, r3, #8
 80023e8:	d46c      	bmi.n	80024c4 <__aeabi_dsub+0x528>
 80023ea:	464a      	mov	r2, r9
 80023ec:	464c      	mov	r4, r9
 80023ee:	432a      	orrs	r2, r5
 80023f0:	d000      	beq.n	80023f4 <__aeabi_dsub+0x458>
 80023f2:	e63a      	b.n	800206a <__aeabi_dsub+0xce>
 80023f4:	2600      	movs	r6, #0
 80023f6:	2400      	movs	r4, #0
 80023f8:	2500      	movs	r5, #0
 80023fa:	e678      	b.n	80020ee <__aeabi_dsub+0x152>
 80023fc:	9902      	ldr	r1, [sp, #8]
 80023fe:	4653      	mov	r3, sl
 8002400:	000d      	movs	r5, r1
 8002402:	3a20      	subs	r2, #32
 8002404:	40d5      	lsrs	r5, r2
 8002406:	2b20      	cmp	r3, #32
 8002408:	d006      	beq.n	8002418 <__aeabi_dsub+0x47c>
 800240a:	2240      	movs	r2, #64	@ 0x40
 800240c:	1ad2      	subs	r2, r2, r3
 800240e:	000b      	movs	r3, r1
 8002410:	4093      	lsls	r3, r2
 8002412:	4662      	mov	r2, ip
 8002414:	431a      	orrs	r2, r3
 8002416:	4693      	mov	fp, r2
 8002418:	465b      	mov	r3, fp
 800241a:	1e5a      	subs	r2, r3, #1
 800241c:	4193      	sbcs	r3, r2
 800241e:	431d      	orrs	r5, r3
 8002420:	e619      	b.n	8002056 <__aeabi_dsub+0xba>
 8002422:	4653      	mov	r3, sl
 8002424:	1e5a      	subs	r2, r3, #1
 8002426:	2b01      	cmp	r3, #1
 8002428:	d100      	bne.n	800242c <__aeabi_dsub+0x490>
 800242a:	e0c6      	b.n	80025ba <__aeabi_dsub+0x61e>
 800242c:	4e9d      	ldr	r6, [pc, #628]	@ (80026a4 <__aeabi_dsub+0x708>)
 800242e:	45b2      	cmp	sl, r6
 8002430:	d100      	bne.n	8002434 <__aeabi_dsub+0x498>
 8002432:	e6bd      	b.n	80021b0 <__aeabi_dsub+0x214>
 8002434:	4688      	mov	r8, r1
 8002436:	000e      	movs	r6, r1
 8002438:	2501      	movs	r5, #1
 800243a:	2a38      	cmp	r2, #56	@ 0x38
 800243c:	dc10      	bgt.n	8002460 <__aeabi_dsub+0x4c4>
 800243e:	2a1f      	cmp	r2, #31
 8002440:	dc7f      	bgt.n	8002542 <__aeabi_dsub+0x5a6>
 8002442:	2120      	movs	r1, #32
 8002444:	0025      	movs	r5, r4
 8002446:	1a89      	subs	r1, r1, r2
 8002448:	0007      	movs	r7, r0
 800244a:	4088      	lsls	r0, r1
 800244c:	408d      	lsls	r5, r1
 800244e:	40d7      	lsrs	r7, r2
 8002450:	40d4      	lsrs	r4, r2
 8002452:	1e41      	subs	r1, r0, #1
 8002454:	4188      	sbcs	r0, r1
 8002456:	9b02      	ldr	r3, [sp, #8]
 8002458:	433d      	orrs	r5, r7
 800245a:	1b1b      	subs	r3, r3, r4
 800245c:	4305      	orrs	r5, r0
 800245e:	9302      	str	r3, [sp, #8]
 8002460:	4662      	mov	r2, ip
 8002462:	1b55      	subs	r5, r2, r5
 8002464:	45ac      	cmp	ip, r5
 8002466:	4192      	sbcs	r2, r2
 8002468:	9b02      	ldr	r3, [sp, #8]
 800246a:	4252      	negs	r2, r2
 800246c:	464f      	mov	r7, r9
 800246e:	1a9c      	subs	r4, r3, r2
 8002470:	e5f6      	b.n	8002060 <__aeabi_dsub+0xc4>
 8002472:	2d00      	cmp	r5, #0
 8002474:	d000      	beq.n	8002478 <__aeabi_dsub+0x4dc>
 8002476:	e0b7      	b.n	80025e8 <__aeabi_dsub+0x64c>
 8002478:	2a00      	cmp	r2, #0
 800247a:	d100      	bne.n	800247e <__aeabi_dsub+0x4e2>
 800247c:	e0f0      	b.n	8002660 <__aeabi_dsub+0x6c4>
 800247e:	2601      	movs	r6, #1
 8002480:	400e      	ands	r6, r1
 8002482:	4663      	mov	r3, ip
 8002484:	9802      	ldr	r0, [sp, #8]
 8002486:	08d9      	lsrs	r1, r3, #3
 8002488:	0742      	lsls	r2, r0, #29
 800248a:	430a      	orrs	r2, r1
 800248c:	08c4      	lsrs	r4, r0, #3
 800248e:	e696      	b.n	80021be <__aeabi_dsub+0x222>
 8002490:	4c85      	ldr	r4, [pc, #532]	@ (80026a8 <__aeabi_dsub+0x70c>)
 8002492:	1aff      	subs	r7, r7, r3
 8002494:	4014      	ands	r4, r2
 8002496:	0762      	lsls	r2, r4, #29
 8002498:	08e4      	lsrs	r4, r4, #3
 800249a:	e760      	b.n	800235e <__aeabi_dsub+0x3c2>
 800249c:	4981      	ldr	r1, [pc, #516]	@ (80026a4 <__aeabi_dsub+0x708>)
 800249e:	428a      	cmp	r2, r1
 80024a0:	d100      	bne.n	80024a4 <__aeabi_dsub+0x508>
 80024a2:	e0c9      	b.n	8002638 <__aeabi_dsub+0x69c>
 80024a4:	4663      	mov	r3, ip
 80024a6:	18c1      	adds	r1, r0, r3
 80024a8:	4281      	cmp	r1, r0
 80024aa:	4180      	sbcs	r0, r0
 80024ac:	9b02      	ldr	r3, [sp, #8]
 80024ae:	4240      	negs	r0, r0
 80024b0:	18e3      	adds	r3, r4, r3
 80024b2:	181b      	adds	r3, r3, r0
 80024b4:	07dd      	lsls	r5, r3, #31
 80024b6:	085c      	lsrs	r4, r3, #1
 80024b8:	2307      	movs	r3, #7
 80024ba:	0849      	lsrs	r1, r1, #1
 80024bc:	430d      	orrs	r5, r1
 80024be:	0017      	movs	r7, r2
 80024c0:	402b      	ands	r3, r5
 80024c2:	e710      	b.n	80022e6 <__aeabi_dsub+0x34a>
 80024c4:	4663      	mov	r3, ip
 80024c6:	1a1d      	subs	r5, r3, r0
 80024c8:	45ac      	cmp	ip, r5
 80024ca:	4192      	sbcs	r2, r2
 80024cc:	2601      	movs	r6, #1
 80024ce:	9b02      	ldr	r3, [sp, #8]
 80024d0:	4252      	negs	r2, r2
 80024d2:	1b1c      	subs	r4, r3, r4
 80024d4:	4688      	mov	r8, r1
 80024d6:	1aa4      	subs	r4, r4, r2
 80024d8:	400e      	ands	r6, r1
 80024da:	e5c6      	b.n	800206a <__aeabi_dsub+0xce>
 80024dc:	4663      	mov	r3, ip
 80024de:	18c5      	adds	r5, r0, r3
 80024e0:	9b02      	ldr	r3, [sp, #8]
 80024e2:	4285      	cmp	r5, r0
 80024e4:	4180      	sbcs	r0, r0
 80024e6:	469c      	mov	ip, r3
 80024e8:	4240      	negs	r0, r0
 80024ea:	4464      	add	r4, ip
 80024ec:	1824      	adds	r4, r4, r0
 80024ee:	2701      	movs	r7, #1
 80024f0:	0223      	lsls	r3, r4, #8
 80024f2:	d400      	bmi.n	80024f6 <__aeabi_dsub+0x55a>
 80024f4:	e6f5      	b.n	80022e2 <__aeabi_dsub+0x346>
 80024f6:	2702      	movs	r7, #2
 80024f8:	e641      	b.n	800217e <__aeabi_dsub+0x1e2>
 80024fa:	4663      	mov	r3, ip
 80024fc:	1ac5      	subs	r5, r0, r3
 80024fe:	42a8      	cmp	r0, r5
 8002500:	4180      	sbcs	r0, r0
 8002502:	9b02      	ldr	r3, [sp, #8]
 8002504:	4240      	negs	r0, r0
 8002506:	1ae4      	subs	r4, r4, r3
 8002508:	2701      	movs	r7, #1
 800250a:	1a24      	subs	r4, r4, r0
 800250c:	e5a8      	b.n	8002060 <__aeabi_dsub+0xc4>
 800250e:	9d02      	ldr	r5, [sp, #8]
 8002510:	4652      	mov	r2, sl
 8002512:	002b      	movs	r3, r5
 8002514:	3a20      	subs	r2, #32
 8002516:	40d3      	lsrs	r3, r2
 8002518:	0019      	movs	r1, r3
 800251a:	4653      	mov	r3, sl
 800251c:	2b20      	cmp	r3, #32
 800251e:	d006      	beq.n	800252e <__aeabi_dsub+0x592>
 8002520:	2240      	movs	r2, #64	@ 0x40
 8002522:	1ad2      	subs	r2, r2, r3
 8002524:	002b      	movs	r3, r5
 8002526:	4093      	lsls	r3, r2
 8002528:	4662      	mov	r2, ip
 800252a:	431a      	orrs	r2, r3
 800252c:	4693      	mov	fp, r2
 800252e:	465d      	mov	r5, fp
 8002530:	1e6b      	subs	r3, r5, #1
 8002532:	419d      	sbcs	r5, r3
 8002534:	430d      	orrs	r5, r1
 8002536:	e615      	b.n	8002164 <__aeabi_dsub+0x1c8>
 8002538:	0762      	lsls	r2, r4, #29
 800253a:	08c0      	lsrs	r0, r0, #3
 800253c:	4302      	orrs	r2, r0
 800253e:	08e4      	lsrs	r4, r4, #3
 8002540:	e70d      	b.n	800235e <__aeabi_dsub+0x3c2>
 8002542:	0011      	movs	r1, r2
 8002544:	0027      	movs	r7, r4
 8002546:	3920      	subs	r1, #32
 8002548:	40cf      	lsrs	r7, r1
 800254a:	2a20      	cmp	r2, #32
 800254c:	d005      	beq.n	800255a <__aeabi_dsub+0x5be>
 800254e:	2140      	movs	r1, #64	@ 0x40
 8002550:	1a8a      	subs	r2, r1, r2
 8002552:	4094      	lsls	r4, r2
 8002554:	0025      	movs	r5, r4
 8002556:	4305      	orrs	r5, r0
 8002558:	9503      	str	r5, [sp, #12]
 800255a:	9d03      	ldr	r5, [sp, #12]
 800255c:	1e6a      	subs	r2, r5, #1
 800255e:	4195      	sbcs	r5, r2
 8002560:	433d      	orrs	r5, r7
 8002562:	e77d      	b.n	8002460 <__aeabi_dsub+0x4c4>
 8002564:	2a00      	cmp	r2, #0
 8002566:	d100      	bne.n	800256a <__aeabi_dsub+0x5ce>
 8002568:	e744      	b.n	80023f4 <__aeabi_dsub+0x458>
 800256a:	2601      	movs	r6, #1
 800256c:	400e      	ands	r6, r1
 800256e:	4663      	mov	r3, ip
 8002570:	08d9      	lsrs	r1, r3, #3
 8002572:	9b02      	ldr	r3, [sp, #8]
 8002574:	075a      	lsls	r2, r3, #29
 8002576:	430a      	orrs	r2, r1
 8002578:	08dc      	lsrs	r4, r3, #3
 800257a:	e6f0      	b.n	800235e <__aeabi_dsub+0x3c2>
 800257c:	2a00      	cmp	r2, #0
 800257e:	d028      	beq.n	80025d2 <__aeabi_dsub+0x636>
 8002580:	4662      	mov	r2, ip
 8002582:	9f02      	ldr	r7, [sp, #8]
 8002584:	08c0      	lsrs	r0, r0, #3
 8002586:	433a      	orrs	r2, r7
 8002588:	d100      	bne.n	800258c <__aeabi_dsub+0x5f0>
 800258a:	e6dc      	b.n	8002346 <__aeabi_dsub+0x3aa>
 800258c:	0762      	lsls	r2, r4, #29
 800258e:	4310      	orrs	r0, r2
 8002590:	2280      	movs	r2, #128	@ 0x80
 8002592:	08e4      	lsrs	r4, r4, #3
 8002594:	0312      	lsls	r2, r2, #12
 8002596:	4214      	tst	r4, r2
 8002598:	d009      	beq.n	80025ae <__aeabi_dsub+0x612>
 800259a:	08fd      	lsrs	r5, r7, #3
 800259c:	4215      	tst	r5, r2
 800259e:	d106      	bne.n	80025ae <__aeabi_dsub+0x612>
 80025a0:	4663      	mov	r3, ip
 80025a2:	2601      	movs	r6, #1
 80025a4:	002c      	movs	r4, r5
 80025a6:	08d8      	lsrs	r0, r3, #3
 80025a8:	077b      	lsls	r3, r7, #29
 80025aa:	4318      	orrs	r0, r3
 80025ac:	400e      	ands	r6, r1
 80025ae:	0f42      	lsrs	r2, r0, #29
 80025b0:	00c0      	lsls	r0, r0, #3
 80025b2:	08c0      	lsrs	r0, r0, #3
 80025b4:	0752      	lsls	r2, r2, #29
 80025b6:	4302      	orrs	r2, r0
 80025b8:	e601      	b.n	80021be <__aeabi_dsub+0x222>
 80025ba:	4663      	mov	r3, ip
 80025bc:	1a1d      	subs	r5, r3, r0
 80025be:	45ac      	cmp	ip, r5
 80025c0:	4192      	sbcs	r2, r2
 80025c2:	9b02      	ldr	r3, [sp, #8]
 80025c4:	4252      	negs	r2, r2
 80025c6:	1b1c      	subs	r4, r3, r4
 80025c8:	000e      	movs	r6, r1
 80025ca:	4688      	mov	r8, r1
 80025cc:	2701      	movs	r7, #1
 80025ce:	1aa4      	subs	r4, r4, r2
 80025d0:	e546      	b.n	8002060 <__aeabi_dsub+0xc4>
 80025d2:	4663      	mov	r3, ip
 80025d4:	08d9      	lsrs	r1, r3, #3
 80025d6:	9b02      	ldr	r3, [sp, #8]
 80025d8:	075a      	lsls	r2, r3, #29
 80025da:	430a      	orrs	r2, r1
 80025dc:	08dc      	lsrs	r4, r3, #3
 80025de:	e5ee      	b.n	80021be <__aeabi_dsub+0x222>
 80025e0:	4663      	mov	r3, ip
 80025e2:	9c02      	ldr	r4, [sp, #8]
 80025e4:	9303      	str	r3, [sp, #12]
 80025e6:	e6c7      	b.n	8002378 <__aeabi_dsub+0x3dc>
 80025e8:	08c0      	lsrs	r0, r0, #3
 80025ea:	2a00      	cmp	r2, #0
 80025ec:	d100      	bne.n	80025f0 <__aeabi_dsub+0x654>
 80025ee:	e6aa      	b.n	8002346 <__aeabi_dsub+0x3aa>
 80025f0:	0762      	lsls	r2, r4, #29
 80025f2:	4310      	orrs	r0, r2
 80025f4:	2280      	movs	r2, #128	@ 0x80
 80025f6:	08e4      	lsrs	r4, r4, #3
 80025f8:	0312      	lsls	r2, r2, #12
 80025fa:	4214      	tst	r4, r2
 80025fc:	d0d7      	beq.n	80025ae <__aeabi_dsub+0x612>
 80025fe:	9f02      	ldr	r7, [sp, #8]
 8002600:	08fd      	lsrs	r5, r7, #3
 8002602:	4215      	tst	r5, r2
 8002604:	d1d3      	bne.n	80025ae <__aeabi_dsub+0x612>
 8002606:	4663      	mov	r3, ip
 8002608:	2601      	movs	r6, #1
 800260a:	08d8      	lsrs	r0, r3, #3
 800260c:	077b      	lsls	r3, r7, #29
 800260e:	002c      	movs	r4, r5
 8002610:	4318      	orrs	r0, r3
 8002612:	400e      	ands	r6, r1
 8002614:	e7cb      	b.n	80025ae <__aeabi_dsub+0x612>
 8002616:	000a      	movs	r2, r1
 8002618:	0027      	movs	r7, r4
 800261a:	3a20      	subs	r2, #32
 800261c:	40d7      	lsrs	r7, r2
 800261e:	2920      	cmp	r1, #32
 8002620:	d005      	beq.n	800262e <__aeabi_dsub+0x692>
 8002622:	2240      	movs	r2, #64	@ 0x40
 8002624:	1a52      	subs	r2, r2, r1
 8002626:	4094      	lsls	r4, r2
 8002628:	0025      	movs	r5, r4
 800262a:	4305      	orrs	r5, r0
 800262c:	9503      	str	r5, [sp, #12]
 800262e:	9d03      	ldr	r5, [sp, #12]
 8002630:	1e6a      	subs	r2, r5, #1
 8002632:	4195      	sbcs	r5, r2
 8002634:	432f      	orrs	r7, r5
 8002636:	e610      	b.n	800225a <__aeabi_dsub+0x2be>
 8002638:	0014      	movs	r4, r2
 800263a:	2500      	movs	r5, #0
 800263c:	2200      	movs	r2, #0
 800263e:	e556      	b.n	80020ee <__aeabi_dsub+0x152>
 8002640:	9b02      	ldr	r3, [sp, #8]
 8002642:	4460      	add	r0, ip
 8002644:	4699      	mov	r9, r3
 8002646:	4560      	cmp	r0, ip
 8002648:	4192      	sbcs	r2, r2
 800264a:	444c      	add	r4, r9
 800264c:	4252      	negs	r2, r2
 800264e:	0005      	movs	r5, r0
 8002650:	18a4      	adds	r4, r4, r2
 8002652:	e74c      	b.n	80024ee <__aeabi_dsub+0x552>
 8002654:	001a      	movs	r2, r3
 8002656:	001c      	movs	r4, r3
 8002658:	432a      	orrs	r2, r5
 800265a:	d000      	beq.n	800265e <__aeabi_dsub+0x6c2>
 800265c:	e6b3      	b.n	80023c6 <__aeabi_dsub+0x42a>
 800265e:	e6c9      	b.n	80023f4 <__aeabi_dsub+0x458>
 8002660:	2480      	movs	r4, #128	@ 0x80
 8002662:	2600      	movs	r6, #0
 8002664:	0324      	lsls	r4, r4, #12
 8002666:	e5ae      	b.n	80021c6 <__aeabi_dsub+0x22a>
 8002668:	2120      	movs	r1, #32
 800266a:	2500      	movs	r5, #0
 800266c:	1a09      	subs	r1, r1, r0
 800266e:	e517      	b.n	80020a0 <__aeabi_dsub+0x104>
 8002670:	2200      	movs	r2, #0
 8002672:	2500      	movs	r5, #0
 8002674:	4c0b      	ldr	r4, [pc, #44]	@ (80026a4 <__aeabi_dsub+0x708>)
 8002676:	e53a      	b.n	80020ee <__aeabi_dsub+0x152>
 8002678:	2d00      	cmp	r5, #0
 800267a:	d100      	bne.n	800267e <__aeabi_dsub+0x6e2>
 800267c:	e5f6      	b.n	800226c <__aeabi_dsub+0x2d0>
 800267e:	464b      	mov	r3, r9
 8002680:	1bda      	subs	r2, r3, r7
 8002682:	4692      	mov	sl, r2
 8002684:	2f00      	cmp	r7, #0
 8002686:	d100      	bne.n	800268a <__aeabi_dsub+0x6ee>
 8002688:	e66f      	b.n	800236a <__aeabi_dsub+0x3ce>
 800268a:	2a38      	cmp	r2, #56	@ 0x38
 800268c:	dc05      	bgt.n	800269a <__aeabi_dsub+0x6fe>
 800268e:	2680      	movs	r6, #128	@ 0x80
 8002690:	0436      	lsls	r6, r6, #16
 8002692:	4334      	orrs	r4, r6
 8002694:	4688      	mov	r8, r1
 8002696:	000e      	movs	r6, r1
 8002698:	e6d1      	b.n	800243e <__aeabi_dsub+0x4a2>
 800269a:	4688      	mov	r8, r1
 800269c:	000e      	movs	r6, r1
 800269e:	2501      	movs	r5, #1
 80026a0:	e6de      	b.n	8002460 <__aeabi_dsub+0x4c4>
 80026a2:	46c0      	nop			@ (mov r8, r8)
 80026a4:	000007ff 	.word	0x000007ff
 80026a8:	ff7fffff 	.word	0xff7fffff
 80026ac:	000007fe 	.word	0x000007fe
 80026b0:	2d00      	cmp	r5, #0
 80026b2:	d100      	bne.n	80026b6 <__aeabi_dsub+0x71a>
 80026b4:	e668      	b.n	8002388 <__aeabi_dsub+0x3ec>
 80026b6:	464b      	mov	r3, r9
 80026b8:	1bd9      	subs	r1, r3, r7
 80026ba:	2f00      	cmp	r7, #0
 80026bc:	d101      	bne.n	80026c2 <__aeabi_dsub+0x726>
 80026be:	468a      	mov	sl, r1
 80026c0:	e5a7      	b.n	8002212 <__aeabi_dsub+0x276>
 80026c2:	2701      	movs	r7, #1
 80026c4:	2938      	cmp	r1, #56	@ 0x38
 80026c6:	dd00      	ble.n	80026ca <__aeabi_dsub+0x72e>
 80026c8:	e5c7      	b.n	800225a <__aeabi_dsub+0x2be>
 80026ca:	2280      	movs	r2, #128	@ 0x80
 80026cc:	0412      	lsls	r2, r2, #16
 80026ce:	4314      	orrs	r4, r2
 80026d0:	e5af      	b.n	8002232 <__aeabi_dsub+0x296>
 80026d2:	46c0      	nop			@ (mov r8, r8)

080026d4 <__aeabi_dcmpun>:
 80026d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026d6:	46c6      	mov	lr, r8
 80026d8:	031e      	lsls	r6, r3, #12
 80026da:	0b36      	lsrs	r6, r6, #12
 80026dc:	46b0      	mov	r8, r6
 80026de:	4e0d      	ldr	r6, [pc, #52]	@ (8002714 <__aeabi_dcmpun+0x40>)
 80026e0:	030c      	lsls	r4, r1, #12
 80026e2:	004d      	lsls	r5, r1, #1
 80026e4:	005f      	lsls	r7, r3, #1
 80026e6:	b500      	push	{lr}
 80026e8:	0b24      	lsrs	r4, r4, #12
 80026ea:	0d6d      	lsrs	r5, r5, #21
 80026ec:	0d7f      	lsrs	r7, r7, #21
 80026ee:	42b5      	cmp	r5, r6
 80026f0:	d00b      	beq.n	800270a <__aeabi_dcmpun+0x36>
 80026f2:	4908      	ldr	r1, [pc, #32]	@ (8002714 <__aeabi_dcmpun+0x40>)
 80026f4:	2000      	movs	r0, #0
 80026f6:	428f      	cmp	r7, r1
 80026f8:	d104      	bne.n	8002704 <__aeabi_dcmpun+0x30>
 80026fa:	4646      	mov	r6, r8
 80026fc:	4316      	orrs	r6, r2
 80026fe:	0030      	movs	r0, r6
 8002700:	1e43      	subs	r3, r0, #1
 8002702:	4198      	sbcs	r0, r3
 8002704:	bc80      	pop	{r7}
 8002706:	46b8      	mov	r8, r7
 8002708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800270a:	4304      	orrs	r4, r0
 800270c:	2001      	movs	r0, #1
 800270e:	2c00      	cmp	r4, #0
 8002710:	d1f8      	bne.n	8002704 <__aeabi_dcmpun+0x30>
 8002712:	e7ee      	b.n	80026f2 <__aeabi_dcmpun+0x1e>
 8002714:	000007ff 	.word	0x000007ff

08002718 <__aeabi_d2iz>:
 8002718:	000b      	movs	r3, r1
 800271a:	0002      	movs	r2, r0
 800271c:	b570      	push	{r4, r5, r6, lr}
 800271e:	4d16      	ldr	r5, [pc, #88]	@ (8002778 <__aeabi_d2iz+0x60>)
 8002720:	030c      	lsls	r4, r1, #12
 8002722:	b082      	sub	sp, #8
 8002724:	0049      	lsls	r1, r1, #1
 8002726:	2000      	movs	r0, #0
 8002728:	9200      	str	r2, [sp, #0]
 800272a:	9301      	str	r3, [sp, #4]
 800272c:	0b24      	lsrs	r4, r4, #12
 800272e:	0d49      	lsrs	r1, r1, #21
 8002730:	0fde      	lsrs	r6, r3, #31
 8002732:	42a9      	cmp	r1, r5
 8002734:	dd04      	ble.n	8002740 <__aeabi_d2iz+0x28>
 8002736:	4811      	ldr	r0, [pc, #68]	@ (800277c <__aeabi_d2iz+0x64>)
 8002738:	4281      	cmp	r1, r0
 800273a:	dd03      	ble.n	8002744 <__aeabi_d2iz+0x2c>
 800273c:	4b10      	ldr	r3, [pc, #64]	@ (8002780 <__aeabi_d2iz+0x68>)
 800273e:	18f0      	adds	r0, r6, r3
 8002740:	b002      	add	sp, #8
 8002742:	bd70      	pop	{r4, r5, r6, pc}
 8002744:	2080      	movs	r0, #128	@ 0x80
 8002746:	0340      	lsls	r0, r0, #13
 8002748:	4320      	orrs	r0, r4
 800274a:	4c0e      	ldr	r4, [pc, #56]	@ (8002784 <__aeabi_d2iz+0x6c>)
 800274c:	1a64      	subs	r4, r4, r1
 800274e:	2c1f      	cmp	r4, #31
 8002750:	dd08      	ble.n	8002764 <__aeabi_d2iz+0x4c>
 8002752:	4b0d      	ldr	r3, [pc, #52]	@ (8002788 <__aeabi_d2iz+0x70>)
 8002754:	1a5b      	subs	r3, r3, r1
 8002756:	40d8      	lsrs	r0, r3
 8002758:	0003      	movs	r3, r0
 800275a:	4258      	negs	r0, r3
 800275c:	2e00      	cmp	r6, #0
 800275e:	d1ef      	bne.n	8002740 <__aeabi_d2iz+0x28>
 8002760:	0018      	movs	r0, r3
 8002762:	e7ed      	b.n	8002740 <__aeabi_d2iz+0x28>
 8002764:	4b09      	ldr	r3, [pc, #36]	@ (800278c <__aeabi_d2iz+0x74>)
 8002766:	9a00      	ldr	r2, [sp, #0]
 8002768:	469c      	mov	ip, r3
 800276a:	0003      	movs	r3, r0
 800276c:	4461      	add	r1, ip
 800276e:	408b      	lsls	r3, r1
 8002770:	40e2      	lsrs	r2, r4
 8002772:	4313      	orrs	r3, r2
 8002774:	e7f1      	b.n	800275a <__aeabi_d2iz+0x42>
 8002776:	46c0      	nop			@ (mov r8, r8)
 8002778:	000003fe 	.word	0x000003fe
 800277c:	0000041d 	.word	0x0000041d
 8002780:	7fffffff 	.word	0x7fffffff
 8002784:	00000433 	.word	0x00000433
 8002788:	00000413 	.word	0x00000413
 800278c:	fffffbed 	.word	0xfffffbed

08002790 <__aeabi_i2d>:
 8002790:	b570      	push	{r4, r5, r6, lr}
 8002792:	2800      	cmp	r0, #0
 8002794:	d016      	beq.n	80027c4 <__aeabi_i2d+0x34>
 8002796:	17c3      	asrs	r3, r0, #31
 8002798:	18c5      	adds	r5, r0, r3
 800279a:	405d      	eors	r5, r3
 800279c:	0fc4      	lsrs	r4, r0, #31
 800279e:	0028      	movs	r0, r5
 80027a0:	f000 f890 	bl	80028c4 <__clzsi2>
 80027a4:	4b10      	ldr	r3, [pc, #64]	@ (80027e8 <__aeabi_i2d+0x58>)
 80027a6:	1a1b      	subs	r3, r3, r0
 80027a8:	055b      	lsls	r3, r3, #21
 80027aa:	0d5b      	lsrs	r3, r3, #21
 80027ac:	280a      	cmp	r0, #10
 80027ae:	dc14      	bgt.n	80027da <__aeabi_i2d+0x4a>
 80027b0:	0002      	movs	r2, r0
 80027b2:	002e      	movs	r6, r5
 80027b4:	3215      	adds	r2, #21
 80027b6:	4096      	lsls	r6, r2
 80027b8:	220b      	movs	r2, #11
 80027ba:	1a12      	subs	r2, r2, r0
 80027bc:	40d5      	lsrs	r5, r2
 80027be:	032d      	lsls	r5, r5, #12
 80027c0:	0b2d      	lsrs	r5, r5, #12
 80027c2:	e003      	b.n	80027cc <__aeabi_i2d+0x3c>
 80027c4:	2400      	movs	r4, #0
 80027c6:	2300      	movs	r3, #0
 80027c8:	2500      	movs	r5, #0
 80027ca:	2600      	movs	r6, #0
 80027cc:	051b      	lsls	r3, r3, #20
 80027ce:	432b      	orrs	r3, r5
 80027d0:	07e4      	lsls	r4, r4, #31
 80027d2:	4323      	orrs	r3, r4
 80027d4:	0030      	movs	r0, r6
 80027d6:	0019      	movs	r1, r3
 80027d8:	bd70      	pop	{r4, r5, r6, pc}
 80027da:	380b      	subs	r0, #11
 80027dc:	4085      	lsls	r5, r0
 80027de:	032d      	lsls	r5, r5, #12
 80027e0:	2600      	movs	r6, #0
 80027e2:	0b2d      	lsrs	r5, r5, #12
 80027e4:	e7f2      	b.n	80027cc <__aeabi_i2d+0x3c>
 80027e6:	46c0      	nop			@ (mov r8, r8)
 80027e8:	0000041e 	.word	0x0000041e

080027ec <__aeabi_ui2d>:
 80027ec:	b510      	push	{r4, lr}
 80027ee:	1e04      	subs	r4, r0, #0
 80027f0:	d010      	beq.n	8002814 <__aeabi_ui2d+0x28>
 80027f2:	f000 f867 	bl	80028c4 <__clzsi2>
 80027f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002830 <__aeabi_ui2d+0x44>)
 80027f8:	1a1b      	subs	r3, r3, r0
 80027fa:	055b      	lsls	r3, r3, #21
 80027fc:	0d5b      	lsrs	r3, r3, #21
 80027fe:	280a      	cmp	r0, #10
 8002800:	dc0f      	bgt.n	8002822 <__aeabi_ui2d+0x36>
 8002802:	220b      	movs	r2, #11
 8002804:	0021      	movs	r1, r4
 8002806:	1a12      	subs	r2, r2, r0
 8002808:	40d1      	lsrs	r1, r2
 800280a:	3015      	adds	r0, #21
 800280c:	030a      	lsls	r2, r1, #12
 800280e:	4084      	lsls	r4, r0
 8002810:	0b12      	lsrs	r2, r2, #12
 8002812:	e001      	b.n	8002818 <__aeabi_ui2d+0x2c>
 8002814:	2300      	movs	r3, #0
 8002816:	2200      	movs	r2, #0
 8002818:	051b      	lsls	r3, r3, #20
 800281a:	4313      	orrs	r3, r2
 800281c:	0020      	movs	r0, r4
 800281e:	0019      	movs	r1, r3
 8002820:	bd10      	pop	{r4, pc}
 8002822:	0022      	movs	r2, r4
 8002824:	380b      	subs	r0, #11
 8002826:	4082      	lsls	r2, r0
 8002828:	0312      	lsls	r2, r2, #12
 800282a:	2400      	movs	r4, #0
 800282c:	0b12      	lsrs	r2, r2, #12
 800282e:	e7f3      	b.n	8002818 <__aeabi_ui2d+0x2c>
 8002830:	0000041e 	.word	0x0000041e

08002834 <__aeabi_f2d>:
 8002834:	b570      	push	{r4, r5, r6, lr}
 8002836:	0242      	lsls	r2, r0, #9
 8002838:	0043      	lsls	r3, r0, #1
 800283a:	0fc4      	lsrs	r4, r0, #31
 800283c:	20fe      	movs	r0, #254	@ 0xfe
 800283e:	0e1b      	lsrs	r3, r3, #24
 8002840:	1c59      	adds	r1, r3, #1
 8002842:	0a55      	lsrs	r5, r2, #9
 8002844:	4208      	tst	r0, r1
 8002846:	d00c      	beq.n	8002862 <__aeabi_f2d+0x2e>
 8002848:	21e0      	movs	r1, #224	@ 0xe0
 800284a:	0089      	lsls	r1, r1, #2
 800284c:	468c      	mov	ip, r1
 800284e:	076d      	lsls	r5, r5, #29
 8002850:	0b12      	lsrs	r2, r2, #12
 8002852:	4463      	add	r3, ip
 8002854:	051b      	lsls	r3, r3, #20
 8002856:	4313      	orrs	r3, r2
 8002858:	07e4      	lsls	r4, r4, #31
 800285a:	4323      	orrs	r3, r4
 800285c:	0028      	movs	r0, r5
 800285e:	0019      	movs	r1, r3
 8002860:	bd70      	pop	{r4, r5, r6, pc}
 8002862:	2b00      	cmp	r3, #0
 8002864:	d114      	bne.n	8002890 <__aeabi_f2d+0x5c>
 8002866:	2d00      	cmp	r5, #0
 8002868:	d01b      	beq.n	80028a2 <__aeabi_f2d+0x6e>
 800286a:	0028      	movs	r0, r5
 800286c:	f000 f82a 	bl	80028c4 <__clzsi2>
 8002870:	280a      	cmp	r0, #10
 8002872:	dc1c      	bgt.n	80028ae <__aeabi_f2d+0x7a>
 8002874:	230b      	movs	r3, #11
 8002876:	002a      	movs	r2, r5
 8002878:	1a1b      	subs	r3, r3, r0
 800287a:	40da      	lsrs	r2, r3
 800287c:	0003      	movs	r3, r0
 800287e:	3315      	adds	r3, #21
 8002880:	409d      	lsls	r5, r3
 8002882:	4b0e      	ldr	r3, [pc, #56]	@ (80028bc <__aeabi_f2d+0x88>)
 8002884:	0312      	lsls	r2, r2, #12
 8002886:	1a1b      	subs	r3, r3, r0
 8002888:	055b      	lsls	r3, r3, #21
 800288a:	0b12      	lsrs	r2, r2, #12
 800288c:	0d5b      	lsrs	r3, r3, #21
 800288e:	e7e1      	b.n	8002854 <__aeabi_f2d+0x20>
 8002890:	2d00      	cmp	r5, #0
 8002892:	d009      	beq.n	80028a8 <__aeabi_f2d+0x74>
 8002894:	0b13      	lsrs	r3, r2, #12
 8002896:	2280      	movs	r2, #128	@ 0x80
 8002898:	0312      	lsls	r2, r2, #12
 800289a:	431a      	orrs	r2, r3
 800289c:	076d      	lsls	r5, r5, #29
 800289e:	4b08      	ldr	r3, [pc, #32]	@ (80028c0 <__aeabi_f2d+0x8c>)
 80028a0:	e7d8      	b.n	8002854 <__aeabi_f2d+0x20>
 80028a2:	2300      	movs	r3, #0
 80028a4:	2200      	movs	r2, #0
 80028a6:	e7d5      	b.n	8002854 <__aeabi_f2d+0x20>
 80028a8:	2200      	movs	r2, #0
 80028aa:	4b05      	ldr	r3, [pc, #20]	@ (80028c0 <__aeabi_f2d+0x8c>)
 80028ac:	e7d2      	b.n	8002854 <__aeabi_f2d+0x20>
 80028ae:	0003      	movs	r3, r0
 80028b0:	002a      	movs	r2, r5
 80028b2:	3b0b      	subs	r3, #11
 80028b4:	409a      	lsls	r2, r3
 80028b6:	2500      	movs	r5, #0
 80028b8:	e7e3      	b.n	8002882 <__aeabi_f2d+0x4e>
 80028ba:	46c0      	nop			@ (mov r8, r8)
 80028bc:	00000389 	.word	0x00000389
 80028c0:	000007ff 	.word	0x000007ff

080028c4 <__clzsi2>:
 80028c4:	211c      	movs	r1, #28
 80028c6:	2301      	movs	r3, #1
 80028c8:	041b      	lsls	r3, r3, #16
 80028ca:	4298      	cmp	r0, r3
 80028cc:	d301      	bcc.n	80028d2 <__clzsi2+0xe>
 80028ce:	0c00      	lsrs	r0, r0, #16
 80028d0:	3910      	subs	r1, #16
 80028d2:	0a1b      	lsrs	r3, r3, #8
 80028d4:	4298      	cmp	r0, r3
 80028d6:	d301      	bcc.n	80028dc <__clzsi2+0x18>
 80028d8:	0a00      	lsrs	r0, r0, #8
 80028da:	3908      	subs	r1, #8
 80028dc:	091b      	lsrs	r3, r3, #4
 80028de:	4298      	cmp	r0, r3
 80028e0:	d301      	bcc.n	80028e6 <__clzsi2+0x22>
 80028e2:	0900      	lsrs	r0, r0, #4
 80028e4:	3904      	subs	r1, #4
 80028e6:	a202      	add	r2, pc, #8	@ (adr r2, 80028f0 <__clzsi2+0x2c>)
 80028e8:	5c10      	ldrb	r0, [r2, r0]
 80028ea:	1840      	adds	r0, r0, r1
 80028ec:	4770      	bx	lr
 80028ee:	46c0      	nop			@ (mov r8, r8)
 80028f0:	02020304 	.word	0x02020304
 80028f4:	01010101 	.word	0x01010101
	...

08002900 <__clzdi2>:
 8002900:	b510      	push	{r4, lr}
 8002902:	2900      	cmp	r1, #0
 8002904:	d103      	bne.n	800290e <__clzdi2+0xe>
 8002906:	f7ff ffdd 	bl	80028c4 <__clzsi2>
 800290a:	3020      	adds	r0, #32
 800290c:	e002      	b.n	8002914 <__clzdi2+0x14>
 800290e:	0008      	movs	r0, r1
 8002910:	f7ff ffd8 	bl	80028c4 <__clzsi2>
 8002914:	bd10      	pop	{r4, pc}
 8002916:	46c0      	nop			@ (mov r8, r8)

08002918 <__divdi3>:
 8002918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800291a:	46d6      	mov	lr, sl
 800291c:	464f      	mov	r7, r9
 800291e:	4646      	mov	r6, r8
 8002920:	b5c0      	push	{r6, r7, lr}
 8002922:	0004      	movs	r4, r0
 8002924:	000d      	movs	r5, r1
 8002926:	0010      	movs	r0, r2
 8002928:	0019      	movs	r1, r3
 800292a:	b082      	sub	sp, #8
 800292c:	2d00      	cmp	r5, #0
 800292e:	da00      	bge.n	8002932 <__divdi3+0x1a>
 8002930:	e087      	b.n	8002a42 <__divdi3+0x12a>
 8002932:	2b00      	cmp	r3, #0
 8002934:	db0b      	blt.n	800294e <__divdi3+0x36>
 8002936:	0016      	movs	r6, r2
 8002938:	001f      	movs	r7, r3
 800293a:	42ab      	cmp	r3, r5
 800293c:	d919      	bls.n	8002972 <__divdi3+0x5a>
 800293e:	2000      	movs	r0, #0
 8002940:	2100      	movs	r1, #0
 8002942:	b002      	add	sp, #8
 8002944:	bce0      	pop	{r5, r6, r7}
 8002946:	46ba      	mov	sl, r7
 8002948:	46b1      	mov	r9, r6
 800294a:	46a8      	mov	r8, r5
 800294c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800294e:	2700      	movs	r7, #0
 8002950:	4246      	negs	r6, r0
 8002952:	418f      	sbcs	r7, r1
 8002954:	42af      	cmp	r7, r5
 8002956:	d804      	bhi.n	8002962 <__divdi3+0x4a>
 8002958:	d000      	beq.n	800295c <__divdi3+0x44>
 800295a:	e082      	b.n	8002a62 <__divdi3+0x14a>
 800295c:	42a6      	cmp	r6, r4
 800295e:	d800      	bhi.n	8002962 <__divdi3+0x4a>
 8002960:	e07f      	b.n	8002a62 <__divdi3+0x14a>
 8002962:	2000      	movs	r0, #0
 8002964:	2100      	movs	r1, #0
 8002966:	e08f      	b.n	8002a88 <__divdi3+0x170>
 8002968:	2700      	movs	r7, #0
 800296a:	4246      	negs	r6, r0
 800296c:	418f      	sbcs	r7, r1
 800296e:	429f      	cmp	r7, r3
 8002970:	d8e5      	bhi.n	800293e <__divdi3+0x26>
 8002972:	42af      	cmp	r7, r5
 8002974:	d100      	bne.n	8002978 <__divdi3+0x60>
 8002976:	e098      	b.n	8002aaa <__divdi3+0x192>
 8002978:	2300      	movs	r3, #0
 800297a:	4699      	mov	r9, r3
 800297c:	0039      	movs	r1, r7
 800297e:	0030      	movs	r0, r6
 8002980:	f7ff ffbe 	bl	8002900 <__clzdi2>
 8002984:	4680      	mov	r8, r0
 8002986:	0029      	movs	r1, r5
 8002988:	0020      	movs	r0, r4
 800298a:	f7ff ffb9 	bl	8002900 <__clzdi2>
 800298e:	4643      	mov	r3, r8
 8002990:	1a1b      	subs	r3, r3, r0
 8002992:	4698      	mov	r8, r3
 8002994:	3b20      	subs	r3, #32
 8002996:	d500      	bpl.n	800299a <__divdi3+0x82>
 8002998:	e07c      	b.n	8002a94 <__divdi3+0x17c>
 800299a:	0031      	movs	r1, r6
 800299c:	4099      	lsls	r1, r3
 800299e:	469a      	mov	sl, r3
 80029a0:	000b      	movs	r3, r1
 80029a2:	0031      	movs	r1, r6
 80029a4:	4640      	mov	r0, r8
 80029a6:	4081      	lsls	r1, r0
 80029a8:	000a      	movs	r2, r1
 80029aa:	42ab      	cmp	r3, r5
 80029ac:	d85f      	bhi.n	8002a6e <__divdi3+0x156>
 80029ae:	d05c      	beq.n	8002a6a <__divdi3+0x152>
 80029b0:	4651      	mov	r1, sl
 80029b2:	1aa4      	subs	r4, r4, r2
 80029b4:	419d      	sbcs	r5, r3
 80029b6:	2900      	cmp	r1, #0
 80029b8:	da00      	bge.n	80029bc <__divdi3+0xa4>
 80029ba:	e093      	b.n	8002ae4 <__divdi3+0x1cc>
 80029bc:	2100      	movs	r1, #0
 80029be:	2000      	movs	r0, #0
 80029c0:	2601      	movs	r6, #1
 80029c2:	9000      	str	r0, [sp, #0]
 80029c4:	9101      	str	r1, [sp, #4]
 80029c6:	4651      	mov	r1, sl
 80029c8:	408e      	lsls	r6, r1
 80029ca:	9601      	str	r6, [sp, #4]
 80029cc:	4641      	mov	r1, r8
 80029ce:	2601      	movs	r6, #1
 80029d0:	408e      	lsls	r6, r1
 80029d2:	4641      	mov	r1, r8
 80029d4:	9600      	str	r6, [sp, #0]
 80029d6:	2900      	cmp	r1, #0
 80029d8:	d050      	beq.n	8002a7c <__divdi3+0x164>
 80029da:	07d9      	lsls	r1, r3, #31
 80029dc:	0856      	lsrs	r6, r2, #1
 80029de:	430e      	orrs	r6, r1
 80029e0:	085f      	lsrs	r7, r3, #1
 80029e2:	4641      	mov	r1, r8
 80029e4:	2201      	movs	r2, #1
 80029e6:	2300      	movs	r3, #0
 80029e8:	e00c      	b.n	8002a04 <__divdi3+0xec>
 80029ea:	42af      	cmp	r7, r5
 80029ec:	d101      	bne.n	80029f2 <__divdi3+0xda>
 80029ee:	42a6      	cmp	r6, r4
 80029f0:	d80a      	bhi.n	8002a08 <__divdi3+0xf0>
 80029f2:	1ba4      	subs	r4, r4, r6
 80029f4:	41bd      	sbcs	r5, r7
 80029f6:	1924      	adds	r4, r4, r4
 80029f8:	416d      	adcs	r5, r5
 80029fa:	3901      	subs	r1, #1
 80029fc:	18a4      	adds	r4, r4, r2
 80029fe:	415d      	adcs	r5, r3
 8002a00:	2900      	cmp	r1, #0
 8002a02:	d006      	beq.n	8002a12 <__divdi3+0xfa>
 8002a04:	42af      	cmp	r7, r5
 8002a06:	d9f0      	bls.n	80029ea <__divdi3+0xd2>
 8002a08:	3901      	subs	r1, #1
 8002a0a:	1924      	adds	r4, r4, r4
 8002a0c:	416d      	adcs	r5, r5
 8002a0e:	2900      	cmp	r1, #0
 8002a10:	d1f8      	bne.n	8002a04 <__divdi3+0xec>
 8002a12:	9800      	ldr	r0, [sp, #0]
 8002a14:	9901      	ldr	r1, [sp, #4]
 8002a16:	4653      	mov	r3, sl
 8002a18:	1900      	adds	r0, r0, r4
 8002a1a:	4169      	adcs	r1, r5
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	db48      	blt.n	8002ab2 <__divdi3+0x19a>
 8002a20:	002e      	movs	r6, r5
 8002a22:	002c      	movs	r4, r5
 8002a24:	40de      	lsrs	r6, r3
 8002a26:	4643      	mov	r3, r8
 8002a28:	40dc      	lsrs	r4, r3
 8002a2a:	4653      	mov	r3, sl
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	db50      	blt.n	8002ad2 <__divdi3+0x1ba>
 8002a30:	0034      	movs	r4, r6
 8002a32:	409c      	lsls	r4, r3
 8002a34:	0023      	movs	r3, r4
 8002a36:	4644      	mov	r4, r8
 8002a38:	40a6      	lsls	r6, r4
 8002a3a:	0032      	movs	r2, r6
 8002a3c:	1a80      	subs	r0, r0, r2
 8002a3e:	4199      	sbcs	r1, r3
 8002a40:	e01e      	b.n	8002a80 <__divdi3+0x168>
 8002a42:	2300      	movs	r3, #0
 8002a44:	4262      	negs	r2, r4
 8002a46:	41ab      	sbcs	r3, r5
 8002a48:	0014      	movs	r4, r2
 8002a4a:	001d      	movs	r5, r3
 8002a4c:	2900      	cmp	r1, #0
 8002a4e:	db8b      	blt.n	8002968 <__divdi3+0x50>
 8002a50:	0006      	movs	r6, r0
 8002a52:	000f      	movs	r7, r1
 8002a54:	4299      	cmp	r1, r3
 8002a56:	d900      	bls.n	8002a5a <__divdi3+0x142>
 8002a58:	e771      	b.n	800293e <__divdi3+0x26>
 8002a5a:	d102      	bne.n	8002a62 <__divdi3+0x14a>
 8002a5c:	4290      	cmp	r0, r2
 8002a5e:	d900      	bls.n	8002a62 <__divdi3+0x14a>
 8002a60:	e76d      	b.n	800293e <__divdi3+0x26>
 8002a62:	2301      	movs	r3, #1
 8002a64:	425b      	negs	r3, r3
 8002a66:	4699      	mov	r9, r3
 8002a68:	e788      	b.n	800297c <__divdi3+0x64>
 8002a6a:	42a1      	cmp	r1, r4
 8002a6c:	d9a0      	bls.n	80029b0 <__divdi3+0x98>
 8002a6e:	2100      	movs	r1, #0
 8002a70:	2000      	movs	r0, #0
 8002a72:	9000      	str	r0, [sp, #0]
 8002a74:	9101      	str	r1, [sp, #4]
 8002a76:	4641      	mov	r1, r8
 8002a78:	2900      	cmp	r1, #0
 8002a7a:	d1ae      	bne.n	80029da <__divdi3+0xc2>
 8002a7c:	9800      	ldr	r0, [sp, #0]
 8002a7e:	9901      	ldr	r1, [sp, #4]
 8002a80:	464b      	mov	r3, r9
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d100      	bne.n	8002a88 <__divdi3+0x170>
 8002a86:	e75c      	b.n	8002942 <__divdi3+0x2a>
 8002a88:	0003      	movs	r3, r0
 8002a8a:	000c      	movs	r4, r1
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	4258      	negs	r0, r3
 8002a90:	41a1      	sbcs	r1, r4
 8002a92:	e756      	b.n	8002942 <__divdi3+0x2a>
 8002a94:	4642      	mov	r2, r8
 8002a96:	0038      	movs	r0, r7
 8002a98:	469a      	mov	sl, r3
 8002a9a:	2320      	movs	r3, #32
 8002a9c:	0031      	movs	r1, r6
 8002a9e:	4090      	lsls	r0, r2
 8002aa0:	1a9b      	subs	r3, r3, r2
 8002aa2:	40d9      	lsrs	r1, r3
 8002aa4:	0003      	movs	r3, r0
 8002aa6:	430b      	orrs	r3, r1
 8002aa8:	e77b      	b.n	80029a2 <__divdi3+0x8a>
 8002aaa:	42a6      	cmp	r6, r4
 8002aac:	d800      	bhi.n	8002ab0 <__divdi3+0x198>
 8002aae:	e763      	b.n	8002978 <__divdi3+0x60>
 8002ab0:	e745      	b.n	800293e <__divdi3+0x26>
 8002ab2:	4642      	mov	r2, r8
 8002ab4:	2320      	movs	r3, #32
 8002ab6:	1a9b      	subs	r3, r3, r2
 8002ab8:	002a      	movs	r2, r5
 8002aba:	409a      	lsls	r2, r3
 8002abc:	0026      	movs	r6, r4
 8002abe:	0013      	movs	r3, r2
 8002ac0:	4642      	mov	r2, r8
 8002ac2:	40d6      	lsrs	r6, r2
 8002ac4:	002c      	movs	r4, r5
 8002ac6:	431e      	orrs	r6, r3
 8002ac8:	4643      	mov	r3, r8
 8002aca:	40dc      	lsrs	r4, r3
 8002acc:	4653      	mov	r3, sl
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	daae      	bge.n	8002a30 <__divdi3+0x118>
 8002ad2:	4642      	mov	r2, r8
 8002ad4:	2320      	movs	r3, #32
 8002ad6:	0035      	movs	r5, r6
 8002ad8:	4094      	lsls	r4, r2
 8002ada:	1a9b      	subs	r3, r3, r2
 8002adc:	40dd      	lsrs	r5, r3
 8002ade:	0023      	movs	r3, r4
 8002ae0:	432b      	orrs	r3, r5
 8002ae2:	e7a8      	b.n	8002a36 <__divdi3+0x11e>
 8002ae4:	4641      	mov	r1, r8
 8002ae6:	2620      	movs	r6, #32
 8002ae8:	2701      	movs	r7, #1
 8002aea:	1a76      	subs	r6, r6, r1
 8002aec:	2000      	movs	r0, #0
 8002aee:	2100      	movs	r1, #0
 8002af0:	40f7      	lsrs	r7, r6
 8002af2:	9000      	str	r0, [sp, #0]
 8002af4:	9101      	str	r1, [sp, #4]
 8002af6:	9701      	str	r7, [sp, #4]
 8002af8:	e768      	b.n	80029cc <__divdi3+0xb4>
 8002afa:	46c0      	nop			@ (mov r8, r8)

08002afc <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2203      	movs	r2, #3
 8002b08:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2203      	movs	r2, #3
 8002b14:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2203      	movs	r2, #3
 8002b1a:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2203      	movs	r2, #3
 8002b20:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2203      	movs	r2, #3
 8002b26:	715a      	strb	r2, [r3, #5]
}
 8002b28:	46c0      	nop			@ (mov r8, r8)
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	b002      	add	sp, #8
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8002b30:	b590      	push	{r4, r7, lr}
 8002b32:	b08b      	sub	sp, #44	@ 0x2c
 8002b34:	af04      	add	r7, sp, #16
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	607a      	str	r2, [r7, #4]
 8002b3a:	240b      	movs	r4, #11
 8002b3c:	193b      	adds	r3, r7, r4
 8002b3e:	1c0a      	adds	r2, r1, #0
 8002b40:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002b46:	2116      	movs	r1, #22
 8002b48:	187a      	adds	r2, r7, r1
 8002b4a:	18db      	adds	r3, r3, r3
 8002b4c:	8013      	strh	r3, [r2, #0]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002b52:	193b      	adds	r3, r7, r4
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	187b      	adds	r3, r7, r1
 8002b5a:	8819      	ldrh	r1, [r3, #0]
 8002b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b9c <read_register16+0x6c>)
 8002b5e:	9302      	str	r3, [sp, #8]
 8002b60:	2302      	movs	r3, #2
 8002b62:	9301      	str	r3, [sp, #4]
 8002b64:	2414      	movs	r4, #20
 8002b66:	193b      	adds	r3, r7, r4
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	f001 fda4 	bl	80046b8 <HAL_I2C_Mem_Read>
 8002b70:	1e03      	subs	r3, r0, #0
 8002b72:	d10e      	bne.n	8002b92 <read_register16+0x62>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8002b74:	0021      	movs	r1, r4
 8002b76:	187b      	adds	r3, r7, r1
 8002b78:	785b      	ldrb	r3, [r3, #1]
 8002b7a:	021b      	lsls	r3, r3, #8
 8002b7c:	b21a      	sxth	r2, r3
 8002b7e:	187b      	adds	r3, r7, r1
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	b21b      	sxth	r3, r3
 8002b84:	4313      	orrs	r3, r2
 8002b86:	b21b      	sxth	r3, r3
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	801a      	strh	r2, [r3, #0]
		return true;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <read_register16+0x64>
	} else
		return false;
 8002b92:	2300      	movs	r3, #0

}
 8002b94:	0018      	movs	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	b007      	add	sp, #28
 8002b9a:	bd90      	pop	{r4, r7, pc}
 8002b9c:	00001388 	.word	0x00001388

08002ba0 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8002ba0:	b5b0      	push	{r4, r5, r7, lr}
 8002ba2:	b08a      	sub	sp, #40	@ 0x28
 8002ba4:	af04      	add	r7, sp, #16
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	0008      	movs	r0, r1
 8002baa:	607a      	str	r2, [r7, #4]
 8002bac:	0019      	movs	r1, r3
 8002bae:	240b      	movs	r4, #11
 8002bb0:	193b      	adds	r3, r7, r4
 8002bb2:	1c02      	adds	r2, r0, #0
 8002bb4:	701a      	strb	r2, [r3, #0]
 8002bb6:	250a      	movs	r5, #10
 8002bb8:	197b      	adds	r3, r7, r5
 8002bba:	1c0a      	adds	r2, r1, #0
 8002bbc:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002bc2:	2116      	movs	r1, #22
 8002bc4:	187a      	adds	r2, r7, r1
 8002bc6:	18db      	adds	r3, r3, r3
 8002bc8:	8013      	strh	r3, [r2, #0]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002bce:	193b      	adds	r3, r7, r4
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	b29c      	uxth	r4, r3
 8002bd4:	197b      	adds	r3, r7, r5
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	187a      	adds	r2, r7, r1
 8002bdc:	8811      	ldrh	r1, [r2, #0]
 8002bde:	4a09      	ldr	r2, [pc, #36]	@ (8002c04 <read_data+0x64>)
 8002be0:	9202      	str	r2, [sp, #8]
 8002be2:	9301      	str	r3, [sp, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	2301      	movs	r3, #1
 8002bea:	0022      	movs	r2, r4
 8002bec:	f001 fd64 	bl	80046b8 <HAL_I2C_Mem_Read>
 8002bf0:	1e03      	subs	r3, r0, #0
 8002bf2:	d101      	bne.n	8002bf8 <read_data+0x58>
		return 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	e000      	b.n	8002bfa <read_data+0x5a>
	else
		return 1;
 8002bf8:	2301      	movs	r3, #1

}
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	b006      	add	sp, #24
 8002c00:	bdb0      	pop	{r4, r5, r7, pc}
 8002c02:	46c0      	nop			@ (mov r8, r8)
 8002c04:	00001388 	.word	0x00001388

08002c08 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2188      	movs	r1, #136	@ 0x88
 8002c16:	0018      	movs	r0, r3
 8002c18:	f7ff ff8a 	bl	8002b30 <read_register16>
 8002c1c:	1e03      	subs	r3, r0, #0
 8002c1e:	d100      	bne.n	8002c22 <read_calibration_data+0x1a>
 8002c20:	e06d      	b.n	8002cfe <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	1c9a      	adds	r2, r3, #2
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	218a      	movs	r1, #138	@ 0x8a
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f7ff ff80 	bl	8002b30 <read_register16>
 8002c30:	1e03      	subs	r3, r0, #0
 8002c32:	d100      	bne.n	8002c36 <read_calibration_data+0x2e>
 8002c34:	e063      	b.n	8002cfe <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	1d1a      	adds	r2, r3, #4
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	218c      	movs	r1, #140	@ 0x8c
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f7ff ff76 	bl	8002b30 <read_register16>
 8002c44:	1e03      	subs	r3, r0, #0
 8002c46:	d05a      	beq.n	8002cfe <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	1d9a      	adds	r2, r3, #6
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	218e      	movs	r1, #142	@ 0x8e
 8002c50:	0018      	movs	r0, r3
 8002c52:	f7ff ff6d 	bl	8002b30 <read_register16>
 8002c56:	1e03      	subs	r3, r0, #0
 8002c58:	d051      	beq.n	8002cfe <read_calibration_data+0xf6>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3308      	adds	r3, #8
 8002c5e:	001a      	movs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2190      	movs	r1, #144	@ 0x90
 8002c64:	0018      	movs	r0, r3
 8002c66:	f7ff ff63 	bl	8002b30 <read_register16>
 8002c6a:	1e03      	subs	r3, r0, #0
 8002c6c:	d047      	beq.n	8002cfe <read_calibration_data+0xf6>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	330a      	adds	r3, #10
 8002c72:	001a      	movs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2192      	movs	r1, #146	@ 0x92
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f7ff ff59 	bl	8002b30 <read_register16>
 8002c7e:	1e03      	subs	r3, r0, #0
 8002c80:	d03d      	beq.n	8002cfe <read_calibration_data+0xf6>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	330c      	adds	r3, #12
 8002c86:	001a      	movs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2194      	movs	r1, #148	@ 0x94
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f7ff ff4f 	bl	8002b30 <read_register16>
 8002c92:	1e03      	subs	r3, r0, #0
 8002c94:	d033      	beq.n	8002cfe <read_calibration_data+0xf6>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	330e      	adds	r3, #14
 8002c9a:	001a      	movs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2196      	movs	r1, #150	@ 0x96
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f7ff ff45 	bl	8002b30 <read_register16>
 8002ca6:	1e03      	subs	r3, r0, #0
 8002ca8:	d029      	beq.n	8002cfe <read_calibration_data+0xf6>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3310      	adds	r3, #16
 8002cae:	001a      	movs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2198      	movs	r1, #152	@ 0x98
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f7ff ff3b 	bl	8002b30 <read_register16>
 8002cba:	1e03      	subs	r3, r0, #0
 8002cbc:	d01f      	beq.n	8002cfe <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3312      	adds	r3, #18
 8002cc2:	001a      	movs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	219a      	movs	r1, #154	@ 0x9a
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f7ff ff31 	bl	8002b30 <read_register16>
 8002cce:	1e03      	subs	r3, r0, #0
 8002cd0:	d015      	beq.n	8002cfe <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	3314      	adds	r3, #20
 8002cd6:	001a      	movs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	219c      	movs	r1, #156	@ 0x9c
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f7ff ff27 	bl	8002b30 <read_register16>
 8002ce2:	1e03      	subs	r3, r0, #0
 8002ce4:	d00b      	beq.n	8002cfe <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	3316      	adds	r3, #22
 8002cea:	001a      	movs	r2, r3
			&& read_register16(dev, 0x9e,
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	219e      	movs	r1, #158	@ 0x9e
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f7ff ff1d 	bl	8002b30 <read_register16>
 8002cf6:	1e03      	subs	r3, r0, #0
 8002cf8:	d001      	beq.n	8002cfe <read_calibration_data+0xf6>

		return true;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <read_calibration_data+0xf8>
	}

	return false;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	0018      	movs	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b002      	add	sp, #8
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8002d08:	b5b0      	push	{r4, r5, r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3318      	adds	r3, #24
 8002d14:	001a      	movs	r2, r3
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	2301      	movs	r3, #1
 8002d1a:	21a1      	movs	r1, #161	@ 0xa1
 8002d1c:	f7ff ff40 	bl	8002ba0 <read_data>
 8002d20:	1e03      	subs	r3, r0, #0
 8002d22:	d14b      	bne.n	8002dbc <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	331a      	adds	r3, #26
 8002d28:	001a      	movs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	21e1      	movs	r1, #225	@ 0xe1
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f7ff fefe 	bl	8002b30 <read_register16>
 8002d34:	1e03      	subs	r3, r0, #0
 8002d36:	d041      	beq.n	8002dbc <read_hum_calibration_data+0xb4>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	331c      	adds	r3, #28
 8002d3c:	001a      	movs	r2, r3
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	2301      	movs	r3, #1
 8002d42:	21e3      	movs	r1, #227	@ 0xe3
 8002d44:	f7ff ff2c 	bl	8002ba0 <read_data>
 8002d48:	1e03      	subs	r3, r0, #0
 8002d4a:	d137      	bne.n	8002dbc <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe4, &h4)
 8002d4c:	240e      	movs	r4, #14
 8002d4e:	193a      	adds	r2, r7, r4
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	21e4      	movs	r1, #228	@ 0xe4
 8002d54:	0018      	movs	r0, r3
 8002d56:	f7ff feeb 	bl	8002b30 <read_register16>
 8002d5a:	1e03      	subs	r3, r0, #0
 8002d5c:	d02e      	beq.n	8002dbc <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe5, &h5)
 8002d5e:	250c      	movs	r5, #12
 8002d60:	197a      	adds	r2, r7, r5
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	21e5      	movs	r1, #229	@ 0xe5
 8002d66:	0018      	movs	r0, r3
 8002d68:	f7ff fee2 	bl	8002b30 <read_register16>
 8002d6c:	1e03      	subs	r3, r0, #0
 8002d6e:	d025      	beq.n	8002dbc <read_hum_calibration_data+0xb4>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3322      	adds	r3, #34	@ 0x22
 8002d74:	001a      	movs	r2, r3
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	2301      	movs	r3, #1
 8002d7a:	21e7      	movs	r1, #231	@ 0xe7
 8002d7c:	f7ff ff10 	bl	8002ba0 <read_data>
 8002d80:	1e03      	subs	r3, r0, #0
 8002d82:	d11b      	bne.n	8002dbc <read_hum_calibration_data+0xb4>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8002d84:	193b      	adds	r3, r7, r4
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	b21a      	sxth	r2, r3
 8002d8c:	23ff      	movs	r3, #255	@ 0xff
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	4013      	ands	r3, r2
 8002d92:	b21a      	sxth	r2, r3
 8002d94:	193b      	adds	r3, r7, r4
 8002d96:	881b      	ldrh	r3, [r3, #0]
 8002d98:	121b      	asrs	r3, r3, #8
 8002d9a:	b21b      	sxth	r3, r3
 8002d9c:	210f      	movs	r1, #15
 8002d9e:	400b      	ands	r3, r1
 8002da0:	b21b      	sxth	r3, r3
 8002da2:	4313      	orrs	r3, r2
 8002da4:	b21a      	sxth	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8002daa:	197b      	adds	r3, r7, r5
 8002dac:	881b      	ldrh	r3, [r3, #0]
 8002dae:	091b      	lsrs	r3, r3, #4
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	b21a      	sxth	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	841a      	strh	r2, [r3, #32]

		return true;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e000      	b.n	8002dbe <read_hum_calibration_data+0xb6>
	}

	return false;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b004      	add	sp, #16
 8002dc4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002dc8 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b088      	sub	sp, #32
 8002dcc:	af04      	add	r7, sp, #16
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	0008      	movs	r0, r1
 8002dd2:	0011      	movs	r1, r2
 8002dd4:	1cfb      	adds	r3, r7, #3
 8002dd6:	1c02      	adds	r2, r0, #0
 8002dd8:	701a      	strb	r2, [r3, #0]
 8002dda:	1cbb      	adds	r3, r7, #2
 8002ddc:	1c0a      	adds	r2, r1, #0
 8002dde:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002de4:	210e      	movs	r1, #14
 8002de6:	187a      	adds	r2, r7, r1
 8002de8:	18db      	adds	r3, r3, r3
 8002dea:	8013      	strh	r3, [r2, #0]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002df0:	1cfb      	adds	r3, r7, #3
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	187b      	adds	r3, r7, r1
 8002df8:	8819      	ldrh	r1, [r3, #0]
 8002dfa:	4b09      	ldr	r3, [pc, #36]	@ (8002e20 <write_register8+0x58>)
 8002dfc:	9302      	str	r3, [sp, #8]
 8002dfe:	2301      	movs	r3, #1
 8002e00:	9301      	str	r3, [sp, #4]
 8002e02:	1cbb      	adds	r3, r7, #2
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	2301      	movs	r3, #1
 8002e08:	f001 fb28 	bl	800445c <HAL_I2C_Mem_Write>
 8002e0c:	1e03      	subs	r3, r0, #0
 8002e0e:	d101      	bne.n	8002e14 <write_register8+0x4c>
		return false;
 8002e10:	2300      	movs	r3, #0
 8002e12:	e000      	b.n	8002e16 <write_register8+0x4e>
	else
		return true;
 8002e14:	2301      	movs	r3, #1
}
 8002e16:	0018      	movs	r0, r3
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	b004      	add	sp, #16
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	46c0      	nop			@ (mov r8, r8)
 8002e20:	00002710 	.word	0x00002710

08002e24 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8002e24:	b590      	push	{r4, r7, lr}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002e32:	2b76      	cmp	r3, #118	@ 0x76
 8002e34:	d005      	beq.n	8002e42 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002e3a:	2b77      	cmp	r3, #119	@ 0x77
 8002e3c:	d001      	beq.n	8002e42 <bmp280_init+0x1e>

		return false;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	e0a3      	b.n	8002f8a <bmp280_init+0x166>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	3332      	adds	r3, #50	@ 0x32
 8002e46:	001a      	movs	r2, r3
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	21d0      	movs	r1, #208	@ 0xd0
 8002e4e:	f7ff fea7 	bl	8002ba0 <read_data>
 8002e52:	1e03      	subs	r3, r0, #0
 8002e54:	d001      	beq.n	8002e5a <bmp280_init+0x36>
		return false;
 8002e56:	2300      	movs	r3, #0
 8002e58:	e097      	b.n	8002f8a <bmp280_init+0x166>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2232      	movs	r2, #50	@ 0x32
 8002e5e:	5c9b      	ldrb	r3, [r3, r2]
 8002e60:	2b58      	cmp	r3, #88	@ 0x58
 8002e62:	d006      	beq.n	8002e72 <bmp280_init+0x4e>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2232      	movs	r2, #50	@ 0x32
 8002e68:	5c9b      	ldrb	r3, [r3, r2]
 8002e6a:	2b60      	cmp	r3, #96	@ 0x60
 8002e6c:	d001      	beq.n	8002e72 <bmp280_init+0x4e>

		return false;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	e08b      	b.n	8002f8a <bmp280_init+0x166>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	22b6      	movs	r2, #182	@ 0xb6
 8002e76:	21e0      	movs	r1, #224	@ 0xe0
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f7ff ffa5 	bl	8002dc8 <write_register8>
 8002e7e:	1e03      	subs	r3, r0, #0
 8002e80:	d001      	beq.n	8002e86 <bmp280_init+0x62>
		return false;
 8002e82:	2300      	movs	r3, #0
 8002e84:	e081      	b.n	8002f8a <bmp280_init+0x166>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8002e86:	240c      	movs	r4, #12
 8002e88:	193a      	adds	r2, r7, r4
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	21f3      	movs	r1, #243	@ 0xf3
 8002e90:	f7ff fe86 	bl	8002ba0 <read_data>
 8002e94:	1e03      	subs	r3, r0, #0
 8002e96:	d1f6      	bne.n	8002e86 <bmp280_init+0x62>
				&& (status & 1) == 0)
 8002e98:	193b      	adds	r3, r7, r4
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	001a      	movs	r2, r3
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d1f0      	bne.n	8002e86 <bmp280_init+0x62>
			break;
	}

	if (!read_calibration_data(dev)) {
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f7ff feae 	bl	8002c08 <read_calibration_data>
 8002eac:	0003      	movs	r3, r0
 8002eae:	001a      	movs	r2, r3
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	4053      	eors	r3, r2
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d100      	bne.n	8002ebc <bmp280_init+0x98>
 8002eba:	e001      	b.n	8002ec0 <bmp280_init+0x9c>
		return false;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	e064      	b.n	8002f8a <bmp280_init+0x166>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2232      	movs	r2, #50	@ 0x32
 8002ec4:	5c9b      	ldrb	r3, [r3, r2]
 8002ec6:	2b60      	cmp	r3, #96	@ 0x60
 8002ec8:	d10c      	bne.n	8002ee4 <bmp280_init+0xc0>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	0018      	movs	r0, r3
 8002ece:	f7ff ff1b 	bl	8002d08 <read_hum_calibration_data>
 8002ed2:	0003      	movs	r3, r0
 8002ed4:	001a      	movs	r2, r3
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	4053      	eors	r3, r2
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <bmp280_init+0xc0>
		return false;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	e052      	b.n	8002f8a <bmp280_init+0x166>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	795b      	ldrb	r3, [r3, #5]
 8002ee8:	015b      	lsls	r3, r3, #5
 8002eea:	b25a      	sxtb	r2, r3
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	785b      	ldrb	r3, [r3, #1]
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	b25b      	sxtb	r3, r3
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	b25a      	sxtb	r2, r3
 8002ef8:	210f      	movs	r1, #15
 8002efa:	187b      	adds	r3, r7, r1
 8002efc:	701a      	strb	r2, [r3, #0]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8002efe:	187b      	adds	r3, r7, r1
 8002f00:	781a      	ldrb	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	21f5      	movs	r1, #245	@ 0xf5
 8002f06:	0018      	movs	r0, r3
 8002f08:	f7ff ff5e 	bl	8002dc8 <write_register8>
 8002f0c:	1e03      	subs	r3, r0, #0
 8002f0e:	d001      	beq.n	8002f14 <bmp280_init+0xf0>
		return false;
 8002f10:	2300      	movs	r3, #0
 8002f12:	e03a      	b.n	8002f8a <bmp280_init+0x166>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d102      	bne.n	8002f22 <bmp280_init+0xfe>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	78db      	ldrb	r3, [r3, #3]
 8002f26:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8002f28:	b25a      	sxtb	r2, r3
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	789b      	ldrb	r3, [r3, #2]
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	b25b      	sxtb	r3, r3
 8002f32:	4313      	orrs	r3, r2
 8002f34:	b25a      	sxtb	r2, r3
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	b25b      	sxtb	r3, r3
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	b25a      	sxtb	r2, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8002f40:	230e      	movs	r3, #14
 8002f42:	18fb      	adds	r3, r7, r3
 8002f44:	701a      	strb	r2, [r3, #0]

	if (dev->id == BME280_CHIP_ID) {
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2232      	movs	r2, #50	@ 0x32
 8002f4a:	5c9b      	ldrb	r3, [r3, r2]
 8002f4c:	2b60      	cmp	r3, #96	@ 0x60
 8002f4e:	d10f      	bne.n	8002f70 <bmp280_init+0x14c>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8002f50:	210d      	movs	r1, #13
 8002f52:	187b      	adds	r3, r7, r1
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	7912      	ldrb	r2, [r2, #4]
 8002f58:	701a      	strb	r2, [r3, #0]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8002f5a:	187b      	adds	r3, r7, r1
 8002f5c:	781a      	ldrb	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	21f2      	movs	r1, #242	@ 0xf2
 8002f62:	0018      	movs	r0, r3
 8002f64:	f7ff ff30 	bl	8002dc8 <write_register8>
 8002f68:	1e03      	subs	r3, r0, #0
 8002f6a:	d001      	beq.n	8002f70 <bmp280_init+0x14c>
			return false;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	e00c      	b.n	8002f8a <bmp280_init+0x166>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8002f70:	230e      	movs	r3, #14
 8002f72:	18fb      	adds	r3, r7, r3
 8002f74:	781a      	ldrb	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	21f4      	movs	r1, #244	@ 0xf4
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f7ff ff24 	bl	8002dc8 <write_register8>
 8002f80:	1e03      	subs	r3, r0, #0
 8002f82:	d001      	beq.n	8002f88 <bmp280_init+0x164>
		return false;
 8002f84:	2300      	movs	r3, #0
 8002f86:	e000      	b.n	8002f8a <bmp280_init+0x166>
	}

	return true;
 8002f88:	2301      	movs	r3, #1
}
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	b005      	add	sp, #20
 8002f90:	bd90      	pop	{r4, r7, pc}

08002f92 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b086      	sub	sp, #24
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	10da      	asrs	r2, r3, #3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	881b      	ldrh	r3, [r3, #0]
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	2102      	movs	r1, #2
 8002fae:	5e52      	ldrsh	r2, [r2, r1]
 8002fb0:	4353      	muls	r3, r2
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8002fb2:	12db      	asrs	r3, r3, #11
 8002fb4:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	111b      	asrs	r3, r3, #4
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	8812      	ldrh	r2, [r2, #0]
 8002fbe:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	1112      	asrs	r2, r2, #4
 8002fc4:	68f9      	ldr	r1, [r7, #12]
 8002fc6:	8809      	ldrh	r1, [r1, #0]
 8002fc8:	1a52      	subs	r2, r2, r1
 8002fca:	4353      	muls	r3, r2
 8002fcc:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	2104      	movs	r1, #4
 8002fd2:	5e52      	ldrsh	r2, [r2, r1]
 8002fd4:	4353      	muls	r3, r2
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8002fd6:	139b      	asrs	r3, r3, #14
 8002fd8:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	18d2      	adds	r2, r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	0013      	movs	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	189b      	adds	r3, r3, r2
 8002fee:	3380      	adds	r3, #128	@ 0x80
 8002ff0:	121b      	asrs	r3, r3, #8
}
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	b006      	add	sp, #24
 8002ff8:	bd80      	pop	{r7, pc}
	...

08002ffc <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8002ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ffe:	b0af      	sub	sp, #188	@ 0xbc
 8003000:	af00      	add	r7, sp, #0
 8003002:	239c      	movs	r3, #156	@ 0x9c
 8003004:	18fe      	adds	r6, r7, r3
 8003006:	6030      	str	r0, [r6, #0]
 8003008:	2098      	movs	r0, #152	@ 0x98
 800300a:	1838      	adds	r0, r7, r0
 800300c:	6001      	str	r1, [r0, #0]
 800300e:	2194      	movs	r1, #148	@ 0x94
 8003010:	1878      	adds	r0, r7, r1
 8003012:	6002      	str	r2, [r0, #0]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8003014:	187a      	adds	r2, r7, r1
 8003016:	6813      	ldr	r3, [r2, #0]
 8003018:	65bb      	str	r3, [r7, #88]	@ 0x58
 800301a:	17db      	asrs	r3, r3, #31
 800301c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800301e:	4ace      	ldr	r2, [pc, #824]	@ (8003358 <compensate_pressure+0x35c>)
 8003020:	2301      	movs	r3, #1
 8003022:	425b      	negs	r3, r3
 8003024:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003026:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003028:	1880      	adds	r0, r0, r2
 800302a:	4159      	adcs	r1, r3
 800302c:	0002      	movs	r2, r0
 800302e:	000b      	movs	r3, r1
 8003030:	26b0      	movs	r6, #176	@ 0xb0
 8003032:	19b9      	adds	r1, r7, r6
 8003034:	600a      	str	r2, [r1, #0]
 8003036:	604b      	str	r3, [r1, #4]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8003038:	19ba      	adds	r2, r7, r6
 800303a:	6853      	ldr	r3, [r2, #4]
 800303c:	6812      	ldr	r2, [r2, #0]
 800303e:	19b9      	adds	r1, r7, r6
 8003040:	6808      	ldr	r0, [r1, #0]
 8003042:	6849      	ldr	r1, [r1, #4]
 8003044:	f7fd fa74 	bl	8000530 <__aeabi_lmul>
 8003048:	0002      	movs	r2, r0
 800304a:	000b      	movs	r3, r1
 800304c:	0010      	movs	r0, r2
 800304e:	0019      	movs	r1, r3
 8003050:	239c      	movs	r3, #156	@ 0x9c
 8003052:	18fa      	adds	r2, r7, r3
 8003054:	6813      	ldr	r3, [r2, #0]
 8003056:	2210      	movs	r2, #16
 8003058:	5e9b      	ldrsh	r3, [r3, r2]
 800305a:	653b      	str	r3, [r7, #80]	@ 0x50
 800305c:	17db      	asrs	r3, r3, #31
 800305e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003060:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003064:	f7fd fa64 	bl	8000530 <__aeabi_lmul>
 8003068:	0002      	movs	r2, r0
 800306a:	000b      	movs	r3, r1
 800306c:	21a8      	movs	r1, #168	@ 0xa8
 800306e:	1878      	adds	r0, r7, r1
 8003070:	6002      	str	r2, [r0, #0]
 8003072:	6043      	str	r3, [r0, #4]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8003074:	239c      	movs	r3, #156	@ 0x9c
 8003076:	18fa      	adds	r2, r7, r3
 8003078:	6813      	ldr	r3, [r2, #0]
 800307a:	220e      	movs	r2, #14
 800307c:	5e9b      	ldrsh	r3, [r3, r2]
 800307e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003080:	17db      	asrs	r3, r3, #31
 8003082:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003084:	19ba      	adds	r2, r7, r6
 8003086:	6853      	ldr	r3, [r2, #4]
 8003088:	6812      	ldr	r2, [r2, #0]
 800308a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800308c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800308e:	f7fd fa4f 	bl	8000530 <__aeabi_lmul>
 8003092:	0002      	movs	r2, r0
 8003094:	000b      	movs	r3, r1
 8003096:	0bd1      	lsrs	r1, r2, #15
 8003098:	045d      	lsls	r5, r3, #17
 800309a:	430d      	orrs	r5, r1
 800309c:	0454      	lsls	r4, r2, #17
 800309e:	21a8      	movs	r1, #168	@ 0xa8
 80030a0:	187a      	adds	r2, r7, r1
 80030a2:	6853      	ldr	r3, [r2, #4]
 80030a4:	6812      	ldr	r2, [r2, #0]
 80030a6:	1912      	adds	r2, r2, r4
 80030a8:	416b      	adcs	r3, r5
 80030aa:	1878      	adds	r0, r7, r1
 80030ac:	6002      	str	r2, [r0, #0]
 80030ae:	6043      	str	r3, [r0, #4]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80030b0:	259c      	movs	r5, #156	@ 0x9c
 80030b2:	197b      	adds	r3, r7, r5
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	220c      	movs	r2, #12
 80030b8:	5e9b      	ldrsh	r3, [r3, r2]
 80030ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80030bc:	17db      	asrs	r3, r3, #31
 80030be:	647b      	str	r3, [r7, #68]	@ 0x44
 80030c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030c6:	2300      	movs	r3, #0
 80030c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030ca:	000c      	movs	r4, r1
 80030cc:	187b      	adds	r3, r7, r1
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80030d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80030d6:	1812      	adds	r2, r2, r0
 80030d8:	414b      	adcs	r3, r1
 80030da:	1939      	adds	r1, r7, r4
 80030dc:	600a      	str	r2, [r1, #0]
 80030de:	604b      	str	r3, [r1, #4]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80030e0:	0034      	movs	r4, r6
 80030e2:	193b      	adds	r3, r7, r4
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	1939      	adds	r1, r7, r4
 80030ea:	6808      	ldr	r0, [r1, #0]
 80030ec:	6849      	ldr	r1, [r1, #4]
 80030ee:	f7fd fa1f 	bl	8000530 <__aeabi_lmul>
 80030f2:	0002      	movs	r2, r0
 80030f4:	000b      	movs	r3, r1
 80030f6:	0010      	movs	r0, r2
 80030f8:	0019      	movs	r1, r3
 80030fa:	197b      	adds	r3, r7, r5
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	220a      	movs	r2, #10
 8003100:	5e9b      	ldrsh	r3, [r3, r2]
 8003102:	633b      	str	r3, [r7, #48]	@ 0x30
 8003104:	17db      	asrs	r3, r3, #31
 8003106:	637b      	str	r3, [r7, #52]	@ 0x34
 8003108:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800310a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800310c:	f7fd fa10 	bl	8000530 <__aeabi_lmul>
 8003110:	0002      	movs	r2, r0
 8003112:	000b      	movs	r3, r1
 8003114:	0619      	lsls	r1, r3, #24
 8003116:	468c      	mov	ip, r1
 8003118:	0a10      	lsrs	r0, r2, #8
 800311a:	2688      	movs	r6, #136	@ 0x88
 800311c:	19b9      	adds	r1, r7, r6
 800311e:	6008      	str	r0, [r1, #0]
 8003120:	19b8      	adds	r0, r7, r6
 8003122:	6800      	ldr	r0, [r0, #0]
 8003124:	4661      	mov	r1, ip
 8003126:	4308      	orrs	r0, r1
 8003128:	19b9      	adds	r1, r7, r6
 800312a:	6008      	str	r0, [r1, #0]
 800312c:	121b      	asrs	r3, r3, #8
 800312e:	228c      	movs	r2, #140	@ 0x8c
 8003130:	18ba      	adds	r2, r7, r2
 8003132:	6013      	str	r3, [r2, #0]
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8003134:	197b      	adds	r3, r7, r5
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2208      	movs	r2, #8
 800313a:	5e9b      	ldrsh	r3, [r3, r2]
 800313c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800313e:	17db      	asrs	r3, r3, #31
 8003140:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003142:	193b      	adds	r3, r7, r4
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800314a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800314c:	f7fd f9f0 	bl	8000530 <__aeabi_lmul>
 8003150:	0002      	movs	r2, r0
 8003152:	000b      	movs	r3, r1
 8003154:	0d11      	lsrs	r1, r2, #20
 8003156:	468c      	mov	ip, r1
 8003158:	0318      	lsls	r0, r3, #12
 800315a:	2184      	movs	r1, #132	@ 0x84
 800315c:	1879      	adds	r1, r7, r1
 800315e:	6008      	str	r0, [r1, #0]
 8003160:	2084      	movs	r0, #132	@ 0x84
 8003162:	1839      	adds	r1, r7, r0
 8003164:	6808      	ldr	r0, [r1, #0]
 8003166:	4661      	mov	r1, ip
 8003168:	4308      	orrs	r0, r1
 800316a:	2184      	movs	r1, #132	@ 0x84
 800316c:	1879      	adds	r1, r7, r1
 800316e:	6008      	str	r0, [r1, #0]
 8003170:	0313      	lsls	r3, r2, #12
 8003172:	2180      	movs	r1, #128	@ 0x80
 8003174:	187a      	adds	r2, r7, r1
 8003176:	6013      	str	r3, [r2, #0]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8003178:	19bb      	adds	r3, r7, r6
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	1879      	adds	r1, r7, r1
 8003180:	6808      	ldr	r0, [r1, #0]
 8003182:	6849      	ldr	r1, [r1, #4]
 8003184:	1812      	adds	r2, r2, r0
 8003186:	414b      	adcs	r3, r1
 8003188:	1939      	adds	r1, r7, r4
 800318a:	600a      	str	r2, [r1, #0]
 800318c:	604b      	str	r3, [r1, #4]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 800318e:	193b      	adds	r3, r7, r4
 8003190:	6818      	ldr	r0, [r3, #0]
 8003192:	6859      	ldr	r1, [r3, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	2380      	movs	r3, #128	@ 0x80
 8003198:	021b      	lsls	r3, r3, #8
 800319a:	1880      	adds	r0, r0, r2
 800319c:	4159      	adcs	r1, r3
 800319e:	197b      	adds	r3, r7, r5
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	88db      	ldrh	r3, [r3, #6]
 80031a4:	623b      	str	r3, [r7, #32]
 80031a6:	2300      	movs	r3, #0
 80031a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80031aa:	6a3a      	ldr	r2, [r7, #32]
 80031ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ae:	f7fd f9bf 	bl	8000530 <__aeabi_lmul>
 80031b2:	0002      	movs	r2, r0
 80031b4:	000b      	movs	r3, r1
 80031b6:	1059      	asrs	r1, r3, #1
 80031b8:	1938      	adds	r0, r7, r4
 80031ba:	6001      	str	r1, [r0, #0]
 80031bc:	17db      	asrs	r3, r3, #31
 80031be:	21b4      	movs	r1, #180	@ 0xb4
 80031c0:	187a      	adds	r2, r7, r1
 80031c2:	6013      	str	r3, [r2, #0]

	if (var1 == 0) {
 80031c4:	193b      	adds	r3, r7, r4
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	187b      	adds	r3, r7, r1
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	431a      	orrs	r2, r3
 80031ce:	d101      	bne.n	80031d4 <compensate_pressure+0x1d8>
		return 0;  // avoid exception caused by division by zero
 80031d0:	2300      	movs	r3, #0
 80031d2:	e0bc      	b.n	800334e <compensate_pressure+0x352>
	}

	p = 1048576 - adc_press;
 80031d4:	2398      	movs	r3, #152	@ 0x98
 80031d6:	18fb      	adds	r3, r7, r3
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	2380      	movs	r3, #128	@ 0x80
 80031dc:	035b      	lsls	r3, r3, #13
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	24a0      	movs	r4, #160	@ 0xa0
 80031e2:	193a      	adds	r2, r7, r4
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	17db      	asrs	r3, r3, #31
 80031e8:	25a4      	movs	r5, #164	@ 0xa4
 80031ea:	197a      	adds	r2, r7, r5
 80031ec:	6013      	str	r3, [r2, #0]
	p = (((p << 31) - var2) * 3125) / var1;
 80031ee:	193b      	adds	r3, r7, r4
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	105b      	asrs	r3, r3, #1
 80031f4:	61fb      	str	r3, [r7, #28]
 80031f6:	193b      	adds	r3, r7, r4
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	07db      	lsls	r3, r3, #31
 80031fc:	61bb      	str	r3, [r7, #24]
 80031fe:	20a8      	movs	r0, #168	@ 0xa8
 8003200:	183a      	adds	r2, r7, r0
 8003202:	6853      	ldr	r3, [r2, #4]
 8003204:	6812      	ldr	r2, [r2, #0]
 8003206:	69b8      	ldr	r0, [r7, #24]
 8003208:	69f9      	ldr	r1, [r7, #28]
 800320a:	1a80      	subs	r0, r0, r2
 800320c:	4199      	sbcs	r1, r3
 800320e:	4a53      	ldr	r2, [pc, #332]	@ (800335c <compensate_pressure+0x360>)
 8003210:	2300      	movs	r3, #0
 8003212:	f7fd f98d 	bl	8000530 <__aeabi_lmul>
 8003216:	0002      	movs	r2, r0
 8003218:	000b      	movs	r3, r1
 800321a:	0010      	movs	r0, r2
 800321c:	0019      	movs	r1, r3
 800321e:	23b0      	movs	r3, #176	@ 0xb0
 8003220:	18fa      	adds	r2, r7, r3
 8003222:	6853      	ldr	r3, [r2, #4]
 8003224:	6812      	ldr	r2, [r2, #0]
 8003226:	f7fd f93f 	bl	80004a8 <__aeabi_ldivmod>
 800322a:	0002      	movs	r2, r0
 800322c:	000b      	movs	r3, r1
 800322e:	1939      	adds	r1, r7, r4
 8003230:	600a      	str	r2, [r1, #0]
 8003232:	604b      	str	r3, [r1, #4]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8003234:	269c      	movs	r6, #156	@ 0x9c
 8003236:	19ba      	adds	r2, r7, r6
 8003238:	6813      	ldr	r3, [r2, #0]
 800323a:	2216      	movs	r2, #22
 800323c:	5e9b      	ldrsh	r3, [r3, r2]
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	17db      	asrs	r3, r3, #31
 8003242:	617b      	str	r3, [r7, #20]
 8003244:	197a      	adds	r2, r7, r5
 8003246:	6813      	ldr	r3, [r2, #0]
 8003248:	04da      	lsls	r2, r3, #19
 800324a:	1939      	adds	r1, r7, r4
 800324c:	680b      	ldr	r3, [r1, #0]
 800324e:	0b5b      	lsrs	r3, r3, #13
 8003250:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003252:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003254:	4313      	orrs	r3, r2
 8003256:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003258:	197a      	adds	r2, r7, r5
 800325a:	6813      	ldr	r3, [r2, #0]
 800325c:	135b      	asrs	r3, r3, #13
 800325e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003260:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003262:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003264:	6938      	ldr	r0, [r7, #16]
 8003266:	6979      	ldr	r1, [r7, #20]
 8003268:	f7fd f962 	bl	8000530 <__aeabi_lmul>
 800326c:	0002      	movs	r2, r0
 800326e:	000b      	movs	r3, r1
 8003270:	0010      	movs	r0, r2
 8003272:	0019      	movs	r1, r3
 8003274:	197a      	adds	r2, r7, r5
 8003276:	6813      	ldr	r3, [r2, #0]
 8003278:	04da      	lsls	r2, r3, #19
 800327a:	193b      	adds	r3, r7, r4
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	0b5b      	lsrs	r3, r3, #13
 8003280:	673b      	str	r3, [r7, #112]	@ 0x70
 8003282:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003284:	4313      	orrs	r3, r2
 8003286:	673b      	str	r3, [r7, #112]	@ 0x70
 8003288:	197a      	adds	r2, r7, r5
 800328a:	6813      	ldr	r3, [r2, #0]
 800328c:	135b      	asrs	r3, r3, #13
 800328e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003290:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003292:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003294:	f7fd f94c 	bl	8000530 <__aeabi_lmul>
 8003298:	0002      	movs	r2, r0
 800329a:	000b      	movs	r3, r1
 800329c:	01d9      	lsls	r1, r3, #7
 800329e:	0e50      	lsrs	r0, r2, #25
 80032a0:	4301      	orrs	r1, r0
 80032a2:	25b0      	movs	r5, #176	@ 0xb0
 80032a4:	1978      	adds	r0, r7, r5
 80032a6:	6001      	str	r1, [r0, #0]
 80032a8:	165b      	asrs	r3, r3, #25
 80032aa:	22b4      	movs	r2, #180	@ 0xb4
 80032ac:	18ba      	adds	r2, r7, r2
 80032ae:	6013      	str	r3, [r2, #0]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80032b0:	19ba      	adds	r2, r7, r6
 80032b2:	6813      	ldr	r3, [r2, #0]
 80032b4:	2214      	movs	r2, #20
 80032b6:	5e9b      	ldrsh	r3, [r3, r2]
 80032b8:	60bb      	str	r3, [r7, #8]
 80032ba:	17db      	asrs	r3, r3, #31
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	193a      	adds	r2, r7, r4
 80032c0:	6853      	ldr	r3, [r2, #4]
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	68b8      	ldr	r0, [r7, #8]
 80032c6:	68f9      	ldr	r1, [r7, #12]
 80032c8:	f7fd f932 	bl	8000530 <__aeabi_lmul>
 80032cc:	0002      	movs	r2, r0
 80032ce:	000b      	movs	r3, r1
 80032d0:	0359      	lsls	r1, r3, #13
 80032d2:	0cd0      	lsrs	r0, r2, #19
 80032d4:	4301      	orrs	r1, r0
 80032d6:	20a8      	movs	r0, #168	@ 0xa8
 80032d8:	1838      	adds	r0, r7, r0
 80032da:	6001      	str	r1, [r0, #0]
 80032dc:	14db      	asrs	r3, r3, #19
 80032de:	22ac      	movs	r2, #172	@ 0xac
 80032e0:	18ba      	adds	r2, r7, r2
 80032e2:	6013      	str	r3, [r2, #0]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 80032e4:	193a      	adds	r2, r7, r4
 80032e6:	6810      	ldr	r0, [r2, #0]
 80032e8:	6851      	ldr	r1, [r2, #4]
 80032ea:	197a      	adds	r2, r7, r5
 80032ec:	6853      	ldr	r3, [r2, #4]
 80032ee:	6812      	ldr	r2, [r2, #0]
 80032f0:	1880      	adds	r0, r0, r2
 80032f2:	4159      	adcs	r1, r3
 80032f4:	23a8      	movs	r3, #168	@ 0xa8
 80032f6:	18fb      	adds	r3, r7, r3
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	1812      	adds	r2, r2, r0
 80032fe:	414b      	adcs	r3, r1
 8003300:	0619      	lsls	r1, r3, #24
 8003302:	0a10      	lsrs	r0, r2, #8
 8003304:	66b8      	str	r0, [r7, #104]	@ 0x68
 8003306:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8003308:	4308      	orrs	r0, r1
 800330a:	66b8      	str	r0, [r7, #104]	@ 0x68
 800330c:	121b      	asrs	r3, r3, #8
 800330e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003310:	19bb      	adds	r3, r7, r6
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2212      	movs	r2, #18
 8003316:	5e9b      	ldrsh	r3, [r3, r2]
 8003318:	603b      	str	r3, [r7, #0]
 800331a:	17db      	asrs	r3, r3, #31
 800331c:	607b      	str	r3, [r7, #4]
 800331e:	6839      	ldr	r1, [r7, #0]
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	000b      	movs	r3, r1
 8003324:	0f1b      	lsrs	r3, r3, #28
 8003326:	0010      	movs	r0, r2
 8003328:	0100      	lsls	r0, r0, #4
 800332a:	6678      	str	r0, [r7, #100]	@ 0x64
 800332c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800332e:	4318      	orrs	r0, r3
 8003330:	6678      	str	r0, [r7, #100]	@ 0x64
 8003332:	000b      	movs	r3, r1
 8003334:	011b      	lsls	r3, r3, #4
 8003336:	663b      	str	r3, [r7, #96]	@ 0x60
 8003338:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800333a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800333c:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800333e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003340:	1812      	adds	r2, r2, r0
 8003342:	414b      	adcs	r3, r1
 8003344:	1939      	adds	r1, r7, r4
 8003346:	600a      	str	r2, [r1, #0]
 8003348:	604b      	str	r3, [r1, #4]
	return p;
 800334a:	193b      	adds	r3, r7, r4
 800334c:	681b      	ldr	r3, [r3, #0]
}
 800334e:	0018      	movs	r0, r3
 8003350:	46bd      	mov	sp, r7
 8003352:	b02f      	add	sp, #188	@ 0xbc
 8003354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003356:	46c0      	nop			@ (mov r8, r8)
 8003358:	fffe0c00 	.word	0xfffe0c00
 800335c:	00000c35 	.word	0x00000c35

08003360 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a2c      	ldr	r2, [pc, #176]	@ (8003420 <compensate_humidity+0xc0>)
 8003370:	4694      	mov	ip, r2
 8003372:	4463      	add	r3, ip
 8003374:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	039a      	lsls	r2, r3, #14
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	211e      	movs	r1, #30
 800337e:	5e5b      	ldrsh	r3, [r3, r1]
 8003380:	051b      	lsls	r3, r3, #20
 8003382:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2120      	movs	r1, #32
 8003388:	5e5b      	ldrsh	r3, [r3, r1]
 800338a:	0019      	movs	r1, r3
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	434b      	muls	r3, r1
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2280      	movs	r2, #128	@ 0x80
 8003394:	01d2      	lsls	r2, r2, #7
 8003396:	4694      	mov	ip, r2
 8003398:	4463      	add	r3, ip
 800339a:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	2122      	movs	r1, #34	@ 0x22
 80033a0:	5652      	ldrsb	r2, [r2, r1]
 80033a2:	0011      	movs	r1, r2
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	434a      	muls	r2, r1
 80033a8:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80033aa:	68f9      	ldr	r1, [r7, #12]
 80033ac:	7f09      	ldrb	r1, [r1, #28]
 80033ae:	0008      	movs	r0, r1
 80033b0:	6979      	ldr	r1, [r7, #20]
 80033b2:	4341      	muls	r1, r0
 80033b4:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80033b6:	2080      	movs	r0, #128	@ 0x80
 80033b8:	0200      	lsls	r0, r0, #8
 80033ba:	4684      	mov	ip, r0
 80033bc:	4461      	add	r1, ip
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80033be:	434a      	muls	r2, r1
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80033c0:	1292      	asrs	r2, r2, #10
 80033c2:	2180      	movs	r1, #128	@ 0x80
 80033c4:	0389      	lsls	r1, r1, #14
 80033c6:	468c      	mov	ip, r1
 80033c8:	4462      	add	r2, ip
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 80033ca:	68f9      	ldr	r1, [r7, #12]
 80033cc:	201a      	movs	r0, #26
 80033ce:	5e09      	ldrsh	r1, [r1, r0]
 80033d0:	434a      	muls	r2, r1
 80033d2:	2180      	movs	r1, #128	@ 0x80
 80033d4:	0189      	lsls	r1, r1, #6
 80033d6:	468c      	mov	ip, r1
 80033d8:	4462      	add	r2, ip
 80033da:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80033dc:	4353      	muls	r3, r2
 80033de:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	13db      	asrs	r3, r3, #15
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	13d2      	asrs	r2, r2, #15
 80033e8:	4353      	muls	r3, r2
 80033ea:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	7e12      	ldrb	r2, [r2, #24]
 80033f0:	4353      	muls	r3, r2
 80033f2:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	da00      	bge.n	8003402 <compensate_humidity+0xa2>
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	22c8      	movs	r2, #200	@ 0xc8
 8003408:	0552      	lsls	r2, r2, #21
 800340a:	4293      	cmp	r3, r2
 800340c:	dd01      	ble.n	8003412 <compensate_humidity+0xb2>
 800340e:	23c8      	movs	r3, #200	@ 0xc8
 8003410:	055b      	lsls	r3, r3, #21
 8003412:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	131b      	asrs	r3, r3, #12
}
 8003418:	0018      	movs	r0, r3
 800341a:	46bd      	mov	sp, r7
 800341c:	b006      	add	sp, #24
 800341e:	bd80      	pop	{r7, pc}
 8003420:	fffed400 	.word	0xfffed400

08003424 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8003424:	b590      	push	{r4, r7, lr}
 8003426:	b08d      	sub	sp, #52	@ 0x34
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
 8003430:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2232      	movs	r2, #50	@ 0x32
 8003436:	5c9b      	ldrb	r3, [r3, r2]
 8003438:	2b60      	cmp	r3, #96	@ 0x60
 800343a:	d007      	beq.n	800344c <bmp280_read_fixed+0x28>
		if (humidity)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d002      	beq.n	8003448 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8003448:	2300      	movs	r3, #0
 800344a:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <bmp280_read_fixed+0x32>
 8003452:	2308      	movs	r3, #8
 8003454:	e000      	b.n	8003458 <bmp280_read_fixed+0x34>
 8003456:	2306      	movs	r3, #6
 8003458:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 800345a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2218      	movs	r2, #24
 8003460:	18ba      	adds	r2, r7, r2
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	21f7      	movs	r1, #247	@ 0xf7
 8003466:	f7ff fb9b 	bl	8002ba0 <read_data>
 800346a:	1e03      	subs	r3, r0, #0
 800346c:	d001      	beq.n	8003472 <bmp280_read_fixed+0x4e>
		return false;
 800346e:	2300      	movs	r3, #0
 8003470:	e041      	b.n	80034f6 <bmp280_read_fixed+0xd2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8003472:	2418      	movs	r4, #24
 8003474:	193b      	adds	r3, r7, r4
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	031a      	lsls	r2, r3, #12
 800347a:	193b      	adds	r3, r7, r4
 800347c:	785b      	ldrb	r3, [r3, #1]
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	4313      	orrs	r3, r2
 8003482:	193a      	adds	r2, r7, r4
 8003484:	7892      	ldrb	r2, [r2, #2]
 8003486:	0912      	lsrs	r2, r2, #4
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	4313      	orrs	r3, r2
 800348c:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 800348e:	193b      	adds	r3, r7, r4
 8003490:	78db      	ldrb	r3, [r3, #3]
 8003492:	031a      	lsls	r2, r3, #12
 8003494:	193b      	adds	r3, r7, r4
 8003496:	791b      	ldrb	r3, [r3, #4]
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	4313      	orrs	r3, r2
 800349c:	193a      	adds	r2, r7, r4
 800349e:	7952      	ldrb	r2, [r2, #5]
 80034a0:	0912      	lsrs	r2, r2, #4
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	4313      	orrs	r3, r2
 80034a6:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 80034a8:	2314      	movs	r3, #20
 80034aa:	18fa      	adds	r2, r7, r3
 80034ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	0018      	movs	r0, r3
 80034b2:	f7ff fd6e 	bl	8002f92 <compensate_temperature>
 80034b6:	0002      	movs	r2, r0
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	0018      	movs	r0, r3
 80034c4:	f7ff fd9a 	bl	8002ffc <compensate_pressure>
 80034c8:	0002      	movs	r2, r0
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	601a      	str	r2, [r3, #0]

	if (humidity) {
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00f      	beq.n	80034f4 <bmp280_read_fixed+0xd0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 80034d4:	193b      	adds	r3, r7, r4
 80034d6:	799b      	ldrb	r3, [r3, #6]
 80034d8:	021b      	lsls	r3, r3, #8
 80034da:	193a      	adds	r2, r7, r4
 80034dc:	79d2      	ldrb	r2, [r2, #7]
 80034de:	4313      	orrs	r3, r2
 80034e0:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	6a39      	ldr	r1, [r7, #32]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	0018      	movs	r0, r3
 80034ea:	f7ff ff39 	bl	8003360 <compensate_humidity>
 80034ee:	0002      	movs	r2, r0
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	601a      	str	r2, [r3, #0]
	}

	return true;
 80034f4:	2301      	movs	r3, #1
}
 80034f6:	0018      	movs	r0, r3
 80034f8:	46bd      	mov	sp, r7
 80034fa:	b00d      	add	sp, #52	@ 0x34
 80034fc:	bd90      	pop	{r4, r7, pc}
	...

08003500 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8003500:	b580      	push	{r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
 800350c:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d002      	beq.n	800351a <bmp280_read_float+0x1a>
 8003514:	2314      	movs	r3, #20
 8003516:	18fb      	adds	r3, r7, r3
 8003518:	e000      	b.n	800351c <bmp280_read_float+0x1c>
 800351a:	2300      	movs	r3, #0
 800351c:	2218      	movs	r2, #24
 800351e:	18ba      	adds	r2, r7, r2
 8003520:	211c      	movs	r1, #28
 8003522:	1879      	adds	r1, r7, r1
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f7ff ff7d 	bl	8003424 <bmp280_read_fixed>
 800352a:	1e03      	subs	r3, r0, #0
 800352c:	d02d      	beq.n	800358a <bmp280_read_float+0x8a>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	0018      	movs	r0, r3
 8003532:	f7fd fa35 	bl	80009a0 <__aeabi_i2f>
 8003536:	1c03      	adds	r3, r0, #0
 8003538:	4916      	ldr	r1, [pc, #88]	@ (8003594 <bmp280_read_float+0x94>)
 800353a:	1c18      	adds	r0, r3, #0
 800353c:	f7fd f910 	bl	8000760 <__aeabi_fdiv>
 8003540:	1c03      	adds	r3, r0, #0
 8003542:	1c1a      	adds	r2, r3, #0
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	601a      	str	r2, [r3, #0]
		*pressure = (float) fixed_pressure / 256;
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	0018      	movs	r0, r3
 800354c:	f7fd fa74 	bl	8000a38 <__aeabi_ui2f>
 8003550:	1c03      	adds	r3, r0, #0
 8003552:	2187      	movs	r1, #135	@ 0x87
 8003554:	05c9      	lsls	r1, r1, #23
 8003556:	1c18      	adds	r0, r3, #0
 8003558:	f7fd f902 	bl	8000760 <__aeabi_fdiv>
 800355c:	1c03      	adds	r3, r0, #0
 800355e:	1c1a      	adds	r2, r3, #0
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	601a      	str	r2, [r3, #0]
		if (humidity)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00d      	beq.n	8003586 <bmp280_read_float+0x86>
			*humidity = (float) fixed_humidity / 1024;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	0018      	movs	r0, r3
 800356e:	f7fd fa63 	bl	8000a38 <__aeabi_ui2f>
 8003572:	1c03      	adds	r3, r0, #0
 8003574:	2189      	movs	r1, #137	@ 0x89
 8003576:	05c9      	lsls	r1, r1, #23
 8003578:	1c18      	adds	r0, r3, #0
 800357a:	f7fd f8f1 	bl	8000760 <__aeabi_fdiv>
 800357e:	1c03      	adds	r3, r0, #0
 8003580:	1c1a      	adds	r2, r3, #0
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	601a      	str	r2, [r3, #0]
		return true;
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <bmp280_read_float+0x8c>
	}

	return false;
 800358a:	2300      	movs	r3, #0
}
 800358c:	0018      	movs	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	b008      	add	sp, #32
 8003592:	bd80      	pop	{r7, pc}
 8003594:	42c80000 	.word	0x42c80000

08003598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003598:	b5b0      	push	{r4, r5, r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800359e:	f000 fbe3 	bl	8003d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035a2:	f000 f8f5 	bl	8003790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035a6:	f000 f9d1 	bl	800394c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80035aa:	f000 f99f 	bl	80038ec <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80035ae:	f000 f95d 	bl	800386c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  bmp280_init_default_params(&bmp280.params);
 80035b2:	4b66      	ldr	r3, [pc, #408]	@ (800374c <main+0x1b4>)
 80035b4:	0018      	movs	r0, r3
 80035b6:	f7ff faa1 	bl	8002afc <bmp280_init_default_params>
  	bmp280.addr = BMP280_I2C_ADDRESS_0;
 80035ba:	4b65      	ldr	r3, [pc, #404]	@ (8003750 <main+0x1b8>)
 80035bc:	2276      	movs	r2, #118	@ 0x76
 80035be:	849a      	strh	r2, [r3, #36]	@ 0x24
  	bmp280.i2c = &hi2c1;
 80035c0:	4b63      	ldr	r3, [pc, #396]	@ (8003750 <main+0x1b8>)
 80035c2:	4a64      	ldr	r2, [pc, #400]	@ (8003754 <main+0x1bc>)
 80035c4:	629a      	str	r2, [r3, #40]	@ 0x28

  	while (!bmp280_init(&bmp280, &bmp280.params)) {
 80035c6:	e016      	b.n	80035f6 <main+0x5e>
  		size = sprintf((char *)Data, "BMP280 initialization failed\r\n");
 80035c8:	4a63      	ldr	r2, [pc, #396]	@ (8003758 <main+0x1c0>)
 80035ca:	4b64      	ldr	r3, [pc, #400]	@ (800375c <main+0x1c4>)
 80035cc:	0011      	movs	r1, r2
 80035ce:	0018      	movs	r0, r3
 80035d0:	f003 fee4 	bl	800739c <siprintf>
 80035d4:	0003      	movs	r3, r0
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	4b61      	ldr	r3, [pc, #388]	@ (8003760 <main+0x1c8>)
 80035da:	801a      	strh	r2, [r3, #0]
  		HAL_UART_Transmit(&huart2, Data, size, 1000);
 80035dc:	4b60      	ldr	r3, [pc, #384]	@ (8003760 <main+0x1c8>)
 80035de:	881a      	ldrh	r2, [r3, #0]
 80035e0:	23fa      	movs	r3, #250	@ 0xfa
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	495d      	ldr	r1, [pc, #372]	@ (800375c <main+0x1c4>)
 80035e6:	485f      	ldr	r0, [pc, #380]	@ (8003764 <main+0x1cc>)
 80035e8:	f002 fd0e 	bl	8006008 <HAL_UART_Transmit>
  		HAL_Delay(2000);
 80035ec:	23fa      	movs	r3, #250	@ 0xfa
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	0018      	movs	r0, r3
 80035f2:	f000 fc29 	bl	8003e48 <HAL_Delay>
  	while (!bmp280_init(&bmp280, &bmp280.params)) {
 80035f6:	4a55      	ldr	r2, [pc, #340]	@ (800374c <main+0x1b4>)
 80035f8:	4b55      	ldr	r3, [pc, #340]	@ (8003750 <main+0x1b8>)
 80035fa:	0011      	movs	r1, r2
 80035fc:	0018      	movs	r0, r3
 80035fe:	f7ff fc11 	bl	8002e24 <bmp280_init>
 8003602:	0003      	movs	r3, r0
 8003604:	001a      	movs	r2, r3
 8003606:	2301      	movs	r3, #1
 8003608:	4053      	eors	r3, r2
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1db      	bne.n	80035c8 <main+0x30>
  	}
  	bool bme280p = bmp280.id == BME280_CHIP_ID;
 8003610:	4b4f      	ldr	r3, [pc, #316]	@ (8003750 <main+0x1b8>)
 8003612:	2232      	movs	r2, #50	@ 0x32
 8003614:	5c9a      	ldrb	r2, [r3, r2]
 8003616:	1dfb      	adds	r3, r7, #7
 8003618:	3a60      	subs	r2, #96	@ 0x60
 800361a:	4251      	negs	r1, r2
 800361c:	414a      	adcs	r2, r1
 800361e:	701a      	strb	r2, [r3, #0]
  	size = sprintf((char *)Data, "BMP280: found %s\r\n", bme280p ? "BME280" : "BMP280");
 8003620:	1dfb      	adds	r3, r7, #7
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <main+0x94>
 8003628:	4b4f      	ldr	r3, [pc, #316]	@ (8003768 <main+0x1d0>)
 800362a:	e000      	b.n	800362e <main+0x96>
 800362c:	4b4f      	ldr	r3, [pc, #316]	@ (800376c <main+0x1d4>)
 800362e:	4950      	ldr	r1, [pc, #320]	@ (8003770 <main+0x1d8>)
 8003630:	484a      	ldr	r0, [pc, #296]	@ (800375c <main+0x1c4>)
 8003632:	001a      	movs	r2, r3
 8003634:	f003 feb2 	bl	800739c <siprintf>
 8003638:	0003      	movs	r3, r0
 800363a:	b29a      	uxth	r2, r3
 800363c:	4b48      	ldr	r3, [pc, #288]	@ (8003760 <main+0x1c8>)
 800363e:	801a      	strh	r2, [r3, #0]
  	HAL_UART_Transmit(&huart2, Data, size, 1000);
 8003640:	4b47      	ldr	r3, [pc, #284]	@ (8003760 <main+0x1c8>)
 8003642:	881a      	ldrh	r2, [r3, #0]
 8003644:	23fa      	movs	r3, #250	@ 0xfa
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4944      	ldr	r1, [pc, #272]	@ (800375c <main+0x1c4>)
 800364a:	4846      	ldr	r0, [pc, #280]	@ (8003764 <main+0x1cc>)
 800364c:	f002 fcdc 	bl	8006008 <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

      HAL_Delay(100);
 8003650:	2064      	movs	r0, #100	@ 0x64
 8003652:	f000 fbf9 	bl	8003e48 <HAL_Delay>
      while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8003656:	e016      	b.n	8003686 <main+0xee>
        size = sprintf((char *)Data,
 8003658:	4a46      	ldr	r2, [pc, #280]	@ (8003774 <main+0x1dc>)
 800365a:	4b40      	ldr	r3, [pc, #256]	@ (800375c <main+0x1c4>)
 800365c:	0011      	movs	r1, r2
 800365e:	0018      	movs	r0, r3
 8003660:	f003 fe9c 	bl	800739c <siprintf>
 8003664:	0003      	movs	r3, r0
 8003666:	b29a      	uxth	r2, r3
 8003668:	4b3d      	ldr	r3, [pc, #244]	@ (8003760 <main+0x1c8>)
 800366a:	801a      	strh	r2, [r3, #0]
            "Temperature/pressure reading failed\r\n");
        HAL_UART_Transmit(&huart2, Data, size, 1000);
 800366c:	4b3c      	ldr	r3, [pc, #240]	@ (8003760 <main+0x1c8>)
 800366e:	881a      	ldrh	r2, [r3, #0]
 8003670:	23fa      	movs	r3, #250	@ 0xfa
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4939      	ldr	r1, [pc, #228]	@ (800375c <main+0x1c4>)
 8003676:	483b      	ldr	r0, [pc, #236]	@ (8003764 <main+0x1cc>)
 8003678:	f002 fcc6 	bl	8006008 <HAL_UART_Transmit>
        HAL_Delay(2000);
 800367c:	23fa      	movs	r3, #250	@ 0xfa
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	0018      	movs	r0, r3
 8003682:	f000 fbe1 	bl	8003e48 <HAL_Delay>
      while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8003686:	4b3c      	ldr	r3, [pc, #240]	@ (8003778 <main+0x1e0>)
 8003688:	4a3c      	ldr	r2, [pc, #240]	@ (800377c <main+0x1e4>)
 800368a:	493d      	ldr	r1, [pc, #244]	@ (8003780 <main+0x1e8>)
 800368c:	4830      	ldr	r0, [pc, #192]	@ (8003750 <main+0x1b8>)
 800368e:	f7ff ff37 	bl	8003500 <bmp280_read_float>
 8003692:	0003      	movs	r3, r0
 8003694:	001a      	movs	r2, r3
 8003696:	2301      	movs	r3, #1
 8003698:	4053      	eors	r3, r2
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1db      	bne.n	8003658 <main+0xc0>
      }

      size = sprintf((char *)Data,"Pressure: %0.2f Pa, Temperature: %0.2f C",pressure, temperature);
 80036a0:	4b36      	ldr	r3, [pc, #216]	@ (800377c <main+0x1e4>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	1c18      	adds	r0, r3, #0
 80036a6:	f7ff f8c5 	bl	8002834 <__aeabi_f2d>
 80036aa:	0004      	movs	r4, r0
 80036ac:	000d      	movs	r5, r1
 80036ae:	4b34      	ldr	r3, [pc, #208]	@ (8003780 <main+0x1e8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	1c18      	adds	r0, r3, #0
 80036b4:	f7ff f8be 	bl	8002834 <__aeabi_f2d>
 80036b8:	0002      	movs	r2, r0
 80036ba:	000b      	movs	r3, r1
 80036bc:	4931      	ldr	r1, [pc, #196]	@ (8003784 <main+0x1ec>)
 80036be:	4827      	ldr	r0, [pc, #156]	@ (800375c <main+0x1c4>)
 80036c0:	9200      	str	r2, [sp, #0]
 80036c2:	9301      	str	r3, [sp, #4]
 80036c4:	0022      	movs	r2, r4
 80036c6:	002b      	movs	r3, r5
 80036c8:	f003 fe68 	bl	800739c <siprintf>
 80036cc:	0003      	movs	r3, r0
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	4b23      	ldr	r3, [pc, #140]	@ (8003760 <main+0x1c8>)
 80036d2:	801a      	strh	r2, [r3, #0]
      HAL_UART_Transmit(&huart2, Data, size, 1000);
 80036d4:	4b22      	ldr	r3, [pc, #136]	@ (8003760 <main+0x1c8>)
 80036d6:	881a      	ldrh	r2, [r3, #0]
 80036d8:	23fa      	movs	r3, #250	@ 0xfa
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	491f      	ldr	r1, [pc, #124]	@ (800375c <main+0x1c4>)
 80036de:	4821      	ldr	r0, [pc, #132]	@ (8003764 <main+0x1cc>)
 80036e0:	f002 fc92 	bl	8006008 <HAL_UART_Transmit>
      if (bme280p) {
 80036e4:	1dfb      	adds	r3, r7, #7
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d017      	beq.n	800371c <main+0x184>
        // bme280 has humidity
        size = sprintf((char *)Data,", Humidity: %.2f\r\n", humidity);
 80036ec:	4b22      	ldr	r3, [pc, #136]	@ (8003778 <main+0x1e0>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	1c18      	adds	r0, r3, #0
 80036f2:	f7ff f89f 	bl	8002834 <__aeabi_f2d>
 80036f6:	0002      	movs	r2, r0
 80036f8:	000b      	movs	r3, r1
 80036fa:	4923      	ldr	r1, [pc, #140]	@ (8003788 <main+0x1f0>)
 80036fc:	4817      	ldr	r0, [pc, #92]	@ (800375c <main+0x1c4>)
 80036fe:	f003 fe4d 	bl	800739c <siprintf>
 8003702:	0003      	movs	r3, r0
 8003704:	b29a      	uxth	r2, r3
 8003706:	4b16      	ldr	r3, [pc, #88]	@ (8003760 <main+0x1c8>)
 8003708:	801a      	strh	r2, [r3, #0]
        HAL_UART_Transmit(&huart2, Data, size, 1000);
 800370a:	4b15      	ldr	r3, [pc, #84]	@ (8003760 <main+0x1c8>)
 800370c:	881a      	ldrh	r2, [r3, #0]
 800370e:	23fa      	movs	r3, #250	@ 0xfa
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4912      	ldr	r1, [pc, #72]	@ (800375c <main+0x1c4>)
 8003714:	4813      	ldr	r0, [pc, #76]	@ (8003764 <main+0x1cc>)
 8003716:	f002 fc77 	bl	8006008 <HAL_UART_Transmit>
 800371a:	e011      	b.n	8003740 <main+0x1a8>
      }

      else {
        size = sprintf((char *)Data, "\r\n");
 800371c:	4a1b      	ldr	r2, [pc, #108]	@ (800378c <main+0x1f4>)
 800371e:	4b0f      	ldr	r3, [pc, #60]	@ (800375c <main+0x1c4>)
 8003720:	0011      	movs	r1, r2
 8003722:	0018      	movs	r0, r3
 8003724:	f003 fe3a 	bl	800739c <siprintf>
 8003728:	0003      	movs	r3, r0
 800372a:	b29a      	uxth	r2, r3
 800372c:	4b0c      	ldr	r3, [pc, #48]	@ (8003760 <main+0x1c8>)
 800372e:	801a      	strh	r2, [r3, #0]
        HAL_UART_Transmit(&huart2, Data, size, 1000);
 8003730:	4b0b      	ldr	r3, [pc, #44]	@ (8003760 <main+0x1c8>)
 8003732:	881a      	ldrh	r2, [r3, #0]
 8003734:	23fa      	movs	r3, #250	@ 0xfa
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4908      	ldr	r1, [pc, #32]	@ (800375c <main+0x1c4>)
 800373a:	480a      	ldr	r0, [pc, #40]	@ (8003764 <main+0x1cc>)
 800373c:	f002 fc64 	bl	8006008 <HAL_UART_Transmit>
      }
      HAL_Delay(2000);
 8003740:	23fa      	movs	r3, #250	@ 0xfa
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	0018      	movs	r0, r3
 8003746:	f000 fb7f 	bl	8003e48 <HAL_Delay>
      HAL_Delay(100);
 800374a:	e781      	b.n	8003650 <main+0xb8>
 800374c:	200002f8 	.word	0x200002f8
 8003750:	200002cc 	.word	0x200002cc
 8003754:	200001f0 	.word	0x200001f0
 8003758:	08009900 	.word	0x08009900
 800375c:	20000310 	.word	0x20000310
 8003760:	2000030c 	.word	0x2000030c
 8003764:	20000244 	.word	0x20000244
 8003768:	08009920 	.word	0x08009920
 800376c:	08009928 	.word	0x08009928
 8003770:	08009930 	.word	0x08009930
 8003774:	08009944 	.word	0x08009944
 8003778:	20000308 	.word	0x20000308
 800377c:	20000300 	.word	0x20000300
 8003780:	20000304 	.word	0x20000304
 8003784:	0800996c 	.word	0x0800996c
 8003788:	08009998 	.word	0x08009998
 800378c:	080099ac 	.word	0x080099ac

08003790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003790:	b590      	push	{r4, r7, lr}
 8003792:	b09f      	sub	sp, #124	@ 0x7c
 8003794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003796:	2440      	movs	r4, #64	@ 0x40
 8003798:	193b      	adds	r3, r7, r4
 800379a:	0018      	movs	r0, r3
 800379c:	2338      	movs	r3, #56	@ 0x38
 800379e:	001a      	movs	r2, r3
 80037a0:	2100      	movs	r1, #0
 80037a2:	f003 fedf 	bl	8007564 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037a6:	232c      	movs	r3, #44	@ 0x2c
 80037a8:	18fb      	adds	r3, r7, r3
 80037aa:	0018      	movs	r0, r3
 80037ac:	2314      	movs	r3, #20
 80037ae:	001a      	movs	r2, r3
 80037b0:	2100      	movs	r1, #0
 80037b2:	f003 fed7 	bl	8007564 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037b6:	1d3b      	adds	r3, r7, #4
 80037b8:	0018      	movs	r0, r3
 80037ba:	2328      	movs	r3, #40	@ 0x28
 80037bc:	001a      	movs	r2, r3
 80037be:	2100      	movs	r1, #0
 80037c0:	f003 fed0 	bl	8007564 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80037c4:	4b27      	ldr	r3, [pc, #156]	@ (8003864 <SystemClock_Config+0xd4>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a27      	ldr	r2, [pc, #156]	@ (8003868 <SystemClock_Config+0xd8>)
 80037ca:	401a      	ands	r2, r3
 80037cc:	4b25      	ldr	r3, [pc, #148]	@ (8003864 <SystemClock_Config+0xd4>)
 80037ce:	2180      	movs	r1, #128	@ 0x80
 80037d0:	0109      	lsls	r1, r1, #4
 80037d2:	430a      	orrs	r2, r1
 80037d4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80037d6:	0021      	movs	r1, r4
 80037d8:	187b      	adds	r3, r7, r1
 80037da:	2210      	movs	r2, #16
 80037dc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80037de:	187b      	adds	r3, r7, r1
 80037e0:	2201      	movs	r2, #1
 80037e2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80037e4:	187b      	adds	r3, r7, r1
 80037e6:	2200      	movs	r2, #0
 80037e8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80037ea:	187b      	adds	r3, r7, r1
 80037ec:	22a0      	movs	r2, #160	@ 0xa0
 80037ee:	0212      	lsls	r2, r2, #8
 80037f0:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80037f2:	187b      	adds	r3, r7, r1
 80037f4:	2200      	movs	r2, #0
 80037f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037f8:	187b      	adds	r3, r7, r1
 80037fa:	0018      	movs	r0, r3
 80037fc:	f001 fc1a 	bl	8005034 <HAL_RCC_OscConfig>
 8003800:	1e03      	subs	r3, r0, #0
 8003802:	d001      	beq.n	8003808 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8003804:	f000 f906 	bl	8003a14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003808:	212c      	movs	r1, #44	@ 0x2c
 800380a:	187b      	adds	r3, r7, r1
 800380c:	220f      	movs	r2, #15
 800380e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8003810:	187b      	adds	r3, r7, r1
 8003812:	2200      	movs	r2, #0
 8003814:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003816:	187b      	adds	r3, r7, r1
 8003818:	2200      	movs	r2, #0
 800381a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800381c:	187b      	adds	r3, r7, r1
 800381e:	2200      	movs	r2, #0
 8003820:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003822:	187b      	adds	r3, r7, r1
 8003824:	2200      	movs	r2, #0
 8003826:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003828:	187b      	adds	r3, r7, r1
 800382a:	2100      	movs	r1, #0
 800382c:	0018      	movs	r0, r3
 800382e:	f001 ffd5 	bl	80057dc <HAL_RCC_ClockConfig>
 8003832:	1e03      	subs	r3, r0, #0
 8003834:	d001      	beq.n	800383a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8003836:	f000 f8ed 	bl	8003a14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800383a:	1d3b      	adds	r3, r7, #4
 800383c:	220a      	movs	r2, #10
 800383e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003840:	1d3b      	adds	r3, r7, #4
 8003842:	2200      	movs	r2, #0
 8003844:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003846:	1d3b      	adds	r3, r7, #4
 8003848:	2200      	movs	r2, #0
 800384a:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800384c:	1d3b      	adds	r3, r7, #4
 800384e:	0018      	movs	r0, r3
 8003850:	f002 f9e8 	bl	8005c24 <HAL_RCCEx_PeriphCLKConfig>
 8003854:	1e03      	subs	r3, r0, #0
 8003856:	d001      	beq.n	800385c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8003858:	f000 f8dc 	bl	8003a14 <Error_Handler>
  }
}
 800385c:	46c0      	nop			@ (mov r8, r8)
 800385e:	46bd      	mov	sp, r7
 8003860:	b01f      	add	sp, #124	@ 0x7c
 8003862:	bd90      	pop	{r4, r7, pc}
 8003864:	40007000 	.word	0x40007000
 8003868:	ffffe7ff 	.word	0xffffe7ff

0800386c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003870:	4b1c      	ldr	r3, [pc, #112]	@ (80038e4 <MX_I2C1_Init+0x78>)
 8003872:	4a1d      	ldr	r2, [pc, #116]	@ (80038e8 <MX_I2C1_Init+0x7c>)
 8003874:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 8003876:	4b1b      	ldr	r3, [pc, #108]	@ (80038e4 <MX_I2C1_Init+0x78>)
 8003878:	22c1      	movs	r2, #193	@ 0xc1
 800387a:	00d2      	lsls	r2, r2, #3
 800387c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800387e:	4b19      	ldr	r3, [pc, #100]	@ (80038e4 <MX_I2C1_Init+0x78>)
 8003880:	2200      	movs	r2, #0
 8003882:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003884:	4b17      	ldr	r3, [pc, #92]	@ (80038e4 <MX_I2C1_Init+0x78>)
 8003886:	2201      	movs	r2, #1
 8003888:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800388a:	4b16      	ldr	r3, [pc, #88]	@ (80038e4 <MX_I2C1_Init+0x78>)
 800388c:	2200      	movs	r2, #0
 800388e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003890:	4b14      	ldr	r3, [pc, #80]	@ (80038e4 <MX_I2C1_Init+0x78>)
 8003892:	2200      	movs	r2, #0
 8003894:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003896:	4b13      	ldr	r3, [pc, #76]	@ (80038e4 <MX_I2C1_Init+0x78>)
 8003898:	2200      	movs	r2, #0
 800389a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800389c:	4b11      	ldr	r3, [pc, #68]	@ (80038e4 <MX_I2C1_Init+0x78>)
 800389e:	2200      	movs	r2, #0
 80038a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80038a2:	4b10      	ldr	r3, [pc, #64]	@ (80038e4 <MX_I2C1_Init+0x78>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80038a8:	4b0e      	ldr	r3, [pc, #56]	@ (80038e4 <MX_I2C1_Init+0x78>)
 80038aa:	0018      	movs	r0, r3
 80038ac:	f000 fd40 	bl	8004330 <HAL_I2C_Init>
 80038b0:	1e03      	subs	r3, r0, #0
 80038b2:	d001      	beq.n	80038b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80038b4:	f000 f8ae 	bl	8003a14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80038b8:	4b0a      	ldr	r3, [pc, #40]	@ (80038e4 <MX_I2C1_Init+0x78>)
 80038ba:	2100      	movs	r1, #0
 80038bc:	0018      	movs	r0, r3
 80038be:	f001 fb21 	bl	8004f04 <HAL_I2CEx_ConfigAnalogFilter>
 80038c2:	1e03      	subs	r3, r0, #0
 80038c4:	d001      	beq.n	80038ca <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80038c6:	f000 f8a5 	bl	8003a14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80038ca:	4b06      	ldr	r3, [pc, #24]	@ (80038e4 <MX_I2C1_Init+0x78>)
 80038cc:	2100      	movs	r1, #0
 80038ce:	0018      	movs	r0, r3
 80038d0:	f001 fb64 	bl	8004f9c <HAL_I2CEx_ConfigDigitalFilter>
 80038d4:	1e03      	subs	r3, r0, #0
 80038d6:	d001      	beq.n	80038dc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80038d8:	f000 f89c 	bl	8003a14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80038dc:	46c0      	nop			@ (mov r8, r8)
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	46c0      	nop			@ (mov r8, r8)
 80038e4:	200001f0 	.word	0x200001f0
 80038e8:	40005400 	.word	0x40005400

080038ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80038f0:	4b14      	ldr	r3, [pc, #80]	@ (8003944 <MX_USART2_UART_Init+0x58>)
 80038f2:	4a15      	ldr	r2, [pc, #84]	@ (8003948 <MX_USART2_UART_Init+0x5c>)
 80038f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80038f6:	4b13      	ldr	r3, [pc, #76]	@ (8003944 <MX_USART2_UART_Init+0x58>)
 80038f8:	22e1      	movs	r2, #225	@ 0xe1
 80038fa:	0252      	lsls	r2, r2, #9
 80038fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80038fe:	4b11      	ldr	r3, [pc, #68]	@ (8003944 <MX_USART2_UART_Init+0x58>)
 8003900:	2200      	movs	r2, #0
 8003902:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003904:	4b0f      	ldr	r3, [pc, #60]	@ (8003944 <MX_USART2_UART_Init+0x58>)
 8003906:	2200      	movs	r2, #0
 8003908:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800390a:	4b0e      	ldr	r3, [pc, #56]	@ (8003944 <MX_USART2_UART_Init+0x58>)
 800390c:	2200      	movs	r2, #0
 800390e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003910:	4b0c      	ldr	r3, [pc, #48]	@ (8003944 <MX_USART2_UART_Init+0x58>)
 8003912:	220c      	movs	r2, #12
 8003914:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003916:	4b0b      	ldr	r3, [pc, #44]	@ (8003944 <MX_USART2_UART_Init+0x58>)
 8003918:	2200      	movs	r2, #0
 800391a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800391c:	4b09      	ldr	r3, [pc, #36]	@ (8003944 <MX_USART2_UART_Init+0x58>)
 800391e:	2200      	movs	r2, #0
 8003920:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003922:	4b08      	ldr	r3, [pc, #32]	@ (8003944 <MX_USART2_UART_Init+0x58>)
 8003924:	2200      	movs	r2, #0
 8003926:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003928:	4b06      	ldr	r3, [pc, #24]	@ (8003944 <MX_USART2_UART_Init+0x58>)
 800392a:	2200      	movs	r2, #0
 800392c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800392e:	4b05      	ldr	r3, [pc, #20]	@ (8003944 <MX_USART2_UART_Init+0x58>)
 8003930:	0018      	movs	r0, r3
 8003932:	f002 fb15 	bl	8005f60 <HAL_UART_Init>
 8003936:	1e03      	subs	r3, r0, #0
 8003938:	d001      	beq.n	800393e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800393a:	f000 f86b 	bl	8003a14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800393e:	46c0      	nop			@ (mov r8, r8)
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	20000244 	.word	0x20000244
 8003948:	40004400 	.word	0x40004400

0800394c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800394c:	b590      	push	{r4, r7, lr}
 800394e:	b089      	sub	sp, #36	@ 0x24
 8003950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003952:	240c      	movs	r4, #12
 8003954:	193b      	adds	r3, r7, r4
 8003956:	0018      	movs	r0, r3
 8003958:	2314      	movs	r3, #20
 800395a:	001a      	movs	r2, r3
 800395c:	2100      	movs	r1, #0
 800395e:	f003 fe01 	bl	8007564 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003962:	4b2a      	ldr	r3, [pc, #168]	@ (8003a0c <MX_GPIO_Init+0xc0>)
 8003964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003966:	4b29      	ldr	r3, [pc, #164]	@ (8003a0c <MX_GPIO_Init+0xc0>)
 8003968:	2104      	movs	r1, #4
 800396a:	430a      	orrs	r2, r1
 800396c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800396e:	4b27      	ldr	r3, [pc, #156]	@ (8003a0c <MX_GPIO_Init+0xc0>)
 8003970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003972:	2204      	movs	r2, #4
 8003974:	4013      	ands	r3, r2
 8003976:	60bb      	str	r3, [r7, #8]
 8003978:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800397a:	4b24      	ldr	r3, [pc, #144]	@ (8003a0c <MX_GPIO_Init+0xc0>)
 800397c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800397e:	4b23      	ldr	r3, [pc, #140]	@ (8003a0c <MX_GPIO_Init+0xc0>)
 8003980:	2180      	movs	r1, #128	@ 0x80
 8003982:	430a      	orrs	r2, r1
 8003984:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003986:	4b21      	ldr	r3, [pc, #132]	@ (8003a0c <MX_GPIO_Init+0xc0>)
 8003988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398a:	2280      	movs	r2, #128	@ 0x80
 800398c:	4013      	ands	r3, r2
 800398e:	607b      	str	r3, [r7, #4]
 8003990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003992:	4b1e      	ldr	r3, [pc, #120]	@ (8003a0c <MX_GPIO_Init+0xc0>)
 8003994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003996:	4b1d      	ldr	r3, [pc, #116]	@ (8003a0c <MX_GPIO_Init+0xc0>)
 8003998:	2101      	movs	r1, #1
 800399a:	430a      	orrs	r2, r1
 800399c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800399e:	4b1b      	ldr	r3, [pc, #108]	@ (8003a0c <MX_GPIO_Init+0xc0>)
 80039a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a2:	2201      	movs	r2, #1
 80039a4:	4013      	ands	r3, r2
 80039a6:	603b      	str	r3, [r7, #0]
 80039a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80039aa:	23a0      	movs	r3, #160	@ 0xa0
 80039ac:	05db      	lsls	r3, r3, #23
 80039ae:	2200      	movs	r2, #0
 80039b0:	2120      	movs	r1, #32
 80039b2:	0018      	movs	r0, r3
 80039b4:	f000 fc9e 	bl	80042f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80039b8:	193b      	adds	r3, r7, r4
 80039ba:	2280      	movs	r2, #128	@ 0x80
 80039bc:	0192      	lsls	r2, r2, #6
 80039be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80039c0:	193b      	adds	r3, r7, r4
 80039c2:	2284      	movs	r2, #132	@ 0x84
 80039c4:	0392      	lsls	r2, r2, #14
 80039c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c8:	193b      	adds	r3, r7, r4
 80039ca:	2200      	movs	r2, #0
 80039cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80039ce:	193b      	adds	r3, r7, r4
 80039d0:	4a0f      	ldr	r2, [pc, #60]	@ (8003a10 <MX_GPIO_Init+0xc4>)
 80039d2:	0019      	movs	r1, r3
 80039d4:	0010      	movs	r0, r2
 80039d6:	f000 fb0f 	bl	8003ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80039da:	0021      	movs	r1, r4
 80039dc:	187b      	adds	r3, r7, r1
 80039de:	2220      	movs	r2, #32
 80039e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039e2:	187b      	adds	r3, r7, r1
 80039e4:	2201      	movs	r2, #1
 80039e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e8:	187b      	adds	r3, r7, r1
 80039ea:	2200      	movs	r2, #0
 80039ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ee:	187b      	adds	r3, r7, r1
 80039f0:	2200      	movs	r2, #0
 80039f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80039f4:	187a      	adds	r2, r7, r1
 80039f6:	23a0      	movs	r3, #160	@ 0xa0
 80039f8:	05db      	lsls	r3, r3, #23
 80039fa:	0011      	movs	r1, r2
 80039fc:	0018      	movs	r0, r3
 80039fe:	f000 fafb 	bl	8003ff8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003a02:	46c0      	nop			@ (mov r8, r8)
 8003a04:	46bd      	mov	sp, r7
 8003a06:	b009      	add	sp, #36	@ 0x24
 8003a08:	bd90      	pop	{r4, r7, pc}
 8003a0a:	46c0      	nop			@ (mov r8, r8)
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	50000800 	.word	0x50000800

08003a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a18:	b672      	cpsid	i
}
 8003a1a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a1c:	46c0      	nop			@ (mov r8, r8)
 8003a1e:	e7fd      	b.n	8003a1c <Error_Handler+0x8>

08003a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a24:	4b07      	ldr	r3, [pc, #28]	@ (8003a44 <HAL_MspInit+0x24>)
 8003a26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a28:	4b06      	ldr	r3, [pc, #24]	@ (8003a44 <HAL_MspInit+0x24>)
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a30:	4b04      	ldr	r3, [pc, #16]	@ (8003a44 <HAL_MspInit+0x24>)
 8003a32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a34:	4b03      	ldr	r3, [pc, #12]	@ (8003a44 <HAL_MspInit+0x24>)
 8003a36:	2180      	movs	r1, #128	@ 0x80
 8003a38:	0549      	lsls	r1, r1, #21
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a3e:	46c0      	nop			@ (mov r8, r8)
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40021000 	.word	0x40021000

08003a48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a48:	b590      	push	{r4, r7, lr}
 8003a4a:	b089      	sub	sp, #36	@ 0x24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a50:	240c      	movs	r4, #12
 8003a52:	193b      	adds	r3, r7, r4
 8003a54:	0018      	movs	r0, r3
 8003a56:	2314      	movs	r3, #20
 8003a58:	001a      	movs	r2, r3
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	f003 fd82 	bl	8007564 <memset>
  if(hi2c->Instance==I2C1)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a18      	ldr	r2, [pc, #96]	@ (8003ac8 <HAL_I2C_MspInit+0x80>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d12a      	bne.n	8003ac0 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a6a:	4b18      	ldr	r3, [pc, #96]	@ (8003acc <HAL_I2C_MspInit+0x84>)
 8003a6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a6e:	4b17      	ldr	r3, [pc, #92]	@ (8003acc <HAL_I2C_MspInit+0x84>)
 8003a70:	2101      	movs	r1, #1
 8003a72:	430a      	orrs	r2, r1
 8003a74:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003a76:	4b15      	ldr	r3, [pc, #84]	@ (8003acc <HAL_I2C_MspInit+0x84>)
 8003a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	60bb      	str	r3, [r7, #8]
 8003a80:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003a82:	193b      	adds	r3, r7, r4
 8003a84:	22c0      	movs	r2, #192	@ 0xc0
 8003a86:	00d2      	lsls	r2, r2, #3
 8003a88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a8a:	0021      	movs	r1, r4
 8003a8c:	187b      	adds	r3, r7, r1
 8003a8e:	2212      	movs	r2, #18
 8003a90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a92:	187b      	adds	r3, r7, r1
 8003a94:	2200      	movs	r2, #0
 8003a96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a98:	187b      	adds	r3, r7, r1
 8003a9a:	2203      	movs	r2, #3
 8003a9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003a9e:	187b      	adds	r3, r7, r1
 8003aa0:	2206      	movs	r2, #6
 8003aa2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aa4:	187a      	adds	r2, r7, r1
 8003aa6:	23a0      	movs	r3, #160	@ 0xa0
 8003aa8:	05db      	lsls	r3, r3, #23
 8003aaa:	0011      	movs	r1, r2
 8003aac:	0018      	movs	r0, r3
 8003aae:	f000 faa3 	bl	8003ff8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ab2:	4b06      	ldr	r3, [pc, #24]	@ (8003acc <HAL_I2C_MspInit+0x84>)
 8003ab4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ab6:	4b05      	ldr	r3, [pc, #20]	@ (8003acc <HAL_I2C_MspInit+0x84>)
 8003ab8:	2180      	movs	r1, #128	@ 0x80
 8003aba:	0389      	lsls	r1, r1, #14
 8003abc:	430a      	orrs	r2, r1
 8003abe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003ac0:	46c0      	nop			@ (mov r8, r8)
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	b009      	add	sp, #36	@ 0x24
 8003ac6:	bd90      	pop	{r4, r7, pc}
 8003ac8:	40005400 	.word	0x40005400
 8003acc:	40021000 	.word	0x40021000

08003ad0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ad0:	b590      	push	{r4, r7, lr}
 8003ad2:	b089      	sub	sp, #36	@ 0x24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ad8:	240c      	movs	r4, #12
 8003ada:	193b      	adds	r3, r7, r4
 8003adc:	0018      	movs	r0, r3
 8003ade:	2314      	movs	r3, #20
 8003ae0:	001a      	movs	r2, r3
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	f003 fd3e 	bl	8007564 <memset>
  if(huart->Instance==USART2)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a18      	ldr	r2, [pc, #96]	@ (8003b50 <HAL_UART_MspInit+0x80>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d129      	bne.n	8003b46 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003af2:	4b18      	ldr	r3, [pc, #96]	@ (8003b54 <HAL_UART_MspInit+0x84>)
 8003af4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003af6:	4b17      	ldr	r3, [pc, #92]	@ (8003b54 <HAL_UART_MspInit+0x84>)
 8003af8:	2180      	movs	r1, #128	@ 0x80
 8003afa:	0289      	lsls	r1, r1, #10
 8003afc:	430a      	orrs	r2, r1
 8003afe:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b00:	4b14      	ldr	r3, [pc, #80]	@ (8003b54 <HAL_UART_MspInit+0x84>)
 8003b02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b04:	4b13      	ldr	r3, [pc, #76]	@ (8003b54 <HAL_UART_MspInit+0x84>)
 8003b06:	2101      	movs	r1, #1
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003b0c:	4b11      	ldr	r3, [pc, #68]	@ (8003b54 <HAL_UART_MspInit+0x84>)
 8003b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b10:	2201      	movs	r2, #1
 8003b12:	4013      	ands	r3, r2
 8003b14:	60bb      	str	r3, [r7, #8]
 8003b16:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003b18:	0021      	movs	r1, r4
 8003b1a:	187b      	adds	r3, r7, r1
 8003b1c:	220c      	movs	r2, #12
 8003b1e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b20:	187b      	adds	r3, r7, r1
 8003b22:	2202      	movs	r2, #2
 8003b24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b26:	187b      	adds	r3, r7, r1
 8003b28:	2200      	movs	r2, #0
 8003b2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b2c:	187b      	adds	r3, r7, r1
 8003b2e:	2203      	movs	r2, #3
 8003b30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003b32:	187b      	adds	r3, r7, r1
 8003b34:	2204      	movs	r2, #4
 8003b36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b38:	187a      	adds	r2, r7, r1
 8003b3a:	23a0      	movs	r3, #160	@ 0xa0
 8003b3c:	05db      	lsls	r3, r3, #23
 8003b3e:	0011      	movs	r1, r2
 8003b40:	0018      	movs	r0, r3
 8003b42:	f000 fa59 	bl	8003ff8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8003b46:	46c0      	nop			@ (mov r8, r8)
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	b009      	add	sp, #36	@ 0x24
 8003b4c:	bd90      	pop	{r4, r7, pc}
 8003b4e:	46c0      	nop			@ (mov r8, r8)
 8003b50:	40004400 	.word	0x40004400
 8003b54:	40021000 	.word	0x40021000

08003b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b5c:	46c0      	nop			@ (mov r8, r8)
 8003b5e:	e7fd      	b.n	8003b5c <NMI_Handler+0x4>

08003b60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b64:	46c0      	nop			@ (mov r8, r8)
 8003b66:	e7fd      	b.n	8003b64 <HardFault_Handler+0x4>

08003b68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003b6c:	46c0      	nop			@ (mov r8, r8)
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b76:	46c0      	nop			@ (mov r8, r8)
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b80:	f000 f946 	bl	8003e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b84:	46c0      	nop			@ (mov r8, r8)
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	af00      	add	r7, sp, #0
  return 1;
 8003b8e:	2301      	movs	r3, #1
}
 8003b90:	0018      	movs	r0, r3
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <_kill>:

int _kill(int pid, int sig)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b082      	sub	sp, #8
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
 8003b9e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003ba0:	f003 fcec 	bl	800757c <__errno>
 8003ba4:	0003      	movs	r3, r0
 8003ba6:	2216      	movs	r2, #22
 8003ba8:	601a      	str	r2, [r3, #0]
  return -1;
 8003baa:	2301      	movs	r3, #1
 8003bac:	425b      	negs	r3, r3
}
 8003bae:	0018      	movs	r0, r3
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	b002      	add	sp, #8
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <_exit>:

void _exit (int status)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b082      	sub	sp, #8
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	425a      	negs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	0011      	movs	r1, r2
 8003bc6:	0018      	movs	r0, r3
 8003bc8:	f7ff ffe5 	bl	8003b96 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003bcc:	46c0      	nop			@ (mov r8, r8)
 8003bce:	e7fd      	b.n	8003bcc <_exit+0x16>

08003bd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	e00a      	b.n	8003bf8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003be2:	e000      	b.n	8003be6 <_read+0x16>
 8003be4:	bf00      	nop
 8003be6:	0001      	movs	r1, r0
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	1c5a      	adds	r2, r3, #1
 8003bec:	60ba      	str	r2, [r7, #8]
 8003bee:	b2ca      	uxtb	r2, r1
 8003bf0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	dbf0      	blt.n	8003be2 <_read+0x12>
  }

  return len;
 8003c00:	687b      	ldr	r3, [r7, #4]
}
 8003c02:	0018      	movs	r0, r3
 8003c04:	46bd      	mov	sp, r7
 8003c06:	b006      	add	sp, #24
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b086      	sub	sp, #24
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	60f8      	str	r0, [r7, #12]
 8003c12:	60b9      	str	r1, [r7, #8]
 8003c14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]
 8003c1a:	e009      	b.n	8003c30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	60ba      	str	r2, [r7, #8]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	0018      	movs	r0, r3
 8003c26:	e000      	b.n	8003c2a <_write+0x20>
 8003c28:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	617b      	str	r3, [r7, #20]
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	dbf1      	blt.n	8003c1c <_write+0x12>
  }
  return len;
 8003c38:	687b      	ldr	r3, [r7, #4]
}
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	b006      	add	sp, #24
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <_close>:

int _close(int file)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b082      	sub	sp, #8
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	425b      	negs	r3, r3
}
 8003c4e:	0018      	movs	r0, r3
 8003c50:	46bd      	mov	sp, r7
 8003c52:	b002      	add	sp, #8
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b082      	sub	sp, #8
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	2280      	movs	r2, #128	@ 0x80
 8003c64:	0192      	lsls	r2, r2, #6
 8003c66:	605a      	str	r2, [r3, #4]
  return 0;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b002      	add	sp, #8
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <_isatty>:

int _isatty(int file)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b082      	sub	sp, #8
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c7a:	2301      	movs	r3, #1
}
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	b002      	add	sp, #8
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	0018      	movs	r0, r3
 8003c94:	46bd      	mov	sp, r7
 8003c96:	b004      	add	sp, #16
 8003c98:	bd80      	pop	{r7, pc}
	...

08003c9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ca4:	4a14      	ldr	r2, [pc, #80]	@ (8003cf8 <_sbrk+0x5c>)
 8003ca6:	4b15      	ldr	r3, [pc, #84]	@ (8003cfc <_sbrk+0x60>)
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cb0:	4b13      	ldr	r3, [pc, #76]	@ (8003d00 <_sbrk+0x64>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d102      	bne.n	8003cbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cb8:	4b11      	ldr	r3, [pc, #68]	@ (8003d00 <_sbrk+0x64>)
 8003cba:	4a12      	ldr	r2, [pc, #72]	@ (8003d04 <_sbrk+0x68>)
 8003cbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cbe:	4b10      	ldr	r3, [pc, #64]	@ (8003d00 <_sbrk+0x64>)
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	18d3      	adds	r3, r2, r3
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d207      	bcs.n	8003cdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ccc:	f003 fc56 	bl	800757c <__errno>
 8003cd0:	0003      	movs	r3, r0
 8003cd2:	220c      	movs	r2, #12
 8003cd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	425b      	negs	r3, r3
 8003cda:	e009      	b.n	8003cf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cdc:	4b08      	ldr	r3, [pc, #32]	@ (8003d00 <_sbrk+0x64>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ce2:	4b07      	ldr	r3, [pc, #28]	@ (8003d00 <_sbrk+0x64>)
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	18d2      	adds	r2, r2, r3
 8003cea:	4b05      	ldr	r3, [pc, #20]	@ (8003d00 <_sbrk+0x64>)
 8003cec:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003cee:	68fb      	ldr	r3, [r7, #12]
}
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	b006      	add	sp, #24
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	20005000 	.word	0x20005000
 8003cfc:	00000400 	.word	0x00000400
 8003d00:	20000410 	.word	0x20000410
 8003d04:	20000568 	.word	0x20000568

08003d08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d0c:	46c0      	nop			@ (mov r8, r8)
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
	...

08003d14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003d14:	480d      	ldr	r0, [pc, #52]	@ (8003d4c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003d16:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003d18:	f7ff fff6 	bl	8003d08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d1c:	480c      	ldr	r0, [pc, #48]	@ (8003d50 <LoopForever+0x6>)
  ldr r1, =_edata
 8003d1e:	490d      	ldr	r1, [pc, #52]	@ (8003d54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003d20:	4a0d      	ldr	r2, [pc, #52]	@ (8003d58 <LoopForever+0xe>)
  movs r3, #0
 8003d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d24:	e002      	b.n	8003d2c <LoopCopyDataInit>

08003d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d2a:	3304      	adds	r3, #4

08003d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d30:	d3f9      	bcc.n	8003d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d32:	4a0a      	ldr	r2, [pc, #40]	@ (8003d5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003d34:	4c0a      	ldr	r4, [pc, #40]	@ (8003d60 <LoopForever+0x16>)
  movs r3, #0
 8003d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d38:	e001      	b.n	8003d3e <LoopFillZerobss>

08003d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d3c:	3204      	adds	r2, #4

08003d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d40:	d3fb      	bcc.n	8003d3a <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8003d42:	f003 fc21 	bl	8007588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d46:	f7ff fc27 	bl	8003598 <main>

08003d4a <LoopForever>:

LoopForever:
    b LoopForever
 8003d4a:	e7fe      	b.n	8003d4a <LoopForever>
   ldr   r0, =_estack
 8003d4c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d54:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003d58:	08009e58 	.word	0x08009e58
  ldr r2, =_sbss
 8003d5c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003d60:	20000564 	.word	0x20000564

08003d64 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d64:	e7fe      	b.n	8003d64 <ADC1_COMP_IRQHandler>
	...

08003d68 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d6e:	1dfb      	adds	r3, r7, #7
 8003d70:	2200      	movs	r2, #0
 8003d72:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003d74:	4b0b      	ldr	r3, [pc, #44]	@ (8003da4 <HAL_Init+0x3c>)
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	4b0a      	ldr	r3, [pc, #40]	@ (8003da4 <HAL_Init+0x3c>)
 8003d7a:	2140      	movs	r1, #64	@ 0x40
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d80:	2000      	movs	r0, #0
 8003d82:	f000 f811 	bl	8003da8 <HAL_InitTick>
 8003d86:	1e03      	subs	r3, r0, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003d8a:	1dfb      	adds	r3, r7, #7
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	701a      	strb	r2, [r3, #0]
 8003d90:	e001      	b.n	8003d96 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003d92:	f7ff fe45 	bl	8003a20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d96:	1dfb      	adds	r3, r7, #7
 8003d98:	781b      	ldrb	r3, [r3, #0]
}
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	b002      	add	sp, #8
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	46c0      	nop			@ (mov r8, r8)
 8003da4:	40022000 	.word	0x40022000

08003da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003da8:	b590      	push	{r4, r7, lr}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003db0:	4b14      	ldr	r3, [pc, #80]	@ (8003e04 <HAL_InitTick+0x5c>)
 8003db2:	681c      	ldr	r4, [r3, #0]
 8003db4:	4b14      	ldr	r3, [pc, #80]	@ (8003e08 <HAL_InitTick+0x60>)
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	0019      	movs	r1, r3
 8003dba:	23fa      	movs	r3, #250	@ 0xfa
 8003dbc:	0098      	lsls	r0, r3, #2
 8003dbe:	f7fc f9bf 	bl	8000140 <__udivsi3>
 8003dc2:	0003      	movs	r3, r0
 8003dc4:	0019      	movs	r1, r3
 8003dc6:	0020      	movs	r0, r4
 8003dc8:	f7fc f9ba 	bl	8000140 <__udivsi3>
 8003dcc:	0003      	movs	r3, r0
 8003dce:	0018      	movs	r0, r3
 8003dd0:	f000 f905 	bl	8003fde <HAL_SYSTICK_Config>
 8003dd4:	1e03      	subs	r3, r0, #0
 8003dd6:	d001      	beq.n	8003ddc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e00f      	b.n	8003dfc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b03      	cmp	r3, #3
 8003de0:	d80b      	bhi.n	8003dfa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	2301      	movs	r3, #1
 8003de6:	425b      	negs	r3, r3
 8003de8:	2200      	movs	r2, #0
 8003dea:	0018      	movs	r0, r3
 8003dec:	f000 f8e2 	bl	8003fb4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003df0:	4b06      	ldr	r3, [pc, #24]	@ (8003e0c <HAL_InitTick+0x64>)
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	e000      	b.n	8003dfc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
}
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	b003      	add	sp, #12
 8003e02:	bd90      	pop	{r4, r7, pc}
 8003e04:	20000000 	.word	0x20000000
 8003e08:	20000008 	.word	0x20000008
 8003e0c:	20000004 	.word	0x20000004

08003e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e14:	4b05      	ldr	r3, [pc, #20]	@ (8003e2c <HAL_IncTick+0x1c>)
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	001a      	movs	r2, r3
 8003e1a:	4b05      	ldr	r3, [pc, #20]	@ (8003e30 <HAL_IncTick+0x20>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	18d2      	adds	r2, r2, r3
 8003e20:	4b03      	ldr	r3, [pc, #12]	@ (8003e30 <HAL_IncTick+0x20>)
 8003e22:	601a      	str	r2, [r3, #0]
}
 8003e24:	46c0      	nop			@ (mov r8, r8)
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	46c0      	nop			@ (mov r8, r8)
 8003e2c:	20000008 	.word	0x20000008
 8003e30:	20000414 	.word	0x20000414

08003e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  return uwTick;
 8003e38:	4b02      	ldr	r3, [pc, #8]	@ (8003e44 <HAL_GetTick+0x10>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
}
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	46c0      	nop			@ (mov r8, r8)
 8003e44:	20000414 	.word	0x20000414

08003e48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e50:	f7ff fff0 	bl	8003e34 <HAL_GetTick>
 8003e54:	0003      	movs	r3, r0
 8003e56:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	d005      	beq.n	8003e6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e62:	4b0a      	ldr	r3, [pc, #40]	@ (8003e8c <HAL_Delay+0x44>)
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	001a      	movs	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	189b      	adds	r3, r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e6e:	46c0      	nop			@ (mov r8, r8)
 8003e70:	f7ff ffe0 	bl	8003e34 <HAL_GetTick>
 8003e74:	0002      	movs	r2, r0
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d8f7      	bhi.n	8003e70 <HAL_Delay+0x28>
  {
  }
}
 8003e80:	46c0      	nop			@ (mov r8, r8)
 8003e82:	46c0      	nop			@ (mov r8, r8)
 8003e84:	46bd      	mov	sp, r7
 8003e86:	b004      	add	sp, #16
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	46c0      	nop			@ (mov r8, r8)
 8003e8c:	20000008 	.word	0x20000008

08003e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e90:	b590      	push	{r4, r7, lr}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	0002      	movs	r2, r0
 8003e98:	6039      	str	r1, [r7, #0]
 8003e9a:	1dfb      	adds	r3, r7, #7
 8003e9c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003e9e:	1dfb      	adds	r3, r7, #7
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	2b7f      	cmp	r3, #127	@ 0x7f
 8003ea4:	d828      	bhi.n	8003ef8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ea6:	4a2f      	ldr	r2, [pc, #188]	@ (8003f64 <__NVIC_SetPriority+0xd4>)
 8003ea8:	1dfb      	adds	r3, r7, #7
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	b25b      	sxtb	r3, r3
 8003eae:	089b      	lsrs	r3, r3, #2
 8003eb0:	33c0      	adds	r3, #192	@ 0xc0
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	589b      	ldr	r3, [r3, r2]
 8003eb6:	1dfa      	adds	r2, r7, #7
 8003eb8:	7812      	ldrb	r2, [r2, #0]
 8003eba:	0011      	movs	r1, r2
 8003ebc:	2203      	movs	r2, #3
 8003ebe:	400a      	ands	r2, r1
 8003ec0:	00d2      	lsls	r2, r2, #3
 8003ec2:	21ff      	movs	r1, #255	@ 0xff
 8003ec4:	4091      	lsls	r1, r2
 8003ec6:	000a      	movs	r2, r1
 8003ec8:	43d2      	mvns	r2, r2
 8003eca:	401a      	ands	r2, r3
 8003ecc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	019b      	lsls	r3, r3, #6
 8003ed2:	22ff      	movs	r2, #255	@ 0xff
 8003ed4:	401a      	ands	r2, r3
 8003ed6:	1dfb      	adds	r3, r7, #7
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	0018      	movs	r0, r3
 8003edc:	2303      	movs	r3, #3
 8003ede:	4003      	ands	r3, r0
 8003ee0:	00db      	lsls	r3, r3, #3
 8003ee2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ee4:	481f      	ldr	r0, [pc, #124]	@ (8003f64 <__NVIC_SetPriority+0xd4>)
 8003ee6:	1dfb      	adds	r3, r7, #7
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	b25b      	sxtb	r3, r3
 8003eec:	089b      	lsrs	r3, r3, #2
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	33c0      	adds	r3, #192	@ 0xc0
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003ef6:	e031      	b.n	8003f5c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8003f68 <__NVIC_SetPriority+0xd8>)
 8003efa:	1dfb      	adds	r3, r7, #7
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	0019      	movs	r1, r3
 8003f00:	230f      	movs	r3, #15
 8003f02:	400b      	ands	r3, r1
 8003f04:	3b08      	subs	r3, #8
 8003f06:	089b      	lsrs	r3, r3, #2
 8003f08:	3306      	adds	r3, #6
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	18d3      	adds	r3, r2, r3
 8003f0e:	3304      	adds	r3, #4
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	1dfa      	adds	r2, r7, #7
 8003f14:	7812      	ldrb	r2, [r2, #0]
 8003f16:	0011      	movs	r1, r2
 8003f18:	2203      	movs	r2, #3
 8003f1a:	400a      	ands	r2, r1
 8003f1c:	00d2      	lsls	r2, r2, #3
 8003f1e:	21ff      	movs	r1, #255	@ 0xff
 8003f20:	4091      	lsls	r1, r2
 8003f22:	000a      	movs	r2, r1
 8003f24:	43d2      	mvns	r2, r2
 8003f26:	401a      	ands	r2, r3
 8003f28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	019b      	lsls	r3, r3, #6
 8003f2e:	22ff      	movs	r2, #255	@ 0xff
 8003f30:	401a      	ands	r2, r3
 8003f32:	1dfb      	adds	r3, r7, #7
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	0018      	movs	r0, r3
 8003f38:	2303      	movs	r3, #3
 8003f3a:	4003      	ands	r3, r0
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f40:	4809      	ldr	r0, [pc, #36]	@ (8003f68 <__NVIC_SetPriority+0xd8>)
 8003f42:	1dfb      	adds	r3, r7, #7
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	001c      	movs	r4, r3
 8003f48:	230f      	movs	r3, #15
 8003f4a:	4023      	ands	r3, r4
 8003f4c:	3b08      	subs	r3, #8
 8003f4e:	089b      	lsrs	r3, r3, #2
 8003f50:	430a      	orrs	r2, r1
 8003f52:	3306      	adds	r3, #6
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	18c3      	adds	r3, r0, r3
 8003f58:	3304      	adds	r3, #4
 8003f5a:	601a      	str	r2, [r3, #0]
}
 8003f5c:	46c0      	nop			@ (mov r8, r8)
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	b003      	add	sp, #12
 8003f62:	bd90      	pop	{r4, r7, pc}
 8003f64:	e000e100 	.word	0xe000e100
 8003f68:	e000ed00 	.word	0xe000ed00

08003f6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	1e5a      	subs	r2, r3, #1
 8003f78:	2380      	movs	r3, #128	@ 0x80
 8003f7a:	045b      	lsls	r3, r3, #17
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d301      	bcc.n	8003f84 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f80:	2301      	movs	r3, #1
 8003f82:	e010      	b.n	8003fa6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f84:	4b0a      	ldr	r3, [pc, #40]	@ (8003fb0 <SysTick_Config+0x44>)
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	3a01      	subs	r2, #1
 8003f8a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	425b      	negs	r3, r3
 8003f90:	2103      	movs	r1, #3
 8003f92:	0018      	movs	r0, r3
 8003f94:	f7ff ff7c 	bl	8003e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f98:	4b05      	ldr	r3, [pc, #20]	@ (8003fb0 <SysTick_Config+0x44>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f9e:	4b04      	ldr	r3, [pc, #16]	@ (8003fb0 <SysTick_Config+0x44>)
 8003fa0:	2207      	movs	r2, #7
 8003fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	b002      	add	sp, #8
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	46c0      	nop			@ (mov r8, r8)
 8003fb0:	e000e010 	.word	0xe000e010

08003fb4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60b9      	str	r1, [r7, #8]
 8003fbc:	607a      	str	r2, [r7, #4]
 8003fbe:	210f      	movs	r1, #15
 8003fc0:	187b      	adds	r3, r7, r1
 8003fc2:	1c02      	adds	r2, r0, #0
 8003fc4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	187b      	adds	r3, r7, r1
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	b25b      	sxtb	r3, r3
 8003fce:	0011      	movs	r1, r2
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	f7ff ff5d 	bl	8003e90 <__NVIC_SetPriority>
}
 8003fd6:	46c0      	nop			@ (mov r8, r8)
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	b004      	add	sp, #16
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b082      	sub	sp, #8
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	0018      	movs	r0, r3
 8003fea:	f7ff ffbf 	bl	8003f6c <SysTick_Config>
 8003fee:	0003      	movs	r3, r0
}
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	b002      	add	sp, #8
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004002:	2300      	movs	r3, #0
 8004004:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004006:	2300      	movs	r3, #0
 8004008:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800400a:	2300      	movs	r3, #0
 800400c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800400e:	e155      	b.n	80042bc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2101      	movs	r1, #1
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	4091      	lsls	r1, r2
 800401a:	000a      	movs	r2, r1
 800401c:	4013      	ands	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d100      	bne.n	8004028 <HAL_GPIO_Init+0x30>
 8004026:	e146      	b.n	80042b6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	2203      	movs	r2, #3
 800402e:	4013      	ands	r3, r2
 8004030:	2b01      	cmp	r3, #1
 8004032:	d005      	beq.n	8004040 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	2203      	movs	r2, #3
 800403a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800403c:	2b02      	cmp	r3, #2
 800403e:	d130      	bne.n	80040a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	2203      	movs	r2, #3
 800404c:	409a      	lsls	r2, r3
 800404e:	0013      	movs	r3, r2
 8004050:	43da      	mvns	r2, r3
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	4013      	ands	r3, r2
 8004056:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	409a      	lsls	r2, r3
 8004062:	0013      	movs	r3, r2
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	4313      	orrs	r3, r2
 8004068:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004076:	2201      	movs	r2, #1
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	409a      	lsls	r2, r3
 800407c:	0013      	movs	r3, r2
 800407e:	43da      	mvns	r2, r3
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	4013      	ands	r3, r2
 8004084:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	091b      	lsrs	r3, r3, #4
 800408c:	2201      	movs	r2, #1
 800408e:	401a      	ands	r2, r3
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	409a      	lsls	r2, r3
 8004094:	0013      	movs	r3, r2
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	4313      	orrs	r3, r2
 800409a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2203      	movs	r2, #3
 80040a8:	4013      	ands	r3, r2
 80040aa:	2b03      	cmp	r3, #3
 80040ac:	d017      	beq.n	80040de <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	2203      	movs	r2, #3
 80040ba:	409a      	lsls	r2, r3
 80040bc:	0013      	movs	r3, r2
 80040be:	43da      	mvns	r2, r3
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	4013      	ands	r3, r2
 80040c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	689a      	ldr	r2, [r3, #8]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	409a      	lsls	r2, r3
 80040d0:	0013      	movs	r3, r2
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2203      	movs	r2, #3
 80040e4:	4013      	ands	r3, r2
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d123      	bne.n	8004132 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	08da      	lsrs	r2, r3, #3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	3208      	adds	r2, #8
 80040f2:	0092      	lsls	r2, r2, #2
 80040f4:	58d3      	ldr	r3, [r2, r3]
 80040f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	2207      	movs	r2, #7
 80040fc:	4013      	ands	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	220f      	movs	r2, #15
 8004102:	409a      	lsls	r2, r3
 8004104:	0013      	movs	r3, r2
 8004106:	43da      	mvns	r2, r3
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	4013      	ands	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	691a      	ldr	r2, [r3, #16]
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	2107      	movs	r1, #7
 8004116:	400b      	ands	r3, r1
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	409a      	lsls	r2, r3
 800411c:	0013      	movs	r3, r2
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4313      	orrs	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	08da      	lsrs	r2, r3, #3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	3208      	adds	r2, #8
 800412c:	0092      	lsls	r2, r2, #2
 800412e:	6939      	ldr	r1, [r7, #16]
 8004130:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	2203      	movs	r2, #3
 800413e:	409a      	lsls	r2, r3
 8004140:	0013      	movs	r3, r2
 8004142:	43da      	mvns	r2, r3
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	4013      	ands	r3, r2
 8004148:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2203      	movs	r2, #3
 8004150:	401a      	ands	r2, r3
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	409a      	lsls	r2, r3
 8004158:	0013      	movs	r3, r2
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	23c0      	movs	r3, #192	@ 0xc0
 800416c:	029b      	lsls	r3, r3, #10
 800416e:	4013      	ands	r3, r2
 8004170:	d100      	bne.n	8004174 <HAL_GPIO_Init+0x17c>
 8004172:	e0a0      	b.n	80042b6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004174:	4b57      	ldr	r3, [pc, #348]	@ (80042d4 <HAL_GPIO_Init+0x2dc>)
 8004176:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004178:	4b56      	ldr	r3, [pc, #344]	@ (80042d4 <HAL_GPIO_Init+0x2dc>)
 800417a:	2101      	movs	r1, #1
 800417c:	430a      	orrs	r2, r1
 800417e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004180:	4a55      	ldr	r2, [pc, #340]	@ (80042d8 <HAL_GPIO_Init+0x2e0>)
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	089b      	lsrs	r3, r3, #2
 8004186:	3302      	adds	r3, #2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	589b      	ldr	r3, [r3, r2]
 800418c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	2203      	movs	r2, #3
 8004192:	4013      	ands	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	220f      	movs	r2, #15
 8004198:	409a      	lsls	r2, r3
 800419a:	0013      	movs	r3, r2
 800419c:	43da      	mvns	r2, r3
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	4013      	ands	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	23a0      	movs	r3, #160	@ 0xa0
 80041a8:	05db      	lsls	r3, r3, #23
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d01f      	beq.n	80041ee <HAL_GPIO_Init+0x1f6>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a4a      	ldr	r2, [pc, #296]	@ (80042dc <HAL_GPIO_Init+0x2e4>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d019      	beq.n	80041ea <HAL_GPIO_Init+0x1f2>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a49      	ldr	r2, [pc, #292]	@ (80042e0 <HAL_GPIO_Init+0x2e8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d013      	beq.n	80041e6 <HAL_GPIO_Init+0x1ee>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a48      	ldr	r2, [pc, #288]	@ (80042e4 <HAL_GPIO_Init+0x2ec>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00d      	beq.n	80041e2 <HAL_GPIO_Init+0x1ea>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a47      	ldr	r2, [pc, #284]	@ (80042e8 <HAL_GPIO_Init+0x2f0>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d007      	beq.n	80041de <HAL_GPIO_Init+0x1e6>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a46      	ldr	r2, [pc, #280]	@ (80042ec <HAL_GPIO_Init+0x2f4>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d101      	bne.n	80041da <HAL_GPIO_Init+0x1e2>
 80041d6:	2305      	movs	r3, #5
 80041d8:	e00a      	b.n	80041f0 <HAL_GPIO_Init+0x1f8>
 80041da:	2306      	movs	r3, #6
 80041dc:	e008      	b.n	80041f0 <HAL_GPIO_Init+0x1f8>
 80041de:	2304      	movs	r3, #4
 80041e0:	e006      	b.n	80041f0 <HAL_GPIO_Init+0x1f8>
 80041e2:	2303      	movs	r3, #3
 80041e4:	e004      	b.n	80041f0 <HAL_GPIO_Init+0x1f8>
 80041e6:	2302      	movs	r3, #2
 80041e8:	e002      	b.n	80041f0 <HAL_GPIO_Init+0x1f8>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <HAL_GPIO_Init+0x1f8>
 80041ee:	2300      	movs	r3, #0
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	2103      	movs	r1, #3
 80041f4:	400a      	ands	r2, r1
 80041f6:	0092      	lsls	r2, r2, #2
 80041f8:	4093      	lsls	r3, r2
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004200:	4935      	ldr	r1, [pc, #212]	@ (80042d8 <HAL_GPIO_Init+0x2e0>)
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	089b      	lsrs	r3, r3, #2
 8004206:	3302      	adds	r3, #2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800420e:	4b38      	ldr	r3, [pc, #224]	@ (80042f0 <HAL_GPIO_Init+0x2f8>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	43da      	mvns	r2, r3
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	4013      	ands	r3, r2
 800421c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	2380      	movs	r3, #128	@ 0x80
 8004224:	035b      	lsls	r3, r3, #13
 8004226:	4013      	ands	r3, r2
 8004228:	d003      	beq.n	8004232 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4313      	orrs	r3, r2
 8004230:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004232:	4b2f      	ldr	r3, [pc, #188]	@ (80042f0 <HAL_GPIO_Init+0x2f8>)
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004238:	4b2d      	ldr	r3, [pc, #180]	@ (80042f0 <HAL_GPIO_Init+0x2f8>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	43da      	mvns	r2, r3
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	4013      	ands	r3, r2
 8004246:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	2380      	movs	r3, #128	@ 0x80
 800424e:	039b      	lsls	r3, r3, #14
 8004250:	4013      	ands	r3, r2
 8004252:	d003      	beq.n	800425c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	4313      	orrs	r3, r2
 800425a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800425c:	4b24      	ldr	r3, [pc, #144]	@ (80042f0 <HAL_GPIO_Init+0x2f8>)
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8004262:	4b23      	ldr	r3, [pc, #140]	@ (80042f0 <HAL_GPIO_Init+0x2f8>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	43da      	mvns	r2, r3
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	4013      	ands	r3, r2
 8004270:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	2380      	movs	r3, #128	@ 0x80
 8004278:	029b      	lsls	r3, r3, #10
 800427a:	4013      	ands	r3, r2
 800427c:	d003      	beq.n	8004286 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4313      	orrs	r3, r2
 8004284:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004286:	4b1a      	ldr	r3, [pc, #104]	@ (80042f0 <HAL_GPIO_Init+0x2f8>)
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800428c:	4b18      	ldr	r3, [pc, #96]	@ (80042f0 <HAL_GPIO_Init+0x2f8>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	43da      	mvns	r2, r3
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	4013      	ands	r3, r2
 800429a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	2380      	movs	r3, #128	@ 0x80
 80042a2:	025b      	lsls	r3, r3, #9
 80042a4:	4013      	ands	r3, r2
 80042a6:	d003      	beq.n	80042b0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80042b0:	4b0f      	ldr	r3, [pc, #60]	@ (80042f0 <HAL_GPIO_Init+0x2f8>)
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	3301      	adds	r3, #1
 80042ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	40da      	lsrs	r2, r3
 80042c4:	1e13      	subs	r3, r2, #0
 80042c6:	d000      	beq.n	80042ca <HAL_GPIO_Init+0x2d2>
 80042c8:	e6a2      	b.n	8004010 <HAL_GPIO_Init+0x18>
  }
}
 80042ca:	46c0      	nop			@ (mov r8, r8)
 80042cc:	46c0      	nop			@ (mov r8, r8)
 80042ce:	46bd      	mov	sp, r7
 80042d0:	b006      	add	sp, #24
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40021000 	.word	0x40021000
 80042d8:	40010000 	.word	0x40010000
 80042dc:	50000400 	.word	0x50000400
 80042e0:	50000800 	.word	0x50000800
 80042e4:	50000c00 	.word	0x50000c00
 80042e8:	50001000 	.word	0x50001000
 80042ec:	50001c00 	.word	0x50001c00
 80042f0:	40010400 	.word	0x40010400

080042f4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	0008      	movs	r0, r1
 80042fe:	0011      	movs	r1, r2
 8004300:	1cbb      	adds	r3, r7, #2
 8004302:	1c02      	adds	r2, r0, #0
 8004304:	801a      	strh	r2, [r3, #0]
 8004306:	1c7b      	adds	r3, r7, #1
 8004308:	1c0a      	adds	r2, r1, #0
 800430a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800430c:	1c7b      	adds	r3, r7, #1
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d004      	beq.n	800431e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004314:	1cbb      	adds	r3, r7, #2
 8004316:	881a      	ldrh	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800431c:	e003      	b.n	8004326 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800431e:	1cbb      	adds	r3, r7, #2
 8004320:	881a      	ldrh	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004326:	46c0      	nop			@ (mov r8, r8)
 8004328:	46bd      	mov	sp, r7
 800432a:	b002      	add	sp, #8
 800432c:	bd80      	pop	{r7, pc}
	...

08004330 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e082      	b.n	8004448 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2241      	movs	r2, #65	@ 0x41
 8004346:	5c9b      	ldrb	r3, [r3, r2]
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d107      	bne.n	800435e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2240      	movs	r2, #64	@ 0x40
 8004352:	2100      	movs	r1, #0
 8004354:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	0018      	movs	r0, r3
 800435a:	f7ff fb75 	bl	8003a48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2241      	movs	r2, #65	@ 0x41
 8004362:	2124      	movs	r1, #36	@ 0x24
 8004364:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2101      	movs	r1, #1
 8004372:	438a      	bics	r2, r1
 8004374:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4934      	ldr	r1, [pc, #208]	@ (8004450 <HAL_I2C_Init+0x120>)
 8004380:	400a      	ands	r2, r1
 8004382:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4931      	ldr	r1, [pc, #196]	@ (8004454 <HAL_I2C_Init+0x124>)
 8004390:	400a      	ands	r2, r1
 8004392:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d108      	bne.n	80043ae <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2180      	movs	r1, #128	@ 0x80
 80043a6:	0209      	lsls	r1, r1, #8
 80043a8:	430a      	orrs	r2, r1
 80043aa:	609a      	str	r2, [r3, #8]
 80043ac:	e007      	b.n	80043be <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689a      	ldr	r2, [r3, #8]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2184      	movs	r1, #132	@ 0x84
 80043b8:	0209      	lsls	r1, r1, #8
 80043ba:	430a      	orrs	r2, r1
 80043bc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d104      	bne.n	80043d0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2280      	movs	r2, #128	@ 0x80
 80043cc:	0112      	lsls	r2, r2, #4
 80043ce:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	491f      	ldr	r1, [pc, #124]	@ (8004458 <HAL_I2C_Init+0x128>)
 80043dc:	430a      	orrs	r2, r1
 80043de:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	491a      	ldr	r1, [pc, #104]	@ (8004454 <HAL_I2C_Init+0x124>)
 80043ec:	400a      	ands	r2, r1
 80043ee:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	691a      	ldr	r2, [r3, #16]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	431a      	orrs	r2, r3
 80043fa:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69d9      	ldr	r1, [r3, #28]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1a      	ldr	r2, [r3, #32]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2101      	movs	r1, #1
 8004426:	430a      	orrs	r2, r1
 8004428:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2241      	movs	r2, #65	@ 0x41
 8004434:	2120      	movs	r1, #32
 8004436:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2242      	movs	r2, #66	@ 0x42
 8004442:	2100      	movs	r1, #0
 8004444:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	0018      	movs	r0, r3
 800444a:	46bd      	mov	sp, r7
 800444c:	b002      	add	sp, #8
 800444e:	bd80      	pop	{r7, pc}
 8004450:	f0ffffff 	.word	0xf0ffffff
 8004454:	ffff7fff 	.word	0xffff7fff
 8004458:	02008000 	.word	0x02008000

0800445c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800445c:	b590      	push	{r4, r7, lr}
 800445e:	b089      	sub	sp, #36	@ 0x24
 8004460:	af02      	add	r7, sp, #8
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	000c      	movs	r4, r1
 8004466:	0010      	movs	r0, r2
 8004468:	0019      	movs	r1, r3
 800446a:	230a      	movs	r3, #10
 800446c:	18fb      	adds	r3, r7, r3
 800446e:	1c22      	adds	r2, r4, #0
 8004470:	801a      	strh	r2, [r3, #0]
 8004472:	2308      	movs	r3, #8
 8004474:	18fb      	adds	r3, r7, r3
 8004476:	1c02      	adds	r2, r0, #0
 8004478:	801a      	strh	r2, [r3, #0]
 800447a:	1dbb      	adds	r3, r7, #6
 800447c:	1c0a      	adds	r2, r1, #0
 800447e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2241      	movs	r2, #65	@ 0x41
 8004484:	5c9b      	ldrb	r3, [r3, r2]
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b20      	cmp	r3, #32
 800448a:	d000      	beq.n	800448e <HAL_I2C_Mem_Write+0x32>
 800448c:	e10c      	b.n	80046a8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800448e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004490:	2b00      	cmp	r3, #0
 8004492:	d004      	beq.n	800449e <HAL_I2C_Mem_Write+0x42>
 8004494:	232c      	movs	r3, #44	@ 0x2c
 8004496:	18fb      	adds	r3, r7, r3
 8004498:	881b      	ldrh	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d105      	bne.n	80044aa <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2280      	movs	r2, #128	@ 0x80
 80044a2:	0092      	lsls	r2, r2, #2
 80044a4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e0ff      	b.n	80046aa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2240      	movs	r2, #64	@ 0x40
 80044ae:	5c9b      	ldrb	r3, [r3, r2]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d101      	bne.n	80044b8 <HAL_I2C_Mem_Write+0x5c>
 80044b4:	2302      	movs	r3, #2
 80044b6:	e0f8      	b.n	80046aa <HAL_I2C_Mem_Write+0x24e>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2240      	movs	r2, #64	@ 0x40
 80044bc:	2101      	movs	r1, #1
 80044be:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80044c0:	f7ff fcb8 	bl	8003e34 <HAL_GetTick>
 80044c4:	0003      	movs	r3, r0
 80044c6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80044c8:	2380      	movs	r3, #128	@ 0x80
 80044ca:	0219      	lsls	r1, r3, #8
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	2319      	movs	r3, #25
 80044d4:	2201      	movs	r2, #1
 80044d6:	f000 fb0b 	bl	8004af0 <I2C_WaitOnFlagUntilTimeout>
 80044da:	1e03      	subs	r3, r0, #0
 80044dc:	d001      	beq.n	80044e2 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e0e3      	b.n	80046aa <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2241      	movs	r2, #65	@ 0x41
 80044e6:	2121      	movs	r1, #33	@ 0x21
 80044e8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2242      	movs	r2, #66	@ 0x42
 80044ee:	2140      	movs	r1, #64	@ 0x40
 80044f0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	222c      	movs	r2, #44	@ 0x2c
 8004502:	18ba      	adds	r2, r7, r2
 8004504:	8812      	ldrh	r2, [r2, #0]
 8004506:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800450e:	1dbb      	adds	r3, r7, #6
 8004510:	881c      	ldrh	r4, [r3, #0]
 8004512:	2308      	movs	r3, #8
 8004514:	18fb      	adds	r3, r7, r3
 8004516:	881a      	ldrh	r2, [r3, #0]
 8004518:	230a      	movs	r3, #10
 800451a:	18fb      	adds	r3, r7, r3
 800451c:	8819      	ldrh	r1, [r3, #0]
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	9301      	str	r3, [sp, #4]
 8004524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	0023      	movs	r3, r4
 800452a:	f000 f9f9 	bl	8004920 <I2C_RequestMemoryWrite>
 800452e:	1e03      	subs	r3, r0, #0
 8004530:	d005      	beq.n	800453e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2240      	movs	r2, #64	@ 0x40
 8004536:	2100      	movs	r1, #0
 8004538:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e0b5      	b.n	80046aa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004542:	b29b      	uxth	r3, r3
 8004544:	2bff      	cmp	r3, #255	@ 0xff
 8004546:	d911      	bls.n	800456c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	22ff      	movs	r2, #255	@ 0xff
 800454c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004552:	b2da      	uxtb	r2, r3
 8004554:	2380      	movs	r3, #128	@ 0x80
 8004556:	045c      	lsls	r4, r3, #17
 8004558:	230a      	movs	r3, #10
 800455a:	18fb      	adds	r3, r7, r3
 800455c:	8819      	ldrh	r1, [r3, #0]
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	2300      	movs	r3, #0
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	0023      	movs	r3, r4
 8004566:	f000 fc93 	bl	8004e90 <I2C_TransferConfig>
 800456a:	e012      	b.n	8004592 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004570:	b29a      	uxth	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800457a:	b2da      	uxtb	r2, r3
 800457c:	2380      	movs	r3, #128	@ 0x80
 800457e:	049c      	lsls	r4, r3, #18
 8004580:	230a      	movs	r3, #10
 8004582:	18fb      	adds	r3, r7, r3
 8004584:	8819      	ldrh	r1, [r3, #0]
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	2300      	movs	r3, #0
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	0023      	movs	r3, r4
 800458e:	f000 fc7f 	bl	8004e90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	0018      	movs	r0, r3
 800459a:	f000 faf7 	bl	8004b8c <I2C_WaitOnTXISFlagUntilTimeout>
 800459e:	1e03      	subs	r3, r0, #0
 80045a0:	d001      	beq.n	80045a6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e081      	b.n	80046aa <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045aa:	781a      	ldrb	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b6:	1c5a      	adds	r2, r3, #1
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	3b01      	subs	r3, #1
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ce:	3b01      	subs	r3, #1
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045da:	b29b      	uxth	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d03a      	beq.n	8004656 <HAL_I2C_Mem_Write+0x1fa>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d136      	bne.n	8004656 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80045e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	0013      	movs	r3, r2
 80045f2:	2200      	movs	r2, #0
 80045f4:	2180      	movs	r1, #128	@ 0x80
 80045f6:	f000 fa7b 	bl	8004af0 <I2C_WaitOnFlagUntilTimeout>
 80045fa:	1e03      	subs	r3, r0, #0
 80045fc:	d001      	beq.n	8004602 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e053      	b.n	80046aa <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004606:	b29b      	uxth	r3, r3
 8004608:	2bff      	cmp	r3, #255	@ 0xff
 800460a:	d911      	bls.n	8004630 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	22ff      	movs	r2, #255	@ 0xff
 8004610:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004616:	b2da      	uxtb	r2, r3
 8004618:	2380      	movs	r3, #128	@ 0x80
 800461a:	045c      	lsls	r4, r3, #17
 800461c:	230a      	movs	r3, #10
 800461e:	18fb      	adds	r3, r7, r3
 8004620:	8819      	ldrh	r1, [r3, #0]
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	2300      	movs	r3, #0
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	0023      	movs	r3, r4
 800462a:	f000 fc31 	bl	8004e90 <I2C_TransferConfig>
 800462e:	e012      	b.n	8004656 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004634:	b29a      	uxth	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800463e:	b2da      	uxtb	r2, r3
 8004640:	2380      	movs	r3, #128	@ 0x80
 8004642:	049c      	lsls	r4, r3, #18
 8004644:	230a      	movs	r3, #10
 8004646:	18fb      	adds	r3, r7, r3
 8004648:	8819      	ldrh	r1, [r3, #0]
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	2300      	movs	r3, #0
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	0023      	movs	r3, r4
 8004652:	f000 fc1d 	bl	8004e90 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800465a:	b29b      	uxth	r3, r3
 800465c:	2b00      	cmp	r3, #0
 800465e:	d198      	bne.n	8004592 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	0018      	movs	r0, r3
 8004668:	f000 fad6 	bl	8004c18 <I2C_WaitOnSTOPFlagUntilTimeout>
 800466c:	1e03      	subs	r3, r0, #0
 800466e:	d001      	beq.n	8004674 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e01a      	b.n	80046aa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2220      	movs	r2, #32
 800467a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	490b      	ldr	r1, [pc, #44]	@ (80046b4 <HAL_I2C_Mem_Write+0x258>)
 8004688:	400a      	ands	r2, r1
 800468a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2241      	movs	r2, #65	@ 0x41
 8004690:	2120      	movs	r1, #32
 8004692:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2242      	movs	r2, #66	@ 0x42
 8004698:	2100      	movs	r1, #0
 800469a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2240      	movs	r2, #64	@ 0x40
 80046a0:	2100      	movs	r1, #0
 80046a2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80046a4:	2300      	movs	r3, #0
 80046a6:	e000      	b.n	80046aa <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80046a8:	2302      	movs	r3, #2
  }
}
 80046aa:	0018      	movs	r0, r3
 80046ac:	46bd      	mov	sp, r7
 80046ae:	b007      	add	sp, #28
 80046b0:	bd90      	pop	{r4, r7, pc}
 80046b2:	46c0      	nop			@ (mov r8, r8)
 80046b4:	fe00e800 	.word	0xfe00e800

080046b8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046b8:	b590      	push	{r4, r7, lr}
 80046ba:	b089      	sub	sp, #36	@ 0x24
 80046bc:	af02      	add	r7, sp, #8
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	000c      	movs	r4, r1
 80046c2:	0010      	movs	r0, r2
 80046c4:	0019      	movs	r1, r3
 80046c6:	230a      	movs	r3, #10
 80046c8:	18fb      	adds	r3, r7, r3
 80046ca:	1c22      	adds	r2, r4, #0
 80046cc:	801a      	strh	r2, [r3, #0]
 80046ce:	2308      	movs	r3, #8
 80046d0:	18fb      	adds	r3, r7, r3
 80046d2:	1c02      	adds	r2, r0, #0
 80046d4:	801a      	strh	r2, [r3, #0]
 80046d6:	1dbb      	adds	r3, r7, #6
 80046d8:	1c0a      	adds	r2, r1, #0
 80046da:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2241      	movs	r2, #65	@ 0x41
 80046e0:	5c9b      	ldrb	r3, [r3, r2]
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b20      	cmp	r3, #32
 80046e6:	d000      	beq.n	80046ea <HAL_I2C_Mem_Read+0x32>
 80046e8:	e110      	b.n	800490c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80046ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d004      	beq.n	80046fa <HAL_I2C_Mem_Read+0x42>
 80046f0:	232c      	movs	r3, #44	@ 0x2c
 80046f2:	18fb      	adds	r3, r7, r3
 80046f4:	881b      	ldrh	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d105      	bne.n	8004706 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2280      	movs	r2, #128	@ 0x80
 80046fe:	0092      	lsls	r2, r2, #2
 8004700:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e103      	b.n	800490e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2240      	movs	r2, #64	@ 0x40
 800470a:	5c9b      	ldrb	r3, [r3, r2]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_I2C_Mem_Read+0x5c>
 8004710:	2302      	movs	r3, #2
 8004712:	e0fc      	b.n	800490e <HAL_I2C_Mem_Read+0x256>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2240      	movs	r2, #64	@ 0x40
 8004718:	2101      	movs	r1, #1
 800471a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800471c:	f7ff fb8a 	bl	8003e34 <HAL_GetTick>
 8004720:	0003      	movs	r3, r0
 8004722:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004724:	2380      	movs	r3, #128	@ 0x80
 8004726:	0219      	lsls	r1, r3, #8
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	2319      	movs	r3, #25
 8004730:	2201      	movs	r2, #1
 8004732:	f000 f9dd 	bl	8004af0 <I2C_WaitOnFlagUntilTimeout>
 8004736:	1e03      	subs	r3, r0, #0
 8004738:	d001      	beq.n	800473e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e0e7      	b.n	800490e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2241      	movs	r2, #65	@ 0x41
 8004742:	2122      	movs	r1, #34	@ 0x22
 8004744:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2242      	movs	r2, #66	@ 0x42
 800474a:	2140      	movs	r1, #64	@ 0x40
 800474c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004758:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	222c      	movs	r2, #44	@ 0x2c
 800475e:	18ba      	adds	r2, r7, r2
 8004760:	8812      	ldrh	r2, [r2, #0]
 8004762:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800476a:	1dbb      	adds	r3, r7, #6
 800476c:	881c      	ldrh	r4, [r3, #0]
 800476e:	2308      	movs	r3, #8
 8004770:	18fb      	adds	r3, r7, r3
 8004772:	881a      	ldrh	r2, [r3, #0]
 8004774:	230a      	movs	r3, #10
 8004776:	18fb      	adds	r3, r7, r3
 8004778:	8819      	ldrh	r1, [r3, #0]
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	9301      	str	r3, [sp, #4]
 8004780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	0023      	movs	r3, r4
 8004786:	f000 f92f 	bl	80049e8 <I2C_RequestMemoryRead>
 800478a:	1e03      	subs	r3, r0, #0
 800478c:	d005      	beq.n	800479a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2240      	movs	r2, #64	@ 0x40
 8004792:	2100      	movs	r1, #0
 8004794:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e0b9      	b.n	800490e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800479e:	b29b      	uxth	r3, r3
 80047a0:	2bff      	cmp	r3, #255	@ 0xff
 80047a2:	d911      	bls.n	80047c8 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	22ff      	movs	r2, #255	@ 0xff
 80047a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	2380      	movs	r3, #128	@ 0x80
 80047b2:	045c      	lsls	r4, r3, #17
 80047b4:	230a      	movs	r3, #10
 80047b6:	18fb      	adds	r3, r7, r3
 80047b8:	8819      	ldrh	r1, [r3, #0]
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	4b56      	ldr	r3, [pc, #344]	@ (8004918 <HAL_I2C_Mem_Read+0x260>)
 80047be:	9300      	str	r3, [sp, #0]
 80047c0:	0023      	movs	r3, r4
 80047c2:	f000 fb65 	bl	8004e90 <I2C_TransferConfig>
 80047c6:	e012      	b.n	80047ee <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047d6:	b2da      	uxtb	r2, r3
 80047d8:	2380      	movs	r3, #128	@ 0x80
 80047da:	049c      	lsls	r4, r3, #18
 80047dc:	230a      	movs	r3, #10
 80047de:	18fb      	adds	r3, r7, r3
 80047e0:	8819      	ldrh	r1, [r3, #0]
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	4b4c      	ldr	r3, [pc, #304]	@ (8004918 <HAL_I2C_Mem_Read+0x260>)
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	0023      	movs	r3, r4
 80047ea:	f000 fb51 	bl	8004e90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80047ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	9300      	str	r3, [sp, #0]
 80047f6:	0013      	movs	r3, r2
 80047f8:	2200      	movs	r2, #0
 80047fa:	2104      	movs	r1, #4
 80047fc:	f000 f978 	bl	8004af0 <I2C_WaitOnFlagUntilTimeout>
 8004800:	1e03      	subs	r3, r0, #0
 8004802:	d001      	beq.n	8004808 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e082      	b.n	800490e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004812:	b2d2      	uxtb	r2, r2
 8004814:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481a:	1c5a      	adds	r2, r3, #1
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004824:	3b01      	subs	r3, #1
 8004826:	b29a      	uxth	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004830:	b29b      	uxth	r3, r3
 8004832:	3b01      	subs	r3, #1
 8004834:	b29a      	uxth	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800483e:	b29b      	uxth	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d03a      	beq.n	80048ba <HAL_I2C_Mem_Read+0x202>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004848:	2b00      	cmp	r3, #0
 800484a:	d136      	bne.n	80048ba <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800484c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	9300      	str	r3, [sp, #0]
 8004854:	0013      	movs	r3, r2
 8004856:	2200      	movs	r2, #0
 8004858:	2180      	movs	r1, #128	@ 0x80
 800485a:	f000 f949 	bl	8004af0 <I2C_WaitOnFlagUntilTimeout>
 800485e:	1e03      	subs	r3, r0, #0
 8004860:	d001      	beq.n	8004866 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e053      	b.n	800490e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800486a:	b29b      	uxth	r3, r3
 800486c:	2bff      	cmp	r3, #255	@ 0xff
 800486e:	d911      	bls.n	8004894 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	22ff      	movs	r2, #255	@ 0xff
 8004874:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800487a:	b2da      	uxtb	r2, r3
 800487c:	2380      	movs	r3, #128	@ 0x80
 800487e:	045c      	lsls	r4, r3, #17
 8004880:	230a      	movs	r3, #10
 8004882:	18fb      	adds	r3, r7, r3
 8004884:	8819      	ldrh	r1, [r3, #0]
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	2300      	movs	r3, #0
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	0023      	movs	r3, r4
 800488e:	f000 faff 	bl	8004e90 <I2C_TransferConfig>
 8004892:	e012      	b.n	80048ba <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004898:	b29a      	uxth	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	2380      	movs	r3, #128	@ 0x80
 80048a6:	049c      	lsls	r4, r3, #18
 80048a8:	230a      	movs	r3, #10
 80048aa:	18fb      	adds	r3, r7, r3
 80048ac:	8819      	ldrh	r1, [r3, #0]
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	2300      	movs	r3, #0
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	0023      	movs	r3, r4
 80048b6:	f000 faeb 	bl	8004e90 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048be:	b29b      	uxth	r3, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d194      	bne.n	80047ee <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	0018      	movs	r0, r3
 80048cc:	f000 f9a4 	bl	8004c18 <I2C_WaitOnSTOPFlagUntilTimeout>
 80048d0:	1e03      	subs	r3, r0, #0
 80048d2:	d001      	beq.n	80048d8 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e01a      	b.n	800490e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2220      	movs	r2, #32
 80048de:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	490c      	ldr	r1, [pc, #48]	@ (800491c <HAL_I2C_Mem_Read+0x264>)
 80048ec:	400a      	ands	r2, r1
 80048ee:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2241      	movs	r2, #65	@ 0x41
 80048f4:	2120      	movs	r1, #32
 80048f6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2242      	movs	r2, #66	@ 0x42
 80048fc:	2100      	movs	r1, #0
 80048fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2240      	movs	r2, #64	@ 0x40
 8004904:	2100      	movs	r1, #0
 8004906:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004908:	2300      	movs	r3, #0
 800490a:	e000      	b.n	800490e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800490c:	2302      	movs	r3, #2
  }
}
 800490e:	0018      	movs	r0, r3
 8004910:	46bd      	mov	sp, r7
 8004912:	b007      	add	sp, #28
 8004914:	bd90      	pop	{r4, r7, pc}
 8004916:	46c0      	nop			@ (mov r8, r8)
 8004918:	80002400 	.word	0x80002400
 800491c:	fe00e800 	.word	0xfe00e800

08004920 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004920:	b5b0      	push	{r4, r5, r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af02      	add	r7, sp, #8
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	000c      	movs	r4, r1
 800492a:	0010      	movs	r0, r2
 800492c:	0019      	movs	r1, r3
 800492e:	250a      	movs	r5, #10
 8004930:	197b      	adds	r3, r7, r5
 8004932:	1c22      	adds	r2, r4, #0
 8004934:	801a      	strh	r2, [r3, #0]
 8004936:	2308      	movs	r3, #8
 8004938:	18fb      	adds	r3, r7, r3
 800493a:	1c02      	adds	r2, r0, #0
 800493c:	801a      	strh	r2, [r3, #0]
 800493e:	1dbb      	adds	r3, r7, #6
 8004940:	1c0a      	adds	r2, r1, #0
 8004942:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004944:	1dbb      	adds	r3, r7, #6
 8004946:	881b      	ldrh	r3, [r3, #0]
 8004948:	b2da      	uxtb	r2, r3
 800494a:	2380      	movs	r3, #128	@ 0x80
 800494c:	045c      	lsls	r4, r3, #17
 800494e:	197b      	adds	r3, r7, r5
 8004950:	8819      	ldrh	r1, [r3, #0]
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	4b23      	ldr	r3, [pc, #140]	@ (80049e4 <I2C_RequestMemoryWrite+0xc4>)
 8004956:	9300      	str	r3, [sp, #0]
 8004958:	0023      	movs	r3, r4
 800495a:	f000 fa99 	bl	8004e90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800495e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004960:	6a39      	ldr	r1, [r7, #32]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	0018      	movs	r0, r3
 8004966:	f000 f911 	bl	8004b8c <I2C_WaitOnTXISFlagUntilTimeout>
 800496a:	1e03      	subs	r3, r0, #0
 800496c:	d001      	beq.n	8004972 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e033      	b.n	80049da <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004972:	1dbb      	adds	r3, r7, #6
 8004974:	881b      	ldrh	r3, [r3, #0]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d107      	bne.n	800498a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800497a:	2308      	movs	r3, #8
 800497c:	18fb      	adds	r3, r7, r3
 800497e:	881b      	ldrh	r3, [r3, #0]
 8004980:	b2da      	uxtb	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	629a      	str	r2, [r3, #40]	@ 0x28
 8004988:	e019      	b.n	80049be <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800498a:	2308      	movs	r3, #8
 800498c:	18fb      	adds	r3, r7, r3
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	0a1b      	lsrs	r3, r3, #8
 8004992:	b29b      	uxth	r3, r3
 8004994:	b2da      	uxtb	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800499c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800499e:	6a39      	ldr	r1, [r7, #32]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	0018      	movs	r0, r3
 80049a4:	f000 f8f2 	bl	8004b8c <I2C_WaitOnTXISFlagUntilTimeout>
 80049a8:	1e03      	subs	r3, r0, #0
 80049aa:	d001      	beq.n	80049b0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e014      	b.n	80049da <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049b0:	2308      	movs	r3, #8
 80049b2:	18fb      	adds	r3, r7, r3
 80049b4:	881b      	ldrh	r3, [r3, #0]
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80049be:	6a3a      	ldr	r2, [r7, #32]
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	0013      	movs	r3, r2
 80049c8:	2200      	movs	r2, #0
 80049ca:	2180      	movs	r1, #128	@ 0x80
 80049cc:	f000 f890 	bl	8004af0 <I2C_WaitOnFlagUntilTimeout>
 80049d0:	1e03      	subs	r3, r0, #0
 80049d2:	d001      	beq.n	80049d8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e000      	b.n	80049da <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	0018      	movs	r0, r3
 80049dc:	46bd      	mov	sp, r7
 80049de:	b004      	add	sp, #16
 80049e0:	bdb0      	pop	{r4, r5, r7, pc}
 80049e2:	46c0      	nop			@ (mov r8, r8)
 80049e4:	80002000 	.word	0x80002000

080049e8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80049e8:	b5b0      	push	{r4, r5, r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af02      	add	r7, sp, #8
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	000c      	movs	r4, r1
 80049f2:	0010      	movs	r0, r2
 80049f4:	0019      	movs	r1, r3
 80049f6:	250a      	movs	r5, #10
 80049f8:	197b      	adds	r3, r7, r5
 80049fa:	1c22      	adds	r2, r4, #0
 80049fc:	801a      	strh	r2, [r3, #0]
 80049fe:	2308      	movs	r3, #8
 8004a00:	18fb      	adds	r3, r7, r3
 8004a02:	1c02      	adds	r2, r0, #0
 8004a04:	801a      	strh	r2, [r3, #0]
 8004a06:	1dbb      	adds	r3, r7, #6
 8004a08:	1c0a      	adds	r2, r1, #0
 8004a0a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004a0c:	1dbb      	adds	r3, r7, #6
 8004a0e:	881b      	ldrh	r3, [r3, #0]
 8004a10:	b2da      	uxtb	r2, r3
 8004a12:	197b      	adds	r3, r7, r5
 8004a14:	8819      	ldrh	r1, [r3, #0]
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	4b23      	ldr	r3, [pc, #140]	@ (8004aa8 <I2C_RequestMemoryRead+0xc0>)
 8004a1a:	9300      	str	r3, [sp, #0]
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	f000 fa37 	bl	8004e90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a24:	6a39      	ldr	r1, [r7, #32]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	0018      	movs	r0, r3
 8004a2a:	f000 f8af 	bl	8004b8c <I2C_WaitOnTXISFlagUntilTimeout>
 8004a2e:	1e03      	subs	r3, r0, #0
 8004a30:	d001      	beq.n	8004a36 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e033      	b.n	8004a9e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a36:	1dbb      	adds	r3, r7, #6
 8004a38:	881b      	ldrh	r3, [r3, #0]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d107      	bne.n	8004a4e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a3e:	2308      	movs	r3, #8
 8004a40:	18fb      	adds	r3, r7, r3
 8004a42:	881b      	ldrh	r3, [r3, #0]
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a4c:	e019      	b.n	8004a82 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a4e:	2308      	movs	r3, #8
 8004a50:	18fb      	adds	r3, r7, r3
 8004a52:	881b      	ldrh	r3, [r3, #0]
 8004a54:	0a1b      	lsrs	r3, r3, #8
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a62:	6a39      	ldr	r1, [r7, #32]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	0018      	movs	r0, r3
 8004a68:	f000 f890 	bl	8004b8c <I2C_WaitOnTXISFlagUntilTimeout>
 8004a6c:	1e03      	subs	r3, r0, #0
 8004a6e:	d001      	beq.n	8004a74 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e014      	b.n	8004a9e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a74:	2308      	movs	r3, #8
 8004a76:	18fb      	adds	r3, r7, r3
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	b2da      	uxtb	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004a82:	6a3a      	ldr	r2, [r7, #32]
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	0013      	movs	r3, r2
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	2140      	movs	r1, #64	@ 0x40
 8004a90:	f000 f82e 	bl	8004af0 <I2C_WaitOnFlagUntilTimeout>
 8004a94:	1e03      	subs	r3, r0, #0
 8004a96:	d001      	beq.n	8004a9c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e000      	b.n	8004a9e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	b004      	add	sp, #16
 8004aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8004aa6:	46c0      	nop			@ (mov r8, r8)
 8004aa8:	80002000 	.word	0x80002000

08004aac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	2202      	movs	r2, #2
 8004abc:	4013      	ands	r3, r2
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d103      	bne.n	8004aca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d007      	beq.n	8004ae8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699a      	ldr	r2, [r3, #24]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	619a      	str	r2, [r3, #24]
  }
}
 8004ae8:	46c0      	nop			@ (mov r8, r8)
 8004aea:	46bd      	mov	sp, r7
 8004aec:	b002      	add	sp, #8
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	603b      	str	r3, [r7, #0]
 8004afc:	1dfb      	adds	r3, r7, #7
 8004afe:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b00:	e030      	b.n	8004b64 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	3301      	adds	r3, #1
 8004b06:	d02d      	beq.n	8004b64 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b08:	f7ff f994 	bl	8003e34 <HAL_GetTick>
 8004b0c:	0002      	movs	r2, r0
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d302      	bcc.n	8004b1e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d122      	bne.n	8004b64 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	4013      	ands	r3, r2
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	425a      	negs	r2, r3
 8004b2e:	4153      	adcs	r3, r2
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	001a      	movs	r2, r3
 8004b34:	1dfb      	adds	r3, r7, #7
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d113      	bne.n	8004b64 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b40:	2220      	movs	r2, #32
 8004b42:	431a      	orrs	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2241      	movs	r2, #65	@ 0x41
 8004b4c:	2120      	movs	r1, #32
 8004b4e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2242      	movs	r2, #66	@ 0x42
 8004b54:	2100      	movs	r1, #0
 8004b56:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2240      	movs	r2, #64	@ 0x40
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e00f      	b.n	8004b84 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	425a      	negs	r2, r3
 8004b74:	4153      	adcs	r3, r2
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	001a      	movs	r2, r3
 8004b7a:	1dfb      	adds	r3, r7, #7
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d0bf      	beq.n	8004b02 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	0018      	movs	r0, r3
 8004b86:	46bd      	mov	sp, r7
 8004b88:	b004      	add	sp, #16
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b98:	e032      	b.n	8004c00 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	68b9      	ldr	r1, [r7, #8]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	f000 f87d 	bl	8004ca0 <I2C_IsErrorOccurred>
 8004ba6:	1e03      	subs	r3, r0, #0
 8004ba8:	d001      	beq.n	8004bae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e030      	b.n	8004c10 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	d025      	beq.n	8004c00 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bb4:	f7ff f93e 	bl	8003e34 <HAL_GetTick>
 8004bb8:	0002      	movs	r2, r0
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d302      	bcc.n	8004bca <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d11a      	bne.n	8004c00 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	2202      	movs	r2, #2
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d013      	beq.n	8004c00 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bdc:	2220      	movs	r2, #32
 8004bde:	431a      	orrs	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2241      	movs	r2, #65	@ 0x41
 8004be8:	2120      	movs	r1, #32
 8004bea:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2242      	movs	r2, #66	@ 0x42
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2240      	movs	r2, #64	@ 0x40
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e007      	b.n	8004c10 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	2202      	movs	r2, #2
 8004c08:	4013      	ands	r3, r2
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d1c5      	bne.n	8004b9a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	0018      	movs	r0, r3
 8004c12:	46bd      	mov	sp, r7
 8004c14:	b004      	add	sp, #16
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c24:	e02f      	b.n	8004c86 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	68b9      	ldr	r1, [r7, #8]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	f000 f837 	bl	8004ca0 <I2C_IsErrorOccurred>
 8004c32:	1e03      	subs	r3, r0, #0
 8004c34:	d001      	beq.n	8004c3a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e02d      	b.n	8004c96 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c3a:	f7ff f8fb 	bl	8003e34 <HAL_GetTick>
 8004c3e:	0002      	movs	r2, r0
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d302      	bcc.n	8004c50 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d11a      	bne.n	8004c86 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	2220      	movs	r2, #32
 8004c58:	4013      	ands	r3, r2
 8004c5a:	2b20      	cmp	r3, #32
 8004c5c:	d013      	beq.n	8004c86 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c62:	2220      	movs	r2, #32
 8004c64:	431a      	orrs	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2241      	movs	r2, #65	@ 0x41
 8004c6e:	2120      	movs	r1, #32
 8004c70:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2242      	movs	r2, #66	@ 0x42
 8004c76:	2100      	movs	r1, #0
 8004c78:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2240      	movs	r2, #64	@ 0x40
 8004c7e:	2100      	movs	r1, #0
 8004c80:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e007      	b.n	8004c96 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	4013      	ands	r3, r2
 8004c90:	2b20      	cmp	r3, #32
 8004c92:	d1c8      	bne.n	8004c26 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	0018      	movs	r0, r3
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	b004      	add	sp, #16
 8004c9c:	bd80      	pop	{r7, pc}
	...

08004ca0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08a      	sub	sp, #40	@ 0x28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cac:	2327      	movs	r3, #39	@ 0x27
 8004cae:	18fb      	adds	r3, r7, r3
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	2210      	movs	r2, #16
 8004cc8:	4013      	ands	r3, r2
 8004cca:	d100      	bne.n	8004cce <I2C_IsErrorOccurred+0x2e>
 8004ccc:	e079      	b.n	8004dc2 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2210      	movs	r2, #16
 8004cd4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004cd6:	e057      	b.n	8004d88 <I2C_IsErrorOccurred+0xe8>
 8004cd8:	2227      	movs	r2, #39	@ 0x27
 8004cda:	18bb      	adds	r3, r7, r2
 8004cdc:	18ba      	adds	r2, r7, r2
 8004cde:	7812      	ldrb	r2, [r2, #0]
 8004ce0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	d04f      	beq.n	8004d88 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ce8:	f7ff f8a4 	bl	8003e34 <HAL_GetTick>
 8004cec:	0002      	movs	r2, r0
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d302      	bcc.n	8004cfe <I2C_IsErrorOccurred+0x5e>
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d144      	bne.n	8004d88 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	2380      	movs	r3, #128	@ 0x80
 8004d06:	01db      	lsls	r3, r3, #7
 8004d08:	4013      	ands	r3, r2
 8004d0a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004d0c:	2013      	movs	r0, #19
 8004d0e:	183b      	adds	r3, r7, r0
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	2142      	movs	r1, #66	@ 0x42
 8004d14:	5c52      	ldrb	r2, [r2, r1]
 8004d16:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	699a      	ldr	r2, [r3, #24]
 8004d1e:	2380      	movs	r3, #128	@ 0x80
 8004d20:	021b      	lsls	r3, r3, #8
 8004d22:	401a      	ands	r2, r3
 8004d24:	2380      	movs	r3, #128	@ 0x80
 8004d26:	021b      	lsls	r3, r3, #8
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d126      	bne.n	8004d7a <I2C_IsErrorOccurred+0xda>
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	2380      	movs	r3, #128	@ 0x80
 8004d30:	01db      	lsls	r3, r3, #7
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d021      	beq.n	8004d7a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8004d36:	183b      	adds	r3, r7, r0
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	2b20      	cmp	r3, #32
 8004d3c:	d01d      	beq.n	8004d7a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2180      	movs	r1, #128	@ 0x80
 8004d4a:	01c9      	lsls	r1, r1, #7
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004d50:	f7ff f870 	bl	8003e34 <HAL_GetTick>
 8004d54:	0003      	movs	r3, r0
 8004d56:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d58:	e00f      	b.n	8004d7a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004d5a:	f7ff f86b 	bl	8003e34 <HAL_GetTick>
 8004d5e:	0002      	movs	r2, r0
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b19      	cmp	r3, #25
 8004d66:	d908      	bls.n	8004d7a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004d70:	2327      	movs	r3, #39	@ 0x27
 8004d72:	18fb      	adds	r3, r7, r3
 8004d74:	2201      	movs	r2, #1
 8004d76:	701a      	strb	r2, [r3, #0]

              break;
 8004d78:	e006      	b.n	8004d88 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	2220      	movs	r2, #32
 8004d82:	4013      	ands	r3, r2
 8004d84:	2b20      	cmp	r3, #32
 8004d86:	d1e8      	bne.n	8004d5a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	4013      	ands	r3, r2
 8004d92:	2b20      	cmp	r3, #32
 8004d94:	d004      	beq.n	8004da0 <I2C_IsErrorOccurred+0x100>
 8004d96:	2327      	movs	r3, #39	@ 0x27
 8004d98:	18fb      	adds	r3, r7, r3
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d09b      	beq.n	8004cd8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004da0:	2327      	movs	r3, #39	@ 0x27
 8004da2:	18fb      	adds	r3, r7, r3
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d103      	bne.n	8004db2 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2220      	movs	r2, #32
 8004db0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004db2:	6a3b      	ldr	r3, [r7, #32]
 8004db4:	2204      	movs	r2, #4
 8004db6:	4313      	orrs	r3, r2
 8004db8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004dba:	2327      	movs	r3, #39	@ 0x27
 8004dbc:	18fb      	adds	r3, r7, r3
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004dca:	69ba      	ldr	r2, [r7, #24]
 8004dcc:	2380      	movs	r3, #128	@ 0x80
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	d00c      	beq.n	8004dee <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2280      	movs	r2, #128	@ 0x80
 8004de2:	0052      	lsls	r2, r2, #1
 8004de4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004de6:	2327      	movs	r3, #39	@ 0x27
 8004de8:	18fb      	adds	r3, r7, r3
 8004dea:	2201      	movs	r2, #1
 8004dec:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	2380      	movs	r3, #128	@ 0x80
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	4013      	ands	r3, r2
 8004df6:	d00c      	beq.n	8004e12 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	2208      	movs	r2, #8
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2280      	movs	r2, #128	@ 0x80
 8004e06:	00d2      	lsls	r2, r2, #3
 8004e08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e0a:	2327      	movs	r3, #39	@ 0x27
 8004e0c:	18fb      	adds	r3, r7, r3
 8004e0e:	2201      	movs	r2, #1
 8004e10:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004e12:	69ba      	ldr	r2, [r7, #24]
 8004e14:	2380      	movs	r3, #128	@ 0x80
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4013      	ands	r3, r2
 8004e1a:	d00c      	beq.n	8004e36 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	4313      	orrs	r3, r2
 8004e22:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2280      	movs	r2, #128	@ 0x80
 8004e2a:	0092      	lsls	r2, r2, #2
 8004e2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e2e:	2327      	movs	r3, #39	@ 0x27
 8004e30:	18fb      	adds	r3, r7, r3
 8004e32:	2201      	movs	r2, #1
 8004e34:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004e36:	2327      	movs	r3, #39	@ 0x27
 8004e38:	18fb      	adds	r3, r7, r3
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d01d      	beq.n	8004e7c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	0018      	movs	r0, r3
 8004e44:	f7ff fe32 	bl	8004aac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	490e      	ldr	r1, [pc, #56]	@ (8004e8c <I2C_IsErrorOccurred+0x1ec>)
 8004e54:	400a      	ands	r2, r1
 8004e56:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e5c:	6a3b      	ldr	r3, [r7, #32]
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2241      	movs	r2, #65	@ 0x41
 8004e68:	2120      	movs	r1, #32
 8004e6a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2242      	movs	r2, #66	@ 0x42
 8004e70:	2100      	movs	r1, #0
 8004e72:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2240      	movs	r2, #64	@ 0x40
 8004e78:	2100      	movs	r1, #0
 8004e7a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004e7c:	2327      	movs	r3, #39	@ 0x27
 8004e7e:	18fb      	adds	r3, r7, r3
 8004e80:	781b      	ldrb	r3, [r3, #0]
}
 8004e82:	0018      	movs	r0, r3
 8004e84:	46bd      	mov	sp, r7
 8004e86:	b00a      	add	sp, #40	@ 0x28
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	46c0      	nop			@ (mov r8, r8)
 8004e8c:	fe00e800 	.word	0xfe00e800

08004e90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004e90:	b590      	push	{r4, r7, lr}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	0008      	movs	r0, r1
 8004e9a:	0011      	movs	r1, r2
 8004e9c:	607b      	str	r3, [r7, #4]
 8004e9e:	240a      	movs	r4, #10
 8004ea0:	193b      	adds	r3, r7, r4
 8004ea2:	1c02      	adds	r2, r0, #0
 8004ea4:	801a      	strh	r2, [r3, #0]
 8004ea6:	2009      	movs	r0, #9
 8004ea8:	183b      	adds	r3, r7, r0
 8004eaa:	1c0a      	adds	r2, r1, #0
 8004eac:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004eae:	193b      	adds	r3, r7, r4
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	059b      	lsls	r3, r3, #22
 8004eb4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004eb6:	183b      	adds	r3, r7, r0
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	0419      	lsls	r1, r3, #16
 8004ebc:	23ff      	movs	r3, #255	@ 0xff
 8004ebe:	041b      	lsls	r3, r3, #16
 8004ec0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ec2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	005b      	lsls	r3, r3, #1
 8004ece:	085b      	lsrs	r3, r3, #1
 8004ed0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004eda:	0d51      	lsrs	r1, r2, #21
 8004edc:	2280      	movs	r2, #128	@ 0x80
 8004ede:	00d2      	lsls	r2, r2, #3
 8004ee0:	400a      	ands	r2, r1
 8004ee2:	4907      	ldr	r1, [pc, #28]	@ (8004f00 <I2C_TransferConfig+0x70>)
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	43d2      	mvns	r2, r2
 8004ee8:	401a      	ands	r2, r3
 8004eea:	0011      	movs	r1, r2
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004ef6:	46c0      	nop			@ (mov r8, r8)
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	b007      	add	sp, #28
 8004efc:	bd90      	pop	{r4, r7, pc}
 8004efe:	46c0      	nop			@ (mov r8, r8)
 8004f00:	03ff63ff 	.word	0x03ff63ff

08004f04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2241      	movs	r2, #65	@ 0x41
 8004f12:	5c9b      	ldrb	r3, [r3, r2]
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b20      	cmp	r3, #32
 8004f18:	d138      	bne.n	8004f8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2240      	movs	r2, #64	@ 0x40
 8004f1e:	5c9b      	ldrb	r3, [r3, r2]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d101      	bne.n	8004f28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004f24:	2302      	movs	r3, #2
 8004f26:	e032      	b.n	8004f8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2240      	movs	r2, #64	@ 0x40
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2241      	movs	r2, #65	@ 0x41
 8004f34:	2124      	movs	r1, #36	@ 0x24
 8004f36:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2101      	movs	r1, #1
 8004f44:	438a      	bics	r2, r1
 8004f46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4911      	ldr	r1, [pc, #68]	@ (8004f98 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004f54:	400a      	ands	r2, r1
 8004f56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6819      	ldr	r1, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	430a      	orrs	r2, r1
 8004f66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2101      	movs	r1, #1
 8004f74:	430a      	orrs	r2, r1
 8004f76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2241      	movs	r2, #65	@ 0x41
 8004f7c:	2120      	movs	r1, #32
 8004f7e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2240      	movs	r2, #64	@ 0x40
 8004f84:	2100      	movs	r1, #0
 8004f86:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	e000      	b.n	8004f8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f8c:	2302      	movs	r3, #2
  }
}
 8004f8e:	0018      	movs	r0, r3
 8004f90:	46bd      	mov	sp, r7
 8004f92:	b002      	add	sp, #8
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	46c0      	nop			@ (mov r8, r8)
 8004f98:	ffffefff 	.word	0xffffefff

08004f9c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2241      	movs	r2, #65	@ 0x41
 8004faa:	5c9b      	ldrb	r3, [r3, r2]
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b20      	cmp	r3, #32
 8004fb0:	d139      	bne.n	8005026 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2240      	movs	r2, #64	@ 0x40
 8004fb6:	5c9b      	ldrb	r3, [r3, r2]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d101      	bne.n	8004fc0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	e033      	b.n	8005028 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2240      	movs	r2, #64	@ 0x40
 8004fc4:	2101      	movs	r1, #1
 8004fc6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2241      	movs	r2, #65	@ 0x41
 8004fcc:	2124      	movs	r1, #36	@ 0x24
 8004fce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2101      	movs	r1, #1
 8004fdc:	438a      	bics	r2, r1
 8004fde:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	4a11      	ldr	r2, [pc, #68]	@ (8005030 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004fec:	4013      	ands	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	021b      	lsls	r3, r3, #8
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2101      	movs	r1, #1
 800500e:	430a      	orrs	r2, r1
 8005010:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2241      	movs	r2, #65	@ 0x41
 8005016:	2120      	movs	r1, #32
 8005018:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2240      	movs	r2, #64	@ 0x40
 800501e:	2100      	movs	r1, #0
 8005020:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005022:	2300      	movs	r3, #0
 8005024:	e000      	b.n	8005028 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005026:	2302      	movs	r3, #2
  }
}
 8005028:	0018      	movs	r0, r3
 800502a:	46bd      	mov	sp, r7
 800502c:	b004      	add	sp, #16
 800502e:	bd80      	pop	{r7, pc}
 8005030:	fffff0ff 	.word	0xfffff0ff

08005034 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005034:	b5b0      	push	{r4, r5, r7, lr}
 8005036:	b08a      	sub	sp, #40	@ 0x28
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d102      	bne.n	8005048 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	f000 fbbf 	bl	80057c6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005048:	4bc9      	ldr	r3, [pc, #804]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	220c      	movs	r2, #12
 800504e:	4013      	ands	r3, r2
 8005050:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005052:	4bc7      	ldr	r3, [pc, #796]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 8005054:	68da      	ldr	r2, [r3, #12]
 8005056:	2380      	movs	r3, #128	@ 0x80
 8005058:	025b      	lsls	r3, r3, #9
 800505a:	4013      	ands	r3, r2
 800505c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2201      	movs	r2, #1
 8005064:	4013      	ands	r3, r2
 8005066:	d100      	bne.n	800506a <HAL_RCC_OscConfig+0x36>
 8005068:	e07e      	b.n	8005168 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	2b08      	cmp	r3, #8
 800506e:	d007      	beq.n	8005080 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	2b0c      	cmp	r3, #12
 8005074:	d112      	bne.n	800509c <HAL_RCC_OscConfig+0x68>
 8005076:	69ba      	ldr	r2, [r7, #24]
 8005078:	2380      	movs	r3, #128	@ 0x80
 800507a:	025b      	lsls	r3, r3, #9
 800507c:	429a      	cmp	r2, r3
 800507e:	d10d      	bne.n	800509c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005080:	4bbb      	ldr	r3, [pc, #748]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	2380      	movs	r3, #128	@ 0x80
 8005086:	029b      	lsls	r3, r3, #10
 8005088:	4013      	ands	r3, r2
 800508a:	d100      	bne.n	800508e <HAL_RCC_OscConfig+0x5a>
 800508c:	e06b      	b.n	8005166 <HAL_RCC_OscConfig+0x132>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d167      	bne.n	8005166 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	f000 fb95 	bl	80057c6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	2380      	movs	r3, #128	@ 0x80
 80050a2:	025b      	lsls	r3, r3, #9
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d107      	bne.n	80050b8 <HAL_RCC_OscConfig+0x84>
 80050a8:	4bb1      	ldr	r3, [pc, #708]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	4bb0      	ldr	r3, [pc, #704]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 80050ae:	2180      	movs	r1, #128	@ 0x80
 80050b0:	0249      	lsls	r1, r1, #9
 80050b2:	430a      	orrs	r2, r1
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	e027      	b.n	8005108 <HAL_RCC_OscConfig+0xd4>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	23a0      	movs	r3, #160	@ 0xa0
 80050be:	02db      	lsls	r3, r3, #11
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d10e      	bne.n	80050e2 <HAL_RCC_OscConfig+0xae>
 80050c4:	4baa      	ldr	r3, [pc, #680]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	4ba9      	ldr	r3, [pc, #676]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 80050ca:	2180      	movs	r1, #128	@ 0x80
 80050cc:	02c9      	lsls	r1, r1, #11
 80050ce:	430a      	orrs	r2, r1
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	4ba7      	ldr	r3, [pc, #668]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	4ba6      	ldr	r3, [pc, #664]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 80050d8:	2180      	movs	r1, #128	@ 0x80
 80050da:	0249      	lsls	r1, r1, #9
 80050dc:	430a      	orrs	r2, r1
 80050de:	601a      	str	r2, [r3, #0]
 80050e0:	e012      	b.n	8005108 <HAL_RCC_OscConfig+0xd4>
 80050e2:	4ba3      	ldr	r3, [pc, #652]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	4ba2      	ldr	r3, [pc, #648]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 80050e8:	49a2      	ldr	r1, [pc, #648]	@ (8005374 <HAL_RCC_OscConfig+0x340>)
 80050ea:	400a      	ands	r2, r1
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	4ba0      	ldr	r3, [pc, #640]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	2380      	movs	r3, #128	@ 0x80
 80050f4:	025b      	lsls	r3, r3, #9
 80050f6:	4013      	ands	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	4b9c      	ldr	r3, [pc, #624]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	4b9b      	ldr	r3, [pc, #620]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 8005102:	499d      	ldr	r1, [pc, #628]	@ (8005378 <HAL_RCC_OscConfig+0x344>)
 8005104:	400a      	ands	r2, r1
 8005106:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d015      	beq.n	800513c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005110:	f7fe fe90 	bl	8003e34 <HAL_GetTick>
 8005114:	0003      	movs	r3, r0
 8005116:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005118:	e009      	b.n	800512e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800511a:	f7fe fe8b 	bl	8003e34 <HAL_GetTick>
 800511e:	0002      	movs	r2, r0
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b64      	cmp	r3, #100	@ 0x64
 8005126:	d902      	bls.n	800512e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	f000 fb4c 	bl	80057c6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800512e:	4b90      	ldr	r3, [pc, #576]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	2380      	movs	r3, #128	@ 0x80
 8005134:	029b      	lsls	r3, r3, #10
 8005136:	4013      	ands	r3, r2
 8005138:	d0ef      	beq.n	800511a <HAL_RCC_OscConfig+0xe6>
 800513a:	e015      	b.n	8005168 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800513c:	f7fe fe7a 	bl	8003e34 <HAL_GetTick>
 8005140:	0003      	movs	r3, r0
 8005142:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005144:	e008      	b.n	8005158 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005146:	f7fe fe75 	bl	8003e34 <HAL_GetTick>
 800514a:	0002      	movs	r2, r0
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b64      	cmp	r3, #100	@ 0x64
 8005152:	d901      	bls.n	8005158 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e336      	b.n	80057c6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005158:	4b85      	ldr	r3, [pc, #532]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	2380      	movs	r3, #128	@ 0x80
 800515e:	029b      	lsls	r3, r3, #10
 8005160:	4013      	ands	r3, r2
 8005162:	d1f0      	bne.n	8005146 <HAL_RCC_OscConfig+0x112>
 8005164:	e000      	b.n	8005168 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005166:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2202      	movs	r2, #2
 800516e:	4013      	ands	r3, r2
 8005170:	d100      	bne.n	8005174 <HAL_RCC_OscConfig+0x140>
 8005172:	e099      	b.n	80052a8 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800517a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517c:	2220      	movs	r2, #32
 800517e:	4013      	ands	r3, r2
 8005180:	d009      	beq.n	8005196 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005182:	4b7b      	ldr	r3, [pc, #492]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	4b7a      	ldr	r3, [pc, #488]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 8005188:	2120      	movs	r1, #32
 800518a:	430a      	orrs	r2, r1
 800518c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800518e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005190:	2220      	movs	r2, #32
 8005192:	4393      	bics	r3, r2
 8005194:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	2b04      	cmp	r3, #4
 800519a:	d005      	beq.n	80051a8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	2b0c      	cmp	r3, #12
 80051a0:	d13e      	bne.n	8005220 <HAL_RCC_OscConfig+0x1ec>
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d13b      	bne.n	8005220 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80051a8:	4b71      	ldr	r3, [pc, #452]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2204      	movs	r2, #4
 80051ae:	4013      	ands	r3, r2
 80051b0:	d004      	beq.n	80051bc <HAL_RCC_OscConfig+0x188>
 80051b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d101      	bne.n	80051bc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e304      	b.n	80057c6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051bc:	4b6c      	ldr	r3, [pc, #432]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	4a6e      	ldr	r2, [pc, #440]	@ (800537c <HAL_RCC_OscConfig+0x348>)
 80051c2:	4013      	ands	r3, r2
 80051c4:	0019      	movs	r1, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	021a      	lsls	r2, r3, #8
 80051cc:	4b68      	ldr	r3, [pc, #416]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 80051ce:	430a      	orrs	r2, r1
 80051d0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80051d2:	4b67      	ldr	r3, [pc, #412]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2209      	movs	r2, #9
 80051d8:	4393      	bics	r3, r2
 80051da:	0019      	movs	r1, r3
 80051dc:	4b64      	ldr	r3, [pc, #400]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 80051de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051e0:	430a      	orrs	r2, r1
 80051e2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051e4:	f000 fc42 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 80051e8:	0001      	movs	r1, r0
 80051ea:	4b61      	ldr	r3, [pc, #388]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	091b      	lsrs	r3, r3, #4
 80051f0:	220f      	movs	r2, #15
 80051f2:	4013      	ands	r3, r2
 80051f4:	4a62      	ldr	r2, [pc, #392]	@ (8005380 <HAL_RCC_OscConfig+0x34c>)
 80051f6:	5cd3      	ldrb	r3, [r2, r3]
 80051f8:	000a      	movs	r2, r1
 80051fa:	40da      	lsrs	r2, r3
 80051fc:	4b61      	ldr	r3, [pc, #388]	@ (8005384 <HAL_RCC_OscConfig+0x350>)
 80051fe:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005200:	4b61      	ldr	r3, [pc, #388]	@ (8005388 <HAL_RCC_OscConfig+0x354>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2513      	movs	r5, #19
 8005206:	197c      	adds	r4, r7, r5
 8005208:	0018      	movs	r0, r3
 800520a:	f7fe fdcd 	bl	8003da8 <HAL_InitTick>
 800520e:	0003      	movs	r3, r0
 8005210:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005212:	197b      	adds	r3, r7, r5
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d046      	beq.n	80052a8 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800521a:	197b      	adds	r3, r7, r5
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	e2d2      	b.n	80057c6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005222:	2b00      	cmp	r3, #0
 8005224:	d027      	beq.n	8005276 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005226:	4b52      	ldr	r3, [pc, #328]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2209      	movs	r2, #9
 800522c:	4393      	bics	r3, r2
 800522e:	0019      	movs	r1, r3
 8005230:	4b4f      	ldr	r3, [pc, #316]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 8005232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005234:	430a      	orrs	r2, r1
 8005236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005238:	f7fe fdfc 	bl	8003e34 <HAL_GetTick>
 800523c:	0003      	movs	r3, r0
 800523e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005240:	e008      	b.n	8005254 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005242:	f7fe fdf7 	bl	8003e34 <HAL_GetTick>
 8005246:	0002      	movs	r2, r0
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d901      	bls.n	8005254 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e2b8      	b.n	80057c6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005254:	4b46      	ldr	r3, [pc, #280]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2204      	movs	r2, #4
 800525a:	4013      	ands	r3, r2
 800525c:	d0f1      	beq.n	8005242 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800525e:	4b44      	ldr	r3, [pc, #272]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	4a46      	ldr	r2, [pc, #280]	@ (800537c <HAL_RCC_OscConfig+0x348>)
 8005264:	4013      	ands	r3, r2
 8005266:	0019      	movs	r1, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	021a      	lsls	r2, r3, #8
 800526e:	4b40      	ldr	r3, [pc, #256]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 8005270:	430a      	orrs	r2, r1
 8005272:	605a      	str	r2, [r3, #4]
 8005274:	e018      	b.n	80052a8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005276:	4b3e      	ldr	r3, [pc, #248]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	4b3d      	ldr	r3, [pc, #244]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 800527c:	2101      	movs	r1, #1
 800527e:	438a      	bics	r2, r1
 8005280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005282:	f7fe fdd7 	bl	8003e34 <HAL_GetTick>
 8005286:	0003      	movs	r3, r0
 8005288:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800528c:	f7fe fdd2 	bl	8003e34 <HAL_GetTick>
 8005290:	0002      	movs	r2, r0
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e293      	b.n	80057c6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800529e:	4b34      	ldr	r3, [pc, #208]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2204      	movs	r2, #4
 80052a4:	4013      	ands	r3, r2
 80052a6:	d1f1      	bne.n	800528c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2210      	movs	r2, #16
 80052ae:	4013      	ands	r3, r2
 80052b0:	d100      	bne.n	80052b4 <HAL_RCC_OscConfig+0x280>
 80052b2:	e0a2      	b.n	80053fa <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d140      	bne.n	800533c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80052ba:	4b2d      	ldr	r3, [pc, #180]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	2380      	movs	r3, #128	@ 0x80
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4013      	ands	r3, r2
 80052c4:	d005      	beq.n	80052d2 <HAL_RCC_OscConfig+0x29e>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e279      	b.n	80057c6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052d2:	4b27      	ldr	r3, [pc, #156]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	4a2d      	ldr	r2, [pc, #180]	@ (800538c <HAL_RCC_OscConfig+0x358>)
 80052d8:	4013      	ands	r3, r2
 80052da:	0019      	movs	r1, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052e0:	4b23      	ldr	r3, [pc, #140]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 80052e2:	430a      	orrs	r2, r1
 80052e4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052e6:	4b22      	ldr	r3, [pc, #136]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	021b      	lsls	r3, r3, #8
 80052ec:	0a19      	lsrs	r1, r3, #8
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	061a      	lsls	r2, r3, #24
 80052f4:	4b1e      	ldr	r3, [pc, #120]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 80052f6:	430a      	orrs	r2, r1
 80052f8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fe:	0b5b      	lsrs	r3, r3, #13
 8005300:	3301      	adds	r3, #1
 8005302:	2280      	movs	r2, #128	@ 0x80
 8005304:	0212      	lsls	r2, r2, #8
 8005306:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005308:	4b19      	ldr	r3, [pc, #100]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	091b      	lsrs	r3, r3, #4
 800530e:	210f      	movs	r1, #15
 8005310:	400b      	ands	r3, r1
 8005312:	491b      	ldr	r1, [pc, #108]	@ (8005380 <HAL_RCC_OscConfig+0x34c>)
 8005314:	5ccb      	ldrb	r3, [r1, r3]
 8005316:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005318:	4b1a      	ldr	r3, [pc, #104]	@ (8005384 <HAL_RCC_OscConfig+0x350>)
 800531a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800531c:	4b1a      	ldr	r3, [pc, #104]	@ (8005388 <HAL_RCC_OscConfig+0x354>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2513      	movs	r5, #19
 8005322:	197c      	adds	r4, r7, r5
 8005324:	0018      	movs	r0, r3
 8005326:	f7fe fd3f 	bl	8003da8 <HAL_InitTick>
 800532a:	0003      	movs	r3, r0
 800532c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800532e:	197b      	adds	r3, r7, r5
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d061      	beq.n	80053fa <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8005336:	197b      	adds	r3, r7, r5
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	e244      	b.n	80057c6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	69db      	ldr	r3, [r3, #28]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d040      	beq.n	80053c6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005344:	4b0a      	ldr	r3, [pc, #40]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	4b09      	ldr	r3, [pc, #36]	@ (8005370 <HAL_RCC_OscConfig+0x33c>)
 800534a:	2180      	movs	r1, #128	@ 0x80
 800534c:	0049      	lsls	r1, r1, #1
 800534e:	430a      	orrs	r2, r1
 8005350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005352:	f7fe fd6f 	bl	8003e34 <HAL_GetTick>
 8005356:	0003      	movs	r3, r0
 8005358:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800535a:	e019      	b.n	8005390 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800535c:	f7fe fd6a 	bl	8003e34 <HAL_GetTick>
 8005360:	0002      	movs	r2, r0
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b02      	cmp	r3, #2
 8005368:	d912      	bls.n	8005390 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e22b      	b.n	80057c6 <HAL_RCC_OscConfig+0x792>
 800536e:	46c0      	nop			@ (mov r8, r8)
 8005370:	40021000 	.word	0x40021000
 8005374:	fffeffff 	.word	0xfffeffff
 8005378:	fffbffff 	.word	0xfffbffff
 800537c:	ffffe0ff 	.word	0xffffe0ff
 8005380:	08009a6c 	.word	0x08009a6c
 8005384:	20000000 	.word	0x20000000
 8005388:	20000004 	.word	0x20000004
 800538c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005390:	4bca      	ldr	r3, [pc, #808]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	2380      	movs	r3, #128	@ 0x80
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4013      	ands	r3, r2
 800539a:	d0df      	beq.n	800535c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800539c:	4bc7      	ldr	r3, [pc, #796]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	4ac7      	ldr	r2, [pc, #796]	@ (80056c0 <HAL_RCC_OscConfig+0x68c>)
 80053a2:	4013      	ands	r3, r2
 80053a4:	0019      	movs	r1, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053aa:	4bc4      	ldr	r3, [pc, #784]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 80053ac:	430a      	orrs	r2, r1
 80053ae:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053b0:	4bc2      	ldr	r3, [pc, #776]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	021b      	lsls	r3, r3, #8
 80053b6:	0a19      	lsrs	r1, r3, #8
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	061a      	lsls	r2, r3, #24
 80053be:	4bbf      	ldr	r3, [pc, #764]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 80053c0:	430a      	orrs	r2, r1
 80053c2:	605a      	str	r2, [r3, #4]
 80053c4:	e019      	b.n	80053fa <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80053c6:	4bbd      	ldr	r3, [pc, #756]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	4bbc      	ldr	r3, [pc, #752]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 80053cc:	49bd      	ldr	r1, [pc, #756]	@ (80056c4 <HAL_RCC_OscConfig+0x690>)
 80053ce:	400a      	ands	r2, r1
 80053d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d2:	f7fe fd2f 	bl	8003e34 <HAL_GetTick>
 80053d6:	0003      	movs	r3, r0
 80053d8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80053da:	e008      	b.n	80053ee <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053dc:	f7fe fd2a 	bl	8003e34 <HAL_GetTick>
 80053e0:	0002      	movs	r2, r0
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e1eb      	b.n	80057c6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80053ee:	4bb3      	ldr	r3, [pc, #716]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	2380      	movs	r3, #128	@ 0x80
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4013      	ands	r3, r2
 80053f8:	d1f0      	bne.n	80053dc <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2208      	movs	r2, #8
 8005400:	4013      	ands	r3, r2
 8005402:	d036      	beq.n	8005472 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d019      	beq.n	8005440 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800540c:	4bab      	ldr	r3, [pc, #684]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 800540e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005410:	4baa      	ldr	r3, [pc, #680]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 8005412:	2101      	movs	r1, #1
 8005414:	430a      	orrs	r2, r1
 8005416:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005418:	f7fe fd0c 	bl	8003e34 <HAL_GetTick>
 800541c:	0003      	movs	r3, r0
 800541e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005420:	e008      	b.n	8005434 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005422:	f7fe fd07 	bl	8003e34 <HAL_GetTick>
 8005426:	0002      	movs	r2, r0
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	2b02      	cmp	r3, #2
 800542e:	d901      	bls.n	8005434 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e1c8      	b.n	80057c6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005434:	4ba1      	ldr	r3, [pc, #644]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 8005436:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005438:	2202      	movs	r2, #2
 800543a:	4013      	ands	r3, r2
 800543c:	d0f1      	beq.n	8005422 <HAL_RCC_OscConfig+0x3ee>
 800543e:	e018      	b.n	8005472 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005440:	4b9e      	ldr	r3, [pc, #632]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 8005442:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005444:	4b9d      	ldr	r3, [pc, #628]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 8005446:	2101      	movs	r1, #1
 8005448:	438a      	bics	r2, r1
 800544a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800544c:	f7fe fcf2 	bl	8003e34 <HAL_GetTick>
 8005450:	0003      	movs	r3, r0
 8005452:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005454:	e008      	b.n	8005468 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005456:	f7fe fced 	bl	8003e34 <HAL_GetTick>
 800545a:	0002      	movs	r2, r0
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	2b02      	cmp	r3, #2
 8005462:	d901      	bls.n	8005468 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e1ae      	b.n	80057c6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005468:	4b94      	ldr	r3, [pc, #592]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 800546a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800546c:	2202      	movs	r2, #2
 800546e:	4013      	ands	r3, r2
 8005470:	d1f1      	bne.n	8005456 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2204      	movs	r2, #4
 8005478:	4013      	ands	r3, r2
 800547a:	d100      	bne.n	800547e <HAL_RCC_OscConfig+0x44a>
 800547c:	e0ae      	b.n	80055dc <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800547e:	2023      	movs	r0, #35	@ 0x23
 8005480:	183b      	adds	r3, r7, r0
 8005482:	2200      	movs	r2, #0
 8005484:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005486:	4b8d      	ldr	r3, [pc, #564]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 8005488:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800548a:	2380      	movs	r3, #128	@ 0x80
 800548c:	055b      	lsls	r3, r3, #21
 800548e:	4013      	ands	r3, r2
 8005490:	d109      	bne.n	80054a6 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005492:	4b8a      	ldr	r3, [pc, #552]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 8005494:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005496:	4b89      	ldr	r3, [pc, #548]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 8005498:	2180      	movs	r1, #128	@ 0x80
 800549a:	0549      	lsls	r1, r1, #21
 800549c:	430a      	orrs	r2, r1
 800549e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80054a0:	183b      	adds	r3, r7, r0
 80054a2:	2201      	movs	r2, #1
 80054a4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054a6:	4b88      	ldr	r3, [pc, #544]	@ (80056c8 <HAL_RCC_OscConfig+0x694>)
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	2380      	movs	r3, #128	@ 0x80
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	4013      	ands	r3, r2
 80054b0:	d11a      	bne.n	80054e8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054b2:	4b85      	ldr	r3, [pc, #532]	@ (80056c8 <HAL_RCC_OscConfig+0x694>)
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	4b84      	ldr	r3, [pc, #528]	@ (80056c8 <HAL_RCC_OscConfig+0x694>)
 80054b8:	2180      	movs	r1, #128	@ 0x80
 80054ba:	0049      	lsls	r1, r1, #1
 80054bc:	430a      	orrs	r2, r1
 80054be:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054c0:	f7fe fcb8 	bl	8003e34 <HAL_GetTick>
 80054c4:	0003      	movs	r3, r0
 80054c6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054c8:	e008      	b.n	80054dc <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ca:	f7fe fcb3 	bl	8003e34 <HAL_GetTick>
 80054ce:	0002      	movs	r2, r0
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b64      	cmp	r3, #100	@ 0x64
 80054d6:	d901      	bls.n	80054dc <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e174      	b.n	80057c6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054dc:	4b7a      	ldr	r3, [pc, #488]	@ (80056c8 <HAL_RCC_OscConfig+0x694>)
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	2380      	movs	r3, #128	@ 0x80
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	4013      	ands	r3, r2
 80054e6:	d0f0      	beq.n	80054ca <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689a      	ldr	r2, [r3, #8]
 80054ec:	2380      	movs	r3, #128	@ 0x80
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d107      	bne.n	8005504 <HAL_RCC_OscConfig+0x4d0>
 80054f4:	4b71      	ldr	r3, [pc, #452]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 80054f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80054f8:	4b70      	ldr	r3, [pc, #448]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 80054fa:	2180      	movs	r1, #128	@ 0x80
 80054fc:	0049      	lsls	r1, r1, #1
 80054fe:	430a      	orrs	r2, r1
 8005500:	651a      	str	r2, [r3, #80]	@ 0x50
 8005502:	e031      	b.n	8005568 <HAL_RCC_OscConfig+0x534>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10c      	bne.n	8005526 <HAL_RCC_OscConfig+0x4f2>
 800550c:	4b6b      	ldr	r3, [pc, #428]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 800550e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005510:	4b6a      	ldr	r3, [pc, #424]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 8005512:	496c      	ldr	r1, [pc, #432]	@ (80056c4 <HAL_RCC_OscConfig+0x690>)
 8005514:	400a      	ands	r2, r1
 8005516:	651a      	str	r2, [r3, #80]	@ 0x50
 8005518:	4b68      	ldr	r3, [pc, #416]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 800551a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800551c:	4b67      	ldr	r3, [pc, #412]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 800551e:	496b      	ldr	r1, [pc, #428]	@ (80056cc <HAL_RCC_OscConfig+0x698>)
 8005520:	400a      	ands	r2, r1
 8005522:	651a      	str	r2, [r3, #80]	@ 0x50
 8005524:	e020      	b.n	8005568 <HAL_RCC_OscConfig+0x534>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	689a      	ldr	r2, [r3, #8]
 800552a:	23a0      	movs	r3, #160	@ 0xa0
 800552c:	00db      	lsls	r3, r3, #3
 800552e:	429a      	cmp	r2, r3
 8005530:	d10e      	bne.n	8005550 <HAL_RCC_OscConfig+0x51c>
 8005532:	4b62      	ldr	r3, [pc, #392]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 8005534:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005536:	4b61      	ldr	r3, [pc, #388]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 8005538:	2180      	movs	r1, #128	@ 0x80
 800553a:	00c9      	lsls	r1, r1, #3
 800553c:	430a      	orrs	r2, r1
 800553e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005540:	4b5e      	ldr	r3, [pc, #376]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 8005542:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005544:	4b5d      	ldr	r3, [pc, #372]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 8005546:	2180      	movs	r1, #128	@ 0x80
 8005548:	0049      	lsls	r1, r1, #1
 800554a:	430a      	orrs	r2, r1
 800554c:	651a      	str	r2, [r3, #80]	@ 0x50
 800554e:	e00b      	b.n	8005568 <HAL_RCC_OscConfig+0x534>
 8005550:	4b5a      	ldr	r3, [pc, #360]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 8005552:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005554:	4b59      	ldr	r3, [pc, #356]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 8005556:	495b      	ldr	r1, [pc, #364]	@ (80056c4 <HAL_RCC_OscConfig+0x690>)
 8005558:	400a      	ands	r2, r1
 800555a:	651a      	str	r2, [r3, #80]	@ 0x50
 800555c:	4b57      	ldr	r3, [pc, #348]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 800555e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005560:	4b56      	ldr	r3, [pc, #344]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 8005562:	495a      	ldr	r1, [pc, #360]	@ (80056cc <HAL_RCC_OscConfig+0x698>)
 8005564:	400a      	ands	r2, r1
 8005566:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d015      	beq.n	800559c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005570:	f7fe fc60 	bl	8003e34 <HAL_GetTick>
 8005574:	0003      	movs	r3, r0
 8005576:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005578:	e009      	b.n	800558e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800557a:	f7fe fc5b 	bl	8003e34 <HAL_GetTick>
 800557e:	0002      	movs	r2, r0
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	4a52      	ldr	r2, [pc, #328]	@ (80056d0 <HAL_RCC_OscConfig+0x69c>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e11b      	b.n	80057c6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800558e:	4b4b      	ldr	r3, [pc, #300]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 8005590:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005592:	2380      	movs	r3, #128	@ 0x80
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4013      	ands	r3, r2
 8005598:	d0ef      	beq.n	800557a <HAL_RCC_OscConfig+0x546>
 800559a:	e014      	b.n	80055c6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800559c:	f7fe fc4a 	bl	8003e34 <HAL_GetTick>
 80055a0:	0003      	movs	r3, r0
 80055a2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80055a4:	e009      	b.n	80055ba <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055a6:	f7fe fc45 	bl	8003e34 <HAL_GetTick>
 80055aa:	0002      	movs	r2, r0
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	4a47      	ldr	r2, [pc, #284]	@ (80056d0 <HAL_RCC_OscConfig+0x69c>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e105      	b.n	80057c6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80055ba:	4b40      	ldr	r3, [pc, #256]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 80055bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80055be:	2380      	movs	r3, #128	@ 0x80
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4013      	ands	r3, r2
 80055c4:	d1ef      	bne.n	80055a6 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80055c6:	2323      	movs	r3, #35	@ 0x23
 80055c8:	18fb      	adds	r3, r7, r3
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d105      	bne.n	80055dc <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055d0:	4b3a      	ldr	r3, [pc, #232]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 80055d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055d4:	4b39      	ldr	r3, [pc, #228]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 80055d6:	493f      	ldr	r1, [pc, #252]	@ (80056d4 <HAL_RCC_OscConfig+0x6a0>)
 80055d8:	400a      	ands	r2, r1
 80055da:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2220      	movs	r2, #32
 80055e2:	4013      	ands	r3, r2
 80055e4:	d049      	beq.n	800567a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d026      	beq.n	800563c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80055ee:	4b33      	ldr	r3, [pc, #204]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 80055f0:	689a      	ldr	r2, [r3, #8]
 80055f2:	4b32      	ldr	r3, [pc, #200]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 80055f4:	2101      	movs	r1, #1
 80055f6:	430a      	orrs	r2, r1
 80055f8:	609a      	str	r2, [r3, #8]
 80055fa:	4b30      	ldr	r3, [pc, #192]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 80055fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055fe:	4b2f      	ldr	r3, [pc, #188]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 8005600:	2101      	movs	r1, #1
 8005602:	430a      	orrs	r2, r1
 8005604:	635a      	str	r2, [r3, #52]	@ 0x34
 8005606:	4b34      	ldr	r3, [pc, #208]	@ (80056d8 <HAL_RCC_OscConfig+0x6a4>)
 8005608:	6a1a      	ldr	r2, [r3, #32]
 800560a:	4b33      	ldr	r3, [pc, #204]	@ (80056d8 <HAL_RCC_OscConfig+0x6a4>)
 800560c:	2180      	movs	r1, #128	@ 0x80
 800560e:	0189      	lsls	r1, r1, #6
 8005610:	430a      	orrs	r2, r1
 8005612:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005614:	f7fe fc0e 	bl	8003e34 <HAL_GetTick>
 8005618:	0003      	movs	r3, r0
 800561a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800561c:	e008      	b.n	8005630 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800561e:	f7fe fc09 	bl	8003e34 <HAL_GetTick>
 8005622:	0002      	movs	r2, r0
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	2b02      	cmp	r3, #2
 800562a:	d901      	bls.n	8005630 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e0ca      	b.n	80057c6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005630:	4b22      	ldr	r3, [pc, #136]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	2202      	movs	r2, #2
 8005636:	4013      	ands	r3, r2
 8005638:	d0f1      	beq.n	800561e <HAL_RCC_OscConfig+0x5ea>
 800563a:	e01e      	b.n	800567a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800563c:	4b1f      	ldr	r3, [pc, #124]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	4b1e      	ldr	r3, [pc, #120]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 8005642:	2101      	movs	r1, #1
 8005644:	438a      	bics	r2, r1
 8005646:	609a      	str	r2, [r3, #8]
 8005648:	4b23      	ldr	r3, [pc, #140]	@ (80056d8 <HAL_RCC_OscConfig+0x6a4>)
 800564a:	6a1a      	ldr	r2, [r3, #32]
 800564c:	4b22      	ldr	r3, [pc, #136]	@ (80056d8 <HAL_RCC_OscConfig+0x6a4>)
 800564e:	4923      	ldr	r1, [pc, #140]	@ (80056dc <HAL_RCC_OscConfig+0x6a8>)
 8005650:	400a      	ands	r2, r1
 8005652:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005654:	f7fe fbee 	bl	8003e34 <HAL_GetTick>
 8005658:	0003      	movs	r3, r0
 800565a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800565c:	e008      	b.n	8005670 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800565e:	f7fe fbe9 	bl	8003e34 <HAL_GetTick>
 8005662:	0002      	movs	r2, r0
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	2b02      	cmp	r3, #2
 800566a:	d901      	bls.n	8005670 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e0aa      	b.n	80057c6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005670:	4b12      	ldr	r3, [pc, #72]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	2202      	movs	r2, #2
 8005676:	4013      	ands	r3, r2
 8005678:	d1f1      	bne.n	800565e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800567e:	2b00      	cmp	r3, #0
 8005680:	d100      	bne.n	8005684 <HAL_RCC_OscConfig+0x650>
 8005682:	e09f      	b.n	80057c4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	2b0c      	cmp	r3, #12
 8005688:	d100      	bne.n	800568c <HAL_RCC_OscConfig+0x658>
 800568a:	e078      	b.n	800577e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005690:	2b02      	cmp	r3, #2
 8005692:	d159      	bne.n	8005748 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005694:	4b09      	ldr	r3, [pc, #36]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	4b08      	ldr	r3, [pc, #32]	@ (80056bc <HAL_RCC_OscConfig+0x688>)
 800569a:	4911      	ldr	r1, [pc, #68]	@ (80056e0 <HAL_RCC_OscConfig+0x6ac>)
 800569c:	400a      	ands	r2, r1
 800569e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a0:	f7fe fbc8 	bl	8003e34 <HAL_GetTick>
 80056a4:	0003      	movs	r3, r0
 80056a6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80056a8:	e01c      	b.n	80056e4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056aa:	f7fe fbc3 	bl	8003e34 <HAL_GetTick>
 80056ae:	0002      	movs	r2, r0
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d915      	bls.n	80056e4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e084      	b.n	80057c6 <HAL_RCC_OscConfig+0x792>
 80056bc:	40021000 	.word	0x40021000
 80056c0:	ffff1fff 	.word	0xffff1fff
 80056c4:	fffffeff 	.word	0xfffffeff
 80056c8:	40007000 	.word	0x40007000
 80056cc:	fffffbff 	.word	0xfffffbff
 80056d0:	00001388 	.word	0x00001388
 80056d4:	efffffff 	.word	0xefffffff
 80056d8:	40010000 	.word	0x40010000
 80056dc:	ffffdfff 	.word	0xffffdfff
 80056e0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80056e4:	4b3a      	ldr	r3, [pc, #232]	@ (80057d0 <HAL_RCC_OscConfig+0x79c>)
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	2380      	movs	r3, #128	@ 0x80
 80056ea:	049b      	lsls	r3, r3, #18
 80056ec:	4013      	ands	r3, r2
 80056ee:	d1dc      	bne.n	80056aa <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056f0:	4b37      	ldr	r3, [pc, #220]	@ (80057d0 <HAL_RCC_OscConfig+0x79c>)
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	4a37      	ldr	r2, [pc, #220]	@ (80057d4 <HAL_RCC_OscConfig+0x7a0>)
 80056f6:	4013      	ands	r3, r2
 80056f8:	0019      	movs	r1, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005702:	431a      	orrs	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005708:	431a      	orrs	r2, r3
 800570a:	4b31      	ldr	r3, [pc, #196]	@ (80057d0 <HAL_RCC_OscConfig+0x79c>)
 800570c:	430a      	orrs	r2, r1
 800570e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005710:	4b2f      	ldr	r3, [pc, #188]	@ (80057d0 <HAL_RCC_OscConfig+0x79c>)
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	4b2e      	ldr	r3, [pc, #184]	@ (80057d0 <HAL_RCC_OscConfig+0x79c>)
 8005716:	2180      	movs	r1, #128	@ 0x80
 8005718:	0449      	lsls	r1, r1, #17
 800571a:	430a      	orrs	r2, r1
 800571c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800571e:	f7fe fb89 	bl	8003e34 <HAL_GetTick>
 8005722:	0003      	movs	r3, r0
 8005724:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005726:	e008      	b.n	800573a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005728:	f7fe fb84 	bl	8003e34 <HAL_GetTick>
 800572c:	0002      	movs	r2, r0
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b02      	cmp	r3, #2
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e045      	b.n	80057c6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800573a:	4b25      	ldr	r3, [pc, #148]	@ (80057d0 <HAL_RCC_OscConfig+0x79c>)
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	2380      	movs	r3, #128	@ 0x80
 8005740:	049b      	lsls	r3, r3, #18
 8005742:	4013      	ands	r3, r2
 8005744:	d0f0      	beq.n	8005728 <HAL_RCC_OscConfig+0x6f4>
 8005746:	e03d      	b.n	80057c4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005748:	4b21      	ldr	r3, [pc, #132]	@ (80057d0 <HAL_RCC_OscConfig+0x79c>)
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	4b20      	ldr	r3, [pc, #128]	@ (80057d0 <HAL_RCC_OscConfig+0x79c>)
 800574e:	4922      	ldr	r1, [pc, #136]	@ (80057d8 <HAL_RCC_OscConfig+0x7a4>)
 8005750:	400a      	ands	r2, r1
 8005752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005754:	f7fe fb6e 	bl	8003e34 <HAL_GetTick>
 8005758:	0003      	movs	r3, r0
 800575a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800575c:	e008      	b.n	8005770 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800575e:	f7fe fb69 	bl	8003e34 <HAL_GetTick>
 8005762:	0002      	movs	r2, r0
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b02      	cmp	r3, #2
 800576a:	d901      	bls.n	8005770 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e02a      	b.n	80057c6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005770:	4b17      	ldr	r3, [pc, #92]	@ (80057d0 <HAL_RCC_OscConfig+0x79c>)
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	2380      	movs	r3, #128	@ 0x80
 8005776:	049b      	lsls	r3, r3, #18
 8005778:	4013      	ands	r3, r2
 800577a:	d1f0      	bne.n	800575e <HAL_RCC_OscConfig+0x72a>
 800577c:	e022      	b.n	80057c4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005782:	2b01      	cmp	r3, #1
 8005784:	d101      	bne.n	800578a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e01d      	b.n	80057c6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800578a:	4b11      	ldr	r3, [pc, #68]	@ (80057d0 <HAL_RCC_OscConfig+0x79c>)
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	2380      	movs	r3, #128	@ 0x80
 8005794:	025b      	lsls	r3, r3, #9
 8005796:	401a      	ands	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579c:	429a      	cmp	r2, r3
 800579e:	d10f      	bne.n	80057c0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	23f0      	movs	r3, #240	@ 0xf0
 80057a4:	039b      	lsls	r3, r3, #14
 80057a6:	401a      	ands	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d107      	bne.n	80057c0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	23c0      	movs	r3, #192	@ 0xc0
 80057b4:	041b      	lsls	r3, r3, #16
 80057b6:	401a      	ands	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80057bc:	429a      	cmp	r2, r3
 80057be:	d001      	beq.n	80057c4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e000      	b.n	80057c6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	0018      	movs	r0, r3
 80057c8:	46bd      	mov	sp, r7
 80057ca:	b00a      	add	sp, #40	@ 0x28
 80057cc:	bdb0      	pop	{r4, r5, r7, pc}
 80057ce:	46c0      	nop			@ (mov r8, r8)
 80057d0:	40021000 	.word	0x40021000
 80057d4:	ff02ffff 	.word	0xff02ffff
 80057d8:	feffffff 	.word	0xfeffffff

080057dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057dc:	b5b0      	push	{r4, r5, r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d101      	bne.n	80057f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e128      	b.n	8005a42 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057f0:	4b96      	ldr	r3, [pc, #600]	@ (8005a4c <HAL_RCC_ClockConfig+0x270>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2201      	movs	r2, #1
 80057f6:	4013      	ands	r3, r2
 80057f8:	683a      	ldr	r2, [r7, #0]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d91e      	bls.n	800583c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057fe:	4b93      	ldr	r3, [pc, #588]	@ (8005a4c <HAL_RCC_ClockConfig+0x270>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2201      	movs	r2, #1
 8005804:	4393      	bics	r3, r2
 8005806:	0019      	movs	r1, r3
 8005808:	4b90      	ldr	r3, [pc, #576]	@ (8005a4c <HAL_RCC_ClockConfig+0x270>)
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	430a      	orrs	r2, r1
 800580e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005810:	f7fe fb10 	bl	8003e34 <HAL_GetTick>
 8005814:	0003      	movs	r3, r0
 8005816:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005818:	e009      	b.n	800582e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800581a:	f7fe fb0b 	bl	8003e34 <HAL_GetTick>
 800581e:	0002      	movs	r2, r0
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	4a8a      	ldr	r2, [pc, #552]	@ (8005a50 <HAL_RCC_ClockConfig+0x274>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d901      	bls.n	800582e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e109      	b.n	8005a42 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800582e:	4b87      	ldr	r3, [pc, #540]	@ (8005a4c <HAL_RCC_ClockConfig+0x270>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2201      	movs	r2, #1
 8005834:	4013      	ands	r3, r2
 8005836:	683a      	ldr	r2, [r7, #0]
 8005838:	429a      	cmp	r2, r3
 800583a:	d1ee      	bne.n	800581a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2202      	movs	r2, #2
 8005842:	4013      	ands	r3, r2
 8005844:	d009      	beq.n	800585a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005846:	4b83      	ldr	r3, [pc, #524]	@ (8005a54 <HAL_RCC_ClockConfig+0x278>)
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	22f0      	movs	r2, #240	@ 0xf0
 800584c:	4393      	bics	r3, r2
 800584e:	0019      	movs	r1, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	4b7f      	ldr	r3, [pc, #508]	@ (8005a54 <HAL_RCC_ClockConfig+0x278>)
 8005856:	430a      	orrs	r2, r1
 8005858:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2201      	movs	r2, #1
 8005860:	4013      	ands	r3, r2
 8005862:	d100      	bne.n	8005866 <HAL_RCC_ClockConfig+0x8a>
 8005864:	e089      	b.n	800597a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	2b02      	cmp	r3, #2
 800586c:	d107      	bne.n	800587e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800586e:	4b79      	ldr	r3, [pc, #484]	@ (8005a54 <HAL_RCC_ClockConfig+0x278>)
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	2380      	movs	r3, #128	@ 0x80
 8005874:	029b      	lsls	r3, r3, #10
 8005876:	4013      	ands	r3, r2
 8005878:	d120      	bne.n	80058bc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e0e1      	b.n	8005a42 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	2b03      	cmp	r3, #3
 8005884:	d107      	bne.n	8005896 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005886:	4b73      	ldr	r3, [pc, #460]	@ (8005a54 <HAL_RCC_ClockConfig+0x278>)
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	2380      	movs	r3, #128	@ 0x80
 800588c:	049b      	lsls	r3, r3, #18
 800588e:	4013      	ands	r3, r2
 8005890:	d114      	bne.n	80058bc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e0d5      	b.n	8005a42 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d106      	bne.n	80058ac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800589e:	4b6d      	ldr	r3, [pc, #436]	@ (8005a54 <HAL_RCC_ClockConfig+0x278>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2204      	movs	r2, #4
 80058a4:	4013      	ands	r3, r2
 80058a6:	d109      	bne.n	80058bc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e0ca      	b.n	8005a42 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80058ac:	4b69      	ldr	r3, [pc, #420]	@ (8005a54 <HAL_RCC_ClockConfig+0x278>)
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	2380      	movs	r3, #128	@ 0x80
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4013      	ands	r3, r2
 80058b6:	d101      	bne.n	80058bc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e0c2      	b.n	8005a42 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058bc:	4b65      	ldr	r3, [pc, #404]	@ (8005a54 <HAL_RCC_ClockConfig+0x278>)
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	2203      	movs	r2, #3
 80058c2:	4393      	bics	r3, r2
 80058c4:	0019      	movs	r1, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685a      	ldr	r2, [r3, #4]
 80058ca:	4b62      	ldr	r3, [pc, #392]	@ (8005a54 <HAL_RCC_ClockConfig+0x278>)
 80058cc:	430a      	orrs	r2, r1
 80058ce:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058d0:	f7fe fab0 	bl	8003e34 <HAL_GetTick>
 80058d4:	0003      	movs	r3, r0
 80058d6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d111      	bne.n	8005904 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80058e0:	e009      	b.n	80058f6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058e2:	f7fe faa7 	bl	8003e34 <HAL_GetTick>
 80058e6:	0002      	movs	r2, r0
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	4a58      	ldr	r2, [pc, #352]	@ (8005a50 <HAL_RCC_ClockConfig+0x274>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e0a5      	b.n	8005a42 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80058f6:	4b57      	ldr	r3, [pc, #348]	@ (8005a54 <HAL_RCC_ClockConfig+0x278>)
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	220c      	movs	r2, #12
 80058fc:	4013      	ands	r3, r2
 80058fe:	2b08      	cmp	r3, #8
 8005900:	d1ef      	bne.n	80058e2 <HAL_RCC_ClockConfig+0x106>
 8005902:	e03a      	b.n	800597a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	2b03      	cmp	r3, #3
 800590a:	d111      	bne.n	8005930 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800590c:	e009      	b.n	8005922 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800590e:	f7fe fa91 	bl	8003e34 <HAL_GetTick>
 8005912:	0002      	movs	r2, r0
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	4a4d      	ldr	r2, [pc, #308]	@ (8005a50 <HAL_RCC_ClockConfig+0x274>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d901      	bls.n	8005922 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e08f      	b.n	8005a42 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005922:	4b4c      	ldr	r3, [pc, #304]	@ (8005a54 <HAL_RCC_ClockConfig+0x278>)
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	220c      	movs	r2, #12
 8005928:	4013      	ands	r3, r2
 800592a:	2b0c      	cmp	r3, #12
 800592c:	d1ef      	bne.n	800590e <HAL_RCC_ClockConfig+0x132>
 800592e:	e024      	b.n	800597a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d11b      	bne.n	8005970 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005938:	e009      	b.n	800594e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800593a:	f7fe fa7b 	bl	8003e34 <HAL_GetTick>
 800593e:	0002      	movs	r2, r0
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	4a42      	ldr	r2, [pc, #264]	@ (8005a50 <HAL_RCC_ClockConfig+0x274>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d901      	bls.n	800594e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e079      	b.n	8005a42 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800594e:	4b41      	ldr	r3, [pc, #260]	@ (8005a54 <HAL_RCC_ClockConfig+0x278>)
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	220c      	movs	r2, #12
 8005954:	4013      	ands	r3, r2
 8005956:	2b04      	cmp	r3, #4
 8005958:	d1ef      	bne.n	800593a <HAL_RCC_ClockConfig+0x15e>
 800595a:	e00e      	b.n	800597a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800595c:	f7fe fa6a 	bl	8003e34 <HAL_GetTick>
 8005960:	0002      	movs	r2, r0
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	4a3a      	ldr	r2, [pc, #232]	@ (8005a50 <HAL_RCC_ClockConfig+0x274>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d901      	bls.n	8005970 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e068      	b.n	8005a42 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005970:	4b38      	ldr	r3, [pc, #224]	@ (8005a54 <HAL_RCC_ClockConfig+0x278>)
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	220c      	movs	r2, #12
 8005976:	4013      	ands	r3, r2
 8005978:	d1f0      	bne.n	800595c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800597a:	4b34      	ldr	r3, [pc, #208]	@ (8005a4c <HAL_RCC_ClockConfig+0x270>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2201      	movs	r2, #1
 8005980:	4013      	ands	r3, r2
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	429a      	cmp	r2, r3
 8005986:	d21e      	bcs.n	80059c6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005988:	4b30      	ldr	r3, [pc, #192]	@ (8005a4c <HAL_RCC_ClockConfig+0x270>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2201      	movs	r2, #1
 800598e:	4393      	bics	r3, r2
 8005990:	0019      	movs	r1, r3
 8005992:	4b2e      	ldr	r3, [pc, #184]	@ (8005a4c <HAL_RCC_ClockConfig+0x270>)
 8005994:	683a      	ldr	r2, [r7, #0]
 8005996:	430a      	orrs	r2, r1
 8005998:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800599a:	f7fe fa4b 	bl	8003e34 <HAL_GetTick>
 800599e:	0003      	movs	r3, r0
 80059a0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a2:	e009      	b.n	80059b8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059a4:	f7fe fa46 	bl	8003e34 <HAL_GetTick>
 80059a8:	0002      	movs	r2, r0
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	4a28      	ldr	r2, [pc, #160]	@ (8005a50 <HAL_RCC_ClockConfig+0x274>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d901      	bls.n	80059b8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e044      	b.n	8005a42 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059b8:	4b24      	ldr	r3, [pc, #144]	@ (8005a4c <HAL_RCC_ClockConfig+0x270>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2201      	movs	r2, #1
 80059be:	4013      	ands	r3, r2
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d1ee      	bne.n	80059a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2204      	movs	r2, #4
 80059cc:	4013      	ands	r3, r2
 80059ce:	d009      	beq.n	80059e4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059d0:	4b20      	ldr	r3, [pc, #128]	@ (8005a54 <HAL_RCC_ClockConfig+0x278>)
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	4a20      	ldr	r2, [pc, #128]	@ (8005a58 <HAL_RCC_ClockConfig+0x27c>)
 80059d6:	4013      	ands	r3, r2
 80059d8:	0019      	movs	r1, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68da      	ldr	r2, [r3, #12]
 80059de:	4b1d      	ldr	r3, [pc, #116]	@ (8005a54 <HAL_RCC_ClockConfig+0x278>)
 80059e0:	430a      	orrs	r2, r1
 80059e2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2208      	movs	r2, #8
 80059ea:	4013      	ands	r3, r2
 80059ec:	d00a      	beq.n	8005a04 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80059ee:	4b19      	ldr	r3, [pc, #100]	@ (8005a54 <HAL_RCC_ClockConfig+0x278>)
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	4a1a      	ldr	r2, [pc, #104]	@ (8005a5c <HAL_RCC_ClockConfig+0x280>)
 80059f4:	4013      	ands	r3, r2
 80059f6:	0019      	movs	r1, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	00da      	lsls	r2, r3, #3
 80059fe:	4b15      	ldr	r3, [pc, #84]	@ (8005a54 <HAL_RCC_ClockConfig+0x278>)
 8005a00:	430a      	orrs	r2, r1
 8005a02:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a04:	f000 f832 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 8005a08:	0001      	movs	r1, r0
 8005a0a:	4b12      	ldr	r3, [pc, #72]	@ (8005a54 <HAL_RCC_ClockConfig+0x278>)
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	091b      	lsrs	r3, r3, #4
 8005a10:	220f      	movs	r2, #15
 8005a12:	4013      	ands	r3, r2
 8005a14:	4a12      	ldr	r2, [pc, #72]	@ (8005a60 <HAL_RCC_ClockConfig+0x284>)
 8005a16:	5cd3      	ldrb	r3, [r2, r3]
 8005a18:	000a      	movs	r2, r1
 8005a1a:	40da      	lsrs	r2, r3
 8005a1c:	4b11      	ldr	r3, [pc, #68]	@ (8005a64 <HAL_RCC_ClockConfig+0x288>)
 8005a1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005a20:	4b11      	ldr	r3, [pc, #68]	@ (8005a68 <HAL_RCC_ClockConfig+0x28c>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	250b      	movs	r5, #11
 8005a26:	197c      	adds	r4, r7, r5
 8005a28:	0018      	movs	r0, r3
 8005a2a:	f7fe f9bd 	bl	8003da8 <HAL_InitTick>
 8005a2e:	0003      	movs	r3, r0
 8005a30:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005a32:	197b      	adds	r3, r7, r5
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d002      	beq.n	8005a40 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005a3a:	197b      	adds	r3, r7, r5
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	e000      	b.n	8005a42 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	0018      	movs	r0, r3
 8005a44:	46bd      	mov	sp, r7
 8005a46:	b004      	add	sp, #16
 8005a48:	bdb0      	pop	{r4, r5, r7, pc}
 8005a4a:	46c0      	nop			@ (mov r8, r8)
 8005a4c:	40022000 	.word	0x40022000
 8005a50:	00001388 	.word	0x00001388
 8005a54:	40021000 	.word	0x40021000
 8005a58:	fffff8ff 	.word	0xfffff8ff
 8005a5c:	ffffc7ff 	.word	0xffffc7ff
 8005a60:	08009a6c 	.word	0x08009a6c
 8005a64:	20000000 	.word	0x20000000
 8005a68:	20000004 	.word	0x20000004

08005a6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a6c:	b5b0      	push	{r4, r5, r7, lr}
 8005a6e:	b08e      	sub	sp, #56	@ 0x38
 8005a70:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005a72:	4b4c      	ldr	r3, [pc, #304]	@ (8005ba4 <HAL_RCC_GetSysClockFreq+0x138>)
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a7a:	230c      	movs	r3, #12
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	2b0c      	cmp	r3, #12
 8005a80:	d014      	beq.n	8005aac <HAL_RCC_GetSysClockFreq+0x40>
 8005a82:	d900      	bls.n	8005a86 <HAL_RCC_GetSysClockFreq+0x1a>
 8005a84:	e07b      	b.n	8005b7e <HAL_RCC_GetSysClockFreq+0x112>
 8005a86:	2b04      	cmp	r3, #4
 8005a88:	d002      	beq.n	8005a90 <HAL_RCC_GetSysClockFreq+0x24>
 8005a8a:	2b08      	cmp	r3, #8
 8005a8c:	d00b      	beq.n	8005aa6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a8e:	e076      	b.n	8005b7e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005a90:	4b44      	ldr	r3, [pc, #272]	@ (8005ba4 <HAL_RCC_GetSysClockFreq+0x138>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2210      	movs	r2, #16
 8005a96:	4013      	ands	r3, r2
 8005a98:	d002      	beq.n	8005aa0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005a9a:	4b43      	ldr	r3, [pc, #268]	@ (8005ba8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005a9c:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005a9e:	e07c      	b.n	8005b9a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005aa0:	4b42      	ldr	r3, [pc, #264]	@ (8005bac <HAL_RCC_GetSysClockFreq+0x140>)
 8005aa2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8005aa4:	e079      	b.n	8005b9a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005aa6:	4b42      	ldr	r3, [pc, #264]	@ (8005bb0 <HAL_RCC_GetSysClockFreq+0x144>)
 8005aa8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8005aaa:	e076      	b.n	8005b9a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aae:	0c9a      	lsrs	r2, r3, #18
 8005ab0:	230f      	movs	r3, #15
 8005ab2:	401a      	ands	r2, r3
 8005ab4:	4b3f      	ldr	r3, [pc, #252]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x148>)
 8005ab6:	5c9b      	ldrb	r3, [r3, r2]
 8005ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005abc:	0d9a      	lsrs	r2, r3, #22
 8005abe:	2303      	movs	r3, #3
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ac6:	4b37      	ldr	r3, [pc, #220]	@ (8005ba4 <HAL_RCC_GetSysClockFreq+0x138>)
 8005ac8:	68da      	ldr	r2, [r3, #12]
 8005aca:	2380      	movs	r3, #128	@ 0x80
 8005acc:	025b      	lsls	r3, r3, #9
 8005ace:	4013      	ands	r3, r2
 8005ad0:	d01a      	beq.n	8005b08 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad4:	61bb      	str	r3, [r7, #24]
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	61fb      	str	r3, [r7, #28]
 8005ada:	4a35      	ldr	r2, [pc, #212]	@ (8005bb0 <HAL_RCC_GetSysClockFreq+0x144>)
 8005adc:	2300      	movs	r3, #0
 8005ade:	69b8      	ldr	r0, [r7, #24]
 8005ae0:	69f9      	ldr	r1, [r7, #28]
 8005ae2:	f7fa fd25 	bl	8000530 <__aeabi_lmul>
 8005ae6:	0002      	movs	r2, r0
 8005ae8:	000b      	movs	r3, r1
 8005aea:	0010      	movs	r0, r2
 8005aec:	0019      	movs	r1, r3
 8005aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af0:	613b      	str	r3, [r7, #16]
 8005af2:	2300      	movs	r3, #0
 8005af4:	617b      	str	r3, [r7, #20]
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	f7fa fcf9 	bl	80004f0 <__aeabi_uldivmod>
 8005afe:	0002      	movs	r2, r0
 8005b00:	000b      	movs	r3, r1
 8005b02:	0013      	movs	r3, r2
 8005b04:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b06:	e037      	b.n	8005b78 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005b08:	4b26      	ldr	r3, [pc, #152]	@ (8005ba4 <HAL_RCC_GetSysClockFreq+0x138>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2210      	movs	r2, #16
 8005b0e:	4013      	ands	r3, r2
 8005b10:	d01a      	beq.n	8005b48 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b14:	60bb      	str	r3, [r7, #8]
 8005b16:	2300      	movs	r3, #0
 8005b18:	60fb      	str	r3, [r7, #12]
 8005b1a:	4a23      	ldr	r2, [pc, #140]	@ (8005ba8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	68b8      	ldr	r0, [r7, #8]
 8005b20:	68f9      	ldr	r1, [r7, #12]
 8005b22:	f7fa fd05 	bl	8000530 <__aeabi_lmul>
 8005b26:	0002      	movs	r2, r0
 8005b28:	000b      	movs	r3, r1
 8005b2a:	0010      	movs	r0, r2
 8005b2c:	0019      	movs	r1, r3
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b30:	603b      	str	r3, [r7, #0]
 8005b32:	2300      	movs	r3, #0
 8005b34:	607b      	str	r3, [r7, #4]
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f7fa fcd9 	bl	80004f0 <__aeabi_uldivmod>
 8005b3e:	0002      	movs	r2, r0
 8005b40:	000b      	movs	r3, r1
 8005b42:	0013      	movs	r3, r2
 8005b44:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b46:	e017      	b.n	8005b78 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b4a:	0018      	movs	r0, r3
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	0019      	movs	r1, r3
 8005b50:	4a16      	ldr	r2, [pc, #88]	@ (8005bac <HAL_RCC_GetSysClockFreq+0x140>)
 8005b52:	2300      	movs	r3, #0
 8005b54:	f7fa fcec 	bl	8000530 <__aeabi_lmul>
 8005b58:	0002      	movs	r2, r0
 8005b5a:	000b      	movs	r3, r1
 8005b5c:	0010      	movs	r0, r2
 8005b5e:	0019      	movs	r1, r3
 8005b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b62:	001c      	movs	r4, r3
 8005b64:	2300      	movs	r3, #0
 8005b66:	001d      	movs	r5, r3
 8005b68:	0022      	movs	r2, r4
 8005b6a:	002b      	movs	r3, r5
 8005b6c:	f7fa fcc0 	bl	80004f0 <__aeabi_uldivmod>
 8005b70:	0002      	movs	r2, r0
 8005b72:	000b      	movs	r3, r1
 8005b74:	0013      	movs	r3, r2
 8005b76:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8005b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b7a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8005b7c:	e00d      	b.n	8005b9a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005b7e:	4b09      	ldr	r3, [pc, #36]	@ (8005ba4 <HAL_RCC_GetSysClockFreq+0x138>)
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	0b5b      	lsrs	r3, r3, #13
 8005b84:	2207      	movs	r2, #7
 8005b86:	4013      	ands	r3, r2
 8005b88:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005b8a:	6a3b      	ldr	r3, [r7, #32]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	2280      	movs	r2, #128	@ 0x80
 8005b90:	0212      	lsls	r2, r2, #8
 8005b92:	409a      	lsls	r2, r3
 8005b94:	0013      	movs	r3, r2
 8005b96:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8005b98:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8005b9c:	0018      	movs	r0, r3
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	b00e      	add	sp, #56	@ 0x38
 8005ba2:	bdb0      	pop	{r4, r5, r7, pc}
 8005ba4:	40021000 	.word	0x40021000
 8005ba8:	003d0900 	.word	0x003d0900
 8005bac:	00f42400 	.word	0x00f42400
 8005bb0:	007a1200 	.word	0x007a1200
 8005bb4:	08009a84 	.word	0x08009a84

08005bb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bbc:	4b02      	ldr	r3, [pc, #8]	@ (8005bc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
}
 8005bc0:	0018      	movs	r0, r3
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	46c0      	nop			@ (mov r8, r8)
 8005bc8:	20000000 	.word	0x20000000

08005bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005bd0:	f7ff fff2 	bl	8005bb8 <HAL_RCC_GetHCLKFreq>
 8005bd4:	0001      	movs	r1, r0
 8005bd6:	4b06      	ldr	r3, [pc, #24]	@ (8005bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	0a1b      	lsrs	r3, r3, #8
 8005bdc:	2207      	movs	r2, #7
 8005bde:	4013      	ands	r3, r2
 8005be0:	4a04      	ldr	r2, [pc, #16]	@ (8005bf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005be2:	5cd3      	ldrb	r3, [r2, r3]
 8005be4:	40d9      	lsrs	r1, r3
 8005be6:	000b      	movs	r3, r1
}
 8005be8:	0018      	movs	r0, r3
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	46c0      	nop			@ (mov r8, r8)
 8005bf0:	40021000 	.word	0x40021000
 8005bf4:	08009a7c 	.word	0x08009a7c

08005bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005bfc:	f7ff ffdc 	bl	8005bb8 <HAL_RCC_GetHCLKFreq>
 8005c00:	0001      	movs	r1, r0
 8005c02:	4b06      	ldr	r3, [pc, #24]	@ (8005c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	0adb      	lsrs	r3, r3, #11
 8005c08:	2207      	movs	r2, #7
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	4a04      	ldr	r2, [pc, #16]	@ (8005c20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c0e:	5cd3      	ldrb	r3, [r2, r3]
 8005c10:	40d9      	lsrs	r1, r3
 8005c12:	000b      	movs	r3, r1
}
 8005c14:	0018      	movs	r0, r3
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	46c0      	nop			@ (mov r8, r8)
 8005c1c:	40021000 	.word	0x40021000
 8005c20:	08009a7c 	.word	0x08009a7c

08005c24 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005c2c:	2317      	movs	r3, #23
 8005c2e:	18fb      	adds	r3, r7, r3
 8005c30:	2200      	movs	r2, #0
 8005c32:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	d106      	bne.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	2380      	movs	r3, #128	@ 0x80
 8005c44:	011b      	lsls	r3, r3, #4
 8005c46:	4013      	ands	r3, r2
 8005c48:	d100      	bne.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x28>
 8005c4a:	e104      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c4c:	4bb9      	ldr	r3, [pc, #740]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005c4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c50:	2380      	movs	r3, #128	@ 0x80
 8005c52:	055b      	lsls	r3, r3, #21
 8005c54:	4013      	ands	r3, r2
 8005c56:	d10a      	bne.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c58:	4bb6      	ldr	r3, [pc, #728]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005c5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c5c:	4bb5      	ldr	r3, [pc, #724]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005c5e:	2180      	movs	r1, #128	@ 0x80
 8005c60:	0549      	lsls	r1, r1, #21
 8005c62:	430a      	orrs	r2, r1
 8005c64:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8005c66:	2317      	movs	r3, #23
 8005c68:	18fb      	adds	r3, r7, r3
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c6e:	4bb2      	ldr	r3, [pc, #712]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	2380      	movs	r3, #128	@ 0x80
 8005c74:	005b      	lsls	r3, r3, #1
 8005c76:	4013      	ands	r3, r2
 8005c78:	d11a      	bne.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c7a:	4baf      	ldr	r3, [pc, #700]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	4bae      	ldr	r3, [pc, #696]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005c80:	2180      	movs	r1, #128	@ 0x80
 8005c82:	0049      	lsls	r1, r1, #1
 8005c84:	430a      	orrs	r2, r1
 8005c86:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c88:	f7fe f8d4 	bl	8003e34 <HAL_GetTick>
 8005c8c:	0003      	movs	r3, r0
 8005c8e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c90:	e008      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c92:	f7fe f8cf 	bl	8003e34 <HAL_GetTick>
 8005c96:	0002      	movs	r2, r0
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	2b64      	cmp	r3, #100	@ 0x64
 8005c9e:	d901      	bls.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e143      	b.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ca4:	4ba4      	ldr	r3, [pc, #656]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	2380      	movs	r3, #128	@ 0x80
 8005caa:	005b      	lsls	r3, r3, #1
 8005cac:	4013      	ands	r3, r2
 8005cae:	d0f0      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005cb0:	4ba0      	ldr	r3, [pc, #640]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	23c0      	movs	r3, #192	@ 0xc0
 8005cb6:	039b      	lsls	r3, r3, #14
 8005cb8:	4013      	ands	r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685a      	ldr	r2, [r3, #4]
 8005cc0:	23c0      	movs	r3, #192	@ 0xc0
 8005cc2:	039b      	lsls	r3, r3, #14
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d107      	bne.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	23c0      	movs	r3, #192	@ 0xc0
 8005cd2:	039b      	lsls	r3, r3, #14
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d013      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	23c0      	movs	r3, #192	@ 0xc0
 8005ce2:	029b      	lsls	r3, r3, #10
 8005ce4:	401a      	ands	r2, r3
 8005ce6:	23c0      	movs	r3, #192	@ 0xc0
 8005ce8:	029b      	lsls	r3, r3, #10
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d10a      	bne.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005cee:	4b91      	ldr	r3, [pc, #580]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	2380      	movs	r3, #128	@ 0x80
 8005cf4:	029b      	lsls	r3, r3, #10
 8005cf6:	401a      	ands	r2, r3
 8005cf8:	2380      	movs	r3, #128	@ 0x80
 8005cfa:	029b      	lsls	r3, r3, #10
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d101      	bne.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e113      	b.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005d04:	4b8b      	ldr	r3, [pc, #556]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005d06:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d08:	23c0      	movs	r3, #192	@ 0xc0
 8005d0a:	029b      	lsls	r3, r3, #10
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d049      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	23c0      	movs	r3, #192	@ 0xc0
 8005d1c:	029b      	lsls	r3, r3, #10
 8005d1e:	4013      	ands	r3, r2
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d004      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	d10d      	bne.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689a      	ldr	r2, [r3, #8]
 8005d34:	23c0      	movs	r3, #192	@ 0xc0
 8005d36:	029b      	lsls	r3, r3, #10
 8005d38:	4013      	ands	r3, r2
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d034      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	2380      	movs	r3, #128	@ 0x80
 8005d46:	011b      	lsls	r3, r3, #4
 8005d48:	4013      	ands	r3, r2
 8005d4a:	d02e      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005d4c:	4b79      	ldr	r3, [pc, #484]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005d4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d50:	4a7a      	ldr	r2, [pc, #488]	@ (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8005d52:	4013      	ands	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d56:	4b77      	ldr	r3, [pc, #476]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005d58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d5a:	4b76      	ldr	r3, [pc, #472]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005d5c:	2180      	movs	r1, #128	@ 0x80
 8005d5e:	0309      	lsls	r1, r1, #12
 8005d60:	430a      	orrs	r2, r1
 8005d62:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d64:	4b73      	ldr	r3, [pc, #460]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005d66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d68:	4b72      	ldr	r3, [pc, #456]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005d6a:	4975      	ldr	r1, [pc, #468]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005d6c:	400a      	ands	r2, r1
 8005d6e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005d70:	4b70      	ldr	r3, [pc, #448]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	2380      	movs	r3, #128	@ 0x80
 8005d7a:	005b      	lsls	r3, r3, #1
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	d014      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d80:	f7fe f858 	bl	8003e34 <HAL_GetTick>
 8005d84:	0003      	movs	r3, r0
 8005d86:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d88:	e009      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d8a:	f7fe f853 	bl	8003e34 <HAL_GetTick>
 8005d8e:	0002      	movs	r2, r0
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	4a6b      	ldr	r2, [pc, #428]	@ (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d901      	bls.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e0c6      	b.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d9e:	4b65      	ldr	r3, [pc, #404]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005da0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005da2:	2380      	movs	r3, #128	@ 0x80
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4013      	ands	r3, r2
 8005da8:	d0ef      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	2380      	movs	r3, #128	@ 0x80
 8005db0:	011b      	lsls	r3, r3, #4
 8005db2:	4013      	ands	r3, r2
 8005db4:	d01f      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	689a      	ldr	r2, [r3, #8]
 8005dba:	23c0      	movs	r3, #192	@ 0xc0
 8005dbc:	029b      	lsls	r3, r3, #10
 8005dbe:	401a      	ands	r2, r3
 8005dc0:	23c0      	movs	r3, #192	@ 0xc0
 8005dc2:	029b      	lsls	r3, r3, #10
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d10c      	bne.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8005dc8:	4b5a      	ldr	r3, [pc, #360]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a5e      	ldr	r2, [pc, #376]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005dce:	4013      	ands	r3, r2
 8005dd0:	0019      	movs	r1, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	689a      	ldr	r2, [r3, #8]
 8005dd6:	23c0      	movs	r3, #192	@ 0xc0
 8005dd8:	039b      	lsls	r3, r3, #14
 8005dda:	401a      	ands	r2, r3
 8005ddc:	4b55      	ldr	r3, [pc, #340]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005dde:	430a      	orrs	r2, r1
 8005de0:	601a      	str	r2, [r3, #0]
 8005de2:	4b54      	ldr	r3, [pc, #336]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005de4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	689a      	ldr	r2, [r3, #8]
 8005dea:	23c0      	movs	r3, #192	@ 0xc0
 8005dec:	029b      	lsls	r3, r3, #10
 8005dee:	401a      	ands	r2, r3
 8005df0:	4b50      	ldr	r3, [pc, #320]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005df2:	430a      	orrs	r2, r1
 8005df4:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	d01f      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685a      	ldr	r2, [r3, #4]
 8005e04:	23c0      	movs	r3, #192	@ 0xc0
 8005e06:	029b      	lsls	r3, r3, #10
 8005e08:	401a      	ands	r2, r3
 8005e0a:	23c0      	movs	r3, #192	@ 0xc0
 8005e0c:	029b      	lsls	r3, r3, #10
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d10c      	bne.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8005e12:	4b48      	ldr	r3, [pc, #288]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a4c      	ldr	r2, [pc, #304]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005e18:	4013      	ands	r3, r2
 8005e1a:	0019      	movs	r1, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	23c0      	movs	r3, #192	@ 0xc0
 8005e22:	039b      	lsls	r3, r3, #14
 8005e24:	401a      	ands	r2, r3
 8005e26:	4b43      	ldr	r3, [pc, #268]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	601a      	str	r2, [r3, #0]
 8005e2c:	4b41      	ldr	r3, [pc, #260]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005e2e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	23c0      	movs	r3, #192	@ 0xc0
 8005e36:	029b      	lsls	r3, r3, #10
 8005e38:	401a      	ands	r2, r3
 8005e3a:	4b3e      	ldr	r3, [pc, #248]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e40:	2317      	movs	r3, #23
 8005e42:	18fb      	adds	r3, r7, r3
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d105      	bne.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e4a:	4b3a      	ldr	r3, [pc, #232]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005e4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e4e:	4b39      	ldr	r3, [pc, #228]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005e50:	493e      	ldr	r1, [pc, #248]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005e52:	400a      	ands	r2, r1
 8005e54:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	d009      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e60:	4b34      	ldr	r3, [pc, #208]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005e62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e64:	2203      	movs	r2, #3
 8005e66:	4393      	bics	r3, r2
 8005e68:	0019      	movs	r1, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68da      	ldr	r2, [r3, #12]
 8005e6e:	4b31      	ldr	r3, [pc, #196]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005e70:	430a      	orrs	r2, r1
 8005e72:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2202      	movs	r2, #2
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	d009      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e7e:	4b2d      	ldr	r3, [pc, #180]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e82:	220c      	movs	r2, #12
 8005e84:	4393      	bics	r3, r2
 8005e86:	0019      	movs	r1, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	691a      	ldr	r2, [r3, #16]
 8005e8c:	4b29      	ldr	r3, [pc, #164]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2204      	movs	r2, #4
 8005e98:	4013      	ands	r3, r2
 8005e9a:	d009      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e9c:	4b25      	ldr	r3, [pc, #148]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ea0:	4a2b      	ldr	r2, [pc, #172]	@ (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	0019      	movs	r1, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	695a      	ldr	r2, [r3, #20]
 8005eaa:	4b22      	ldr	r3, [pc, #136]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005eac:	430a      	orrs	r2, r1
 8005eae:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2208      	movs	r2, #8
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	d009      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005eba:	4b1e      	ldr	r3, [pc, #120]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ebe:	4a25      	ldr	r2, [pc, #148]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	0019      	movs	r1, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	699a      	ldr	r2, [r3, #24]
 8005ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	2380      	movs	r3, #128	@ 0x80
 8005ed4:	005b      	lsls	r3, r3, #1
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	d009      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005eda:	4b16      	ldr	r3, [pc, #88]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ede:	4a17      	ldr	r2, [pc, #92]	@ (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	0019      	movs	r1, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	69da      	ldr	r2, [r3, #28]
 8005ee8:	4b12      	ldr	r3, [pc, #72]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005eea:	430a      	orrs	r2, r1
 8005eec:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2240      	movs	r2, #64	@ 0x40
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	d009      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005efa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005efc:	4a16      	ldr	r2, [pc, #88]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005efe:	4013      	ands	r3, r2
 8005f00:	0019      	movs	r1, r3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f06:	4b0b      	ldr	r3, [pc, #44]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2280      	movs	r2, #128	@ 0x80
 8005f12:	4013      	ands	r3, r2
 8005f14:	d009      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005f16:	4b07      	ldr	r3, [pc, #28]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f1a:	4a10      	ldr	r2, [pc, #64]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	0019      	movs	r1, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a1a      	ldr	r2, [r3, #32]
 8005f24:	4b03      	ldr	r3, [pc, #12]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005f26:	430a      	orrs	r2, r1
 8005f28:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	0018      	movs	r0, r3
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	b006      	add	sp, #24
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	40021000 	.word	0x40021000
 8005f38:	40007000 	.word	0x40007000
 8005f3c:	fffcffff 	.word	0xfffcffff
 8005f40:	fff7ffff 	.word	0xfff7ffff
 8005f44:	00001388 	.word	0x00001388
 8005f48:	ffcfffff 	.word	0xffcfffff
 8005f4c:	efffffff 	.word	0xefffffff
 8005f50:	fffff3ff 	.word	0xfffff3ff
 8005f54:	ffffcfff 	.word	0xffffcfff
 8005f58:	fbffffff 	.word	0xfbffffff
 8005f5c:	fff3ffff 	.word	0xfff3ffff

08005f60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e044      	b.n	8005ffc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d107      	bne.n	8005f8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2278      	movs	r2, #120	@ 0x78
 8005f7e:	2100      	movs	r1, #0
 8005f80:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	0018      	movs	r0, r3
 8005f86:	f7fd fda3 	bl	8003ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2224      	movs	r2, #36	@ 0x24
 8005f8e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	438a      	bics	r2, r1
 8005f9e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	0018      	movs	r0, r3
 8005fa4:	f000 f8d0 	bl	8006148 <UART_SetConfig>
 8005fa8:	0003      	movs	r3, r0
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d101      	bne.n	8005fb2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e024      	b.n	8005ffc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	0018      	movs	r0, r3
 8005fbe:	f000 fb61 	bl	8006684 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	490d      	ldr	r1, [pc, #52]	@ (8006004 <HAL_UART_Init+0xa4>)
 8005fce:	400a      	ands	r2, r1
 8005fd0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689a      	ldr	r2, [r3, #8]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	212a      	movs	r1, #42	@ 0x2a
 8005fde:	438a      	bics	r2, r1
 8005fe0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2101      	movs	r1, #1
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	0018      	movs	r0, r3
 8005ff6:	f000 fbf9 	bl	80067ec <UART_CheckIdleState>
 8005ffa:	0003      	movs	r3, r0
}
 8005ffc:	0018      	movs	r0, r3
 8005ffe:	46bd      	mov	sp, r7
 8006000:	b002      	add	sp, #8
 8006002:	bd80      	pop	{r7, pc}
 8006004:	ffffb7ff 	.word	0xffffb7ff

08006008 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08a      	sub	sp, #40	@ 0x28
 800600c:	af02      	add	r7, sp, #8
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	603b      	str	r3, [r7, #0]
 8006014:	1dbb      	adds	r3, r7, #6
 8006016:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800601c:	2b20      	cmp	r3, #32
 800601e:	d000      	beq.n	8006022 <HAL_UART_Transmit+0x1a>
 8006020:	e08c      	b.n	800613c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d003      	beq.n	8006030 <HAL_UART_Transmit+0x28>
 8006028:	1dbb      	adds	r3, r7, #6
 800602a:	881b      	ldrh	r3, [r3, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d101      	bne.n	8006034 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e084      	b.n	800613e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	689a      	ldr	r2, [r3, #8]
 8006038:	2380      	movs	r3, #128	@ 0x80
 800603a:	015b      	lsls	r3, r3, #5
 800603c:	429a      	cmp	r2, r3
 800603e:	d109      	bne.n	8006054 <HAL_UART_Transmit+0x4c>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d105      	bne.n	8006054 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	2201      	movs	r2, #1
 800604c:	4013      	ands	r3, r2
 800604e:	d001      	beq.n	8006054 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e074      	b.n	800613e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2284      	movs	r2, #132	@ 0x84
 8006058:	2100      	movs	r1, #0
 800605a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2221      	movs	r2, #33	@ 0x21
 8006060:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006062:	f7fd fee7 	bl	8003e34 <HAL_GetTick>
 8006066:	0003      	movs	r3, r0
 8006068:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	1dba      	adds	r2, r7, #6
 800606e:	2150      	movs	r1, #80	@ 0x50
 8006070:	8812      	ldrh	r2, [r2, #0]
 8006072:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	1dba      	adds	r2, r7, #6
 8006078:	2152      	movs	r1, #82	@ 0x52
 800607a:	8812      	ldrh	r2, [r2, #0]
 800607c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	689a      	ldr	r2, [r3, #8]
 8006082:	2380      	movs	r3, #128	@ 0x80
 8006084:	015b      	lsls	r3, r3, #5
 8006086:	429a      	cmp	r2, r3
 8006088:	d108      	bne.n	800609c <HAL_UART_Transmit+0x94>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d104      	bne.n	800609c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8006092:	2300      	movs	r3, #0
 8006094:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	61bb      	str	r3, [r7, #24]
 800609a:	e003      	b.n	80060a4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060a0:	2300      	movs	r3, #0
 80060a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80060a4:	e02f      	b.n	8006106 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	0013      	movs	r3, r2
 80060b0:	2200      	movs	r2, #0
 80060b2:	2180      	movs	r1, #128	@ 0x80
 80060b4:	f000 fc42 	bl	800693c <UART_WaitOnFlagUntilTimeout>
 80060b8:	1e03      	subs	r3, r0, #0
 80060ba:	d004      	beq.n	80060c6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2220      	movs	r2, #32
 80060c0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e03b      	b.n	800613e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10b      	bne.n	80060e4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	881b      	ldrh	r3, [r3, #0]
 80060d0:	001a      	movs	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	05d2      	lsls	r2, r2, #23
 80060d8:	0dd2      	lsrs	r2, r2, #23
 80060da:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	3302      	adds	r3, #2
 80060e0:	61bb      	str	r3, [r7, #24]
 80060e2:	e007      	b.n	80060f4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	781a      	ldrb	r2, [r3, #0]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	3301      	adds	r3, #1
 80060f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2252      	movs	r2, #82	@ 0x52
 80060f8:	5a9b      	ldrh	r3, [r3, r2]
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	3b01      	subs	r3, #1
 80060fe:	b299      	uxth	r1, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2252      	movs	r2, #82	@ 0x52
 8006104:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2252      	movs	r2, #82	@ 0x52
 800610a:	5a9b      	ldrh	r3, [r3, r2]
 800610c:	b29b      	uxth	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1c9      	bne.n	80060a6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	0013      	movs	r3, r2
 800611c:	2200      	movs	r2, #0
 800611e:	2140      	movs	r1, #64	@ 0x40
 8006120:	f000 fc0c 	bl	800693c <UART_WaitOnFlagUntilTimeout>
 8006124:	1e03      	subs	r3, r0, #0
 8006126:	d004      	beq.n	8006132 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2220      	movs	r2, #32
 800612c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e005      	b.n	800613e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2220      	movs	r2, #32
 8006136:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006138:	2300      	movs	r3, #0
 800613a:	e000      	b.n	800613e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800613c:	2302      	movs	r3, #2
  }
}
 800613e:	0018      	movs	r0, r3
 8006140:	46bd      	mov	sp, r7
 8006142:	b008      	add	sp, #32
 8006144:	bd80      	pop	{r7, pc}
	...

08006148 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006148:	b5b0      	push	{r4, r5, r7, lr}
 800614a:	b08e      	sub	sp, #56	@ 0x38
 800614c:	af00      	add	r7, sp, #0
 800614e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006150:	231a      	movs	r3, #26
 8006152:	2218      	movs	r2, #24
 8006154:	189b      	adds	r3, r3, r2
 8006156:	19db      	adds	r3, r3, r7
 8006158:	2200      	movs	r2, #0
 800615a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	689a      	ldr	r2, [r3, #8]
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	431a      	orrs	r2, r3
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	431a      	orrs	r2, r3
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	69db      	ldr	r3, [r3, #28]
 8006170:	4313      	orrs	r3, r2
 8006172:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4ac3      	ldr	r2, [pc, #780]	@ (8006488 <UART_SetConfig+0x340>)
 800617c:	4013      	ands	r3, r2
 800617e:	0019      	movs	r1, r3
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006186:	430a      	orrs	r2, r1
 8006188:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	4abe      	ldr	r2, [pc, #760]	@ (800648c <UART_SetConfig+0x344>)
 8006192:	4013      	ands	r3, r2
 8006194:	0019      	movs	r1, r3
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	68da      	ldr	r2, [r3, #12]
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4ab8      	ldr	r2, [pc, #736]	@ (8006490 <UART_SetConfig+0x348>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d004      	beq.n	80061bc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80061b8:	4313      	orrs	r3, r2
 80061ba:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	4ab4      	ldr	r2, [pc, #720]	@ (8006494 <UART_SetConfig+0x34c>)
 80061c4:	4013      	ands	r3, r2
 80061c6:	0019      	movs	r1, r3
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80061ce:	430a      	orrs	r2, r1
 80061d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4ab0      	ldr	r2, [pc, #704]	@ (8006498 <UART_SetConfig+0x350>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d131      	bne.n	8006240 <UART_SetConfig+0xf8>
 80061dc:	4baf      	ldr	r3, [pc, #700]	@ (800649c <UART_SetConfig+0x354>)
 80061de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061e0:	2203      	movs	r2, #3
 80061e2:	4013      	ands	r3, r2
 80061e4:	2b03      	cmp	r3, #3
 80061e6:	d01d      	beq.n	8006224 <UART_SetConfig+0xdc>
 80061e8:	d823      	bhi.n	8006232 <UART_SetConfig+0xea>
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d00c      	beq.n	8006208 <UART_SetConfig+0xc0>
 80061ee:	d820      	bhi.n	8006232 <UART_SetConfig+0xea>
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d002      	beq.n	80061fa <UART_SetConfig+0xb2>
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d00e      	beq.n	8006216 <UART_SetConfig+0xce>
 80061f8:	e01b      	b.n	8006232 <UART_SetConfig+0xea>
 80061fa:	231b      	movs	r3, #27
 80061fc:	2218      	movs	r2, #24
 80061fe:	189b      	adds	r3, r3, r2
 8006200:	19db      	adds	r3, r3, r7
 8006202:	2201      	movs	r2, #1
 8006204:	701a      	strb	r2, [r3, #0]
 8006206:	e0b4      	b.n	8006372 <UART_SetConfig+0x22a>
 8006208:	231b      	movs	r3, #27
 800620a:	2218      	movs	r2, #24
 800620c:	189b      	adds	r3, r3, r2
 800620e:	19db      	adds	r3, r3, r7
 8006210:	2202      	movs	r2, #2
 8006212:	701a      	strb	r2, [r3, #0]
 8006214:	e0ad      	b.n	8006372 <UART_SetConfig+0x22a>
 8006216:	231b      	movs	r3, #27
 8006218:	2218      	movs	r2, #24
 800621a:	189b      	adds	r3, r3, r2
 800621c:	19db      	adds	r3, r3, r7
 800621e:	2204      	movs	r2, #4
 8006220:	701a      	strb	r2, [r3, #0]
 8006222:	e0a6      	b.n	8006372 <UART_SetConfig+0x22a>
 8006224:	231b      	movs	r3, #27
 8006226:	2218      	movs	r2, #24
 8006228:	189b      	adds	r3, r3, r2
 800622a:	19db      	adds	r3, r3, r7
 800622c:	2208      	movs	r2, #8
 800622e:	701a      	strb	r2, [r3, #0]
 8006230:	e09f      	b.n	8006372 <UART_SetConfig+0x22a>
 8006232:	231b      	movs	r3, #27
 8006234:	2218      	movs	r2, #24
 8006236:	189b      	adds	r3, r3, r2
 8006238:	19db      	adds	r3, r3, r7
 800623a:	2210      	movs	r2, #16
 800623c:	701a      	strb	r2, [r3, #0]
 800623e:	e098      	b.n	8006372 <UART_SetConfig+0x22a>
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a96      	ldr	r2, [pc, #600]	@ (80064a0 <UART_SetConfig+0x358>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d131      	bne.n	80062ae <UART_SetConfig+0x166>
 800624a:	4b94      	ldr	r3, [pc, #592]	@ (800649c <UART_SetConfig+0x354>)
 800624c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800624e:	220c      	movs	r2, #12
 8006250:	4013      	ands	r3, r2
 8006252:	2b0c      	cmp	r3, #12
 8006254:	d01d      	beq.n	8006292 <UART_SetConfig+0x14a>
 8006256:	d823      	bhi.n	80062a0 <UART_SetConfig+0x158>
 8006258:	2b08      	cmp	r3, #8
 800625a:	d00c      	beq.n	8006276 <UART_SetConfig+0x12e>
 800625c:	d820      	bhi.n	80062a0 <UART_SetConfig+0x158>
 800625e:	2b00      	cmp	r3, #0
 8006260:	d002      	beq.n	8006268 <UART_SetConfig+0x120>
 8006262:	2b04      	cmp	r3, #4
 8006264:	d00e      	beq.n	8006284 <UART_SetConfig+0x13c>
 8006266:	e01b      	b.n	80062a0 <UART_SetConfig+0x158>
 8006268:	231b      	movs	r3, #27
 800626a:	2218      	movs	r2, #24
 800626c:	189b      	adds	r3, r3, r2
 800626e:	19db      	adds	r3, r3, r7
 8006270:	2200      	movs	r2, #0
 8006272:	701a      	strb	r2, [r3, #0]
 8006274:	e07d      	b.n	8006372 <UART_SetConfig+0x22a>
 8006276:	231b      	movs	r3, #27
 8006278:	2218      	movs	r2, #24
 800627a:	189b      	adds	r3, r3, r2
 800627c:	19db      	adds	r3, r3, r7
 800627e:	2202      	movs	r2, #2
 8006280:	701a      	strb	r2, [r3, #0]
 8006282:	e076      	b.n	8006372 <UART_SetConfig+0x22a>
 8006284:	231b      	movs	r3, #27
 8006286:	2218      	movs	r2, #24
 8006288:	189b      	adds	r3, r3, r2
 800628a:	19db      	adds	r3, r3, r7
 800628c:	2204      	movs	r2, #4
 800628e:	701a      	strb	r2, [r3, #0]
 8006290:	e06f      	b.n	8006372 <UART_SetConfig+0x22a>
 8006292:	231b      	movs	r3, #27
 8006294:	2218      	movs	r2, #24
 8006296:	189b      	adds	r3, r3, r2
 8006298:	19db      	adds	r3, r3, r7
 800629a:	2208      	movs	r2, #8
 800629c:	701a      	strb	r2, [r3, #0]
 800629e:	e068      	b.n	8006372 <UART_SetConfig+0x22a>
 80062a0:	231b      	movs	r3, #27
 80062a2:	2218      	movs	r2, #24
 80062a4:	189b      	adds	r3, r3, r2
 80062a6:	19db      	adds	r3, r3, r7
 80062a8:	2210      	movs	r2, #16
 80062aa:	701a      	strb	r2, [r3, #0]
 80062ac:	e061      	b.n	8006372 <UART_SetConfig+0x22a>
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a7c      	ldr	r2, [pc, #496]	@ (80064a4 <UART_SetConfig+0x35c>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d106      	bne.n	80062c6 <UART_SetConfig+0x17e>
 80062b8:	231b      	movs	r3, #27
 80062ba:	2218      	movs	r2, #24
 80062bc:	189b      	adds	r3, r3, r2
 80062be:	19db      	adds	r3, r3, r7
 80062c0:	2200      	movs	r2, #0
 80062c2:	701a      	strb	r2, [r3, #0]
 80062c4:	e055      	b.n	8006372 <UART_SetConfig+0x22a>
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a77      	ldr	r2, [pc, #476]	@ (80064a8 <UART_SetConfig+0x360>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d106      	bne.n	80062de <UART_SetConfig+0x196>
 80062d0:	231b      	movs	r3, #27
 80062d2:	2218      	movs	r2, #24
 80062d4:	189b      	adds	r3, r3, r2
 80062d6:	19db      	adds	r3, r3, r7
 80062d8:	2200      	movs	r2, #0
 80062da:	701a      	strb	r2, [r3, #0]
 80062dc:	e049      	b.n	8006372 <UART_SetConfig+0x22a>
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a6b      	ldr	r2, [pc, #428]	@ (8006490 <UART_SetConfig+0x348>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d13e      	bne.n	8006366 <UART_SetConfig+0x21e>
 80062e8:	4b6c      	ldr	r3, [pc, #432]	@ (800649c <UART_SetConfig+0x354>)
 80062ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80062ec:	23c0      	movs	r3, #192	@ 0xc0
 80062ee:	011b      	lsls	r3, r3, #4
 80062f0:	4013      	ands	r3, r2
 80062f2:	22c0      	movs	r2, #192	@ 0xc0
 80062f4:	0112      	lsls	r2, r2, #4
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d027      	beq.n	800634a <UART_SetConfig+0x202>
 80062fa:	22c0      	movs	r2, #192	@ 0xc0
 80062fc:	0112      	lsls	r2, r2, #4
 80062fe:	4293      	cmp	r3, r2
 8006300:	d82a      	bhi.n	8006358 <UART_SetConfig+0x210>
 8006302:	2280      	movs	r2, #128	@ 0x80
 8006304:	0112      	lsls	r2, r2, #4
 8006306:	4293      	cmp	r3, r2
 8006308:	d011      	beq.n	800632e <UART_SetConfig+0x1e6>
 800630a:	2280      	movs	r2, #128	@ 0x80
 800630c:	0112      	lsls	r2, r2, #4
 800630e:	4293      	cmp	r3, r2
 8006310:	d822      	bhi.n	8006358 <UART_SetConfig+0x210>
 8006312:	2b00      	cmp	r3, #0
 8006314:	d004      	beq.n	8006320 <UART_SetConfig+0x1d8>
 8006316:	2280      	movs	r2, #128	@ 0x80
 8006318:	00d2      	lsls	r2, r2, #3
 800631a:	4293      	cmp	r3, r2
 800631c:	d00e      	beq.n	800633c <UART_SetConfig+0x1f4>
 800631e:	e01b      	b.n	8006358 <UART_SetConfig+0x210>
 8006320:	231b      	movs	r3, #27
 8006322:	2218      	movs	r2, #24
 8006324:	189b      	adds	r3, r3, r2
 8006326:	19db      	adds	r3, r3, r7
 8006328:	2200      	movs	r2, #0
 800632a:	701a      	strb	r2, [r3, #0]
 800632c:	e021      	b.n	8006372 <UART_SetConfig+0x22a>
 800632e:	231b      	movs	r3, #27
 8006330:	2218      	movs	r2, #24
 8006332:	189b      	adds	r3, r3, r2
 8006334:	19db      	adds	r3, r3, r7
 8006336:	2202      	movs	r2, #2
 8006338:	701a      	strb	r2, [r3, #0]
 800633a:	e01a      	b.n	8006372 <UART_SetConfig+0x22a>
 800633c:	231b      	movs	r3, #27
 800633e:	2218      	movs	r2, #24
 8006340:	189b      	adds	r3, r3, r2
 8006342:	19db      	adds	r3, r3, r7
 8006344:	2204      	movs	r2, #4
 8006346:	701a      	strb	r2, [r3, #0]
 8006348:	e013      	b.n	8006372 <UART_SetConfig+0x22a>
 800634a:	231b      	movs	r3, #27
 800634c:	2218      	movs	r2, #24
 800634e:	189b      	adds	r3, r3, r2
 8006350:	19db      	adds	r3, r3, r7
 8006352:	2208      	movs	r2, #8
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	e00c      	b.n	8006372 <UART_SetConfig+0x22a>
 8006358:	231b      	movs	r3, #27
 800635a:	2218      	movs	r2, #24
 800635c:	189b      	adds	r3, r3, r2
 800635e:	19db      	adds	r3, r3, r7
 8006360:	2210      	movs	r2, #16
 8006362:	701a      	strb	r2, [r3, #0]
 8006364:	e005      	b.n	8006372 <UART_SetConfig+0x22a>
 8006366:	231b      	movs	r3, #27
 8006368:	2218      	movs	r2, #24
 800636a:	189b      	adds	r3, r3, r2
 800636c:	19db      	adds	r3, r3, r7
 800636e:	2210      	movs	r2, #16
 8006370:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a46      	ldr	r2, [pc, #280]	@ (8006490 <UART_SetConfig+0x348>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d000      	beq.n	800637e <UART_SetConfig+0x236>
 800637c:	e09a      	b.n	80064b4 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800637e:	231b      	movs	r3, #27
 8006380:	2218      	movs	r2, #24
 8006382:	189b      	adds	r3, r3, r2
 8006384:	19db      	adds	r3, r3, r7
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	2b08      	cmp	r3, #8
 800638a:	d01d      	beq.n	80063c8 <UART_SetConfig+0x280>
 800638c:	dc20      	bgt.n	80063d0 <UART_SetConfig+0x288>
 800638e:	2b04      	cmp	r3, #4
 8006390:	d015      	beq.n	80063be <UART_SetConfig+0x276>
 8006392:	dc1d      	bgt.n	80063d0 <UART_SetConfig+0x288>
 8006394:	2b00      	cmp	r3, #0
 8006396:	d002      	beq.n	800639e <UART_SetConfig+0x256>
 8006398:	2b02      	cmp	r3, #2
 800639a:	d005      	beq.n	80063a8 <UART_SetConfig+0x260>
 800639c:	e018      	b.n	80063d0 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800639e:	f7ff fc15 	bl	8005bcc <HAL_RCC_GetPCLK1Freq>
 80063a2:	0003      	movs	r3, r0
 80063a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80063a6:	e01c      	b.n	80063e2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063a8:	4b3c      	ldr	r3, [pc, #240]	@ (800649c <UART_SetConfig+0x354>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2210      	movs	r2, #16
 80063ae:	4013      	ands	r3, r2
 80063b0:	d002      	beq.n	80063b8 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80063b2:	4b3e      	ldr	r3, [pc, #248]	@ (80064ac <UART_SetConfig+0x364>)
 80063b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063b6:	e014      	b.n	80063e2 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80063b8:	4b3d      	ldr	r3, [pc, #244]	@ (80064b0 <UART_SetConfig+0x368>)
 80063ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80063bc:	e011      	b.n	80063e2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063be:	f7ff fb55 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 80063c2:	0003      	movs	r3, r0
 80063c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80063c6:	e00c      	b.n	80063e2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063c8:	2380      	movs	r3, #128	@ 0x80
 80063ca:	021b      	lsls	r3, r3, #8
 80063cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80063ce:	e008      	b.n	80063e2 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80063d0:	2300      	movs	r3, #0
 80063d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80063d4:	231a      	movs	r3, #26
 80063d6:	2218      	movs	r2, #24
 80063d8:	189b      	adds	r3, r3, r2
 80063da:	19db      	adds	r3, r3, r7
 80063dc:	2201      	movs	r2, #1
 80063de:	701a      	strb	r2, [r3, #0]
        break;
 80063e0:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80063e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d100      	bne.n	80063ea <UART_SetConfig+0x2a2>
 80063e8:	e133      	b.n	8006652 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	0013      	movs	r3, r2
 80063f0:	005b      	lsls	r3, r3, #1
 80063f2:	189b      	adds	r3, r3, r2
 80063f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d305      	bcc.n	8006406 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006400:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006402:	429a      	cmp	r2, r3
 8006404:	d906      	bls.n	8006414 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8006406:	231a      	movs	r3, #26
 8006408:	2218      	movs	r2, #24
 800640a:	189b      	adds	r3, r3, r2
 800640c:	19db      	adds	r3, r3, r7
 800640e:	2201      	movs	r2, #1
 8006410:	701a      	strb	r2, [r3, #0]
 8006412:	e11e      	b.n	8006652 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006416:	613b      	str	r3, [r7, #16]
 8006418:	2300      	movs	r3, #0
 800641a:	617b      	str	r3, [r7, #20]
 800641c:	6939      	ldr	r1, [r7, #16]
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	000b      	movs	r3, r1
 8006422:	0e1b      	lsrs	r3, r3, #24
 8006424:	0010      	movs	r0, r2
 8006426:	0205      	lsls	r5, r0, #8
 8006428:	431d      	orrs	r5, r3
 800642a:	000b      	movs	r3, r1
 800642c:	021c      	lsls	r4, r3, #8
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	085b      	lsrs	r3, r3, #1
 8006434:	60bb      	str	r3, [r7, #8]
 8006436:	2300      	movs	r3, #0
 8006438:	60fb      	str	r3, [r7, #12]
 800643a:	68b8      	ldr	r0, [r7, #8]
 800643c:	68f9      	ldr	r1, [r7, #12]
 800643e:	1900      	adds	r0, r0, r4
 8006440:	4169      	adcs	r1, r5
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	603b      	str	r3, [r7, #0]
 8006448:	2300      	movs	r3, #0
 800644a:	607b      	str	r3, [r7, #4]
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f7fa f84e 	bl	80004f0 <__aeabi_uldivmod>
 8006454:	0002      	movs	r2, r0
 8006456:	000b      	movs	r3, r1
 8006458:	0013      	movs	r3, r2
 800645a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800645c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800645e:	23c0      	movs	r3, #192	@ 0xc0
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	429a      	cmp	r2, r3
 8006464:	d309      	bcc.n	800647a <UART_SetConfig+0x332>
 8006466:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006468:	2380      	movs	r3, #128	@ 0x80
 800646a:	035b      	lsls	r3, r3, #13
 800646c:	429a      	cmp	r2, r3
 800646e:	d204      	bcs.n	800647a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006476:	60da      	str	r2, [r3, #12]
 8006478:	e0eb      	b.n	8006652 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 800647a:	231a      	movs	r3, #26
 800647c:	2218      	movs	r2, #24
 800647e:	189b      	adds	r3, r3, r2
 8006480:	19db      	adds	r3, r3, r7
 8006482:	2201      	movs	r2, #1
 8006484:	701a      	strb	r2, [r3, #0]
 8006486:	e0e4      	b.n	8006652 <UART_SetConfig+0x50a>
 8006488:	efff69f3 	.word	0xefff69f3
 800648c:	ffffcfff 	.word	0xffffcfff
 8006490:	40004800 	.word	0x40004800
 8006494:	fffff4ff 	.word	0xfffff4ff
 8006498:	40013800 	.word	0x40013800
 800649c:	40021000 	.word	0x40021000
 80064a0:	40004400 	.word	0x40004400
 80064a4:	40004c00 	.word	0x40004c00
 80064a8:	40005000 	.word	0x40005000
 80064ac:	003d0900 	.word	0x003d0900
 80064b0:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	69da      	ldr	r2, [r3, #28]
 80064b8:	2380      	movs	r3, #128	@ 0x80
 80064ba:	021b      	lsls	r3, r3, #8
 80064bc:	429a      	cmp	r2, r3
 80064be:	d000      	beq.n	80064c2 <UART_SetConfig+0x37a>
 80064c0:	e070      	b.n	80065a4 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80064c2:	231b      	movs	r3, #27
 80064c4:	2218      	movs	r2, #24
 80064c6:	189b      	adds	r3, r3, r2
 80064c8:	19db      	adds	r3, r3, r7
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	2b08      	cmp	r3, #8
 80064ce:	d822      	bhi.n	8006516 <UART_SetConfig+0x3ce>
 80064d0:	009a      	lsls	r2, r3, #2
 80064d2:	4b67      	ldr	r3, [pc, #412]	@ (8006670 <UART_SetConfig+0x528>)
 80064d4:	18d3      	adds	r3, r2, r3
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064da:	f7ff fb77 	bl	8005bcc <HAL_RCC_GetPCLK1Freq>
 80064de:	0003      	movs	r3, r0
 80064e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80064e2:	e021      	b.n	8006528 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064e4:	f7ff fb88 	bl	8005bf8 <HAL_RCC_GetPCLK2Freq>
 80064e8:	0003      	movs	r3, r0
 80064ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80064ec:	e01c      	b.n	8006528 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064ee:	4b61      	ldr	r3, [pc, #388]	@ (8006674 <UART_SetConfig+0x52c>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2210      	movs	r2, #16
 80064f4:	4013      	ands	r3, r2
 80064f6:	d002      	beq.n	80064fe <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80064f8:	4b5f      	ldr	r3, [pc, #380]	@ (8006678 <UART_SetConfig+0x530>)
 80064fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80064fc:	e014      	b.n	8006528 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80064fe:	4b5f      	ldr	r3, [pc, #380]	@ (800667c <UART_SetConfig+0x534>)
 8006500:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006502:	e011      	b.n	8006528 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006504:	f7ff fab2 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 8006508:	0003      	movs	r3, r0
 800650a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800650c:	e00c      	b.n	8006528 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800650e:	2380      	movs	r3, #128	@ 0x80
 8006510:	021b      	lsls	r3, r3, #8
 8006512:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006514:	e008      	b.n	8006528 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8006516:	2300      	movs	r3, #0
 8006518:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800651a:	231a      	movs	r3, #26
 800651c:	2218      	movs	r2, #24
 800651e:	189b      	adds	r3, r3, r2
 8006520:	19db      	adds	r3, r3, r7
 8006522:	2201      	movs	r2, #1
 8006524:	701a      	strb	r2, [r3, #0]
        break;
 8006526:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800652a:	2b00      	cmp	r3, #0
 800652c:	d100      	bne.n	8006530 <UART_SetConfig+0x3e8>
 800652e:	e090      	b.n	8006652 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006532:	005a      	lsls	r2, r3, #1
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	085b      	lsrs	r3, r3, #1
 800653a:	18d2      	adds	r2, r2, r3
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	0019      	movs	r1, r3
 8006542:	0010      	movs	r0, r2
 8006544:	f7f9 fdfc 	bl	8000140 <__udivsi3>
 8006548:	0003      	movs	r3, r0
 800654a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800654c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800654e:	2b0f      	cmp	r3, #15
 8006550:	d921      	bls.n	8006596 <UART_SetConfig+0x44e>
 8006552:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006554:	2380      	movs	r3, #128	@ 0x80
 8006556:	025b      	lsls	r3, r3, #9
 8006558:	429a      	cmp	r2, r3
 800655a:	d21c      	bcs.n	8006596 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800655c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800655e:	b29a      	uxth	r2, r3
 8006560:	200e      	movs	r0, #14
 8006562:	2418      	movs	r4, #24
 8006564:	1903      	adds	r3, r0, r4
 8006566:	19db      	adds	r3, r3, r7
 8006568:	210f      	movs	r1, #15
 800656a:	438a      	bics	r2, r1
 800656c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800656e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006570:	085b      	lsrs	r3, r3, #1
 8006572:	b29b      	uxth	r3, r3
 8006574:	2207      	movs	r2, #7
 8006576:	4013      	ands	r3, r2
 8006578:	b299      	uxth	r1, r3
 800657a:	1903      	adds	r3, r0, r4
 800657c:	19db      	adds	r3, r3, r7
 800657e:	1902      	adds	r2, r0, r4
 8006580:	19d2      	adds	r2, r2, r7
 8006582:	8812      	ldrh	r2, [r2, #0]
 8006584:	430a      	orrs	r2, r1
 8006586:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	1902      	adds	r2, r0, r4
 800658e:	19d2      	adds	r2, r2, r7
 8006590:	8812      	ldrh	r2, [r2, #0]
 8006592:	60da      	str	r2, [r3, #12]
 8006594:	e05d      	b.n	8006652 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8006596:	231a      	movs	r3, #26
 8006598:	2218      	movs	r2, #24
 800659a:	189b      	adds	r3, r3, r2
 800659c:	19db      	adds	r3, r3, r7
 800659e:	2201      	movs	r2, #1
 80065a0:	701a      	strb	r2, [r3, #0]
 80065a2:	e056      	b.n	8006652 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065a4:	231b      	movs	r3, #27
 80065a6:	2218      	movs	r2, #24
 80065a8:	189b      	adds	r3, r3, r2
 80065aa:	19db      	adds	r3, r3, r7
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	2b08      	cmp	r3, #8
 80065b0:	d822      	bhi.n	80065f8 <UART_SetConfig+0x4b0>
 80065b2:	009a      	lsls	r2, r3, #2
 80065b4:	4b32      	ldr	r3, [pc, #200]	@ (8006680 <UART_SetConfig+0x538>)
 80065b6:	18d3      	adds	r3, r2, r3
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065bc:	f7ff fb06 	bl	8005bcc <HAL_RCC_GetPCLK1Freq>
 80065c0:	0003      	movs	r3, r0
 80065c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80065c4:	e021      	b.n	800660a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065c6:	f7ff fb17 	bl	8005bf8 <HAL_RCC_GetPCLK2Freq>
 80065ca:	0003      	movs	r3, r0
 80065cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80065ce:	e01c      	b.n	800660a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065d0:	4b28      	ldr	r3, [pc, #160]	@ (8006674 <UART_SetConfig+0x52c>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2210      	movs	r2, #16
 80065d6:	4013      	ands	r3, r2
 80065d8:	d002      	beq.n	80065e0 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80065da:	4b27      	ldr	r3, [pc, #156]	@ (8006678 <UART_SetConfig+0x530>)
 80065dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80065de:	e014      	b.n	800660a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80065e0:	4b26      	ldr	r3, [pc, #152]	@ (800667c <UART_SetConfig+0x534>)
 80065e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80065e4:	e011      	b.n	800660a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065e6:	f7ff fa41 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 80065ea:	0003      	movs	r3, r0
 80065ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80065ee:	e00c      	b.n	800660a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065f0:	2380      	movs	r3, #128	@ 0x80
 80065f2:	021b      	lsls	r3, r3, #8
 80065f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80065f6:	e008      	b.n	800660a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80065f8:	2300      	movs	r3, #0
 80065fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80065fc:	231a      	movs	r3, #26
 80065fe:	2218      	movs	r2, #24
 8006600:	189b      	adds	r3, r3, r2
 8006602:	19db      	adds	r3, r3, r7
 8006604:	2201      	movs	r2, #1
 8006606:	701a      	strb	r2, [r3, #0]
        break;
 8006608:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800660a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800660c:	2b00      	cmp	r3, #0
 800660e:	d020      	beq.n	8006652 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	085a      	lsrs	r2, r3, #1
 8006616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006618:	18d2      	adds	r2, r2, r3
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	0019      	movs	r1, r3
 8006620:	0010      	movs	r0, r2
 8006622:	f7f9 fd8d 	bl	8000140 <__udivsi3>
 8006626:	0003      	movs	r3, r0
 8006628:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800662a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800662c:	2b0f      	cmp	r3, #15
 800662e:	d90a      	bls.n	8006646 <UART_SetConfig+0x4fe>
 8006630:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006632:	2380      	movs	r3, #128	@ 0x80
 8006634:	025b      	lsls	r3, r3, #9
 8006636:	429a      	cmp	r2, r3
 8006638:	d205      	bcs.n	8006646 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800663a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663c:	b29a      	uxth	r2, r3
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	60da      	str	r2, [r3, #12]
 8006644:	e005      	b.n	8006652 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8006646:	231a      	movs	r3, #26
 8006648:	2218      	movs	r2, #24
 800664a:	189b      	adds	r3, r3, r2
 800664c:	19db      	adds	r3, r3, r7
 800664e:	2201      	movs	r2, #1
 8006650:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	2200      	movs	r2, #0
 8006656:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	2200      	movs	r2, #0
 800665c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800665e:	231a      	movs	r3, #26
 8006660:	2218      	movs	r2, #24
 8006662:	189b      	adds	r3, r3, r2
 8006664:	19db      	adds	r3, r3, r7
 8006666:	781b      	ldrb	r3, [r3, #0]
}
 8006668:	0018      	movs	r0, r3
 800666a:	46bd      	mov	sp, r7
 800666c:	b00e      	add	sp, #56	@ 0x38
 800666e:	bdb0      	pop	{r4, r5, r7, pc}
 8006670:	08009a90 	.word	0x08009a90
 8006674:	40021000 	.word	0x40021000
 8006678:	003d0900 	.word	0x003d0900
 800667c:	00f42400 	.word	0x00f42400
 8006680:	08009ab4 	.word	0x08009ab4

08006684 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006690:	2201      	movs	r2, #1
 8006692:	4013      	ands	r3, r2
 8006694:	d00b      	beq.n	80066ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	4a4a      	ldr	r2, [pc, #296]	@ (80067c8 <UART_AdvFeatureConfig+0x144>)
 800669e:	4013      	ands	r3, r2
 80066a0:	0019      	movs	r1, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b2:	2202      	movs	r2, #2
 80066b4:	4013      	ands	r3, r2
 80066b6:	d00b      	beq.n	80066d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	4a43      	ldr	r2, [pc, #268]	@ (80067cc <UART_AdvFeatureConfig+0x148>)
 80066c0:	4013      	ands	r3, r2
 80066c2:	0019      	movs	r1, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	430a      	orrs	r2, r1
 80066ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d4:	2204      	movs	r2, #4
 80066d6:	4013      	ands	r3, r2
 80066d8:	d00b      	beq.n	80066f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	4a3b      	ldr	r2, [pc, #236]	@ (80067d0 <UART_AdvFeatureConfig+0x14c>)
 80066e2:	4013      	ands	r3, r2
 80066e4:	0019      	movs	r1, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	430a      	orrs	r2, r1
 80066f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f6:	2208      	movs	r2, #8
 80066f8:	4013      	ands	r3, r2
 80066fa:	d00b      	beq.n	8006714 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	4a34      	ldr	r2, [pc, #208]	@ (80067d4 <UART_AdvFeatureConfig+0x150>)
 8006704:	4013      	ands	r3, r2
 8006706:	0019      	movs	r1, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	430a      	orrs	r2, r1
 8006712:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006718:	2210      	movs	r2, #16
 800671a:	4013      	ands	r3, r2
 800671c:	d00b      	beq.n	8006736 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	4a2c      	ldr	r2, [pc, #176]	@ (80067d8 <UART_AdvFeatureConfig+0x154>)
 8006726:	4013      	ands	r3, r2
 8006728:	0019      	movs	r1, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	430a      	orrs	r2, r1
 8006734:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800673a:	2220      	movs	r2, #32
 800673c:	4013      	ands	r3, r2
 800673e:	d00b      	beq.n	8006758 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	4a25      	ldr	r2, [pc, #148]	@ (80067dc <UART_AdvFeatureConfig+0x158>)
 8006748:	4013      	ands	r3, r2
 800674a:	0019      	movs	r1, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800675c:	2240      	movs	r2, #64	@ 0x40
 800675e:	4013      	ands	r3, r2
 8006760:	d01d      	beq.n	800679e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	4a1d      	ldr	r2, [pc, #116]	@ (80067e0 <UART_AdvFeatureConfig+0x15c>)
 800676a:	4013      	ands	r3, r2
 800676c:	0019      	movs	r1, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	430a      	orrs	r2, r1
 8006778:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800677e:	2380      	movs	r3, #128	@ 0x80
 8006780:	035b      	lsls	r3, r3, #13
 8006782:	429a      	cmp	r2, r3
 8006784:	d10b      	bne.n	800679e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	4a15      	ldr	r2, [pc, #84]	@ (80067e4 <UART_AdvFeatureConfig+0x160>)
 800678e:	4013      	ands	r3, r2
 8006790:	0019      	movs	r1, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	430a      	orrs	r2, r1
 800679c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a2:	2280      	movs	r2, #128	@ 0x80
 80067a4:	4013      	ands	r3, r2
 80067a6:	d00b      	beq.n	80067c0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	4a0e      	ldr	r2, [pc, #56]	@ (80067e8 <UART_AdvFeatureConfig+0x164>)
 80067b0:	4013      	ands	r3, r2
 80067b2:	0019      	movs	r1, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	430a      	orrs	r2, r1
 80067be:	605a      	str	r2, [r3, #4]
  }
}
 80067c0:	46c0      	nop			@ (mov r8, r8)
 80067c2:	46bd      	mov	sp, r7
 80067c4:	b002      	add	sp, #8
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	fffdffff 	.word	0xfffdffff
 80067cc:	fffeffff 	.word	0xfffeffff
 80067d0:	fffbffff 	.word	0xfffbffff
 80067d4:	ffff7fff 	.word	0xffff7fff
 80067d8:	ffffefff 	.word	0xffffefff
 80067dc:	ffffdfff 	.word	0xffffdfff
 80067e0:	ffefffff 	.word	0xffefffff
 80067e4:	ff9fffff 	.word	0xff9fffff
 80067e8:	fff7ffff 	.word	0xfff7ffff

080067ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b092      	sub	sp, #72	@ 0x48
 80067f0:	af02      	add	r7, sp, #8
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2284      	movs	r2, #132	@ 0x84
 80067f8:	2100      	movs	r1, #0
 80067fa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067fc:	f7fd fb1a 	bl	8003e34 <HAL_GetTick>
 8006800:	0003      	movs	r3, r0
 8006802:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2208      	movs	r2, #8
 800680c:	4013      	ands	r3, r2
 800680e:	2b08      	cmp	r3, #8
 8006810:	d12c      	bne.n	800686c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006814:	2280      	movs	r2, #128	@ 0x80
 8006816:	0391      	lsls	r1, r2, #14
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	4a46      	ldr	r2, [pc, #280]	@ (8006934 <UART_CheckIdleState+0x148>)
 800681c:	9200      	str	r2, [sp, #0]
 800681e:	2200      	movs	r2, #0
 8006820:	f000 f88c 	bl	800693c <UART_WaitOnFlagUntilTimeout>
 8006824:	1e03      	subs	r3, r0, #0
 8006826:	d021      	beq.n	800686c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006828:	f3ef 8310 	mrs	r3, PRIMASK
 800682c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800682e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006830:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006832:	2301      	movs	r3, #1
 8006834:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006838:	f383 8810 	msr	PRIMASK, r3
}
 800683c:	46c0      	nop			@ (mov r8, r8)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2180      	movs	r1, #128	@ 0x80
 800684a:	438a      	bics	r2, r1
 800684c:	601a      	str	r2, [r3, #0]
 800684e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006850:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006854:	f383 8810 	msr	PRIMASK, r3
}
 8006858:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2220      	movs	r2, #32
 800685e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2278      	movs	r2, #120	@ 0x78
 8006864:	2100      	movs	r1, #0
 8006866:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e05f      	b.n	800692c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2204      	movs	r2, #4
 8006874:	4013      	ands	r3, r2
 8006876:	2b04      	cmp	r3, #4
 8006878:	d146      	bne.n	8006908 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800687a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800687c:	2280      	movs	r2, #128	@ 0x80
 800687e:	03d1      	lsls	r1, r2, #15
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	4a2c      	ldr	r2, [pc, #176]	@ (8006934 <UART_CheckIdleState+0x148>)
 8006884:	9200      	str	r2, [sp, #0]
 8006886:	2200      	movs	r2, #0
 8006888:	f000 f858 	bl	800693c <UART_WaitOnFlagUntilTimeout>
 800688c:	1e03      	subs	r3, r0, #0
 800688e:	d03b      	beq.n	8006908 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006890:	f3ef 8310 	mrs	r3, PRIMASK
 8006894:	60fb      	str	r3, [r7, #12]
  return(result);
 8006896:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006898:	637b      	str	r3, [r7, #52]	@ 0x34
 800689a:	2301      	movs	r3, #1
 800689c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	f383 8810 	msr	PRIMASK, r3
}
 80068a4:	46c0      	nop			@ (mov r8, r8)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4921      	ldr	r1, [pc, #132]	@ (8006938 <UART_CheckIdleState+0x14c>)
 80068b2:	400a      	ands	r2, r1
 80068b4:	601a      	str	r2, [r3, #0]
 80068b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	f383 8810 	msr	PRIMASK, r3
}
 80068c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068c2:	f3ef 8310 	mrs	r3, PRIMASK
 80068c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80068c8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80068cc:	2301      	movs	r3, #1
 80068ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	f383 8810 	msr	PRIMASK, r3
}
 80068d6:	46c0      	nop			@ (mov r8, r8)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	689a      	ldr	r2, [r3, #8]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2101      	movs	r1, #1
 80068e4:	438a      	bics	r2, r1
 80068e6:	609a      	str	r2, [r3, #8]
 80068e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068ec:	6a3b      	ldr	r3, [r7, #32]
 80068ee:	f383 8810 	msr	PRIMASK, r3
}
 80068f2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2280      	movs	r2, #128	@ 0x80
 80068f8:	2120      	movs	r1, #32
 80068fa:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2278      	movs	r2, #120	@ 0x78
 8006900:	2100      	movs	r1, #0
 8006902:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e011      	b.n	800692c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2220      	movs	r2, #32
 800690c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2280      	movs	r2, #128	@ 0x80
 8006912:	2120      	movs	r1, #32
 8006914:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2278      	movs	r2, #120	@ 0x78
 8006926:	2100      	movs	r1, #0
 8006928:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	0018      	movs	r0, r3
 800692e:	46bd      	mov	sp, r7
 8006930:	b010      	add	sp, #64	@ 0x40
 8006932:	bd80      	pop	{r7, pc}
 8006934:	01ffffff 	.word	0x01ffffff
 8006938:	fffffedf 	.word	0xfffffedf

0800693c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	603b      	str	r3, [r7, #0]
 8006948:	1dfb      	adds	r3, r7, #7
 800694a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800694c:	e04b      	b.n	80069e6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	3301      	adds	r3, #1
 8006952:	d048      	beq.n	80069e6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006954:	f7fd fa6e 	bl	8003e34 <HAL_GetTick>
 8006958:	0002      	movs	r2, r0
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	69ba      	ldr	r2, [r7, #24]
 8006960:	429a      	cmp	r2, r3
 8006962:	d302      	bcc.n	800696a <UART_WaitOnFlagUntilTimeout+0x2e>
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d101      	bne.n	800696e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e04b      	b.n	8006a06 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2204      	movs	r2, #4
 8006976:	4013      	ands	r3, r2
 8006978:	d035      	beq.n	80069e6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	69db      	ldr	r3, [r3, #28]
 8006980:	2208      	movs	r2, #8
 8006982:	4013      	ands	r3, r2
 8006984:	2b08      	cmp	r3, #8
 8006986:	d111      	bne.n	80069ac <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2208      	movs	r2, #8
 800698e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	0018      	movs	r0, r3
 8006994:	f000 f83c 	bl	8006a10 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2284      	movs	r2, #132	@ 0x84
 800699c:	2108      	movs	r1, #8
 800699e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2278      	movs	r2, #120	@ 0x78
 80069a4:	2100      	movs	r1, #0
 80069a6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e02c      	b.n	8006a06 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	69da      	ldr	r2, [r3, #28]
 80069b2:	2380      	movs	r3, #128	@ 0x80
 80069b4:	011b      	lsls	r3, r3, #4
 80069b6:	401a      	ands	r2, r3
 80069b8:	2380      	movs	r3, #128	@ 0x80
 80069ba:	011b      	lsls	r3, r3, #4
 80069bc:	429a      	cmp	r2, r3
 80069be:	d112      	bne.n	80069e6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2280      	movs	r2, #128	@ 0x80
 80069c6:	0112      	lsls	r2, r2, #4
 80069c8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	0018      	movs	r0, r3
 80069ce:	f000 f81f 	bl	8006a10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2284      	movs	r2, #132	@ 0x84
 80069d6:	2120      	movs	r1, #32
 80069d8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2278      	movs	r2, #120	@ 0x78
 80069de:	2100      	movs	r1, #0
 80069e0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e00f      	b.n	8006a06 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	69db      	ldr	r3, [r3, #28]
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	4013      	ands	r3, r2
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	425a      	negs	r2, r3
 80069f6:	4153      	adcs	r3, r2
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	001a      	movs	r2, r3
 80069fc:	1dfb      	adds	r3, r7, #7
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d0a4      	beq.n	800694e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	0018      	movs	r0, r3
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	b004      	add	sp, #16
 8006a0c:	bd80      	pop	{r7, pc}
	...

08006a10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b08e      	sub	sp, #56	@ 0x38
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a18:	f3ef 8310 	mrs	r3, PRIMASK
 8006a1c:	617b      	str	r3, [r7, #20]
  return(result);
 8006a1e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a20:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a22:	2301      	movs	r3, #1
 8006a24:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	f383 8810 	msr	PRIMASK, r3
}
 8006a2c:	46c0      	nop			@ (mov r8, r8)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4926      	ldr	r1, [pc, #152]	@ (8006ad4 <UART_EndRxTransfer+0xc4>)
 8006a3a:	400a      	ands	r2, r1
 8006a3c:	601a      	str	r2, [r3, #0]
 8006a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	f383 8810 	msr	PRIMASK, r3
}
 8006a48:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a4e:	623b      	str	r3, [r7, #32]
  return(result);
 8006a50:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a52:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a54:	2301      	movs	r3, #1
 8006a56:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5a:	f383 8810 	msr	PRIMASK, r3
}
 8006a5e:	46c0      	nop			@ (mov r8, r8)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	689a      	ldr	r2, [r3, #8]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2101      	movs	r1, #1
 8006a6c:	438a      	bics	r2, r1
 8006a6e:	609a      	str	r2, [r3, #8]
 8006a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a72:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a76:	f383 8810 	msr	PRIMASK, r3
}
 8006a7a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d118      	bne.n	8006ab6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a84:	f3ef 8310 	mrs	r3, PRIMASK
 8006a88:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a8a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a8e:	2301      	movs	r3, #1
 8006a90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f383 8810 	msr	PRIMASK, r3
}
 8006a98:	46c0      	nop			@ (mov r8, r8)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2110      	movs	r1, #16
 8006aa6:	438a      	bics	r2, r1
 8006aa8:	601a      	str	r2, [r3, #0]
 8006aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	f383 8810 	msr	PRIMASK, r3
}
 8006ab4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2280      	movs	r2, #128	@ 0x80
 8006aba:	2120      	movs	r1, #32
 8006abc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006aca:	46c0      	nop			@ (mov r8, r8)
 8006acc:	46bd      	mov	sp, r7
 8006ace:	b00e      	add	sp, #56	@ 0x38
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	46c0      	nop			@ (mov r8, r8)
 8006ad4:	fffffedf 	.word	0xfffffedf

08006ad8 <__cvt>:
 8006ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ada:	001f      	movs	r7, r3
 8006adc:	2300      	movs	r3, #0
 8006ade:	0016      	movs	r6, r2
 8006ae0:	b08b      	sub	sp, #44	@ 0x2c
 8006ae2:	429f      	cmp	r7, r3
 8006ae4:	da04      	bge.n	8006af0 <__cvt+0x18>
 8006ae6:	2180      	movs	r1, #128	@ 0x80
 8006ae8:	0609      	lsls	r1, r1, #24
 8006aea:	187b      	adds	r3, r7, r1
 8006aec:	001f      	movs	r7, r3
 8006aee:	232d      	movs	r3, #45	@ 0x2d
 8006af0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006af2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8006af4:	7013      	strb	r3, [r2, #0]
 8006af6:	2320      	movs	r3, #32
 8006af8:	2203      	movs	r2, #3
 8006afa:	439d      	bics	r5, r3
 8006afc:	2d46      	cmp	r5, #70	@ 0x46
 8006afe:	d007      	beq.n	8006b10 <__cvt+0x38>
 8006b00:	002b      	movs	r3, r5
 8006b02:	3b45      	subs	r3, #69	@ 0x45
 8006b04:	4259      	negs	r1, r3
 8006b06:	414b      	adcs	r3, r1
 8006b08:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8006b0a:	3a01      	subs	r2, #1
 8006b0c:	18cb      	adds	r3, r1, r3
 8006b0e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006b10:	ab09      	add	r3, sp, #36	@ 0x24
 8006b12:	9304      	str	r3, [sp, #16]
 8006b14:	ab08      	add	r3, sp, #32
 8006b16:	9303      	str	r3, [sp, #12]
 8006b18:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006b1a:	9200      	str	r2, [sp, #0]
 8006b1c:	9302      	str	r3, [sp, #8]
 8006b1e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006b20:	0032      	movs	r2, r6
 8006b22:	9301      	str	r3, [sp, #4]
 8006b24:	003b      	movs	r3, r7
 8006b26:	f000 fdef 	bl	8007708 <_dtoa_r>
 8006b2a:	0004      	movs	r4, r0
 8006b2c:	2d47      	cmp	r5, #71	@ 0x47
 8006b2e:	d11b      	bne.n	8006b68 <__cvt+0x90>
 8006b30:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006b32:	07db      	lsls	r3, r3, #31
 8006b34:	d511      	bpl.n	8006b5a <__cvt+0x82>
 8006b36:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006b38:	18c3      	adds	r3, r0, r3
 8006b3a:	9307      	str	r3, [sp, #28]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	2300      	movs	r3, #0
 8006b40:	0030      	movs	r0, r6
 8006b42:	0039      	movs	r1, r7
 8006b44:	f7f9 fc82 	bl	800044c <__aeabi_dcmpeq>
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	d001      	beq.n	8006b50 <__cvt+0x78>
 8006b4c:	9b07      	ldr	r3, [sp, #28]
 8006b4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b50:	2230      	movs	r2, #48	@ 0x30
 8006b52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b54:	9907      	ldr	r1, [sp, #28]
 8006b56:	428b      	cmp	r3, r1
 8006b58:	d320      	bcc.n	8006b9c <__cvt+0xc4>
 8006b5a:	0020      	movs	r0, r4
 8006b5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b5e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006b60:	1b1b      	subs	r3, r3, r4
 8006b62:	6013      	str	r3, [r2, #0]
 8006b64:	b00b      	add	sp, #44	@ 0x2c
 8006b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006b6a:	18c3      	adds	r3, r0, r3
 8006b6c:	9307      	str	r3, [sp, #28]
 8006b6e:	2d46      	cmp	r5, #70	@ 0x46
 8006b70:	d1e4      	bne.n	8006b3c <__cvt+0x64>
 8006b72:	7803      	ldrb	r3, [r0, #0]
 8006b74:	2b30      	cmp	r3, #48	@ 0x30
 8006b76:	d10c      	bne.n	8006b92 <__cvt+0xba>
 8006b78:	2200      	movs	r2, #0
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	0030      	movs	r0, r6
 8006b7e:	0039      	movs	r1, r7
 8006b80:	f7f9 fc64 	bl	800044c <__aeabi_dcmpeq>
 8006b84:	2800      	cmp	r0, #0
 8006b86:	d104      	bne.n	8006b92 <__cvt+0xba>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8006b8c:	1a9b      	subs	r3, r3, r2
 8006b8e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006b90:	6013      	str	r3, [r2, #0]
 8006b92:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006b94:	9a07      	ldr	r2, [sp, #28]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	18d3      	adds	r3, r2, r3
 8006b9a:	e7ce      	b.n	8006b3a <__cvt+0x62>
 8006b9c:	1c59      	adds	r1, r3, #1
 8006b9e:	9109      	str	r1, [sp, #36]	@ 0x24
 8006ba0:	701a      	strb	r2, [r3, #0]
 8006ba2:	e7d6      	b.n	8006b52 <__cvt+0x7a>

08006ba4 <__exponent>:
 8006ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ba6:	232b      	movs	r3, #43	@ 0x2b
 8006ba8:	0005      	movs	r5, r0
 8006baa:	000c      	movs	r4, r1
 8006bac:	b085      	sub	sp, #20
 8006bae:	7002      	strb	r2, [r0, #0]
 8006bb0:	2900      	cmp	r1, #0
 8006bb2:	da01      	bge.n	8006bb8 <__exponent+0x14>
 8006bb4:	424c      	negs	r4, r1
 8006bb6:	3302      	adds	r3, #2
 8006bb8:	706b      	strb	r3, [r5, #1]
 8006bba:	2c09      	cmp	r4, #9
 8006bbc:	dd2c      	ble.n	8006c18 <__exponent+0x74>
 8006bbe:	ab02      	add	r3, sp, #8
 8006bc0:	1dde      	adds	r6, r3, #7
 8006bc2:	0020      	movs	r0, r4
 8006bc4:	210a      	movs	r1, #10
 8006bc6:	f7f9 fc2b 	bl	8000420 <__aeabi_idivmod>
 8006bca:	0037      	movs	r7, r6
 8006bcc:	3130      	adds	r1, #48	@ 0x30
 8006bce:	3e01      	subs	r6, #1
 8006bd0:	0020      	movs	r0, r4
 8006bd2:	7031      	strb	r1, [r6, #0]
 8006bd4:	210a      	movs	r1, #10
 8006bd6:	9401      	str	r4, [sp, #4]
 8006bd8:	f7f9 fb3c 	bl	8000254 <__divsi3>
 8006bdc:	9b01      	ldr	r3, [sp, #4]
 8006bde:	0004      	movs	r4, r0
 8006be0:	2b63      	cmp	r3, #99	@ 0x63
 8006be2:	dcee      	bgt.n	8006bc2 <__exponent+0x1e>
 8006be4:	1eba      	subs	r2, r7, #2
 8006be6:	1ca8      	adds	r0, r5, #2
 8006be8:	0001      	movs	r1, r0
 8006bea:	0013      	movs	r3, r2
 8006bec:	3430      	adds	r4, #48	@ 0x30
 8006bee:	7014      	strb	r4, [r2, #0]
 8006bf0:	ac02      	add	r4, sp, #8
 8006bf2:	3407      	adds	r4, #7
 8006bf4:	429c      	cmp	r4, r3
 8006bf6:	d80a      	bhi.n	8006c0e <__exponent+0x6a>
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	42a2      	cmp	r2, r4
 8006bfc:	d803      	bhi.n	8006c06 <__exponent+0x62>
 8006bfe:	3309      	adds	r3, #9
 8006c00:	aa02      	add	r2, sp, #8
 8006c02:	189b      	adds	r3, r3, r2
 8006c04:	1bdb      	subs	r3, r3, r7
 8006c06:	18c0      	adds	r0, r0, r3
 8006c08:	1b40      	subs	r0, r0, r5
 8006c0a:	b005      	add	sp, #20
 8006c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c0e:	781c      	ldrb	r4, [r3, #0]
 8006c10:	3301      	adds	r3, #1
 8006c12:	700c      	strb	r4, [r1, #0]
 8006c14:	3101      	adds	r1, #1
 8006c16:	e7eb      	b.n	8006bf0 <__exponent+0x4c>
 8006c18:	2330      	movs	r3, #48	@ 0x30
 8006c1a:	18e4      	adds	r4, r4, r3
 8006c1c:	70ab      	strb	r3, [r5, #2]
 8006c1e:	1d28      	adds	r0, r5, #4
 8006c20:	70ec      	strb	r4, [r5, #3]
 8006c22:	e7f1      	b.n	8006c08 <__exponent+0x64>

08006c24 <_printf_float>:
 8006c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c26:	b097      	sub	sp, #92	@ 0x5c
 8006c28:	000d      	movs	r5, r1
 8006c2a:	920a      	str	r2, [sp, #40]	@ 0x28
 8006c2c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8006c2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c30:	9009      	str	r0, [sp, #36]	@ 0x24
 8006c32:	f000 fc9f 	bl	8007574 <_localeconv_r>
 8006c36:	6803      	ldr	r3, [r0, #0]
 8006c38:	0018      	movs	r0, r3
 8006c3a:	930d      	str	r3, [sp, #52]	@ 0x34
 8006c3c:	f7f9 fa64 	bl	8000108 <strlen>
 8006c40:	2300      	movs	r3, #0
 8006c42:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006c44:	9314      	str	r3, [sp, #80]	@ 0x50
 8006c46:	7e2b      	ldrb	r3, [r5, #24]
 8006c48:	2207      	movs	r2, #7
 8006c4a:	930c      	str	r3, [sp, #48]	@ 0x30
 8006c4c:	682b      	ldr	r3, [r5, #0]
 8006c4e:	930e      	str	r3, [sp, #56]	@ 0x38
 8006c50:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006c52:	6823      	ldr	r3, [r4, #0]
 8006c54:	05c9      	lsls	r1, r1, #23
 8006c56:	d545      	bpl.n	8006ce4 <_printf_float+0xc0>
 8006c58:	189b      	adds	r3, r3, r2
 8006c5a:	4393      	bics	r3, r2
 8006c5c:	001a      	movs	r2, r3
 8006c5e:	3208      	adds	r2, #8
 8006c60:	6022      	str	r2, [r4, #0]
 8006c62:	2201      	movs	r2, #1
 8006c64:	681e      	ldr	r6, [r3, #0]
 8006c66:	685f      	ldr	r7, [r3, #4]
 8006c68:	007b      	lsls	r3, r7, #1
 8006c6a:	085b      	lsrs	r3, r3, #1
 8006c6c:	9311      	str	r3, [sp, #68]	@ 0x44
 8006c6e:	9610      	str	r6, [sp, #64]	@ 0x40
 8006c70:	64ae      	str	r6, [r5, #72]	@ 0x48
 8006c72:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8006c74:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8006c76:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006c78:	4ba7      	ldr	r3, [pc, #668]	@ (8006f18 <_printf_float+0x2f4>)
 8006c7a:	4252      	negs	r2, r2
 8006c7c:	f7fb fd2a 	bl	80026d4 <__aeabi_dcmpun>
 8006c80:	2800      	cmp	r0, #0
 8006c82:	d131      	bne.n	8006ce8 <_printf_float+0xc4>
 8006c84:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8006c86:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006c88:	2201      	movs	r2, #1
 8006c8a:	4ba3      	ldr	r3, [pc, #652]	@ (8006f18 <_printf_float+0x2f4>)
 8006c8c:	4252      	negs	r2, r2
 8006c8e:	f7f9 fbed 	bl	800046c <__aeabi_dcmple>
 8006c92:	2800      	cmp	r0, #0
 8006c94:	d128      	bne.n	8006ce8 <_printf_float+0xc4>
 8006c96:	2200      	movs	r2, #0
 8006c98:	2300      	movs	r3, #0
 8006c9a:	0030      	movs	r0, r6
 8006c9c:	0039      	movs	r1, r7
 8006c9e:	f7f9 fbdb 	bl	8000458 <__aeabi_dcmplt>
 8006ca2:	2800      	cmp	r0, #0
 8006ca4:	d003      	beq.n	8006cae <_printf_float+0x8a>
 8006ca6:	002b      	movs	r3, r5
 8006ca8:	222d      	movs	r2, #45	@ 0x2d
 8006caa:	3343      	adds	r3, #67	@ 0x43
 8006cac:	701a      	strb	r2, [r3, #0]
 8006cae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006cb0:	4f9a      	ldr	r7, [pc, #616]	@ (8006f1c <_printf_float+0x2f8>)
 8006cb2:	2b47      	cmp	r3, #71	@ 0x47
 8006cb4:	d900      	bls.n	8006cb8 <_printf_float+0x94>
 8006cb6:	4f9a      	ldr	r7, [pc, #616]	@ (8006f20 <_printf_float+0x2fc>)
 8006cb8:	2303      	movs	r3, #3
 8006cba:	2400      	movs	r4, #0
 8006cbc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006cbe:	612b      	str	r3, [r5, #16]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	439a      	bics	r2, r3
 8006cc4:	602a      	str	r2, [r5, #0]
 8006cc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006cc8:	0029      	movs	r1, r5
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006cce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cd0:	aa15      	add	r2, sp, #84	@ 0x54
 8006cd2:	f000 f9e5 	bl	80070a0 <_printf_common>
 8006cd6:	3001      	adds	r0, #1
 8006cd8:	d000      	beq.n	8006cdc <_printf_float+0xb8>
 8006cda:	e09f      	b.n	8006e1c <_printf_float+0x1f8>
 8006cdc:	2001      	movs	r0, #1
 8006cde:	4240      	negs	r0, r0
 8006ce0:	b017      	add	sp, #92	@ 0x5c
 8006ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ce4:	3307      	adds	r3, #7
 8006ce6:	e7b8      	b.n	8006c5a <_printf_float+0x36>
 8006ce8:	0032      	movs	r2, r6
 8006cea:	003b      	movs	r3, r7
 8006cec:	0030      	movs	r0, r6
 8006cee:	0039      	movs	r1, r7
 8006cf0:	f7fb fcf0 	bl	80026d4 <__aeabi_dcmpun>
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	d00b      	beq.n	8006d10 <_printf_float+0xec>
 8006cf8:	2f00      	cmp	r7, #0
 8006cfa:	da03      	bge.n	8006d04 <_printf_float+0xe0>
 8006cfc:	002b      	movs	r3, r5
 8006cfe:	222d      	movs	r2, #45	@ 0x2d
 8006d00:	3343      	adds	r3, #67	@ 0x43
 8006d02:	701a      	strb	r2, [r3, #0]
 8006d04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d06:	4f87      	ldr	r7, [pc, #540]	@ (8006f24 <_printf_float+0x300>)
 8006d08:	2b47      	cmp	r3, #71	@ 0x47
 8006d0a:	d9d5      	bls.n	8006cb8 <_printf_float+0x94>
 8006d0c:	4f86      	ldr	r7, [pc, #536]	@ (8006f28 <_printf_float+0x304>)
 8006d0e:	e7d3      	b.n	8006cb8 <_printf_float+0x94>
 8006d10:	2220      	movs	r2, #32
 8006d12:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8006d14:	686b      	ldr	r3, [r5, #4]
 8006d16:	4394      	bics	r4, r2
 8006d18:	1c5a      	adds	r2, r3, #1
 8006d1a:	d146      	bne.n	8006daa <_printf_float+0x186>
 8006d1c:	3307      	adds	r3, #7
 8006d1e:	606b      	str	r3, [r5, #4]
 8006d20:	2380      	movs	r3, #128	@ 0x80
 8006d22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006d24:	00db      	lsls	r3, r3, #3
 8006d26:	4313      	orrs	r3, r2
 8006d28:	2200      	movs	r2, #0
 8006d2a:	602b      	str	r3, [r5, #0]
 8006d2c:	9206      	str	r2, [sp, #24]
 8006d2e:	aa14      	add	r2, sp, #80	@ 0x50
 8006d30:	9205      	str	r2, [sp, #20]
 8006d32:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006d34:	a90a      	add	r1, sp, #40	@ 0x28
 8006d36:	9204      	str	r2, [sp, #16]
 8006d38:	aa13      	add	r2, sp, #76	@ 0x4c
 8006d3a:	9203      	str	r2, [sp, #12]
 8006d3c:	2223      	movs	r2, #35	@ 0x23
 8006d3e:	1852      	adds	r2, r2, r1
 8006d40:	9202      	str	r2, [sp, #8]
 8006d42:	9301      	str	r3, [sp, #4]
 8006d44:	686b      	ldr	r3, [r5, #4]
 8006d46:	0032      	movs	r2, r6
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d4c:	003b      	movs	r3, r7
 8006d4e:	f7ff fec3 	bl	8006ad8 <__cvt>
 8006d52:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006d54:	0007      	movs	r7, r0
 8006d56:	2c47      	cmp	r4, #71	@ 0x47
 8006d58:	d12d      	bne.n	8006db6 <_printf_float+0x192>
 8006d5a:	1cd3      	adds	r3, r2, #3
 8006d5c:	db02      	blt.n	8006d64 <_printf_float+0x140>
 8006d5e:	686b      	ldr	r3, [r5, #4]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	dd48      	ble.n	8006df6 <_printf_float+0x1d2>
 8006d64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d66:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006d68:	3b02      	subs	r3, #2
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	930c      	str	r3, [sp, #48]	@ 0x30
 8006d6e:	0028      	movs	r0, r5
 8006d70:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006d72:	3901      	subs	r1, #1
 8006d74:	3050      	adds	r0, #80	@ 0x50
 8006d76:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006d78:	f7ff ff14 	bl	8006ba4 <__exponent>
 8006d7c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006d7e:	0004      	movs	r4, r0
 8006d80:	1813      	adds	r3, r2, r0
 8006d82:	612b      	str	r3, [r5, #16]
 8006d84:	2a01      	cmp	r2, #1
 8006d86:	dc02      	bgt.n	8006d8e <_printf_float+0x16a>
 8006d88:	682a      	ldr	r2, [r5, #0]
 8006d8a:	07d2      	lsls	r2, r2, #31
 8006d8c:	d501      	bpl.n	8006d92 <_printf_float+0x16e>
 8006d8e:	3301      	adds	r3, #1
 8006d90:	612b      	str	r3, [r5, #16]
 8006d92:	2323      	movs	r3, #35	@ 0x23
 8006d94:	aa0a      	add	r2, sp, #40	@ 0x28
 8006d96:	189b      	adds	r3, r3, r2
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d100      	bne.n	8006da0 <_printf_float+0x17c>
 8006d9e:	e792      	b.n	8006cc6 <_printf_float+0xa2>
 8006da0:	002b      	movs	r3, r5
 8006da2:	222d      	movs	r2, #45	@ 0x2d
 8006da4:	3343      	adds	r3, #67	@ 0x43
 8006da6:	701a      	strb	r2, [r3, #0]
 8006da8:	e78d      	b.n	8006cc6 <_printf_float+0xa2>
 8006daa:	2c47      	cmp	r4, #71	@ 0x47
 8006dac:	d1b8      	bne.n	8006d20 <_printf_float+0xfc>
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1b6      	bne.n	8006d20 <_printf_float+0xfc>
 8006db2:	3301      	adds	r3, #1
 8006db4:	e7b3      	b.n	8006d1e <_printf_float+0xfa>
 8006db6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006db8:	0011      	movs	r1, r2
 8006dba:	2b65      	cmp	r3, #101	@ 0x65
 8006dbc:	d9d7      	bls.n	8006d6e <_printf_float+0x14a>
 8006dbe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006dc0:	2b66      	cmp	r3, #102	@ 0x66
 8006dc2:	d11a      	bne.n	8006dfa <_printf_float+0x1d6>
 8006dc4:	686b      	ldr	r3, [r5, #4]
 8006dc6:	2a00      	cmp	r2, #0
 8006dc8:	dd09      	ble.n	8006dde <_printf_float+0x1ba>
 8006dca:	612a      	str	r2, [r5, #16]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d102      	bne.n	8006dd6 <_printf_float+0x1b2>
 8006dd0:	6829      	ldr	r1, [r5, #0]
 8006dd2:	07c9      	lsls	r1, r1, #31
 8006dd4:	d50b      	bpl.n	8006dee <_printf_float+0x1ca>
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	189b      	adds	r3, r3, r2
 8006dda:	612b      	str	r3, [r5, #16]
 8006ddc:	e007      	b.n	8006dee <_printf_float+0x1ca>
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d103      	bne.n	8006dea <_printf_float+0x1c6>
 8006de2:	2201      	movs	r2, #1
 8006de4:	6829      	ldr	r1, [r5, #0]
 8006de6:	4211      	tst	r1, r2
 8006de8:	d000      	beq.n	8006dec <_printf_float+0x1c8>
 8006dea:	1c9a      	adds	r2, r3, #2
 8006dec:	612a      	str	r2, [r5, #16]
 8006dee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006df0:	2400      	movs	r4, #0
 8006df2:	65ab      	str	r3, [r5, #88]	@ 0x58
 8006df4:	e7cd      	b.n	8006d92 <_printf_float+0x16e>
 8006df6:	2367      	movs	r3, #103	@ 0x67
 8006df8:	930c      	str	r3, [sp, #48]	@ 0x30
 8006dfa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006dfc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006dfe:	4299      	cmp	r1, r3
 8006e00:	db06      	blt.n	8006e10 <_printf_float+0x1ec>
 8006e02:	682b      	ldr	r3, [r5, #0]
 8006e04:	6129      	str	r1, [r5, #16]
 8006e06:	07db      	lsls	r3, r3, #31
 8006e08:	d5f1      	bpl.n	8006dee <_printf_float+0x1ca>
 8006e0a:	3101      	adds	r1, #1
 8006e0c:	6129      	str	r1, [r5, #16]
 8006e0e:	e7ee      	b.n	8006dee <_printf_float+0x1ca>
 8006e10:	2201      	movs	r2, #1
 8006e12:	2900      	cmp	r1, #0
 8006e14:	dce0      	bgt.n	8006dd8 <_printf_float+0x1b4>
 8006e16:	1892      	adds	r2, r2, r2
 8006e18:	1a52      	subs	r2, r2, r1
 8006e1a:	e7dd      	b.n	8006dd8 <_printf_float+0x1b4>
 8006e1c:	682a      	ldr	r2, [r5, #0]
 8006e1e:	0553      	lsls	r3, r2, #21
 8006e20:	d408      	bmi.n	8006e34 <_printf_float+0x210>
 8006e22:	692b      	ldr	r3, [r5, #16]
 8006e24:	003a      	movs	r2, r7
 8006e26:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006e28:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e2a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006e2c:	47a0      	blx	r4
 8006e2e:	3001      	adds	r0, #1
 8006e30:	d129      	bne.n	8006e86 <_printf_float+0x262>
 8006e32:	e753      	b.n	8006cdc <_printf_float+0xb8>
 8006e34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006e36:	2b65      	cmp	r3, #101	@ 0x65
 8006e38:	d800      	bhi.n	8006e3c <_printf_float+0x218>
 8006e3a:	e0da      	b.n	8006ff2 <_printf_float+0x3ce>
 8006e3c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8006e3e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8006e40:	2200      	movs	r2, #0
 8006e42:	2300      	movs	r3, #0
 8006e44:	f7f9 fb02 	bl	800044c <__aeabi_dcmpeq>
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	d033      	beq.n	8006eb4 <_printf_float+0x290>
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	4a37      	ldr	r2, [pc, #220]	@ (8006f2c <_printf_float+0x308>)
 8006e50:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006e52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e54:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006e56:	47a0      	blx	r4
 8006e58:	3001      	adds	r0, #1
 8006e5a:	d100      	bne.n	8006e5e <_printf_float+0x23a>
 8006e5c:	e73e      	b.n	8006cdc <_printf_float+0xb8>
 8006e5e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8006e60:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006e62:	42b3      	cmp	r3, r6
 8006e64:	db02      	blt.n	8006e6c <_printf_float+0x248>
 8006e66:	682b      	ldr	r3, [r5, #0]
 8006e68:	07db      	lsls	r3, r3, #31
 8006e6a:	d50c      	bpl.n	8006e86 <_printf_float+0x262>
 8006e6c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006e6e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e70:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006e72:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006e74:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e76:	47a0      	blx	r4
 8006e78:	2400      	movs	r4, #0
 8006e7a:	3001      	adds	r0, #1
 8006e7c:	d100      	bne.n	8006e80 <_printf_float+0x25c>
 8006e7e:	e72d      	b.n	8006cdc <_printf_float+0xb8>
 8006e80:	1e73      	subs	r3, r6, #1
 8006e82:	42a3      	cmp	r3, r4
 8006e84:	dc0a      	bgt.n	8006e9c <_printf_float+0x278>
 8006e86:	682b      	ldr	r3, [r5, #0]
 8006e88:	079b      	lsls	r3, r3, #30
 8006e8a:	d500      	bpl.n	8006e8e <_printf_float+0x26a>
 8006e8c:	e105      	b.n	800709a <_printf_float+0x476>
 8006e8e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006e90:	68e8      	ldr	r0, [r5, #12]
 8006e92:	4298      	cmp	r0, r3
 8006e94:	db00      	blt.n	8006e98 <_printf_float+0x274>
 8006e96:	e723      	b.n	8006ce0 <_printf_float+0xbc>
 8006e98:	0018      	movs	r0, r3
 8006e9a:	e721      	b.n	8006ce0 <_printf_float+0xbc>
 8006e9c:	002a      	movs	r2, r5
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ea2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ea4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006ea6:	321a      	adds	r2, #26
 8006ea8:	47b8      	blx	r7
 8006eaa:	3001      	adds	r0, #1
 8006eac:	d100      	bne.n	8006eb0 <_printf_float+0x28c>
 8006eae:	e715      	b.n	8006cdc <_printf_float+0xb8>
 8006eb0:	3401      	adds	r4, #1
 8006eb2:	e7e5      	b.n	8006e80 <_printf_float+0x25c>
 8006eb4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	dc3a      	bgt.n	8006f30 <_printf_float+0x30c>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	4a1b      	ldr	r2, [pc, #108]	@ (8006f2c <_printf_float+0x308>)
 8006ebe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ec0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ec2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006ec4:	47a0      	blx	r4
 8006ec6:	3001      	adds	r0, #1
 8006ec8:	d100      	bne.n	8006ecc <_printf_float+0x2a8>
 8006eca:	e707      	b.n	8006cdc <_printf_float+0xb8>
 8006ecc:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8006ece:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006ed0:	4333      	orrs	r3, r6
 8006ed2:	d102      	bne.n	8006eda <_printf_float+0x2b6>
 8006ed4:	682b      	ldr	r3, [r5, #0]
 8006ed6:	07db      	lsls	r3, r3, #31
 8006ed8:	d5d5      	bpl.n	8006e86 <_printf_float+0x262>
 8006eda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006edc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006ede:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ee0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ee2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006ee4:	47a0      	blx	r4
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	3001      	adds	r0, #1
 8006eea:	d100      	bne.n	8006eee <_printf_float+0x2ca>
 8006eec:	e6f6      	b.n	8006cdc <_printf_float+0xb8>
 8006eee:	930c      	str	r3, [sp, #48]	@ 0x30
 8006ef0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006ef2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006ef4:	425b      	negs	r3, r3
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	dc01      	bgt.n	8006efe <_printf_float+0x2da>
 8006efa:	0033      	movs	r3, r6
 8006efc:	e792      	b.n	8006e24 <_printf_float+0x200>
 8006efe:	002a      	movs	r2, r5
 8006f00:	2301      	movs	r3, #1
 8006f02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f04:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f06:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006f08:	321a      	adds	r2, #26
 8006f0a:	47a0      	blx	r4
 8006f0c:	3001      	adds	r0, #1
 8006f0e:	d100      	bne.n	8006f12 <_printf_float+0x2ee>
 8006f10:	e6e4      	b.n	8006cdc <_printf_float+0xb8>
 8006f12:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006f14:	3301      	adds	r3, #1
 8006f16:	e7ea      	b.n	8006eee <_printf_float+0x2ca>
 8006f18:	7fefffff 	.word	0x7fefffff
 8006f1c:	08009ad8 	.word	0x08009ad8
 8006f20:	08009adc 	.word	0x08009adc
 8006f24:	08009ae0 	.word	0x08009ae0
 8006f28:	08009ae4 	.word	0x08009ae4
 8006f2c:	08009ae8 	.word	0x08009ae8
 8006f30:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006f32:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8006f34:	930c      	str	r3, [sp, #48]	@ 0x30
 8006f36:	429e      	cmp	r6, r3
 8006f38:	dd00      	ble.n	8006f3c <_printf_float+0x318>
 8006f3a:	001e      	movs	r6, r3
 8006f3c:	2e00      	cmp	r6, #0
 8006f3e:	dc31      	bgt.n	8006fa4 <_printf_float+0x380>
 8006f40:	43f3      	mvns	r3, r6
 8006f42:	2400      	movs	r4, #0
 8006f44:	17db      	asrs	r3, r3, #31
 8006f46:	4033      	ands	r3, r6
 8006f48:	930e      	str	r3, [sp, #56]	@ 0x38
 8006f4a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8006f4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f4e:	1af3      	subs	r3, r6, r3
 8006f50:	42a3      	cmp	r3, r4
 8006f52:	dc30      	bgt.n	8006fb6 <_printf_float+0x392>
 8006f54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006f56:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	dc38      	bgt.n	8006fce <_printf_float+0x3aa>
 8006f5c:	682b      	ldr	r3, [r5, #0]
 8006f5e:	07db      	lsls	r3, r3, #31
 8006f60:	d435      	bmi.n	8006fce <_printf_float+0x3aa>
 8006f62:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8006f64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006f66:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006f68:	1b9b      	subs	r3, r3, r6
 8006f6a:	1b14      	subs	r4, r2, r4
 8006f6c:	429c      	cmp	r4, r3
 8006f6e:	dd00      	ble.n	8006f72 <_printf_float+0x34e>
 8006f70:	001c      	movs	r4, r3
 8006f72:	2c00      	cmp	r4, #0
 8006f74:	dc34      	bgt.n	8006fe0 <_printf_float+0x3bc>
 8006f76:	43e3      	mvns	r3, r4
 8006f78:	2600      	movs	r6, #0
 8006f7a:	17db      	asrs	r3, r3, #31
 8006f7c:	401c      	ands	r4, r3
 8006f7e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006f80:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	1b1b      	subs	r3, r3, r4
 8006f86:	42b3      	cmp	r3, r6
 8006f88:	dc00      	bgt.n	8006f8c <_printf_float+0x368>
 8006f8a:	e77c      	b.n	8006e86 <_printf_float+0x262>
 8006f8c:	002a      	movs	r2, r5
 8006f8e:	2301      	movs	r3, #1
 8006f90:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f94:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006f96:	321a      	adds	r2, #26
 8006f98:	47b8      	blx	r7
 8006f9a:	3001      	adds	r0, #1
 8006f9c:	d100      	bne.n	8006fa0 <_printf_float+0x37c>
 8006f9e:	e69d      	b.n	8006cdc <_printf_float+0xb8>
 8006fa0:	3601      	adds	r6, #1
 8006fa2:	e7ec      	b.n	8006f7e <_printf_float+0x35a>
 8006fa4:	0033      	movs	r3, r6
 8006fa6:	003a      	movs	r2, r7
 8006fa8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006faa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006fac:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006fae:	47a0      	blx	r4
 8006fb0:	3001      	adds	r0, #1
 8006fb2:	d1c5      	bne.n	8006f40 <_printf_float+0x31c>
 8006fb4:	e692      	b.n	8006cdc <_printf_float+0xb8>
 8006fb6:	002a      	movs	r2, r5
 8006fb8:	2301      	movs	r3, #1
 8006fba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006fbc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006fbe:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006fc0:	321a      	adds	r2, #26
 8006fc2:	47b0      	blx	r6
 8006fc4:	3001      	adds	r0, #1
 8006fc6:	d100      	bne.n	8006fca <_printf_float+0x3a6>
 8006fc8:	e688      	b.n	8006cdc <_printf_float+0xb8>
 8006fca:	3401      	adds	r4, #1
 8006fcc:	e7bd      	b.n	8006f4a <_printf_float+0x326>
 8006fce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fd0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006fd2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006fd4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006fd6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006fd8:	47a0      	blx	r4
 8006fda:	3001      	adds	r0, #1
 8006fdc:	d1c1      	bne.n	8006f62 <_printf_float+0x33e>
 8006fde:	e67d      	b.n	8006cdc <_printf_float+0xb8>
 8006fe0:	19ba      	adds	r2, r7, r6
 8006fe2:	0023      	movs	r3, r4
 8006fe4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006fe6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006fe8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006fea:	47b0      	blx	r6
 8006fec:	3001      	adds	r0, #1
 8006fee:	d1c2      	bne.n	8006f76 <_printf_float+0x352>
 8006ff0:	e674      	b.n	8006cdc <_printf_float+0xb8>
 8006ff2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006ff4:	930c      	str	r3, [sp, #48]	@ 0x30
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	dc02      	bgt.n	8007000 <_printf_float+0x3dc>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	421a      	tst	r2, r3
 8006ffe:	d039      	beq.n	8007074 <_printf_float+0x450>
 8007000:	2301      	movs	r3, #1
 8007002:	003a      	movs	r2, r7
 8007004:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007006:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007008:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800700a:	47b0      	blx	r6
 800700c:	3001      	adds	r0, #1
 800700e:	d100      	bne.n	8007012 <_printf_float+0x3ee>
 8007010:	e664      	b.n	8006cdc <_printf_float+0xb8>
 8007012:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007014:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007016:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007018:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800701a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800701c:	47b0      	blx	r6
 800701e:	3001      	adds	r0, #1
 8007020:	d100      	bne.n	8007024 <_printf_float+0x400>
 8007022:	e65b      	b.n	8006cdc <_printf_float+0xb8>
 8007024:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8007026:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8007028:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800702a:	2200      	movs	r2, #0
 800702c:	3b01      	subs	r3, #1
 800702e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007030:	2300      	movs	r3, #0
 8007032:	f7f9 fa0b 	bl	800044c <__aeabi_dcmpeq>
 8007036:	2800      	cmp	r0, #0
 8007038:	d11a      	bne.n	8007070 <_printf_float+0x44c>
 800703a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800703c:	1c7a      	adds	r2, r7, #1
 800703e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007040:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007042:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007044:	47b0      	blx	r6
 8007046:	3001      	adds	r0, #1
 8007048:	d10e      	bne.n	8007068 <_printf_float+0x444>
 800704a:	e647      	b.n	8006cdc <_printf_float+0xb8>
 800704c:	002a      	movs	r2, r5
 800704e:	2301      	movs	r3, #1
 8007050:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007052:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007054:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007056:	321a      	adds	r2, #26
 8007058:	47b8      	blx	r7
 800705a:	3001      	adds	r0, #1
 800705c:	d100      	bne.n	8007060 <_printf_float+0x43c>
 800705e:	e63d      	b.n	8006cdc <_printf_float+0xb8>
 8007060:	3601      	adds	r6, #1
 8007062:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007064:	429e      	cmp	r6, r3
 8007066:	dbf1      	blt.n	800704c <_printf_float+0x428>
 8007068:	002a      	movs	r2, r5
 800706a:	0023      	movs	r3, r4
 800706c:	3250      	adds	r2, #80	@ 0x50
 800706e:	e6da      	b.n	8006e26 <_printf_float+0x202>
 8007070:	2600      	movs	r6, #0
 8007072:	e7f6      	b.n	8007062 <_printf_float+0x43e>
 8007074:	003a      	movs	r2, r7
 8007076:	e7e2      	b.n	800703e <_printf_float+0x41a>
 8007078:	002a      	movs	r2, r5
 800707a:	2301      	movs	r3, #1
 800707c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800707e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007080:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007082:	3219      	adds	r2, #25
 8007084:	47b0      	blx	r6
 8007086:	3001      	adds	r0, #1
 8007088:	d100      	bne.n	800708c <_printf_float+0x468>
 800708a:	e627      	b.n	8006cdc <_printf_float+0xb8>
 800708c:	3401      	adds	r4, #1
 800708e:	68eb      	ldr	r3, [r5, #12]
 8007090:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007092:	1a9b      	subs	r3, r3, r2
 8007094:	42a3      	cmp	r3, r4
 8007096:	dcef      	bgt.n	8007078 <_printf_float+0x454>
 8007098:	e6f9      	b.n	8006e8e <_printf_float+0x26a>
 800709a:	2400      	movs	r4, #0
 800709c:	e7f7      	b.n	800708e <_printf_float+0x46a>
 800709e:	46c0      	nop			@ (mov r8, r8)

080070a0 <_printf_common>:
 80070a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070a2:	0016      	movs	r6, r2
 80070a4:	9301      	str	r3, [sp, #4]
 80070a6:	688a      	ldr	r2, [r1, #8]
 80070a8:	690b      	ldr	r3, [r1, #16]
 80070aa:	000c      	movs	r4, r1
 80070ac:	9000      	str	r0, [sp, #0]
 80070ae:	4293      	cmp	r3, r2
 80070b0:	da00      	bge.n	80070b4 <_printf_common+0x14>
 80070b2:	0013      	movs	r3, r2
 80070b4:	0022      	movs	r2, r4
 80070b6:	6033      	str	r3, [r6, #0]
 80070b8:	3243      	adds	r2, #67	@ 0x43
 80070ba:	7812      	ldrb	r2, [r2, #0]
 80070bc:	2a00      	cmp	r2, #0
 80070be:	d001      	beq.n	80070c4 <_printf_common+0x24>
 80070c0:	3301      	adds	r3, #1
 80070c2:	6033      	str	r3, [r6, #0]
 80070c4:	6823      	ldr	r3, [r4, #0]
 80070c6:	069b      	lsls	r3, r3, #26
 80070c8:	d502      	bpl.n	80070d0 <_printf_common+0x30>
 80070ca:	6833      	ldr	r3, [r6, #0]
 80070cc:	3302      	adds	r3, #2
 80070ce:	6033      	str	r3, [r6, #0]
 80070d0:	6822      	ldr	r2, [r4, #0]
 80070d2:	2306      	movs	r3, #6
 80070d4:	0015      	movs	r5, r2
 80070d6:	401d      	ands	r5, r3
 80070d8:	421a      	tst	r2, r3
 80070da:	d027      	beq.n	800712c <_printf_common+0x8c>
 80070dc:	0023      	movs	r3, r4
 80070de:	3343      	adds	r3, #67	@ 0x43
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	1e5a      	subs	r2, r3, #1
 80070e4:	4193      	sbcs	r3, r2
 80070e6:	6822      	ldr	r2, [r4, #0]
 80070e8:	0692      	lsls	r2, r2, #26
 80070ea:	d430      	bmi.n	800714e <_printf_common+0xae>
 80070ec:	0022      	movs	r2, r4
 80070ee:	9901      	ldr	r1, [sp, #4]
 80070f0:	9800      	ldr	r0, [sp, #0]
 80070f2:	9d08      	ldr	r5, [sp, #32]
 80070f4:	3243      	adds	r2, #67	@ 0x43
 80070f6:	47a8      	blx	r5
 80070f8:	3001      	adds	r0, #1
 80070fa:	d025      	beq.n	8007148 <_printf_common+0xa8>
 80070fc:	2206      	movs	r2, #6
 80070fe:	6823      	ldr	r3, [r4, #0]
 8007100:	2500      	movs	r5, #0
 8007102:	4013      	ands	r3, r2
 8007104:	2b04      	cmp	r3, #4
 8007106:	d105      	bne.n	8007114 <_printf_common+0x74>
 8007108:	6833      	ldr	r3, [r6, #0]
 800710a:	68e5      	ldr	r5, [r4, #12]
 800710c:	1aed      	subs	r5, r5, r3
 800710e:	43eb      	mvns	r3, r5
 8007110:	17db      	asrs	r3, r3, #31
 8007112:	401d      	ands	r5, r3
 8007114:	68a3      	ldr	r3, [r4, #8]
 8007116:	6922      	ldr	r2, [r4, #16]
 8007118:	4293      	cmp	r3, r2
 800711a:	dd01      	ble.n	8007120 <_printf_common+0x80>
 800711c:	1a9b      	subs	r3, r3, r2
 800711e:	18ed      	adds	r5, r5, r3
 8007120:	2600      	movs	r6, #0
 8007122:	42b5      	cmp	r5, r6
 8007124:	d120      	bne.n	8007168 <_printf_common+0xc8>
 8007126:	2000      	movs	r0, #0
 8007128:	e010      	b.n	800714c <_printf_common+0xac>
 800712a:	3501      	adds	r5, #1
 800712c:	68e3      	ldr	r3, [r4, #12]
 800712e:	6832      	ldr	r2, [r6, #0]
 8007130:	1a9b      	subs	r3, r3, r2
 8007132:	42ab      	cmp	r3, r5
 8007134:	ddd2      	ble.n	80070dc <_printf_common+0x3c>
 8007136:	0022      	movs	r2, r4
 8007138:	2301      	movs	r3, #1
 800713a:	9901      	ldr	r1, [sp, #4]
 800713c:	9800      	ldr	r0, [sp, #0]
 800713e:	9f08      	ldr	r7, [sp, #32]
 8007140:	3219      	adds	r2, #25
 8007142:	47b8      	blx	r7
 8007144:	3001      	adds	r0, #1
 8007146:	d1f0      	bne.n	800712a <_printf_common+0x8a>
 8007148:	2001      	movs	r0, #1
 800714a:	4240      	negs	r0, r0
 800714c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800714e:	2030      	movs	r0, #48	@ 0x30
 8007150:	18e1      	adds	r1, r4, r3
 8007152:	3143      	adds	r1, #67	@ 0x43
 8007154:	7008      	strb	r0, [r1, #0]
 8007156:	0021      	movs	r1, r4
 8007158:	1c5a      	adds	r2, r3, #1
 800715a:	3145      	adds	r1, #69	@ 0x45
 800715c:	7809      	ldrb	r1, [r1, #0]
 800715e:	18a2      	adds	r2, r4, r2
 8007160:	3243      	adds	r2, #67	@ 0x43
 8007162:	3302      	adds	r3, #2
 8007164:	7011      	strb	r1, [r2, #0]
 8007166:	e7c1      	b.n	80070ec <_printf_common+0x4c>
 8007168:	0022      	movs	r2, r4
 800716a:	2301      	movs	r3, #1
 800716c:	9901      	ldr	r1, [sp, #4]
 800716e:	9800      	ldr	r0, [sp, #0]
 8007170:	9f08      	ldr	r7, [sp, #32]
 8007172:	321a      	adds	r2, #26
 8007174:	47b8      	blx	r7
 8007176:	3001      	adds	r0, #1
 8007178:	d0e6      	beq.n	8007148 <_printf_common+0xa8>
 800717a:	3601      	adds	r6, #1
 800717c:	e7d1      	b.n	8007122 <_printf_common+0x82>
	...

08007180 <_printf_i>:
 8007180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007182:	b08b      	sub	sp, #44	@ 0x2c
 8007184:	9206      	str	r2, [sp, #24]
 8007186:	000a      	movs	r2, r1
 8007188:	3243      	adds	r2, #67	@ 0x43
 800718a:	9307      	str	r3, [sp, #28]
 800718c:	9005      	str	r0, [sp, #20]
 800718e:	9203      	str	r2, [sp, #12]
 8007190:	7e0a      	ldrb	r2, [r1, #24]
 8007192:	000c      	movs	r4, r1
 8007194:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007196:	2a78      	cmp	r2, #120	@ 0x78
 8007198:	d809      	bhi.n	80071ae <_printf_i+0x2e>
 800719a:	2a62      	cmp	r2, #98	@ 0x62
 800719c:	d80b      	bhi.n	80071b6 <_printf_i+0x36>
 800719e:	2a00      	cmp	r2, #0
 80071a0:	d100      	bne.n	80071a4 <_printf_i+0x24>
 80071a2:	e0bc      	b.n	800731e <_printf_i+0x19e>
 80071a4:	497b      	ldr	r1, [pc, #492]	@ (8007394 <_printf_i+0x214>)
 80071a6:	9104      	str	r1, [sp, #16]
 80071a8:	2a58      	cmp	r2, #88	@ 0x58
 80071aa:	d100      	bne.n	80071ae <_printf_i+0x2e>
 80071ac:	e090      	b.n	80072d0 <_printf_i+0x150>
 80071ae:	0025      	movs	r5, r4
 80071b0:	3542      	adds	r5, #66	@ 0x42
 80071b2:	702a      	strb	r2, [r5, #0]
 80071b4:	e022      	b.n	80071fc <_printf_i+0x7c>
 80071b6:	0010      	movs	r0, r2
 80071b8:	3863      	subs	r0, #99	@ 0x63
 80071ba:	2815      	cmp	r0, #21
 80071bc:	d8f7      	bhi.n	80071ae <_printf_i+0x2e>
 80071be:	f7f8 ffb5 	bl	800012c <__gnu_thumb1_case_shi>
 80071c2:	0016      	.short	0x0016
 80071c4:	fff6001f 	.word	0xfff6001f
 80071c8:	fff6fff6 	.word	0xfff6fff6
 80071cc:	001ffff6 	.word	0x001ffff6
 80071d0:	fff6fff6 	.word	0xfff6fff6
 80071d4:	fff6fff6 	.word	0xfff6fff6
 80071d8:	003600a1 	.word	0x003600a1
 80071dc:	fff60080 	.word	0xfff60080
 80071e0:	00b2fff6 	.word	0x00b2fff6
 80071e4:	0036fff6 	.word	0x0036fff6
 80071e8:	fff6fff6 	.word	0xfff6fff6
 80071ec:	0084      	.short	0x0084
 80071ee:	0025      	movs	r5, r4
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	3542      	adds	r5, #66	@ 0x42
 80071f4:	1d11      	adds	r1, r2, #4
 80071f6:	6019      	str	r1, [r3, #0]
 80071f8:	6813      	ldr	r3, [r2, #0]
 80071fa:	702b      	strb	r3, [r5, #0]
 80071fc:	2301      	movs	r3, #1
 80071fe:	e0a0      	b.n	8007342 <_printf_i+0x1c2>
 8007200:	6818      	ldr	r0, [r3, #0]
 8007202:	6809      	ldr	r1, [r1, #0]
 8007204:	1d02      	adds	r2, r0, #4
 8007206:	060d      	lsls	r5, r1, #24
 8007208:	d50b      	bpl.n	8007222 <_printf_i+0xa2>
 800720a:	6806      	ldr	r6, [r0, #0]
 800720c:	601a      	str	r2, [r3, #0]
 800720e:	2e00      	cmp	r6, #0
 8007210:	da03      	bge.n	800721a <_printf_i+0x9a>
 8007212:	232d      	movs	r3, #45	@ 0x2d
 8007214:	9a03      	ldr	r2, [sp, #12]
 8007216:	4276      	negs	r6, r6
 8007218:	7013      	strb	r3, [r2, #0]
 800721a:	4b5e      	ldr	r3, [pc, #376]	@ (8007394 <_printf_i+0x214>)
 800721c:	270a      	movs	r7, #10
 800721e:	9304      	str	r3, [sp, #16]
 8007220:	e018      	b.n	8007254 <_printf_i+0xd4>
 8007222:	6806      	ldr	r6, [r0, #0]
 8007224:	601a      	str	r2, [r3, #0]
 8007226:	0649      	lsls	r1, r1, #25
 8007228:	d5f1      	bpl.n	800720e <_printf_i+0x8e>
 800722a:	b236      	sxth	r6, r6
 800722c:	e7ef      	b.n	800720e <_printf_i+0x8e>
 800722e:	6808      	ldr	r0, [r1, #0]
 8007230:	6819      	ldr	r1, [r3, #0]
 8007232:	c940      	ldmia	r1!, {r6}
 8007234:	0605      	lsls	r5, r0, #24
 8007236:	d402      	bmi.n	800723e <_printf_i+0xbe>
 8007238:	0640      	lsls	r0, r0, #25
 800723a:	d500      	bpl.n	800723e <_printf_i+0xbe>
 800723c:	b2b6      	uxth	r6, r6
 800723e:	6019      	str	r1, [r3, #0]
 8007240:	4b54      	ldr	r3, [pc, #336]	@ (8007394 <_printf_i+0x214>)
 8007242:	270a      	movs	r7, #10
 8007244:	9304      	str	r3, [sp, #16]
 8007246:	2a6f      	cmp	r2, #111	@ 0x6f
 8007248:	d100      	bne.n	800724c <_printf_i+0xcc>
 800724a:	3f02      	subs	r7, #2
 800724c:	0023      	movs	r3, r4
 800724e:	2200      	movs	r2, #0
 8007250:	3343      	adds	r3, #67	@ 0x43
 8007252:	701a      	strb	r2, [r3, #0]
 8007254:	6863      	ldr	r3, [r4, #4]
 8007256:	60a3      	str	r3, [r4, #8]
 8007258:	2b00      	cmp	r3, #0
 800725a:	db03      	blt.n	8007264 <_printf_i+0xe4>
 800725c:	2104      	movs	r1, #4
 800725e:	6822      	ldr	r2, [r4, #0]
 8007260:	438a      	bics	r2, r1
 8007262:	6022      	str	r2, [r4, #0]
 8007264:	2e00      	cmp	r6, #0
 8007266:	d102      	bne.n	800726e <_printf_i+0xee>
 8007268:	9d03      	ldr	r5, [sp, #12]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00c      	beq.n	8007288 <_printf_i+0x108>
 800726e:	9d03      	ldr	r5, [sp, #12]
 8007270:	0030      	movs	r0, r6
 8007272:	0039      	movs	r1, r7
 8007274:	f7f8 ffea 	bl	800024c <__aeabi_uidivmod>
 8007278:	9b04      	ldr	r3, [sp, #16]
 800727a:	3d01      	subs	r5, #1
 800727c:	5c5b      	ldrb	r3, [r3, r1]
 800727e:	702b      	strb	r3, [r5, #0]
 8007280:	0033      	movs	r3, r6
 8007282:	0006      	movs	r6, r0
 8007284:	429f      	cmp	r7, r3
 8007286:	d9f3      	bls.n	8007270 <_printf_i+0xf0>
 8007288:	2f08      	cmp	r7, #8
 800728a:	d109      	bne.n	80072a0 <_printf_i+0x120>
 800728c:	6823      	ldr	r3, [r4, #0]
 800728e:	07db      	lsls	r3, r3, #31
 8007290:	d506      	bpl.n	80072a0 <_printf_i+0x120>
 8007292:	6862      	ldr	r2, [r4, #4]
 8007294:	6923      	ldr	r3, [r4, #16]
 8007296:	429a      	cmp	r2, r3
 8007298:	dc02      	bgt.n	80072a0 <_printf_i+0x120>
 800729a:	2330      	movs	r3, #48	@ 0x30
 800729c:	3d01      	subs	r5, #1
 800729e:	702b      	strb	r3, [r5, #0]
 80072a0:	9b03      	ldr	r3, [sp, #12]
 80072a2:	1b5b      	subs	r3, r3, r5
 80072a4:	6123      	str	r3, [r4, #16]
 80072a6:	9b07      	ldr	r3, [sp, #28]
 80072a8:	0021      	movs	r1, r4
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	9805      	ldr	r0, [sp, #20]
 80072ae:	9b06      	ldr	r3, [sp, #24]
 80072b0:	aa09      	add	r2, sp, #36	@ 0x24
 80072b2:	f7ff fef5 	bl	80070a0 <_printf_common>
 80072b6:	3001      	adds	r0, #1
 80072b8:	d148      	bne.n	800734c <_printf_i+0x1cc>
 80072ba:	2001      	movs	r0, #1
 80072bc:	4240      	negs	r0, r0
 80072be:	b00b      	add	sp, #44	@ 0x2c
 80072c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072c2:	2220      	movs	r2, #32
 80072c4:	6809      	ldr	r1, [r1, #0]
 80072c6:	430a      	orrs	r2, r1
 80072c8:	6022      	str	r2, [r4, #0]
 80072ca:	2278      	movs	r2, #120	@ 0x78
 80072cc:	4932      	ldr	r1, [pc, #200]	@ (8007398 <_printf_i+0x218>)
 80072ce:	9104      	str	r1, [sp, #16]
 80072d0:	0021      	movs	r1, r4
 80072d2:	3145      	adds	r1, #69	@ 0x45
 80072d4:	700a      	strb	r2, [r1, #0]
 80072d6:	6819      	ldr	r1, [r3, #0]
 80072d8:	6822      	ldr	r2, [r4, #0]
 80072da:	c940      	ldmia	r1!, {r6}
 80072dc:	0610      	lsls	r0, r2, #24
 80072de:	d402      	bmi.n	80072e6 <_printf_i+0x166>
 80072e0:	0650      	lsls	r0, r2, #25
 80072e2:	d500      	bpl.n	80072e6 <_printf_i+0x166>
 80072e4:	b2b6      	uxth	r6, r6
 80072e6:	6019      	str	r1, [r3, #0]
 80072e8:	07d3      	lsls	r3, r2, #31
 80072ea:	d502      	bpl.n	80072f2 <_printf_i+0x172>
 80072ec:	2320      	movs	r3, #32
 80072ee:	4313      	orrs	r3, r2
 80072f0:	6023      	str	r3, [r4, #0]
 80072f2:	2e00      	cmp	r6, #0
 80072f4:	d001      	beq.n	80072fa <_printf_i+0x17a>
 80072f6:	2710      	movs	r7, #16
 80072f8:	e7a8      	b.n	800724c <_printf_i+0xcc>
 80072fa:	2220      	movs	r2, #32
 80072fc:	6823      	ldr	r3, [r4, #0]
 80072fe:	4393      	bics	r3, r2
 8007300:	6023      	str	r3, [r4, #0]
 8007302:	e7f8      	b.n	80072f6 <_printf_i+0x176>
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	680d      	ldr	r5, [r1, #0]
 8007308:	1d10      	adds	r0, r2, #4
 800730a:	6949      	ldr	r1, [r1, #20]
 800730c:	6018      	str	r0, [r3, #0]
 800730e:	6813      	ldr	r3, [r2, #0]
 8007310:	062e      	lsls	r6, r5, #24
 8007312:	d501      	bpl.n	8007318 <_printf_i+0x198>
 8007314:	6019      	str	r1, [r3, #0]
 8007316:	e002      	b.n	800731e <_printf_i+0x19e>
 8007318:	066d      	lsls	r5, r5, #25
 800731a:	d5fb      	bpl.n	8007314 <_printf_i+0x194>
 800731c:	8019      	strh	r1, [r3, #0]
 800731e:	2300      	movs	r3, #0
 8007320:	9d03      	ldr	r5, [sp, #12]
 8007322:	6123      	str	r3, [r4, #16]
 8007324:	e7bf      	b.n	80072a6 <_printf_i+0x126>
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	1d11      	adds	r1, r2, #4
 800732a:	6019      	str	r1, [r3, #0]
 800732c:	6815      	ldr	r5, [r2, #0]
 800732e:	2100      	movs	r1, #0
 8007330:	0028      	movs	r0, r5
 8007332:	6862      	ldr	r2, [r4, #4]
 8007334:	f000 f94f 	bl	80075d6 <memchr>
 8007338:	2800      	cmp	r0, #0
 800733a:	d001      	beq.n	8007340 <_printf_i+0x1c0>
 800733c:	1b40      	subs	r0, r0, r5
 800733e:	6060      	str	r0, [r4, #4]
 8007340:	6863      	ldr	r3, [r4, #4]
 8007342:	6123      	str	r3, [r4, #16]
 8007344:	2300      	movs	r3, #0
 8007346:	9a03      	ldr	r2, [sp, #12]
 8007348:	7013      	strb	r3, [r2, #0]
 800734a:	e7ac      	b.n	80072a6 <_printf_i+0x126>
 800734c:	002a      	movs	r2, r5
 800734e:	6923      	ldr	r3, [r4, #16]
 8007350:	9906      	ldr	r1, [sp, #24]
 8007352:	9805      	ldr	r0, [sp, #20]
 8007354:	9d07      	ldr	r5, [sp, #28]
 8007356:	47a8      	blx	r5
 8007358:	3001      	adds	r0, #1
 800735a:	d0ae      	beq.n	80072ba <_printf_i+0x13a>
 800735c:	6823      	ldr	r3, [r4, #0]
 800735e:	079b      	lsls	r3, r3, #30
 8007360:	d415      	bmi.n	800738e <_printf_i+0x20e>
 8007362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007364:	68e0      	ldr	r0, [r4, #12]
 8007366:	4298      	cmp	r0, r3
 8007368:	daa9      	bge.n	80072be <_printf_i+0x13e>
 800736a:	0018      	movs	r0, r3
 800736c:	e7a7      	b.n	80072be <_printf_i+0x13e>
 800736e:	0022      	movs	r2, r4
 8007370:	2301      	movs	r3, #1
 8007372:	9906      	ldr	r1, [sp, #24]
 8007374:	9805      	ldr	r0, [sp, #20]
 8007376:	9e07      	ldr	r6, [sp, #28]
 8007378:	3219      	adds	r2, #25
 800737a:	47b0      	blx	r6
 800737c:	3001      	adds	r0, #1
 800737e:	d09c      	beq.n	80072ba <_printf_i+0x13a>
 8007380:	3501      	adds	r5, #1
 8007382:	68e3      	ldr	r3, [r4, #12]
 8007384:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007386:	1a9b      	subs	r3, r3, r2
 8007388:	42ab      	cmp	r3, r5
 800738a:	dcf0      	bgt.n	800736e <_printf_i+0x1ee>
 800738c:	e7e9      	b.n	8007362 <_printf_i+0x1e2>
 800738e:	2500      	movs	r5, #0
 8007390:	e7f7      	b.n	8007382 <_printf_i+0x202>
 8007392:	46c0      	nop			@ (mov r8, r8)
 8007394:	08009aea 	.word	0x08009aea
 8007398:	08009afb 	.word	0x08009afb

0800739c <siprintf>:
 800739c:	b40e      	push	{r1, r2, r3}
 800739e:	b500      	push	{lr}
 80073a0:	490b      	ldr	r1, [pc, #44]	@ (80073d0 <siprintf+0x34>)
 80073a2:	b09c      	sub	sp, #112	@ 0x70
 80073a4:	ab1d      	add	r3, sp, #116	@ 0x74
 80073a6:	9002      	str	r0, [sp, #8]
 80073a8:	9006      	str	r0, [sp, #24]
 80073aa:	9107      	str	r1, [sp, #28]
 80073ac:	9104      	str	r1, [sp, #16]
 80073ae:	4809      	ldr	r0, [pc, #36]	@ (80073d4 <siprintf+0x38>)
 80073b0:	4909      	ldr	r1, [pc, #36]	@ (80073d8 <siprintf+0x3c>)
 80073b2:	cb04      	ldmia	r3!, {r2}
 80073b4:	9105      	str	r1, [sp, #20]
 80073b6:	6800      	ldr	r0, [r0, #0]
 80073b8:	a902      	add	r1, sp, #8
 80073ba:	9301      	str	r3, [sp, #4]
 80073bc:	f000 fff8 	bl	80083b0 <_svfiprintf_r>
 80073c0:	2200      	movs	r2, #0
 80073c2:	9b02      	ldr	r3, [sp, #8]
 80073c4:	701a      	strb	r2, [r3, #0]
 80073c6:	b01c      	add	sp, #112	@ 0x70
 80073c8:	bc08      	pop	{r3}
 80073ca:	b003      	add	sp, #12
 80073cc:	4718      	bx	r3
 80073ce:	46c0      	nop			@ (mov r8, r8)
 80073d0:	7fffffff 	.word	0x7fffffff
 80073d4:	20000018 	.word	0x20000018
 80073d8:	ffff0208 	.word	0xffff0208

080073dc <std>:
 80073dc:	2300      	movs	r3, #0
 80073de:	b510      	push	{r4, lr}
 80073e0:	0004      	movs	r4, r0
 80073e2:	6003      	str	r3, [r0, #0]
 80073e4:	6043      	str	r3, [r0, #4]
 80073e6:	6083      	str	r3, [r0, #8]
 80073e8:	8181      	strh	r1, [r0, #12]
 80073ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80073ec:	81c2      	strh	r2, [r0, #14]
 80073ee:	6103      	str	r3, [r0, #16]
 80073f0:	6143      	str	r3, [r0, #20]
 80073f2:	6183      	str	r3, [r0, #24]
 80073f4:	0019      	movs	r1, r3
 80073f6:	2208      	movs	r2, #8
 80073f8:	305c      	adds	r0, #92	@ 0x5c
 80073fa:	f000 f8b3 	bl	8007564 <memset>
 80073fe:	4b0b      	ldr	r3, [pc, #44]	@ (800742c <std+0x50>)
 8007400:	6224      	str	r4, [r4, #32]
 8007402:	6263      	str	r3, [r4, #36]	@ 0x24
 8007404:	4b0a      	ldr	r3, [pc, #40]	@ (8007430 <std+0x54>)
 8007406:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007408:	4b0a      	ldr	r3, [pc, #40]	@ (8007434 <std+0x58>)
 800740a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800740c:	4b0a      	ldr	r3, [pc, #40]	@ (8007438 <std+0x5c>)
 800740e:	6323      	str	r3, [r4, #48]	@ 0x30
 8007410:	4b0a      	ldr	r3, [pc, #40]	@ (800743c <std+0x60>)
 8007412:	429c      	cmp	r4, r3
 8007414:	d005      	beq.n	8007422 <std+0x46>
 8007416:	4b0a      	ldr	r3, [pc, #40]	@ (8007440 <std+0x64>)
 8007418:	429c      	cmp	r4, r3
 800741a:	d002      	beq.n	8007422 <std+0x46>
 800741c:	4b09      	ldr	r3, [pc, #36]	@ (8007444 <std+0x68>)
 800741e:	429c      	cmp	r4, r3
 8007420:	d103      	bne.n	800742a <std+0x4e>
 8007422:	0020      	movs	r0, r4
 8007424:	3058      	adds	r0, #88	@ 0x58
 8007426:	f000 f8d3 	bl	80075d0 <__retarget_lock_init_recursive>
 800742a:	bd10      	pop	{r4, pc}
 800742c:	08008fd1 	.word	0x08008fd1
 8007430:	08008ff9 	.word	0x08008ff9
 8007434:	08009031 	.word	0x08009031
 8007438:	0800905d 	.word	0x0800905d
 800743c:	20000418 	.word	0x20000418
 8007440:	20000480 	.word	0x20000480
 8007444:	200004e8 	.word	0x200004e8

08007448 <stdio_exit_handler>:
 8007448:	b510      	push	{r4, lr}
 800744a:	4a03      	ldr	r2, [pc, #12]	@ (8007458 <stdio_exit_handler+0x10>)
 800744c:	4903      	ldr	r1, [pc, #12]	@ (800745c <stdio_exit_handler+0x14>)
 800744e:	4804      	ldr	r0, [pc, #16]	@ (8007460 <stdio_exit_handler+0x18>)
 8007450:	f000 f86c 	bl	800752c <_fwalk_sglue>
 8007454:	bd10      	pop	{r4, pc}
 8007456:	46c0      	nop			@ (mov r8, r8)
 8007458:	2000000c 	.word	0x2000000c
 800745c:	08008811 	.word	0x08008811
 8007460:	2000001c 	.word	0x2000001c

08007464 <cleanup_stdio>:
 8007464:	6841      	ldr	r1, [r0, #4]
 8007466:	4b0b      	ldr	r3, [pc, #44]	@ (8007494 <cleanup_stdio+0x30>)
 8007468:	b510      	push	{r4, lr}
 800746a:	0004      	movs	r4, r0
 800746c:	4299      	cmp	r1, r3
 800746e:	d001      	beq.n	8007474 <cleanup_stdio+0x10>
 8007470:	f001 f9ce 	bl	8008810 <_fflush_r>
 8007474:	68a1      	ldr	r1, [r4, #8]
 8007476:	4b08      	ldr	r3, [pc, #32]	@ (8007498 <cleanup_stdio+0x34>)
 8007478:	4299      	cmp	r1, r3
 800747a:	d002      	beq.n	8007482 <cleanup_stdio+0x1e>
 800747c:	0020      	movs	r0, r4
 800747e:	f001 f9c7 	bl	8008810 <_fflush_r>
 8007482:	68e1      	ldr	r1, [r4, #12]
 8007484:	4b05      	ldr	r3, [pc, #20]	@ (800749c <cleanup_stdio+0x38>)
 8007486:	4299      	cmp	r1, r3
 8007488:	d002      	beq.n	8007490 <cleanup_stdio+0x2c>
 800748a:	0020      	movs	r0, r4
 800748c:	f001 f9c0 	bl	8008810 <_fflush_r>
 8007490:	bd10      	pop	{r4, pc}
 8007492:	46c0      	nop			@ (mov r8, r8)
 8007494:	20000418 	.word	0x20000418
 8007498:	20000480 	.word	0x20000480
 800749c:	200004e8 	.word	0x200004e8

080074a0 <global_stdio_init.part.0>:
 80074a0:	b510      	push	{r4, lr}
 80074a2:	4b09      	ldr	r3, [pc, #36]	@ (80074c8 <global_stdio_init.part.0+0x28>)
 80074a4:	4a09      	ldr	r2, [pc, #36]	@ (80074cc <global_stdio_init.part.0+0x2c>)
 80074a6:	2104      	movs	r1, #4
 80074a8:	601a      	str	r2, [r3, #0]
 80074aa:	4809      	ldr	r0, [pc, #36]	@ (80074d0 <global_stdio_init.part.0+0x30>)
 80074ac:	2200      	movs	r2, #0
 80074ae:	f7ff ff95 	bl	80073dc <std>
 80074b2:	2201      	movs	r2, #1
 80074b4:	2109      	movs	r1, #9
 80074b6:	4807      	ldr	r0, [pc, #28]	@ (80074d4 <global_stdio_init.part.0+0x34>)
 80074b8:	f7ff ff90 	bl	80073dc <std>
 80074bc:	2202      	movs	r2, #2
 80074be:	2112      	movs	r1, #18
 80074c0:	4805      	ldr	r0, [pc, #20]	@ (80074d8 <global_stdio_init.part.0+0x38>)
 80074c2:	f7ff ff8b 	bl	80073dc <std>
 80074c6:	bd10      	pop	{r4, pc}
 80074c8:	20000550 	.word	0x20000550
 80074cc:	08007449 	.word	0x08007449
 80074d0:	20000418 	.word	0x20000418
 80074d4:	20000480 	.word	0x20000480
 80074d8:	200004e8 	.word	0x200004e8

080074dc <__sfp_lock_acquire>:
 80074dc:	b510      	push	{r4, lr}
 80074de:	4802      	ldr	r0, [pc, #8]	@ (80074e8 <__sfp_lock_acquire+0xc>)
 80074e0:	f000 f877 	bl	80075d2 <__retarget_lock_acquire_recursive>
 80074e4:	bd10      	pop	{r4, pc}
 80074e6:	46c0      	nop			@ (mov r8, r8)
 80074e8:	20000555 	.word	0x20000555

080074ec <__sfp_lock_release>:
 80074ec:	b510      	push	{r4, lr}
 80074ee:	4802      	ldr	r0, [pc, #8]	@ (80074f8 <__sfp_lock_release+0xc>)
 80074f0:	f000 f870 	bl	80075d4 <__retarget_lock_release_recursive>
 80074f4:	bd10      	pop	{r4, pc}
 80074f6:	46c0      	nop			@ (mov r8, r8)
 80074f8:	20000555 	.word	0x20000555

080074fc <__sinit>:
 80074fc:	b510      	push	{r4, lr}
 80074fe:	0004      	movs	r4, r0
 8007500:	f7ff ffec 	bl	80074dc <__sfp_lock_acquire>
 8007504:	6a23      	ldr	r3, [r4, #32]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d002      	beq.n	8007510 <__sinit+0x14>
 800750a:	f7ff ffef 	bl	80074ec <__sfp_lock_release>
 800750e:	bd10      	pop	{r4, pc}
 8007510:	4b04      	ldr	r3, [pc, #16]	@ (8007524 <__sinit+0x28>)
 8007512:	6223      	str	r3, [r4, #32]
 8007514:	4b04      	ldr	r3, [pc, #16]	@ (8007528 <__sinit+0x2c>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1f6      	bne.n	800750a <__sinit+0xe>
 800751c:	f7ff ffc0 	bl	80074a0 <global_stdio_init.part.0>
 8007520:	e7f3      	b.n	800750a <__sinit+0xe>
 8007522:	46c0      	nop			@ (mov r8, r8)
 8007524:	08007465 	.word	0x08007465
 8007528:	20000550 	.word	0x20000550

0800752c <_fwalk_sglue>:
 800752c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800752e:	0014      	movs	r4, r2
 8007530:	2600      	movs	r6, #0
 8007532:	9000      	str	r0, [sp, #0]
 8007534:	9101      	str	r1, [sp, #4]
 8007536:	68a5      	ldr	r5, [r4, #8]
 8007538:	6867      	ldr	r7, [r4, #4]
 800753a:	3f01      	subs	r7, #1
 800753c:	d504      	bpl.n	8007548 <_fwalk_sglue+0x1c>
 800753e:	6824      	ldr	r4, [r4, #0]
 8007540:	2c00      	cmp	r4, #0
 8007542:	d1f8      	bne.n	8007536 <_fwalk_sglue+0xa>
 8007544:	0030      	movs	r0, r6
 8007546:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007548:	89ab      	ldrh	r3, [r5, #12]
 800754a:	2b01      	cmp	r3, #1
 800754c:	d908      	bls.n	8007560 <_fwalk_sglue+0x34>
 800754e:	220e      	movs	r2, #14
 8007550:	5eab      	ldrsh	r3, [r5, r2]
 8007552:	3301      	adds	r3, #1
 8007554:	d004      	beq.n	8007560 <_fwalk_sglue+0x34>
 8007556:	0029      	movs	r1, r5
 8007558:	9800      	ldr	r0, [sp, #0]
 800755a:	9b01      	ldr	r3, [sp, #4]
 800755c:	4798      	blx	r3
 800755e:	4306      	orrs	r6, r0
 8007560:	3568      	adds	r5, #104	@ 0x68
 8007562:	e7ea      	b.n	800753a <_fwalk_sglue+0xe>

08007564 <memset>:
 8007564:	0003      	movs	r3, r0
 8007566:	1882      	adds	r2, r0, r2
 8007568:	4293      	cmp	r3, r2
 800756a:	d100      	bne.n	800756e <memset+0xa>
 800756c:	4770      	bx	lr
 800756e:	7019      	strb	r1, [r3, #0]
 8007570:	3301      	adds	r3, #1
 8007572:	e7f9      	b.n	8007568 <memset+0x4>

08007574 <_localeconv_r>:
 8007574:	4800      	ldr	r0, [pc, #0]	@ (8007578 <_localeconv_r+0x4>)
 8007576:	4770      	bx	lr
 8007578:	20000158 	.word	0x20000158

0800757c <__errno>:
 800757c:	4b01      	ldr	r3, [pc, #4]	@ (8007584 <__errno+0x8>)
 800757e:	6818      	ldr	r0, [r3, #0]
 8007580:	4770      	bx	lr
 8007582:	46c0      	nop			@ (mov r8, r8)
 8007584:	20000018 	.word	0x20000018

08007588 <__libc_init_array>:
 8007588:	b570      	push	{r4, r5, r6, lr}
 800758a:	2600      	movs	r6, #0
 800758c:	4c0c      	ldr	r4, [pc, #48]	@ (80075c0 <__libc_init_array+0x38>)
 800758e:	4d0d      	ldr	r5, [pc, #52]	@ (80075c4 <__libc_init_array+0x3c>)
 8007590:	1b64      	subs	r4, r4, r5
 8007592:	10a4      	asrs	r4, r4, #2
 8007594:	42a6      	cmp	r6, r4
 8007596:	d109      	bne.n	80075ac <__libc_init_array+0x24>
 8007598:	2600      	movs	r6, #0
 800759a:	f002 f9a3 	bl	80098e4 <_init>
 800759e:	4c0a      	ldr	r4, [pc, #40]	@ (80075c8 <__libc_init_array+0x40>)
 80075a0:	4d0a      	ldr	r5, [pc, #40]	@ (80075cc <__libc_init_array+0x44>)
 80075a2:	1b64      	subs	r4, r4, r5
 80075a4:	10a4      	asrs	r4, r4, #2
 80075a6:	42a6      	cmp	r6, r4
 80075a8:	d105      	bne.n	80075b6 <__libc_init_array+0x2e>
 80075aa:	bd70      	pop	{r4, r5, r6, pc}
 80075ac:	00b3      	lsls	r3, r6, #2
 80075ae:	58eb      	ldr	r3, [r5, r3]
 80075b0:	4798      	blx	r3
 80075b2:	3601      	adds	r6, #1
 80075b4:	e7ee      	b.n	8007594 <__libc_init_array+0xc>
 80075b6:	00b3      	lsls	r3, r6, #2
 80075b8:	58eb      	ldr	r3, [r5, r3]
 80075ba:	4798      	blx	r3
 80075bc:	3601      	adds	r6, #1
 80075be:	e7f2      	b.n	80075a6 <__libc_init_array+0x1e>
 80075c0:	08009e50 	.word	0x08009e50
 80075c4:	08009e50 	.word	0x08009e50
 80075c8:	08009e54 	.word	0x08009e54
 80075cc:	08009e50 	.word	0x08009e50

080075d0 <__retarget_lock_init_recursive>:
 80075d0:	4770      	bx	lr

080075d2 <__retarget_lock_acquire_recursive>:
 80075d2:	4770      	bx	lr

080075d4 <__retarget_lock_release_recursive>:
 80075d4:	4770      	bx	lr

080075d6 <memchr>:
 80075d6:	b2c9      	uxtb	r1, r1
 80075d8:	1882      	adds	r2, r0, r2
 80075da:	4290      	cmp	r0, r2
 80075dc:	d101      	bne.n	80075e2 <memchr+0xc>
 80075de:	2000      	movs	r0, #0
 80075e0:	4770      	bx	lr
 80075e2:	7803      	ldrb	r3, [r0, #0]
 80075e4:	428b      	cmp	r3, r1
 80075e6:	d0fb      	beq.n	80075e0 <memchr+0xa>
 80075e8:	3001      	adds	r0, #1
 80075ea:	e7f6      	b.n	80075da <memchr+0x4>

080075ec <quorem>:
 80075ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075ee:	6902      	ldr	r2, [r0, #16]
 80075f0:	690f      	ldr	r7, [r1, #16]
 80075f2:	b087      	sub	sp, #28
 80075f4:	0006      	movs	r6, r0
 80075f6:	000b      	movs	r3, r1
 80075f8:	2000      	movs	r0, #0
 80075fa:	9102      	str	r1, [sp, #8]
 80075fc:	42ba      	cmp	r2, r7
 80075fe:	db6d      	blt.n	80076dc <quorem+0xf0>
 8007600:	3f01      	subs	r7, #1
 8007602:	00bc      	lsls	r4, r7, #2
 8007604:	3314      	adds	r3, #20
 8007606:	9305      	str	r3, [sp, #20]
 8007608:	191b      	adds	r3, r3, r4
 800760a:	9303      	str	r3, [sp, #12]
 800760c:	0033      	movs	r3, r6
 800760e:	3314      	adds	r3, #20
 8007610:	191c      	adds	r4, r3, r4
 8007612:	9301      	str	r3, [sp, #4]
 8007614:	6823      	ldr	r3, [r4, #0]
 8007616:	9304      	str	r3, [sp, #16]
 8007618:	9b03      	ldr	r3, [sp, #12]
 800761a:	9804      	ldr	r0, [sp, #16]
 800761c:	681d      	ldr	r5, [r3, #0]
 800761e:	3501      	adds	r5, #1
 8007620:	0029      	movs	r1, r5
 8007622:	f7f8 fd8d 	bl	8000140 <__udivsi3>
 8007626:	9b04      	ldr	r3, [sp, #16]
 8007628:	9000      	str	r0, [sp, #0]
 800762a:	42ab      	cmp	r3, r5
 800762c:	d32b      	bcc.n	8007686 <quorem+0x9a>
 800762e:	9b05      	ldr	r3, [sp, #20]
 8007630:	9d01      	ldr	r5, [sp, #4]
 8007632:	469c      	mov	ip, r3
 8007634:	2300      	movs	r3, #0
 8007636:	9305      	str	r3, [sp, #20]
 8007638:	9304      	str	r3, [sp, #16]
 800763a:	4662      	mov	r2, ip
 800763c:	ca08      	ldmia	r2!, {r3}
 800763e:	6828      	ldr	r0, [r5, #0]
 8007640:	4694      	mov	ip, r2
 8007642:	9a00      	ldr	r2, [sp, #0]
 8007644:	b299      	uxth	r1, r3
 8007646:	4351      	muls	r1, r2
 8007648:	9a05      	ldr	r2, [sp, #20]
 800764a:	0c1b      	lsrs	r3, r3, #16
 800764c:	1889      	adds	r1, r1, r2
 800764e:	9a00      	ldr	r2, [sp, #0]
 8007650:	4353      	muls	r3, r2
 8007652:	0c0a      	lsrs	r2, r1, #16
 8007654:	189b      	adds	r3, r3, r2
 8007656:	0c1a      	lsrs	r2, r3, #16
 8007658:	b289      	uxth	r1, r1
 800765a:	9205      	str	r2, [sp, #20]
 800765c:	b282      	uxth	r2, r0
 800765e:	1a52      	subs	r2, r2, r1
 8007660:	9904      	ldr	r1, [sp, #16]
 8007662:	0c00      	lsrs	r0, r0, #16
 8007664:	1852      	adds	r2, r2, r1
 8007666:	b29b      	uxth	r3, r3
 8007668:	1411      	asrs	r1, r2, #16
 800766a:	1ac3      	subs	r3, r0, r3
 800766c:	185b      	adds	r3, r3, r1
 800766e:	1419      	asrs	r1, r3, #16
 8007670:	b292      	uxth	r2, r2
 8007672:	041b      	lsls	r3, r3, #16
 8007674:	431a      	orrs	r2, r3
 8007676:	9b03      	ldr	r3, [sp, #12]
 8007678:	9104      	str	r1, [sp, #16]
 800767a:	c504      	stmia	r5!, {r2}
 800767c:	4563      	cmp	r3, ip
 800767e:	d2dc      	bcs.n	800763a <quorem+0x4e>
 8007680:	6823      	ldr	r3, [r4, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d030      	beq.n	80076e8 <quorem+0xfc>
 8007686:	0030      	movs	r0, r6
 8007688:	9902      	ldr	r1, [sp, #8]
 800768a:	f001 fb8b 	bl	8008da4 <__mcmp>
 800768e:	2800      	cmp	r0, #0
 8007690:	db23      	blt.n	80076da <quorem+0xee>
 8007692:	0034      	movs	r4, r6
 8007694:	2500      	movs	r5, #0
 8007696:	9902      	ldr	r1, [sp, #8]
 8007698:	3414      	adds	r4, #20
 800769a:	3114      	adds	r1, #20
 800769c:	6823      	ldr	r3, [r4, #0]
 800769e:	c901      	ldmia	r1!, {r0}
 80076a0:	9302      	str	r3, [sp, #8]
 80076a2:	466b      	mov	r3, sp
 80076a4:	891b      	ldrh	r3, [r3, #8]
 80076a6:	b282      	uxth	r2, r0
 80076a8:	1a9a      	subs	r2, r3, r2
 80076aa:	9b02      	ldr	r3, [sp, #8]
 80076ac:	1952      	adds	r2, r2, r5
 80076ae:	0c00      	lsrs	r0, r0, #16
 80076b0:	0c1b      	lsrs	r3, r3, #16
 80076b2:	1a1b      	subs	r3, r3, r0
 80076b4:	1410      	asrs	r0, r2, #16
 80076b6:	181b      	adds	r3, r3, r0
 80076b8:	141d      	asrs	r5, r3, #16
 80076ba:	b292      	uxth	r2, r2
 80076bc:	041b      	lsls	r3, r3, #16
 80076be:	431a      	orrs	r2, r3
 80076c0:	9b03      	ldr	r3, [sp, #12]
 80076c2:	c404      	stmia	r4!, {r2}
 80076c4:	428b      	cmp	r3, r1
 80076c6:	d2e9      	bcs.n	800769c <quorem+0xb0>
 80076c8:	9a01      	ldr	r2, [sp, #4]
 80076ca:	00bb      	lsls	r3, r7, #2
 80076cc:	18d3      	adds	r3, r2, r3
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	2a00      	cmp	r2, #0
 80076d2:	d013      	beq.n	80076fc <quorem+0x110>
 80076d4:	9b00      	ldr	r3, [sp, #0]
 80076d6:	3301      	adds	r3, #1
 80076d8:	9300      	str	r3, [sp, #0]
 80076da:	9800      	ldr	r0, [sp, #0]
 80076dc:	b007      	add	sp, #28
 80076de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076e0:	6823      	ldr	r3, [r4, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d104      	bne.n	80076f0 <quorem+0x104>
 80076e6:	3f01      	subs	r7, #1
 80076e8:	9b01      	ldr	r3, [sp, #4]
 80076ea:	3c04      	subs	r4, #4
 80076ec:	42a3      	cmp	r3, r4
 80076ee:	d3f7      	bcc.n	80076e0 <quorem+0xf4>
 80076f0:	6137      	str	r7, [r6, #16]
 80076f2:	e7c8      	b.n	8007686 <quorem+0x9a>
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	2a00      	cmp	r2, #0
 80076f8:	d104      	bne.n	8007704 <quorem+0x118>
 80076fa:	3f01      	subs	r7, #1
 80076fc:	9a01      	ldr	r2, [sp, #4]
 80076fe:	3b04      	subs	r3, #4
 8007700:	429a      	cmp	r2, r3
 8007702:	d3f7      	bcc.n	80076f4 <quorem+0x108>
 8007704:	6137      	str	r7, [r6, #16]
 8007706:	e7e5      	b.n	80076d4 <quorem+0xe8>

08007708 <_dtoa_r>:
 8007708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800770a:	0014      	movs	r4, r2
 800770c:	001d      	movs	r5, r3
 800770e:	69c6      	ldr	r6, [r0, #28]
 8007710:	b09d      	sub	sp, #116	@ 0x74
 8007712:	940a      	str	r4, [sp, #40]	@ 0x28
 8007714:	950b      	str	r5, [sp, #44]	@ 0x2c
 8007716:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8007718:	9003      	str	r0, [sp, #12]
 800771a:	2e00      	cmp	r6, #0
 800771c:	d10f      	bne.n	800773e <_dtoa_r+0x36>
 800771e:	2010      	movs	r0, #16
 8007720:	f000 ff44 	bl	80085ac <malloc>
 8007724:	9b03      	ldr	r3, [sp, #12]
 8007726:	1e02      	subs	r2, r0, #0
 8007728:	61d8      	str	r0, [r3, #28]
 800772a:	d104      	bne.n	8007736 <_dtoa_r+0x2e>
 800772c:	21ef      	movs	r1, #239	@ 0xef
 800772e:	4bc7      	ldr	r3, [pc, #796]	@ (8007a4c <_dtoa_r+0x344>)
 8007730:	48c7      	ldr	r0, [pc, #796]	@ (8007a50 <_dtoa_r+0x348>)
 8007732:	f001 fd45 	bl	80091c0 <__assert_func>
 8007736:	6046      	str	r6, [r0, #4]
 8007738:	6086      	str	r6, [r0, #8]
 800773a:	6006      	str	r6, [r0, #0]
 800773c:	60c6      	str	r6, [r0, #12]
 800773e:	9b03      	ldr	r3, [sp, #12]
 8007740:	69db      	ldr	r3, [r3, #28]
 8007742:	6819      	ldr	r1, [r3, #0]
 8007744:	2900      	cmp	r1, #0
 8007746:	d00b      	beq.n	8007760 <_dtoa_r+0x58>
 8007748:	685a      	ldr	r2, [r3, #4]
 800774a:	2301      	movs	r3, #1
 800774c:	4093      	lsls	r3, r2
 800774e:	604a      	str	r2, [r1, #4]
 8007750:	608b      	str	r3, [r1, #8]
 8007752:	9803      	ldr	r0, [sp, #12]
 8007754:	f001 f8dc 	bl	8008910 <_Bfree>
 8007758:	2200      	movs	r2, #0
 800775a:	9b03      	ldr	r3, [sp, #12]
 800775c:	69db      	ldr	r3, [r3, #28]
 800775e:	601a      	str	r2, [r3, #0]
 8007760:	2d00      	cmp	r5, #0
 8007762:	da1e      	bge.n	80077a2 <_dtoa_r+0x9a>
 8007764:	2301      	movs	r3, #1
 8007766:	603b      	str	r3, [r7, #0]
 8007768:	006b      	lsls	r3, r5, #1
 800776a:	085b      	lsrs	r3, r3, #1
 800776c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800776e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007770:	4bb8      	ldr	r3, [pc, #736]	@ (8007a54 <_dtoa_r+0x34c>)
 8007772:	4ab8      	ldr	r2, [pc, #736]	@ (8007a54 <_dtoa_r+0x34c>)
 8007774:	403b      	ands	r3, r7
 8007776:	4293      	cmp	r3, r2
 8007778:	d116      	bne.n	80077a8 <_dtoa_r+0xa0>
 800777a:	4bb7      	ldr	r3, [pc, #732]	@ (8007a58 <_dtoa_r+0x350>)
 800777c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800777e:	6013      	str	r3, [r2, #0]
 8007780:	033b      	lsls	r3, r7, #12
 8007782:	0b1b      	lsrs	r3, r3, #12
 8007784:	4323      	orrs	r3, r4
 8007786:	d101      	bne.n	800778c <_dtoa_r+0x84>
 8007788:	f000 fd83 	bl	8008292 <_dtoa_r+0xb8a>
 800778c:	4bb3      	ldr	r3, [pc, #716]	@ (8007a5c <_dtoa_r+0x354>)
 800778e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007790:	9308      	str	r3, [sp, #32]
 8007792:	2a00      	cmp	r2, #0
 8007794:	d002      	beq.n	800779c <_dtoa_r+0x94>
 8007796:	4bb2      	ldr	r3, [pc, #712]	@ (8007a60 <_dtoa_r+0x358>)
 8007798:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800779a:	6013      	str	r3, [r2, #0]
 800779c:	9808      	ldr	r0, [sp, #32]
 800779e:	b01d      	add	sp, #116	@ 0x74
 80077a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077a2:	2300      	movs	r3, #0
 80077a4:	603b      	str	r3, [r7, #0]
 80077a6:	e7e2      	b.n	800776e <_dtoa_r+0x66>
 80077a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80077aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077ac:	9212      	str	r2, [sp, #72]	@ 0x48
 80077ae:	9313      	str	r3, [sp, #76]	@ 0x4c
 80077b0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80077b2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80077b4:	2200      	movs	r2, #0
 80077b6:	2300      	movs	r3, #0
 80077b8:	f7f8 fe48 	bl	800044c <__aeabi_dcmpeq>
 80077bc:	1e06      	subs	r6, r0, #0
 80077be:	d00b      	beq.n	80077d8 <_dtoa_r+0xd0>
 80077c0:	2301      	movs	r3, #1
 80077c2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80077c4:	6013      	str	r3, [r2, #0]
 80077c6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d002      	beq.n	80077d2 <_dtoa_r+0xca>
 80077cc:	4ba5      	ldr	r3, [pc, #660]	@ (8007a64 <_dtoa_r+0x35c>)
 80077ce:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80077d0:	6013      	str	r3, [r2, #0]
 80077d2:	4ba5      	ldr	r3, [pc, #660]	@ (8007a68 <_dtoa_r+0x360>)
 80077d4:	9308      	str	r3, [sp, #32]
 80077d6:	e7e1      	b.n	800779c <_dtoa_r+0x94>
 80077d8:	ab1a      	add	r3, sp, #104	@ 0x68
 80077da:	9301      	str	r3, [sp, #4]
 80077dc:	ab1b      	add	r3, sp, #108	@ 0x6c
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	9803      	ldr	r0, [sp, #12]
 80077e2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80077e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80077e6:	f001 fb93 	bl	8008f10 <__d2b>
 80077ea:	007a      	lsls	r2, r7, #1
 80077ec:	9005      	str	r0, [sp, #20]
 80077ee:	0d52      	lsrs	r2, r2, #21
 80077f0:	d100      	bne.n	80077f4 <_dtoa_r+0xec>
 80077f2:	e07b      	b.n	80078ec <_dtoa_r+0x1e4>
 80077f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80077f6:	9618      	str	r6, [sp, #96]	@ 0x60
 80077f8:	0319      	lsls	r1, r3, #12
 80077fa:	4b9c      	ldr	r3, [pc, #624]	@ (8007a6c <_dtoa_r+0x364>)
 80077fc:	0b09      	lsrs	r1, r1, #12
 80077fe:	430b      	orrs	r3, r1
 8007800:	499b      	ldr	r1, [pc, #620]	@ (8007a70 <_dtoa_r+0x368>)
 8007802:	1857      	adds	r7, r2, r1
 8007804:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007806:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007808:	0019      	movs	r1, r3
 800780a:	2200      	movs	r2, #0
 800780c:	4b99      	ldr	r3, [pc, #612]	@ (8007a74 <_dtoa_r+0x36c>)
 800780e:	f7fa fbc5 	bl	8001f9c <__aeabi_dsub>
 8007812:	4a99      	ldr	r2, [pc, #612]	@ (8007a78 <_dtoa_r+0x370>)
 8007814:	4b99      	ldr	r3, [pc, #612]	@ (8007a7c <_dtoa_r+0x374>)
 8007816:	f7fa f8f9 	bl	8001a0c <__aeabi_dmul>
 800781a:	4a99      	ldr	r2, [pc, #612]	@ (8007a80 <_dtoa_r+0x378>)
 800781c:	4b99      	ldr	r3, [pc, #612]	@ (8007a84 <_dtoa_r+0x37c>)
 800781e:	f7f9 f94d 	bl	8000abc <__aeabi_dadd>
 8007822:	0004      	movs	r4, r0
 8007824:	0038      	movs	r0, r7
 8007826:	000d      	movs	r5, r1
 8007828:	f7fa ffb2 	bl	8002790 <__aeabi_i2d>
 800782c:	4a96      	ldr	r2, [pc, #600]	@ (8007a88 <_dtoa_r+0x380>)
 800782e:	4b97      	ldr	r3, [pc, #604]	@ (8007a8c <_dtoa_r+0x384>)
 8007830:	f7fa f8ec 	bl	8001a0c <__aeabi_dmul>
 8007834:	0002      	movs	r2, r0
 8007836:	000b      	movs	r3, r1
 8007838:	0020      	movs	r0, r4
 800783a:	0029      	movs	r1, r5
 800783c:	f7f9 f93e 	bl	8000abc <__aeabi_dadd>
 8007840:	0004      	movs	r4, r0
 8007842:	000d      	movs	r5, r1
 8007844:	f7fa ff68 	bl	8002718 <__aeabi_d2iz>
 8007848:	2200      	movs	r2, #0
 800784a:	9004      	str	r0, [sp, #16]
 800784c:	2300      	movs	r3, #0
 800784e:	0020      	movs	r0, r4
 8007850:	0029      	movs	r1, r5
 8007852:	f7f8 fe01 	bl	8000458 <__aeabi_dcmplt>
 8007856:	2800      	cmp	r0, #0
 8007858:	d00b      	beq.n	8007872 <_dtoa_r+0x16a>
 800785a:	9804      	ldr	r0, [sp, #16]
 800785c:	f7fa ff98 	bl	8002790 <__aeabi_i2d>
 8007860:	002b      	movs	r3, r5
 8007862:	0022      	movs	r2, r4
 8007864:	f7f8 fdf2 	bl	800044c <__aeabi_dcmpeq>
 8007868:	4243      	negs	r3, r0
 800786a:	4158      	adcs	r0, r3
 800786c:	9b04      	ldr	r3, [sp, #16]
 800786e:	1a1b      	subs	r3, r3, r0
 8007870:	9304      	str	r3, [sp, #16]
 8007872:	2301      	movs	r3, #1
 8007874:	9315      	str	r3, [sp, #84]	@ 0x54
 8007876:	9b04      	ldr	r3, [sp, #16]
 8007878:	2b16      	cmp	r3, #22
 800787a:	d810      	bhi.n	800789e <_dtoa_r+0x196>
 800787c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800787e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007880:	9a04      	ldr	r2, [sp, #16]
 8007882:	4b83      	ldr	r3, [pc, #524]	@ (8007a90 <_dtoa_r+0x388>)
 8007884:	00d2      	lsls	r2, r2, #3
 8007886:	189b      	adds	r3, r3, r2
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	f7f8 fde4 	bl	8000458 <__aeabi_dcmplt>
 8007890:	2800      	cmp	r0, #0
 8007892:	d047      	beq.n	8007924 <_dtoa_r+0x21c>
 8007894:	9b04      	ldr	r3, [sp, #16]
 8007896:	3b01      	subs	r3, #1
 8007898:	9304      	str	r3, [sp, #16]
 800789a:	2300      	movs	r3, #0
 800789c:	9315      	str	r3, [sp, #84]	@ 0x54
 800789e:	2200      	movs	r2, #0
 80078a0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80078a2:	9206      	str	r2, [sp, #24]
 80078a4:	1bdb      	subs	r3, r3, r7
 80078a6:	1e5a      	subs	r2, r3, #1
 80078a8:	d53e      	bpl.n	8007928 <_dtoa_r+0x220>
 80078aa:	2201      	movs	r2, #1
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	9306      	str	r3, [sp, #24]
 80078b0:	2300      	movs	r3, #0
 80078b2:	930d      	str	r3, [sp, #52]	@ 0x34
 80078b4:	9b04      	ldr	r3, [sp, #16]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	db38      	blt.n	800792c <_dtoa_r+0x224>
 80078ba:	9a04      	ldr	r2, [sp, #16]
 80078bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80078be:	4694      	mov	ip, r2
 80078c0:	4463      	add	r3, ip
 80078c2:	930d      	str	r3, [sp, #52]	@ 0x34
 80078c4:	2300      	movs	r3, #0
 80078c6:	9214      	str	r2, [sp, #80]	@ 0x50
 80078c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80078ca:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80078cc:	2401      	movs	r4, #1
 80078ce:	2b09      	cmp	r3, #9
 80078d0:	d867      	bhi.n	80079a2 <_dtoa_r+0x29a>
 80078d2:	2b05      	cmp	r3, #5
 80078d4:	dd02      	ble.n	80078dc <_dtoa_r+0x1d4>
 80078d6:	2400      	movs	r4, #0
 80078d8:	3b04      	subs	r3, #4
 80078da:	9322      	str	r3, [sp, #136]	@ 0x88
 80078dc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80078de:	1e98      	subs	r0, r3, #2
 80078e0:	2803      	cmp	r0, #3
 80078e2:	d867      	bhi.n	80079b4 <_dtoa_r+0x2ac>
 80078e4:	f7f8 fc18 	bl	8000118 <__gnu_thumb1_case_uqi>
 80078e8:	5b383a2b 	.word	0x5b383a2b
 80078ec:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80078ee:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80078f0:	18f6      	adds	r6, r6, r3
 80078f2:	4b68      	ldr	r3, [pc, #416]	@ (8007a94 <_dtoa_r+0x38c>)
 80078f4:	18f2      	adds	r2, r6, r3
 80078f6:	2a20      	cmp	r2, #32
 80078f8:	dd0f      	ble.n	800791a <_dtoa_r+0x212>
 80078fa:	2340      	movs	r3, #64	@ 0x40
 80078fc:	1a9b      	subs	r3, r3, r2
 80078fe:	409f      	lsls	r7, r3
 8007900:	4b65      	ldr	r3, [pc, #404]	@ (8007a98 <_dtoa_r+0x390>)
 8007902:	0038      	movs	r0, r7
 8007904:	18f3      	adds	r3, r6, r3
 8007906:	40dc      	lsrs	r4, r3
 8007908:	4320      	orrs	r0, r4
 800790a:	f7fa ff6f 	bl	80027ec <__aeabi_ui2d>
 800790e:	2201      	movs	r2, #1
 8007910:	4b62      	ldr	r3, [pc, #392]	@ (8007a9c <_dtoa_r+0x394>)
 8007912:	1e77      	subs	r7, r6, #1
 8007914:	18cb      	adds	r3, r1, r3
 8007916:	9218      	str	r2, [sp, #96]	@ 0x60
 8007918:	e776      	b.n	8007808 <_dtoa_r+0x100>
 800791a:	2320      	movs	r3, #32
 800791c:	0020      	movs	r0, r4
 800791e:	1a9b      	subs	r3, r3, r2
 8007920:	4098      	lsls	r0, r3
 8007922:	e7f2      	b.n	800790a <_dtoa_r+0x202>
 8007924:	9015      	str	r0, [sp, #84]	@ 0x54
 8007926:	e7ba      	b.n	800789e <_dtoa_r+0x196>
 8007928:	920d      	str	r2, [sp, #52]	@ 0x34
 800792a:	e7c3      	b.n	80078b4 <_dtoa_r+0x1ac>
 800792c:	9b06      	ldr	r3, [sp, #24]
 800792e:	9a04      	ldr	r2, [sp, #16]
 8007930:	1a9b      	subs	r3, r3, r2
 8007932:	9306      	str	r3, [sp, #24]
 8007934:	4253      	negs	r3, r2
 8007936:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007938:	2300      	movs	r3, #0
 800793a:	9314      	str	r3, [sp, #80]	@ 0x50
 800793c:	e7c5      	b.n	80078ca <_dtoa_r+0x1c2>
 800793e:	2300      	movs	r3, #0
 8007940:	9310      	str	r3, [sp, #64]	@ 0x40
 8007942:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007944:	930e      	str	r3, [sp, #56]	@ 0x38
 8007946:	9309      	str	r3, [sp, #36]	@ 0x24
 8007948:	2b00      	cmp	r3, #0
 800794a:	dc13      	bgt.n	8007974 <_dtoa_r+0x26c>
 800794c:	2301      	movs	r3, #1
 800794e:	001a      	movs	r2, r3
 8007950:	930e      	str	r3, [sp, #56]	@ 0x38
 8007952:	9309      	str	r3, [sp, #36]	@ 0x24
 8007954:	9223      	str	r2, [sp, #140]	@ 0x8c
 8007956:	e00d      	b.n	8007974 <_dtoa_r+0x26c>
 8007958:	2301      	movs	r3, #1
 800795a:	e7f1      	b.n	8007940 <_dtoa_r+0x238>
 800795c:	2300      	movs	r3, #0
 800795e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007960:	9310      	str	r3, [sp, #64]	@ 0x40
 8007962:	4694      	mov	ip, r2
 8007964:	9b04      	ldr	r3, [sp, #16]
 8007966:	4463      	add	r3, ip
 8007968:	930e      	str	r3, [sp, #56]	@ 0x38
 800796a:	3301      	adds	r3, #1
 800796c:	9309      	str	r3, [sp, #36]	@ 0x24
 800796e:	2b00      	cmp	r3, #0
 8007970:	dc00      	bgt.n	8007974 <_dtoa_r+0x26c>
 8007972:	2301      	movs	r3, #1
 8007974:	9a03      	ldr	r2, [sp, #12]
 8007976:	2100      	movs	r1, #0
 8007978:	69d0      	ldr	r0, [r2, #28]
 800797a:	2204      	movs	r2, #4
 800797c:	0015      	movs	r5, r2
 800797e:	3514      	adds	r5, #20
 8007980:	429d      	cmp	r5, r3
 8007982:	d91b      	bls.n	80079bc <_dtoa_r+0x2b4>
 8007984:	6041      	str	r1, [r0, #4]
 8007986:	9803      	ldr	r0, [sp, #12]
 8007988:	f000 ff7e 	bl	8008888 <_Balloc>
 800798c:	9008      	str	r0, [sp, #32]
 800798e:	2800      	cmp	r0, #0
 8007990:	d117      	bne.n	80079c2 <_dtoa_r+0x2ba>
 8007992:	21b0      	movs	r1, #176	@ 0xb0
 8007994:	4b42      	ldr	r3, [pc, #264]	@ (8007aa0 <_dtoa_r+0x398>)
 8007996:	482e      	ldr	r0, [pc, #184]	@ (8007a50 <_dtoa_r+0x348>)
 8007998:	9a08      	ldr	r2, [sp, #32]
 800799a:	31ff      	adds	r1, #255	@ 0xff
 800799c:	e6c9      	b.n	8007732 <_dtoa_r+0x2a>
 800799e:	2301      	movs	r3, #1
 80079a0:	e7dd      	b.n	800795e <_dtoa_r+0x256>
 80079a2:	2300      	movs	r3, #0
 80079a4:	9410      	str	r4, [sp, #64]	@ 0x40
 80079a6:	9322      	str	r3, [sp, #136]	@ 0x88
 80079a8:	3b01      	subs	r3, #1
 80079aa:	930e      	str	r3, [sp, #56]	@ 0x38
 80079ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80079ae:	2200      	movs	r2, #0
 80079b0:	3313      	adds	r3, #19
 80079b2:	e7cf      	b.n	8007954 <_dtoa_r+0x24c>
 80079b4:	2301      	movs	r3, #1
 80079b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80079b8:	3b02      	subs	r3, #2
 80079ba:	e7f6      	b.n	80079aa <_dtoa_r+0x2a2>
 80079bc:	3101      	adds	r1, #1
 80079be:	0052      	lsls	r2, r2, #1
 80079c0:	e7dc      	b.n	800797c <_dtoa_r+0x274>
 80079c2:	9b03      	ldr	r3, [sp, #12]
 80079c4:	9a08      	ldr	r2, [sp, #32]
 80079c6:	69db      	ldr	r3, [r3, #28]
 80079c8:	601a      	str	r2, [r3, #0]
 80079ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079cc:	2b0e      	cmp	r3, #14
 80079ce:	d900      	bls.n	80079d2 <_dtoa_r+0x2ca>
 80079d0:	e0d9      	b.n	8007b86 <_dtoa_r+0x47e>
 80079d2:	2c00      	cmp	r4, #0
 80079d4:	d100      	bne.n	80079d8 <_dtoa_r+0x2d0>
 80079d6:	e0d6      	b.n	8007b86 <_dtoa_r+0x47e>
 80079d8:	9b04      	ldr	r3, [sp, #16]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	dd64      	ble.n	8007aa8 <_dtoa_r+0x3a0>
 80079de:	210f      	movs	r1, #15
 80079e0:	9a04      	ldr	r2, [sp, #16]
 80079e2:	4b2b      	ldr	r3, [pc, #172]	@ (8007a90 <_dtoa_r+0x388>)
 80079e4:	400a      	ands	r2, r1
 80079e6:	00d2      	lsls	r2, r2, #3
 80079e8:	189b      	adds	r3, r3, r2
 80079ea:	681e      	ldr	r6, [r3, #0]
 80079ec:	685f      	ldr	r7, [r3, #4]
 80079ee:	9b04      	ldr	r3, [sp, #16]
 80079f0:	2402      	movs	r4, #2
 80079f2:	111d      	asrs	r5, r3, #4
 80079f4:	05db      	lsls	r3, r3, #23
 80079f6:	d50a      	bpl.n	8007a0e <_dtoa_r+0x306>
 80079f8:	4b2a      	ldr	r3, [pc, #168]	@ (8007aa4 <_dtoa_r+0x39c>)
 80079fa:	400d      	ands	r5, r1
 80079fc:	6a1a      	ldr	r2, [r3, #32]
 80079fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a00:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007a02:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007a04:	f7f9 fbbe 	bl	8001184 <__aeabi_ddiv>
 8007a08:	900a      	str	r0, [sp, #40]	@ 0x28
 8007a0a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007a0c:	3401      	adds	r4, #1
 8007a0e:	4b25      	ldr	r3, [pc, #148]	@ (8007aa4 <_dtoa_r+0x39c>)
 8007a10:	930c      	str	r3, [sp, #48]	@ 0x30
 8007a12:	2d00      	cmp	r5, #0
 8007a14:	d108      	bne.n	8007a28 <_dtoa_r+0x320>
 8007a16:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007a18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a1a:	0032      	movs	r2, r6
 8007a1c:	003b      	movs	r3, r7
 8007a1e:	f7f9 fbb1 	bl	8001184 <__aeabi_ddiv>
 8007a22:	900a      	str	r0, [sp, #40]	@ 0x28
 8007a24:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007a26:	e05a      	b.n	8007ade <_dtoa_r+0x3d6>
 8007a28:	2301      	movs	r3, #1
 8007a2a:	421d      	tst	r5, r3
 8007a2c:	d009      	beq.n	8007a42 <_dtoa_r+0x33a>
 8007a2e:	18e4      	adds	r4, r4, r3
 8007a30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a32:	0030      	movs	r0, r6
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	0039      	movs	r1, r7
 8007a3a:	f7f9 ffe7 	bl	8001a0c <__aeabi_dmul>
 8007a3e:	0006      	movs	r6, r0
 8007a40:	000f      	movs	r7, r1
 8007a42:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a44:	106d      	asrs	r5, r5, #1
 8007a46:	3308      	adds	r3, #8
 8007a48:	e7e2      	b.n	8007a10 <_dtoa_r+0x308>
 8007a4a:	46c0      	nop			@ (mov r8, r8)
 8007a4c:	08009b19 	.word	0x08009b19
 8007a50:	08009b30 	.word	0x08009b30
 8007a54:	7ff00000 	.word	0x7ff00000
 8007a58:	0000270f 	.word	0x0000270f
 8007a5c:	08009b15 	.word	0x08009b15
 8007a60:	08009b18 	.word	0x08009b18
 8007a64:	08009ae9 	.word	0x08009ae9
 8007a68:	08009ae8 	.word	0x08009ae8
 8007a6c:	3ff00000 	.word	0x3ff00000
 8007a70:	fffffc01 	.word	0xfffffc01
 8007a74:	3ff80000 	.word	0x3ff80000
 8007a78:	636f4361 	.word	0x636f4361
 8007a7c:	3fd287a7 	.word	0x3fd287a7
 8007a80:	8b60c8b3 	.word	0x8b60c8b3
 8007a84:	3fc68a28 	.word	0x3fc68a28
 8007a88:	509f79fb 	.word	0x509f79fb
 8007a8c:	3fd34413 	.word	0x3fd34413
 8007a90:	08009c38 	.word	0x08009c38
 8007a94:	00000432 	.word	0x00000432
 8007a98:	00000412 	.word	0x00000412
 8007a9c:	fe100000 	.word	0xfe100000
 8007aa0:	08009b88 	.word	0x08009b88
 8007aa4:	08009c10 	.word	0x08009c10
 8007aa8:	9b04      	ldr	r3, [sp, #16]
 8007aaa:	2402      	movs	r4, #2
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d016      	beq.n	8007ade <_dtoa_r+0x3d6>
 8007ab0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007ab2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007ab4:	220f      	movs	r2, #15
 8007ab6:	425d      	negs	r5, r3
 8007ab8:	402a      	ands	r2, r5
 8007aba:	4bd7      	ldr	r3, [pc, #860]	@ (8007e18 <_dtoa_r+0x710>)
 8007abc:	00d2      	lsls	r2, r2, #3
 8007abe:	189b      	adds	r3, r3, r2
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	f7f9 ffa2 	bl	8001a0c <__aeabi_dmul>
 8007ac8:	2701      	movs	r7, #1
 8007aca:	2300      	movs	r3, #0
 8007acc:	900a      	str	r0, [sp, #40]	@ 0x28
 8007ace:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007ad0:	4ed2      	ldr	r6, [pc, #840]	@ (8007e1c <_dtoa_r+0x714>)
 8007ad2:	112d      	asrs	r5, r5, #4
 8007ad4:	2d00      	cmp	r5, #0
 8007ad6:	d000      	beq.n	8007ada <_dtoa_r+0x3d2>
 8007ad8:	e0ba      	b.n	8007c50 <_dtoa_r+0x548>
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1a1      	bne.n	8007a22 <_dtoa_r+0x31a>
 8007ade:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007ae0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007ae2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d100      	bne.n	8007aea <_dtoa_r+0x3e2>
 8007ae8:	e0bd      	b.n	8007c66 <_dtoa_r+0x55e>
 8007aea:	2200      	movs	r2, #0
 8007aec:	0030      	movs	r0, r6
 8007aee:	0039      	movs	r1, r7
 8007af0:	4bcb      	ldr	r3, [pc, #812]	@ (8007e20 <_dtoa_r+0x718>)
 8007af2:	f7f8 fcb1 	bl	8000458 <__aeabi_dcmplt>
 8007af6:	2800      	cmp	r0, #0
 8007af8:	d100      	bne.n	8007afc <_dtoa_r+0x3f4>
 8007afa:	e0b4      	b.n	8007c66 <_dtoa_r+0x55e>
 8007afc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d100      	bne.n	8007b04 <_dtoa_r+0x3fc>
 8007b02:	e0b0      	b.n	8007c66 <_dtoa_r+0x55e>
 8007b04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	dd39      	ble.n	8007b7e <_dtoa_r+0x476>
 8007b0a:	9b04      	ldr	r3, [sp, #16]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	930c      	str	r3, [sp, #48]	@ 0x30
 8007b12:	0030      	movs	r0, r6
 8007b14:	4bc3      	ldr	r3, [pc, #780]	@ (8007e24 <_dtoa_r+0x71c>)
 8007b16:	0039      	movs	r1, r7
 8007b18:	f7f9 ff78 	bl	8001a0c <__aeabi_dmul>
 8007b1c:	900a      	str	r0, [sp, #40]	@ 0x28
 8007b1e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007b20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b22:	3401      	adds	r4, #1
 8007b24:	0020      	movs	r0, r4
 8007b26:	9311      	str	r3, [sp, #68]	@ 0x44
 8007b28:	f7fa fe32 	bl	8002790 <__aeabi_i2d>
 8007b2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b30:	f7f9 ff6c 	bl	8001a0c <__aeabi_dmul>
 8007b34:	4bbc      	ldr	r3, [pc, #752]	@ (8007e28 <_dtoa_r+0x720>)
 8007b36:	2200      	movs	r2, #0
 8007b38:	f7f8 ffc0 	bl	8000abc <__aeabi_dadd>
 8007b3c:	4bbb      	ldr	r3, [pc, #748]	@ (8007e2c <_dtoa_r+0x724>)
 8007b3e:	0006      	movs	r6, r0
 8007b40:	18cf      	adds	r7, r1, r3
 8007b42:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d000      	beq.n	8007b4a <_dtoa_r+0x442>
 8007b48:	e091      	b.n	8007c6e <_dtoa_r+0x566>
 8007b4a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007b4c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007b4e:	2200      	movs	r2, #0
 8007b50:	4bb7      	ldr	r3, [pc, #732]	@ (8007e30 <_dtoa_r+0x728>)
 8007b52:	f7fa fa23 	bl	8001f9c <__aeabi_dsub>
 8007b56:	0032      	movs	r2, r6
 8007b58:	003b      	movs	r3, r7
 8007b5a:	0004      	movs	r4, r0
 8007b5c:	000d      	movs	r5, r1
 8007b5e:	f7f8 fc8f 	bl	8000480 <__aeabi_dcmpgt>
 8007b62:	2800      	cmp	r0, #0
 8007b64:	d000      	beq.n	8007b68 <_dtoa_r+0x460>
 8007b66:	e29d      	b.n	80080a4 <_dtoa_r+0x99c>
 8007b68:	2180      	movs	r1, #128	@ 0x80
 8007b6a:	0609      	lsls	r1, r1, #24
 8007b6c:	187b      	adds	r3, r7, r1
 8007b6e:	0032      	movs	r2, r6
 8007b70:	0020      	movs	r0, r4
 8007b72:	0029      	movs	r1, r5
 8007b74:	f7f8 fc70 	bl	8000458 <__aeabi_dcmplt>
 8007b78:	2800      	cmp	r0, #0
 8007b7a:	d000      	beq.n	8007b7e <_dtoa_r+0x476>
 8007b7c:	e130      	b.n	8007de0 <_dtoa_r+0x6d8>
 8007b7e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007b80:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8007b82:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b84:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007b86:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	da00      	bge.n	8007b8e <_dtoa_r+0x486>
 8007b8c:	e177      	b.n	8007e7e <_dtoa_r+0x776>
 8007b8e:	9a04      	ldr	r2, [sp, #16]
 8007b90:	2a0e      	cmp	r2, #14
 8007b92:	dd00      	ble.n	8007b96 <_dtoa_r+0x48e>
 8007b94:	e173      	b.n	8007e7e <_dtoa_r+0x776>
 8007b96:	4ba0      	ldr	r3, [pc, #640]	@ (8007e18 <_dtoa_r+0x710>)
 8007b98:	00d2      	lsls	r2, r2, #3
 8007b9a:	189b      	adds	r3, r3, r2
 8007b9c:	685c      	ldr	r4, [r3, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	9306      	str	r3, [sp, #24]
 8007ba2:	9407      	str	r4, [sp, #28]
 8007ba4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	da03      	bge.n	8007bb2 <_dtoa_r+0x4aa>
 8007baa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	dc00      	bgt.n	8007bb2 <_dtoa_r+0x4aa>
 8007bb0:	e106      	b.n	8007dc0 <_dtoa_r+0x6b8>
 8007bb2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007bb4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007bb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bb8:	9d08      	ldr	r5, [sp, #32]
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	195b      	adds	r3, r3, r5
 8007bbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bc0:	9a06      	ldr	r2, [sp, #24]
 8007bc2:	9b07      	ldr	r3, [sp, #28]
 8007bc4:	0030      	movs	r0, r6
 8007bc6:	0039      	movs	r1, r7
 8007bc8:	f7f9 fadc 	bl	8001184 <__aeabi_ddiv>
 8007bcc:	f7fa fda4 	bl	8002718 <__aeabi_d2iz>
 8007bd0:	9009      	str	r0, [sp, #36]	@ 0x24
 8007bd2:	f7fa fddd 	bl	8002790 <__aeabi_i2d>
 8007bd6:	9a06      	ldr	r2, [sp, #24]
 8007bd8:	9b07      	ldr	r3, [sp, #28]
 8007bda:	f7f9 ff17 	bl	8001a0c <__aeabi_dmul>
 8007bde:	0002      	movs	r2, r0
 8007be0:	000b      	movs	r3, r1
 8007be2:	0030      	movs	r0, r6
 8007be4:	0039      	movs	r1, r7
 8007be6:	f7fa f9d9 	bl	8001f9c <__aeabi_dsub>
 8007bea:	002b      	movs	r3, r5
 8007bec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bee:	3501      	adds	r5, #1
 8007bf0:	3230      	adds	r2, #48	@ 0x30
 8007bf2:	701a      	strb	r2, [r3, #0]
 8007bf4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007bf6:	002c      	movs	r4, r5
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d000      	beq.n	8007bfe <_dtoa_r+0x4f6>
 8007bfc:	e131      	b.n	8007e62 <_dtoa_r+0x75a>
 8007bfe:	0002      	movs	r2, r0
 8007c00:	000b      	movs	r3, r1
 8007c02:	f7f8 ff5b 	bl	8000abc <__aeabi_dadd>
 8007c06:	9a06      	ldr	r2, [sp, #24]
 8007c08:	9b07      	ldr	r3, [sp, #28]
 8007c0a:	0006      	movs	r6, r0
 8007c0c:	000f      	movs	r7, r1
 8007c0e:	f7f8 fc37 	bl	8000480 <__aeabi_dcmpgt>
 8007c12:	2800      	cmp	r0, #0
 8007c14:	d000      	beq.n	8007c18 <_dtoa_r+0x510>
 8007c16:	e10f      	b.n	8007e38 <_dtoa_r+0x730>
 8007c18:	9a06      	ldr	r2, [sp, #24]
 8007c1a:	9b07      	ldr	r3, [sp, #28]
 8007c1c:	0030      	movs	r0, r6
 8007c1e:	0039      	movs	r1, r7
 8007c20:	f7f8 fc14 	bl	800044c <__aeabi_dcmpeq>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	d003      	beq.n	8007c30 <_dtoa_r+0x528>
 8007c28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c2a:	07dd      	lsls	r5, r3, #31
 8007c2c:	d500      	bpl.n	8007c30 <_dtoa_r+0x528>
 8007c2e:	e103      	b.n	8007e38 <_dtoa_r+0x730>
 8007c30:	9905      	ldr	r1, [sp, #20]
 8007c32:	9803      	ldr	r0, [sp, #12]
 8007c34:	f000 fe6c 	bl	8008910 <_Bfree>
 8007c38:	2300      	movs	r3, #0
 8007c3a:	7023      	strb	r3, [r4, #0]
 8007c3c:	9b04      	ldr	r3, [sp, #16]
 8007c3e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007c40:	3301      	adds	r3, #1
 8007c42:	6013      	str	r3, [r2, #0]
 8007c44:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d100      	bne.n	8007c4c <_dtoa_r+0x544>
 8007c4a:	e5a7      	b.n	800779c <_dtoa_r+0x94>
 8007c4c:	601c      	str	r4, [r3, #0]
 8007c4e:	e5a5      	b.n	800779c <_dtoa_r+0x94>
 8007c50:	423d      	tst	r5, r7
 8007c52:	d005      	beq.n	8007c60 <_dtoa_r+0x558>
 8007c54:	6832      	ldr	r2, [r6, #0]
 8007c56:	6873      	ldr	r3, [r6, #4]
 8007c58:	f7f9 fed8 	bl	8001a0c <__aeabi_dmul>
 8007c5c:	003b      	movs	r3, r7
 8007c5e:	3401      	adds	r4, #1
 8007c60:	106d      	asrs	r5, r5, #1
 8007c62:	3608      	adds	r6, #8
 8007c64:	e736      	b.n	8007ad4 <_dtoa_r+0x3cc>
 8007c66:	9b04      	ldr	r3, [sp, #16]
 8007c68:	930c      	str	r3, [sp, #48]	@ 0x30
 8007c6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c6c:	e75a      	b.n	8007b24 <_dtoa_r+0x41c>
 8007c6e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007c70:	4b69      	ldr	r3, [pc, #420]	@ (8007e18 <_dtoa_r+0x710>)
 8007c72:	3a01      	subs	r2, #1
 8007c74:	00d2      	lsls	r2, r2, #3
 8007c76:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8007c78:	189b      	adds	r3, r3, r2
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	2900      	cmp	r1, #0
 8007c80:	d04c      	beq.n	8007d1c <_dtoa_r+0x614>
 8007c82:	2000      	movs	r0, #0
 8007c84:	496b      	ldr	r1, [pc, #428]	@ (8007e34 <_dtoa_r+0x72c>)
 8007c86:	f7f9 fa7d 	bl	8001184 <__aeabi_ddiv>
 8007c8a:	0032      	movs	r2, r6
 8007c8c:	003b      	movs	r3, r7
 8007c8e:	f7fa f985 	bl	8001f9c <__aeabi_dsub>
 8007c92:	9a08      	ldr	r2, [sp, #32]
 8007c94:	0006      	movs	r6, r0
 8007c96:	4694      	mov	ip, r2
 8007c98:	000f      	movs	r7, r1
 8007c9a:	9b08      	ldr	r3, [sp, #32]
 8007c9c:	9316      	str	r3, [sp, #88]	@ 0x58
 8007c9e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007ca0:	4463      	add	r3, ip
 8007ca2:	9311      	str	r3, [sp, #68]	@ 0x44
 8007ca4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007ca6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007ca8:	f7fa fd36 	bl	8002718 <__aeabi_d2iz>
 8007cac:	0005      	movs	r5, r0
 8007cae:	f7fa fd6f 	bl	8002790 <__aeabi_i2d>
 8007cb2:	0002      	movs	r2, r0
 8007cb4:	000b      	movs	r3, r1
 8007cb6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007cb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007cba:	f7fa f96f 	bl	8001f9c <__aeabi_dsub>
 8007cbe:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007cc0:	3530      	adds	r5, #48	@ 0x30
 8007cc2:	1c5c      	adds	r4, r3, #1
 8007cc4:	701d      	strb	r5, [r3, #0]
 8007cc6:	0032      	movs	r2, r6
 8007cc8:	003b      	movs	r3, r7
 8007cca:	900a      	str	r0, [sp, #40]	@ 0x28
 8007ccc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007cce:	f7f8 fbc3 	bl	8000458 <__aeabi_dcmplt>
 8007cd2:	2800      	cmp	r0, #0
 8007cd4:	d16a      	bne.n	8007dac <_dtoa_r+0x6a4>
 8007cd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007cd8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007cda:	2000      	movs	r0, #0
 8007cdc:	4950      	ldr	r1, [pc, #320]	@ (8007e20 <_dtoa_r+0x718>)
 8007cde:	f7fa f95d 	bl	8001f9c <__aeabi_dsub>
 8007ce2:	0032      	movs	r2, r6
 8007ce4:	003b      	movs	r3, r7
 8007ce6:	f7f8 fbb7 	bl	8000458 <__aeabi_dcmplt>
 8007cea:	2800      	cmp	r0, #0
 8007cec:	d000      	beq.n	8007cf0 <_dtoa_r+0x5e8>
 8007cee:	e0a5      	b.n	8007e3c <_dtoa_r+0x734>
 8007cf0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007cf2:	42a3      	cmp	r3, r4
 8007cf4:	d100      	bne.n	8007cf8 <_dtoa_r+0x5f0>
 8007cf6:	e742      	b.n	8007b7e <_dtoa_r+0x476>
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	0030      	movs	r0, r6
 8007cfc:	0039      	movs	r1, r7
 8007cfe:	4b49      	ldr	r3, [pc, #292]	@ (8007e24 <_dtoa_r+0x71c>)
 8007d00:	f7f9 fe84 	bl	8001a0c <__aeabi_dmul>
 8007d04:	2200      	movs	r2, #0
 8007d06:	0006      	movs	r6, r0
 8007d08:	000f      	movs	r7, r1
 8007d0a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007d0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007d0e:	4b45      	ldr	r3, [pc, #276]	@ (8007e24 <_dtoa_r+0x71c>)
 8007d10:	f7f9 fe7c 	bl	8001a0c <__aeabi_dmul>
 8007d14:	9416      	str	r4, [sp, #88]	@ 0x58
 8007d16:	900a      	str	r0, [sp, #40]	@ 0x28
 8007d18:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007d1a:	e7c3      	b.n	8007ca4 <_dtoa_r+0x59c>
 8007d1c:	0030      	movs	r0, r6
 8007d1e:	0039      	movs	r1, r7
 8007d20:	f7f9 fe74 	bl	8001a0c <__aeabi_dmul>
 8007d24:	9d08      	ldr	r5, [sp, #32]
 8007d26:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007d28:	002b      	movs	r3, r5
 8007d2a:	4694      	mov	ip, r2
 8007d2c:	9016      	str	r0, [sp, #88]	@ 0x58
 8007d2e:	9117      	str	r1, [sp, #92]	@ 0x5c
 8007d30:	4463      	add	r3, ip
 8007d32:	9319      	str	r3, [sp, #100]	@ 0x64
 8007d34:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007d36:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007d38:	f7fa fcee 	bl	8002718 <__aeabi_d2iz>
 8007d3c:	0004      	movs	r4, r0
 8007d3e:	f7fa fd27 	bl	8002790 <__aeabi_i2d>
 8007d42:	000b      	movs	r3, r1
 8007d44:	0002      	movs	r2, r0
 8007d46:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007d48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007d4a:	f7fa f927 	bl	8001f9c <__aeabi_dsub>
 8007d4e:	3430      	adds	r4, #48	@ 0x30
 8007d50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d52:	702c      	strb	r4, [r5, #0]
 8007d54:	3501      	adds	r5, #1
 8007d56:	0006      	movs	r6, r0
 8007d58:	000f      	movs	r7, r1
 8007d5a:	42ab      	cmp	r3, r5
 8007d5c:	d129      	bne.n	8007db2 <_dtoa_r+0x6aa>
 8007d5e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8007d60:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8007d62:	9b08      	ldr	r3, [sp, #32]
 8007d64:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8007d66:	469c      	mov	ip, r3
 8007d68:	2200      	movs	r2, #0
 8007d6a:	4b32      	ldr	r3, [pc, #200]	@ (8007e34 <_dtoa_r+0x72c>)
 8007d6c:	4464      	add	r4, ip
 8007d6e:	f7f8 fea5 	bl	8000abc <__aeabi_dadd>
 8007d72:	0002      	movs	r2, r0
 8007d74:	000b      	movs	r3, r1
 8007d76:	0030      	movs	r0, r6
 8007d78:	0039      	movs	r1, r7
 8007d7a:	f7f8 fb81 	bl	8000480 <__aeabi_dcmpgt>
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	d15c      	bne.n	8007e3c <_dtoa_r+0x734>
 8007d82:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007d84:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007d86:	2000      	movs	r0, #0
 8007d88:	492a      	ldr	r1, [pc, #168]	@ (8007e34 <_dtoa_r+0x72c>)
 8007d8a:	f7fa f907 	bl	8001f9c <__aeabi_dsub>
 8007d8e:	0002      	movs	r2, r0
 8007d90:	000b      	movs	r3, r1
 8007d92:	0030      	movs	r0, r6
 8007d94:	0039      	movs	r1, r7
 8007d96:	f7f8 fb5f 	bl	8000458 <__aeabi_dcmplt>
 8007d9a:	2800      	cmp	r0, #0
 8007d9c:	d100      	bne.n	8007da0 <_dtoa_r+0x698>
 8007d9e:	e6ee      	b.n	8007b7e <_dtoa_r+0x476>
 8007da0:	0023      	movs	r3, r4
 8007da2:	3c01      	subs	r4, #1
 8007da4:	7822      	ldrb	r2, [r4, #0]
 8007da6:	2a30      	cmp	r2, #48	@ 0x30
 8007da8:	d0fa      	beq.n	8007da0 <_dtoa_r+0x698>
 8007daa:	001c      	movs	r4, r3
 8007dac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007dae:	9304      	str	r3, [sp, #16]
 8007db0:	e73e      	b.n	8007c30 <_dtoa_r+0x528>
 8007db2:	2200      	movs	r2, #0
 8007db4:	4b1b      	ldr	r3, [pc, #108]	@ (8007e24 <_dtoa_r+0x71c>)
 8007db6:	f7f9 fe29 	bl	8001a0c <__aeabi_dmul>
 8007dba:	900a      	str	r0, [sp, #40]	@ 0x28
 8007dbc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007dbe:	e7b9      	b.n	8007d34 <_dtoa_r+0x62c>
 8007dc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d10c      	bne.n	8007de0 <_dtoa_r+0x6d8>
 8007dc6:	9806      	ldr	r0, [sp, #24]
 8007dc8:	9907      	ldr	r1, [sp, #28]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	4b18      	ldr	r3, [pc, #96]	@ (8007e30 <_dtoa_r+0x728>)
 8007dce:	f7f9 fe1d 	bl	8001a0c <__aeabi_dmul>
 8007dd2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007dd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007dd6:	f7f8 fb5d 	bl	8000494 <__aeabi_dcmpge>
 8007dda:	2800      	cmp	r0, #0
 8007ddc:	d100      	bne.n	8007de0 <_dtoa_r+0x6d8>
 8007dde:	e164      	b.n	80080aa <_dtoa_r+0x9a2>
 8007de0:	2600      	movs	r6, #0
 8007de2:	0037      	movs	r7, r6
 8007de4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007de6:	9c08      	ldr	r4, [sp, #32]
 8007de8:	43db      	mvns	r3, r3
 8007dea:	930c      	str	r3, [sp, #48]	@ 0x30
 8007dec:	2300      	movs	r3, #0
 8007dee:	9304      	str	r3, [sp, #16]
 8007df0:	0031      	movs	r1, r6
 8007df2:	9803      	ldr	r0, [sp, #12]
 8007df4:	f000 fd8c 	bl	8008910 <_Bfree>
 8007df8:	2f00      	cmp	r7, #0
 8007dfa:	d0d7      	beq.n	8007dac <_dtoa_r+0x6a4>
 8007dfc:	9b04      	ldr	r3, [sp, #16]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d005      	beq.n	8007e0e <_dtoa_r+0x706>
 8007e02:	42bb      	cmp	r3, r7
 8007e04:	d003      	beq.n	8007e0e <_dtoa_r+0x706>
 8007e06:	0019      	movs	r1, r3
 8007e08:	9803      	ldr	r0, [sp, #12]
 8007e0a:	f000 fd81 	bl	8008910 <_Bfree>
 8007e0e:	0039      	movs	r1, r7
 8007e10:	9803      	ldr	r0, [sp, #12]
 8007e12:	f000 fd7d 	bl	8008910 <_Bfree>
 8007e16:	e7c9      	b.n	8007dac <_dtoa_r+0x6a4>
 8007e18:	08009c38 	.word	0x08009c38
 8007e1c:	08009c10 	.word	0x08009c10
 8007e20:	3ff00000 	.word	0x3ff00000
 8007e24:	40240000 	.word	0x40240000
 8007e28:	401c0000 	.word	0x401c0000
 8007e2c:	fcc00000 	.word	0xfcc00000
 8007e30:	40140000 	.word	0x40140000
 8007e34:	3fe00000 	.word	0x3fe00000
 8007e38:	9b04      	ldr	r3, [sp, #16]
 8007e3a:	930c      	str	r3, [sp, #48]	@ 0x30
 8007e3c:	0023      	movs	r3, r4
 8007e3e:	001c      	movs	r4, r3
 8007e40:	3b01      	subs	r3, #1
 8007e42:	781a      	ldrb	r2, [r3, #0]
 8007e44:	2a39      	cmp	r2, #57	@ 0x39
 8007e46:	d108      	bne.n	8007e5a <_dtoa_r+0x752>
 8007e48:	9a08      	ldr	r2, [sp, #32]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d1f7      	bne.n	8007e3e <_dtoa_r+0x736>
 8007e4e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007e50:	9908      	ldr	r1, [sp, #32]
 8007e52:	3201      	adds	r2, #1
 8007e54:	920c      	str	r2, [sp, #48]	@ 0x30
 8007e56:	2230      	movs	r2, #48	@ 0x30
 8007e58:	700a      	strb	r2, [r1, #0]
 8007e5a:	781a      	ldrb	r2, [r3, #0]
 8007e5c:	3201      	adds	r2, #1
 8007e5e:	701a      	strb	r2, [r3, #0]
 8007e60:	e7a4      	b.n	8007dac <_dtoa_r+0x6a4>
 8007e62:	2200      	movs	r2, #0
 8007e64:	4bc6      	ldr	r3, [pc, #792]	@ (8008180 <_dtoa_r+0xa78>)
 8007e66:	f7f9 fdd1 	bl	8001a0c <__aeabi_dmul>
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	0006      	movs	r6, r0
 8007e70:	000f      	movs	r7, r1
 8007e72:	f7f8 faeb 	bl	800044c <__aeabi_dcmpeq>
 8007e76:	2800      	cmp	r0, #0
 8007e78:	d100      	bne.n	8007e7c <_dtoa_r+0x774>
 8007e7a:	e6a1      	b.n	8007bc0 <_dtoa_r+0x4b8>
 8007e7c:	e6d8      	b.n	8007c30 <_dtoa_r+0x528>
 8007e7e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8007e80:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8007e82:	9c06      	ldr	r4, [sp, #24]
 8007e84:	2f00      	cmp	r7, #0
 8007e86:	d014      	beq.n	8007eb2 <_dtoa_r+0x7aa>
 8007e88:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007e8a:	2a01      	cmp	r2, #1
 8007e8c:	dd00      	ble.n	8007e90 <_dtoa_r+0x788>
 8007e8e:	e0c8      	b.n	8008022 <_dtoa_r+0x91a>
 8007e90:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8007e92:	2a00      	cmp	r2, #0
 8007e94:	d100      	bne.n	8007e98 <_dtoa_r+0x790>
 8007e96:	e0be      	b.n	8008016 <_dtoa_r+0x90e>
 8007e98:	4aba      	ldr	r2, [pc, #744]	@ (8008184 <_dtoa_r+0xa7c>)
 8007e9a:	189b      	adds	r3, r3, r2
 8007e9c:	9a06      	ldr	r2, [sp, #24]
 8007e9e:	2101      	movs	r1, #1
 8007ea0:	18d2      	adds	r2, r2, r3
 8007ea2:	9206      	str	r2, [sp, #24]
 8007ea4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007ea6:	9803      	ldr	r0, [sp, #12]
 8007ea8:	18d3      	adds	r3, r2, r3
 8007eaa:	930d      	str	r3, [sp, #52]	@ 0x34
 8007eac:	f000 fde8 	bl	8008a80 <__i2b>
 8007eb0:	0007      	movs	r7, r0
 8007eb2:	2c00      	cmp	r4, #0
 8007eb4:	d00e      	beq.n	8007ed4 <_dtoa_r+0x7cc>
 8007eb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	dd0b      	ble.n	8007ed4 <_dtoa_r+0x7cc>
 8007ebc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007ebe:	0023      	movs	r3, r4
 8007ec0:	4294      	cmp	r4, r2
 8007ec2:	dd00      	ble.n	8007ec6 <_dtoa_r+0x7be>
 8007ec4:	0013      	movs	r3, r2
 8007ec6:	9a06      	ldr	r2, [sp, #24]
 8007ec8:	1ae4      	subs	r4, r4, r3
 8007eca:	1ad2      	subs	r2, r2, r3
 8007ecc:	9206      	str	r2, [sp, #24]
 8007ece:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	930d      	str	r3, [sp, #52]	@ 0x34
 8007ed4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d01f      	beq.n	8007f1a <_dtoa_r+0x812>
 8007eda:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d100      	bne.n	8007ee2 <_dtoa_r+0x7da>
 8007ee0:	e0b5      	b.n	800804e <_dtoa_r+0x946>
 8007ee2:	2d00      	cmp	r5, #0
 8007ee4:	d010      	beq.n	8007f08 <_dtoa_r+0x800>
 8007ee6:	0039      	movs	r1, r7
 8007ee8:	002a      	movs	r2, r5
 8007eea:	9803      	ldr	r0, [sp, #12]
 8007eec:	f000 fe92 	bl	8008c14 <__pow5mult>
 8007ef0:	9a05      	ldr	r2, [sp, #20]
 8007ef2:	0001      	movs	r1, r0
 8007ef4:	0007      	movs	r7, r0
 8007ef6:	9803      	ldr	r0, [sp, #12]
 8007ef8:	f000 fdda 	bl	8008ab0 <__multiply>
 8007efc:	0006      	movs	r6, r0
 8007efe:	9905      	ldr	r1, [sp, #20]
 8007f00:	9803      	ldr	r0, [sp, #12]
 8007f02:	f000 fd05 	bl	8008910 <_Bfree>
 8007f06:	9605      	str	r6, [sp, #20]
 8007f08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f0a:	1b5a      	subs	r2, r3, r5
 8007f0c:	42ab      	cmp	r3, r5
 8007f0e:	d004      	beq.n	8007f1a <_dtoa_r+0x812>
 8007f10:	9905      	ldr	r1, [sp, #20]
 8007f12:	9803      	ldr	r0, [sp, #12]
 8007f14:	f000 fe7e 	bl	8008c14 <__pow5mult>
 8007f18:	9005      	str	r0, [sp, #20]
 8007f1a:	2101      	movs	r1, #1
 8007f1c:	9803      	ldr	r0, [sp, #12]
 8007f1e:	f000 fdaf 	bl	8008a80 <__i2b>
 8007f22:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007f24:	0006      	movs	r6, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d100      	bne.n	8007f2c <_dtoa_r+0x824>
 8007f2a:	e1bc      	b.n	80082a6 <_dtoa_r+0xb9e>
 8007f2c:	001a      	movs	r2, r3
 8007f2e:	0001      	movs	r1, r0
 8007f30:	9803      	ldr	r0, [sp, #12]
 8007f32:	f000 fe6f 	bl	8008c14 <__pow5mult>
 8007f36:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007f38:	0006      	movs	r6, r0
 8007f3a:	2500      	movs	r5, #0
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	dc16      	bgt.n	8007f6e <_dtoa_r+0x866>
 8007f40:	2500      	movs	r5, #0
 8007f42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f44:	42ab      	cmp	r3, r5
 8007f46:	d10e      	bne.n	8007f66 <_dtoa_r+0x85e>
 8007f48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f4a:	031b      	lsls	r3, r3, #12
 8007f4c:	42ab      	cmp	r3, r5
 8007f4e:	d10a      	bne.n	8007f66 <_dtoa_r+0x85e>
 8007f50:	4b8d      	ldr	r3, [pc, #564]	@ (8008188 <_dtoa_r+0xa80>)
 8007f52:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007f54:	4213      	tst	r3, r2
 8007f56:	d006      	beq.n	8007f66 <_dtoa_r+0x85e>
 8007f58:	9b06      	ldr	r3, [sp, #24]
 8007f5a:	3501      	adds	r5, #1
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	9306      	str	r3, [sp, #24]
 8007f60:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f62:	3301      	adds	r3, #1
 8007f64:	930d      	str	r3, [sp, #52]	@ 0x34
 8007f66:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007f68:	2001      	movs	r0, #1
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d008      	beq.n	8007f80 <_dtoa_r+0x878>
 8007f6e:	6933      	ldr	r3, [r6, #16]
 8007f70:	3303      	adds	r3, #3
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	18f3      	adds	r3, r6, r3
 8007f76:	6858      	ldr	r0, [r3, #4]
 8007f78:	f000 fd32 	bl	80089e0 <__hi0bits>
 8007f7c:	2320      	movs	r3, #32
 8007f7e:	1a18      	subs	r0, r3, r0
 8007f80:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f82:	1818      	adds	r0, r3, r0
 8007f84:	0002      	movs	r2, r0
 8007f86:	231f      	movs	r3, #31
 8007f88:	401a      	ands	r2, r3
 8007f8a:	4218      	tst	r0, r3
 8007f8c:	d065      	beq.n	800805a <_dtoa_r+0x952>
 8007f8e:	3301      	adds	r3, #1
 8007f90:	1a9b      	subs	r3, r3, r2
 8007f92:	2b04      	cmp	r3, #4
 8007f94:	dd5d      	ble.n	8008052 <_dtoa_r+0x94a>
 8007f96:	231c      	movs	r3, #28
 8007f98:	1a9b      	subs	r3, r3, r2
 8007f9a:	9a06      	ldr	r2, [sp, #24]
 8007f9c:	18e4      	adds	r4, r4, r3
 8007f9e:	18d2      	adds	r2, r2, r3
 8007fa0:	9206      	str	r2, [sp, #24]
 8007fa2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007fa4:	18d3      	adds	r3, r2, r3
 8007fa6:	930d      	str	r3, [sp, #52]	@ 0x34
 8007fa8:	9b06      	ldr	r3, [sp, #24]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	dd05      	ble.n	8007fba <_dtoa_r+0x8b2>
 8007fae:	001a      	movs	r2, r3
 8007fb0:	9905      	ldr	r1, [sp, #20]
 8007fb2:	9803      	ldr	r0, [sp, #12]
 8007fb4:	f000 fe8a 	bl	8008ccc <__lshift>
 8007fb8:	9005      	str	r0, [sp, #20]
 8007fba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	dd05      	ble.n	8007fcc <_dtoa_r+0x8c4>
 8007fc0:	0031      	movs	r1, r6
 8007fc2:	001a      	movs	r2, r3
 8007fc4:	9803      	ldr	r0, [sp, #12]
 8007fc6:	f000 fe81 	bl	8008ccc <__lshift>
 8007fca:	0006      	movs	r6, r0
 8007fcc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d045      	beq.n	800805e <_dtoa_r+0x956>
 8007fd2:	0031      	movs	r1, r6
 8007fd4:	9805      	ldr	r0, [sp, #20]
 8007fd6:	f000 fee5 	bl	8008da4 <__mcmp>
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	da3f      	bge.n	800805e <_dtoa_r+0x956>
 8007fde:	9b04      	ldr	r3, [sp, #16]
 8007fe0:	220a      	movs	r2, #10
 8007fe2:	3b01      	subs	r3, #1
 8007fe4:	930c      	str	r3, [sp, #48]	@ 0x30
 8007fe6:	9905      	ldr	r1, [sp, #20]
 8007fe8:	2300      	movs	r3, #0
 8007fea:	9803      	ldr	r0, [sp, #12]
 8007fec:	f000 fcb4 	bl	8008958 <__multadd>
 8007ff0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007ff2:	9005      	str	r0, [sp, #20]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d100      	bne.n	8007ffa <_dtoa_r+0x8f2>
 8007ff8:	e15c      	b.n	80082b4 <_dtoa_r+0xbac>
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	0039      	movs	r1, r7
 8007ffe:	220a      	movs	r2, #10
 8008000:	9803      	ldr	r0, [sp, #12]
 8008002:	f000 fca9 	bl	8008958 <__multadd>
 8008006:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008008:	0007      	movs	r7, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	dc55      	bgt.n	80080ba <_dtoa_r+0x9b2>
 800800e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008010:	2b02      	cmp	r3, #2
 8008012:	dc2d      	bgt.n	8008070 <_dtoa_r+0x968>
 8008014:	e051      	b.n	80080ba <_dtoa_r+0x9b2>
 8008016:	2336      	movs	r3, #54	@ 0x36
 8008018:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800801a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800801c:	9c06      	ldr	r4, [sp, #24]
 800801e:	1a9b      	subs	r3, r3, r2
 8008020:	e73c      	b.n	8007e9c <_dtoa_r+0x794>
 8008022:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008024:	1e5d      	subs	r5, r3, #1
 8008026:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008028:	42ab      	cmp	r3, r5
 800802a:	db08      	blt.n	800803e <_dtoa_r+0x936>
 800802c:	1b5d      	subs	r5, r3, r5
 800802e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008030:	9c06      	ldr	r4, [sp, #24]
 8008032:	2b00      	cmp	r3, #0
 8008034:	db00      	blt.n	8008038 <_dtoa_r+0x930>
 8008036:	e731      	b.n	8007e9c <_dtoa_r+0x794>
 8008038:	1ae4      	subs	r4, r4, r3
 800803a:	2300      	movs	r3, #0
 800803c:	e72e      	b.n	8007e9c <_dtoa_r+0x794>
 800803e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008040:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008042:	1aeb      	subs	r3, r5, r3
 8008044:	18d3      	adds	r3, r2, r3
 8008046:	950f      	str	r5, [sp, #60]	@ 0x3c
 8008048:	9314      	str	r3, [sp, #80]	@ 0x50
 800804a:	2500      	movs	r5, #0
 800804c:	e7ef      	b.n	800802e <_dtoa_r+0x926>
 800804e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008050:	e75e      	b.n	8007f10 <_dtoa_r+0x808>
 8008052:	2b04      	cmp	r3, #4
 8008054:	d0a8      	beq.n	8007fa8 <_dtoa_r+0x8a0>
 8008056:	331c      	adds	r3, #28
 8008058:	e79f      	b.n	8007f9a <_dtoa_r+0x892>
 800805a:	0013      	movs	r3, r2
 800805c:	e7fb      	b.n	8008056 <_dtoa_r+0x94e>
 800805e:	9b04      	ldr	r3, [sp, #16]
 8008060:	930c      	str	r3, [sp, #48]	@ 0x30
 8008062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008064:	930e      	str	r3, [sp, #56]	@ 0x38
 8008066:	2b00      	cmp	r3, #0
 8008068:	dc23      	bgt.n	80080b2 <_dtoa_r+0x9aa>
 800806a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800806c:	2b02      	cmp	r3, #2
 800806e:	dd20      	ble.n	80080b2 <_dtoa_r+0x9aa>
 8008070:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008072:	2b00      	cmp	r3, #0
 8008074:	d000      	beq.n	8008078 <_dtoa_r+0x970>
 8008076:	e6b5      	b.n	8007de4 <_dtoa_r+0x6dc>
 8008078:	0031      	movs	r1, r6
 800807a:	2205      	movs	r2, #5
 800807c:	9803      	ldr	r0, [sp, #12]
 800807e:	f000 fc6b 	bl	8008958 <__multadd>
 8008082:	0006      	movs	r6, r0
 8008084:	0001      	movs	r1, r0
 8008086:	9805      	ldr	r0, [sp, #20]
 8008088:	f000 fe8c 	bl	8008da4 <__mcmp>
 800808c:	2800      	cmp	r0, #0
 800808e:	dc00      	bgt.n	8008092 <_dtoa_r+0x98a>
 8008090:	e6a8      	b.n	8007de4 <_dtoa_r+0x6dc>
 8008092:	9b08      	ldr	r3, [sp, #32]
 8008094:	9a08      	ldr	r2, [sp, #32]
 8008096:	1c5c      	adds	r4, r3, #1
 8008098:	2331      	movs	r3, #49	@ 0x31
 800809a:	7013      	strb	r3, [r2, #0]
 800809c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800809e:	3301      	adds	r3, #1
 80080a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80080a2:	e6a3      	b.n	8007dec <_dtoa_r+0x6e4>
 80080a4:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80080a6:	0037      	movs	r7, r6
 80080a8:	e7f3      	b.n	8008092 <_dtoa_r+0x98a>
 80080aa:	9b04      	ldr	r3, [sp, #16]
 80080ac:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80080ae:	930c      	str	r3, [sp, #48]	@ 0x30
 80080b0:	e7f9      	b.n	80080a6 <_dtoa_r+0x99e>
 80080b2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d100      	bne.n	80080ba <_dtoa_r+0x9b2>
 80080b8:	e100      	b.n	80082bc <_dtoa_r+0xbb4>
 80080ba:	2c00      	cmp	r4, #0
 80080bc:	dd05      	ble.n	80080ca <_dtoa_r+0x9c2>
 80080be:	0039      	movs	r1, r7
 80080c0:	0022      	movs	r2, r4
 80080c2:	9803      	ldr	r0, [sp, #12]
 80080c4:	f000 fe02 	bl	8008ccc <__lshift>
 80080c8:	0007      	movs	r7, r0
 80080ca:	0038      	movs	r0, r7
 80080cc:	2d00      	cmp	r5, #0
 80080ce:	d018      	beq.n	8008102 <_dtoa_r+0x9fa>
 80080d0:	6879      	ldr	r1, [r7, #4]
 80080d2:	9803      	ldr	r0, [sp, #12]
 80080d4:	f000 fbd8 	bl	8008888 <_Balloc>
 80080d8:	1e04      	subs	r4, r0, #0
 80080da:	d105      	bne.n	80080e8 <_dtoa_r+0x9e0>
 80080dc:	0022      	movs	r2, r4
 80080de:	4b2b      	ldr	r3, [pc, #172]	@ (800818c <_dtoa_r+0xa84>)
 80080e0:	482b      	ldr	r0, [pc, #172]	@ (8008190 <_dtoa_r+0xa88>)
 80080e2:	492c      	ldr	r1, [pc, #176]	@ (8008194 <_dtoa_r+0xa8c>)
 80080e4:	f7ff fb25 	bl	8007732 <_dtoa_r+0x2a>
 80080e8:	0039      	movs	r1, r7
 80080ea:	693a      	ldr	r2, [r7, #16]
 80080ec:	310c      	adds	r1, #12
 80080ee:	3202      	adds	r2, #2
 80080f0:	0092      	lsls	r2, r2, #2
 80080f2:	300c      	adds	r0, #12
 80080f4:	f001 f85a 	bl	80091ac <memcpy>
 80080f8:	2201      	movs	r2, #1
 80080fa:	0021      	movs	r1, r4
 80080fc:	9803      	ldr	r0, [sp, #12]
 80080fe:	f000 fde5 	bl	8008ccc <__lshift>
 8008102:	9b08      	ldr	r3, [sp, #32]
 8008104:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008106:	9306      	str	r3, [sp, #24]
 8008108:	3b01      	subs	r3, #1
 800810a:	189b      	adds	r3, r3, r2
 800810c:	2201      	movs	r2, #1
 800810e:	9704      	str	r7, [sp, #16]
 8008110:	0007      	movs	r7, r0
 8008112:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008114:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008116:	4013      	ands	r3, r2
 8008118:	930e      	str	r3, [sp, #56]	@ 0x38
 800811a:	0031      	movs	r1, r6
 800811c:	9805      	ldr	r0, [sp, #20]
 800811e:	f7ff fa65 	bl	80075ec <quorem>
 8008122:	9904      	ldr	r1, [sp, #16]
 8008124:	0005      	movs	r5, r0
 8008126:	900a      	str	r0, [sp, #40]	@ 0x28
 8008128:	9805      	ldr	r0, [sp, #20]
 800812a:	f000 fe3b 	bl	8008da4 <__mcmp>
 800812e:	003a      	movs	r2, r7
 8008130:	900d      	str	r0, [sp, #52]	@ 0x34
 8008132:	0031      	movs	r1, r6
 8008134:	9803      	ldr	r0, [sp, #12]
 8008136:	f000 fe51 	bl	8008ddc <__mdiff>
 800813a:	2201      	movs	r2, #1
 800813c:	68c3      	ldr	r3, [r0, #12]
 800813e:	0004      	movs	r4, r0
 8008140:	3530      	adds	r5, #48	@ 0x30
 8008142:	9209      	str	r2, [sp, #36]	@ 0x24
 8008144:	2b00      	cmp	r3, #0
 8008146:	d104      	bne.n	8008152 <_dtoa_r+0xa4a>
 8008148:	0001      	movs	r1, r0
 800814a:	9805      	ldr	r0, [sp, #20]
 800814c:	f000 fe2a 	bl	8008da4 <__mcmp>
 8008150:	9009      	str	r0, [sp, #36]	@ 0x24
 8008152:	0021      	movs	r1, r4
 8008154:	9803      	ldr	r0, [sp, #12]
 8008156:	f000 fbdb 	bl	8008910 <_Bfree>
 800815a:	9b06      	ldr	r3, [sp, #24]
 800815c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800815e:	1c5c      	adds	r4, r3, #1
 8008160:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008162:	4313      	orrs	r3, r2
 8008164:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008166:	4313      	orrs	r3, r2
 8008168:	d116      	bne.n	8008198 <_dtoa_r+0xa90>
 800816a:	2d39      	cmp	r5, #57	@ 0x39
 800816c:	d02f      	beq.n	80081ce <_dtoa_r+0xac6>
 800816e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008170:	2b00      	cmp	r3, #0
 8008172:	dd01      	ble.n	8008178 <_dtoa_r+0xa70>
 8008174:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8008176:	3531      	adds	r5, #49	@ 0x31
 8008178:	9b06      	ldr	r3, [sp, #24]
 800817a:	701d      	strb	r5, [r3, #0]
 800817c:	e638      	b.n	8007df0 <_dtoa_r+0x6e8>
 800817e:	46c0      	nop			@ (mov r8, r8)
 8008180:	40240000 	.word	0x40240000
 8008184:	00000433 	.word	0x00000433
 8008188:	7ff00000 	.word	0x7ff00000
 800818c:	08009b88 	.word	0x08009b88
 8008190:	08009b30 	.word	0x08009b30
 8008194:	000002ef 	.word	0x000002ef
 8008198:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800819a:	2b00      	cmp	r3, #0
 800819c:	db04      	blt.n	80081a8 <_dtoa_r+0xaa0>
 800819e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80081a0:	4313      	orrs	r3, r2
 80081a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80081a4:	4313      	orrs	r3, r2
 80081a6:	d11e      	bne.n	80081e6 <_dtoa_r+0xade>
 80081a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	dde4      	ble.n	8008178 <_dtoa_r+0xa70>
 80081ae:	9905      	ldr	r1, [sp, #20]
 80081b0:	2201      	movs	r2, #1
 80081b2:	9803      	ldr	r0, [sp, #12]
 80081b4:	f000 fd8a 	bl	8008ccc <__lshift>
 80081b8:	0031      	movs	r1, r6
 80081ba:	9005      	str	r0, [sp, #20]
 80081bc:	f000 fdf2 	bl	8008da4 <__mcmp>
 80081c0:	2800      	cmp	r0, #0
 80081c2:	dc02      	bgt.n	80081ca <_dtoa_r+0xac2>
 80081c4:	d1d8      	bne.n	8008178 <_dtoa_r+0xa70>
 80081c6:	07eb      	lsls	r3, r5, #31
 80081c8:	d5d6      	bpl.n	8008178 <_dtoa_r+0xa70>
 80081ca:	2d39      	cmp	r5, #57	@ 0x39
 80081cc:	d1d2      	bne.n	8008174 <_dtoa_r+0xa6c>
 80081ce:	2339      	movs	r3, #57	@ 0x39
 80081d0:	9a06      	ldr	r2, [sp, #24]
 80081d2:	7013      	strb	r3, [r2, #0]
 80081d4:	0023      	movs	r3, r4
 80081d6:	001c      	movs	r4, r3
 80081d8:	3b01      	subs	r3, #1
 80081da:	781a      	ldrb	r2, [r3, #0]
 80081dc:	2a39      	cmp	r2, #57	@ 0x39
 80081de:	d04f      	beq.n	8008280 <_dtoa_r+0xb78>
 80081e0:	3201      	adds	r2, #1
 80081e2:	701a      	strb	r2, [r3, #0]
 80081e4:	e604      	b.n	8007df0 <_dtoa_r+0x6e8>
 80081e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	dd03      	ble.n	80081f4 <_dtoa_r+0xaec>
 80081ec:	2d39      	cmp	r5, #57	@ 0x39
 80081ee:	d0ee      	beq.n	80081ce <_dtoa_r+0xac6>
 80081f0:	3501      	adds	r5, #1
 80081f2:	e7c1      	b.n	8008178 <_dtoa_r+0xa70>
 80081f4:	9b06      	ldr	r3, [sp, #24]
 80081f6:	9a06      	ldr	r2, [sp, #24]
 80081f8:	701d      	strb	r5, [r3, #0]
 80081fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d02a      	beq.n	8008256 <_dtoa_r+0xb4e>
 8008200:	2300      	movs	r3, #0
 8008202:	220a      	movs	r2, #10
 8008204:	9905      	ldr	r1, [sp, #20]
 8008206:	9803      	ldr	r0, [sp, #12]
 8008208:	f000 fba6 	bl	8008958 <__multadd>
 800820c:	9b04      	ldr	r3, [sp, #16]
 800820e:	9005      	str	r0, [sp, #20]
 8008210:	42bb      	cmp	r3, r7
 8008212:	d109      	bne.n	8008228 <_dtoa_r+0xb20>
 8008214:	2300      	movs	r3, #0
 8008216:	220a      	movs	r2, #10
 8008218:	9904      	ldr	r1, [sp, #16]
 800821a:	9803      	ldr	r0, [sp, #12]
 800821c:	f000 fb9c 	bl	8008958 <__multadd>
 8008220:	9004      	str	r0, [sp, #16]
 8008222:	0007      	movs	r7, r0
 8008224:	9406      	str	r4, [sp, #24]
 8008226:	e778      	b.n	800811a <_dtoa_r+0xa12>
 8008228:	9904      	ldr	r1, [sp, #16]
 800822a:	2300      	movs	r3, #0
 800822c:	220a      	movs	r2, #10
 800822e:	9803      	ldr	r0, [sp, #12]
 8008230:	f000 fb92 	bl	8008958 <__multadd>
 8008234:	2300      	movs	r3, #0
 8008236:	9004      	str	r0, [sp, #16]
 8008238:	220a      	movs	r2, #10
 800823a:	0039      	movs	r1, r7
 800823c:	9803      	ldr	r0, [sp, #12]
 800823e:	f000 fb8b 	bl	8008958 <__multadd>
 8008242:	e7ee      	b.n	8008222 <_dtoa_r+0xb1a>
 8008244:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008246:	2401      	movs	r4, #1
 8008248:	2b00      	cmp	r3, #0
 800824a:	dd00      	ble.n	800824e <_dtoa_r+0xb46>
 800824c:	001c      	movs	r4, r3
 800824e:	9b08      	ldr	r3, [sp, #32]
 8008250:	191c      	adds	r4, r3, r4
 8008252:	2300      	movs	r3, #0
 8008254:	9304      	str	r3, [sp, #16]
 8008256:	9905      	ldr	r1, [sp, #20]
 8008258:	2201      	movs	r2, #1
 800825a:	9803      	ldr	r0, [sp, #12]
 800825c:	f000 fd36 	bl	8008ccc <__lshift>
 8008260:	0031      	movs	r1, r6
 8008262:	9005      	str	r0, [sp, #20]
 8008264:	f000 fd9e 	bl	8008da4 <__mcmp>
 8008268:	2800      	cmp	r0, #0
 800826a:	dcb3      	bgt.n	80081d4 <_dtoa_r+0xacc>
 800826c:	d101      	bne.n	8008272 <_dtoa_r+0xb6a>
 800826e:	07ed      	lsls	r5, r5, #31
 8008270:	d4b0      	bmi.n	80081d4 <_dtoa_r+0xacc>
 8008272:	0023      	movs	r3, r4
 8008274:	001c      	movs	r4, r3
 8008276:	3b01      	subs	r3, #1
 8008278:	781a      	ldrb	r2, [r3, #0]
 800827a:	2a30      	cmp	r2, #48	@ 0x30
 800827c:	d0fa      	beq.n	8008274 <_dtoa_r+0xb6c>
 800827e:	e5b7      	b.n	8007df0 <_dtoa_r+0x6e8>
 8008280:	9a08      	ldr	r2, [sp, #32]
 8008282:	429a      	cmp	r2, r3
 8008284:	d1a7      	bne.n	80081d6 <_dtoa_r+0xace>
 8008286:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008288:	3301      	adds	r3, #1
 800828a:	930c      	str	r3, [sp, #48]	@ 0x30
 800828c:	2331      	movs	r3, #49	@ 0x31
 800828e:	7013      	strb	r3, [r2, #0]
 8008290:	e5ae      	b.n	8007df0 <_dtoa_r+0x6e8>
 8008292:	4b15      	ldr	r3, [pc, #84]	@ (80082e8 <_dtoa_r+0xbe0>)
 8008294:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008296:	9308      	str	r3, [sp, #32]
 8008298:	4b14      	ldr	r3, [pc, #80]	@ (80082ec <_dtoa_r+0xbe4>)
 800829a:	2a00      	cmp	r2, #0
 800829c:	d001      	beq.n	80082a2 <_dtoa_r+0xb9a>
 800829e:	f7ff fa7b 	bl	8007798 <_dtoa_r+0x90>
 80082a2:	f7ff fa7b 	bl	800779c <_dtoa_r+0x94>
 80082a6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	dc00      	bgt.n	80082ae <_dtoa_r+0xba6>
 80082ac:	e648      	b.n	8007f40 <_dtoa_r+0x838>
 80082ae:	2001      	movs	r0, #1
 80082b0:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80082b2:	e665      	b.n	8007f80 <_dtoa_r+0x878>
 80082b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	dc00      	bgt.n	80082bc <_dtoa_r+0xbb4>
 80082ba:	e6d6      	b.n	800806a <_dtoa_r+0x962>
 80082bc:	2400      	movs	r4, #0
 80082be:	0031      	movs	r1, r6
 80082c0:	9805      	ldr	r0, [sp, #20]
 80082c2:	f7ff f993 	bl	80075ec <quorem>
 80082c6:	9b08      	ldr	r3, [sp, #32]
 80082c8:	3030      	adds	r0, #48	@ 0x30
 80082ca:	5518      	strb	r0, [r3, r4]
 80082cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082ce:	3401      	adds	r4, #1
 80082d0:	0005      	movs	r5, r0
 80082d2:	429c      	cmp	r4, r3
 80082d4:	dab6      	bge.n	8008244 <_dtoa_r+0xb3c>
 80082d6:	2300      	movs	r3, #0
 80082d8:	220a      	movs	r2, #10
 80082da:	9905      	ldr	r1, [sp, #20]
 80082dc:	9803      	ldr	r0, [sp, #12]
 80082de:	f000 fb3b 	bl	8008958 <__multadd>
 80082e2:	9005      	str	r0, [sp, #20]
 80082e4:	e7eb      	b.n	80082be <_dtoa_r+0xbb6>
 80082e6:	46c0      	nop			@ (mov r8, r8)
 80082e8:	08009b0c 	.word	0x08009b0c
 80082ec:	08009b14 	.word	0x08009b14

080082f0 <__ssputs_r>:
 80082f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082f2:	688e      	ldr	r6, [r1, #8]
 80082f4:	b085      	sub	sp, #20
 80082f6:	001f      	movs	r7, r3
 80082f8:	000c      	movs	r4, r1
 80082fa:	680b      	ldr	r3, [r1, #0]
 80082fc:	9002      	str	r0, [sp, #8]
 80082fe:	9203      	str	r2, [sp, #12]
 8008300:	42be      	cmp	r6, r7
 8008302:	d830      	bhi.n	8008366 <__ssputs_r+0x76>
 8008304:	210c      	movs	r1, #12
 8008306:	5e62      	ldrsh	r2, [r4, r1]
 8008308:	2190      	movs	r1, #144	@ 0x90
 800830a:	00c9      	lsls	r1, r1, #3
 800830c:	420a      	tst	r2, r1
 800830e:	d028      	beq.n	8008362 <__ssputs_r+0x72>
 8008310:	2003      	movs	r0, #3
 8008312:	6921      	ldr	r1, [r4, #16]
 8008314:	1a5b      	subs	r3, r3, r1
 8008316:	9301      	str	r3, [sp, #4]
 8008318:	6963      	ldr	r3, [r4, #20]
 800831a:	4343      	muls	r3, r0
 800831c:	9801      	ldr	r0, [sp, #4]
 800831e:	0fdd      	lsrs	r5, r3, #31
 8008320:	18ed      	adds	r5, r5, r3
 8008322:	1c7b      	adds	r3, r7, #1
 8008324:	181b      	adds	r3, r3, r0
 8008326:	106d      	asrs	r5, r5, #1
 8008328:	42ab      	cmp	r3, r5
 800832a:	d900      	bls.n	800832e <__ssputs_r+0x3e>
 800832c:	001d      	movs	r5, r3
 800832e:	0552      	lsls	r2, r2, #21
 8008330:	d528      	bpl.n	8008384 <__ssputs_r+0x94>
 8008332:	0029      	movs	r1, r5
 8008334:	9802      	ldr	r0, [sp, #8]
 8008336:	f000 f965 	bl	8008604 <_malloc_r>
 800833a:	1e06      	subs	r6, r0, #0
 800833c:	d02c      	beq.n	8008398 <__ssputs_r+0xa8>
 800833e:	9a01      	ldr	r2, [sp, #4]
 8008340:	6921      	ldr	r1, [r4, #16]
 8008342:	f000 ff33 	bl	80091ac <memcpy>
 8008346:	89a2      	ldrh	r2, [r4, #12]
 8008348:	4b18      	ldr	r3, [pc, #96]	@ (80083ac <__ssputs_r+0xbc>)
 800834a:	401a      	ands	r2, r3
 800834c:	2380      	movs	r3, #128	@ 0x80
 800834e:	4313      	orrs	r3, r2
 8008350:	81a3      	strh	r3, [r4, #12]
 8008352:	9b01      	ldr	r3, [sp, #4]
 8008354:	6126      	str	r6, [r4, #16]
 8008356:	18f6      	adds	r6, r6, r3
 8008358:	6026      	str	r6, [r4, #0]
 800835a:	003e      	movs	r6, r7
 800835c:	6165      	str	r5, [r4, #20]
 800835e:	1aed      	subs	r5, r5, r3
 8008360:	60a5      	str	r5, [r4, #8]
 8008362:	42be      	cmp	r6, r7
 8008364:	d900      	bls.n	8008368 <__ssputs_r+0x78>
 8008366:	003e      	movs	r6, r7
 8008368:	0032      	movs	r2, r6
 800836a:	9903      	ldr	r1, [sp, #12]
 800836c:	6820      	ldr	r0, [r4, #0]
 800836e:	f000 feaa 	bl	80090c6 <memmove>
 8008372:	2000      	movs	r0, #0
 8008374:	68a3      	ldr	r3, [r4, #8]
 8008376:	1b9b      	subs	r3, r3, r6
 8008378:	60a3      	str	r3, [r4, #8]
 800837a:	6823      	ldr	r3, [r4, #0]
 800837c:	199b      	adds	r3, r3, r6
 800837e:	6023      	str	r3, [r4, #0]
 8008380:	b005      	add	sp, #20
 8008382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008384:	002a      	movs	r2, r5
 8008386:	9802      	ldr	r0, [sp, #8]
 8008388:	f000 fe6e 	bl	8009068 <_realloc_r>
 800838c:	1e06      	subs	r6, r0, #0
 800838e:	d1e0      	bne.n	8008352 <__ssputs_r+0x62>
 8008390:	6921      	ldr	r1, [r4, #16]
 8008392:	9802      	ldr	r0, [sp, #8]
 8008394:	f000 ff60 	bl	8009258 <_free_r>
 8008398:	230c      	movs	r3, #12
 800839a:	2001      	movs	r0, #1
 800839c:	9a02      	ldr	r2, [sp, #8]
 800839e:	4240      	negs	r0, r0
 80083a0:	6013      	str	r3, [r2, #0]
 80083a2:	89a2      	ldrh	r2, [r4, #12]
 80083a4:	3334      	adds	r3, #52	@ 0x34
 80083a6:	4313      	orrs	r3, r2
 80083a8:	81a3      	strh	r3, [r4, #12]
 80083aa:	e7e9      	b.n	8008380 <__ssputs_r+0x90>
 80083ac:	fffffb7f 	.word	0xfffffb7f

080083b0 <_svfiprintf_r>:
 80083b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083b2:	b0a1      	sub	sp, #132	@ 0x84
 80083b4:	9003      	str	r0, [sp, #12]
 80083b6:	001d      	movs	r5, r3
 80083b8:	898b      	ldrh	r3, [r1, #12]
 80083ba:	000f      	movs	r7, r1
 80083bc:	0016      	movs	r6, r2
 80083be:	061b      	lsls	r3, r3, #24
 80083c0:	d511      	bpl.n	80083e6 <_svfiprintf_r+0x36>
 80083c2:	690b      	ldr	r3, [r1, #16]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d10e      	bne.n	80083e6 <_svfiprintf_r+0x36>
 80083c8:	2140      	movs	r1, #64	@ 0x40
 80083ca:	f000 f91b 	bl	8008604 <_malloc_r>
 80083ce:	6038      	str	r0, [r7, #0]
 80083d0:	6138      	str	r0, [r7, #16]
 80083d2:	2800      	cmp	r0, #0
 80083d4:	d105      	bne.n	80083e2 <_svfiprintf_r+0x32>
 80083d6:	230c      	movs	r3, #12
 80083d8:	9a03      	ldr	r2, [sp, #12]
 80083da:	6013      	str	r3, [r2, #0]
 80083dc:	2001      	movs	r0, #1
 80083de:	4240      	negs	r0, r0
 80083e0:	e0cf      	b.n	8008582 <_svfiprintf_r+0x1d2>
 80083e2:	2340      	movs	r3, #64	@ 0x40
 80083e4:	617b      	str	r3, [r7, #20]
 80083e6:	2300      	movs	r3, #0
 80083e8:	ac08      	add	r4, sp, #32
 80083ea:	6163      	str	r3, [r4, #20]
 80083ec:	3320      	adds	r3, #32
 80083ee:	7663      	strb	r3, [r4, #25]
 80083f0:	3310      	adds	r3, #16
 80083f2:	76a3      	strb	r3, [r4, #26]
 80083f4:	9507      	str	r5, [sp, #28]
 80083f6:	0035      	movs	r5, r6
 80083f8:	782b      	ldrb	r3, [r5, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d001      	beq.n	8008402 <_svfiprintf_r+0x52>
 80083fe:	2b25      	cmp	r3, #37	@ 0x25
 8008400:	d148      	bne.n	8008494 <_svfiprintf_r+0xe4>
 8008402:	1bab      	subs	r3, r5, r6
 8008404:	9305      	str	r3, [sp, #20]
 8008406:	42b5      	cmp	r5, r6
 8008408:	d00b      	beq.n	8008422 <_svfiprintf_r+0x72>
 800840a:	0032      	movs	r2, r6
 800840c:	0039      	movs	r1, r7
 800840e:	9803      	ldr	r0, [sp, #12]
 8008410:	f7ff ff6e 	bl	80082f0 <__ssputs_r>
 8008414:	3001      	adds	r0, #1
 8008416:	d100      	bne.n	800841a <_svfiprintf_r+0x6a>
 8008418:	e0ae      	b.n	8008578 <_svfiprintf_r+0x1c8>
 800841a:	6963      	ldr	r3, [r4, #20]
 800841c:	9a05      	ldr	r2, [sp, #20]
 800841e:	189b      	adds	r3, r3, r2
 8008420:	6163      	str	r3, [r4, #20]
 8008422:	782b      	ldrb	r3, [r5, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d100      	bne.n	800842a <_svfiprintf_r+0x7a>
 8008428:	e0a6      	b.n	8008578 <_svfiprintf_r+0x1c8>
 800842a:	2201      	movs	r2, #1
 800842c:	2300      	movs	r3, #0
 800842e:	4252      	negs	r2, r2
 8008430:	6062      	str	r2, [r4, #4]
 8008432:	a904      	add	r1, sp, #16
 8008434:	3254      	adds	r2, #84	@ 0x54
 8008436:	1852      	adds	r2, r2, r1
 8008438:	1c6e      	adds	r6, r5, #1
 800843a:	6023      	str	r3, [r4, #0]
 800843c:	60e3      	str	r3, [r4, #12]
 800843e:	60a3      	str	r3, [r4, #8]
 8008440:	7013      	strb	r3, [r2, #0]
 8008442:	65a3      	str	r3, [r4, #88]	@ 0x58
 8008444:	4b54      	ldr	r3, [pc, #336]	@ (8008598 <_svfiprintf_r+0x1e8>)
 8008446:	2205      	movs	r2, #5
 8008448:	0018      	movs	r0, r3
 800844a:	7831      	ldrb	r1, [r6, #0]
 800844c:	9305      	str	r3, [sp, #20]
 800844e:	f7ff f8c2 	bl	80075d6 <memchr>
 8008452:	1c75      	adds	r5, r6, #1
 8008454:	2800      	cmp	r0, #0
 8008456:	d11f      	bne.n	8008498 <_svfiprintf_r+0xe8>
 8008458:	6822      	ldr	r2, [r4, #0]
 800845a:	06d3      	lsls	r3, r2, #27
 800845c:	d504      	bpl.n	8008468 <_svfiprintf_r+0xb8>
 800845e:	2353      	movs	r3, #83	@ 0x53
 8008460:	a904      	add	r1, sp, #16
 8008462:	185b      	adds	r3, r3, r1
 8008464:	2120      	movs	r1, #32
 8008466:	7019      	strb	r1, [r3, #0]
 8008468:	0713      	lsls	r3, r2, #28
 800846a:	d504      	bpl.n	8008476 <_svfiprintf_r+0xc6>
 800846c:	2353      	movs	r3, #83	@ 0x53
 800846e:	a904      	add	r1, sp, #16
 8008470:	185b      	adds	r3, r3, r1
 8008472:	212b      	movs	r1, #43	@ 0x2b
 8008474:	7019      	strb	r1, [r3, #0]
 8008476:	7833      	ldrb	r3, [r6, #0]
 8008478:	2b2a      	cmp	r3, #42	@ 0x2a
 800847a:	d016      	beq.n	80084aa <_svfiprintf_r+0xfa>
 800847c:	0035      	movs	r5, r6
 800847e:	2100      	movs	r1, #0
 8008480:	200a      	movs	r0, #10
 8008482:	68e3      	ldr	r3, [r4, #12]
 8008484:	782a      	ldrb	r2, [r5, #0]
 8008486:	1c6e      	adds	r6, r5, #1
 8008488:	3a30      	subs	r2, #48	@ 0x30
 800848a:	2a09      	cmp	r2, #9
 800848c:	d950      	bls.n	8008530 <_svfiprintf_r+0x180>
 800848e:	2900      	cmp	r1, #0
 8008490:	d111      	bne.n	80084b6 <_svfiprintf_r+0x106>
 8008492:	e017      	b.n	80084c4 <_svfiprintf_r+0x114>
 8008494:	3501      	adds	r5, #1
 8008496:	e7af      	b.n	80083f8 <_svfiprintf_r+0x48>
 8008498:	9b05      	ldr	r3, [sp, #20]
 800849a:	6822      	ldr	r2, [r4, #0]
 800849c:	1ac0      	subs	r0, r0, r3
 800849e:	2301      	movs	r3, #1
 80084a0:	4083      	lsls	r3, r0
 80084a2:	4313      	orrs	r3, r2
 80084a4:	002e      	movs	r6, r5
 80084a6:	6023      	str	r3, [r4, #0]
 80084a8:	e7cc      	b.n	8008444 <_svfiprintf_r+0x94>
 80084aa:	9b07      	ldr	r3, [sp, #28]
 80084ac:	1d19      	adds	r1, r3, #4
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	9107      	str	r1, [sp, #28]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	db01      	blt.n	80084ba <_svfiprintf_r+0x10a>
 80084b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084b8:	e004      	b.n	80084c4 <_svfiprintf_r+0x114>
 80084ba:	425b      	negs	r3, r3
 80084bc:	60e3      	str	r3, [r4, #12]
 80084be:	2302      	movs	r3, #2
 80084c0:	4313      	orrs	r3, r2
 80084c2:	6023      	str	r3, [r4, #0]
 80084c4:	782b      	ldrb	r3, [r5, #0]
 80084c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80084c8:	d10c      	bne.n	80084e4 <_svfiprintf_r+0x134>
 80084ca:	786b      	ldrb	r3, [r5, #1]
 80084cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80084ce:	d134      	bne.n	800853a <_svfiprintf_r+0x18a>
 80084d0:	9b07      	ldr	r3, [sp, #28]
 80084d2:	3502      	adds	r5, #2
 80084d4:	1d1a      	adds	r2, r3, #4
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	9207      	str	r2, [sp, #28]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	da01      	bge.n	80084e2 <_svfiprintf_r+0x132>
 80084de:	2301      	movs	r3, #1
 80084e0:	425b      	negs	r3, r3
 80084e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80084e4:	4e2d      	ldr	r6, [pc, #180]	@ (800859c <_svfiprintf_r+0x1ec>)
 80084e6:	2203      	movs	r2, #3
 80084e8:	0030      	movs	r0, r6
 80084ea:	7829      	ldrb	r1, [r5, #0]
 80084ec:	f7ff f873 	bl	80075d6 <memchr>
 80084f0:	2800      	cmp	r0, #0
 80084f2:	d006      	beq.n	8008502 <_svfiprintf_r+0x152>
 80084f4:	2340      	movs	r3, #64	@ 0x40
 80084f6:	1b80      	subs	r0, r0, r6
 80084f8:	4083      	lsls	r3, r0
 80084fa:	6822      	ldr	r2, [r4, #0]
 80084fc:	3501      	adds	r5, #1
 80084fe:	4313      	orrs	r3, r2
 8008500:	6023      	str	r3, [r4, #0]
 8008502:	7829      	ldrb	r1, [r5, #0]
 8008504:	2206      	movs	r2, #6
 8008506:	4826      	ldr	r0, [pc, #152]	@ (80085a0 <_svfiprintf_r+0x1f0>)
 8008508:	1c6e      	adds	r6, r5, #1
 800850a:	7621      	strb	r1, [r4, #24]
 800850c:	f7ff f863 	bl	80075d6 <memchr>
 8008510:	2800      	cmp	r0, #0
 8008512:	d038      	beq.n	8008586 <_svfiprintf_r+0x1d6>
 8008514:	4b23      	ldr	r3, [pc, #140]	@ (80085a4 <_svfiprintf_r+0x1f4>)
 8008516:	2b00      	cmp	r3, #0
 8008518:	d122      	bne.n	8008560 <_svfiprintf_r+0x1b0>
 800851a:	2207      	movs	r2, #7
 800851c:	9b07      	ldr	r3, [sp, #28]
 800851e:	3307      	adds	r3, #7
 8008520:	4393      	bics	r3, r2
 8008522:	3308      	adds	r3, #8
 8008524:	9307      	str	r3, [sp, #28]
 8008526:	6963      	ldr	r3, [r4, #20]
 8008528:	9a04      	ldr	r2, [sp, #16]
 800852a:	189b      	adds	r3, r3, r2
 800852c:	6163      	str	r3, [r4, #20]
 800852e:	e762      	b.n	80083f6 <_svfiprintf_r+0x46>
 8008530:	4343      	muls	r3, r0
 8008532:	0035      	movs	r5, r6
 8008534:	2101      	movs	r1, #1
 8008536:	189b      	adds	r3, r3, r2
 8008538:	e7a4      	b.n	8008484 <_svfiprintf_r+0xd4>
 800853a:	2300      	movs	r3, #0
 800853c:	200a      	movs	r0, #10
 800853e:	0019      	movs	r1, r3
 8008540:	3501      	adds	r5, #1
 8008542:	6063      	str	r3, [r4, #4]
 8008544:	782a      	ldrb	r2, [r5, #0]
 8008546:	1c6e      	adds	r6, r5, #1
 8008548:	3a30      	subs	r2, #48	@ 0x30
 800854a:	2a09      	cmp	r2, #9
 800854c:	d903      	bls.n	8008556 <_svfiprintf_r+0x1a6>
 800854e:	2b00      	cmp	r3, #0
 8008550:	d0c8      	beq.n	80084e4 <_svfiprintf_r+0x134>
 8008552:	9109      	str	r1, [sp, #36]	@ 0x24
 8008554:	e7c6      	b.n	80084e4 <_svfiprintf_r+0x134>
 8008556:	4341      	muls	r1, r0
 8008558:	0035      	movs	r5, r6
 800855a:	2301      	movs	r3, #1
 800855c:	1889      	adds	r1, r1, r2
 800855e:	e7f1      	b.n	8008544 <_svfiprintf_r+0x194>
 8008560:	aa07      	add	r2, sp, #28
 8008562:	9200      	str	r2, [sp, #0]
 8008564:	0021      	movs	r1, r4
 8008566:	003a      	movs	r2, r7
 8008568:	4b0f      	ldr	r3, [pc, #60]	@ (80085a8 <_svfiprintf_r+0x1f8>)
 800856a:	9803      	ldr	r0, [sp, #12]
 800856c:	f7fe fb5a 	bl	8006c24 <_printf_float>
 8008570:	9004      	str	r0, [sp, #16]
 8008572:	9b04      	ldr	r3, [sp, #16]
 8008574:	3301      	adds	r3, #1
 8008576:	d1d6      	bne.n	8008526 <_svfiprintf_r+0x176>
 8008578:	89bb      	ldrh	r3, [r7, #12]
 800857a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800857c:	065b      	lsls	r3, r3, #25
 800857e:	d500      	bpl.n	8008582 <_svfiprintf_r+0x1d2>
 8008580:	e72c      	b.n	80083dc <_svfiprintf_r+0x2c>
 8008582:	b021      	add	sp, #132	@ 0x84
 8008584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008586:	aa07      	add	r2, sp, #28
 8008588:	9200      	str	r2, [sp, #0]
 800858a:	0021      	movs	r1, r4
 800858c:	003a      	movs	r2, r7
 800858e:	4b06      	ldr	r3, [pc, #24]	@ (80085a8 <_svfiprintf_r+0x1f8>)
 8008590:	9803      	ldr	r0, [sp, #12]
 8008592:	f7fe fdf5 	bl	8007180 <_printf_i>
 8008596:	e7eb      	b.n	8008570 <_svfiprintf_r+0x1c0>
 8008598:	08009b99 	.word	0x08009b99
 800859c:	08009b9f 	.word	0x08009b9f
 80085a0:	08009ba3 	.word	0x08009ba3
 80085a4:	08006c25 	.word	0x08006c25
 80085a8:	080082f1 	.word	0x080082f1

080085ac <malloc>:
 80085ac:	b510      	push	{r4, lr}
 80085ae:	4b03      	ldr	r3, [pc, #12]	@ (80085bc <malloc+0x10>)
 80085b0:	0001      	movs	r1, r0
 80085b2:	6818      	ldr	r0, [r3, #0]
 80085b4:	f000 f826 	bl	8008604 <_malloc_r>
 80085b8:	bd10      	pop	{r4, pc}
 80085ba:	46c0      	nop			@ (mov r8, r8)
 80085bc:	20000018 	.word	0x20000018

080085c0 <sbrk_aligned>:
 80085c0:	b570      	push	{r4, r5, r6, lr}
 80085c2:	4e0f      	ldr	r6, [pc, #60]	@ (8008600 <sbrk_aligned+0x40>)
 80085c4:	000d      	movs	r5, r1
 80085c6:	6831      	ldr	r1, [r6, #0]
 80085c8:	0004      	movs	r4, r0
 80085ca:	2900      	cmp	r1, #0
 80085cc:	d102      	bne.n	80085d4 <sbrk_aligned+0x14>
 80085ce:	f000 fdc7 	bl	8009160 <_sbrk_r>
 80085d2:	6030      	str	r0, [r6, #0]
 80085d4:	0029      	movs	r1, r5
 80085d6:	0020      	movs	r0, r4
 80085d8:	f000 fdc2 	bl	8009160 <_sbrk_r>
 80085dc:	1c43      	adds	r3, r0, #1
 80085de:	d103      	bne.n	80085e8 <sbrk_aligned+0x28>
 80085e0:	2501      	movs	r5, #1
 80085e2:	426d      	negs	r5, r5
 80085e4:	0028      	movs	r0, r5
 80085e6:	bd70      	pop	{r4, r5, r6, pc}
 80085e8:	2303      	movs	r3, #3
 80085ea:	1cc5      	adds	r5, r0, #3
 80085ec:	439d      	bics	r5, r3
 80085ee:	42a8      	cmp	r0, r5
 80085f0:	d0f8      	beq.n	80085e4 <sbrk_aligned+0x24>
 80085f2:	1a29      	subs	r1, r5, r0
 80085f4:	0020      	movs	r0, r4
 80085f6:	f000 fdb3 	bl	8009160 <_sbrk_r>
 80085fa:	3001      	adds	r0, #1
 80085fc:	d1f2      	bne.n	80085e4 <sbrk_aligned+0x24>
 80085fe:	e7ef      	b.n	80085e0 <sbrk_aligned+0x20>
 8008600:	20000558 	.word	0x20000558

08008604 <_malloc_r>:
 8008604:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008606:	2203      	movs	r2, #3
 8008608:	1ccb      	adds	r3, r1, #3
 800860a:	4393      	bics	r3, r2
 800860c:	3308      	adds	r3, #8
 800860e:	0005      	movs	r5, r0
 8008610:	001f      	movs	r7, r3
 8008612:	2b0c      	cmp	r3, #12
 8008614:	d234      	bcs.n	8008680 <_malloc_r+0x7c>
 8008616:	270c      	movs	r7, #12
 8008618:	42b9      	cmp	r1, r7
 800861a:	d833      	bhi.n	8008684 <_malloc_r+0x80>
 800861c:	0028      	movs	r0, r5
 800861e:	f000 f923 	bl	8008868 <__malloc_lock>
 8008622:	4e37      	ldr	r6, [pc, #220]	@ (8008700 <_malloc_r+0xfc>)
 8008624:	6833      	ldr	r3, [r6, #0]
 8008626:	001c      	movs	r4, r3
 8008628:	2c00      	cmp	r4, #0
 800862a:	d12f      	bne.n	800868c <_malloc_r+0x88>
 800862c:	0039      	movs	r1, r7
 800862e:	0028      	movs	r0, r5
 8008630:	f7ff ffc6 	bl	80085c0 <sbrk_aligned>
 8008634:	0004      	movs	r4, r0
 8008636:	1c43      	adds	r3, r0, #1
 8008638:	d15f      	bne.n	80086fa <_malloc_r+0xf6>
 800863a:	6834      	ldr	r4, [r6, #0]
 800863c:	9400      	str	r4, [sp, #0]
 800863e:	9b00      	ldr	r3, [sp, #0]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d14a      	bne.n	80086da <_malloc_r+0xd6>
 8008644:	2c00      	cmp	r4, #0
 8008646:	d052      	beq.n	80086ee <_malloc_r+0xea>
 8008648:	6823      	ldr	r3, [r4, #0]
 800864a:	0028      	movs	r0, r5
 800864c:	18e3      	adds	r3, r4, r3
 800864e:	9900      	ldr	r1, [sp, #0]
 8008650:	9301      	str	r3, [sp, #4]
 8008652:	f000 fd85 	bl	8009160 <_sbrk_r>
 8008656:	9b01      	ldr	r3, [sp, #4]
 8008658:	4283      	cmp	r3, r0
 800865a:	d148      	bne.n	80086ee <_malloc_r+0xea>
 800865c:	6823      	ldr	r3, [r4, #0]
 800865e:	0028      	movs	r0, r5
 8008660:	1aff      	subs	r7, r7, r3
 8008662:	0039      	movs	r1, r7
 8008664:	f7ff ffac 	bl	80085c0 <sbrk_aligned>
 8008668:	3001      	adds	r0, #1
 800866a:	d040      	beq.n	80086ee <_malloc_r+0xea>
 800866c:	6823      	ldr	r3, [r4, #0]
 800866e:	19db      	adds	r3, r3, r7
 8008670:	6023      	str	r3, [r4, #0]
 8008672:	6833      	ldr	r3, [r6, #0]
 8008674:	685a      	ldr	r2, [r3, #4]
 8008676:	2a00      	cmp	r2, #0
 8008678:	d133      	bne.n	80086e2 <_malloc_r+0xde>
 800867a:	9b00      	ldr	r3, [sp, #0]
 800867c:	6033      	str	r3, [r6, #0]
 800867e:	e019      	b.n	80086b4 <_malloc_r+0xb0>
 8008680:	2b00      	cmp	r3, #0
 8008682:	dac9      	bge.n	8008618 <_malloc_r+0x14>
 8008684:	230c      	movs	r3, #12
 8008686:	602b      	str	r3, [r5, #0]
 8008688:	2000      	movs	r0, #0
 800868a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800868c:	6821      	ldr	r1, [r4, #0]
 800868e:	1bc9      	subs	r1, r1, r7
 8008690:	d420      	bmi.n	80086d4 <_malloc_r+0xd0>
 8008692:	290b      	cmp	r1, #11
 8008694:	d90a      	bls.n	80086ac <_malloc_r+0xa8>
 8008696:	19e2      	adds	r2, r4, r7
 8008698:	6027      	str	r7, [r4, #0]
 800869a:	42a3      	cmp	r3, r4
 800869c:	d104      	bne.n	80086a8 <_malloc_r+0xa4>
 800869e:	6032      	str	r2, [r6, #0]
 80086a0:	6863      	ldr	r3, [r4, #4]
 80086a2:	6011      	str	r1, [r2, #0]
 80086a4:	6053      	str	r3, [r2, #4]
 80086a6:	e005      	b.n	80086b4 <_malloc_r+0xb0>
 80086a8:	605a      	str	r2, [r3, #4]
 80086aa:	e7f9      	b.n	80086a0 <_malloc_r+0x9c>
 80086ac:	6862      	ldr	r2, [r4, #4]
 80086ae:	42a3      	cmp	r3, r4
 80086b0:	d10e      	bne.n	80086d0 <_malloc_r+0xcc>
 80086b2:	6032      	str	r2, [r6, #0]
 80086b4:	0028      	movs	r0, r5
 80086b6:	f000 f8df 	bl	8008878 <__malloc_unlock>
 80086ba:	0020      	movs	r0, r4
 80086bc:	2207      	movs	r2, #7
 80086be:	300b      	adds	r0, #11
 80086c0:	1d23      	adds	r3, r4, #4
 80086c2:	4390      	bics	r0, r2
 80086c4:	1ac2      	subs	r2, r0, r3
 80086c6:	4298      	cmp	r0, r3
 80086c8:	d0df      	beq.n	800868a <_malloc_r+0x86>
 80086ca:	1a1b      	subs	r3, r3, r0
 80086cc:	50a3      	str	r3, [r4, r2]
 80086ce:	e7dc      	b.n	800868a <_malloc_r+0x86>
 80086d0:	605a      	str	r2, [r3, #4]
 80086d2:	e7ef      	b.n	80086b4 <_malloc_r+0xb0>
 80086d4:	0023      	movs	r3, r4
 80086d6:	6864      	ldr	r4, [r4, #4]
 80086d8:	e7a6      	b.n	8008628 <_malloc_r+0x24>
 80086da:	9c00      	ldr	r4, [sp, #0]
 80086dc:	6863      	ldr	r3, [r4, #4]
 80086de:	9300      	str	r3, [sp, #0]
 80086e0:	e7ad      	b.n	800863e <_malloc_r+0x3a>
 80086e2:	001a      	movs	r2, r3
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	42a3      	cmp	r3, r4
 80086e8:	d1fb      	bne.n	80086e2 <_malloc_r+0xde>
 80086ea:	2300      	movs	r3, #0
 80086ec:	e7da      	b.n	80086a4 <_malloc_r+0xa0>
 80086ee:	230c      	movs	r3, #12
 80086f0:	0028      	movs	r0, r5
 80086f2:	602b      	str	r3, [r5, #0]
 80086f4:	f000 f8c0 	bl	8008878 <__malloc_unlock>
 80086f8:	e7c6      	b.n	8008688 <_malloc_r+0x84>
 80086fa:	6007      	str	r7, [r0, #0]
 80086fc:	e7da      	b.n	80086b4 <_malloc_r+0xb0>
 80086fe:	46c0      	nop			@ (mov r8, r8)
 8008700:	2000055c 	.word	0x2000055c

08008704 <__sflush_r>:
 8008704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008706:	220c      	movs	r2, #12
 8008708:	5e8b      	ldrsh	r3, [r1, r2]
 800870a:	0005      	movs	r5, r0
 800870c:	000c      	movs	r4, r1
 800870e:	071a      	lsls	r2, r3, #28
 8008710:	d456      	bmi.n	80087c0 <__sflush_r+0xbc>
 8008712:	684a      	ldr	r2, [r1, #4]
 8008714:	2a00      	cmp	r2, #0
 8008716:	dc02      	bgt.n	800871e <__sflush_r+0x1a>
 8008718:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800871a:	2a00      	cmp	r2, #0
 800871c:	dd4e      	ble.n	80087bc <__sflush_r+0xb8>
 800871e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8008720:	2f00      	cmp	r7, #0
 8008722:	d04b      	beq.n	80087bc <__sflush_r+0xb8>
 8008724:	2200      	movs	r2, #0
 8008726:	2080      	movs	r0, #128	@ 0x80
 8008728:	682e      	ldr	r6, [r5, #0]
 800872a:	602a      	str	r2, [r5, #0]
 800872c:	001a      	movs	r2, r3
 800872e:	0140      	lsls	r0, r0, #5
 8008730:	6a21      	ldr	r1, [r4, #32]
 8008732:	4002      	ands	r2, r0
 8008734:	4203      	tst	r3, r0
 8008736:	d033      	beq.n	80087a0 <__sflush_r+0x9c>
 8008738:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800873a:	89a3      	ldrh	r3, [r4, #12]
 800873c:	075b      	lsls	r3, r3, #29
 800873e:	d506      	bpl.n	800874e <__sflush_r+0x4a>
 8008740:	6863      	ldr	r3, [r4, #4]
 8008742:	1ad2      	subs	r2, r2, r3
 8008744:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008746:	2b00      	cmp	r3, #0
 8008748:	d001      	beq.n	800874e <__sflush_r+0x4a>
 800874a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800874c:	1ad2      	subs	r2, r2, r3
 800874e:	2300      	movs	r3, #0
 8008750:	0028      	movs	r0, r5
 8008752:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8008754:	6a21      	ldr	r1, [r4, #32]
 8008756:	47b8      	blx	r7
 8008758:	89a2      	ldrh	r2, [r4, #12]
 800875a:	1c43      	adds	r3, r0, #1
 800875c:	d106      	bne.n	800876c <__sflush_r+0x68>
 800875e:	6829      	ldr	r1, [r5, #0]
 8008760:	291d      	cmp	r1, #29
 8008762:	d846      	bhi.n	80087f2 <__sflush_r+0xee>
 8008764:	4b29      	ldr	r3, [pc, #164]	@ (800880c <__sflush_r+0x108>)
 8008766:	410b      	asrs	r3, r1
 8008768:	07db      	lsls	r3, r3, #31
 800876a:	d442      	bmi.n	80087f2 <__sflush_r+0xee>
 800876c:	2300      	movs	r3, #0
 800876e:	6063      	str	r3, [r4, #4]
 8008770:	6923      	ldr	r3, [r4, #16]
 8008772:	6023      	str	r3, [r4, #0]
 8008774:	04d2      	lsls	r2, r2, #19
 8008776:	d505      	bpl.n	8008784 <__sflush_r+0x80>
 8008778:	1c43      	adds	r3, r0, #1
 800877a:	d102      	bne.n	8008782 <__sflush_r+0x7e>
 800877c:	682b      	ldr	r3, [r5, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d100      	bne.n	8008784 <__sflush_r+0x80>
 8008782:	6560      	str	r0, [r4, #84]	@ 0x54
 8008784:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008786:	602e      	str	r6, [r5, #0]
 8008788:	2900      	cmp	r1, #0
 800878a:	d017      	beq.n	80087bc <__sflush_r+0xb8>
 800878c:	0023      	movs	r3, r4
 800878e:	3344      	adds	r3, #68	@ 0x44
 8008790:	4299      	cmp	r1, r3
 8008792:	d002      	beq.n	800879a <__sflush_r+0x96>
 8008794:	0028      	movs	r0, r5
 8008796:	f000 fd5f 	bl	8009258 <_free_r>
 800879a:	2300      	movs	r3, #0
 800879c:	6363      	str	r3, [r4, #52]	@ 0x34
 800879e:	e00d      	b.n	80087bc <__sflush_r+0xb8>
 80087a0:	2301      	movs	r3, #1
 80087a2:	0028      	movs	r0, r5
 80087a4:	47b8      	blx	r7
 80087a6:	0002      	movs	r2, r0
 80087a8:	1c43      	adds	r3, r0, #1
 80087aa:	d1c6      	bne.n	800873a <__sflush_r+0x36>
 80087ac:	682b      	ldr	r3, [r5, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d0c3      	beq.n	800873a <__sflush_r+0x36>
 80087b2:	2b1d      	cmp	r3, #29
 80087b4:	d001      	beq.n	80087ba <__sflush_r+0xb6>
 80087b6:	2b16      	cmp	r3, #22
 80087b8:	d11a      	bne.n	80087f0 <__sflush_r+0xec>
 80087ba:	602e      	str	r6, [r5, #0]
 80087bc:	2000      	movs	r0, #0
 80087be:	e01e      	b.n	80087fe <__sflush_r+0xfa>
 80087c0:	690e      	ldr	r6, [r1, #16]
 80087c2:	2e00      	cmp	r6, #0
 80087c4:	d0fa      	beq.n	80087bc <__sflush_r+0xb8>
 80087c6:	680f      	ldr	r7, [r1, #0]
 80087c8:	600e      	str	r6, [r1, #0]
 80087ca:	1bba      	subs	r2, r7, r6
 80087cc:	9201      	str	r2, [sp, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	079b      	lsls	r3, r3, #30
 80087d2:	d100      	bne.n	80087d6 <__sflush_r+0xd2>
 80087d4:	694a      	ldr	r2, [r1, #20]
 80087d6:	60a2      	str	r2, [r4, #8]
 80087d8:	9b01      	ldr	r3, [sp, #4]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	ddee      	ble.n	80087bc <__sflush_r+0xb8>
 80087de:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80087e0:	0032      	movs	r2, r6
 80087e2:	001f      	movs	r7, r3
 80087e4:	0028      	movs	r0, r5
 80087e6:	9b01      	ldr	r3, [sp, #4]
 80087e8:	6a21      	ldr	r1, [r4, #32]
 80087ea:	47b8      	blx	r7
 80087ec:	2800      	cmp	r0, #0
 80087ee:	dc07      	bgt.n	8008800 <__sflush_r+0xfc>
 80087f0:	89a2      	ldrh	r2, [r4, #12]
 80087f2:	2340      	movs	r3, #64	@ 0x40
 80087f4:	2001      	movs	r0, #1
 80087f6:	4313      	orrs	r3, r2
 80087f8:	b21b      	sxth	r3, r3
 80087fa:	81a3      	strh	r3, [r4, #12]
 80087fc:	4240      	negs	r0, r0
 80087fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008800:	9b01      	ldr	r3, [sp, #4]
 8008802:	1836      	adds	r6, r6, r0
 8008804:	1a1b      	subs	r3, r3, r0
 8008806:	9301      	str	r3, [sp, #4]
 8008808:	e7e6      	b.n	80087d8 <__sflush_r+0xd4>
 800880a:	46c0      	nop			@ (mov r8, r8)
 800880c:	dfbffffe 	.word	0xdfbffffe

08008810 <_fflush_r>:
 8008810:	690b      	ldr	r3, [r1, #16]
 8008812:	b570      	push	{r4, r5, r6, lr}
 8008814:	0005      	movs	r5, r0
 8008816:	000c      	movs	r4, r1
 8008818:	2b00      	cmp	r3, #0
 800881a:	d102      	bne.n	8008822 <_fflush_r+0x12>
 800881c:	2500      	movs	r5, #0
 800881e:	0028      	movs	r0, r5
 8008820:	bd70      	pop	{r4, r5, r6, pc}
 8008822:	2800      	cmp	r0, #0
 8008824:	d004      	beq.n	8008830 <_fflush_r+0x20>
 8008826:	6a03      	ldr	r3, [r0, #32]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d101      	bne.n	8008830 <_fflush_r+0x20>
 800882c:	f7fe fe66 	bl	80074fc <__sinit>
 8008830:	220c      	movs	r2, #12
 8008832:	5ea3      	ldrsh	r3, [r4, r2]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d0f1      	beq.n	800881c <_fflush_r+0xc>
 8008838:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800883a:	07d2      	lsls	r2, r2, #31
 800883c:	d404      	bmi.n	8008848 <_fflush_r+0x38>
 800883e:	059b      	lsls	r3, r3, #22
 8008840:	d402      	bmi.n	8008848 <_fflush_r+0x38>
 8008842:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008844:	f7fe fec5 	bl	80075d2 <__retarget_lock_acquire_recursive>
 8008848:	0028      	movs	r0, r5
 800884a:	0021      	movs	r1, r4
 800884c:	f7ff ff5a 	bl	8008704 <__sflush_r>
 8008850:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008852:	0005      	movs	r5, r0
 8008854:	07db      	lsls	r3, r3, #31
 8008856:	d4e2      	bmi.n	800881e <_fflush_r+0xe>
 8008858:	89a3      	ldrh	r3, [r4, #12]
 800885a:	059b      	lsls	r3, r3, #22
 800885c:	d4df      	bmi.n	800881e <_fflush_r+0xe>
 800885e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008860:	f7fe feb8 	bl	80075d4 <__retarget_lock_release_recursive>
 8008864:	e7db      	b.n	800881e <_fflush_r+0xe>
	...

08008868 <__malloc_lock>:
 8008868:	b510      	push	{r4, lr}
 800886a:	4802      	ldr	r0, [pc, #8]	@ (8008874 <__malloc_lock+0xc>)
 800886c:	f7fe feb1 	bl	80075d2 <__retarget_lock_acquire_recursive>
 8008870:	bd10      	pop	{r4, pc}
 8008872:	46c0      	nop			@ (mov r8, r8)
 8008874:	20000554 	.word	0x20000554

08008878 <__malloc_unlock>:
 8008878:	b510      	push	{r4, lr}
 800887a:	4802      	ldr	r0, [pc, #8]	@ (8008884 <__malloc_unlock+0xc>)
 800887c:	f7fe feaa 	bl	80075d4 <__retarget_lock_release_recursive>
 8008880:	bd10      	pop	{r4, pc}
 8008882:	46c0      	nop			@ (mov r8, r8)
 8008884:	20000554 	.word	0x20000554

08008888 <_Balloc>:
 8008888:	b570      	push	{r4, r5, r6, lr}
 800888a:	69c5      	ldr	r5, [r0, #28]
 800888c:	0006      	movs	r6, r0
 800888e:	000c      	movs	r4, r1
 8008890:	2d00      	cmp	r5, #0
 8008892:	d10e      	bne.n	80088b2 <_Balloc+0x2a>
 8008894:	2010      	movs	r0, #16
 8008896:	f7ff fe89 	bl	80085ac <malloc>
 800889a:	1e02      	subs	r2, r0, #0
 800889c:	61f0      	str	r0, [r6, #28]
 800889e:	d104      	bne.n	80088aa <_Balloc+0x22>
 80088a0:	216b      	movs	r1, #107	@ 0x6b
 80088a2:	4b19      	ldr	r3, [pc, #100]	@ (8008908 <_Balloc+0x80>)
 80088a4:	4819      	ldr	r0, [pc, #100]	@ (800890c <_Balloc+0x84>)
 80088a6:	f000 fc8b 	bl	80091c0 <__assert_func>
 80088aa:	6045      	str	r5, [r0, #4]
 80088ac:	6085      	str	r5, [r0, #8]
 80088ae:	6005      	str	r5, [r0, #0]
 80088b0:	60c5      	str	r5, [r0, #12]
 80088b2:	69f5      	ldr	r5, [r6, #28]
 80088b4:	68eb      	ldr	r3, [r5, #12]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d013      	beq.n	80088e2 <_Balloc+0x5a>
 80088ba:	69f3      	ldr	r3, [r6, #28]
 80088bc:	00a2      	lsls	r2, r4, #2
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	189b      	adds	r3, r3, r2
 80088c2:	6818      	ldr	r0, [r3, #0]
 80088c4:	2800      	cmp	r0, #0
 80088c6:	d118      	bne.n	80088fa <_Balloc+0x72>
 80088c8:	2101      	movs	r1, #1
 80088ca:	000d      	movs	r5, r1
 80088cc:	40a5      	lsls	r5, r4
 80088ce:	1d6a      	adds	r2, r5, #5
 80088d0:	0030      	movs	r0, r6
 80088d2:	0092      	lsls	r2, r2, #2
 80088d4:	f000 fc92 	bl	80091fc <_calloc_r>
 80088d8:	2800      	cmp	r0, #0
 80088da:	d00c      	beq.n	80088f6 <_Balloc+0x6e>
 80088dc:	6044      	str	r4, [r0, #4]
 80088de:	6085      	str	r5, [r0, #8]
 80088e0:	e00d      	b.n	80088fe <_Balloc+0x76>
 80088e2:	2221      	movs	r2, #33	@ 0x21
 80088e4:	2104      	movs	r1, #4
 80088e6:	0030      	movs	r0, r6
 80088e8:	f000 fc88 	bl	80091fc <_calloc_r>
 80088ec:	69f3      	ldr	r3, [r6, #28]
 80088ee:	60e8      	str	r0, [r5, #12]
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1e1      	bne.n	80088ba <_Balloc+0x32>
 80088f6:	2000      	movs	r0, #0
 80088f8:	bd70      	pop	{r4, r5, r6, pc}
 80088fa:	6802      	ldr	r2, [r0, #0]
 80088fc:	601a      	str	r2, [r3, #0]
 80088fe:	2300      	movs	r3, #0
 8008900:	6103      	str	r3, [r0, #16]
 8008902:	60c3      	str	r3, [r0, #12]
 8008904:	e7f8      	b.n	80088f8 <_Balloc+0x70>
 8008906:	46c0      	nop			@ (mov r8, r8)
 8008908:	08009b19 	.word	0x08009b19
 800890c:	08009baa 	.word	0x08009baa

08008910 <_Bfree>:
 8008910:	b570      	push	{r4, r5, r6, lr}
 8008912:	69c6      	ldr	r6, [r0, #28]
 8008914:	0005      	movs	r5, r0
 8008916:	000c      	movs	r4, r1
 8008918:	2e00      	cmp	r6, #0
 800891a:	d10e      	bne.n	800893a <_Bfree+0x2a>
 800891c:	2010      	movs	r0, #16
 800891e:	f7ff fe45 	bl	80085ac <malloc>
 8008922:	1e02      	subs	r2, r0, #0
 8008924:	61e8      	str	r0, [r5, #28]
 8008926:	d104      	bne.n	8008932 <_Bfree+0x22>
 8008928:	218f      	movs	r1, #143	@ 0x8f
 800892a:	4b09      	ldr	r3, [pc, #36]	@ (8008950 <_Bfree+0x40>)
 800892c:	4809      	ldr	r0, [pc, #36]	@ (8008954 <_Bfree+0x44>)
 800892e:	f000 fc47 	bl	80091c0 <__assert_func>
 8008932:	6046      	str	r6, [r0, #4]
 8008934:	6086      	str	r6, [r0, #8]
 8008936:	6006      	str	r6, [r0, #0]
 8008938:	60c6      	str	r6, [r0, #12]
 800893a:	2c00      	cmp	r4, #0
 800893c:	d007      	beq.n	800894e <_Bfree+0x3e>
 800893e:	69eb      	ldr	r3, [r5, #28]
 8008940:	6862      	ldr	r2, [r4, #4]
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	0092      	lsls	r2, r2, #2
 8008946:	189b      	adds	r3, r3, r2
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	6022      	str	r2, [r4, #0]
 800894c:	601c      	str	r4, [r3, #0]
 800894e:	bd70      	pop	{r4, r5, r6, pc}
 8008950:	08009b19 	.word	0x08009b19
 8008954:	08009baa 	.word	0x08009baa

08008958 <__multadd>:
 8008958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800895a:	000f      	movs	r7, r1
 800895c:	9001      	str	r0, [sp, #4]
 800895e:	000c      	movs	r4, r1
 8008960:	001e      	movs	r6, r3
 8008962:	2000      	movs	r0, #0
 8008964:	690d      	ldr	r5, [r1, #16]
 8008966:	3714      	adds	r7, #20
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	3001      	adds	r0, #1
 800896c:	b299      	uxth	r1, r3
 800896e:	4351      	muls	r1, r2
 8008970:	0c1b      	lsrs	r3, r3, #16
 8008972:	4353      	muls	r3, r2
 8008974:	1989      	adds	r1, r1, r6
 8008976:	0c0e      	lsrs	r6, r1, #16
 8008978:	199b      	adds	r3, r3, r6
 800897a:	0c1e      	lsrs	r6, r3, #16
 800897c:	b289      	uxth	r1, r1
 800897e:	041b      	lsls	r3, r3, #16
 8008980:	185b      	adds	r3, r3, r1
 8008982:	c708      	stmia	r7!, {r3}
 8008984:	4285      	cmp	r5, r0
 8008986:	dcef      	bgt.n	8008968 <__multadd+0x10>
 8008988:	2e00      	cmp	r6, #0
 800898a:	d022      	beq.n	80089d2 <__multadd+0x7a>
 800898c:	68a3      	ldr	r3, [r4, #8]
 800898e:	42ab      	cmp	r3, r5
 8008990:	dc19      	bgt.n	80089c6 <__multadd+0x6e>
 8008992:	6861      	ldr	r1, [r4, #4]
 8008994:	9801      	ldr	r0, [sp, #4]
 8008996:	3101      	adds	r1, #1
 8008998:	f7ff ff76 	bl	8008888 <_Balloc>
 800899c:	1e07      	subs	r7, r0, #0
 800899e:	d105      	bne.n	80089ac <__multadd+0x54>
 80089a0:	003a      	movs	r2, r7
 80089a2:	21ba      	movs	r1, #186	@ 0xba
 80089a4:	4b0c      	ldr	r3, [pc, #48]	@ (80089d8 <__multadd+0x80>)
 80089a6:	480d      	ldr	r0, [pc, #52]	@ (80089dc <__multadd+0x84>)
 80089a8:	f000 fc0a 	bl	80091c0 <__assert_func>
 80089ac:	0021      	movs	r1, r4
 80089ae:	6922      	ldr	r2, [r4, #16]
 80089b0:	310c      	adds	r1, #12
 80089b2:	3202      	adds	r2, #2
 80089b4:	0092      	lsls	r2, r2, #2
 80089b6:	300c      	adds	r0, #12
 80089b8:	f000 fbf8 	bl	80091ac <memcpy>
 80089bc:	0021      	movs	r1, r4
 80089be:	9801      	ldr	r0, [sp, #4]
 80089c0:	f7ff ffa6 	bl	8008910 <_Bfree>
 80089c4:	003c      	movs	r4, r7
 80089c6:	1d2b      	adds	r3, r5, #4
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	18e3      	adds	r3, r4, r3
 80089cc:	3501      	adds	r5, #1
 80089ce:	605e      	str	r6, [r3, #4]
 80089d0:	6125      	str	r5, [r4, #16]
 80089d2:	0020      	movs	r0, r4
 80089d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80089d6:	46c0      	nop			@ (mov r8, r8)
 80089d8:	08009b88 	.word	0x08009b88
 80089dc:	08009baa 	.word	0x08009baa

080089e0 <__hi0bits>:
 80089e0:	2280      	movs	r2, #128	@ 0x80
 80089e2:	0003      	movs	r3, r0
 80089e4:	0252      	lsls	r2, r2, #9
 80089e6:	2000      	movs	r0, #0
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d201      	bcs.n	80089f0 <__hi0bits+0x10>
 80089ec:	041b      	lsls	r3, r3, #16
 80089ee:	3010      	adds	r0, #16
 80089f0:	2280      	movs	r2, #128	@ 0x80
 80089f2:	0452      	lsls	r2, r2, #17
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d201      	bcs.n	80089fc <__hi0bits+0x1c>
 80089f8:	3008      	adds	r0, #8
 80089fa:	021b      	lsls	r3, r3, #8
 80089fc:	2280      	movs	r2, #128	@ 0x80
 80089fe:	0552      	lsls	r2, r2, #21
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d201      	bcs.n	8008a08 <__hi0bits+0x28>
 8008a04:	3004      	adds	r0, #4
 8008a06:	011b      	lsls	r3, r3, #4
 8008a08:	2280      	movs	r2, #128	@ 0x80
 8008a0a:	05d2      	lsls	r2, r2, #23
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d201      	bcs.n	8008a14 <__hi0bits+0x34>
 8008a10:	3002      	adds	r0, #2
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	db03      	blt.n	8008a20 <__hi0bits+0x40>
 8008a18:	3001      	adds	r0, #1
 8008a1a:	4213      	tst	r3, r2
 8008a1c:	d100      	bne.n	8008a20 <__hi0bits+0x40>
 8008a1e:	2020      	movs	r0, #32
 8008a20:	4770      	bx	lr

08008a22 <__lo0bits>:
 8008a22:	6803      	ldr	r3, [r0, #0]
 8008a24:	0001      	movs	r1, r0
 8008a26:	2207      	movs	r2, #7
 8008a28:	0018      	movs	r0, r3
 8008a2a:	4010      	ands	r0, r2
 8008a2c:	4213      	tst	r3, r2
 8008a2e:	d00d      	beq.n	8008a4c <__lo0bits+0x2a>
 8008a30:	3a06      	subs	r2, #6
 8008a32:	2000      	movs	r0, #0
 8008a34:	4213      	tst	r3, r2
 8008a36:	d105      	bne.n	8008a44 <__lo0bits+0x22>
 8008a38:	3002      	adds	r0, #2
 8008a3a:	4203      	tst	r3, r0
 8008a3c:	d003      	beq.n	8008a46 <__lo0bits+0x24>
 8008a3e:	40d3      	lsrs	r3, r2
 8008a40:	0010      	movs	r0, r2
 8008a42:	600b      	str	r3, [r1, #0]
 8008a44:	4770      	bx	lr
 8008a46:	089b      	lsrs	r3, r3, #2
 8008a48:	600b      	str	r3, [r1, #0]
 8008a4a:	e7fb      	b.n	8008a44 <__lo0bits+0x22>
 8008a4c:	b29a      	uxth	r2, r3
 8008a4e:	2a00      	cmp	r2, #0
 8008a50:	d101      	bne.n	8008a56 <__lo0bits+0x34>
 8008a52:	2010      	movs	r0, #16
 8008a54:	0c1b      	lsrs	r3, r3, #16
 8008a56:	b2da      	uxtb	r2, r3
 8008a58:	2a00      	cmp	r2, #0
 8008a5a:	d101      	bne.n	8008a60 <__lo0bits+0x3e>
 8008a5c:	3008      	adds	r0, #8
 8008a5e:	0a1b      	lsrs	r3, r3, #8
 8008a60:	071a      	lsls	r2, r3, #28
 8008a62:	d101      	bne.n	8008a68 <__lo0bits+0x46>
 8008a64:	3004      	adds	r0, #4
 8008a66:	091b      	lsrs	r3, r3, #4
 8008a68:	079a      	lsls	r2, r3, #30
 8008a6a:	d101      	bne.n	8008a70 <__lo0bits+0x4e>
 8008a6c:	3002      	adds	r0, #2
 8008a6e:	089b      	lsrs	r3, r3, #2
 8008a70:	07da      	lsls	r2, r3, #31
 8008a72:	d4e9      	bmi.n	8008a48 <__lo0bits+0x26>
 8008a74:	3001      	adds	r0, #1
 8008a76:	085b      	lsrs	r3, r3, #1
 8008a78:	d1e6      	bne.n	8008a48 <__lo0bits+0x26>
 8008a7a:	2020      	movs	r0, #32
 8008a7c:	e7e2      	b.n	8008a44 <__lo0bits+0x22>
	...

08008a80 <__i2b>:
 8008a80:	b510      	push	{r4, lr}
 8008a82:	000c      	movs	r4, r1
 8008a84:	2101      	movs	r1, #1
 8008a86:	f7ff feff 	bl	8008888 <_Balloc>
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	d107      	bne.n	8008a9e <__i2b+0x1e>
 8008a8e:	2146      	movs	r1, #70	@ 0x46
 8008a90:	4c05      	ldr	r4, [pc, #20]	@ (8008aa8 <__i2b+0x28>)
 8008a92:	0002      	movs	r2, r0
 8008a94:	4b05      	ldr	r3, [pc, #20]	@ (8008aac <__i2b+0x2c>)
 8008a96:	0020      	movs	r0, r4
 8008a98:	31ff      	adds	r1, #255	@ 0xff
 8008a9a:	f000 fb91 	bl	80091c0 <__assert_func>
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	6144      	str	r4, [r0, #20]
 8008aa2:	6103      	str	r3, [r0, #16]
 8008aa4:	bd10      	pop	{r4, pc}
 8008aa6:	46c0      	nop			@ (mov r8, r8)
 8008aa8:	08009baa 	.word	0x08009baa
 8008aac:	08009b88 	.word	0x08009b88

08008ab0 <__multiply>:
 8008ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ab2:	0014      	movs	r4, r2
 8008ab4:	690a      	ldr	r2, [r1, #16]
 8008ab6:	6923      	ldr	r3, [r4, #16]
 8008ab8:	000d      	movs	r5, r1
 8008aba:	b08b      	sub	sp, #44	@ 0x2c
 8008abc:	429a      	cmp	r2, r3
 8008abe:	db02      	blt.n	8008ac6 <__multiply+0x16>
 8008ac0:	0023      	movs	r3, r4
 8008ac2:	000c      	movs	r4, r1
 8008ac4:	001d      	movs	r5, r3
 8008ac6:	6927      	ldr	r7, [r4, #16]
 8008ac8:	692e      	ldr	r6, [r5, #16]
 8008aca:	6861      	ldr	r1, [r4, #4]
 8008acc:	19bb      	adds	r3, r7, r6
 8008ace:	9303      	str	r3, [sp, #12]
 8008ad0:	68a3      	ldr	r3, [r4, #8]
 8008ad2:	19ba      	adds	r2, r7, r6
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	da00      	bge.n	8008ada <__multiply+0x2a>
 8008ad8:	3101      	adds	r1, #1
 8008ada:	f7ff fed5 	bl	8008888 <_Balloc>
 8008ade:	9002      	str	r0, [sp, #8]
 8008ae0:	2800      	cmp	r0, #0
 8008ae2:	d106      	bne.n	8008af2 <__multiply+0x42>
 8008ae4:	21b1      	movs	r1, #177	@ 0xb1
 8008ae6:	4b49      	ldr	r3, [pc, #292]	@ (8008c0c <__multiply+0x15c>)
 8008ae8:	4849      	ldr	r0, [pc, #292]	@ (8008c10 <__multiply+0x160>)
 8008aea:	9a02      	ldr	r2, [sp, #8]
 8008aec:	0049      	lsls	r1, r1, #1
 8008aee:	f000 fb67 	bl	80091c0 <__assert_func>
 8008af2:	9b02      	ldr	r3, [sp, #8]
 8008af4:	2200      	movs	r2, #0
 8008af6:	3314      	adds	r3, #20
 8008af8:	469c      	mov	ip, r3
 8008afa:	19bb      	adds	r3, r7, r6
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	4463      	add	r3, ip
 8008b00:	9304      	str	r3, [sp, #16]
 8008b02:	4663      	mov	r3, ip
 8008b04:	9904      	ldr	r1, [sp, #16]
 8008b06:	428b      	cmp	r3, r1
 8008b08:	d32a      	bcc.n	8008b60 <__multiply+0xb0>
 8008b0a:	0023      	movs	r3, r4
 8008b0c:	00bf      	lsls	r7, r7, #2
 8008b0e:	3314      	adds	r3, #20
 8008b10:	3514      	adds	r5, #20
 8008b12:	9308      	str	r3, [sp, #32]
 8008b14:	00b6      	lsls	r6, r6, #2
 8008b16:	19db      	adds	r3, r3, r7
 8008b18:	9305      	str	r3, [sp, #20]
 8008b1a:	19ab      	adds	r3, r5, r6
 8008b1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b1e:	2304      	movs	r3, #4
 8008b20:	9306      	str	r3, [sp, #24]
 8008b22:	0023      	movs	r3, r4
 8008b24:	9a05      	ldr	r2, [sp, #20]
 8008b26:	3315      	adds	r3, #21
 8008b28:	9501      	str	r5, [sp, #4]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d305      	bcc.n	8008b3a <__multiply+0x8a>
 8008b2e:	1b13      	subs	r3, r2, r4
 8008b30:	3b15      	subs	r3, #21
 8008b32:	089b      	lsrs	r3, r3, #2
 8008b34:	3301      	adds	r3, #1
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	9306      	str	r3, [sp, #24]
 8008b3a:	9b01      	ldr	r3, [sp, #4]
 8008b3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d310      	bcc.n	8008b64 <__multiply+0xb4>
 8008b42:	9b03      	ldr	r3, [sp, #12]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	dd05      	ble.n	8008b54 <__multiply+0xa4>
 8008b48:	9b04      	ldr	r3, [sp, #16]
 8008b4a:	3b04      	subs	r3, #4
 8008b4c:	9304      	str	r3, [sp, #16]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d056      	beq.n	8008c02 <__multiply+0x152>
 8008b54:	9b02      	ldr	r3, [sp, #8]
 8008b56:	9a03      	ldr	r2, [sp, #12]
 8008b58:	0018      	movs	r0, r3
 8008b5a:	611a      	str	r2, [r3, #16]
 8008b5c:	b00b      	add	sp, #44	@ 0x2c
 8008b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b60:	c304      	stmia	r3!, {r2}
 8008b62:	e7cf      	b.n	8008b04 <__multiply+0x54>
 8008b64:	9b01      	ldr	r3, [sp, #4]
 8008b66:	6818      	ldr	r0, [r3, #0]
 8008b68:	b280      	uxth	r0, r0
 8008b6a:	2800      	cmp	r0, #0
 8008b6c:	d01e      	beq.n	8008bac <__multiply+0xfc>
 8008b6e:	4667      	mov	r7, ip
 8008b70:	2500      	movs	r5, #0
 8008b72:	9e08      	ldr	r6, [sp, #32]
 8008b74:	ce02      	ldmia	r6!, {r1}
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	9307      	str	r3, [sp, #28]
 8008b7a:	b28b      	uxth	r3, r1
 8008b7c:	4343      	muls	r3, r0
 8008b7e:	001a      	movs	r2, r3
 8008b80:	466b      	mov	r3, sp
 8008b82:	0c09      	lsrs	r1, r1, #16
 8008b84:	8b9b      	ldrh	r3, [r3, #28]
 8008b86:	4341      	muls	r1, r0
 8008b88:	18d3      	adds	r3, r2, r3
 8008b8a:	9a07      	ldr	r2, [sp, #28]
 8008b8c:	195b      	adds	r3, r3, r5
 8008b8e:	0c12      	lsrs	r2, r2, #16
 8008b90:	1889      	adds	r1, r1, r2
 8008b92:	0c1a      	lsrs	r2, r3, #16
 8008b94:	188a      	adds	r2, r1, r2
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	0c15      	lsrs	r5, r2, #16
 8008b9a:	0412      	lsls	r2, r2, #16
 8008b9c:	431a      	orrs	r2, r3
 8008b9e:	9b05      	ldr	r3, [sp, #20]
 8008ba0:	c704      	stmia	r7!, {r2}
 8008ba2:	42b3      	cmp	r3, r6
 8008ba4:	d8e6      	bhi.n	8008b74 <__multiply+0xc4>
 8008ba6:	4663      	mov	r3, ip
 8008ba8:	9a06      	ldr	r2, [sp, #24]
 8008baa:	509d      	str	r5, [r3, r2]
 8008bac:	9b01      	ldr	r3, [sp, #4]
 8008bae:	6818      	ldr	r0, [r3, #0]
 8008bb0:	0c00      	lsrs	r0, r0, #16
 8008bb2:	d020      	beq.n	8008bf6 <__multiply+0x146>
 8008bb4:	4663      	mov	r3, ip
 8008bb6:	0025      	movs	r5, r4
 8008bb8:	4661      	mov	r1, ip
 8008bba:	2700      	movs	r7, #0
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	3514      	adds	r5, #20
 8008bc0:	682a      	ldr	r2, [r5, #0]
 8008bc2:	680e      	ldr	r6, [r1, #0]
 8008bc4:	b292      	uxth	r2, r2
 8008bc6:	4342      	muls	r2, r0
 8008bc8:	0c36      	lsrs	r6, r6, #16
 8008bca:	1992      	adds	r2, r2, r6
 8008bcc:	19d2      	adds	r2, r2, r7
 8008bce:	0416      	lsls	r6, r2, #16
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	431e      	orrs	r6, r3
 8008bd4:	600e      	str	r6, [r1, #0]
 8008bd6:	cd40      	ldmia	r5!, {r6}
 8008bd8:	684b      	ldr	r3, [r1, #4]
 8008bda:	0c36      	lsrs	r6, r6, #16
 8008bdc:	4346      	muls	r6, r0
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	0c12      	lsrs	r2, r2, #16
 8008be2:	18f3      	adds	r3, r6, r3
 8008be4:	189b      	adds	r3, r3, r2
 8008be6:	9a05      	ldr	r2, [sp, #20]
 8008be8:	0c1f      	lsrs	r7, r3, #16
 8008bea:	3104      	adds	r1, #4
 8008bec:	42aa      	cmp	r2, r5
 8008bee:	d8e7      	bhi.n	8008bc0 <__multiply+0x110>
 8008bf0:	4662      	mov	r2, ip
 8008bf2:	9906      	ldr	r1, [sp, #24]
 8008bf4:	5053      	str	r3, [r2, r1]
 8008bf6:	9b01      	ldr	r3, [sp, #4]
 8008bf8:	3304      	adds	r3, #4
 8008bfa:	9301      	str	r3, [sp, #4]
 8008bfc:	2304      	movs	r3, #4
 8008bfe:	449c      	add	ip, r3
 8008c00:	e79b      	b.n	8008b3a <__multiply+0x8a>
 8008c02:	9b03      	ldr	r3, [sp, #12]
 8008c04:	3b01      	subs	r3, #1
 8008c06:	9303      	str	r3, [sp, #12]
 8008c08:	e79b      	b.n	8008b42 <__multiply+0x92>
 8008c0a:	46c0      	nop			@ (mov r8, r8)
 8008c0c:	08009b88 	.word	0x08009b88
 8008c10:	08009baa 	.word	0x08009baa

08008c14 <__pow5mult>:
 8008c14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c16:	2303      	movs	r3, #3
 8008c18:	0015      	movs	r5, r2
 8008c1a:	0007      	movs	r7, r0
 8008c1c:	000e      	movs	r6, r1
 8008c1e:	401a      	ands	r2, r3
 8008c20:	421d      	tst	r5, r3
 8008c22:	d008      	beq.n	8008c36 <__pow5mult+0x22>
 8008c24:	4925      	ldr	r1, [pc, #148]	@ (8008cbc <__pow5mult+0xa8>)
 8008c26:	3a01      	subs	r2, #1
 8008c28:	0092      	lsls	r2, r2, #2
 8008c2a:	5852      	ldr	r2, [r2, r1]
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	0031      	movs	r1, r6
 8008c30:	f7ff fe92 	bl	8008958 <__multadd>
 8008c34:	0006      	movs	r6, r0
 8008c36:	10ad      	asrs	r5, r5, #2
 8008c38:	d03d      	beq.n	8008cb6 <__pow5mult+0xa2>
 8008c3a:	69fc      	ldr	r4, [r7, #28]
 8008c3c:	2c00      	cmp	r4, #0
 8008c3e:	d10f      	bne.n	8008c60 <__pow5mult+0x4c>
 8008c40:	2010      	movs	r0, #16
 8008c42:	f7ff fcb3 	bl	80085ac <malloc>
 8008c46:	1e02      	subs	r2, r0, #0
 8008c48:	61f8      	str	r0, [r7, #28]
 8008c4a:	d105      	bne.n	8008c58 <__pow5mult+0x44>
 8008c4c:	21b4      	movs	r1, #180	@ 0xb4
 8008c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8008cc0 <__pow5mult+0xac>)
 8008c50:	481c      	ldr	r0, [pc, #112]	@ (8008cc4 <__pow5mult+0xb0>)
 8008c52:	31ff      	adds	r1, #255	@ 0xff
 8008c54:	f000 fab4 	bl	80091c0 <__assert_func>
 8008c58:	6044      	str	r4, [r0, #4]
 8008c5a:	6084      	str	r4, [r0, #8]
 8008c5c:	6004      	str	r4, [r0, #0]
 8008c5e:	60c4      	str	r4, [r0, #12]
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	689c      	ldr	r4, [r3, #8]
 8008c64:	9301      	str	r3, [sp, #4]
 8008c66:	2c00      	cmp	r4, #0
 8008c68:	d108      	bne.n	8008c7c <__pow5mult+0x68>
 8008c6a:	0038      	movs	r0, r7
 8008c6c:	4916      	ldr	r1, [pc, #88]	@ (8008cc8 <__pow5mult+0xb4>)
 8008c6e:	f7ff ff07 	bl	8008a80 <__i2b>
 8008c72:	9b01      	ldr	r3, [sp, #4]
 8008c74:	0004      	movs	r4, r0
 8008c76:	6098      	str	r0, [r3, #8]
 8008c78:	2300      	movs	r3, #0
 8008c7a:	6003      	str	r3, [r0, #0]
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	421d      	tst	r5, r3
 8008c80:	d00a      	beq.n	8008c98 <__pow5mult+0x84>
 8008c82:	0031      	movs	r1, r6
 8008c84:	0022      	movs	r2, r4
 8008c86:	0038      	movs	r0, r7
 8008c88:	f7ff ff12 	bl	8008ab0 <__multiply>
 8008c8c:	0031      	movs	r1, r6
 8008c8e:	9001      	str	r0, [sp, #4]
 8008c90:	0038      	movs	r0, r7
 8008c92:	f7ff fe3d 	bl	8008910 <_Bfree>
 8008c96:	9e01      	ldr	r6, [sp, #4]
 8008c98:	106d      	asrs	r5, r5, #1
 8008c9a:	d00c      	beq.n	8008cb6 <__pow5mult+0xa2>
 8008c9c:	6820      	ldr	r0, [r4, #0]
 8008c9e:	2800      	cmp	r0, #0
 8008ca0:	d107      	bne.n	8008cb2 <__pow5mult+0x9e>
 8008ca2:	0022      	movs	r2, r4
 8008ca4:	0021      	movs	r1, r4
 8008ca6:	0038      	movs	r0, r7
 8008ca8:	f7ff ff02 	bl	8008ab0 <__multiply>
 8008cac:	2300      	movs	r3, #0
 8008cae:	6020      	str	r0, [r4, #0]
 8008cb0:	6003      	str	r3, [r0, #0]
 8008cb2:	0004      	movs	r4, r0
 8008cb4:	e7e2      	b.n	8008c7c <__pow5mult+0x68>
 8008cb6:	0030      	movs	r0, r6
 8008cb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008cba:	46c0      	nop			@ (mov r8, r8)
 8008cbc:	08009c04 	.word	0x08009c04
 8008cc0:	08009b19 	.word	0x08009b19
 8008cc4:	08009baa 	.word	0x08009baa
 8008cc8:	00000271 	.word	0x00000271

08008ccc <__lshift>:
 8008ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cce:	000c      	movs	r4, r1
 8008cd0:	0016      	movs	r6, r2
 8008cd2:	6923      	ldr	r3, [r4, #16]
 8008cd4:	1157      	asrs	r7, r2, #5
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	18fb      	adds	r3, r7, r3
 8008cda:	9301      	str	r3, [sp, #4]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	9300      	str	r3, [sp, #0]
 8008ce0:	6849      	ldr	r1, [r1, #4]
 8008ce2:	68a3      	ldr	r3, [r4, #8]
 8008ce4:	9002      	str	r0, [sp, #8]
 8008ce6:	9a00      	ldr	r2, [sp, #0]
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	db10      	blt.n	8008d0e <__lshift+0x42>
 8008cec:	9802      	ldr	r0, [sp, #8]
 8008cee:	f7ff fdcb 	bl	8008888 <_Balloc>
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	0001      	movs	r1, r0
 8008cf6:	0005      	movs	r5, r0
 8008cf8:	001a      	movs	r2, r3
 8008cfa:	3114      	adds	r1, #20
 8008cfc:	4298      	cmp	r0, r3
 8008cfe:	d10c      	bne.n	8008d1a <__lshift+0x4e>
 8008d00:	21ef      	movs	r1, #239	@ 0xef
 8008d02:	002a      	movs	r2, r5
 8008d04:	4b25      	ldr	r3, [pc, #148]	@ (8008d9c <__lshift+0xd0>)
 8008d06:	4826      	ldr	r0, [pc, #152]	@ (8008da0 <__lshift+0xd4>)
 8008d08:	0049      	lsls	r1, r1, #1
 8008d0a:	f000 fa59 	bl	80091c0 <__assert_func>
 8008d0e:	3101      	adds	r1, #1
 8008d10:	005b      	lsls	r3, r3, #1
 8008d12:	e7e8      	b.n	8008ce6 <__lshift+0x1a>
 8008d14:	0098      	lsls	r0, r3, #2
 8008d16:	500a      	str	r2, [r1, r0]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	42bb      	cmp	r3, r7
 8008d1c:	dbfa      	blt.n	8008d14 <__lshift+0x48>
 8008d1e:	43fb      	mvns	r3, r7
 8008d20:	17db      	asrs	r3, r3, #31
 8008d22:	401f      	ands	r7, r3
 8008d24:	00bf      	lsls	r7, r7, #2
 8008d26:	0023      	movs	r3, r4
 8008d28:	201f      	movs	r0, #31
 8008d2a:	19c9      	adds	r1, r1, r7
 8008d2c:	0037      	movs	r7, r6
 8008d2e:	6922      	ldr	r2, [r4, #16]
 8008d30:	3314      	adds	r3, #20
 8008d32:	0092      	lsls	r2, r2, #2
 8008d34:	189a      	adds	r2, r3, r2
 8008d36:	4007      	ands	r7, r0
 8008d38:	4206      	tst	r6, r0
 8008d3a:	d029      	beq.n	8008d90 <__lshift+0xc4>
 8008d3c:	3001      	adds	r0, #1
 8008d3e:	1bc0      	subs	r0, r0, r7
 8008d40:	9003      	str	r0, [sp, #12]
 8008d42:	468c      	mov	ip, r1
 8008d44:	2000      	movs	r0, #0
 8008d46:	681e      	ldr	r6, [r3, #0]
 8008d48:	40be      	lsls	r6, r7
 8008d4a:	4306      	orrs	r6, r0
 8008d4c:	4660      	mov	r0, ip
 8008d4e:	c040      	stmia	r0!, {r6}
 8008d50:	4684      	mov	ip, r0
 8008d52:	9e03      	ldr	r6, [sp, #12]
 8008d54:	cb01      	ldmia	r3!, {r0}
 8008d56:	40f0      	lsrs	r0, r6
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d8f4      	bhi.n	8008d46 <__lshift+0x7a>
 8008d5c:	0026      	movs	r6, r4
 8008d5e:	3615      	adds	r6, #21
 8008d60:	2304      	movs	r3, #4
 8008d62:	42b2      	cmp	r2, r6
 8008d64:	d304      	bcc.n	8008d70 <__lshift+0xa4>
 8008d66:	1b13      	subs	r3, r2, r4
 8008d68:	3b15      	subs	r3, #21
 8008d6a:	089b      	lsrs	r3, r3, #2
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	50c8      	str	r0, [r1, r3]
 8008d72:	2800      	cmp	r0, #0
 8008d74:	d002      	beq.n	8008d7c <__lshift+0xb0>
 8008d76:	9b01      	ldr	r3, [sp, #4]
 8008d78:	3302      	adds	r3, #2
 8008d7a:	9300      	str	r3, [sp, #0]
 8008d7c:	9b00      	ldr	r3, [sp, #0]
 8008d7e:	9802      	ldr	r0, [sp, #8]
 8008d80:	3b01      	subs	r3, #1
 8008d82:	0021      	movs	r1, r4
 8008d84:	612b      	str	r3, [r5, #16]
 8008d86:	f7ff fdc3 	bl	8008910 <_Bfree>
 8008d8a:	0028      	movs	r0, r5
 8008d8c:	b005      	add	sp, #20
 8008d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d90:	cb01      	ldmia	r3!, {r0}
 8008d92:	c101      	stmia	r1!, {r0}
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d8fb      	bhi.n	8008d90 <__lshift+0xc4>
 8008d98:	e7f0      	b.n	8008d7c <__lshift+0xb0>
 8008d9a:	46c0      	nop			@ (mov r8, r8)
 8008d9c:	08009b88 	.word	0x08009b88
 8008da0:	08009baa 	.word	0x08009baa

08008da4 <__mcmp>:
 8008da4:	b530      	push	{r4, r5, lr}
 8008da6:	690b      	ldr	r3, [r1, #16]
 8008da8:	6904      	ldr	r4, [r0, #16]
 8008daa:	0002      	movs	r2, r0
 8008dac:	1ae0      	subs	r0, r4, r3
 8008dae:	429c      	cmp	r4, r3
 8008db0:	d10f      	bne.n	8008dd2 <__mcmp+0x2e>
 8008db2:	3214      	adds	r2, #20
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	3114      	adds	r1, #20
 8008db8:	0014      	movs	r4, r2
 8008dba:	18c9      	adds	r1, r1, r3
 8008dbc:	18d2      	adds	r2, r2, r3
 8008dbe:	3a04      	subs	r2, #4
 8008dc0:	3904      	subs	r1, #4
 8008dc2:	6815      	ldr	r5, [r2, #0]
 8008dc4:	680b      	ldr	r3, [r1, #0]
 8008dc6:	429d      	cmp	r5, r3
 8008dc8:	d004      	beq.n	8008dd4 <__mcmp+0x30>
 8008dca:	2001      	movs	r0, #1
 8008dcc:	429d      	cmp	r5, r3
 8008dce:	d200      	bcs.n	8008dd2 <__mcmp+0x2e>
 8008dd0:	3802      	subs	r0, #2
 8008dd2:	bd30      	pop	{r4, r5, pc}
 8008dd4:	4294      	cmp	r4, r2
 8008dd6:	d3f2      	bcc.n	8008dbe <__mcmp+0x1a>
 8008dd8:	e7fb      	b.n	8008dd2 <__mcmp+0x2e>
	...

08008ddc <__mdiff>:
 8008ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dde:	000c      	movs	r4, r1
 8008de0:	b087      	sub	sp, #28
 8008de2:	9000      	str	r0, [sp, #0]
 8008de4:	0011      	movs	r1, r2
 8008de6:	0020      	movs	r0, r4
 8008de8:	0017      	movs	r7, r2
 8008dea:	f7ff ffdb 	bl	8008da4 <__mcmp>
 8008dee:	1e05      	subs	r5, r0, #0
 8008df0:	d110      	bne.n	8008e14 <__mdiff+0x38>
 8008df2:	0001      	movs	r1, r0
 8008df4:	9800      	ldr	r0, [sp, #0]
 8008df6:	f7ff fd47 	bl	8008888 <_Balloc>
 8008dfa:	1e02      	subs	r2, r0, #0
 8008dfc:	d104      	bne.n	8008e08 <__mdiff+0x2c>
 8008dfe:	4b40      	ldr	r3, [pc, #256]	@ (8008f00 <__mdiff+0x124>)
 8008e00:	4840      	ldr	r0, [pc, #256]	@ (8008f04 <__mdiff+0x128>)
 8008e02:	4941      	ldr	r1, [pc, #260]	@ (8008f08 <__mdiff+0x12c>)
 8008e04:	f000 f9dc 	bl	80091c0 <__assert_func>
 8008e08:	2301      	movs	r3, #1
 8008e0a:	6145      	str	r5, [r0, #20]
 8008e0c:	6103      	str	r3, [r0, #16]
 8008e0e:	0010      	movs	r0, r2
 8008e10:	b007      	add	sp, #28
 8008e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e14:	2600      	movs	r6, #0
 8008e16:	42b0      	cmp	r0, r6
 8008e18:	da03      	bge.n	8008e22 <__mdiff+0x46>
 8008e1a:	0023      	movs	r3, r4
 8008e1c:	003c      	movs	r4, r7
 8008e1e:	001f      	movs	r7, r3
 8008e20:	3601      	adds	r6, #1
 8008e22:	6861      	ldr	r1, [r4, #4]
 8008e24:	9800      	ldr	r0, [sp, #0]
 8008e26:	f7ff fd2f 	bl	8008888 <_Balloc>
 8008e2a:	1e02      	subs	r2, r0, #0
 8008e2c:	d103      	bne.n	8008e36 <__mdiff+0x5a>
 8008e2e:	4b34      	ldr	r3, [pc, #208]	@ (8008f00 <__mdiff+0x124>)
 8008e30:	4834      	ldr	r0, [pc, #208]	@ (8008f04 <__mdiff+0x128>)
 8008e32:	4936      	ldr	r1, [pc, #216]	@ (8008f0c <__mdiff+0x130>)
 8008e34:	e7e6      	b.n	8008e04 <__mdiff+0x28>
 8008e36:	6923      	ldr	r3, [r4, #16]
 8008e38:	3414      	adds	r4, #20
 8008e3a:	9300      	str	r3, [sp, #0]
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	18e3      	adds	r3, r4, r3
 8008e40:	0021      	movs	r1, r4
 8008e42:	9401      	str	r4, [sp, #4]
 8008e44:	003c      	movs	r4, r7
 8008e46:	9302      	str	r3, [sp, #8]
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	3414      	adds	r4, #20
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	18e3      	adds	r3, r4, r3
 8008e50:	9303      	str	r3, [sp, #12]
 8008e52:	0003      	movs	r3, r0
 8008e54:	60c6      	str	r6, [r0, #12]
 8008e56:	468c      	mov	ip, r1
 8008e58:	2000      	movs	r0, #0
 8008e5a:	3314      	adds	r3, #20
 8008e5c:	9304      	str	r3, [sp, #16]
 8008e5e:	9305      	str	r3, [sp, #20]
 8008e60:	4663      	mov	r3, ip
 8008e62:	cb20      	ldmia	r3!, {r5}
 8008e64:	b2a9      	uxth	r1, r5
 8008e66:	000e      	movs	r6, r1
 8008e68:	469c      	mov	ip, r3
 8008e6a:	cc08      	ldmia	r4!, {r3}
 8008e6c:	0c2d      	lsrs	r5, r5, #16
 8008e6e:	b299      	uxth	r1, r3
 8008e70:	1a71      	subs	r1, r6, r1
 8008e72:	1809      	adds	r1, r1, r0
 8008e74:	0c1b      	lsrs	r3, r3, #16
 8008e76:	1408      	asrs	r0, r1, #16
 8008e78:	1aeb      	subs	r3, r5, r3
 8008e7a:	181b      	adds	r3, r3, r0
 8008e7c:	1418      	asrs	r0, r3, #16
 8008e7e:	b289      	uxth	r1, r1
 8008e80:	041b      	lsls	r3, r3, #16
 8008e82:	4319      	orrs	r1, r3
 8008e84:	9b05      	ldr	r3, [sp, #20]
 8008e86:	c302      	stmia	r3!, {r1}
 8008e88:	9305      	str	r3, [sp, #20]
 8008e8a:	9b03      	ldr	r3, [sp, #12]
 8008e8c:	42a3      	cmp	r3, r4
 8008e8e:	d8e7      	bhi.n	8008e60 <__mdiff+0x84>
 8008e90:	0039      	movs	r1, r7
 8008e92:	9c03      	ldr	r4, [sp, #12]
 8008e94:	3115      	adds	r1, #21
 8008e96:	2304      	movs	r3, #4
 8008e98:	428c      	cmp	r4, r1
 8008e9a:	d304      	bcc.n	8008ea6 <__mdiff+0xca>
 8008e9c:	1be3      	subs	r3, r4, r7
 8008e9e:	3b15      	subs	r3, #21
 8008ea0:	089b      	lsrs	r3, r3, #2
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	9901      	ldr	r1, [sp, #4]
 8008ea8:	18cd      	adds	r5, r1, r3
 8008eaa:	9904      	ldr	r1, [sp, #16]
 8008eac:	002e      	movs	r6, r5
 8008eae:	18cb      	adds	r3, r1, r3
 8008eb0:	001f      	movs	r7, r3
 8008eb2:	9902      	ldr	r1, [sp, #8]
 8008eb4:	428e      	cmp	r6, r1
 8008eb6:	d311      	bcc.n	8008edc <__mdiff+0x100>
 8008eb8:	9c02      	ldr	r4, [sp, #8]
 8008eba:	1ee9      	subs	r1, r5, #3
 8008ebc:	2000      	movs	r0, #0
 8008ebe:	428c      	cmp	r4, r1
 8008ec0:	d304      	bcc.n	8008ecc <__mdiff+0xf0>
 8008ec2:	0021      	movs	r1, r4
 8008ec4:	3103      	adds	r1, #3
 8008ec6:	1b49      	subs	r1, r1, r5
 8008ec8:	0889      	lsrs	r1, r1, #2
 8008eca:	0088      	lsls	r0, r1, #2
 8008ecc:	181b      	adds	r3, r3, r0
 8008ece:	3b04      	subs	r3, #4
 8008ed0:	6819      	ldr	r1, [r3, #0]
 8008ed2:	2900      	cmp	r1, #0
 8008ed4:	d010      	beq.n	8008ef8 <__mdiff+0x11c>
 8008ed6:	9b00      	ldr	r3, [sp, #0]
 8008ed8:	6113      	str	r3, [r2, #16]
 8008eda:	e798      	b.n	8008e0e <__mdiff+0x32>
 8008edc:	4684      	mov	ip, r0
 8008ede:	ce02      	ldmia	r6!, {r1}
 8008ee0:	b288      	uxth	r0, r1
 8008ee2:	4460      	add	r0, ip
 8008ee4:	1400      	asrs	r0, r0, #16
 8008ee6:	0c0c      	lsrs	r4, r1, #16
 8008ee8:	1904      	adds	r4, r0, r4
 8008eea:	4461      	add	r1, ip
 8008eec:	1420      	asrs	r0, r4, #16
 8008eee:	b289      	uxth	r1, r1
 8008ef0:	0424      	lsls	r4, r4, #16
 8008ef2:	4321      	orrs	r1, r4
 8008ef4:	c702      	stmia	r7!, {r1}
 8008ef6:	e7dc      	b.n	8008eb2 <__mdiff+0xd6>
 8008ef8:	9900      	ldr	r1, [sp, #0]
 8008efa:	3901      	subs	r1, #1
 8008efc:	9100      	str	r1, [sp, #0]
 8008efe:	e7e6      	b.n	8008ece <__mdiff+0xf2>
 8008f00:	08009b88 	.word	0x08009b88
 8008f04:	08009baa 	.word	0x08009baa
 8008f08:	00000237 	.word	0x00000237
 8008f0c:	00000245 	.word	0x00000245

08008f10 <__d2b>:
 8008f10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f12:	2101      	movs	r1, #1
 8008f14:	0016      	movs	r6, r2
 8008f16:	001f      	movs	r7, r3
 8008f18:	f7ff fcb6 	bl	8008888 <_Balloc>
 8008f1c:	1e04      	subs	r4, r0, #0
 8008f1e:	d105      	bne.n	8008f2c <__d2b+0x1c>
 8008f20:	0022      	movs	r2, r4
 8008f22:	4b25      	ldr	r3, [pc, #148]	@ (8008fb8 <__d2b+0xa8>)
 8008f24:	4825      	ldr	r0, [pc, #148]	@ (8008fbc <__d2b+0xac>)
 8008f26:	4926      	ldr	r1, [pc, #152]	@ (8008fc0 <__d2b+0xb0>)
 8008f28:	f000 f94a 	bl	80091c0 <__assert_func>
 8008f2c:	033b      	lsls	r3, r7, #12
 8008f2e:	007d      	lsls	r5, r7, #1
 8008f30:	0b1b      	lsrs	r3, r3, #12
 8008f32:	0d6d      	lsrs	r5, r5, #21
 8008f34:	d002      	beq.n	8008f3c <__d2b+0x2c>
 8008f36:	2280      	movs	r2, #128	@ 0x80
 8008f38:	0352      	lsls	r2, r2, #13
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	9301      	str	r3, [sp, #4]
 8008f3e:	2e00      	cmp	r6, #0
 8008f40:	d025      	beq.n	8008f8e <__d2b+0x7e>
 8008f42:	4668      	mov	r0, sp
 8008f44:	9600      	str	r6, [sp, #0]
 8008f46:	f7ff fd6c 	bl	8008a22 <__lo0bits>
 8008f4a:	9b01      	ldr	r3, [sp, #4]
 8008f4c:	9900      	ldr	r1, [sp, #0]
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	d01b      	beq.n	8008f8a <__d2b+0x7a>
 8008f52:	2220      	movs	r2, #32
 8008f54:	001e      	movs	r6, r3
 8008f56:	1a12      	subs	r2, r2, r0
 8008f58:	4096      	lsls	r6, r2
 8008f5a:	0032      	movs	r2, r6
 8008f5c:	40c3      	lsrs	r3, r0
 8008f5e:	430a      	orrs	r2, r1
 8008f60:	6162      	str	r2, [r4, #20]
 8008f62:	9301      	str	r3, [sp, #4]
 8008f64:	9e01      	ldr	r6, [sp, #4]
 8008f66:	61a6      	str	r6, [r4, #24]
 8008f68:	1e73      	subs	r3, r6, #1
 8008f6a:	419e      	sbcs	r6, r3
 8008f6c:	3601      	adds	r6, #1
 8008f6e:	6126      	str	r6, [r4, #16]
 8008f70:	2d00      	cmp	r5, #0
 8008f72:	d014      	beq.n	8008f9e <__d2b+0x8e>
 8008f74:	2635      	movs	r6, #53	@ 0x35
 8008f76:	4b13      	ldr	r3, [pc, #76]	@ (8008fc4 <__d2b+0xb4>)
 8008f78:	18ed      	adds	r5, r5, r3
 8008f7a:	9b08      	ldr	r3, [sp, #32]
 8008f7c:	182d      	adds	r5, r5, r0
 8008f7e:	601d      	str	r5, [r3, #0]
 8008f80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f82:	1a36      	subs	r6, r6, r0
 8008f84:	601e      	str	r6, [r3, #0]
 8008f86:	0020      	movs	r0, r4
 8008f88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008f8a:	6161      	str	r1, [r4, #20]
 8008f8c:	e7ea      	b.n	8008f64 <__d2b+0x54>
 8008f8e:	a801      	add	r0, sp, #4
 8008f90:	f7ff fd47 	bl	8008a22 <__lo0bits>
 8008f94:	9b01      	ldr	r3, [sp, #4]
 8008f96:	2601      	movs	r6, #1
 8008f98:	6163      	str	r3, [r4, #20]
 8008f9a:	3020      	adds	r0, #32
 8008f9c:	e7e7      	b.n	8008f6e <__d2b+0x5e>
 8008f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8008fc8 <__d2b+0xb8>)
 8008fa0:	18c0      	adds	r0, r0, r3
 8008fa2:	9b08      	ldr	r3, [sp, #32]
 8008fa4:	6018      	str	r0, [r3, #0]
 8008fa6:	4b09      	ldr	r3, [pc, #36]	@ (8008fcc <__d2b+0xbc>)
 8008fa8:	18f3      	adds	r3, r6, r3
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	18e3      	adds	r3, r4, r3
 8008fae:	6958      	ldr	r0, [r3, #20]
 8008fb0:	f7ff fd16 	bl	80089e0 <__hi0bits>
 8008fb4:	0176      	lsls	r6, r6, #5
 8008fb6:	e7e3      	b.n	8008f80 <__d2b+0x70>
 8008fb8:	08009b88 	.word	0x08009b88
 8008fbc:	08009baa 	.word	0x08009baa
 8008fc0:	0000030f 	.word	0x0000030f
 8008fc4:	fffffbcd 	.word	0xfffffbcd
 8008fc8:	fffffbce 	.word	0xfffffbce
 8008fcc:	3fffffff 	.word	0x3fffffff

08008fd0 <__sread>:
 8008fd0:	b570      	push	{r4, r5, r6, lr}
 8008fd2:	000c      	movs	r4, r1
 8008fd4:	250e      	movs	r5, #14
 8008fd6:	5f49      	ldrsh	r1, [r1, r5]
 8008fd8:	f000 f8ae 	bl	8009138 <_read_r>
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	db03      	blt.n	8008fe8 <__sread+0x18>
 8008fe0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008fe2:	181b      	adds	r3, r3, r0
 8008fe4:	6563      	str	r3, [r4, #84]	@ 0x54
 8008fe6:	bd70      	pop	{r4, r5, r6, pc}
 8008fe8:	89a3      	ldrh	r3, [r4, #12]
 8008fea:	4a02      	ldr	r2, [pc, #8]	@ (8008ff4 <__sread+0x24>)
 8008fec:	4013      	ands	r3, r2
 8008fee:	81a3      	strh	r3, [r4, #12]
 8008ff0:	e7f9      	b.n	8008fe6 <__sread+0x16>
 8008ff2:	46c0      	nop			@ (mov r8, r8)
 8008ff4:	ffffefff 	.word	0xffffefff

08008ff8 <__swrite>:
 8008ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ffa:	001f      	movs	r7, r3
 8008ffc:	898b      	ldrh	r3, [r1, #12]
 8008ffe:	0005      	movs	r5, r0
 8009000:	000c      	movs	r4, r1
 8009002:	0016      	movs	r6, r2
 8009004:	05db      	lsls	r3, r3, #23
 8009006:	d505      	bpl.n	8009014 <__swrite+0x1c>
 8009008:	230e      	movs	r3, #14
 800900a:	5ec9      	ldrsh	r1, [r1, r3]
 800900c:	2200      	movs	r2, #0
 800900e:	2302      	movs	r3, #2
 8009010:	f000 f87e 	bl	8009110 <_lseek_r>
 8009014:	89a3      	ldrh	r3, [r4, #12]
 8009016:	4a05      	ldr	r2, [pc, #20]	@ (800902c <__swrite+0x34>)
 8009018:	0028      	movs	r0, r5
 800901a:	4013      	ands	r3, r2
 800901c:	81a3      	strh	r3, [r4, #12]
 800901e:	0032      	movs	r2, r6
 8009020:	230e      	movs	r3, #14
 8009022:	5ee1      	ldrsh	r1, [r4, r3]
 8009024:	003b      	movs	r3, r7
 8009026:	f000 f8ad 	bl	8009184 <_write_r>
 800902a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800902c:	ffffefff 	.word	0xffffefff

08009030 <__sseek>:
 8009030:	b570      	push	{r4, r5, r6, lr}
 8009032:	000c      	movs	r4, r1
 8009034:	250e      	movs	r5, #14
 8009036:	5f49      	ldrsh	r1, [r1, r5]
 8009038:	f000 f86a 	bl	8009110 <_lseek_r>
 800903c:	89a3      	ldrh	r3, [r4, #12]
 800903e:	1c42      	adds	r2, r0, #1
 8009040:	d103      	bne.n	800904a <__sseek+0x1a>
 8009042:	4a05      	ldr	r2, [pc, #20]	@ (8009058 <__sseek+0x28>)
 8009044:	4013      	ands	r3, r2
 8009046:	81a3      	strh	r3, [r4, #12]
 8009048:	bd70      	pop	{r4, r5, r6, pc}
 800904a:	2280      	movs	r2, #128	@ 0x80
 800904c:	0152      	lsls	r2, r2, #5
 800904e:	4313      	orrs	r3, r2
 8009050:	81a3      	strh	r3, [r4, #12]
 8009052:	6560      	str	r0, [r4, #84]	@ 0x54
 8009054:	e7f8      	b.n	8009048 <__sseek+0x18>
 8009056:	46c0      	nop			@ (mov r8, r8)
 8009058:	ffffefff 	.word	0xffffefff

0800905c <__sclose>:
 800905c:	b510      	push	{r4, lr}
 800905e:	230e      	movs	r3, #14
 8009060:	5ec9      	ldrsh	r1, [r1, r3]
 8009062:	f000 f843 	bl	80090ec <_close_r>
 8009066:	bd10      	pop	{r4, pc}

08009068 <_realloc_r>:
 8009068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800906a:	0006      	movs	r6, r0
 800906c:	000c      	movs	r4, r1
 800906e:	0015      	movs	r5, r2
 8009070:	2900      	cmp	r1, #0
 8009072:	d105      	bne.n	8009080 <_realloc_r+0x18>
 8009074:	0011      	movs	r1, r2
 8009076:	f7ff fac5 	bl	8008604 <_malloc_r>
 800907a:	0004      	movs	r4, r0
 800907c:	0020      	movs	r0, r4
 800907e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009080:	2a00      	cmp	r2, #0
 8009082:	d103      	bne.n	800908c <_realloc_r+0x24>
 8009084:	f000 f8e8 	bl	8009258 <_free_r>
 8009088:	2400      	movs	r4, #0
 800908a:	e7f7      	b.n	800907c <_realloc_r+0x14>
 800908c:	f000 f940 	bl	8009310 <_malloc_usable_size_r>
 8009090:	0007      	movs	r7, r0
 8009092:	4285      	cmp	r5, r0
 8009094:	d802      	bhi.n	800909c <_realloc_r+0x34>
 8009096:	0843      	lsrs	r3, r0, #1
 8009098:	42ab      	cmp	r3, r5
 800909a:	d3ef      	bcc.n	800907c <_realloc_r+0x14>
 800909c:	0029      	movs	r1, r5
 800909e:	0030      	movs	r0, r6
 80090a0:	f7ff fab0 	bl	8008604 <_malloc_r>
 80090a4:	9001      	str	r0, [sp, #4]
 80090a6:	2800      	cmp	r0, #0
 80090a8:	d0ee      	beq.n	8009088 <_realloc_r+0x20>
 80090aa:	002a      	movs	r2, r5
 80090ac:	42bd      	cmp	r5, r7
 80090ae:	d900      	bls.n	80090b2 <_realloc_r+0x4a>
 80090b0:	003a      	movs	r2, r7
 80090b2:	0021      	movs	r1, r4
 80090b4:	9801      	ldr	r0, [sp, #4]
 80090b6:	f000 f879 	bl	80091ac <memcpy>
 80090ba:	0021      	movs	r1, r4
 80090bc:	0030      	movs	r0, r6
 80090be:	f000 f8cb 	bl	8009258 <_free_r>
 80090c2:	9c01      	ldr	r4, [sp, #4]
 80090c4:	e7da      	b.n	800907c <_realloc_r+0x14>

080090c6 <memmove>:
 80090c6:	b510      	push	{r4, lr}
 80090c8:	4288      	cmp	r0, r1
 80090ca:	d806      	bhi.n	80090da <memmove+0x14>
 80090cc:	2300      	movs	r3, #0
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d008      	beq.n	80090e4 <memmove+0x1e>
 80090d2:	5ccc      	ldrb	r4, [r1, r3]
 80090d4:	54c4      	strb	r4, [r0, r3]
 80090d6:	3301      	adds	r3, #1
 80090d8:	e7f9      	b.n	80090ce <memmove+0x8>
 80090da:	188b      	adds	r3, r1, r2
 80090dc:	4298      	cmp	r0, r3
 80090de:	d2f5      	bcs.n	80090cc <memmove+0x6>
 80090e0:	3a01      	subs	r2, #1
 80090e2:	d200      	bcs.n	80090e6 <memmove+0x20>
 80090e4:	bd10      	pop	{r4, pc}
 80090e6:	5c8b      	ldrb	r3, [r1, r2]
 80090e8:	5483      	strb	r3, [r0, r2]
 80090ea:	e7f9      	b.n	80090e0 <memmove+0x1a>

080090ec <_close_r>:
 80090ec:	2300      	movs	r3, #0
 80090ee:	b570      	push	{r4, r5, r6, lr}
 80090f0:	4d06      	ldr	r5, [pc, #24]	@ (800910c <_close_r+0x20>)
 80090f2:	0004      	movs	r4, r0
 80090f4:	0008      	movs	r0, r1
 80090f6:	602b      	str	r3, [r5, #0]
 80090f8:	f7fa fda3 	bl	8003c42 <_close>
 80090fc:	1c43      	adds	r3, r0, #1
 80090fe:	d103      	bne.n	8009108 <_close_r+0x1c>
 8009100:	682b      	ldr	r3, [r5, #0]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d000      	beq.n	8009108 <_close_r+0x1c>
 8009106:	6023      	str	r3, [r4, #0]
 8009108:	bd70      	pop	{r4, r5, r6, pc}
 800910a:	46c0      	nop			@ (mov r8, r8)
 800910c:	20000560 	.word	0x20000560

08009110 <_lseek_r>:
 8009110:	b570      	push	{r4, r5, r6, lr}
 8009112:	0004      	movs	r4, r0
 8009114:	0008      	movs	r0, r1
 8009116:	0011      	movs	r1, r2
 8009118:	001a      	movs	r2, r3
 800911a:	2300      	movs	r3, #0
 800911c:	4d05      	ldr	r5, [pc, #20]	@ (8009134 <_lseek_r+0x24>)
 800911e:	602b      	str	r3, [r5, #0]
 8009120:	f7fa fdb0 	bl	8003c84 <_lseek>
 8009124:	1c43      	adds	r3, r0, #1
 8009126:	d103      	bne.n	8009130 <_lseek_r+0x20>
 8009128:	682b      	ldr	r3, [r5, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d000      	beq.n	8009130 <_lseek_r+0x20>
 800912e:	6023      	str	r3, [r4, #0]
 8009130:	bd70      	pop	{r4, r5, r6, pc}
 8009132:	46c0      	nop			@ (mov r8, r8)
 8009134:	20000560 	.word	0x20000560

08009138 <_read_r>:
 8009138:	b570      	push	{r4, r5, r6, lr}
 800913a:	0004      	movs	r4, r0
 800913c:	0008      	movs	r0, r1
 800913e:	0011      	movs	r1, r2
 8009140:	001a      	movs	r2, r3
 8009142:	2300      	movs	r3, #0
 8009144:	4d05      	ldr	r5, [pc, #20]	@ (800915c <_read_r+0x24>)
 8009146:	602b      	str	r3, [r5, #0]
 8009148:	f7fa fd42 	bl	8003bd0 <_read>
 800914c:	1c43      	adds	r3, r0, #1
 800914e:	d103      	bne.n	8009158 <_read_r+0x20>
 8009150:	682b      	ldr	r3, [r5, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d000      	beq.n	8009158 <_read_r+0x20>
 8009156:	6023      	str	r3, [r4, #0]
 8009158:	bd70      	pop	{r4, r5, r6, pc}
 800915a:	46c0      	nop			@ (mov r8, r8)
 800915c:	20000560 	.word	0x20000560

08009160 <_sbrk_r>:
 8009160:	2300      	movs	r3, #0
 8009162:	b570      	push	{r4, r5, r6, lr}
 8009164:	4d06      	ldr	r5, [pc, #24]	@ (8009180 <_sbrk_r+0x20>)
 8009166:	0004      	movs	r4, r0
 8009168:	0008      	movs	r0, r1
 800916a:	602b      	str	r3, [r5, #0]
 800916c:	f7fa fd96 	bl	8003c9c <_sbrk>
 8009170:	1c43      	adds	r3, r0, #1
 8009172:	d103      	bne.n	800917c <_sbrk_r+0x1c>
 8009174:	682b      	ldr	r3, [r5, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d000      	beq.n	800917c <_sbrk_r+0x1c>
 800917a:	6023      	str	r3, [r4, #0]
 800917c:	bd70      	pop	{r4, r5, r6, pc}
 800917e:	46c0      	nop			@ (mov r8, r8)
 8009180:	20000560 	.word	0x20000560

08009184 <_write_r>:
 8009184:	b570      	push	{r4, r5, r6, lr}
 8009186:	0004      	movs	r4, r0
 8009188:	0008      	movs	r0, r1
 800918a:	0011      	movs	r1, r2
 800918c:	001a      	movs	r2, r3
 800918e:	2300      	movs	r3, #0
 8009190:	4d05      	ldr	r5, [pc, #20]	@ (80091a8 <_write_r+0x24>)
 8009192:	602b      	str	r3, [r5, #0]
 8009194:	f7fa fd39 	bl	8003c0a <_write>
 8009198:	1c43      	adds	r3, r0, #1
 800919a:	d103      	bne.n	80091a4 <_write_r+0x20>
 800919c:	682b      	ldr	r3, [r5, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d000      	beq.n	80091a4 <_write_r+0x20>
 80091a2:	6023      	str	r3, [r4, #0]
 80091a4:	bd70      	pop	{r4, r5, r6, pc}
 80091a6:	46c0      	nop			@ (mov r8, r8)
 80091a8:	20000560 	.word	0x20000560

080091ac <memcpy>:
 80091ac:	2300      	movs	r3, #0
 80091ae:	b510      	push	{r4, lr}
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d100      	bne.n	80091b6 <memcpy+0xa>
 80091b4:	bd10      	pop	{r4, pc}
 80091b6:	5ccc      	ldrb	r4, [r1, r3]
 80091b8:	54c4      	strb	r4, [r0, r3]
 80091ba:	3301      	adds	r3, #1
 80091bc:	e7f8      	b.n	80091b0 <memcpy+0x4>
	...

080091c0 <__assert_func>:
 80091c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80091c2:	0014      	movs	r4, r2
 80091c4:	001a      	movs	r2, r3
 80091c6:	4b09      	ldr	r3, [pc, #36]	@ (80091ec <__assert_func+0x2c>)
 80091c8:	0005      	movs	r5, r0
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	000e      	movs	r6, r1
 80091ce:	68d8      	ldr	r0, [r3, #12]
 80091d0:	4b07      	ldr	r3, [pc, #28]	@ (80091f0 <__assert_func+0x30>)
 80091d2:	2c00      	cmp	r4, #0
 80091d4:	d101      	bne.n	80091da <__assert_func+0x1a>
 80091d6:	4b07      	ldr	r3, [pc, #28]	@ (80091f4 <__assert_func+0x34>)
 80091d8:	001c      	movs	r4, r3
 80091da:	4907      	ldr	r1, [pc, #28]	@ (80091f8 <__assert_func+0x38>)
 80091dc:	9301      	str	r3, [sp, #4]
 80091de:	9402      	str	r4, [sp, #8]
 80091e0:	002b      	movs	r3, r5
 80091e2:	9600      	str	r6, [sp, #0]
 80091e4:	f000 f89c 	bl	8009320 <fiprintf>
 80091e8:	f000 f8b7 	bl	800935a <abort>
 80091ec:	20000018 	.word	0x20000018
 80091f0:	08009e0b 	.word	0x08009e0b
 80091f4:	08009e46 	.word	0x08009e46
 80091f8:	08009e18 	.word	0x08009e18

080091fc <_calloc_r>:
 80091fc:	b570      	push	{r4, r5, r6, lr}
 80091fe:	0c0b      	lsrs	r3, r1, #16
 8009200:	0c15      	lsrs	r5, r2, #16
 8009202:	2b00      	cmp	r3, #0
 8009204:	d11e      	bne.n	8009244 <_calloc_r+0x48>
 8009206:	2d00      	cmp	r5, #0
 8009208:	d10c      	bne.n	8009224 <_calloc_r+0x28>
 800920a:	b289      	uxth	r1, r1
 800920c:	b294      	uxth	r4, r2
 800920e:	434c      	muls	r4, r1
 8009210:	0021      	movs	r1, r4
 8009212:	f7ff f9f7 	bl	8008604 <_malloc_r>
 8009216:	1e05      	subs	r5, r0, #0
 8009218:	d01a      	beq.n	8009250 <_calloc_r+0x54>
 800921a:	0022      	movs	r2, r4
 800921c:	2100      	movs	r1, #0
 800921e:	f7fe f9a1 	bl	8007564 <memset>
 8009222:	e016      	b.n	8009252 <_calloc_r+0x56>
 8009224:	1c2b      	adds	r3, r5, #0
 8009226:	1c0c      	adds	r4, r1, #0
 8009228:	b289      	uxth	r1, r1
 800922a:	b292      	uxth	r2, r2
 800922c:	434a      	muls	r2, r1
 800922e:	b29b      	uxth	r3, r3
 8009230:	b2a1      	uxth	r1, r4
 8009232:	4359      	muls	r1, r3
 8009234:	0c14      	lsrs	r4, r2, #16
 8009236:	190c      	adds	r4, r1, r4
 8009238:	0c23      	lsrs	r3, r4, #16
 800923a:	d107      	bne.n	800924c <_calloc_r+0x50>
 800923c:	0424      	lsls	r4, r4, #16
 800923e:	b292      	uxth	r2, r2
 8009240:	4314      	orrs	r4, r2
 8009242:	e7e5      	b.n	8009210 <_calloc_r+0x14>
 8009244:	2d00      	cmp	r5, #0
 8009246:	d101      	bne.n	800924c <_calloc_r+0x50>
 8009248:	1c14      	adds	r4, r2, #0
 800924a:	e7ed      	b.n	8009228 <_calloc_r+0x2c>
 800924c:	230c      	movs	r3, #12
 800924e:	6003      	str	r3, [r0, #0]
 8009250:	2500      	movs	r5, #0
 8009252:	0028      	movs	r0, r5
 8009254:	bd70      	pop	{r4, r5, r6, pc}
	...

08009258 <_free_r>:
 8009258:	b570      	push	{r4, r5, r6, lr}
 800925a:	0005      	movs	r5, r0
 800925c:	1e0c      	subs	r4, r1, #0
 800925e:	d010      	beq.n	8009282 <_free_r+0x2a>
 8009260:	3c04      	subs	r4, #4
 8009262:	6823      	ldr	r3, [r4, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	da00      	bge.n	800926a <_free_r+0x12>
 8009268:	18e4      	adds	r4, r4, r3
 800926a:	0028      	movs	r0, r5
 800926c:	f7ff fafc 	bl	8008868 <__malloc_lock>
 8009270:	4a1d      	ldr	r2, [pc, #116]	@ (80092e8 <_free_r+0x90>)
 8009272:	6813      	ldr	r3, [r2, #0]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d105      	bne.n	8009284 <_free_r+0x2c>
 8009278:	6063      	str	r3, [r4, #4]
 800927a:	6014      	str	r4, [r2, #0]
 800927c:	0028      	movs	r0, r5
 800927e:	f7ff fafb 	bl	8008878 <__malloc_unlock>
 8009282:	bd70      	pop	{r4, r5, r6, pc}
 8009284:	42a3      	cmp	r3, r4
 8009286:	d908      	bls.n	800929a <_free_r+0x42>
 8009288:	6820      	ldr	r0, [r4, #0]
 800928a:	1821      	adds	r1, r4, r0
 800928c:	428b      	cmp	r3, r1
 800928e:	d1f3      	bne.n	8009278 <_free_r+0x20>
 8009290:	6819      	ldr	r1, [r3, #0]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	1809      	adds	r1, r1, r0
 8009296:	6021      	str	r1, [r4, #0]
 8009298:	e7ee      	b.n	8009278 <_free_r+0x20>
 800929a:	001a      	movs	r2, r3
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d001      	beq.n	80092a6 <_free_r+0x4e>
 80092a2:	42a3      	cmp	r3, r4
 80092a4:	d9f9      	bls.n	800929a <_free_r+0x42>
 80092a6:	6811      	ldr	r1, [r2, #0]
 80092a8:	1850      	adds	r0, r2, r1
 80092aa:	42a0      	cmp	r0, r4
 80092ac:	d10b      	bne.n	80092c6 <_free_r+0x6e>
 80092ae:	6820      	ldr	r0, [r4, #0]
 80092b0:	1809      	adds	r1, r1, r0
 80092b2:	1850      	adds	r0, r2, r1
 80092b4:	6011      	str	r1, [r2, #0]
 80092b6:	4283      	cmp	r3, r0
 80092b8:	d1e0      	bne.n	800927c <_free_r+0x24>
 80092ba:	6818      	ldr	r0, [r3, #0]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	1841      	adds	r1, r0, r1
 80092c0:	6011      	str	r1, [r2, #0]
 80092c2:	6053      	str	r3, [r2, #4]
 80092c4:	e7da      	b.n	800927c <_free_r+0x24>
 80092c6:	42a0      	cmp	r0, r4
 80092c8:	d902      	bls.n	80092d0 <_free_r+0x78>
 80092ca:	230c      	movs	r3, #12
 80092cc:	602b      	str	r3, [r5, #0]
 80092ce:	e7d5      	b.n	800927c <_free_r+0x24>
 80092d0:	6820      	ldr	r0, [r4, #0]
 80092d2:	1821      	adds	r1, r4, r0
 80092d4:	428b      	cmp	r3, r1
 80092d6:	d103      	bne.n	80092e0 <_free_r+0x88>
 80092d8:	6819      	ldr	r1, [r3, #0]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	1809      	adds	r1, r1, r0
 80092de:	6021      	str	r1, [r4, #0]
 80092e0:	6063      	str	r3, [r4, #4]
 80092e2:	6054      	str	r4, [r2, #4]
 80092e4:	e7ca      	b.n	800927c <_free_r+0x24>
 80092e6:	46c0      	nop			@ (mov r8, r8)
 80092e8:	2000055c 	.word	0x2000055c

080092ec <__ascii_mbtowc>:
 80092ec:	b082      	sub	sp, #8
 80092ee:	2900      	cmp	r1, #0
 80092f0:	d100      	bne.n	80092f4 <__ascii_mbtowc+0x8>
 80092f2:	a901      	add	r1, sp, #4
 80092f4:	1e10      	subs	r0, r2, #0
 80092f6:	d006      	beq.n	8009306 <__ascii_mbtowc+0x1a>
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d006      	beq.n	800930a <__ascii_mbtowc+0x1e>
 80092fc:	7813      	ldrb	r3, [r2, #0]
 80092fe:	600b      	str	r3, [r1, #0]
 8009300:	7810      	ldrb	r0, [r2, #0]
 8009302:	1e43      	subs	r3, r0, #1
 8009304:	4198      	sbcs	r0, r3
 8009306:	b002      	add	sp, #8
 8009308:	4770      	bx	lr
 800930a:	2002      	movs	r0, #2
 800930c:	4240      	negs	r0, r0
 800930e:	e7fa      	b.n	8009306 <__ascii_mbtowc+0x1a>

08009310 <_malloc_usable_size_r>:
 8009310:	1f0b      	subs	r3, r1, #4
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	1f18      	subs	r0, r3, #4
 8009316:	2b00      	cmp	r3, #0
 8009318:	da01      	bge.n	800931e <_malloc_usable_size_r+0xe>
 800931a:	580b      	ldr	r3, [r1, r0]
 800931c:	18c0      	adds	r0, r0, r3
 800931e:	4770      	bx	lr

08009320 <fiprintf>:
 8009320:	b40e      	push	{r1, r2, r3}
 8009322:	b517      	push	{r0, r1, r2, r4, lr}
 8009324:	4c05      	ldr	r4, [pc, #20]	@ (800933c <fiprintf+0x1c>)
 8009326:	ab05      	add	r3, sp, #20
 8009328:	cb04      	ldmia	r3!, {r2}
 800932a:	0001      	movs	r1, r0
 800932c:	6820      	ldr	r0, [r4, #0]
 800932e:	9301      	str	r3, [sp, #4]
 8009330:	f000 f842 	bl	80093b8 <_vfiprintf_r>
 8009334:	bc1e      	pop	{r1, r2, r3, r4}
 8009336:	bc08      	pop	{r3}
 8009338:	b003      	add	sp, #12
 800933a:	4718      	bx	r3
 800933c:	20000018 	.word	0x20000018

08009340 <__ascii_wctomb>:
 8009340:	0003      	movs	r3, r0
 8009342:	1e08      	subs	r0, r1, #0
 8009344:	d005      	beq.n	8009352 <__ascii_wctomb+0x12>
 8009346:	2aff      	cmp	r2, #255	@ 0xff
 8009348:	d904      	bls.n	8009354 <__ascii_wctomb+0x14>
 800934a:	228a      	movs	r2, #138	@ 0x8a
 800934c:	2001      	movs	r0, #1
 800934e:	601a      	str	r2, [r3, #0]
 8009350:	4240      	negs	r0, r0
 8009352:	4770      	bx	lr
 8009354:	2001      	movs	r0, #1
 8009356:	700a      	strb	r2, [r1, #0]
 8009358:	e7fb      	b.n	8009352 <__ascii_wctomb+0x12>

0800935a <abort>:
 800935a:	2006      	movs	r0, #6
 800935c:	b510      	push	{r4, lr}
 800935e:	f000 faa1 	bl	80098a4 <raise>
 8009362:	2001      	movs	r0, #1
 8009364:	f7fa fc27 	bl	8003bb6 <_exit>

08009368 <__sfputc_r>:
 8009368:	6893      	ldr	r3, [r2, #8]
 800936a:	b510      	push	{r4, lr}
 800936c:	3b01      	subs	r3, #1
 800936e:	6093      	str	r3, [r2, #8]
 8009370:	2b00      	cmp	r3, #0
 8009372:	da04      	bge.n	800937e <__sfputc_r+0x16>
 8009374:	6994      	ldr	r4, [r2, #24]
 8009376:	42a3      	cmp	r3, r4
 8009378:	db07      	blt.n	800938a <__sfputc_r+0x22>
 800937a:	290a      	cmp	r1, #10
 800937c:	d005      	beq.n	800938a <__sfputc_r+0x22>
 800937e:	6813      	ldr	r3, [r2, #0]
 8009380:	1c58      	adds	r0, r3, #1
 8009382:	6010      	str	r0, [r2, #0]
 8009384:	7019      	strb	r1, [r3, #0]
 8009386:	0008      	movs	r0, r1
 8009388:	bd10      	pop	{r4, pc}
 800938a:	f000 f931 	bl	80095f0 <__swbuf_r>
 800938e:	0001      	movs	r1, r0
 8009390:	e7f9      	b.n	8009386 <__sfputc_r+0x1e>

08009392 <__sfputs_r>:
 8009392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009394:	0006      	movs	r6, r0
 8009396:	000f      	movs	r7, r1
 8009398:	0014      	movs	r4, r2
 800939a:	18d5      	adds	r5, r2, r3
 800939c:	42ac      	cmp	r4, r5
 800939e:	d101      	bne.n	80093a4 <__sfputs_r+0x12>
 80093a0:	2000      	movs	r0, #0
 80093a2:	e007      	b.n	80093b4 <__sfputs_r+0x22>
 80093a4:	7821      	ldrb	r1, [r4, #0]
 80093a6:	003a      	movs	r2, r7
 80093a8:	0030      	movs	r0, r6
 80093aa:	f7ff ffdd 	bl	8009368 <__sfputc_r>
 80093ae:	3401      	adds	r4, #1
 80093b0:	1c43      	adds	r3, r0, #1
 80093b2:	d1f3      	bne.n	800939c <__sfputs_r+0xa>
 80093b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080093b8 <_vfiprintf_r>:
 80093b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093ba:	b0a1      	sub	sp, #132	@ 0x84
 80093bc:	000f      	movs	r7, r1
 80093be:	0015      	movs	r5, r2
 80093c0:	001e      	movs	r6, r3
 80093c2:	9003      	str	r0, [sp, #12]
 80093c4:	2800      	cmp	r0, #0
 80093c6:	d004      	beq.n	80093d2 <_vfiprintf_r+0x1a>
 80093c8:	6a03      	ldr	r3, [r0, #32]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d101      	bne.n	80093d2 <_vfiprintf_r+0x1a>
 80093ce:	f7fe f895 	bl	80074fc <__sinit>
 80093d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093d4:	07db      	lsls	r3, r3, #31
 80093d6:	d405      	bmi.n	80093e4 <_vfiprintf_r+0x2c>
 80093d8:	89bb      	ldrh	r3, [r7, #12]
 80093da:	059b      	lsls	r3, r3, #22
 80093dc:	d402      	bmi.n	80093e4 <_vfiprintf_r+0x2c>
 80093de:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80093e0:	f7fe f8f7 	bl	80075d2 <__retarget_lock_acquire_recursive>
 80093e4:	89bb      	ldrh	r3, [r7, #12]
 80093e6:	071b      	lsls	r3, r3, #28
 80093e8:	d502      	bpl.n	80093f0 <_vfiprintf_r+0x38>
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d113      	bne.n	8009418 <_vfiprintf_r+0x60>
 80093f0:	0039      	movs	r1, r7
 80093f2:	9803      	ldr	r0, [sp, #12]
 80093f4:	f000 f93e 	bl	8009674 <__swsetup_r>
 80093f8:	2800      	cmp	r0, #0
 80093fa:	d00d      	beq.n	8009418 <_vfiprintf_r+0x60>
 80093fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093fe:	07db      	lsls	r3, r3, #31
 8009400:	d503      	bpl.n	800940a <_vfiprintf_r+0x52>
 8009402:	2001      	movs	r0, #1
 8009404:	4240      	negs	r0, r0
 8009406:	b021      	add	sp, #132	@ 0x84
 8009408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800940a:	89bb      	ldrh	r3, [r7, #12]
 800940c:	059b      	lsls	r3, r3, #22
 800940e:	d4f8      	bmi.n	8009402 <_vfiprintf_r+0x4a>
 8009410:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009412:	f7fe f8df 	bl	80075d4 <__retarget_lock_release_recursive>
 8009416:	e7f4      	b.n	8009402 <_vfiprintf_r+0x4a>
 8009418:	2300      	movs	r3, #0
 800941a:	ac08      	add	r4, sp, #32
 800941c:	6163      	str	r3, [r4, #20]
 800941e:	3320      	adds	r3, #32
 8009420:	7663      	strb	r3, [r4, #25]
 8009422:	3310      	adds	r3, #16
 8009424:	76a3      	strb	r3, [r4, #26]
 8009426:	9607      	str	r6, [sp, #28]
 8009428:	002e      	movs	r6, r5
 800942a:	7833      	ldrb	r3, [r6, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d001      	beq.n	8009434 <_vfiprintf_r+0x7c>
 8009430:	2b25      	cmp	r3, #37	@ 0x25
 8009432:	d148      	bne.n	80094c6 <_vfiprintf_r+0x10e>
 8009434:	1b73      	subs	r3, r6, r5
 8009436:	9305      	str	r3, [sp, #20]
 8009438:	42ae      	cmp	r6, r5
 800943a:	d00b      	beq.n	8009454 <_vfiprintf_r+0x9c>
 800943c:	002a      	movs	r2, r5
 800943e:	0039      	movs	r1, r7
 8009440:	9803      	ldr	r0, [sp, #12]
 8009442:	f7ff ffa6 	bl	8009392 <__sfputs_r>
 8009446:	3001      	adds	r0, #1
 8009448:	d100      	bne.n	800944c <_vfiprintf_r+0x94>
 800944a:	e0ae      	b.n	80095aa <_vfiprintf_r+0x1f2>
 800944c:	6963      	ldr	r3, [r4, #20]
 800944e:	9a05      	ldr	r2, [sp, #20]
 8009450:	189b      	adds	r3, r3, r2
 8009452:	6163      	str	r3, [r4, #20]
 8009454:	7833      	ldrb	r3, [r6, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d100      	bne.n	800945c <_vfiprintf_r+0xa4>
 800945a:	e0a6      	b.n	80095aa <_vfiprintf_r+0x1f2>
 800945c:	2201      	movs	r2, #1
 800945e:	2300      	movs	r3, #0
 8009460:	4252      	negs	r2, r2
 8009462:	6062      	str	r2, [r4, #4]
 8009464:	a904      	add	r1, sp, #16
 8009466:	3254      	adds	r2, #84	@ 0x54
 8009468:	1852      	adds	r2, r2, r1
 800946a:	1c75      	adds	r5, r6, #1
 800946c:	6023      	str	r3, [r4, #0]
 800946e:	60e3      	str	r3, [r4, #12]
 8009470:	60a3      	str	r3, [r4, #8]
 8009472:	7013      	strb	r3, [r2, #0]
 8009474:	65a3      	str	r3, [r4, #88]	@ 0x58
 8009476:	4b59      	ldr	r3, [pc, #356]	@ (80095dc <_vfiprintf_r+0x224>)
 8009478:	2205      	movs	r2, #5
 800947a:	0018      	movs	r0, r3
 800947c:	7829      	ldrb	r1, [r5, #0]
 800947e:	9305      	str	r3, [sp, #20]
 8009480:	f7fe f8a9 	bl	80075d6 <memchr>
 8009484:	1c6e      	adds	r6, r5, #1
 8009486:	2800      	cmp	r0, #0
 8009488:	d11f      	bne.n	80094ca <_vfiprintf_r+0x112>
 800948a:	6822      	ldr	r2, [r4, #0]
 800948c:	06d3      	lsls	r3, r2, #27
 800948e:	d504      	bpl.n	800949a <_vfiprintf_r+0xe2>
 8009490:	2353      	movs	r3, #83	@ 0x53
 8009492:	a904      	add	r1, sp, #16
 8009494:	185b      	adds	r3, r3, r1
 8009496:	2120      	movs	r1, #32
 8009498:	7019      	strb	r1, [r3, #0]
 800949a:	0713      	lsls	r3, r2, #28
 800949c:	d504      	bpl.n	80094a8 <_vfiprintf_r+0xf0>
 800949e:	2353      	movs	r3, #83	@ 0x53
 80094a0:	a904      	add	r1, sp, #16
 80094a2:	185b      	adds	r3, r3, r1
 80094a4:	212b      	movs	r1, #43	@ 0x2b
 80094a6:	7019      	strb	r1, [r3, #0]
 80094a8:	782b      	ldrb	r3, [r5, #0]
 80094aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80094ac:	d016      	beq.n	80094dc <_vfiprintf_r+0x124>
 80094ae:	002e      	movs	r6, r5
 80094b0:	2100      	movs	r1, #0
 80094b2:	200a      	movs	r0, #10
 80094b4:	68e3      	ldr	r3, [r4, #12]
 80094b6:	7832      	ldrb	r2, [r6, #0]
 80094b8:	1c75      	adds	r5, r6, #1
 80094ba:	3a30      	subs	r2, #48	@ 0x30
 80094bc:	2a09      	cmp	r2, #9
 80094be:	d950      	bls.n	8009562 <_vfiprintf_r+0x1aa>
 80094c0:	2900      	cmp	r1, #0
 80094c2:	d111      	bne.n	80094e8 <_vfiprintf_r+0x130>
 80094c4:	e017      	b.n	80094f6 <_vfiprintf_r+0x13e>
 80094c6:	3601      	adds	r6, #1
 80094c8:	e7af      	b.n	800942a <_vfiprintf_r+0x72>
 80094ca:	9b05      	ldr	r3, [sp, #20]
 80094cc:	6822      	ldr	r2, [r4, #0]
 80094ce:	1ac0      	subs	r0, r0, r3
 80094d0:	2301      	movs	r3, #1
 80094d2:	4083      	lsls	r3, r0
 80094d4:	4313      	orrs	r3, r2
 80094d6:	0035      	movs	r5, r6
 80094d8:	6023      	str	r3, [r4, #0]
 80094da:	e7cc      	b.n	8009476 <_vfiprintf_r+0xbe>
 80094dc:	9b07      	ldr	r3, [sp, #28]
 80094de:	1d19      	adds	r1, r3, #4
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	9107      	str	r1, [sp, #28]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	db01      	blt.n	80094ec <_vfiprintf_r+0x134>
 80094e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80094ea:	e004      	b.n	80094f6 <_vfiprintf_r+0x13e>
 80094ec:	425b      	negs	r3, r3
 80094ee:	60e3      	str	r3, [r4, #12]
 80094f0:	2302      	movs	r3, #2
 80094f2:	4313      	orrs	r3, r2
 80094f4:	6023      	str	r3, [r4, #0]
 80094f6:	7833      	ldrb	r3, [r6, #0]
 80094f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80094fa:	d10c      	bne.n	8009516 <_vfiprintf_r+0x15e>
 80094fc:	7873      	ldrb	r3, [r6, #1]
 80094fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009500:	d134      	bne.n	800956c <_vfiprintf_r+0x1b4>
 8009502:	9b07      	ldr	r3, [sp, #28]
 8009504:	3602      	adds	r6, #2
 8009506:	1d1a      	adds	r2, r3, #4
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	9207      	str	r2, [sp, #28]
 800950c:	2b00      	cmp	r3, #0
 800950e:	da01      	bge.n	8009514 <_vfiprintf_r+0x15c>
 8009510:	2301      	movs	r3, #1
 8009512:	425b      	negs	r3, r3
 8009514:	9309      	str	r3, [sp, #36]	@ 0x24
 8009516:	4d32      	ldr	r5, [pc, #200]	@ (80095e0 <_vfiprintf_r+0x228>)
 8009518:	2203      	movs	r2, #3
 800951a:	0028      	movs	r0, r5
 800951c:	7831      	ldrb	r1, [r6, #0]
 800951e:	f7fe f85a 	bl	80075d6 <memchr>
 8009522:	2800      	cmp	r0, #0
 8009524:	d006      	beq.n	8009534 <_vfiprintf_r+0x17c>
 8009526:	2340      	movs	r3, #64	@ 0x40
 8009528:	1b40      	subs	r0, r0, r5
 800952a:	4083      	lsls	r3, r0
 800952c:	6822      	ldr	r2, [r4, #0]
 800952e:	3601      	adds	r6, #1
 8009530:	4313      	orrs	r3, r2
 8009532:	6023      	str	r3, [r4, #0]
 8009534:	7831      	ldrb	r1, [r6, #0]
 8009536:	2206      	movs	r2, #6
 8009538:	482a      	ldr	r0, [pc, #168]	@ (80095e4 <_vfiprintf_r+0x22c>)
 800953a:	1c75      	adds	r5, r6, #1
 800953c:	7621      	strb	r1, [r4, #24]
 800953e:	f7fe f84a 	bl	80075d6 <memchr>
 8009542:	2800      	cmp	r0, #0
 8009544:	d040      	beq.n	80095c8 <_vfiprintf_r+0x210>
 8009546:	4b28      	ldr	r3, [pc, #160]	@ (80095e8 <_vfiprintf_r+0x230>)
 8009548:	2b00      	cmp	r3, #0
 800954a:	d122      	bne.n	8009592 <_vfiprintf_r+0x1da>
 800954c:	2207      	movs	r2, #7
 800954e:	9b07      	ldr	r3, [sp, #28]
 8009550:	3307      	adds	r3, #7
 8009552:	4393      	bics	r3, r2
 8009554:	3308      	adds	r3, #8
 8009556:	9307      	str	r3, [sp, #28]
 8009558:	6963      	ldr	r3, [r4, #20]
 800955a:	9a04      	ldr	r2, [sp, #16]
 800955c:	189b      	adds	r3, r3, r2
 800955e:	6163      	str	r3, [r4, #20]
 8009560:	e762      	b.n	8009428 <_vfiprintf_r+0x70>
 8009562:	4343      	muls	r3, r0
 8009564:	002e      	movs	r6, r5
 8009566:	2101      	movs	r1, #1
 8009568:	189b      	adds	r3, r3, r2
 800956a:	e7a4      	b.n	80094b6 <_vfiprintf_r+0xfe>
 800956c:	2300      	movs	r3, #0
 800956e:	200a      	movs	r0, #10
 8009570:	0019      	movs	r1, r3
 8009572:	3601      	adds	r6, #1
 8009574:	6063      	str	r3, [r4, #4]
 8009576:	7832      	ldrb	r2, [r6, #0]
 8009578:	1c75      	adds	r5, r6, #1
 800957a:	3a30      	subs	r2, #48	@ 0x30
 800957c:	2a09      	cmp	r2, #9
 800957e:	d903      	bls.n	8009588 <_vfiprintf_r+0x1d0>
 8009580:	2b00      	cmp	r3, #0
 8009582:	d0c8      	beq.n	8009516 <_vfiprintf_r+0x15e>
 8009584:	9109      	str	r1, [sp, #36]	@ 0x24
 8009586:	e7c6      	b.n	8009516 <_vfiprintf_r+0x15e>
 8009588:	4341      	muls	r1, r0
 800958a:	002e      	movs	r6, r5
 800958c:	2301      	movs	r3, #1
 800958e:	1889      	adds	r1, r1, r2
 8009590:	e7f1      	b.n	8009576 <_vfiprintf_r+0x1be>
 8009592:	aa07      	add	r2, sp, #28
 8009594:	9200      	str	r2, [sp, #0]
 8009596:	0021      	movs	r1, r4
 8009598:	003a      	movs	r2, r7
 800959a:	4b14      	ldr	r3, [pc, #80]	@ (80095ec <_vfiprintf_r+0x234>)
 800959c:	9803      	ldr	r0, [sp, #12]
 800959e:	f7fd fb41 	bl	8006c24 <_printf_float>
 80095a2:	9004      	str	r0, [sp, #16]
 80095a4:	9b04      	ldr	r3, [sp, #16]
 80095a6:	3301      	adds	r3, #1
 80095a8:	d1d6      	bne.n	8009558 <_vfiprintf_r+0x1a0>
 80095aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80095ac:	07db      	lsls	r3, r3, #31
 80095ae:	d405      	bmi.n	80095bc <_vfiprintf_r+0x204>
 80095b0:	89bb      	ldrh	r3, [r7, #12]
 80095b2:	059b      	lsls	r3, r3, #22
 80095b4:	d402      	bmi.n	80095bc <_vfiprintf_r+0x204>
 80095b6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80095b8:	f7fe f80c 	bl	80075d4 <__retarget_lock_release_recursive>
 80095bc:	89bb      	ldrh	r3, [r7, #12]
 80095be:	065b      	lsls	r3, r3, #25
 80095c0:	d500      	bpl.n	80095c4 <_vfiprintf_r+0x20c>
 80095c2:	e71e      	b.n	8009402 <_vfiprintf_r+0x4a>
 80095c4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80095c6:	e71e      	b.n	8009406 <_vfiprintf_r+0x4e>
 80095c8:	aa07      	add	r2, sp, #28
 80095ca:	9200      	str	r2, [sp, #0]
 80095cc:	0021      	movs	r1, r4
 80095ce:	003a      	movs	r2, r7
 80095d0:	4b06      	ldr	r3, [pc, #24]	@ (80095ec <_vfiprintf_r+0x234>)
 80095d2:	9803      	ldr	r0, [sp, #12]
 80095d4:	f7fd fdd4 	bl	8007180 <_printf_i>
 80095d8:	e7e3      	b.n	80095a2 <_vfiprintf_r+0x1ea>
 80095da:	46c0      	nop			@ (mov r8, r8)
 80095dc:	08009b99 	.word	0x08009b99
 80095e0:	08009b9f 	.word	0x08009b9f
 80095e4:	08009ba3 	.word	0x08009ba3
 80095e8:	08006c25 	.word	0x08006c25
 80095ec:	08009393 	.word	0x08009393

080095f0 <__swbuf_r>:
 80095f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095f2:	0006      	movs	r6, r0
 80095f4:	000d      	movs	r5, r1
 80095f6:	0014      	movs	r4, r2
 80095f8:	2800      	cmp	r0, #0
 80095fa:	d004      	beq.n	8009606 <__swbuf_r+0x16>
 80095fc:	6a03      	ldr	r3, [r0, #32]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d101      	bne.n	8009606 <__swbuf_r+0x16>
 8009602:	f7fd ff7b 	bl	80074fc <__sinit>
 8009606:	69a3      	ldr	r3, [r4, #24]
 8009608:	60a3      	str	r3, [r4, #8]
 800960a:	89a3      	ldrh	r3, [r4, #12]
 800960c:	071b      	lsls	r3, r3, #28
 800960e:	d502      	bpl.n	8009616 <__swbuf_r+0x26>
 8009610:	6923      	ldr	r3, [r4, #16]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d109      	bne.n	800962a <__swbuf_r+0x3a>
 8009616:	0021      	movs	r1, r4
 8009618:	0030      	movs	r0, r6
 800961a:	f000 f82b 	bl	8009674 <__swsetup_r>
 800961e:	2800      	cmp	r0, #0
 8009620:	d003      	beq.n	800962a <__swbuf_r+0x3a>
 8009622:	2501      	movs	r5, #1
 8009624:	426d      	negs	r5, r5
 8009626:	0028      	movs	r0, r5
 8009628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800962a:	6923      	ldr	r3, [r4, #16]
 800962c:	6820      	ldr	r0, [r4, #0]
 800962e:	b2ef      	uxtb	r7, r5
 8009630:	1ac0      	subs	r0, r0, r3
 8009632:	6963      	ldr	r3, [r4, #20]
 8009634:	b2ed      	uxtb	r5, r5
 8009636:	4283      	cmp	r3, r0
 8009638:	dc05      	bgt.n	8009646 <__swbuf_r+0x56>
 800963a:	0021      	movs	r1, r4
 800963c:	0030      	movs	r0, r6
 800963e:	f7ff f8e7 	bl	8008810 <_fflush_r>
 8009642:	2800      	cmp	r0, #0
 8009644:	d1ed      	bne.n	8009622 <__swbuf_r+0x32>
 8009646:	68a3      	ldr	r3, [r4, #8]
 8009648:	3001      	adds	r0, #1
 800964a:	3b01      	subs	r3, #1
 800964c:	60a3      	str	r3, [r4, #8]
 800964e:	6823      	ldr	r3, [r4, #0]
 8009650:	1c5a      	adds	r2, r3, #1
 8009652:	6022      	str	r2, [r4, #0]
 8009654:	701f      	strb	r7, [r3, #0]
 8009656:	6963      	ldr	r3, [r4, #20]
 8009658:	4283      	cmp	r3, r0
 800965a:	d004      	beq.n	8009666 <__swbuf_r+0x76>
 800965c:	89a3      	ldrh	r3, [r4, #12]
 800965e:	07db      	lsls	r3, r3, #31
 8009660:	d5e1      	bpl.n	8009626 <__swbuf_r+0x36>
 8009662:	2d0a      	cmp	r5, #10
 8009664:	d1df      	bne.n	8009626 <__swbuf_r+0x36>
 8009666:	0021      	movs	r1, r4
 8009668:	0030      	movs	r0, r6
 800966a:	f7ff f8d1 	bl	8008810 <_fflush_r>
 800966e:	2800      	cmp	r0, #0
 8009670:	d0d9      	beq.n	8009626 <__swbuf_r+0x36>
 8009672:	e7d6      	b.n	8009622 <__swbuf_r+0x32>

08009674 <__swsetup_r>:
 8009674:	4b2d      	ldr	r3, [pc, #180]	@ (800972c <__swsetup_r+0xb8>)
 8009676:	b570      	push	{r4, r5, r6, lr}
 8009678:	0005      	movs	r5, r0
 800967a:	6818      	ldr	r0, [r3, #0]
 800967c:	000c      	movs	r4, r1
 800967e:	2800      	cmp	r0, #0
 8009680:	d004      	beq.n	800968c <__swsetup_r+0x18>
 8009682:	6a03      	ldr	r3, [r0, #32]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d101      	bne.n	800968c <__swsetup_r+0x18>
 8009688:	f7fd ff38 	bl	80074fc <__sinit>
 800968c:	230c      	movs	r3, #12
 800968e:	5ee2      	ldrsh	r2, [r4, r3]
 8009690:	0713      	lsls	r3, r2, #28
 8009692:	d423      	bmi.n	80096dc <__swsetup_r+0x68>
 8009694:	06d3      	lsls	r3, r2, #27
 8009696:	d407      	bmi.n	80096a8 <__swsetup_r+0x34>
 8009698:	2309      	movs	r3, #9
 800969a:	602b      	str	r3, [r5, #0]
 800969c:	2340      	movs	r3, #64	@ 0x40
 800969e:	2001      	movs	r0, #1
 80096a0:	4313      	orrs	r3, r2
 80096a2:	81a3      	strh	r3, [r4, #12]
 80096a4:	4240      	negs	r0, r0
 80096a6:	e03a      	b.n	800971e <__swsetup_r+0xaa>
 80096a8:	0752      	lsls	r2, r2, #29
 80096aa:	d513      	bpl.n	80096d4 <__swsetup_r+0x60>
 80096ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80096ae:	2900      	cmp	r1, #0
 80096b0:	d008      	beq.n	80096c4 <__swsetup_r+0x50>
 80096b2:	0023      	movs	r3, r4
 80096b4:	3344      	adds	r3, #68	@ 0x44
 80096b6:	4299      	cmp	r1, r3
 80096b8:	d002      	beq.n	80096c0 <__swsetup_r+0x4c>
 80096ba:	0028      	movs	r0, r5
 80096bc:	f7ff fdcc 	bl	8009258 <_free_r>
 80096c0:	2300      	movs	r3, #0
 80096c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80096c4:	2224      	movs	r2, #36	@ 0x24
 80096c6:	89a3      	ldrh	r3, [r4, #12]
 80096c8:	4393      	bics	r3, r2
 80096ca:	81a3      	strh	r3, [r4, #12]
 80096cc:	2300      	movs	r3, #0
 80096ce:	6063      	str	r3, [r4, #4]
 80096d0:	6923      	ldr	r3, [r4, #16]
 80096d2:	6023      	str	r3, [r4, #0]
 80096d4:	2308      	movs	r3, #8
 80096d6:	89a2      	ldrh	r2, [r4, #12]
 80096d8:	4313      	orrs	r3, r2
 80096da:	81a3      	strh	r3, [r4, #12]
 80096dc:	6923      	ldr	r3, [r4, #16]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d10b      	bne.n	80096fa <__swsetup_r+0x86>
 80096e2:	21a0      	movs	r1, #160	@ 0xa0
 80096e4:	2280      	movs	r2, #128	@ 0x80
 80096e6:	89a3      	ldrh	r3, [r4, #12]
 80096e8:	0089      	lsls	r1, r1, #2
 80096ea:	0092      	lsls	r2, r2, #2
 80096ec:	400b      	ands	r3, r1
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d003      	beq.n	80096fa <__swsetup_r+0x86>
 80096f2:	0021      	movs	r1, r4
 80096f4:	0028      	movs	r0, r5
 80096f6:	f000 f845 	bl	8009784 <__smakebuf_r>
 80096fa:	230c      	movs	r3, #12
 80096fc:	5ee2      	ldrsh	r2, [r4, r3]
 80096fe:	2101      	movs	r1, #1
 8009700:	0013      	movs	r3, r2
 8009702:	400b      	ands	r3, r1
 8009704:	420a      	tst	r2, r1
 8009706:	d00b      	beq.n	8009720 <__swsetup_r+0xac>
 8009708:	2300      	movs	r3, #0
 800970a:	60a3      	str	r3, [r4, #8]
 800970c:	6963      	ldr	r3, [r4, #20]
 800970e:	425b      	negs	r3, r3
 8009710:	61a3      	str	r3, [r4, #24]
 8009712:	2000      	movs	r0, #0
 8009714:	6923      	ldr	r3, [r4, #16]
 8009716:	4283      	cmp	r3, r0
 8009718:	d101      	bne.n	800971e <__swsetup_r+0xaa>
 800971a:	0613      	lsls	r3, r2, #24
 800971c:	d4be      	bmi.n	800969c <__swsetup_r+0x28>
 800971e:	bd70      	pop	{r4, r5, r6, pc}
 8009720:	0791      	lsls	r1, r2, #30
 8009722:	d400      	bmi.n	8009726 <__swsetup_r+0xb2>
 8009724:	6963      	ldr	r3, [r4, #20]
 8009726:	60a3      	str	r3, [r4, #8]
 8009728:	e7f3      	b.n	8009712 <__swsetup_r+0x9e>
 800972a:	46c0      	nop			@ (mov r8, r8)
 800972c:	20000018 	.word	0x20000018

08009730 <__swhatbuf_r>:
 8009730:	b570      	push	{r4, r5, r6, lr}
 8009732:	000e      	movs	r6, r1
 8009734:	001d      	movs	r5, r3
 8009736:	230e      	movs	r3, #14
 8009738:	5ec9      	ldrsh	r1, [r1, r3]
 800973a:	0014      	movs	r4, r2
 800973c:	b096      	sub	sp, #88	@ 0x58
 800973e:	2900      	cmp	r1, #0
 8009740:	da0c      	bge.n	800975c <__swhatbuf_r+0x2c>
 8009742:	89b2      	ldrh	r2, [r6, #12]
 8009744:	2380      	movs	r3, #128	@ 0x80
 8009746:	0011      	movs	r1, r2
 8009748:	4019      	ands	r1, r3
 800974a:	421a      	tst	r2, r3
 800974c:	d114      	bne.n	8009778 <__swhatbuf_r+0x48>
 800974e:	2380      	movs	r3, #128	@ 0x80
 8009750:	00db      	lsls	r3, r3, #3
 8009752:	2000      	movs	r0, #0
 8009754:	6029      	str	r1, [r5, #0]
 8009756:	6023      	str	r3, [r4, #0]
 8009758:	b016      	add	sp, #88	@ 0x58
 800975a:	bd70      	pop	{r4, r5, r6, pc}
 800975c:	466a      	mov	r2, sp
 800975e:	f000 f853 	bl	8009808 <_fstat_r>
 8009762:	2800      	cmp	r0, #0
 8009764:	dbed      	blt.n	8009742 <__swhatbuf_r+0x12>
 8009766:	23f0      	movs	r3, #240	@ 0xf0
 8009768:	9901      	ldr	r1, [sp, #4]
 800976a:	021b      	lsls	r3, r3, #8
 800976c:	4019      	ands	r1, r3
 800976e:	4b04      	ldr	r3, [pc, #16]	@ (8009780 <__swhatbuf_r+0x50>)
 8009770:	18c9      	adds	r1, r1, r3
 8009772:	424b      	negs	r3, r1
 8009774:	4159      	adcs	r1, r3
 8009776:	e7ea      	b.n	800974e <__swhatbuf_r+0x1e>
 8009778:	2100      	movs	r1, #0
 800977a:	2340      	movs	r3, #64	@ 0x40
 800977c:	e7e9      	b.n	8009752 <__swhatbuf_r+0x22>
 800977e:	46c0      	nop			@ (mov r8, r8)
 8009780:	ffffe000 	.word	0xffffe000

08009784 <__smakebuf_r>:
 8009784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009786:	2602      	movs	r6, #2
 8009788:	898b      	ldrh	r3, [r1, #12]
 800978a:	0005      	movs	r5, r0
 800978c:	000c      	movs	r4, r1
 800978e:	b085      	sub	sp, #20
 8009790:	4233      	tst	r3, r6
 8009792:	d007      	beq.n	80097a4 <__smakebuf_r+0x20>
 8009794:	0023      	movs	r3, r4
 8009796:	3347      	adds	r3, #71	@ 0x47
 8009798:	6023      	str	r3, [r4, #0]
 800979a:	6123      	str	r3, [r4, #16]
 800979c:	2301      	movs	r3, #1
 800979e:	6163      	str	r3, [r4, #20]
 80097a0:	b005      	add	sp, #20
 80097a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097a4:	ab03      	add	r3, sp, #12
 80097a6:	aa02      	add	r2, sp, #8
 80097a8:	f7ff ffc2 	bl	8009730 <__swhatbuf_r>
 80097ac:	9f02      	ldr	r7, [sp, #8]
 80097ae:	9001      	str	r0, [sp, #4]
 80097b0:	0039      	movs	r1, r7
 80097b2:	0028      	movs	r0, r5
 80097b4:	f7fe ff26 	bl	8008604 <_malloc_r>
 80097b8:	2800      	cmp	r0, #0
 80097ba:	d108      	bne.n	80097ce <__smakebuf_r+0x4a>
 80097bc:	220c      	movs	r2, #12
 80097be:	5ea3      	ldrsh	r3, [r4, r2]
 80097c0:	059a      	lsls	r2, r3, #22
 80097c2:	d4ed      	bmi.n	80097a0 <__smakebuf_r+0x1c>
 80097c4:	2203      	movs	r2, #3
 80097c6:	4393      	bics	r3, r2
 80097c8:	431e      	orrs	r6, r3
 80097ca:	81a6      	strh	r6, [r4, #12]
 80097cc:	e7e2      	b.n	8009794 <__smakebuf_r+0x10>
 80097ce:	2380      	movs	r3, #128	@ 0x80
 80097d0:	89a2      	ldrh	r2, [r4, #12]
 80097d2:	6020      	str	r0, [r4, #0]
 80097d4:	4313      	orrs	r3, r2
 80097d6:	81a3      	strh	r3, [r4, #12]
 80097d8:	9b03      	ldr	r3, [sp, #12]
 80097da:	6120      	str	r0, [r4, #16]
 80097dc:	6167      	str	r7, [r4, #20]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d00c      	beq.n	80097fc <__smakebuf_r+0x78>
 80097e2:	0028      	movs	r0, r5
 80097e4:	230e      	movs	r3, #14
 80097e6:	5ee1      	ldrsh	r1, [r4, r3]
 80097e8:	f000 f820 	bl	800982c <_isatty_r>
 80097ec:	2800      	cmp	r0, #0
 80097ee:	d005      	beq.n	80097fc <__smakebuf_r+0x78>
 80097f0:	2303      	movs	r3, #3
 80097f2:	89a2      	ldrh	r2, [r4, #12]
 80097f4:	439a      	bics	r2, r3
 80097f6:	3b02      	subs	r3, #2
 80097f8:	4313      	orrs	r3, r2
 80097fa:	81a3      	strh	r3, [r4, #12]
 80097fc:	89a3      	ldrh	r3, [r4, #12]
 80097fe:	9a01      	ldr	r2, [sp, #4]
 8009800:	4313      	orrs	r3, r2
 8009802:	81a3      	strh	r3, [r4, #12]
 8009804:	e7cc      	b.n	80097a0 <__smakebuf_r+0x1c>
	...

08009808 <_fstat_r>:
 8009808:	2300      	movs	r3, #0
 800980a:	b570      	push	{r4, r5, r6, lr}
 800980c:	4d06      	ldr	r5, [pc, #24]	@ (8009828 <_fstat_r+0x20>)
 800980e:	0004      	movs	r4, r0
 8009810:	0008      	movs	r0, r1
 8009812:	0011      	movs	r1, r2
 8009814:	602b      	str	r3, [r5, #0]
 8009816:	f7fa fa1e 	bl	8003c56 <_fstat>
 800981a:	1c43      	adds	r3, r0, #1
 800981c:	d103      	bne.n	8009826 <_fstat_r+0x1e>
 800981e:	682b      	ldr	r3, [r5, #0]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d000      	beq.n	8009826 <_fstat_r+0x1e>
 8009824:	6023      	str	r3, [r4, #0]
 8009826:	bd70      	pop	{r4, r5, r6, pc}
 8009828:	20000560 	.word	0x20000560

0800982c <_isatty_r>:
 800982c:	2300      	movs	r3, #0
 800982e:	b570      	push	{r4, r5, r6, lr}
 8009830:	4d06      	ldr	r5, [pc, #24]	@ (800984c <_isatty_r+0x20>)
 8009832:	0004      	movs	r4, r0
 8009834:	0008      	movs	r0, r1
 8009836:	602b      	str	r3, [r5, #0]
 8009838:	f7fa fa1b 	bl	8003c72 <_isatty>
 800983c:	1c43      	adds	r3, r0, #1
 800983e:	d103      	bne.n	8009848 <_isatty_r+0x1c>
 8009840:	682b      	ldr	r3, [r5, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d000      	beq.n	8009848 <_isatty_r+0x1c>
 8009846:	6023      	str	r3, [r4, #0]
 8009848:	bd70      	pop	{r4, r5, r6, pc}
 800984a:	46c0      	nop			@ (mov r8, r8)
 800984c:	20000560 	.word	0x20000560

08009850 <_raise_r>:
 8009850:	b570      	push	{r4, r5, r6, lr}
 8009852:	0004      	movs	r4, r0
 8009854:	000d      	movs	r5, r1
 8009856:	291f      	cmp	r1, #31
 8009858:	d904      	bls.n	8009864 <_raise_r+0x14>
 800985a:	2316      	movs	r3, #22
 800985c:	6003      	str	r3, [r0, #0]
 800985e:	2001      	movs	r0, #1
 8009860:	4240      	negs	r0, r0
 8009862:	bd70      	pop	{r4, r5, r6, pc}
 8009864:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8009866:	2b00      	cmp	r3, #0
 8009868:	d004      	beq.n	8009874 <_raise_r+0x24>
 800986a:	008a      	lsls	r2, r1, #2
 800986c:	189b      	adds	r3, r3, r2
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	2a00      	cmp	r2, #0
 8009872:	d108      	bne.n	8009886 <_raise_r+0x36>
 8009874:	0020      	movs	r0, r4
 8009876:	f000 f831 	bl	80098dc <_getpid_r>
 800987a:	002a      	movs	r2, r5
 800987c:	0001      	movs	r1, r0
 800987e:	0020      	movs	r0, r4
 8009880:	f000 f81a 	bl	80098b8 <_kill_r>
 8009884:	e7ed      	b.n	8009862 <_raise_r+0x12>
 8009886:	2a01      	cmp	r2, #1
 8009888:	d009      	beq.n	800989e <_raise_r+0x4e>
 800988a:	1c51      	adds	r1, r2, #1
 800988c:	d103      	bne.n	8009896 <_raise_r+0x46>
 800988e:	2316      	movs	r3, #22
 8009890:	6003      	str	r3, [r0, #0]
 8009892:	2001      	movs	r0, #1
 8009894:	e7e5      	b.n	8009862 <_raise_r+0x12>
 8009896:	2100      	movs	r1, #0
 8009898:	0028      	movs	r0, r5
 800989a:	6019      	str	r1, [r3, #0]
 800989c:	4790      	blx	r2
 800989e:	2000      	movs	r0, #0
 80098a0:	e7df      	b.n	8009862 <_raise_r+0x12>
	...

080098a4 <raise>:
 80098a4:	b510      	push	{r4, lr}
 80098a6:	4b03      	ldr	r3, [pc, #12]	@ (80098b4 <raise+0x10>)
 80098a8:	0001      	movs	r1, r0
 80098aa:	6818      	ldr	r0, [r3, #0]
 80098ac:	f7ff ffd0 	bl	8009850 <_raise_r>
 80098b0:	bd10      	pop	{r4, pc}
 80098b2:	46c0      	nop			@ (mov r8, r8)
 80098b4:	20000018 	.word	0x20000018

080098b8 <_kill_r>:
 80098b8:	2300      	movs	r3, #0
 80098ba:	b570      	push	{r4, r5, r6, lr}
 80098bc:	4d06      	ldr	r5, [pc, #24]	@ (80098d8 <_kill_r+0x20>)
 80098be:	0004      	movs	r4, r0
 80098c0:	0008      	movs	r0, r1
 80098c2:	0011      	movs	r1, r2
 80098c4:	602b      	str	r3, [r5, #0]
 80098c6:	f7fa f966 	bl	8003b96 <_kill>
 80098ca:	1c43      	adds	r3, r0, #1
 80098cc:	d103      	bne.n	80098d6 <_kill_r+0x1e>
 80098ce:	682b      	ldr	r3, [r5, #0]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d000      	beq.n	80098d6 <_kill_r+0x1e>
 80098d4:	6023      	str	r3, [r4, #0]
 80098d6:	bd70      	pop	{r4, r5, r6, pc}
 80098d8:	20000560 	.word	0x20000560

080098dc <_getpid_r>:
 80098dc:	b510      	push	{r4, lr}
 80098de:	f7fa f954 	bl	8003b8a <_getpid>
 80098e2:	bd10      	pop	{r4, pc}

080098e4 <_init>:
 80098e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098e6:	46c0      	nop			@ (mov r8, r8)
 80098e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ea:	bc08      	pop	{r3}
 80098ec:	469e      	mov	lr, r3
 80098ee:	4770      	bx	lr

080098f0 <_fini>:
 80098f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098f2:	46c0      	nop			@ (mov r8, r8)
 80098f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098f6:	bc08      	pop	{r3}
 80098f8:	469e      	mov	lr, r3
 80098fa:	4770      	bx	lr
